uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t, void);

  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2, 0);
  }
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *__p)
{
  v2 = (void (*)(void, void *, void, void))__p[5];
  if (v2) {
    v2(0, __p + 1, 0, 0);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  v1 = *(uint64_t (**)(void, uint64_t, void, void))(result + 40);
  if (v1) {
    return v1(0, result + 8, 0, 0);
  }
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F146F678;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2 + 8, 0);
  }
  return result;
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  v2 = (char *)operator new(0x30uLL);
  *(void *)v2 = &unk_1F146F678;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = 0;
  v3 = *(void (**)(uint64_t, uint64_t, char *, void))(a1 + 40);
  if (v3) {
    v3(1, a1 + 8, v2 + 8, 0);
  }
  return v2;
}

void sub_1BAD4A40C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146F678;
  v1 = (void (*)(void, void *, void, void))a1[5];
  if (v1) {
    v1(0, a1 + 1, 0, 0);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146F678;
  v2 = (void (*)(void, void *, void, void))a1[5];
  if (v2) {
    v2(0, a1 + 1, 0, 0);
  }
  return a1;
}

void AMCP::Null::Boolean_Control::~Boolean_Control(std::__shared_mutex_base *this)
{
  AMCP::Null::Object::~Object(this);

  JUMPOUT(0x1C1859840);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Boolean_Control>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::Null::Boolean_Control>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FC18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Null::Boolean_Control>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FC18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMCP::Null::Selector_Control::do_set_property(AMCP::Null::Selector_Control *this, int a2, const AMCP::Address *a3, const AMCP::Thing *a4, int16x8_t a5)
{
  if (*(_DWORD *)a3 == 1935893353)
  {
    if (!*((void *)this + 6))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    a5.i64[0] = 0x676C6F6273636169;
    uint64_t v30 = 0x676C6F6273636169;
    LODWORD(v31) = 0;
    AMCP::Address::to_string((std::string *)__p, (unsigned int *)&v30, a5);
    if ((SBYTE7(v33) & 0x80u) == 0) {
      v7 = __p;
    }
    else {
      v7 = (void **)__p[0];
    }
    if (v7)
    {
      if ((SBYTE7(v33) & 0x80u) == 0) {
        CFIndex v8 = BYTE7(v33);
      }
      else {
        CFIndex v8 = (CFIndex)__p[1];
      }
      CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)v7, v8, 0x8000100u, 0);
      if (!v9)
      {
        v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v22, "Could not construct");
        __cxa_throw(v22, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v35, *((CFDictionaryRef *)this + 6), v9);
      CFRelease(v9);
    }
    else
    {
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v35, *((CFDictionaryRef *)this + 6), 0);
    }
    if (SBYTE7(v33) < 0) {
      operator delete(__p[0]);
    }
    if (!v36)
    {
      std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v35);
      return 1;
    }
    v34 = 0;
    *(_OWORD *)__p = 0u;
    long long v33 = 0u;
    AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef&>((uint64_t)__p, &v35);
    AMCP::Thing::convert_to<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(&v30, (uint64_t)__p);
    AMCP::Thing::convert_to<std::vector<unsigned int>>(&v28, (uint64_t)a4);
    v11 = v28;
    if (v28 != v29)
    {
      if ((_DWORD *)v30 == v31)
      {
LABEL_37:
        int v20 = 1;
        goto LABEL_51;
      }
      v12 = v28;
      do
      {
        v13 = (_DWORD *)v30;
        while (*v13 != *(_DWORD *)v12)
        {
          v13 += 4;
          if (v13 == v31) {
            goto LABEL_37;
          }
        }
        v12 = (void **)((char *)v12 + 4);
      }
      while (v12 != v29);
    }
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, *((CFDictionaryRef *)this + 6));
    AMCP::make_description_from_thing((AMCP *)&v27, a4);
    v16 = v27;
    if (v27 || !CFArrayGetTypeID())
    {
      v15.i64[0] = 0x676C6F6273636369;
      uint64_t v24 = 0x676C6F6273636369;
      int v25 = 0;
      AMCP::Address::to_string(&cf, (unsigned int *)&v24, v15);
      if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string cf = &cf;
      }
      else {
        p_std::string cf = (std::string *)cf.__r_.__value_.__r.__words[0];
      }
      if (p_cf)
      {
        if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFIndex size = HIBYTE(cf.__r_.__value_.__r.__words[2]);
        }
        else {
          CFIndex size = cf.__r_.__value_.__l.__size_;
        }
        CFStringRef v19 = CFStringCreateWithBytes(0, (const UInt8 *)p_cf, size, 0x8000100u, 0);
        if (!v19)
        {
          v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v23, "Could not construct");
          __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(MutableCopy, v19, v16);
        CFRelease(v19);
      }
      else
      {
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(MutableCopy, 0, v16);
      }
      if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(cf.__r_.__value_.__l.__data_);
      }
      mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&cf, MutableCopy);
      (*(void (**)(AMCP::Null::Selector_Control *, std::string *))(*(void *)this + 24))(this, &cf);
      if (cf.__r_.__value_.__r.__words[0]) {
        CFRelease(cf.__r_.__value_.__l.__data_);
      }
      AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*((void *)this + 1) + 32), *((_DWORD *)this + 22));
      if (v16) {
        CFRelease(v16);
      }
      int v20 = 0;
      if (!MutableCopy) {
        goto LABEL_51;
      }
    }
    else
    {
      int v20 = 1;
      if (!MutableCopy) {
        goto LABEL_51;
      }
    }
    CFRelease(MutableCopy);
LABEL_51:
    if (v11) {
      operator delete(v11);
    }
    v28 = (void **)&v30;
    std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&v28);
    if (v34) {
      v34(0, __p, 0, 0);
    }
    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v35);
    if (v20) {
      return 1;
    }
    else {
      return 257;
    }
  }

  return AMCP::Null::Object::do_set_property(this, a2, a3, a4);
}

void sub_1BAD4A9E4(void *a1)
{
}

uint64_t AMCP::Null::Selector_Control::populate_core@<X0>(AMCP::Null::Selector_Control *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  AMCP::Null::Control::populate_core((CFDictionaryRef *)this, a2, a3);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v41, *((void *)this + 3), *((std::__shared_weak_count **)this + 4));
  v39[0] = 0;
  char v40 = 0;
  uint64_t v6 = v41;
  v5 = v42;
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  strcpy((char *)v43, "iccsbolg");
  BYTE1(v43[2]) = 0;
  HIWORD(v43[2]) = 0;
  v54 = 0;
  long long v52 = 0u;
  long long v53 = 0u;
  if (!*((void *)this + 6))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string((std::string *)__p, v43, (int16x8_t)0);
  if ((SBYTE7(v56) & 0x80u) == 0) {
    v7 = __p;
  }
  else {
    v7 = (void **)__p[0];
  }
  if (v7)
  {
    if ((SBYTE7(v56) & 0x80u) == 0) {
      CFIndex v8 = BYTE7(v56);
    }
    else {
      CFIndex v8 = (CFIndex)__p[1];
    }
    CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)v7, v8, 0x8000100u, 0);
    if (!v9)
    {
      CFTypeRef v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v35, "Could not construct");
      __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v46, *((CFDictionaryRef *)this + 6), v9);
    CFRelease(v9);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v46, *((CFDictionaryRef *)this + 6), 0);
  }
  if (SBYTE7(v56) < 0) {
    operator delete(__p[0]);
  }
  if (v47)
  {
    AMCP::make_thing_from_description((AMCP *)__p, &v46);
    AMCP::swap((AMCP::Thing *)__p, (AMCP::Thing *)&v52, v10);
    if (v57) {
      v57(0, (uint64_t)__p, 0, 0);
    }
  }
  if (v54)
  {
    uint64_t v37 = *(void *)&v43[1];
    v50 = 0;
    long long v48 = 0u;
    long long v49 = 0u;
    v54(1, &v52, &v48, 0);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(v51[0]) = 1935893353;
    *(void *)((char *)v51 + 4) = v37;
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v44, SHIDWORD(v37), v51[0]);
    uint64_t v11 = v44;
    unint64_t v12 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    long long v60 = 0u;
    long long v61 = 0u;
    v62 = 0;
    if (v50) {
      v50(2, &v48, &v60, 0);
    }
    *((void *)&v68 + 1) = 0;
    v13 = (char *)operator new(0x30uLL);
    *(void *)v13 = &unk_1F146F7F8;
    *(_OWORD *)(v13 + 8) = 0u;
    *(_OWORD *)(v13 + 24) = 0u;
    *((void *)v13 + 5) = 0;
    if (v62) {
      v62(2, &v60, v13 + 8, 0);
    }
    *((void *)&v68 + 1) = v13;
    *(_OWORD *)__p = 0u;
    long long v56 = 0u;
    v57 = 0;
    std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v67);
    v57 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v11, v12, (AMCP *)__p);
    if (v57) {
      v57(0, (uint64_t)__p, 0, 0);
    }
    std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](&v67);
    if (v62) {
      v62(0, &v60, 0, 0);
    }
    AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(v11);
    unint64_t v14 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    *((void *)&v61 + 1) = 0;
    int16x8_t v15 = operator new(0x28uLL);
    *int16x8_t v15 = &unk_1F146F878;
    v15[1] = v6;
    v15[2] = v5;
    v15[3] = 0x676C6F6273636369;
    *((_DWORD *)v15 + 8) = HIDWORD(v37);
    *((void *)&v61 + 1) = v15;
    *(_OWORD *)__p = 0u;
    long long v56 = 0u;
    v57 = 0;
    std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v60);
    v57 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v11, v14, (AMCP *)__p);
    if (v57) {
      v57(0, (uint64_t)__p, 0, 0);
    }
    v16 = std::__function::__value_func<void ()(AMCP::Thing const&)>::~__value_func[abi:ne180100](&v60);
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)v16, v11);
    uint64_t v63 = *(void *)(v11 + 40);
    int v64 = *(_DWORD *)(v11 + 48);
    unint64_t v17 = AMCP::Implementation::get_type_marker<std::function<void ()(std::vector<unsigned int> const&)>>();
    long long v18 = v60;
    long long v60 = 0uLL;
    *(_OWORD *)__p = v18;
    long long v56 = v61;
    LODWORD(v57) = v62;
    if (*((void *)&v61 + 1))
    {
      unint64_t v19 = *(void *)(v61 + 8);
      if ((*((void *)&v18 + 1) & (*((void *)&v18 + 1) - 1)) != 0)
      {
        if (v19 >= *((void *)&v18 + 1)) {
          v19 %= *((void *)&v18 + 1);
        }
      }
      else
      {
        v19 &= *((void *)&v18 + 1) - 1;
      }
      *(void *)(v18 + 8 * v19) = &v56;
      long long v61 = 0uLL;
    }
    uint64_t v58 = v63;
    int v59 = v64;
    v66 = 0;
    int v20 = operator new(0x40uLL);
    *int v20 = &unk_1F146F8F8;
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v20 + 1), (uint64_t *)__p);
    v20[6] = v58;
    *((_DWORD *)v20 + 14) = v59;
    v66 = v20;
    long long v67 = 0u;
    long long v68 = 0u;
    v69 = 0;
    std::__function::__value_func<void ()(std::vector<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)&v67, (uint64_t)v65);
    v69 = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::vector<unsigned int> const&)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v11, v17, (AMCP *)&v67);
    if (v69) {
      v69(0, (uint64_t)&v67, 0, 0);
    }
    std::__function::__value_func<void ()(std::vector<unsigned int> const&)>::~__value_func[abi:ne180100](v65);
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v60);
    if (v50) {
      v50(0, &v48, 0, 0);
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v44 = 0;
    v45 = 0;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v46);
  if (v54) {
    v54(0, &v52, 0, 0);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v11) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v11 + 40), &v44);
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v39);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  LOBYTE(v60) = 0;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (char *)&v60, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)__p[0] + 10, __p);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  v39[0] = 0;
  char v40 = 0;
  strcpy((char *)v43, "iacsbolg");
  BYTE1(v43[2]) = 0;
  HIWORD(v43[2]) = 0;
  v50 = 0;
  long long v48 = 0u;
  long long v49 = 0u;
  if (!*((void *)this + 6))
  {
    v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v34, "Could not construct");
    __cxa_throw(v34, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string((std::string *)__p, v43, (int16x8_t)0);
  if ((SBYTE7(v56) & 0x80u) == 0) {
    v21 = __p;
  }
  else {
    v21 = (void **)__p[0];
  }
  if (v21)
  {
    if ((SBYTE7(v56) & 0x80u) == 0) {
      CFIndex v22 = BYTE7(v56);
    }
    else {
      CFIndex v22 = (CFIndex)__p[1];
    }
    CFStringRef v23 = CFStringCreateWithBytes(0, (const UInt8 *)v21, v22, 0x8000100u, 0);
    if (!v23)
    {
      char v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v36, "Could not construct");
      __cxa_throw(v36, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v46, *((CFDictionaryRef *)this + 6), v23);
    CFRelease(v23);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v46, *((CFDictionaryRef *)this + 6), 0);
  }
  if (SBYTE7(v56) < 0) {
    operator delete(__p[0]);
  }
  if (!v47) {
    goto LABEL_83;
  }
  AMCP::make_thing_from_description((AMCP *)__p, &v46);
  AMCP::swap((AMCP::Thing *)__p, (AMCP::Thing *)&v48, v24);
  if (v57) {
    v57(0, (uint64_t)__p, 0, 0);
  }
  if (v50)
  {
    LODWORD(v51[0]) = 1935892841;
    int v38 = v43[2];
    *(double *)((char *)v51 + 4) = *(double *)&v43[1];
    v54 = 0;
    long long v52 = 0u;
    long long v53 = 0u;
    v50(1, &v48, &v52, 0);
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v44, v38, v51[0]);
    uint64_t v25 = v44;
    unint64_t v26 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    long long v60 = 0u;
    long long v61 = 0u;
    v62 = 0;
    if (v54) {
      v54(1, &v52, &v60, 0);
    }
    *((void *)&v68 + 1) = 0;
    v27 = (char *)operator new(0x30uLL);
    *(void *)v27 = &unk_1F146F978;
    *(_OWORD *)(v27 + 8) = 0u;
    *(_OWORD *)(v27 + 24) = 0u;
    *((void *)v27 + 5) = 0;
    if (v62) {
      v62(1, &v60, v27 + 8, 0);
    }
    *((void *)&v68 + 1) = v27;
    *(_OWORD *)__p = 0u;
    long long v56 = 0u;
    v57 = 0;
    std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v67);
    v57 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v25, v26, (AMCP *)__p);
    if (v57) {
      v57(0, (uint64_t)__p, 0, 0);
    }
    std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](&v67);
    if (v62) {
      v62(0, &v60, 0, 0);
    }
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v60, v25);
    uint64_t v63 = *(void *)(v25 + 40);
    int v64 = *(_DWORD *)(v25 + 48);
    unint64_t v28 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>();
    long long v29 = v60;
    long long v60 = 0uLL;
    *(_OWORD *)__p = v29;
    long long v56 = v61;
    LODWORD(v57) = v62;
    if (*((void *)&v61 + 1))
    {
      unint64_t v30 = *(void *)(v61 + 8);
      if ((*((void *)&v29 + 1) & (*((void *)&v29 + 1) - 1)) != 0)
      {
        if (v30 >= *((void *)&v29 + 1)) {
          v30 %= *((void *)&v29 + 1);
        }
      }
      else
      {
        v30 &= *((void *)&v29 + 1) - 1;
      }
      *(void *)(v29 + 8 * v30) = &v56;
      long long v61 = 0uLL;
    }
    uint64_t v58 = v63;
    int v59 = v64;
    v66 = 0;
    v31 = operator new(0x40uLL);
    void *v31 = &unk_1F146F9F8;
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v31 + 1), (uint64_t *)__p);
    v31[6] = v58;
    *((_DWORD *)v31 + 14) = v59;
    v66 = v31;
    long long v67 = 0u;
    long long v68 = 0u;
    v69 = 0;
    std::__function::__value_func<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::__value_func[abi:ne180100]((uint64_t)&v67, (uint64_t)v65);
    v69 = AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v25, v28, (AMCP *)&v67);
    if (v69) {
      v69(0, (uint64_t)&v67, 0, 0);
    }
    std::__function::__value_func<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::~__value_func[abi:ne180100](v65);
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v60);
    if (v54) {
      v54(0, &v52, 0, 0);
    }
  }
  else
  {
LABEL_83:
    uint64_t v25 = 0;
    uint64_t v44 = 0;
    v45 = 0;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v46);
  if (v50) {
    v50(0, &v48, 0, 0);
  }
  if (v25) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v25 + 40), &v44);
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  return std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v39);
}

void sub_1BAD4B504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  v2 = *(void (**)(void, uint64_t, void, void))(a1 + 32);
  if (v2) {
    v2(0, a1, 0, 0);
  }
  return a1;
}

uint64_t std::__function::__value_func<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      unint64_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterINSt3__16vectorINS3_5tupleIJjjN10applesauce2CF9StringRefEEEENS3_9allocatorIS9_EEEEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v4, (void *)(a1 + 8));
  uint64_t result = AMCP::Thing::convert_to<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(a2, (uint64_t)v4);
  if (v5) {
    return (void *)v5(0, v4, 0, 0);
  }
  return result;
}

void sub_1BAD4B9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(void, char *, void, void))
{
  if (a14) {
    a14(0, &a10, 0, 0);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146F9F8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  void *v3 = &unk_1F146F9F8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAD4BAE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146F9F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146F9F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyINSt3__16vectorINS3_5tupleIJjjN10applesauce2CF9StringRefEEEENS3_9allocatorIS9_EEEEEENS3_10shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2, 0);
  }
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void (*)(void, void *, void, void))__p[5];
  if (v2) {
    v2(0, __p + 1, 0, 0);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  v1 = *(uint64_t (**)(void, uint64_t, void, void))(result + 40);
  if (v1) {
    return v1(0, result + 8, 0, 0);
  }
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F146F978;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2 + 8, 0);
  }
  return result;
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F146F978;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = 0;
  v3 = *(void (**)(uint64_t, uint64_t, char *, void))(a1 + 40);
  if (v3) {
    v3(1, a1 + 8, v2 + 8, 0);
  }
  return v2;
}

void sub_1BAD4BD64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146F978;
  v1 = (void (*)(void, void *, void, void))a1[5];
  if (v1) {
    v1(0, a1 + 1, 0, 0);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146F978;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[5];
  if (v2) {
    v2(0, a1 + 1, 0, 0);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::vector<unsigned int> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(std::vector<unsigned int> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(std::vector<unsigned int> const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::vector<unsigned int> const&)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(std::vector<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::vector<unsigned int> const&)>>::dispatch;
LABEL_6:
      std::__function::__value_func<void ()(std::vector<unsigned int> const&)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(std::vector<unsigned int> const&)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(std::vector<unsigned int> const&)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      unint64_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1}>,void ()(std::vector<unsigned int> const&)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1}>,void ()(std::vector<unsigned int> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_setterINSt3__16vectorIjNS3_9allocatorIjEEEEEEvRNS0_9OperationEEUlRKS7_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1}>,void ()(std::vector<unsigned int> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  v5 = 0;
  memset(v4, 0, sizeof(v4));
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v4, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v5 = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  uint64_t result = AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v2, (uint64_t)v4);
  if (v5) {
    return v5(0, (uint64_t)v4, 0, 0);
  }
  return result;
}

void sub_1BAD4C1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(void, uint64_t *, void, void))
{
  if (a13) {
    a13(0, &a9, 0, 0);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1}>,void ()(std::vector<unsigned int> const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1}>,void ()(std::vector<unsigned int> const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1}>,void ()(std::vector<unsigned int> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146F8F8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1}>,void ()(std::vector<unsigned int> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  v3 = operator new(0x40uLL);
  void *v3 = &unk_1F146F8F8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAD4C320(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1}>,void ()(std::vector<unsigned int> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146F8F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(std::vector<unsigned int> const&)#1}>,void ()(std::vector<unsigned int> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146F8F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1935893353EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlRKSI_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  v3 = *(unsigned int **)(a1 + 16);
  if (!v3
    || (v3 = (unsigned int *)std::__shared_weak_count::lock((std::__shared_weak_count *)v3),
        (v5 = (std::__shared_weak_count *)v3) == 0)
    || (v3 = *(unsigned int **)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v7 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      CFIndex v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v9;
      *(_WORD *)long long v29 = 2080;
      *(void *)&v29[2] = "Null_Object.cpp";
      __int16 v30 = 1024;
      int v31 = 59;
      __int16 v32 = 2080;
      *(void *)long long v33 = "object_ptr.operator BOOL() == false";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no model object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v20, "no model object");
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    CFIndex v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v33[6] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    int v35 = 59;
    std::vector<void *>::vector(&v15);
    int v10 = backtrace((void **)v15, (*((void *)&v15 + 1) - (void)v15) >> 3);
    std::vector<void *>::resize((char **)&v15, v10);
    unint64_t v17 = &unk_1F148AA90;
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(unsigned int *, void, uint64_t, uint64_t))(*(void *)v3 + 40))(v3, v3[22], a1 + 24, a2);
  if (!(_BYTE)v6)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      unint64_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)long long v29 = 2080;
      *(void *)&v29[2] = "Null_Object.cpp";
      __int16 v30 = 1024;
      int v31 = 61;
      __int16 v32 = 2080;
      *(void *)long long v33 = "was_handled == Object::Was_Handled::no";
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not handled", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v20, "not handled");
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    CFIndex v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v33[6] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    int v35 = 61;
    std::vector<void *>::vector(&v15);
    int v14 = backtrace((void **)v15, (*((void *)&v15 + 1) - (void)v15) >> 3);
    std::vector<void *>::resize((char **)&v15, v14);
    unint64_t v17 = &unk_1F148AA90;
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1BAD4CAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,uint64_t a29)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F146F878;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  double result = *(double *)(a1 + 24);
  *(double *)(a2 + 24) = result;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (double *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F146F878;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  double result = *(double *)(a1 + 24);
  v2[3] = result;
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146F878;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146F878;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1935893353EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2, 0);
  }
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void (*)(void, void *, void, void))__p[5];
  if (v2) {
    v2(0, __p + 1, 0, 0);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  v1 = *(uint64_t (**)(void, uint64_t, void, void))(result + 40);
  if (v1) {
    return v1(0, result + 8, 0, 0);
  }
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F146F7F8;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2 + 8, 0);
  }
  return result;
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F146F7F8;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = 0;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, char *, void))(a1 + 40);
  if (v3) {
    v3(1, a1 + 8, v2 + 8, 0);
  }
  return v2;
}

void sub_1BAD4D010(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146F7F8;
  v1 = (void (*)(void, void *, void, void))a1[5];
  if (v1) {
    v1(0, a1 + 1, 0, 0);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935893353u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146F7F8;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[5];
  if (v2) {
    v2(0, a1 + 1, 0, 0);
  }
  return a1;
}

void AMCP::Null::Selector_Control::~Selector_Control(std::__shared_mutex_base *this)
{
  AMCP::Null::Object::~Object(this);

  JUMPOUT(0x1C1859840);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Selector_Control>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::Null::Selector_Control>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FBC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Null::Selector_Control>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FBC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMCP::Null::Stereo_Pan_Control::do_set_property(AMCP::Null::Stereo_Pan_Control *this, int a2, const AMCP::Address *a3, const AMCP::Thing *a4)
{
  if (*(_DWORD *)a3 == 1936745334)
  {
    float v5 = AMCP::Thing::convert_to<float>((uint64_t)a4);
    MutableCopy = CFDictionaryCreateMutableCopy(0, 0, *((CFDictionaryRef *)this + 6));
    v7.i64[0] = 0x676C6F6273706376;
    uint64_t v15 = 0x676C6F6273706376;
    int v16 = 0;
    AMCP::Address::to_string(&__p, (unsigned int *)&v15, v7);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (p_p)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        CFIndex size = __p.__r_.__value_.__l.__size_;
      }
      CFStringRef v10 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
      if (!v10)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    else
    {
      CFStringRef v10 = 0;
    }
    float valuePtr = fmaxf(fminf(v5, 1.0), 0.0);
    CFNumberRef v13 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
    if (!v13)
    {
      int v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v14, "Could not construct");
      __cxa_throw(v14, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v10, v13);
    CFRelease(v13);
    if (v10) {
      CFRelease(v10);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&__p, MutableCopy);
    (*(void (**)(AMCP::Null::Stereo_Pan_Control *, std::string *))(*(void *)this + 24))(this, &__p);
    if (__p.__r_.__value_.__r.__words[0]) {
      CFRelease(__p.__r_.__value_.__l.__data_);
    }
    AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*((void *)this + 1) + 32), *((_DWORD *)this + 22));
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
    return 257;
  }
  else
  {
    return AMCP::Null::Object::do_set_property(this, a2, a3, a4);
  }
}

void sub_1BAD4D418(void *a1)
{
}

uint64_t AMCP::Null::Stereo_Pan_Control::populate_core@<X0>(AMCP::Null::Stereo_Pan_Control *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  AMCP::Null::Control::populate_core((CFDictionaryRef *)this, a2, a3);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v28, *((void *)this + 3), *((std::__shared_weak_count **)this + 4));
  v26[0] = 0;
  char v27 = 0;
  uint64_t v6 = v28;
  float v5 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  strcpy((char *)v30, "vcpsbolg");
  BYTE1(v30[2]) = 0;
  HIWORD(v30[2]) = 0;
  int v38 = 0;
  memset(v37, 0, sizeof(v37));
  if (!*((void *)this + 6))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string((std::string *)__p, v30, (int16x8_t)0);
  if ((SBYTE7(v41) & 0x80u) == 0) {
    int16x8_t v7 = __p;
  }
  else {
    int16x8_t v7 = (void **)__p[0];
  }
  if (v7)
  {
    if ((SBYTE7(v41) & 0x80u) == 0) {
      CFIndex v8 = BYTE7(v41);
    }
    else {
      CFIndex v8 = (CFIndex)__p[1];
    }
    CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)v7, v8, 0x8000100u, 0);
    if (!v9)
    {
      uint64_t v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v23, "Could not construct");
      __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v35, *((CFDictionaryRef *)this + 6), v9);
    CFRelease(v9);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v35, *((CFDictionaryRef *)this + 6), 0);
  }
  if (SBYTE7(v41) < 0) {
    operator delete(__p[0]);
  }
  if (v36)
  {
    AMCP::make_thing_from_description((AMCP *)__p, &v35);
    AMCP::swap((AMCP::Thing *)__p, (AMCP::Thing *)v37, v10);
    if (v42) {
      v42(0, (uint64_t)__p, 0, 0);
    }
  }
  if (v38)
  {
    uint64_t v25 = *(void *)&v30[1];
    v34 = 0;
    memset(v33, 0, sizeof(v33));
    v38(1, v37, v33, 0);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(v39[0]) = 1936745334;
    *(void *)((char *)v39 + 4) = v25;
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v31, SHIDWORD(v25), v39[0]);
    uint64_t v11 = v31;
    unint64_t v12 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    long long v45 = 0u;
    long long v46 = 0u;
    char v47 = 0;
    if (v34) {
      v34(2, v33, &v45, 0);
    }
    uint64_t v44 = 0;
    CFNumberRef v13 = (char *)operator new(0x30uLL);
    *(void *)CFNumberRef v13 = &unk_1F146FA78;
    *(_OWORD *)(v13 + 8) = 0u;
    *(_OWORD *)(v13 + 24) = 0u;
    *((void *)v13 + 5) = 0;
    if (v47) {
      v47(2, &v45, v13 + 8, 0);
    }
    uint64_t v44 = v13;
    *(_OWORD *)std::string __p = 0u;
    long long v41 = 0u;
    v42 = 0;
    std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)v43);
    v42 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v11, v12, (AMCP *)__p);
    if (v42) {
      v42(0, (uint64_t)__p, 0, 0);
    }
    std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v43);
    if (v47) {
      v47(0, &v45, 0, 0);
    }
    AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(v11);
    unint64_t v14 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    *((void *)&v46 + 1) = 0;
    uint64_t v15 = operator new(0x28uLL);
    *uint64_t v15 = &unk_1F146FAF8;
    v15[1] = v6;
    v15[2] = v5;
    v15[3] = 0x676C6F6273706376;
    *((_DWORD *)v15 + 8) = HIDWORD(v25);
    *((void *)&v46 + 1) = v15;
    *(_OWORD *)std::string __p = 0u;
    long long v41 = 0u;
    v42 = 0;
    std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v45);
    v42 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v11, v14, (AMCP *)__p);
    if (v42) {
      v42(0, (uint64_t)__p, 0, 0);
    }
    std::__function::__value_func<void ()(AMCP::Thing const&)>::~__value_func[abi:ne180100](&v45);
    AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(v11);
    if (v34) {
      v34(0, v33, 0, 0);
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v31 = 0;
    __int16 v32 = 0;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v35);
  if (v38) {
    v38(0, v37, 0, 0);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v11) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v11 + 40), &v31);
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v26);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  v26[0] = 0;
  char v27 = 0;
  strcpy((char *)v43, "ccpsbolg");
  BYTE1(v43[1]) = 0;
  WORD1(v43[1]) = 0;
  v42 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v41 = 0u;
  if (!*((void *)this + 6))
  {
    CFIndex v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "Could not construct");
    __cxa_throw(v22, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string((std::string *)&v45, (unsigned int *)v43, (int16x8_t)0);
  if ((SBYTE7(v46) & 0x80u) == 0) {
    int v16 = (const UInt8 *)&v45;
  }
  else {
    int v16 = (const UInt8 *)v45;
  }
  if (v16)
  {
    if ((SBYTE7(v46) & 0x80u) == 0) {
      CFIndex v17 = BYTE7(v46);
    }
    else {
      CFIndex v17 = *((void *)&v45 + 1);
    }
    CFStringRef v18 = CFStringCreateWithBytes(0, v16, v17, 0x8000100u, 0);
    if (!v18)
    {
      uint64_t v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v24, "Could not construct");
      __cxa_throw(v24, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)v37, *((CFDictionaryRef *)this + 6), v18);
    CFRelease(v18);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)v37, *((CFDictionaryRef *)this + 6), 0);
  }
  if (SBYTE7(v46) < 0) {
    operator delete((void *)v45);
  }
  if (!BYTE8(v37[0])) {
    goto LABEL_63;
  }
  AMCP::make_thing_from_description((AMCP *)&v45, (CFTypeRef *)v37);
  AMCP::swap((AMCP::Thing *)&v45, (AMCP::Thing *)__p, v19);
  if (v47) {
    v47(0, &v45, 0, 0);
  }
  if (v42)
  {
    LODWORD(v33[0]) = 1936745315;
    *(void *)((char *)v33 + 4) = *(void *)((char *)v43 + 4);
    AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>((uint64_t *)&v45, (uint64_t)v33, (uint64_t)__p);
  }
  else
  {
LABEL_63:
    long long v45 = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v37);
  if (v42) {
    v42(0, (uint64_t)__p, 0, 0);
  }
  if ((void)v45) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v45 + 40), &v45);
  }
  if (*((void *)&v45 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v45 + 1));
  }
  return std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v26);
}

void sub_1BAD4DB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1936745334EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlRKSI_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(unsigned int **)(a1 + 16);
  if (!v3
    || (uint64_t v3 = (unsigned int *)std::__shared_weak_count::lock((std::__shared_weak_count *)v3),
        (float v5 = (std::__shared_weak_count *)v3) == 0)
    || (uint64_t v3 = *(unsigned int **)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int16x8_t v7 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      CFIndex v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v9;
      *(_WORD *)long long v29 = 2080;
      *(void *)&v29[2] = "Null_Object.cpp";
      __int16 v30 = 1024;
      int v31 = 59;
      __int16 v32 = 2080;
      *(void *)long long v33 = "object_ptr.operator BOOL() == false";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no model object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v20, "no model object");
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    CFIndex v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v33[6] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    int v35 = 59;
    std::vector<void *>::vector(&v15);
    int v10 = backtrace((void **)v15, (*((void *)&v15 + 1) - (void)v15) >> 3);
    std::vector<void *>::resize((char **)&v15, v10);
    CFIndex v17 = &unk_1F148AA90;
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(unsigned int *, void, uint64_t, uint64_t))(*(void *)v3 + 40))(v3, v3[22], a1 + 24, a2);
  if (!(_BYTE)v6)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      unint64_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)long long v29 = 2080;
      *(void *)&v29[2] = "Null_Object.cpp";
      __int16 v30 = 1024;
      int v31 = 61;
      __int16 v32 = 2080;
      *(void *)long long v33 = "was_handled == Object::Was_Handled::no";
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not handled", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v20, "not handled");
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    CFIndex v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v33[6] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    int v35 = 61;
    std::vector<void *>::vector(&v15);
    int v14 = backtrace((void **)v15, (*((void *)&v15 + 1) - (void)v15) >> 3);
    std::vector<void *>::resize((char **)&v15, v14);
    CFIndex v17 = &unk_1F148AA90;
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1BAD4E294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,uint64_t a29)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F146FAF8;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  double result = *(double *)(a1 + 24);
  *(double *)(a2 + 24) = result;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (double *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F146FAF8;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  double result = *(double *)(a1 + 24);
  v2[3] = result;
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146FAF8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146FAF8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1936745334EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2, 0);
  }
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void (*)(void, void *, void, void))__p[5];
  if (v2) {
    v2(0, __p + 1, 0, 0);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  v1 = *(uint64_t (**)(void, uint64_t, void, void))(result + 40);
  if (v1) {
    return v1(0, result + 8, 0, 0);
  }
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F146FA78;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2 + 8, 0);
  }
  return result;
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F146FA78;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = 0;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, char *, void))(a1 + 40);
  if (v3) {
    v3(1, a1 + 8, v2 + 8, 0);
  }
  return v2;
}

void sub_1BAD4E7F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146FA78;
  v1 = (void (*)(void, void *, void, void))a1[5];
  if (v1) {
    v1(0, a1 + 1, 0, 0);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1936745334u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146FA78;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[5];
  if (v2) {
    v2(0, a1 + 1, 0, 0);
  }
  return a1;
}

void AMCP::Null::Stereo_Pan_Control::~Stereo_Pan_Control(std::__shared_mutex_base *this)
{
  AMCP::Null::Object::~Object(this);

  JUMPOUT(0x1C1859840);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Stereo_Pan_Control>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::Null::Stereo_Pan_Control>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FB78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Null::Stereo_Pan_Control>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FB78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

unint64_t AMCP::Null::make_control_marker(const __CFDictionary **this, const applesauce::CF::DictionaryRef *a2, int16x8_t a3)
{
  if (!*this)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_68;
  }
  a3.i64[0] = 0x676C6F62636C6173;
  uint64_t v29 = 0x676C6F62636C6173;
  int v30 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v29, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (p_p)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
    if (!v6)
    {
      int16x8_t v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v7, "Could not construct");
      __cxa_throw(v7, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v6 = 0;
  }
  LODWORD(valuePtr) = 0;
  CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    uint64_t v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "Could not construct");
    __cxa_throw(v25, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, *this, v6, &cf);
  CFNumberRef v8 = valuePtr;
  if (!valuePtr) {
    goto LABEL_67;
  }
  unsigned int v9 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  CFRelease(v8);
  if (cf) {
    CFRelease(cf);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!*this) {
    goto LABEL_67;
  }
  v10.i64[0] = 0x676C6F6263736370;
  uint64_t v29 = 0x676C6F6263736370;
  int v30 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v29, v10);
  uint64_t v11 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? &__p
      : (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v11)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v12 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v13 = CFStringCreateWithBytes(0, (const UInt8 *)v11, v12, 0x8000100u, 0);
    if (!v13)
    {
      int v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v14, "Could not construct");
      __cxa_throw(v14, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v13 = 0;
  }
  LODWORD(valuePtr) = 0;
  CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    int v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v26, "Could not construct");
    __cxa_throw(v26, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, *this, v13, &cf);
  CFNumberRef v15 = valuePtr;
  if (!valuePtr) {
    goto LABEL_67;
  }
  unint64_t v16 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  CFRelease(v15);
  if (cf) {
    CFRelease(cf);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!*this) {
    goto LABEL_67;
  }
  v17.i64[0] = 0x676C6F6263656C6DLL;
  uint64_t v29 = 0x676C6F6263656C6DLL;
  int v30 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v29, v17);
  long long v18 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? &__p
      : (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v18)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v19 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v20 = CFStringCreateWithBytes(0, (const UInt8 *)v18, v19, 0x8000100u, 0);
    if (!v20)
    {
      std::runtime_error v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v21, "Could not construct");
      __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v20 = 0;
  }
  LODWORD(valuePtr) = -1;
  CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    char v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v27, "Could not construct");
    __cxa_throw(v27, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, *this, v20, &cf);
  CFNumberRef v22 = valuePtr;
  if (!valuePtr)
  {
LABEL_67:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_68:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  CFRelease(v22);
  if (cf) {
    CFRelease(cf);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v9 | (v16 << 32);
}

void sub_1BAD4EEE0(void *a1)
{
}

uint64_t AMCP::Null::get_max_number_channels_for_scope(AMCP::Null *this, const __CFDictionary **a2, const applesauce::CF::DictionaryRef *a3, int16x8_t a4)
{
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_95:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  LODWORD(theArray) = 1937009955;
  HIDWORD(theArray) = this;
  int v53 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&theArray, a4);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (p_p)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v7 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
    if (!v7)
    {
      CFNumberRef v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v8, "Could not construct");
      __cxa_throw(v8, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v7 = 0;
  }
  CFTypeRef cf = 0;
  applesauce::CF::at_or<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(v56, *a2, v7, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  CFArrayRef v9 = v56[0];
  if (!v56[0]) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(v56[0]);
  CFIndex v42 = CFArrayGetCount(v9);
  if (Count)
  {
    unsigned int v44 = 0;
    unint64_t v10 = 0;
    CFArrayRef v41 = v9;
    while (1)
    {
      if (v10 == v42) {
        goto LABEL_88;
      }
      applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v54, v9, v10);
      if (!v54) {
        goto LABEL_94;
      }
      CFTypeRef cf = (CFTypeRef)0x676C6F62666D7423;
      int v51 = 0;
      AMCP::Address::to_string(&__p, (unsigned int *)&cf, v11);
      CFIndex v12 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v12)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFIndex v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          CFIndex v13 = __p.__r_.__value_.__l.__size_;
        }
        CFStringRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)v12, v13, 0x8000100u, 0);
        if (!v14)
        {
          uint64_t v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v37, "Could not construct");
          __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&theArray, (CFDictionaryRef)v54, v14);
        CFRelease(v14);
      }
      else
      {
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&theArray, (CFDictionaryRef)v54, 0);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (!v54)
      {
LABEL_94:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        goto LABEL_95;
      }
      CFTypeRef v48 = (CFTypeRef)0x676C6F62666D6174;
      int v49 = 0;
      AMCP::Address::to_string(&__p, (unsigned int *)&v48, v15);
      unint64_t v16 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v16)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFIndex v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          CFIndex v17 = __p.__r_.__value_.__l.__size_;
        }
        CFStringRef v18 = CFStringCreateWithBytes(0, (const UInt8 *)v16, v17, 0x8000100u, 0);
        if (!v18)
        {
          int v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v38, "Could not construct");
          __cxa_throw(v38, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,applesauce::CF::StringRef>(&cf, (CFDictionaryRef)v54, v18);
        CFRelease(v18);
      }
      else
      {
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,applesauce::CF::StringRef>(&cf, (CFDictionaryRef)v54, 0);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((_BYTE)v53) {
        break;
      }
      if (!(_BYTE)v51) {
        goto LABEL_81;
      }
      if (!cf) {
        goto LABEL_94;
      }
      CFStringRef v23 = CFStringCreateWithBytes(0, (const UInt8 *)"channels per frame", 18, 0x8000100u, 0);
      if (!v23)
      {
        char v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v40, "Could not construct");
        __cxa_throw(v40, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 0;
      CFTypeRef v48 = CFNumberCreate(0, kCFNumberIntType, &__p);
      if (!v48)
      {
        v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v39, "Could not construct");
        __cxa_throw(v39, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&__p, (const __CFDictionary *)cf, v23, &v48);
      uint64_t v24 = (const void *)__p.__r_.__value_.__r.__words[0];
      if (!__p.__r_.__value_.__r.__words[0]) {
        goto LABEL_94;
      }
      unsigned int v25 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)__p.__r_.__value_.__l.__data_);
      CFRelease(v24);
      if (v48) {
        CFRelease(v48);
      }
      CFRelease(v23);
LABEL_82:
      std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
      std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theArray);
      if (v54) {
        CFRelease(v54);
      }
      v44 += v25;
      ++v10;
      CFArrayRef v9 = v41;
      if (v10 == Count) {
        goto LABEL_88;
      }
    }
    CFArrayRef v19 = theArray;
    if (theArray)
    {
      CFIndex v20 = CFArrayGetCount(theArray);
      CFIndex v21 = v20;
      CFArrayRef v22 = theArray;
      if (theArray)
      {
        CFIndex v45 = CFArrayGetCount(theArray);
        if (v21) {
          goto LABEL_62;
        }
      }
      else
      {
        CFIndex v45 = 0;
        if (v20)
        {
LABEL_62:
          unsigned int v25 = 0;
          unint64_t v26 = 0;
          while (v19 != v22 || v45 != v26)
          {
            applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&__p, v19, v26);
            if (!__p.__r_.__value_.__r.__words[0]) {
              goto LABEL_94;
            }
            CFStringRef v27 = CFStringCreateWithBytes(0, (const UInt8 *)"format", 6, 0x8000100u, 0);
            if (!v27)
            {
              int v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v35, "Could not construct");
              __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            CFTypeRef valuePtr = 0;
            applesauce::CF::at_or<applesauce::CF::DictionaryRef,applesauce::CF::StringRef>(&v48, (const __CFDictionary *)__p.__r_.__value_.__l.__data_, v27, &valuePtr);
            if (valuePtr) {
              CFRelease(valuePtr);
            }
            CFRelease(v27);
            CFDictionaryRef v28 = (const __CFDictionary *)v48;
            if (!v48) {
              goto LABEL_94;
            }
            CFStringRef v29 = CFStringCreateWithBytes(0, (const UInt8 *)"channels per frame", 18, 0x8000100u, 0);
            if (!v29)
            {
              v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v34, "Could not construct");
              __cxa_throw(v34, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            LODWORD(valuePtr) = 0;
            CFTypeRef v46 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            if (!v46)
            {
              long long v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v33, "Could not construct");
              __cxa_throw(v33, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, v28, v29, &v46);
            CFTypeRef v30 = valuePtr;
            if (!valuePtr) {
              goto LABEL_94;
            }
            unsigned int v31 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
            CFRelease(v30);
            if (v46) {
              CFRelease(v46);
            }
            CFRelease(v29);
            if (v25 <= v31) {
              unsigned int v25 = v31;
            }
            CFRelease(v28);
            if (__p.__r_.__value_.__r.__words[0]) {
              CFRelease(__p.__r_.__value_.__l.__data_);
            }
            if (v21 == ++v26) {
              goto LABEL_82;
            }
          }
          goto LABEL_82;
        }
      }
    }
LABEL_81:
    unsigned int v25 = 0;
    goto LABEL_82;
  }
  unsigned int v44 = 0;
LABEL_88:
  CFRelease(v9);
  return v44;
}

void sub_1BAD4F760(void *a1)
{
}

uint64_t AMCP::Null::get_max_element_for_controls(const __CFDictionary **this, const applesauce::CF::DictionaryRef *a2, int16x8_t a3)
{
  if (!*this)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_53;
  }
  a3.i64[0] = 0x676C6F626374726CLL;
  uint64_t v27 = 0x676C6F626374726CLL;
  int v28 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v27, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (p_p)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
    if (!v6)
    {
      CFStringRef v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v7, "Could not construct");
      __cxa_throw(v7, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v6 = 0;
  }
  CFTypeRef cf = 0;
  applesauce::CF::at_or<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&theArray, *this, v6, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  CFArrayRef v8 = theArray;
  if (!theArray) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  CFIndex v10 = CFArrayGetCount(v8);
  if (Count)
  {
    CFIndex v11 = v10;
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    while (1)
    {
      if (v11 == v13) {
        goto LABEL_50;
      }
      applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&cf, v8, v13);
      if (!cf) {
        break;
      }
      uint64_t v27 = 0x676C6F6263656C6DLL;
      int v28 = 0;
      AMCP::Address::to_string(&__p, (unsigned int *)&v27, v14);
      int16x8_t v15 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v15)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFIndex v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          CFIndex v16 = __p.__r_.__value_.__l.__size_;
        }
        CFStringRef v17 = CFStringCreateWithBytes(0, (const UInt8 *)v15, v16, 0x8000100u, 0);
        if (!v17)
        {
          CFStringRef v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v23, "Could not construct");
          __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
      else
      {
        CFStringRef v17 = 0;
      }
      LODWORD(valuePtr) = 0;
      CFTypeRef v24 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      if (!v24)
      {
        CFArrayRef v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v22, "Could not construct");
        __cxa_throw(v22, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, (const __CFDictionary *)cf, v17, &v24);
      CFNumberRef v18 = valuePtr;
      if (!valuePtr) {
        break;
      }
      unsigned int v19 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
      CFRelease(v18);
      if (v24) {
        CFRelease(v24);
      }
      if (v17) {
        CFRelease(v17);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v12 <= v19) {
        uint64_t v12 = v19;
      }
      else {
        uint64_t v12 = v12;
      }
      if (cf) {
        CFRelease(cf);
      }
      if (Count == ++v13) {
        goto LABEL_50;
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_53:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v12 = 0;
LABEL_50:
  CFRelease(v8);
  return v12;
}

void sub_1BAD4FBC0(void *a1)
{
}

void std::vector<AMCP::Graph::Terminal>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    float v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        for (uint64_t i = -48; i != -96; i -= 24)
        {
          CFStringRef v7 = (void **)&v4[i];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
        }
        v4 -= 112;
      }
      while (v4 != v2);
      float v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<AMCP::Graph::Terminal>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = 0;
    *(void *)(a1 + 16) = i - 112;
    uint64_t v5 = i - 48;
    do
    {
      CFStringRef v7 = (void **)(v5 + v4);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
      v4 -= 24;
    }
    while (v4 != -48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void AMCP::Graph::Node::create_core_object(uint64_t a1, void *a2)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  switch(*(_DWORD *)(a1 + 16))
  {
    case 0:
      std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v94, *(void *)a1, *(std::__shared_weak_count **)(a1 + 8));
      uint64_t v4 = operator new(0x288uLL);
      uint64_t v5 = v4;
      v4[1] = 0;
      _OWORD v4[2] = 0;
      *uint64_t v4 = &unk_1F146FF38;
      v4[3] = &unk_1F1469380;
      *((_DWORD *)v4 + 8) = 0;
      uint64_t v6 = *((void *)&v94 + 1);
      v4[5] = v94;
      v4[6] = v6;
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
      }
      uint64_t v7 = a2[1];
      v4[7] = *a2;
      v4[8] = v7;
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      v4[9] = 0;
      v4[10] = 0;
      v4[3] = &unk_1F145C718;
      std::string::basic_string[abi:ne180100]<0>(&v106, "AudioHAL Workgroup");
      std::string::basic_string[abi:ne180100]<0>(&__p, "com.apple.coreaudio.hal.iothread");
      caulk::mach::os_workgroup_interval_managed::make_with_workload_id();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v106.__r_.__value_.__l.__data_);
      }
      v5[19] = 0;
      v5[20] = 0;
      CFArrayRef v8 = (char *)operator new(0x2F0uLL);
      *(_OWORD *)(v8 + 8) = 0u;
      *(void *)CFArrayRef v8 = &unk_1F145C7A0;
      *((_DWORD *)v8 + 8) = 0;
      *((void *)v8 + 6) = 0;
      *((void *)v8 + 14) = 0;
      *((_OWORD *)v8 + 8) = 0u;
      *((void *)v8 + 18) = 850045863;
      *(_OWORD *)(v8 + 152) = 0u;
      *(_OWORD *)(v8 + 168) = 0u;
      *(_OWORD *)(v8 + 184) = 0u;
      *(_OWORD *)(v8 + 193) = 0u;
      operator new();
    case 1:
      std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v106, *(void *)a1, *(std::__shared_weak_count **)(a1 + 8));
      CFStringRef v23 = operator new(0x48uLL);
      unsigned int v19 = v23;
      v23[1] = 0;
      v23[2] = 0;
      void *v23 = &unk_1F146FEE8;
      CFIndex v20 = v23 + 3;
      v23[3] = &unk_1F1469380;
      *((_DWORD *)v23 + 8) = 0;
      std::string::size_type size = v106.__r_.__value_.__l.__size_;
      v23[5] = v106.__r_.__value_.__r.__words[0];
      v23[6] = size;
      if (size) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(size + 16), 1uLL, memory_order_relaxed);
      }
      uint64_t v25 = a2[1];
      v23[7] = *a2;
      v23[8] = v25;
      if (v25) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
      }
      *CFIndex v20 = &unk_1F1472150;
      AMCP::IO_Core::Node::build_core((AMCP::IO_Core::Node *)(v23 + 3));
      goto LABEL_35;
    case 2:
      std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v91, *(void *)a1, *(std::__shared_weak_count **)(a1 + 8));
      CFArrayRef v9 = (char *)operator new(0x90uLL);
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = 0;
      *(void *)CFArrayRef v9 = &unk_1F146FF88;
      *((void *)v9 + 3) = &unk_1F1469380;
      *((_DWORD *)v9 + 8) = 0;
      CFIndex v10 = v91;
      CFIndex v11 = v92;
      *((void *)v9 + 5) = v91;
      *((void *)v9 + 6) = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v12 = a2[1];
      *((void *)v9 + 7) = *a2;
      *((void *)v9 + 8) = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)(v9 + 72) = 0u;
      *((void *)v9 + 3) = &unk_1F1464968;
      *(_OWORD *)(v9 + 88) = 0u;
      *(_OWORD *)(v9 + 104) = 0u;
      *(_OWORD *)(v9 + 120) = 0u;
      *((void *)v9 + 17) = 0;
      uint64_t nth_terminal = AMCP::Graph::Node::get_nth_terminal((uint64_t)v10, 0, 1u);
      long long v14 = *(_OWORD *)(nth_terminal + 16);
      *(_OWORD *)v110 = *(_OWORD *)nth_terminal;
      *(_OWORD *)&v110[16] = v14;
      *(void *)&v110[32] = *(void *)(nth_terminal + 32);
      if (*((void *)v91 + 11) - *((void *)v91 + 10) != 112)
      {
        AMCP::Log::Scope_Registry::get(v91);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v106, "com.apple.coreaudio", "AMCP");
        v78 = *(NSObject **)v106.__r_.__value_.__l.__data_;
        if (v106.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v106.__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
        {
          v79 = pthread_self();
          mach_port_t v80 = pthread_mach_thread_np(v79);
          LODWORD(v106.__r_.__value_.__l.__data_) = 67109890;
          HIDWORD(v106.__r_.__value_.__r.__words[0]) = v80;
          LOWORD(v106.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v106.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Reflector.cpp";
          WORD1(v106.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v106.__r_.__value_.__r.__words[2]) = 63;
          LOWORD(v107) = 2080;
          *(void *)((char *)&v107 + 2) = "not (graph_node->get_number_of_terminals(Direction::input) == 1)";
          _os_log_error_impl(&dword_1BAA78000, v78, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Reflector nodes only support one terminal in and one terminal out", (uint8_t *)&v106, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v93);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Reflector nodes only support one terminal in and one terminal out", (uint64_t)&v98);
        std::logic_error::logic_error(&v99, &v98);
        v99.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error((std::logic_error *)&__p, &v99);
        uint64_t v102 = 0;
        uint64_t v103 = 0;
        uint64_t v104 = 0;
        LODWORD(v105) = -1;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v106, (uint64_t)&__p);
        *((void *)&v107 + 1) = "void AMCP::IO_Core::Reflector::verify_configuration(const std::shared_ptr<AMCP::Graph::"
                                 "Node> &, const CA::StreamDescription &) const";
        v108 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Reflector.cpp";
        LODWORD(v109) = 63;
        std::vector<void *>::vector(&v94);
        int v81 = backtrace((void **)v94, (*((void *)&v94 + 1) - (void)v94) >> 3);
        std::vector<void *>::resize((char **)&v94, v81);
        v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
        *(_OWORD *)&v96.__r_.__value_.__r.__words[1] = v94;
        uint64_t v97 = v95;
        long long v94 = 0uLL;
        uint64_t v95 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      if (*((void *)v91 + 8) - *((void *)v91 + 7) != 112)
      {
        AMCP::Log::Scope_Registry::get(v91);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v106, "com.apple.coreaudio", "AMCP");
        v82 = *(NSObject **)v106.__r_.__value_.__l.__data_;
        if (v106.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v106.__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
        {
          v83 = pthread_self();
          mach_port_t v84 = pthread_mach_thread_np(v83);
          LODWORD(v106.__r_.__value_.__l.__data_) = 67109890;
          HIDWORD(v106.__r_.__value_.__r.__words[0]) = v84;
          LOWORD(v106.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v106.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Reflector.cpp";
          WORD1(v106.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v106.__r_.__value_.__r.__words[2]) = 64;
          LOWORD(v107) = 2080;
          *(void *)((char *)&v107 + 2) = "not (graph_node->get_number_of_terminals(Direction::output) == 1)";
          _os_log_error_impl(&dword_1BAA78000, v82, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Reflector nodes only support one terminal in and one terminal out", (uint8_t *)&v106, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v93);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Reflector nodes only support one terminal in and one terminal out", (uint64_t)&v98);
        std::logic_error::logic_error(&v99, &v98);
        v99.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error((std::logic_error *)&__p, &v99);
        uint64_t v102 = 0;
        uint64_t v103 = 0;
        uint64_t v104 = 0;
        LODWORD(v105) = -1;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v106, (uint64_t)&__p);
        *((void *)&v107 + 1) = "void AMCP::IO_Core::Reflector::verify_configuration(const std::shared_ptr<AMCP::Graph::"
                                 "Node> &, const CA::StreamDescription &) const";
        v108 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Reflector.cpp";
        LODWORD(v109) = 64;
        std::vector<void *>::vector(&v94);
        int v85 = backtrace((void **)v94, (*((void *)&v94 + 1) - (void)v94) >> 3);
        std::vector<void *>::resize((char **)&v94, v85);
        v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
        *(_OWORD *)&v96.__r_.__value_.__r.__words[1] = v94;
        uint64_t v97 = v95;
        long long v94 = 0uLL;
        uint64_t v95 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      uint64_t v15 = AMCP::Graph::Node::get_nth_terminal((uint64_t)v91, 0, 0);
      if (*(double *)v110 != *(double *)v15
        || (~vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vceqq_s32(*(int32x4_t *)&v110[8], *(int32x4_t *)(v15 + 8)), 0x1FuLL)), (int8x16_t)xmmword_1BAFF9640)) & 0xF) != 0|| *(_DWORD *)&v110[24] != *(_DWORD *)(v15 + 24)|| *(void *)&v110[28] != *(void *)(v15 + 28))
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v15);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v106, "com.apple.coreaudio", "AMCP");
        v74 = *(NSObject **)v106.__r_.__value_.__l.__data_;
        if (v106.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v106.__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
        {
          v75 = pthread_self();
          mach_port_t v76 = pthread_mach_thread_np(v75);
          LODWORD(v106.__r_.__value_.__l.__data_) = 67109890;
          HIDWORD(v106.__r_.__value_.__r.__words[0]) = v76;
          LOWORD(v106.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v106.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Reflector.cpp";
          WORD1(v106.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v106.__r_.__value_.__r.__words[2]) = 66;
          LOWORD(v107) = 2080;
          *(void *)((char *)&v107 + 2) = "not (format == graph_node->get_nth_terminal(0, Direction::output).get_format())";
          _os_log_error_impl(&dword_1BAA78000, v74, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Reflector node terminals must have the same format", (uint8_t *)&v106, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v93);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Reflector node terminals must have the same format", (uint64_t)&v98);
        std::logic_error::logic_error(&v99, &v98);
        v99.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error((std::logic_error *)&__p, &v99);
        uint64_t v102 = 0;
        uint64_t v103 = 0;
        uint64_t v104 = 0;
        LODWORD(v105) = -1;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v106, (uint64_t)&__p);
        *((void *)&v107 + 1) = "void AMCP::IO_Core::Reflector::verify_configuration(const std::shared_ptr<AMCP::Graph::"
                                 "Node> &, const CA::StreamDescription &) const";
        v108 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Reflector.cpp";
        LODWORD(v109) = 66;
        std::vector<void *>::vector(&v94);
        int v77 = backtrace((void **)v94, (*((void *)&v94 + 1) - (void)v94) >> 3);
        std::vector<void *>::resize((char **)&v94, v77);
        v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
        *(_OWORD *)&v96.__r_.__value_.__r.__words[1] = v94;
        uint64_t v97 = v95;
        long long v94 = 0uLL;
        uint64_t v95 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      CFIndex v16 = v91;
      int v17 = *((_DWORD *)v91 + 34);
      if (v17 == 2) {
        goto LABEL_68;
      }
      if (v17 != 1) {
        goto LABEL_111;
      }
      if (*((char *)v91 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v106, *((const std::string::value_type **)v91 + 3), *((void *)v91 + 4));
        CFIndex v16 = v91;
      }
      else
      {
        std::string v106 = *(std::string *)((unsigned char *)v91 + 1);
      }
      if (*((char *)v16 + 135) < 0) {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v16 + 14), *((void *)v16 + 15));
      }
      else {
        std::string __p = *(std::string *)((char *)v16 + 112);
      }
      char v29 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
      if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v30 = HIBYTE(v106.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v30 = v106.__r_.__value_.__l.__size_;
      }
      std::string::size_type v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      int v32 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v31 = __p.__r_.__value_.__l.__size_;
      }
      if (v30 == v31)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((*((unsigned char *)&v106.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          uint64_t v15 = memcmp(v106.__r_.__value_.__l.__data_, p_p, v106.__r_.__value_.__l.__size_);
          BOOL v42 = v15 == 0;
        }
        else if (*((unsigned char *)&v106.__r_.__value_.__s + 23))
        {
          uint64_t v34 = HIBYTE(v106.__r_.__value_.__r.__words[2]) - 1;
          int v35 = &v106;
          do
          {
            int v37 = v35->__r_.__value_.__s.__data_[0];
            int v35 = (std::string *)((char *)v35 + 1);
            int v36 = v37;
            int v39 = p_p->__r_.__value_.__s.__data_[0];
            p_p = (std::string *)((char *)p_p + 1);
            int v38 = v39;
            BOOL v41 = v34-- != 0;
            BOOL v42 = v36 == v38;
          }
          while (v36 == v38 && v41);
        }
        else
        {
          BOOL v42 = 1;
        }
      }
      else
      {
        BOOL v42 = 0;
      }
      if (v32 < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((v29 & 0x80) == 0)
        {
LABEL_67:
          if (v42) {
            goto LABEL_68;
          }
LABEL_111:
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v15);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v106, "com.apple.coreaudio", "AMCP");
          uint64_t v70 = *(NSObject **)v106.__r_.__value_.__l.__data_;
          if (v106.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v106.__r_.__value_.__l.__size_);
          }
          if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
          {
            v71 = pthread_self();
            mach_port_t v72 = pthread_mach_thread_np(v71);
            LODWORD(v106.__r_.__value_.__l.__data_) = 67109890;
            HIDWORD(v106.__r_.__value_.__r.__words[0]) = v72;
            LOWORD(v106.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v106.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Reflector.cpp";
            WORD1(v106.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(v106.__r_.__value_.__r.__words[2]) = 71;
            LOWORD(v107) = 2080;
            *(void *)((char *)&v107 + 2) = "not (clock_policy == Node_Clock_Policy::Is_Its_Own_Clock_Source || (clock_p"
                                             "olicy == Node_Clock_Policy::Is_Set_From_Clock_UID && graph_node->get_uid() "
                                             "== graph_node->get_clock_terminal()))";
            _os_log_error_impl(&dword_1BAA78000, v70, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Reflector node must be its own clock.", (uint8_t *)&v106, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v93);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Reflector node must be its own clock.", (uint64_t)&v98);
          std::logic_error::logic_error(&v99, &v98);
          v99.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)&__p, &v99);
          uint64_t v102 = 0;
          uint64_t v103 = 0;
          uint64_t v104 = 0;
          LODWORD(v105) = -1;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v106, (uint64_t)&__p);
          *((void *)&v107 + 1) = "void AMCP::IO_Core::Reflector::verify_configuration(const std::shared_ptr<AMCP::Graph"
                                   "::Node> &, const CA::StreamDescription &) const";
          v108 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Reflector.cpp";
          LODWORD(v109) = 71;
          std::vector<void *>::vector(&v94);
          int v73 = backtrace((void **)v94, (*((void *)&v94 + 1) - (void)v94) >> 3);
          std::vector<void *>::resize((char **)&v94, v73);
          v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
          *(_OWORD *)&v96.__r_.__value_.__r.__words[1] = v94;
          uint64_t v97 = v95;
          long long v94 = 0uLL;
          uint64_t v95 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
      }
      else if ((v29 & 0x80) == 0)
      {
        goto LABEL_67;
      }
      operator delete(v106.__r_.__value_.__l.__data_);
      if (!v42) {
        goto LABEL_111;
      }
LABEL_68:
      AMCP::IO_Core::Node::build_core((AMCP::IO_Core::Node *)(v9 + 24));
      *(_OWORD *)(v9 + 104) = *(_OWORD *)v110;
      *(_OWORD *)(v9 + 120) = *(_OWORD *)&v110[16];
      *((void *)v9 + 17) = *(void *)&v110[32];
      int v43 = *((_DWORD *)v9 + 8);
      double v44 = *(double *)v110;
      std::string::basic_string[abi:ne180100]<0>(&v96, "reflector timebase ");
      std::to_string(&v98, *((_DWORD *)v9 + 8));
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFIndex v45 = &v98;
      }
      else {
        CFIndex v45 = (std::string *)v98.__r_.__value_.__r.__words[0];
      }
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v46 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v46 = v98.__r_.__value_.__l.__size_;
      }
      char v47 = std::string::append(&v96, (const std::string::value_type *)v45, v46);
      long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      v106.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      int v49 = std::string::append(&v106, ":", 1uLL);
      std::string __p = *v49;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      AMCP::Graph::make_mock_timebase(&v93, v43 + 95125, 0, (uint64_t)&__p, v44);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v106.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v98.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v96.__r_.__value_.__l.__data_);
      }
      v50 = operator new(0xC8uLL);
      v50[1] = 0;
      v50[2] = 0;
      void *v50 = &unk_1F1470E18;
      *(void *)&long long v51 = AMCP::DAL::Synchronizer::Synchronizer((uint64_t)(v50 + 3), &v93);
      *((void *)&v51 + 1) = v50;
      long long v52 = (std::__shared_weak_count *)*((void *)v9 + 10);
      *(_OWORD *)(v9 + 72) = v51;
      if (v52) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v52);
      }
      long long v53 = v93;
      CFTypeRef v54 = (std::__shared_weak_count *)*((void *)&v93 + 1);
      if (*((void *)&v93 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v93 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      LODWORD(v106.__r_.__value_.__l.__data_) = 2;
      *(_OWORD *)&v106.__r_.__value_.__r.__words[1] = 0x40C0000000000000uLL;
      *(_OWORD *)v90 = v53;
      long long v107 = v53;
      v55 = operator new(0xC8uLL);
      v55[1] = 0;
      v55[2] = 0;
      void *v55 = &unk_1F14649C0;
      uint64_t v56 = AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer((uint64_t)(v55 + 3), (const CA::StreamDescription *)v110, (const AMCP::DAL::DAL_Time_Delta *)&v106, (int64x2_t **)v9 + 9);
      v55[3] = &unk_1F14806C0;
      *(void *)((char *)v55 + 180) = 0x100000000;
      *((_DWORD *)v55 + 47) = 0;
      *((unsigned char *)v55 + 192) = 1;
      *(void *)&long long v57 = v56;
      *((void *)&v57 + 1) = v55;
      uint64_t v58 = (std::__shared_weak_count *)*((void *)v9 + 12);
      *(_OWORD *)(v9 + 88) = v57;
      if (v58) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v58);
      }
      if (*((void *)&v107 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v107 + 1));
      }
      int v59 = (std::__shared_weak_count *)*((void *)v9 + 6);
      if (v59)
      {
        uint64_t v60 = *((void *)v9 + 5);
        atomic_fetch_add_explicit(&v59->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        long long v61 = std::__shared_weak_count::lock(v59);
        std::__shared_weak_count::__release_weak(v59);
        if (v61)
        {
          if (v60)
          {
            uint64_t v63 = *(void *)(v60 + 192);
            if (!v63)
            {
              AMCP::Log::Scope_Registry::get(v62);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v106, "com.apple.coreaudio", "AMCP");
              v86 = *(NSObject **)v106.__r_.__value_.__l.__data_;
              if (v106.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v106.__r_.__value_.__l.__size_);
              }
              if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
              {
                v87 = pthread_self();
                mach_port_t v88 = pthread_mach_thread_np(v87);
                LODWORD(v106.__r_.__value_.__l.__data_) = 67109890;
                HIDWORD(v106.__r_.__value_.__r.__words[0]) = v88;
                LOWORD(v106.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&v106.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"GraphNode.cpp";
                WORD1(v106.__r_.__value_.__r.__words[2]) = 1024;
                HIDWORD(v106.__r_.__value_.__r.__words[2]) = 670;
                LOWORD(v107) = 2080;
                *(void *)((char *)&v107 + 2) = "not (m_node_proc)";
                _os_log_error_impl(&dword_1BAA78000, v86, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v106, 0x22u);
              }
              AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v100);
              __cxa_allocate_exception(0x40uLL);
              caulk::make_string((caulk *)"", (uint64_t)&v98);
              std::logic_error::logic_error(&v99, &v98);
              v99.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
              std::logic_error::logic_error((std::logic_error *)&__p, &v99);
              uint64_t v102 = 0;
              uint64_t v103 = 0;
              uint64_t v104 = 0;
              LODWORD(v105) = -1;
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
              __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v106, (uint64_t)&__p);
              *((void *)&v107 + 1) = "std::shared_ptr<Node_Proc> AMCP::Graph::Node::get_node_procs()";
              v108 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
              LODWORD(v109) = 670;
              std::vector<void *>::vector(&v94);
              int v89 = backtrace((void **)v94, (*((void *)&v94 + 1) - (void)v94) >> 3);
              std::vector<void *>::resize((char **)&v94, v89);
              v96.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
              *(_OWORD *)&v96.__r_.__value_.__r.__words[1] = v94;
              uint64_t v97 = v95;
              long long v94 = 0uLL;
              uint64_t v95 = 0;
              boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
            }
            int v64 = *(std::__shared_weak_count **)(v60 + 200);
            if (v64) {
              atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v54) {
              atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_OWORD *)&v106.__r_.__value_.__r.__words[1] = *(_OWORD *)v90;
            v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1464A10;
            *(void *)&long long v107 = &v106;
            std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::swap[abi:ne180100](&v106, (void *)(v63 + 64));
            v65 = std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__value_func[abi:ne180100](&v106);
            std::string::size_type v67 = *((void *)v9 + 11);
            std::string::size_type v66 = *((void *)v9 + 12);
            if (v66) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v66 + 8), 1uLL, memory_order_relaxed);
            }
            v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1464A90;
            v106.__r_.__value_.__l.__size_ = v67;
            v106.__r_.__value_.__r.__words[2] = v66;
            *(void *)&long long v107 = &v106;
            std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::swap[abi:ne180100](v65, (void *)(v63 + 32));
            std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::~__value_func[abi:ne180100](&v106);
            if (v64) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v64);
            }
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v61);
        }
      }
      if (v54) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v54);
      }
      *(void *)&long long v68 = v9 + 24;
      *((void *)&v68 + 1) = v9;
      v69 = *(std::__shared_weak_count **)(a1 + 184);
      *(_OWORD *)(a1 + 176) = v68;
      if (v69) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v69);
      }
      int v28 = v92;
      if (v92) {
LABEL_38:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      return;
    case 3:
      std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v106, *(void *)a1, *(std::__shared_weak_count **)(a1 + 8));
      CFNumberRef v18 = operator new(0x48uLL);
      unsigned int v19 = v18;
      v18[1] = 0;
      v18[2] = 0;
      *CFNumberRef v18 = &unk_1F146FFD8;
      CFIndex v20 = v18 + 3;
      v18[3] = &unk_1F1469380;
      *((_DWORD *)v18 + 8) = 0;
      std::string::size_type v21 = v106.__r_.__value_.__l.__size_;
      v18[5] = v106.__r_.__value_.__r.__words[0];
      v18[6] = v21;
      if (v21) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 16), 1uLL, memory_order_relaxed);
      }
      uint64_t v22 = a2[1];
      v18[7] = *a2;
      v18[8] = v22;
      if (v22) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
      }
      *CFIndex v20 = &unk_1F1481B48;
      AMCP::IO_Core::Node::build_core((AMCP::IO_Core::Node *)(v18 + 3));
LABEL_35:
      *(void *)&long long v26 = v20;
      *((void *)&v26 + 1) = v19;
      uint64_t v27 = *(std::__shared_weak_count **)(a1 + 184);
      *(_OWORD *)(a1 + 176) = v26;
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      int v28 = (std::__shared_weak_count *)v106.__r_.__value_.__l.__size_;
      if (v106.__r_.__value_.__l.__size_) {
        goto LABEL_38;
      }
      return;
    default:
      return;
  }
}

void sub_1BAD52438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, caulk::mach::os_workgroup_interval_managed *a9, uint64_t a10, AMCP::IO_Core::Node *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,std::runtime_error a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v41);
  std::mutex::~mutex(v42);
  CFIndex v45 = *v43;
  if (*v43)
  {
    v40[8].__shared_weak_owners_ = (uint64_t)v45;
    operator delete(v45);
  }
  std::unique_ptr<AMCP::IO_Core::IO_Thread>::reset[abi:ne180100](&v40[7].__shared_weak_owners_);
  shared_owners = (std::__shared_weak_count *)v40[7].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  shared_weak_owners = (std::__shared_weak_count *)v40[6].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed(a9);
  long long v48 = (std::__shared_weak_count *)v40[3].__shared_owners_;
  if (v48) {
    std::__shared_weak_count::__release_weak(v48);
  }
  AMCP::IO_Core::Node::~Node(a11);
  std::__shared_weak_count::~__shared_weak_count(v40);
  operator delete(v49);
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<AMCP::IO_Core::Device>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Device>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FFD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Device>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FFD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<AMCP::IO_Core::Reflector>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Reflector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FF88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::Reflector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FF88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::IOContext_Core>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<AMCP::IO_Core::IOContext_Core>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FF38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::IOContext_Core>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FF38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<AMCP::IO_Core::DSP>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::IO_Core::DSP>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FEE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::IO_Core::DSP>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FEE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMCP::Graph::Node::get_nth_terminal(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 24 * a3;
  uint64_t v7 = *(void *)(v4 + 56);
  uint64_t v6 = (void *)(v4 + 56);
  uint64_t v5 = v7;
  CFArrayRef v8 = v6 + 1;
  if (0x6DB6DB6DB6DB6DB7 * ((v6[1] - v7) >> 4) <= a2)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v12 = **(NSObject ***)buf;
    if (*(void *)v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      unint64_t v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      if (*(char *)(a1 + 47) < 0) {
        std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
      }
      else {
        std::string v39 = *(std::string *)(a1 + 24);
      }
      std::logic_error v32 = *(std::logic_error *)&v39.__r_.__value_.__l.__data_;
      uint64_t v15 = (void *)v39.__r_.__value_.__r.__words[2];
      memset(&v39, 0, sizeof(v39));
      long long v33 = v15;
      unint64_t v34 = a2;
      LODWORD(v35) = a3;
      AMCP::Terminal_Identifier_to_string(&__p, (const void **)&v32.__vftable);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      uint64_t v17 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v8 - *v6) >> 4);
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v14;
      *(_WORD *)BOOL v41 = 2080;
      *(void *)&v41[2] = "GraphNode.cpp";
      __int16 v42 = 1024;
      int v43 = 132;
      __int16 v44 = 2080;
      *(void *)CFIndex v45 = "not (index < m_terminals[wire_direction].size())";
      *(_WORD *)&v45[8] = 2080;
      *(void *)&v45[10] = p_p;
      *(_WORD *)&v45[18] = 2048;
      *(void *)&v45[20] = v17;
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Index out of bounds - index: %s  size: %ld", buf, 0x36u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v33) < 0) {
        operator delete(v32.__vftable);
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v38);
    __cxa_allocate_exception(0x40uLL);
    if (*(char *)(a1 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
    }
    else {
      std::string v25 = *(std::string *)(a1 + 24);
    }
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
    std::string::size_type v18 = v25.__r_.__value_.__r.__words[2];
    memset(&v25, 0, sizeof(v25));
    __p.__r_.__value_.__r.__words[2] = v18;
    unint64_t v27 = a2;
    unsigned int v28 = a3;
    AMCP::Terminal_Identifier_to_string(&v29, (const void **)&__p.__r_.__value_.__l.__data_);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v19 = &v29;
    }
    else {
      unsigned int v19 = (std::string *)v29.__r_.__value_.__r.__words[0];
    }
    caulk::make_string((caulk *)"Index out of bounds - index: %s  size: %ld", (uint64_t)&v30, v19, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v8 - *v6) >> 4));
    std::logic_error::logic_error(&v31, &v30);
    v31.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v32, &v31);
    unint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    int v37 = -1;
    v32.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v33 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v32);
    *(void *)&v45[6] = "Terminal &AMCP::Graph::Node::get_nth_terminal(size_t, Direction)";
    *(void *)&v45[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
    *(_DWORD *)&v45[22] = 132;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v20);
    uint64_t v22 = &unk_1F148AA90;
    long long v23 = v20;
    uint64_t v24 = v21;
    long long v20 = 0uLL;
    uint64_t v21 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return v5 + 112 * a2;
}

void sub_1BAD53060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *AMCP::Graph::Node::get_nth_wire_ref(AMCP::Log::Scope_Registry *a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a2 + 24 * a4;
  uint64_t v9 = *(void *)(v7 + 56);
  CFArrayRef v8 = (void *)(v7 + 56);
  CFIndex v10 = v8 + 1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8[1] - v9) >> 4) <= a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v20 = **(NSObject ***)buf;
    if (*(void *)v54) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v54);
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = pthread_self();
      mach_port_t v22 = pthread_mach_thread_np(v21);
      if (*(char *)(a2 + 47) < 0) {
        std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
      }
      else {
        std::string v43 = *(std::string *)(a2 + 24);
      }
      std::logic_error v45 = *(std::logic_error *)&v43.__r_.__value_.__l.__data_;
      long long v26 = (void *)v43.__r_.__value_.__r.__words[2];
      memset(&v43, 0, sizeof(v43));
      uint64_t v46 = v26;
      unint64_t v47 = a3;
      LODWORD(v48) = a4;
      AMCP::Terminal_Identifier_to_string((std::string *)__p, (const void **)&v45.__vftable);
      if (__p[23] >= 0) {
        unint64_t v27 = __p;
      }
      else {
        unint64_t v27 = *(unsigned char **)__p;
      }
      uint64_t v28 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v10 - *v8) >> 4);
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v22;
      *(_WORD *)CFTypeRef v54 = 2080;
      *(void *)&v54[2] = "GraphNode.cpp";
      __int16 v55 = 1024;
      int v56 = 140;
      __int16 v57 = 2080;
      *(void *)uint64_t v58 = "not (index < m_terminals[wire_direction].size())";
      *(_WORD *)&v58[8] = 2080;
      *(void *)&v58[10] = v27;
      *(_WORD *)&v58[18] = 2048;
      *(void *)&v58[20] = v28;
      _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Index out of bounds - index: %s  size: %ld", buf, 0x36u);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (SHIBYTE(v46) < 0) {
        operator delete(v45.__vftable);
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
    __cxa_allocate_exception(0x40uLL);
    if (*(char *)(a2 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
    }
    else {
      std::string v40 = *(std::string *)(a2 + 24);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)&v40.__r_.__value_.__l.__data_;
    std::string::size_type v29 = v40.__r_.__value_.__r.__words[2];
    memset(&v40, 0, sizeof(v40));
    *(void *)&__p[16] = v29;
    *(void *)&__p[24] = a3;
    unsigned int v42 = a4;
    AMCP::Terminal_Identifier_to_string(&v44, (const void **)__p);
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v30 = &v44;
    }
    else {
      std::string v30 = (std::string *)v44.__r_.__value_.__r.__words[0];
    }
    caulk::make_string((caulk *)"Index out of bounds - index: %s  size: %ld", (uint64_t)&v33, v30, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v10 - *v8) >> 4));
    std::logic_error::logic_error(&v31, &v33);
    v31.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v45, &v31);
    unint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    int v50 = -1;
    v45.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v46 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v45);
    *(void *)&v58[6] = "std::shared_ptr<DAL::DAL_Buffer> AMCP::Graph::Node::get_nth_wire_ref(size_t, Direction)";
    *(void *)&v58[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
    *(_DWORD *)&v58[22] = 140;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v39.__r_.__value_.__l.__data_);
    std::string v52 = v39;
    long long v51 = &unk_1F148AA90;
    memset(&v39, 0, sizeof(v39));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v11 = *(void *)(a2 + 192);
  if (!v11)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v23 = **(NSObject ***)buf;
    if (*(void *)v54) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v54);
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = pthread_self();
      mach_port_t v25 = pthread_mach_thread_np(v24);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v25;
      *(_WORD *)CFTypeRef v54 = 2080;
      *(void *)&v54[2] = "GraphNode.cpp";
      __int16 v55 = 1024;
      int v56 = 686;
      __int16 v57 = 2080;
      *(void *)uint64_t v58 = "not (m_node_proc)";
      _os_log_error_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v31);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v33);
    std::logic_error::logic_error((std::logic_error *)&v39, &v33);
    v39.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error(&v45, (const std::logic_error *)&v39);
    unint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    int v50 = -1;
    v45.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v46 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v45);
    *(void *)&v58[6] = "Get_Terminal_Buffer_Handler AMCP::Graph::Node::get_get_buffer_proc() const";
    *(void *)&v58[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
    *(_DWORD *)&v58[22] = 686;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v44.__r_.__value_.__l.__data_);
    *(std::string *)&__p[8] = v44;
    *(void *)std::string __p = &unk_1F148AA90;
    memset(&v44, 0, sizeof(v44));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::__value_func[abi:ne180100]((uint64_t)&v51, v11 + 32);
  if (!v52.__r_.__value_.__r.__words[2])
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v13 = **(NSObject ***)buf;
    if (*(void *)v54) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v54);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      if (*(char *)(a2 + 47) < 0) {
        std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
      }
      else {
        std::string v38 = *(std::string *)(a2 + 24);
      }
      std::logic_error v45 = *(std::logic_error *)&v38.__r_.__value_.__l.__data_;
      CFIndex v16 = (void *)v38.__r_.__value_.__r.__words[2];
      memset(&v38, 0, sizeof(v38));
      uint64_t v46 = v16;
      unint64_t v47 = a3;
      LODWORD(v48) = a4;
      AMCP::Terminal_Identifier_to_string((std::string *)__p, (const void **)&v45.__vftable);
      if (__p[23] >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = *(unsigned char **)__p;
      }
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v15;
      *(_WORD *)CFTypeRef v54 = 2080;
      *(void *)&v54[2] = "GraphNode.cpp";
      __int16 v55 = 1024;
      int v56 = 149;
      __int16 v57 = 2080;
      *(void *)uint64_t v58 = "not (proc != nullptr)";
      *(_WORD *)&v58[8] = 2080;
      *(void *)&v58[10] = v17;
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Get_Terminal_Buffer_Handler is missing for required Container - index: %s", buf, 0x2Cu);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (SHIBYTE(v46) < 0) {
        operator delete(v45.__vftable);
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v37);
    __cxa_allocate_exception(0x40uLL);
    if (*(char *)(a2 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
    }
    else {
      std::string v35 = *(std::string *)(a2 + 24);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
    std::string::size_type v18 = v35.__r_.__value_.__r.__words[2];
    memset(&v35, 0, sizeof(v35));
    *(void *)&__p[16] = v18;
    *(void *)&__p[24] = a3;
    unsigned int v42 = a4;
    AMCP::Terminal_Identifier_to_string(&v39, (const void **)__p);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v19 = &v39;
    }
    else {
      unsigned int v19 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    caulk::make_string((caulk *)"Get_Terminal_Buffer_Handler is missing for required Container - index: %s", (uint64_t)&v44, v19);
    std::logic_error::logic_error(&v36, &v44);
    v36.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v45, &v36);
    unint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    int v50 = -1;
    v45.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v46 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v45);
    *(void *)&v58[6] = "std::shared_ptr<DAL::DAL_Buffer> AMCP::Graph::Node::get_nth_wire_ref(size_t, Direction)";
    *(void *)&v58[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
    *(_DWORD *)&v58[22] = 149;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v31);
    v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(std::logic_error *)&v33.__r_.__value_.__r.__words[1] = v31;
    uint64_t v34 = v32;
    v31.__vftable = 0;
    v31.__imp_.__imp_ = 0;
    uint64_t v32 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  LODWORD(v45.__vftable) = a4;
  *(void *)buf = a3;
  (*(void (**)(std::string::size_type, std::logic_error *, uint8_t *))(*(void *)v52.__r_.__value_.__r.__words[2]
                                                                                + 48))(v52.__r_.__value_.__r.__words[2], &v45, buf);
  return std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::~__value_func[abi:ne180100](&v51);
}

void sub_1BAD53ABC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 - 233) < 0) {
    operator delete(*(void **)(v1 - 256));
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t *std::vector<AMCP::Terminal_Description>::push_back[abi:ne180100](uint64_t *result, long long *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result + 2;
  unint64_t v5 = result[2];
  unint64_t v6 = result[1];
  if (v6 >= v5)
  {
    uint64_t v14 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v6 - *result) >> 3);
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) > 0x276276276276276) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v16 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v5 - *result) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x13B13B13B13B13BLL) {
      unint64_t v17 = 0x276276276276276;
    }
    else {
      unint64_t v17 = v15;
    }
    v27[4] = v4;
    if (v17) {
      unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Terminal_Description>>(v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = 0;
    unint64_t v20 = v17 + 104 * v14;
    v27[0] = v17;
    v27[1] = v20;
    v27[3] = v17 + 104 * v18;
    long long v21 = *a2;
    long long v22 = a2[1];
    *(void *)(v20 + 32) = *((void *)a2 + 4);
    *(_OWORD *)unint64_t v20 = v21;
    *(_OWORD *)(v20 + 16) = v22;
    do
    {
      long long v23 = (void *)(v20 + v19);
      uint64_t v24 = (void *)((char *)a2 + v19);
      v23[5] = 0;
      v23[6] = 0;
      v23[7] = 0;
      *(_OWORD *)(v23 + 5) = *(long long *)((char *)a2 + v19 + 40);
      v23[7] = *(void *)((char *)a2 + v19 + 56);
      v24[5] = 0;
      v24[6] = 0;
      v24[7] = 0;
      v19 += 24;
    }
    while (v19 != 48);
    unint64_t v25 = v17 + 104 * v14;
    uint64_t v26 = *((void *)a2 + 11);
    *(unsigned char *)(v25 + 96) = *((unsigned char *)a2 + 96);
    *(void *)(v25 + 88) = v26;
    v27[2] = v20 + 104;
    std::vector<AMCP::Terminal_Description>::__swap_out_circular_buffer(v3, v27);
    uint64_t v13 = v3[1];
    double result = (uint64_t *)std::__split_buffer<AMCP::Terminal_Description>::~__split_buffer((uint64_t)v27);
  }
  else
  {
    uint64_t v7 = 0;
    long long v8 = *a2;
    long long v9 = a2[1];
    *(void *)(v6 + 32) = *((void *)a2 + 4);
    *(_OWORD *)unint64_t v6 = v8;
    *(_OWORD *)(v6 + 16) = v9;
    do
    {
      CFIndex v10 = (void *)(v6 + v7);
      uint64_t v11 = (void *)((char *)a2 + v7);
      v10[5] = 0;
      v10[6] = 0;
      v10[7] = 0;
      *(_OWORD *)(v10 + 5) = *(long long *)((char *)a2 + v7 + 40);
      v10[7] = *(void *)((char *)a2 + v7 + 56);
      v11[5] = 0;
      v11[6] = 0;
      v11[7] = 0;
      v7 += 24;
    }
    while (v7 != 48);
    uint64_t v12 = *((void *)a2 + 11);
    *(unsigned char *)(v6 + 96) = *((unsigned char *)a2 + 96);
    *(void *)(v6 + 88) = v12;
    uint64_t v13 = v6 + 104;
  }
  v3[1] = v13;
  return result;
}

void AMCP::Graph::Node::edit_each_wire(uint64_t a1, void *a2, uint64_t a3)
{
  char v5 = 0;
  uint64_t v6 = 0;
  uint64_t v16 = a1 + 56;
  uint64_t v7 = (std::string *)(a1 + 24);
  do
  {
    char v17 = v5;
    long long v8 = (void *)(v16 + 24 * v6);
    if (v8[1] != *v8)
    {
      unint64_t v9 = 0;
      do
      {
        if (*(char *)(a1 + 47) < 0) {
          std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
        }
        else {
          std::string v21 = *v7;
        }
        *(_OWORD *)std::string __p = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
        std::string::size_type v10 = v21.__r_.__value_.__r.__words[2];
        memset(&v21, 0, sizeof(v21));
        std::string::size_type v23 = v10;
        unint64_t v24 = v9;
        int v25 = v6;
        AMCP::Graph::Wire_Index::get_wires_for_terminal(&v19, a2, (unsigned __int8 **)__p);
        uint64_t v11 = v19;
        uint64_t v12 = v20;
        for (uint64_t i = v19; i != v12; i += 8)
        {
          uint64_t v14 = *(void *)i;
          int v26 = v6;
          uint64_t v15 = *(void *)(a3 + 24);
          if (!v15) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t, int *, uint64_t))(*(void *)v15 + 48))(v15, &v26, v14);
        }
        if (v11) {
          operator delete(v11);
        }
        if (SHIBYTE(v23) < 0) {
          operator delete(__p[0]);
        }
        ++v9;
      }
      while (v9 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8[1] - *v8) >> 4));
    }
    char v5 = 1;
    uint64_t v6 = 1;
  }
  while ((v17 & 1) == 0);
}

void sub_1BAD540EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Node::for_each_connection(uint64_t a1, void *a2, uint64_t a3)
{
  char v5 = 0;
  uint64_t v6 = 0;
  uint64_t v15 = a1 + 56;
  uint64_t v7 = (std::string *)(a1 + 24);
  do
  {
    char v16 = v5;
    long long v8 = (void *)(v15 + 24 * v6);
    if (v8[1] != *v8)
    {
      unint64_t v9 = 0;
      do
      {
        if (*(char *)(a1 + 47) < 0) {
          std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(a1 + 24), *(void *)(a1 + 32));
        }
        else {
          std::string v30 = *v7;
        }
        long long v31 = *(_OWORD *)&v30.__r_.__value_.__l.__data_;
        std::string::size_type v10 = v30.__r_.__value_.__r.__words[2];
        memset(&v30, 0, sizeof(v30));
        std::string::size_type v32 = v10;
        unint64_t v33 = v9;
        int v34 = v6;
        AMCP::Graph::Wire_Index::get_wires_for_terminal(&v28, a2, (unsigned __int8 **)&v31);
        uint64_t v11 = v28;
        uint64_t v12 = v29;
        for (uint64_t i = v28; i != v12; i += 8)
        {
          if (*(unsigned char *)(*(void *)i + 408))
          {
            AMCP::Graph::Graph_Wire::Connection::Connection(&v18, (const AMCP::Graph::Graph_Wire::Connection *)(*(void *)i + 192));
            v35[0] = v6;
            uint64_t v14 = *(void *)(a3 + 24);
            if (!v14) {
              std::__throw_bad_function_call[abi:ne180100]();
            }
            (*(void (**)(uint64_t, int *, std::string *))(*(void *)v14 + 48))(v14, v35, &v18);
            if (__p)
            {
              unint64_t v27 = __p;
              operator delete(__p);
            }
            if (v25) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v25);
            }
            if (v23)
            {
              unint64_t v24 = v23;
              operator delete(v23);
            }
            if (v22 < 0) {
              operator delete(v21);
            }
            if (v20 < 0) {
              operator delete(v19);
            }
            if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v18.__r_.__value_.__l.__data_);
            }
          }
        }
        if (v11) {
          operator delete(v11);
        }
        if (SHIBYTE(v32) < 0) {
          operator delete((void *)v31);
        }
        ++v9;
      }
      while (v9 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8[1] - *v8) >> 4));
    }
    char v5 = 1;
    uint64_t v6 = 1;
  }
  while ((v16 & 1) == 0);
}

void sub_1BAD5432C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (*(char *)(v13 - 121) < 0) {
    operator delete(*(void **)(v13 - 144));
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<void ()(AMCP::Terminal_Identifier const&,AMCP::Graph::Terminal const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Graph::Node::set_all_terminal_data_directions(Buffer_Alignment)::$_0,std::allocator<AMCP::Graph::Node::set_all_terminal_data_directions(Buffer_Alignment)::$_0>,void ()(AMCP::Terminal_Identifier const&,AMCP::Graph::Terminal const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Graph::Node::set_all_terminal_data_directions(Buffer_Alignment)::$_0,std::allocator<AMCP::Graph::Node::set_all_terminal_data_directions(Buffer_Alignment)::$_0>,void ()(AMCP::Terminal_Identifier const&,AMCP::Graph::Terminal const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph4Node32set_all_terminal_data_directionsE16Buffer_AlignmentE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

AMCP::Log::Scope_Registry *std::__function::__func<AMCP::Graph::Node::set_all_terminal_data_directions(Buffer_Alignment)::$_0,std::allocator<AMCP::Graph::Node::set_all_terminal_data_directions(Buffer_Alignment)::$_0>,void ()(AMCP::Terminal_Identifier const&,AMCP::Graph::Terminal const&)>::operator()(AMCP::Log::Scope_Registry *result, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int v3 = *((_DWORD *)result + 2);
  if (*(unsigned char *)(a3 + 108)) {
    BOOL v4 = *(_DWORD *)(a3 + 104) == v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    char v5 = **(NSObject ***)buf;
    if (*(void *)v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v24);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = pthread_self();
      mach_port_t v7 = pthread_mach_thread_np(v6);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v7;
      *(_WORD *)unint64_t v24 = 2080;
      *(void *)&v24[2] = "GraphTerminal.cpp";
      __int16 v25 = 1024;
      int v26 = 59;
      __int16 v27 = 2080;
      *(void *)uint64_t v28 = "not (BOOL(m_buffer_alignment) ? m_buffer_alignment == buffer_alignment : true)";
      _os_log_error_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s mismatch buffer alignment", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v22);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"mismatch buffer alignment", (uint64_t)&v14);
    std::logic_error::logic_error(&v15, &v14);
    v15.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v16, &v15);
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v21 = -1;
    v16.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    char v17 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v16);
    *(void *)&v28[6] = "void AMCP::Graph::Terminal::set_buffer_alignment(Buffer_Alignment)";
    std::string::size_type v29 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphTerminal.cpp";
    int v30 = 59;
    std::vector<void *>::vector(&v9);
    int v8 = backtrace((void **)v9, (*((void *)&v9 + 1) - (void)v9) >> 3);
    std::vector<void *>::resize((char **)&v9, v8);
    long long v12 = v9;
    uint64_t v13 = v10;
    long long v9 = 0uLL;
    uint64_t v10 = 0;
    uint64_t v11 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  *(_DWORD *)(a3 + 104) = v3;
  *(unsigned char *)(a3 + 108) = 1;
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Node::set_all_terminal_data_directions(Buffer_Alignment)::$_0,std::allocator<AMCP::Graph::Node::set_all_terminal_data_directions(Buffer_Alignment)::$_0>,void ()(AMCP::Terminal_Identifier const&,AMCP::Graph::Terminal const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F1470028;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *std::__function::__func<AMCP::Graph::Node::set_all_terminal_data_directions(Buffer_Alignment)::$_0,std::allocator<AMCP::Graph::Node::set_all_terminal_data_directions(Buffer_Alignment)::$_0>,void ()(AMCP::Terminal_Identifier const&,AMCP::Graph::Terminal const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  *(void *)double result = &unk_1F1470028;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void std::__function::__func<AMCP::Graph::Node::set_all_terminal_data_directions(Buffer_Alignment)::$_0,std::allocator<AMCP::Graph::Node::set_all_terminal_data_directions(Buffer_Alignment)::$_0>,void ()(AMCP::Terminal_Identifier const&,AMCP::Graph::Terminal const&)>::~__func()
{
}

void *std::__function::__value_func<void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Graph::Node::get_get_clock_proc(AMCP::Graph::Node *this, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    BOOL v4 = **(NSObject ***)buf;
    if (*(void *)v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v22);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      char v5 = pthread_self();
      mach_port_t v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v6;
      *(_WORD *)char v22 = 2080;
      *(void *)&v22[2] = "GraphNode.cpp";
      __int16 v23 = 1024;
      int v24 = 694;
      __int16 v25 = 2080;
      *(void *)int v26 = "not (m_node_proc)";
      _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v12);
    std::logic_error::logic_error(&v13, &v12);
    v13.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v14, &v13);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = -1;
    v14.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    std::logic_error v15 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(void *)&v26[6] = "Get_Node_Clock_Handler AMCP::Graph::Node::get_get_clock_proc() const";
    __int16 v27 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
    int v28 = 694;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v7);
    long long v10 = v7;
    uint64_t v11 = v8;
    long long v7 = 0uLL;
    uint64_t v8 = 0;
    long long v9 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v2 = a2 + 64;

  return std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::__value_func[abi:ne180100]((uint64_t)this, v2);
}

void sub_1BAD54C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph4Node30get_sample_rates_for_terminalsERNS0_10Wire_IndexEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double *std::__function::__func<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::operator()(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  mach_port_t v6 = (AMCP::Log::Scope_Registry *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(char *)(v5 + 47) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v5 + 24), *(void *)(v5 + 32));
  }
  else {
    std::string __p = *(std::string *)(v5 + 24);
  }
  uint64_t v7 = a3[23];
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = a3[23];
  }
  else {
    uint64_t v8 = *((void *)a3 + 1);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v8 != size)
  {
    BOOL v20 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v7 & 0x80) != 0)
  {
    BOOL v20 = memcmp(*(const void **)a3, p_p, *((void *)a3 + 1)) == 0;
    goto LABEL_25;
  }
  if (a3[23])
  {
    uint64_t v12 = v7 - 1;
    std::logic_error v13 = a3;
    do
    {
      int v15 = *v13++;
      int v14 = v15;
      int v17 = p_p->__r_.__value_.__s.__data_[0];
      p_p = (std::string *)((char *)p_p + 1);
      int v16 = v17;
      BOOL v19 = v12-- != 0;
      BOOL v20 = v14 == v16;
    }
    while (v14 == v16 && v19);
LABEL_25:
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  BOOL v20 = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_26:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_27:
  if (v20) {
    int v21 = a3;
  }
  else {
    int v21 = a3 + 40;
  }
  double result = (double *)get_terminal(v6, v21);
  double v23 = *result;
  int v24 = *(uint64_t ***)(a1 + 8);
  int v26 = v24 + 1;
  __int16 v25 = v24[1];
  if (v25)
  {
    while (1)
    {
      while (1)
      {
        __int16 v27 = (uint64_t **)v25;
        double v28 = *((double *)v25 + 4);
        if (v23 >= v28) {
          break;
        }
        __int16 v25 = (uint64_t *)*v25;
        int v26 = v27;
        if (!*v27) {
          goto LABEL_38;
        }
      }
      if (v28 >= v23) {
        break;
      }
      __int16 v25 = (uint64_t *)v25[1];
      if (!v25)
      {
        int v26 = v27 + 1;
        goto LABEL_38;
      }
    }
  }
  else
  {
    __int16 v27 = v24 + 1;
LABEL_38:
    uint64_t v29 = (double *)operator new(0x28uLL);
    v29[4] = v23;
    *uint64_t v29 = 0.0;
    v29[1] = 0.0;
    *((void *)v29 + 2) = v27;
    *int v26 = (uint64_t *)v29;
    int v30 = (uint64_t *)**v24;
    if (v30)
    {
      *int v24 = v30;
      uint64_t v31 = *v26;
    }
    else
    {
      uint64_t v31 = (uint64_t *)v29;
    }
    double result = (double *)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v24[1], v31);
    v24[2] = (uint64_t *)((char *)v24[2] + 1);
  }
  return result;
}

void std::__function::__func<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void *std::__function::__func<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::__clone(void *result, void *a2)
{
  uint64_t v2 = result[1];
  *a2 = &unk_1F1470138;
  a2[1] = v2;
  uint64_t v3 = result[3];
  a2[2] = result[2];
  a2[3] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

char *std::__function::__func<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F1470138;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1470138;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::get_sample_rates_for_terminals(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1470138;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Graph::Node::calculate_clocks_from_wires(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&)::$_0,std::allocator<AMCP::Graph::Node::calculate_clocks_from_wires(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Graph::Node::calculate_clocks_from_wires(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&)::$_0,std::allocator<AMCP::Graph::Node::calculate_clocks_from_wires(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph4Node27calculate_clocks_from_wiresERKNS0_8Node_MapERNS0_10Wire_IndexERKNSt3__18functionIFNS7_10shared_ptrINS0_8TimebaseEEERKNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEERKNS9_INS0_21Meta_Timebase_FactoryEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Graph::Node::calculate_clocks_from_wires(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&)::$_0,std::allocator<AMCP::Graph::Node::calculate_clocks_from_wires(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::operator()(uint64_t a1, int *a2, std::string *__str)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (**(unsigned char **)(a1 + 24)) {
    return;
  }
  int v5 = *a2;
  int v38 = 0;
  memset(v37, 0, sizeof(v37));
  int v36 = 0;
  memset(v35, 0, sizeof(v35));
  if (v5 == 1)
  {
    std::string::operator=((std::string *)v37, __str);
    *(void *)&v37[24] = __str[1].__r_.__value_.__l.__data_;
    int v38 = __str[1].__r_.__value_.__r.__words[1];
    std::string::operator=((std::string *)v35, (std::string *)((char *)__str + 40));
    *(void *)&v35[24] = *((void *)&__str[2].__r_.__value_.__l + 2);
    int data = (int)__str[3].__r_.__value_.__l.__data_;
  }
  else
  {
    std::string::operator=((std::string *)v37, (std::string *)((char *)__str + 40));
    *(void *)&v37[24] = *((void *)&__str[2].__r_.__value_.__l + 2);
    int v38 = (int)__str[3].__r_.__value_.__l.__data_;
    std::string::operator=((std::string *)v35, __str);
    *(void *)&v35[24] = __str[1].__r_.__value_.__l.__data_;
    int data = __str[1].__r_.__value_.__r.__words[1];
  }
  int v36 = data;
  uint64_t v7 = *(void **)(a1 + 8);
  if (!std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v7, v35))
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v17 = **(NSObject ***)buf;
    if (*(void *)v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v40);
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = pthread_self();
      mach_port_t v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)std::string v40 = 2080;
      *(void *)&v40[2] = "GraphNode.cpp";
      __int16 v41 = 1024;
      int v42 = 314;
      __int16 v43 = 2080;
      *(void *)std::string v44 = "not (nodes.find(this_term.m_node) != nodes.end())";
      _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to calculate clock for node outside of the current subgraph.", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to calculate clock for node outside of the current subgraph.", (uint64_t)&v26);
    std::logic_error::logic_error(&v27, &v26);
    v27.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v28, &v27);
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int v33 = -1;
    v28.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v29 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v28);
    *(void *)&v44[6] = "auto AMCP::Graph::Node::calculate_clocks_from_wires(const Node_Map &, Wire_Index &, const std::"
                         "function<Timebase_Ref (const Graph_Node_UID &)> &, const std::shared_ptr<Meta_Timebase_Factory>"
                         " &)::(anonymous class)::operator()(Direction, const Graph_Wire::Connection &) const";
    std::logic_error v45 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
    int v46 = 314;
    std::vector<void *>::vector(&v21);
    int v20 = backtrace((void **)v21, (*((void *)&v21 + 1) - (void)v21) >> 3);
    std::vector<void *>::resize((char **)&v21, v20);
    long long v24 = v21;
    uint64_t v25 = v22;
    long long v21 = 0uLL;
    uint64_t v22 = 0;
    double v23 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v7, v37))
  {
    uint64_t v8 = *(void *)(get_terminal_for_key((uint64_t)v37, v7) + 104);
    BOOL v9 = (v8 & 0xFF00000000) != 0 && v5 == 1;
    BOOL v10 = v9 && v8 == 1;
    if (v10 || (v8 & 0xFF00000000) != 0 && !(v5 | v8))
    {
      uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(*(void **)(a1 + 8), v37);
      if (!v11) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v12 = *((void *)v11 + 5);
      uint64_t v13 = *(void *)(v12 + 144);
      int v14 = *(std::__shared_weak_count **)(v12 + 152);
      if (v14)
      {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        if (v13)
        {
          int v15 = *(void **)(a1 + 16);
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_22;
        }
      }
      else if (v13)
      {
        int v15 = *(void **)(a1 + 16);
LABEL_22:
        int v16 = (std::__shared_weak_count *)v15[1];
        *int v15 = v13;
        v15[1] = v14;
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        if (!v14) {
          goto LABEL_26;
        }
LABEL_25:
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        goto LABEL_26;
      }
      **(unsigned char **)(a1 + 24) = 1;
      if (!v14) {
        goto LABEL_26;
      }
      goto LABEL_25;
    }
  }
LABEL_26:
  if ((v35[23] & 0x80000000) != 0) {
    operator delete(*(void **)v35);
  }
  if ((v37[23] & 0x80000000) != 0) {
    operator delete(*(void **)v37);
  }
}

void sub_1BAD55624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v40 - 169) < 0) {
    operator delete(*(void **)(v40 - 192));
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<AMCP::Graph::Node::calculate_clocks_from_wires(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&)::$_0,std::allocator<AMCP::Graph::Node::calculate_clocks_from_wires(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14700B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::Graph::Node::calculate_clocks_from_wires(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&)::$_0,std::allocator<AMCP::Graph::Node::calculate_clocks_from_wires(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F14700B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AMCP::Graph::Node::calculate_clocks_from_wires(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&)::$_0,std::allocator<AMCP::Graph::Node::calculate_clocks_from_wires(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::~__func()
{
}

void AMCP::Graph::Node::calculate_all_drift_correction(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, (unsigned __int8 *)(a1 + 24), a1 + 24);
  uint64_t v11 = *(void *)(a1 + 144);
  BOOL v10 = *(std::__shared_weak_count **)(a1 + 152);
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = operator new(0x38uLL);
  *uint64_t v12 = &unk_1F14701B8;
  v12[1] = a5;
  v12[2] = v11;
  v12[3] = v10;
  v12[4] = a2;
  v12[5] = a3;
  v12[6] = a4;
  v13[3] = v12;
  AMCP::Graph::Node::edit_each_wire(a1, a3, (uint64_t)v13);
  std::__function::__value_func<void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::~__value_func[abi:ne180100](v13);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1BAD558F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0,std::allocator<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0,std::allocator<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph4Node30calculate_all_drift_correctionERKNS0_8Node_MapERNS0_10Wire_IndexERNSt3__113unordered_setINS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_4hashISE_EENS7_8equal_toISE_EENSC_ISE_EEEERmE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0,std::allocator<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::operator()(uint64_t a1, int *a2, uint64_t a3)
{
  if (!*(unsigned char *)(a3 + 408)) {
    return;
  }
  int v5 = *a2;
  AMCP::Graph::Graph_Wire::Connection::Connection(&__str, (const AMCP::Graph::Graph_Wire::Connection *)(a3 + 192));
  int v23 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v22 = 0u;
  if (v5 == 1)
  {
    std::string::operator=((std::string *)__p, &__str);
    *((void *)&v22 + 1) = v25;
    int v6 = v26;
  }
  else
  {
    std::string::operator=((std::string *)__p, &v27);
    *((void *)&v22 + 1) = v28;
    int v6 = v29;
  }
  int v23 = v6;
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(*(void **)(a1 + 32), (unsigned __int8 *)__p);
  if (v7)
  {
    uint64_t v8 = v7;
    if (v5)
    {
LABEL_32:
      int v20 = *(void **)(a1 + 48);
      if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(v20, (unsigned __int8 *)__p))AMCP::Graph::Node::calculate_all_drift_correction(*((void *)v8 + 5), *(void *)(a1 + 32), *(void **)(a1 + 40), (uint64_t)v20, *(void *)(a1 + 8)); {
      goto LABEL_34;
      }
    }
    uint64_t v9 = *((void *)v7 + 5);
    uint64_t v11 = *(void *)(v9 + 144);
    BOOL v10 = *(std::__shared_weak_count **)(v9 + 152);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(_DWORD *)(a3 + 140)) {
      goto LABEL_30;
    }
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12 && v11)
    {
      uint64_t v13 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
      uint64_t v15 = v13[23];
      if ((v15 & 0x80u) == 0) {
        uint64_t v16 = v13[23];
      }
      else {
        uint64_t v16 = *((void *)v13 + 1);
      }
      uint64_t v17 = *(unsigned __int8 *)(v14 + 23);
      int v18 = (char)v17;
      if ((v17 & 0x80u) != 0) {
        uint64_t v17 = *(void *)(v14 + 8);
      }
      if (v16 == v17)
      {
        if (v18 >= 0) {
          mach_port_t v19 = (unsigned __int8 *)v14;
        }
        else {
          mach_port_t v19 = *(unsigned __int8 **)v14;
        }
        if ((v15 & 0x80) == 0)
        {
          if (v13[23])
          {
            while (*v13 == *v19)
            {
              ++v13;
              ++v19;
              if (!--v15) {
                goto LABEL_30;
              }
            }
            goto LABEL_27;
          }
LABEL_30:
          if (v10) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          }
          goto LABEL_32;
        }
        if (!memcmp(*(const void **)v13, v19, *((void *)v13 + 1))) {
          goto LABEL_30;
        }
      }
    }
    else if (!(v12 | v11))
    {
      goto LABEL_30;
    }
LABEL_27:
    if (*(unsigned char *)(a3 + 408)) {
      *(_DWORD *)(a3 + 332) = 1;
    }
    ++**(void **)(a1 + 8);
    goto LABEL_30;
  }
LABEL_34:
  if (SBYTE7(v22) < 0) {
    operator delete(__p[0]);
  }
  if (v35)
  {
    int v36 = v35;
    operator delete(v35);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (v32)
  {
    int v33 = v32;
    operator delete(v32);
  }
  if (v31 < 0) {
    operator delete(v30);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1BAD55C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51)
{
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a50) {
    operator delete(a50);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  if (a39) {
    operator delete(a39);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0,std::allocator<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0,std::allocator<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 std::__function::__func<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0,std::allocator<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::__clone(__n128 *a1, __n128 *a2)
{
  unint64_t v2 = a1->n128_u64[1];
  a2->n128_u64[0] = (unint64_t)&unk_1F14701B8;
  a2->n128_u64[1] = v2;
  unint64_t v3 = a1[1].n128_u64[1];
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  a2[1].n128_u64[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = a1[2];
  a2[3].n128_u64[0] = a1[3].n128_u64[0];
  a2[2] = result;
  return result;
}

__n128 std::__function::__func<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0,std::allocator<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)unint64_t v2 = &unk_1F14701B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)v2 + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 32);
  *((__n128 *)v2 + 2) = result;
  *((void *)v2 + 6) = *(void *)(a1 + 48);
  return result;
}

void std::__function::__func<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0,std::allocator<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::~__func(void *a1)
{
  *a1 = &unk_1F14701B8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0,std::allocator<AMCP::Graph::Node::calculate_all_drift_correction(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &,unsigned long &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::~__func(void *a1)
{
  *a1 = &unk_1F14701B8;
  unint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void AMCP::Graph::Node::set_all_wire_source_clocks(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a4, (unsigned __int8 *)(a1 + 24), a1 + 24);
  uint64_t v9 = *(void *)(a1 + 144);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 152);
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v10 = operator new(0x30uLL);
  void *v10 = &unk_1F1470248;
  v10[1] = v9;
  v10[2] = v8;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  v11[3] = v10;
  AMCP::Graph::Node::edit_each_wire(a1, a3, (uint64_t)v11);
  std::__function::__value_func<void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::~__value_func[abi:ne180100](v11);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1BAD55FB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph4Node26set_all_wire_source_clocksERKNS0_8Node_MapERNS0_10Wire_IndexERNSt3__113unordered_setINS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_4hashISE_EENS7_8equal_toISE_EENSC_ISE_EEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::operator()(uint64_t a1, int *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 408))
  {
    int v5 = *a2;
    AMCP::Graph::Graph_Wire::Connection::Connection(&__str, (const AMCP::Graph::Graph_Wire::Connection *)(a3 + 192));
    int v19 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v18 = 0u;
    if (v5 == 1)
    {
      std::string::operator=((std::string *)__p, &__str);
      *((void *)&v18 + 1) = v21;
      int v6 = v22;
    }
    else
    {
      std::string::operator=((std::string *)__p, &v23);
      *((void *)&v18 + 1) = v24;
      int v6 = v25;
    }
    int v19 = v6;
    uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(*(void **)(a1 + 24), (unsigned __int8 *)__p);
    if (v7)
    {
      uint64_t v8 = v7;
      if (!v5)
      {
        uint64_t v10 = *(void *)(a1 + 8);
        uint64_t v9 = *(void *)(a1 + 16);
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v11 = *(std::__shared_weak_count **)(a3 + 424);
        *(void *)(a3 + 416) = v10;
        *(void *)(a3 + 424) = v9;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        uint64_t v12 = *((void *)v8 + 5);
        uint64_t v13 = *(void *)(v12 + 144);
        uint64_t v14 = *(std::__shared_weak_count **)(v12 + 152);
        if (v14)
        {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v15 = *(std::__shared_weak_count **)(a3 + 440);
        *(void *)(a3 + 432) = v13;
        *(void *)(a3 + 440) = v14;
        if (v15) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
      }
      uint64_t v16 = *(void **)(a1 + 40);
      if (!std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(v16, (unsigned __int8 *)__p))AMCP::Graph::Node::set_all_wire_source_clocks(*((void *)v8 + 5), *(void *)(a1 + 24), *(void **)(a1 + 32), (uint64_t)v16); {
    }
      }
    if (SBYTE7(v18) < 0) {
      operator delete(__p[0]);
    }
    if (v31)
    {
      uint64_t v32 = v31;
      operator delete(v31);
    }
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    if (v28)
    {
      int v29 = v28;
      operator delete(v28);
    }
    if (v27 < 0) {
      operator delete(v26);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BAD561D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a50) {
    operator delete(a50);
  }
  if (a47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a47);
  }
  if (a39) {
    operator delete(a39);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::destroy_deallocate(void *__p)
{
  unint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 std::__function::__func<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1470248;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1470248;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::~__func(void *a1)
{
  *a1 = &unk_1F1470248;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::set_all_wire_source_clocks(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::~__func(void *a1)
{
  *a1 = &unk_1F1470248;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *AMCP::Graph::Node::calculate_latency(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 192))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v17 = **(NSObject ***)buf;
    if (*(void *)v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v35);
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      long long v18 = pthread_self();
      mach_port_t v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)std::string v35 = 2080;
      *(void *)&v35[2] = "GraphNode.cpp";
      __int16 v36 = 1024;
      int v37 = 493;
      LOWORD(v38) = 2080;
      *(void *)((char *)&v38 + 2) = "not (m_node_proc)";
      _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v33);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v25);
    std::logic_error::logic_error(&v26, &v25);
    v26.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v27, &v26);
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    int v32 = -1;
    v27.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v28 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v27);
    *((void *)&v38 + 1) = "void AMCP::Graph::Node::calculate_latency(const Node_Map &, Wire_Index &, std::unordered_set"
                            "<Graph_Node_UID> &)";
    std::string v39 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
    int v40 = 493;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v20);
    long long v23 = v20;
    uint64_t v24 = v21;
    long long v20 = 0uLL;
    uint64_t v21 = 0;
    int v22 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v8 = (unsigned __int8 *)(a1 + 24);
  __n128 result = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(a4, (unsigned __int8 *)(a1 + 24));
  if (!result)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)a4, v8, (uint64_t)v8);
    uint64_t v10 = *(void *)(*(void *)(a1 + 192) + 408);
    if (v10)
    {
      uint64_t v11 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 48))(v10);
      int v12 = (int)v11;
      if ((v11 & 0x80000000) != 0)
      {
        AMCP::Log::Scope_Registry::get(v11);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v13 = **(NSObject ***)buf;
        if (*(void *)v35) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v35);
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          uint64_t v14 = pthread_self();
          mach_port_t v15 = pthread_mach_thread_np(v14);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v15;
          *(_WORD *)std::string v35 = 2080;
          *(void *)&v35[2] = "GraphNode.cpp";
          __int16 v36 = 1024;
          int v37 = 501;
          LOWORD(v38) = 2080;
          *(void *)((char *)&v38 + 2) = "not (this_nodes_latency >= 0)";
          _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Tail time is not allowed to be less than zero", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v33);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Tail time is not allowed to be less than zero", (uint64_t)&v25);
        std::logic_error::logic_error(&v26, &v25);
        v26.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error(&v27, &v26);
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        int v32 = -1;
        v27.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        uint64_t v28 = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v27);
        *((void *)&v38 + 1) = "void AMCP::Graph::Node::calculate_latency(const Node_Map &, Wire_Index &, std::unordered"
                                "_set<Graph_Node_UID> &)";
        std::string v39 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
        int v40 = 501;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v20);
        long long v23 = v20;
        uint64_t v24 = v21;
        long long v20 = 0uLL;
        uint64_t v21 = 0;
        int v22 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
    }
    else
    {
      int v12 = 0;
    }
    LODWORD(v27.__vftable) = 0;
    uint64_t v16 = operator new(0x28uLL);
    void *v16 = &unk_1F14702C8;
    v16[1] = &v27;
    v16[2] = a2;
    v16[3] = a3;
    v16[4] = a4;
    *(void *)&long long v38 = v16;
    AMCP::Graph::Node::for_each_connection(a1, a3, (uint64_t)buf);
    __n128 result = std::__function::__value_func<void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::~__value_func[abi:ne180100](buf);
    *(_DWORD *)(a1 + 164) = LODWORD(v27.__vftable) + v12;
  }
  return result;
}

void sub_1BAD56958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  std::__function::__value_func<void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::~__value_func[abi:ne180100]((void *)(v24 - 144));
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::Graph::Node::calculate_latency(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::calculate_latency(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Graph::Node::calculate_latency(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::calculate_latency(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph4Node17calculate_latencyERKNS0_8Node_MapERNS0_10Wire_IndexERNSt3__113unordered_setINS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_4hashISE_EENS7_8equal_toISE_EENSC_ISE_EEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Graph::Node::calculate_latency(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::calculate_latency(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::operator()(void *result, _DWORD *a2, uint64_t a3)
{
  if (!*a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[2];
    __n128 result = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v4, (unsigned __int8 *)(a3 + 40));
    if (result)
    {
      int v5 = result;
      __n128 result = AMCP::Graph::Node::calculate_latency(result[5], (uint64_t)v4, (void *)v3[3], (void *)v3[4]);
      int v6 = *(_DWORD *)(v5[5] + 164);
      uint64_t v7 = (_DWORD *)v3[1];
      if (v6 > *v7) {
        _DWORD *v7 = v6;
      }
    }
  }
  return result;
}

__n128 std::__function::__func<AMCP::Graph::Node::calculate_latency(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::calculate_latency(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14702C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::Graph::Node::calculate_latency(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::calculate_latency(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F14702C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<AMCP::Graph::Node::calculate_latency(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0,std::allocator<AMCP::Graph::Node::calculate_latency(AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &,std::unordered_set<std::string> &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::~__func()
{
}

void *std::__function::__func<AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph4Node44calculate_latency_adjustment_for_connectionsEiRKNS0_8Node_MapERNS0_10Wire_IndexEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::operator()(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (*a2) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = *(unsigned char *)(a3 + 408) == 0;
  }
  if (!v3)
  {
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v35 = *(std::string *)a3;
    }
    std::string v34 = v35;
    if (*(char *)(a3 + 63) < 0) {
      std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)(a3 + 40), *(void *)(a3 + 48));
    }
    else {
      std::string v35 = *(std::string *)(a3 + 40);
    }
    std::string __p = v35;
    int v6 = *(void **)(a1 + 16);
    uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v6, (unsigned __int8 *)&__p);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v6, (unsigned __int8 *)&v34);
      if (v9)
      {
        int v10 = **(_DWORD **)(a1 + 8);
        int v11 = *(_DWORD *)(*((void *)v8 + 5) + 164);
        int v12 = *(AMCP::Log::Scope_Registry **)(*(void *)(*((void *)v9 + 5) + 192) + 408);
        if (v12) {
          int v12 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(AMCP::Log::Scope_Registry *))(*(void *)v12 + 48))(v12);
        }
        int v13 = v10 - v12;
        uint64_t v14 = (v10 - v12 - v11);
        if (v13 - v11 < 0)
        {
          AMCP::Log::Scope_Registry::get(v12);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v35, "com.apple.coreaudio", "AMCP");
          mach_port_t v15 = *(NSObject **)v35.__r_.__value_.__l.__data_;
          if (v35.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v35.__r_.__value_.__l.__size_);
          }
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            uint64_t v16 = pthread_self();
            mach_port_t v17 = pthread_mach_thread_np(v16);
            LODWORD(v35.__r_.__value_.__l.__data_) = 67110146;
            HIDWORD(v35.__r_.__value_.__r.__words[0]) = v17;
            LOWORD(v35.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v35.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"GraphNode.cpp";
            WORD1(v35.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(v35.__r_.__value_.__r.__words[2]) = 584;
            __int16 v36 = 2080;
            *(void *)int v37 = "not (offset >= 0)";
            *(_WORD *)&v37[8] = 1024;
            *(_DWORD *)&v37[10] = v14;
            _os_log_error_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s invalid latency offset %d", (uint8_t *)&v35, 0x28u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"invalid latency offset %d", (uint64_t)&v24, v14);
          std::logic_error::logic_error(&v25, &v24);
          v25.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error(&v26, &v25);
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          int v31 = -1;
          v26.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
          std::logic_error v27 = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v35, (uint64_t)&v26);
          *(void *)&v37[6] = "auto AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int32_t, const Node_"
                               "Map &, Wire_Index &)::(anonymous class)::operator()(Direction, Graph_Wire &) const";
          long long v38 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
          int v39 = 584;
          std::vector<void *>::vector(&v19);
          int v18 = backtrace((void **)v19, (*((void *)&v19 + 1) - (void)v19) >> 3);
          std::vector<void *>::resize((char **)&v19, v18);
          long long v22 = v19;
          uint64_t v23 = v20;
          long long v19 = 0uLL;
          uint64_t v20 = 0;
          uint64_t v21 = &unk_1F148AA90;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        if (*(unsigned char *)(a3 + 408)) {
          *(_DWORD *)(a3 + 376) = v14;
        }
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BAD57070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v42 - 153) < 0) {
    operator delete(*(void **)(v42 - 176));
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1470348;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F1470348;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::calculate_latency_adjustment_for_connections(int,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::~__func()
{
}

uint64_t std::__function::__value_func<void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::vector<AMCP::Graph::Call_Audio_IO_Proc::Proc_Connection_Info>::resize(char **a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 4);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    long long v19 = &v4[48 * a2];
    goto LABEL_20;
  }
  uint64_t v7 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 4) >= v6)
  {
    bzero(a1[1], 48 * ((48 * v6 - 48) / 0x30) + 48);
    long long v19 = &v3[48 * ((48 * v6 - 48) / 0x30) + 48];
LABEL_20:
    a1[1] = v19;
    return;
  }
  if (a2 > 0x555555555555555) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 4);
  uint64_t v9 = 2 * v8;
  if (2 * v8 <= a2) {
    uint64_t v9 = a2;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v10 = 0x555555555555555;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 > 0x555555555555555) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v11 = 3 * v10;
  int v12 = (char *)operator new(48 * v10);
  int v13 = &v12[48 * v5];
  uint64_t v14 = &v12[16 * v11];
  size_t v15 = 48 * ((48 * v6 - 48) / 0x30) + 48;
  bzero(v13, v15);
  uint64_t v16 = &v13[v15];
  if (v3 != v4)
  {
    do
    {
      long long v17 = *((_OWORD *)v3 - 3);
      long long v18 = *((_OWORD *)v3 - 2);
      *(_OWORD *)(v13 - 20) = *(_OWORD *)(v3 - 20);
      *((_OWORD *)v13 - 3) = v17;
      *((_OWORD *)v13 - 2) = v18;
      v13 -= 48;
      v3 -= 48;
    }
    while (v3 != v4);
    uint64_t v3 = *a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v14;
  if (v3)
  {
    operator delete(v3);
  }
}

void *std::__function::__value_func<void ()(AMCP::Direction,AMCP::Graph::Graph_Wire const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph4Node21demand_client_io_procERNS0_10Wire_IndexEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::operator()(uint64_t a1, int *a2, uint64_t a3, void *a4, uint64_t *a5)
{
  uint64_t v178 = *MEMORY[0x1E4F143B8];
  int v111 = *a2;
  unint64_t v8 = *(void **)(a1 + 8);
  uint64_t v158 = 0;
  memset(v157, 0, sizeof(v157));
  os_unfair_lock_lock((os_unfair_lock_t)v8);
  v113 = a4;
  v114 = v8;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a4[1] - *a4) >> 3) != 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8[10] - v8[9]) >> 4))
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v171, "com.apple.coreaudio", "AMCP");
    long long v94 = *(NSObject **)v171.__r_.__value_.__l.__data_;
    if (v171.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v171.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
    {
      uint64_t v95 = pthread_self();
      mach_port_t v96 = pthread_mach_thread_np(v95);
      LODWORD(v171.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v171.__r_.__value_.__r.__words[0]) = v96;
      LOWORD(v171.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v171.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Client_IO_Handler.cpp";
      WORD1(v171.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v171.__r_.__value_.__r.__words[2]) = 231;
      LOWORD(v172) = 2080;
      *(void *)((char *)&v172 + 2) = "not (sources.size() == m_streams[Direction::input].size())";
      _os_log_error_impl(&dword_1BAA78000, v94, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Call_Audio_IO_Proc: mismatch between preallocated streams and actual streams", (uint8_t *)&v171, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v115);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Call_Audio_IO_Proc: mismatch between preallocated streams and actual streams", (uint64_t)&v151);
    std::logic_error::logic_error((std::logic_error *)v133, &v151);
    *(void *)v133 = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error((std::logic_error *)&buf, (const std::logic_error *)v133);
    long long v166 = 0uLL;
    *(void *)&long long v167 = 0;
    DWORD2(v167) = -1;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v171, (uint64_t)&buf);
    *((void *)&v172 + 1) = "void AMCP::Graph::Call_Audio_IO_Proc::operator()(AMCP::Object_ID, Node_Type, const IO_Proc_"
                             "Cycle_Info &, const rt_safe_vector<AMCP::DAL::Readable_Range> &, const rt_safe_vector<AMCP:"
                             ":DAL::Writable_Range> &)";
    *(void *)&long long v173 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Client_IO_Handler.cpp";
    DWORD2(v173) = 231;
    std::vector<void *>::vector(&v137);
    int v97 = backtrace((void **)v137.__r_.__value_.__l.__data_, (v137.__r_.__value_.__l.__size_ - v137.__r_.__value_.__r.__words[0]) >> 3);
    std::vector<void *>::resize(&v137.__r_.__value_.__l.__data_, v97);
    *(_OWORD *)&v159[8] = *(_OWORD *)&v137.__r_.__value_.__l.__data_;
    *(void *)v159 = &unk_1F148AA90;
    *(void *)&long long v160 = *((void *)&v137.__r_.__value_.__l + 2);
    memset(&v137, 0, sizeof(v137));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (0x2E8BA2E8BA2E8BA3 * ((a5[1] - *a5) >> 3) != 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8[7] - v8[6]) >> 4))
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v171, "com.apple.coreaudio", "AMCP");
    std::string v98 = *(NSObject **)v171.__r_.__value_.__l.__data_;
    if (v171.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v171.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
    {
      std::logic_error v99 = pthread_self();
      mach_port_t v100 = pthread_mach_thread_np(v99);
      LODWORD(v171.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v171.__r_.__value_.__r.__words[0]) = v100;
      LOWORD(v171.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v171.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Client_IO_Handler.cpp";
      WORD1(v171.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v171.__r_.__value_.__r.__words[2]) = 232;
      LOWORD(v172) = 2080;
      *(void *)((char *)&v172 + 2) = "not (dests.size() == m_streams[Direction::output].size())";
      _os_log_error_impl(&dword_1BAA78000, v98, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Call_Audio_IO_Proc: mismatch between preallocated streams and actual streams", (uint8_t *)&v171, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v115);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Call_Audio_IO_Proc: mismatch between preallocated streams and actual streams", (uint64_t)&v151);
    std::logic_error::logic_error((std::logic_error *)v133, &v151);
    *(void *)v133 = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error((std::logic_error *)&buf, (const std::logic_error *)v133);
    long long v166 = 0uLL;
    *(void *)&long long v167 = 0;
    DWORD2(v167) = -1;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v171, (uint64_t)&buf);
    *((void *)&v172 + 1) = "void AMCP::Graph::Call_Audio_IO_Proc::operator()(AMCP::Object_ID, Node_Type, const IO_Proc_"
                             "Cycle_Info &, const rt_safe_vector<AMCP::DAL::Readable_Range> &, const rt_safe_vector<AMCP:"
                             ":DAL::Writable_Range> &)";
    *(void *)&long long v173 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Client_IO_Handler.cpp";
    DWORD2(v173) = 232;
    std::vector<void *>::vector(&v137);
    int v101 = backtrace((void **)v137.__r_.__value_.__l.__data_, (v137.__r_.__value_.__l.__size_ - v137.__r_.__value_.__r.__words[0]) >> 3);
    std::vector<void *>::resize(&v137.__r_.__value_.__l.__data_, v101);
    *(_OWORD *)&v159[8] = *(_OWORD *)&v137.__r_.__value_.__l.__data_;
    *(void *)v159 = &unk_1F148AA90;
    *(void *)&long long v160 = *((void *)&v137.__r_.__value_.__l + 2);
    memset(&v137, 0, sizeof(v137));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v110 = v8[1];
  AMCP::Graph::io_proc_cycle_info_to_audio_io_cycle_info(a3, (uint64_t)v157);
  uint64_t v11 = *a4;
  if (a4[1] != *a4)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = v11 + v12;
      long long v17 = *(_OWORD *)(v11 + v12);
      v171.__r_.__value_.__r.__words[2] = *(void *)(v11 + v12 + 16);
      *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v17;
      *(void *)&long long v172 = *(void *)(v11 + v12 + 24);
      uint64_t v18 = *(void *)(v11 + v12 + 32);
      *((void *)&v172 + 1) = v18;
      if (v18) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
      }
      long long v19 = *(_OWORD *)(v16 + 40);
      uint64_t v174 = *(void *)(v16 + 56);
      long long v173 = v19;
      uint64_t v175 = *(void *)(v16 + 64);
      uint64_t v20 = *(std::__shared_weak_count **)(v16 + 72);
      v176 = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v177 = *(void *)(v11 + v12 + 80);
      std::string v151 = v171;
      long long v21 = v172;
      long long v152 = v172;
      uint64_t v22 = *((void *)&v172 + 1);
      if (*((void *)&v172 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v172 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      long long v153 = v173;
      uint64_t v154 = v174;
      uint64_t v155 = v175;
      v156 = v176;
      if (v176) {
        atomic_fetch_add_explicit(&v176->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      double v23 = *((double *)v8 + 24);
      if (v22) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
      }
      LODWORD(v148.__vftable) = 2;
      *(double *)&v148.__imp_.__imp_ = -v23;
      uint64_t v149 = 0;
      long long v150 = v21;
      std::string v24 = *(const AMCP::DAL::DAL_Time_Range **)(v8[21] + 8 * v15);
      if (v24)
      {
        AMCP::Graph::align_buffer((AMCP::Graph *)&v151, v24, v10);
        LODWORD(__p[0]) = v111;
        uint64_t v144 = 0;
        uint64_t v145 = 0;
        __p[1] = 0;
        unint64_t v146 = v15;
        int v147 = 0;
        uint64_t v25 = *(void *)(v8[21] + 8 * v15);
        std::string v137 = v151;
        long long v138 = v152;
        if (*((void *)&v152 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v152 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        long long v139 = v153;
        uint64_t v140 = v154;
        uint64_t v141 = v155;
        v142 = v156;
        if (v156) {
          atomic_fetch_add_explicit(&v156->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        AMCP::DAL::Fixed_Buffer::create_writable_range(v25, (uint64_t)&v137, (uint64_t)&buf);
        if (v142) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v142);
        }
        if (*((void *)&v138 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
        }
        (*(void (**)(unsigned char *__return_ptr))(*(void *)v177 + 64))(v133);
        if (caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses((uint64_t)v133, (uint64_t)&v151))
        {
          AMCP::DAL::Writable_Range::receive_data((uint64_t)&buf, (int)__p, (AMCP::DAL::DAL_Time *)&v171);
        }
        else
        {
          uint64_t v30 = *(void *)(*a4 + v12 + 80);
          if (v30)
          {
            (*(void (**)(unsigned char *__return_ptr))(*(void *)v30 + 72))(v159);
            BOOL v31 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses((uint64_t)v159, (uint64_t)&v151);
            if (v164) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v164);
            }
            char v32 = (AMCP::Log::Scope_Registry *)*((void *)&v160 + 1);
            if (*((void *)&v160 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v160 + 1));
            }
            if (!v31)
            {
              AMCP::Log::Scope_Registry::get(v32);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v159, "com.apple.coreaudio", "AMCP");
              v90 = **(NSObject ***)v159;
              if (*(void *)&v159[8]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v159[8]);
              }
              if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
              {
                v91 = pthread_self();
                mach_port_t v92 = pthread_mach_thread_np(v91);
                *(_DWORD *)v159 = 67109890;
                *(_DWORD *)&v159[4] = v92;
                *(_WORD *)&v159[8] = 2080;
                *(void *)&v159[10] = "Client_IO_Handler.cpp";
                *(_WORD *)&v159[18] = 1024;
                *(_DWORD *)&v159[20] = 257;
                LOWORD(v160) = 2080;
                *(void *)((char *)&v160 + 2) = "not (sources[i].m_buffer == nullptr or sources[i].m_buffer->get_allowed"
                                                 "_read_range().encompasses(read_time_range))";
                _os_log_error_impl(&dword_1BAA78000, v90, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Only reflectors can read outside of the valid range.", v159, 0x22u);
              }
              AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v132);
              __cxa_allocate_exception(0x40uLL);
              caulk::make_string((caulk *)"Only reflectors can read outside of the valid range.", (uint64_t)&v125);
              std::logic_error::logic_error(&v126, &v125);
              v126.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
              std::logic_error::logic_error((std::logic_error *)&v127, &v126);
              uint64_t v128 = 0;
              uint64_t v129 = 0;
              uint64_t v130 = 0;
              int v131 = -1;
              v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
              v127.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v159, (uint64_t)&v127);
              *((void *)&v160 + 1) = "void AMCP::Graph::Call_Audio_IO_Proc::operator()(AMCP::Object_ID, Node_Type, cons"
                                       "t IO_Proc_Cycle_Info &, const rt_safe_vector<AMCP::DAL::Readable_Range> &, const "
                                       "rt_safe_vector<AMCP::DAL::Writable_Range> &)";
              *(void *)&long long v161 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Client_IO_Handler.cpp";
              DWORD2(v161) = 257;
              std::vector<void *>::vector(&v121);
              int v93 = backtrace((void **)v121, (*((void *)&v121 + 1) - (void)v121) >> 3);
              std::vector<void *>::resize((char **)&v121, v93);
              *(_OWORD *)&v123[8] = v121;
              uint64_t v124 = v122;
              long long v121 = 0uLL;
              uint64_t v122 = 0;
              *(void *)v123 = &unk_1F148AA90;
              boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
            }
          }
          AMCP::DAL::Writable_Range::pad_and_receive_data((uint64_t)&buf, (uint64_t)__p, (AMCP::DAL::DAL_Time *)&v171);
        }
        uint64_t v33 = *(void *)(v8[21] + 8 * v15);
        std::string v115 = v151;
        long long v116 = v152;
        if (*((void *)&v152 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v152 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        long long v117 = v153;
        uint64_t v118 = v154;
        uint64_t v119 = v155;
        v120 = v156;
        if (v156) {
          atomic_fetch_add_explicit(&v156->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        AMCP::DAL::Fixed_Buffer::create_readable_range(v33, &v115, (uint64_t)v159);
        if (v120) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v120);
        }
        if (*((void *)&v116 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v116 + 1));
        }
        AMCP::Graph::dal_segment_to_proc_stream((uint64_t)v159, v8[9] + v13, (uint64_t *)(v8[15] + v14), (uint64_t)&v148);
        if (v164) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v164);
        }
        if (*((void *)&v160 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v160 + 1));
        }
        if (v136) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v136);
        }
        if (v135) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v135);
        }
        if (v170) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v170);
        }
        if (*((void *)&v166 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v166 + 1));
        }
        if (SHIBYTE(v145) < 0) {
          operator delete(__p[1]);
        }
      }
      else
      {
        uint64_t v26 = *a4;
        uint64_t v27 = *(void *)(*a4 + v12 + 80);
        if (v27)
        {
          (*(void (**)(std::string *__return_ptr))(*(void *)v27 + 64))(&buf);
          BOOL v28 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses((uint64_t)&buf, *a4 + v12);
          if (v170) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v170);
          }
          uint64_t v29 = (AMCP::Log::Scope_Registry *)*((void *)&v166 + 1);
          if (*((void *)&v166 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v166 + 1));
          }
          if (!v28)
          {
            AMCP::Log::Scope_Registry::get(v29);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
            v86 = *(NSObject **)buf.__r_.__value_.__l.__data_;
            if (buf.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
            }
            if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
            {
              v87 = pthread_self();
              mach_port_t v88 = pthread_mach_thread_np(v87);
              LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
              HIDWORD(buf.__r_.__value_.__r.__words[0]) = v88;
              LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Client_IO_Handler.cpp";
              WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
              HIDWORD(buf.__r_.__value_.__r.__words[2]) = 266;
              LOWORD(v166) = 2080;
              *(void *)((char *)&v166 + 2) = "not (sources[i].m_buffer == nullptr or sources[i].m_buffer->get_time_rang"
                                               "e().encompasses(sources[i].get_time_range()))";
              _os_log_error_impl(&dword_1BAA78000, v86, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Reflectors should be using a copy buffer", (uint8_t *)&buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v125);
            __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"Reflectors should be using a copy buffer", (uint64_t)&v127);
            std::logic_error::logic_error((std::logic_error *)v123, &v127);
            *(void *)v123 = MEMORY[0x1E4FBA4C8] + 16;
            std::logic_error::logic_error((std::logic_error *)v159, (const std::logic_error *)v123);
            long long v160 = 0uLL;
            *(void *)&long long v161 = 0;
            DWORD2(v161) = -1;
            *(void *)v159 = &unk_1F1489CC8;
            *(void *)&v159[16] = &unk_1F1489CF0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)v159);
            *((void *)&v166 + 1) = "void AMCP::Graph::Call_Audio_IO_Proc::operator()(AMCP::Object_ID, Node_Type, const "
                                     "IO_Proc_Cycle_Info &, const rt_safe_vector<AMCP::DAL::Readable_Range> &, const rt_s"
                                     "afe_vector<AMCP::DAL::Writable_Range> &)";
            *(void *)&long long v167 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Client_IO_Handler.cpp";
            DWORD2(v167) = 266;
            std::vector<void *>::vector(__p);
            int v89 = backtrace((void **)__p[0], (unint64_t)((char *)__p[1] - (char *)__p[0]) >> 3);
            std::vector<void *>::resize((char **)__p, v89);
            *(_OWORD *)&v133[8] = *(_OWORD *)__p;
            *(void *)v133 = &unk_1F148AA90;
            uint64_t v134 = v144;
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v144 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
          }
          uint64_t v26 = *a4;
        }
        AMCP::Graph::dal_segment_to_proc_stream(v26 + v12, v8[9] + v13, (uint64_t *)(v8[15] + v14), (uint64_t)&v148);
      }
      if (*((void *)&v150 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v150 + 1));
      }
      if (v156) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v156);
      }
      if (*((void *)&v152 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v152 + 1));
      }
      if (v176) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v176);
      }
      if (*((void *)&v172 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v172 + 1));
      }
      ++v15;
      uint64_t v11 = *a4;
      v14 += 40;
      v13 += 80;
      v12 += 88;
    }
    while (v15 < 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a4[1] - *a4) >> 3));
  }
  uint64_t v34 = *a5;
  if (a5[1] != *a5)
  {
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    unint64_t v38 = 0;
    do
    {
      uint64_t v39 = v34 + v35;
      std::string v151 = *(std::string *)v39;
      long long v40 = *(_OWORD *)(v39 + 24);
      long long v112 = v40;
      uint64_t v41 = *(std::__shared_weak_count **)(v39 + 32);
      if (*((void *)&v40 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v40 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)v133 = *(_OWORD *)(v39 + 40);
      *(void *)&v133[16] = *(void *)(v39 + 56);
      uint64_t v42 = *(void *)(v39 + 64);
      __int16 v43 = *(std::__shared_weak_count **)(v39 + 72);
      if (v43) {
        atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v44 = v114[24];
      if (v41) {
        atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(_DWORD *)v159 = 2;
      *(void *)&v159[8] = v44;
      *(void *)&v159[16] = 0;
      long long v160 = v112;
      std::logic_error v45 = *(const AMCP::DAL::DAL_Time_Range **)(v114[18] + 8 * v38);
      int v46 = (AMCP::Graph *)(*a5 + v35);
      if (v45)
      {
        AMCP::Graph::align_buffer(v46, v45, v10);
        uint64_t v47 = *(void *)(v114[18] + 8 * v38);
        std::string buf = v151;
        long long v166 = v112;
        if (v41) {
          atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v167 = *(_OWORD *)v133;
        uint64_t v168 = *(void *)&v133[16];
        uint64_t v169 = v42;
        v170 = v43;
        if (v43) {
          atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        AMCP::DAL::Fixed_Buffer::create_writable_range(v47, (uint64_t)&buf, (uint64_t)&v171);
        if (v170) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v170);
        }
        if (*((void *)&v166 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v166 + 1));
        }
        AMCP::Graph::dal_segment_to_proc_stream((uint64_t)&v171, v114[6] + v36, (uint64_t *)(v114[12] + v37), (uint64_t)v159);
        if (v176) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v176);
        }
        if (*((void *)&v172 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v172 + 1));
        }
      }
      else
      {
        AMCP::Graph::dal_segment_to_proc_stream((uint64_t)v46, v114[6] + v36, (uint64_t *)(v114[12] + v37), (uint64_t)v159);
      }
      if (*((void *)&v160 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v160 + 1));
      }
      unint64_t v8 = v114;
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v43);
      }
      if (v41) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v41);
      }
      ++v38;
      uint64_t v34 = *a5;
      v37 += 40;
      v36 += 80;
      v35 += 88;
    }
    while (v38 < 0x2E8BA2E8BA2E8BA3 * ((a5[1] - *a5) >> 3));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)v8);
  kdebug_trace();
  std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(v8[5], v111, (uint64_t)v157, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8[10] - v8[9]) >> 4), v8[9], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8[7] - v8[6]) >> 4), v8[6]);
  kdebug_trace();
  os_unfair_lock_lock((os_unfair_lock_t)v8);
  if (v110 == v8[1])
  {
    uint64_t v49 = *a5;
    uint64_t v50 = a5[1];
    if (v50 == *a5)
    {
      uint64_t v49 = a5[1];
    }
    else
    {
      uint64_t v51 = 0;
      unint64_t v52 = 0;
      do
      {
        uint64_t v53 = v8[18];
        if (*(void *)(v53 + 8 * v52))
        {
          LODWORD(v151.__r_.__value_.__l.__data_) = v111;
          *(_OWORD *)&v151.__r_.__value_.__r.__words[1] = 0u;
          long long v152 = 0u;
          LODWORD(v153) = 0;
          uint64_t v54 = *(void *)(v53 + 8 * v52);
          uint64_t v55 = v49 + v51;
          uint64_t v56 = *(void *)(v55 + 16);
          *(_OWORD *)v159 = *(_OWORD *)v55;
          *(void *)&v159[16] = v56;
          *(void *)&long long v160 = *(void *)(v55 + 24);
          uint64_t v57 = *(void *)(v55 + 32);
          *((void *)&v160 + 1) = v57;
          if (v57) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v57 + 8), 1uLL, memory_order_relaxed);
          }
          long long v58 = *(_OWORD *)(v55 + 40);
          uint64_t v162 = *(void *)(v55 + 56);
          long long v161 = v58;
          uint64_t v163 = *(void *)(v55 + 64);
          uint64_t v59 = *(std::__shared_weak_count **)(v55 + 72);
          v164 = v59;
          if (v59) {
            atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          AMCP::DAL::Fixed_Buffer::create_readable_range(v54, v159, (uint64_t)&v171);
          AMCP::DAL::Writable_Range::receive_data(*a5 + v51, (int)&v151, (AMCP::DAL::DAL_Time *)&v171);
          if (v176) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v176);
          }
          if (*((void *)&v172 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v172 + 1));
          }
          if (v164) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v164);
          }
          uint64_t v48 = (AMCP::Log::Scope_Registry *)*((void *)&v160 + 1);
          if (*((void *)&v160 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v160 + 1));
          }
          if (SBYTE7(v152) < 0) {
            operator delete((void *)v151.__r_.__value_.__l.__size_);
          }
          uint64_t v49 = *a5;
          uint64_t v50 = a5[1];
        }
        ++v52;
        v51 += 88;
      }
      while (v52 < 0x2E8BA2E8BA2E8BA3 * ((v50 - v49) >> 3));
    }
    uint64_t v60 = v8[9];
    uint64_t v61 = v8[10];
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v113[1] - *v113) >> 3) != 0xCCCCCCCCCCCCCCCDLL * ((v61 - v60) >> 4))
    {
      AMCP::Log::Scope_Registry::get(v48);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v171, "com.apple.coreaudio", "AMCP");
      uint64_t v102 = *(NSObject **)v171.__r_.__value_.__l.__data_;
      if (v171.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v171.__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
      {
        uint64_t v103 = pthread_self();
        mach_port_t v104 = pthread_mach_thread_np(v103);
        LODWORD(v171.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(v171.__r_.__value_.__r.__words[0]) = v104;
        LOWORD(v171.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v171.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Client_IO_Handler.cpp";
        WORD1(v171.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v171.__r_.__value_.__r.__words[2]) = 150;
        LOWORD(v172) = 2080;
        *(void *)((char *)&v172 + 2) = "not (adjust_this.size() == streams.size())";
        _os_log_error_impl(&dword_1BAA78000, v102, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v171, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)v123);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v127);
      std::logic_error::logic_error(&v148, &v127);
      v148.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error((std::logic_error *)&v151, &v148);
      long long v152 = 0uLL;
      *(void *)&long long v153 = 0;
      DWORD2(v153) = -1;
      v151.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
      v151.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v171, (uint64_t)&v151);
      *((void *)&v172 + 1) = "void AMCP::Graph::check_sizes_and_adjust(const rt_safe_vector<T> &, const std::vector<AMC"
                               "P::Proc_Stream> &) [T = AMCP::DAL::Readable_Range]";
      *(void *)&long long v173 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Client_IO_Handler.cpp";
      DWORD2(v173) = 150;
      std::vector<void *>::vector(__p);
      int v105 = backtrace((void **)__p[0], (unint64_t)((char *)__p[1] - (char *)__p[0]) >> 3);
      std::vector<void *>::resize((char **)__p, v105);
      *(_OWORD *)&v133[8] = *(_OWORD *)__p;
      *(void *)v133 = &unk_1F148AA90;
      uint64_t v134 = v144;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v144 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    if (v61 != v60)
    {
      uint64_t v62 = 0;
      unint64_t v63 = 0;
      uint64_t v64 = 64;
      do
      {
        uint64_t v65 = *(unsigned int *)(v60 + v64);
        AMCP::DAL::DAL_Time::operator-((uint64_t)&v171, (AMCP::DAL::DAL_Time *)(*v113 + v62 + 40), (AMCP::DAL::DAL_Time *)(*v113 + v62));
        if ((v171.__r_.__value_.__s.__data_[0] & 2) == 0) {
          AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v171);
        }
        double v66 = *(double *)&v171.__r_.__value_.__l.__size_;
        uint64_t v48 = (AMCP::Log::Scope_Registry *)*((void *)&v172 + 1);
        if (*((void *)&v172 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v172 + 1));
        }
        BOOL v67 = vcvtmd_s64_f64(v66) == v65;
        unint64_t v8 = v114;
        if (!v67)
        {
          uint64_t v68 = *v113 + v62;
          unint64_t v69 = *(void *)(v68 + 24);
          uint64_t v70 = *(std::__shared_weak_count **)(v68 + 32);
          if (v70)
          {
            atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
            unsigned int v71 = *(_DWORD *)(v114[9] + v64);
            *(void *)&long long v72 = v69;
            *((void *)&v72 + 1) = v70;
            atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            unsigned int v71 = *(_DWORD *)(v114[9] + v64);
            long long v72 = v69;
          }
          LODWORD(v171.__r_.__value_.__l.__data_) = 2;
          *(double *)&v171.__r_.__value_.__l.__size_ = (double)v71;
          v171.__r_.__value_.__r.__words[2] = 0;
          long long v172 = v72;
          AMCP::DAL::DAL_Timed_Segment::adjust_length((AMCP::DAL::DAL_Timed_Segment *)(*v113 + v62), (const AMCP::DAL::DAL_Time_Delta *)&v171);
          uint64_t v48 = (AMCP::Log::Scope_Registry *)*((void *)&v172 + 1);
          if (*((void *)&v172 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v172 + 1));
          }
          if (v70) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v70);
          }
        }
        ++v63;
        uint64_t v60 = v114[9];
        v64 += 80;
        v62 += 88;
      }
      while (v63 < 0xCCCCCCCCCCCCCCCDLL * ((v114[10] - v60) >> 4));
      uint64_t v49 = *a5;
      uint64_t v50 = a5[1];
    }
    uint64_t v73 = 0x2E8BA2E8BA2E8BA3 * ((v50 - v49) >> 3);
    uint64_t v74 = v8[6];
    uint64_t v75 = v8[7];
    if (v73 != 0xCCCCCCCCCCCCCCCDLL * ((v75 - v74) >> 4))
    {
      AMCP::Log::Scope_Registry::get(v48);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v171, "com.apple.coreaudio", "AMCP");
      std::string v106 = *(NSObject **)v171.__r_.__value_.__l.__data_;
      if (v171.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v171.__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
      {
        long long v107 = pthread_self();
        mach_port_t v108 = pthread_mach_thread_np(v107);
        LODWORD(v171.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(v171.__r_.__value_.__r.__words[0]) = v108;
        LOWORD(v171.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v171.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Client_IO_Handler.cpp";
        WORD1(v171.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v171.__r_.__value_.__r.__words[2]) = 150;
        LOWORD(v172) = 2080;
        *(void *)((char *)&v172 + 2) = "not (adjust_this.size() == streams.size())";
        _os_log_error_impl(&dword_1BAA78000, v106, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v171, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)v123);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v127);
      std::logic_error::logic_error(&v148, &v127);
      v148.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error((std::logic_error *)&v151, &v148);
      long long v152 = 0uLL;
      *(void *)&long long v153 = 0;
      DWORD2(v153) = -1;
      v151.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
      v151.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v171, (uint64_t)&v151);
      *((void *)&v172 + 1) = "void AMCP::Graph::check_sizes_and_adjust(const rt_safe_vector<T> &, const std::vector<AMC"
                               "P::Proc_Stream> &) [T = AMCP::DAL::Writable_Range]";
      *(void *)&long long v173 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Client_IO_Handler.cpp";
      DWORD2(v173) = 150;
      std::vector<void *>::vector(__p);
      int v109 = backtrace((void **)__p[0], (unint64_t)((char *)__p[1] - (char *)__p[0]) >> 3);
      std::vector<void *>::resize((char **)__p, v109);
      *(_OWORD *)&v133[8] = *(_OWORD *)__p;
      *(void *)v133 = &unk_1F148AA90;
      uint64_t v134 = v144;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v144 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    if (v75 != v74)
    {
      uint64_t v76 = 0;
      unint64_t v77 = 0;
      uint64_t v78 = 64;
      do
      {
        uint64_t v79 = *(unsigned int *)(v74 + v78);
        AMCP::DAL::DAL_Time::operator-((uint64_t)&v171, (AMCP::DAL::DAL_Time *)(*a5 + v76 + 40), (AMCP::DAL::DAL_Time *)(*a5 + v76));
        if ((v171.__r_.__value_.__s.__data_[0] & 2) == 0) {
          AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v171);
        }
        double v80 = *(double *)&v171.__r_.__value_.__l.__size_;
        if (*((void *)&v172 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v172 + 1));
        }
        if (vcvtmd_s64_f64(v80) != v79)
        {
          uint64_t v81 = *a5 + v76;
          unint64_t v82 = *(void *)(v81 + 24);
          v83 = *(std::__shared_weak_count **)(v81 + 32);
          if (v83)
          {
            atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
            unsigned int v84 = *(_DWORD *)(v114[6] + v78);
            *(void *)&long long v85 = v82;
            *((void *)&v85 + 1) = v83;
            atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            unsigned int v84 = *(_DWORD *)(v114[6] + v78);
            long long v85 = v82;
          }
          LODWORD(v171.__r_.__value_.__l.__data_) = 2;
          *(double *)&v171.__r_.__value_.__l.__size_ = (double)v84;
          v171.__r_.__value_.__r.__words[2] = 0;
          long long v172 = v85;
          AMCP::DAL::DAL_Timed_Segment::adjust_length((AMCP::DAL::DAL_Timed_Segment *)(*a5 + v76), (const AMCP::DAL::DAL_Time_Delta *)&v171);
          if (*((void *)&v172 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v172 + 1));
          }
          if (v83) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v83);
          }
        }
        ++v77;
        unint64_t v8 = v114;
        uint64_t v74 = v114[6];
        v78 += 80;
        v76 += 88;
      }
      while (v77 < 0xCCCCCCCCCCCCCCCDLL * ((v114[7] - v74) >> 4));
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)v8);
}

void sub_1BAD59520(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = &unk_1F14704A8;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

void *std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F14704A8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

void std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14704A8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_1>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14704A8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__shared_ptr_emplace<AMCP::Graph::Call_Audio_IO_Proc>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 192;
  do
  {
    unint64_t v8 = (void **)(v3 + v2);
    std::vector<std::unique_ptr<AMCP::DAL::Fixed_Buffer>>::__destroy_vector::operator()[abi:ne180100](&v8);
    v2 -= 24;
  }
  while (v2 != -48);
  for (uint64_t i = 0; i != -48; i -= 24)
  {
    unint64_t v8 = (void **)(a1 + 144 + i);
    std::vector<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  }
  for (uint64_t j = 0; j != -48; j -= 24)
  {
    unint64_t v6 = *(void **)(a1 + j + 96);
    if (v6)
    {
      *(void *)(a1 + j + 104) = v6;
      operator delete(v6);
    }
  }

  return std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void std::__shared_ptr_emplace<AMCP::Graph::Call_Audio_IO_Proc>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1470458;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Graph::Call_Audio_IO_Proc>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1470458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph4Node21demand_client_io_procERNS0_10Wire_IndexEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire const&)>::operator()(void *a1, unsigned int *a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 408))
  {
    unsigned int v4 = *a2;
    AMCP::Graph::Graph_Wire::Connection::Connection(&v14, (const AMCP::Graph::Graph_Wire::Connection *)(a3 + 192));
    if (v4) {
      unint64_t v5 = (std::string *)&v16;
    }
    else {
      unint64_t v5 = &v14;
    }
    uint64_t terminal = get_terminal((AMCP::Log::Scope_Registry *)(a1 + 2), (unsigned __int8 *)v5);
    if (v23 || v26 == 1 || v25 == 1 || v28 || (*(_DWORD *)(terminal + 100) == 1 ? (BOOL v7 = v27 == 0) : (BOOL v7 = 0), !v7))
    {
      unint64_t v8 = &v18;
      if (!v4) {
        unint64_t v8 = &v15;
      }
      uint64_t v9 = *(void *)(a1[1] + 24 * v4) + 48 * *v8;
      *(_DWORD *)(v9 + 40) = 1;
      long long v10 = *(_OWORD *)terminal;
      long long v11 = *(_OWORD *)(terminal + 16);
      *(void *)(v9 + 32) = *(void *)(terminal + 32);
      *(_OWORD *)uint64_t v9 = v10;
      *(_OWORD *)(v9 + 16) = v11;
    }
    uint64_t v12 = *(void *)(terminal + 104);
    uint64_t v13 = a1[4];
    *(_DWORD *)uint64_t v13 = v12;
    *(unsigned char *)(v13 + 4) = BYTE4(v12);
    if (__p)
    {
      uint64_t v30 = __p;
      operator delete(__p);
    }
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    if (v21)
    {
      uint64_t v22 = v21;
      operator delete(v21);
    }
    if (v20 < 0) {
      operator delete(v19);
    }
    if (v17 < 0) {
      operator delete(v16);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BAD59FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44)
{
  if (__p) {
    operator delete(__p);
  }
  if (a40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a40);
  }
  if (a32) {
    operator delete(a32);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void *std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire const&)>::__clone(void *result, void *a2)
{
  uint64_t v2 = result[1];
  *a2 = &unk_1F14703C8;
  a2[1] = v2;
  uint64_t v3 = result[3];
  a2[2] = result[2];
  a2[3] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  a2[4] = result[4];
  return result;
}

char *std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire const&)>::__clone(uint64_t a1)
{
  __n128 result = (char *)operator new(0x28uLL);
  *(void *)__n128 result = &unk_1F14703C8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)result + 4) = *(void *)(a1 + 32);
  return result;
}

void std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14703C8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0,std::allocator<AMCP::Graph::Node::demand_client_io_proc(AMCP::Graph::Wire_Index &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14703C8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void non-virtual thunk to'HALS_PlugInStream::HandlePlugIn_PropertiesChanged(HALS_PlugInStream *this, unsigned int a2, const AudioObjectPropertyAddress *a3)
{
}

void HALS_PlugInStream::HandlePlugIn_PropertiesChanged(HALS_PlugInStream *this, unsigned int a2, const AudioObjectPropertyAddress *a3)
{
  if (a2)
  {
    char v4 = 0;
    unint64_t v5 = a3;
    uint64_t v6 = a2;
    do
    {
      AudioObjectPropertySelector mSelector = v5->mSelector;
      ++v5;
      v4 |= mSelector == 1885762657;
      --v6;
    }
    while (v6);
    if (v4) {
      HALS_PlugInStream::BuildFormatList(this);
    }
  }
  unint64_t v8 = (HALS_NotificationManager *)*((unsigned int *)this + 4);

  HALS_Object::PropertiesChanged(this, v8, 0, a2, a3);
}

void HALS_PlugInStream::BuildFormatList(HALS_PlugInStream *this)
{
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = *(void *)(v2 + 400);
  char v4 = *(std::__shared_weak_count **)(v2 + 408);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *((unsigned int *)this + 21);
  uint64_t v8 = 0x676C6F6270667461;
  int v9 = 0;
  unsigned int v6 = (*(unsigned int (**)(uint64_t, uint64_t, void, uint64_t *, void, void))(*(void *)v3 + 568))(v3, v5, 0, &v8, 0, 0)/ 0x38;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unsigned int v7 = v6;
  operator new[]();
}

void sub_1BAD5A4C8(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  MEMORY[0x1C1859810](v1, 0x1000C8021716A34);
  _Unwind_Resume(a1);
}

void ___ZN17HALS_PlugInStream15BuildFormatListEv_block_invoke(uint64_t a1, uint64_t a2, const AudioStreamRangedDescription *a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  v3[15] = v3[14];
  v3[18] = v3[17];
  if (*(_DWORD *)(a1 + 48))
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    unsigned int v7 = (HALB_FormatList *)(v3 + 13);
    do
    {
      HALB_FormatList::AddPhysicalFormat(v7, (const AudioStreamRangedDescription *)(*(void *)(a1 + 40) + v5), a3);
      ++v6;
      v5 += 56;
    }
    while (v6 < *(unsigned int *)(a1 + 48));
  }
}

void non-virtual thunk to'HALS_PlugInStream::~HALS_PlugInStream(HALS_PlugInStream *this)
{
  HALS_PlugInStream::~HALS_PlugInStream((HALS_PlugInStream *)((char *)this - 64));

  JUMPOUT(0x1C1859840);
}

{
  HALS_PlugInStream::~HALS_PlugInStream((HALS_PlugInStream *)((char *)this - 64));
}

void HALS_PlugInStream::~HALS_PlugInStream(HALS_PlugInStream *this)
{
  *(void *)this = &unk_1F1470528;
  uint64_t v2 = (HALS_PlugInStream *)((char *)this + 64);
  *((void *)this + 8) = &unk_1F1470628;
  HALB_FormatList::~HALB_FormatList((HALS_PlugInStream *)((char *)this + 104));
  HALS_PlugInObject::~HALS_PlugInObject(v2);

  HALS_Object::~HALS_Object(this);
}

{
  uint64_t vars8;

  HALS_PlugInStream::~HALS_PlugInStream(this);

  JUMPOUT(0x1C1859840);
}

void HALS_PlugInStream::SetPropertyData(HALS_PlugInStream *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const AudioStreamBasicDescription *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_PlugInStream *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  char v17 = (int *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  if (!v17)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "HALS_PlugInStream.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 478;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInStream::SetPropertyData: owning device is missing", (uint8_t *)&buf, 0x12u);
    }
    int v54 = 560947818;
LABEL_73:
    uint64_t v55 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v55 = off_1F148A5D8;
    v55[2] = v54;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if (!HALB_Info::PropertyRequiresHogMode((HALB_Info *)a3->mSelector, v16)) {
    goto LABEL_6;
  }
  if (!HALS_Device::IsHogModeOwnerOrFree((HALS_Device *)v17, a8))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "HALS_PlugInStream.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 479;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInStream::SetPropertyData: the given process does not own hog mode", (uint8_t *)&buf, 0x12u);
    }
    int v54 = 560492391;
    goto LABEL_73;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
LABEL_6:
  switch(mSelector)
  {
    case 0x70667420u:
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_81;
        }
        LODWORD(buf.mSampleRate) = 136315394;
        *(void *)((char *)&buf.mSampleRate + 4) = "HALS_PlugInStream.cpp";
        LOWORD(buf.mFormatFlags) = 1024;
        *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 519;
        uint64_t v56 = MEMORY[0x1E4F14500];
        uint64_t v57 = "%25s:%-5d  HALS_PlugInStream::SetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormat";
        goto LABEL_80;
      }
      uint64_t v27 = *((void *)this + 9);
      uint64_t v28 = *(void *)(v27 + 400);
      uint64_t v29 = *(std::__shared_weak_count **)(v27 + 408);
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v30 = *((unsigned int *)this + 21);
      if (a8) {
        uint64_t v31 = *((unsigned int *)a8 + 58);
      }
      else {
        uint64_t v31 = 0;
      }
      strcpy((char *)&buf, " tfpbolg");
      BYTE1(buf.mFormatID) = 0;
      HIWORD(buf.mFormatID) = 0;
      BOOL v62 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, AudioStreamBasicDescription *, void, void, uint64_t, BOOL *, double *))(*(void *)v28 + 576))(v28, v30, v31, &buf, 0, 0, 40, &v62, v60);
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      HALB_FormatList::BestMatchForPhysicalFormat((HALS_PlugInStream *)((char *)this + 104), a5, &v61, v48, v60[0]);
      if (a8 && (v61.mFormatID != 1819304813 || (v61.mFormatFlags & 0x40) != 0)) {
        HALS_Client::SetNonMixableFormat(a8, v17[4]);
      }
      uint64_t v49 = *((void *)this + 9);
      uint64_t v44 = *(void *)(v49 + 400);
      std::logic_error v45 = *(std::__shared_weak_count **)(v49 + 408);
      if (v45) {
        atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v46 = *((unsigned int *)this + 21);
      if (a8) {
        uint64_t v47 = *((unsigned int *)a8 + 58);
      }
      else {
        uint64_t v47 = 0;
      }
LABEL_56:
      strcpy((char *)&buf, " tfpbolg");
      BYTE1(buf.mFormatID) = 0;
      HIWORD(buf.mFormatID) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, AudioStreamBasicDescription *, void, void, uint64_t, AudioStreamBasicDescription *))(*(void *)v44 + 584))(v44, v46, v47, &buf, 0, 0, 40, &v61);
      if (!v45) {
        goto LABEL_65;
      }
      uint64_t v50 = v45;
LABEL_61:
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
      goto LABEL_65;
    case 0x73666D74u:
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_81;
        }
        LODWORD(buf.mSampleRate) = 136315394;
        *(void *)((char *)&buf.mSampleRate + 4) = "HALS_PlugInStream.cpp";
        LOWORD(buf.mFormatFlags) = 1024;
        *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 500;
        uint64_t v56 = MEMORY[0x1E4F14500];
        uint64_t v57 = "%25s:%-5d  HALS_PlugInStream::SetPropertyData: bad property data size for kAudioStreamPropertyVirtualFormat";
        goto LABEL_80;
      }
      uint64_t v22 = *((void *)this + 9);
      uint64_t v23 = *(void *)(v22 + 400);
      std::string v24 = *(std::__shared_weak_count **)(v22 + 408);
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v25 = *((unsigned int *)this + 21);
      if (a8) {
        uint64_t v26 = *((unsigned int *)a8 + 58);
      }
      else {
        uint64_t v26 = 0;
      }
      strcpy((char *)&buf, " tfpbolg");
      BYTE1(buf.mFormatID) = 0;
      HIWORD(buf.mFormatID) = 0;
      BOOL v62 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, AudioStreamBasicDescription *, void, void, uint64_t, BOOL *, double *))(*(void *)v23 + 576))(v23, v25, v26, &buf, 0, 0, 40, &v62, v60);
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
      long long v42 = *(_OWORD *)&a5->mBytesPerPacket;
      *(_OWORD *)&buf.mSampleRate = *(_OWORD *)&a5->mSampleRate;
      *(_OWORD *)&buf.mBytesPerPacket = v42;
      *(void *)&buf.mBitsPerChannel = *(void *)&a5->mBitsPerChannel;
      if (buf.mFormatID == 1819304813)
      {
        buf.mBitsPerChannel = 0;
        *(void *)&buf.mFramesPerPacket = 0;
        *(void *)&buf.mFormatFlags = 0;
      }
      HALB_FormatList::BestMatchForPhysicalFormat((HALS_PlugInStream *)((char *)this + 104), &buf, &v61, v41, v60[0]);
      if (a8 && (v61.mFormatID != 1819304813 || (v61.mFormatFlags & 0x40) != 0)) {
        HALS_Client::SetNonMixableFormat(a8, v17[4]);
      }
      uint64_t v43 = *((void *)this + 9);
      uint64_t v44 = *(void *)(v43 + 400);
      std::logic_error v45 = *(std::__shared_weak_count **)(v43 + 408);
      if (v45) {
        atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v46 = *((unsigned int *)this + 21);
      if (a8) {
        uint64_t v47 = *((unsigned int *)a8 + 58);
      }
      else {
        uint64_t v47 = 0;
      }
      goto LABEL_56;
    case 0x73616374u:
      if (a4 > 3)
      {
        if (!*((_DWORD *)this + 14))
        {
          uint64_t v19 = *((void *)this + 9);
          uint64_t v20 = *(void *)(v19 + 400);
          long long v21 = *(std::__shared_weak_count **)(v19 + 408);
          if (v21) {
            atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          BOOL v51 = LODWORD(a5->mSampleRate) != 0;
          strcpy((char *)&buf, "tcasbolg");
          BYTE1(buf.mFormatID) = 0;
          HIWORD(buf.mFormatID) = 0;
          BOOL v62 = v51;
          (*(void (**)(void))(*(void *)v20 + 584))();
          if (v21) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          }
        }
        v59[0] = MEMORY[0x1E4F143A8];
        v59[1] = 0x40000000;
        v59[2] = ___ZN17HALS_PlugInStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
        v59[3] = &__block_descriptor_tmp_23_8392;
        v59[4] = this;
        v59[5] = a5;
        unint64_t v52 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v52, (uint64_t)v59);
        goto LABEL_65;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
LABEL_81:
        long long v58 = __cxa_allocate_exception(0x10uLL);
        *(void *)long long v58 = off_1F148A5D8;
        v58[2] = 561211770;
      }
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "HALS_PlugInStream.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 487;
      uint64_t v56 = MEMORY[0x1E4F14500];
      uint64_t v57 = "%25s:%-5d  HALS_PlugInStream::SetPropertyData: bad property data size for kAudioStreamPropertyIsActive";
LABEL_80:
      _os_log_impl(&dword_1BAA78000, v56, OS_LOG_TYPE_ERROR, v57, (uint8_t *)&buf, 0x12u);
      goto LABEL_81;
  }
  if (HALS_Stream::HasProperty(this, a2, a3, a8)) {
    HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v32, v33, v34, v35, (uint64_t)a8);
  }
  if ((*(unsigned int (**)(char *, void))(*((void *)this + 8) + 24))((char *)this + 64, a3->mSelector))
  {
    uint64_t v37 = *((void *)this + 9);
    uint64_t v38 = *(void *)(v37 + 400);
    uint64_t v39 = *(std::__shared_weak_count **)(v37 + 408);
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v40 = a8 ? *((unsigned int *)a8 + 58) : 0;
    (*(void (**)(uint64_t, void, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const AudioStreamBasicDescription *))(*(void *)v38 + 584))(v38, *((unsigned int *)this + 21), v40, a3, a6, a7, a4, a5);
    if (v39)
    {
      uint64_t v50 = v39;
      goto LABEL_61;
    }
  }
LABEL_65:
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v17, v36);
}

void sub_1BAD5AF48(_Unwind_Exception *a1, HALS_Object *a2)
{
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t ___ZN17HALS_PlugInStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 100) = **(_DWORD **)(result + 40) != 0;
  return result;
}

void HALS_PlugInStream::GetPropertyData(HALS_PlugInStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, unsigned int *a5, _DWORD *a6, uint64_t a7, _DWORD *a8, HALS_Client *a9)
{
  uint64_t v153 = *MEMORY[0x1E4F143B8];
  if (a9) {
    BOOL v16 = *((unsigned char *)a9 + 258) == 0;
  }
  else {
    BOOL v16 = 1;
  }
  uint64_t v143 = 0;
  uint64_t v144 = &v143;
  uint64_t v145 = 0x5002000000;
  unint64_t v146 = __Block_byref_object_copy__8395;
  int v147 = __Block_byref_object_dispose__8396;
  uint64_t v17 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  uint64_t v118 = (HALS_ObjectMap *)v17;
  if (!v17)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string v151 = 136315394;
      *(void *)&v151[4] = "HALS_PlugInStream.cpp";
      *(_WORD *)&v151[12] = 1024;
      *(_DWORD *)&v151[14] = 182;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: owning device is missing", v151, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 560947818;
  }
  uint64_t v18 = (*(uint64_t (**)(uint64_t, HALS_Client *))(*(void *)v17 + 696))(v17, a9);
  long long v116 = v19;
  double v21 = *(double *)&v18;
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1935762291)
  {
    if (mSelector <= 1885762591)
    {
      if (mSelector > 1819569762)
      {
        if (mSelector == 1819569763)
        {
          if (a4 <= 3)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_233;
            }
            *(_DWORD *)std::string v151 = 136315394;
            *(void *)&v151[4] = "HALS_PlugInStream.cpp";
            *(_WORD *)&v151[12] = 1024;
            *(_DWORD *)&v151[14] = 241;
            v113 = MEMORY[0x1E4F14500];
            v114 = "%25s:%-5d  HALS_PlugInStream::GetPropertyData: bad property data size for kAudioStreamPropertyLatency";
            goto LABEL_232;
          }
          uint64_t v50 = *((void *)this + 9);
          uint64_t v51 = *(void *)(v50 + 400);
          unint64_t v52 = *(std::__shared_weak_count **)(v50 + 408);
          if (v52) {
            atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          strcpy(v151, "cntlbolg");
          v151[9] = 0;
          *(_WORD *)&v151[10] = 0;
          *(void *)&long long buf = 0;
          (*(void (**)(uint64_t))(*(void *)v51 + 576))(v51);
          unsigned int v92 = DWORD1(buf);
          if (v52) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v52);
          }
          if ((_BYTE)v116) {
            unsigned int v92 = (v21
          }
                               / (*(double (**)(HALS_ObjectMap *))(*(void *)v118 + 264))(v118)
                               * (double)v92);
          *a6 = v92;
          goto LABEL_197;
        }
        int v31 = 1851878764;
      }
      else
      {
        if (mSelector == 1668641652)
        {
          unsigned int v43 = a4 / 0xC;
          if (*((_DWORD *)this + 24) < a4 / 0xC) {
            unsigned int v43 = *((_DWORD *)this + 24);
          }
          if (v43)
          {
            uint64_t v44 = 0;
            unint64_t v45 = 0;
            do
            {
              if (v45 < *((unsigned int *)this + 24))
              {
                uint64_t v46 = (char *)&a6[v44];
                uint64_t v47 = (uint64_t *)(*((void *)this + 11) + v44 * 4);
                uint64_t v48 = *v47;
                *((_DWORD *)v46 + 2) = *((_DWORD *)v47 + 2);
                *(void *)uint64_t v46 = v48;
              }
              ++v45;
              v44 += 3;
            }
            while (3 * v43 != v44);
          }
          int v49 = 12 * v43;
          goto LABEL_198;
        }
        int v31 = 1819173229;
      }
      if (mSelector != v31) {
        goto LABEL_120;
      }
      if (a4 <= 7)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_233;
        }
        *(_DWORD *)std::string v151 = 136315394;
        *(void *)&v151[4] = "HALS_PlugInStream.cpp";
        *(_WORD *)&v151[12] = 1024;
        *(_DWORD *)&v151[14] = 190;
        v113 = MEMORY[0x1E4F14500];
        v114 = "%25s:%-5d  HALS_PlugInStream::GetPropertyData: bad property data size for kAudioObjectPropertyName";
        goto LABEL_232;
      }
      uint64_t v32 = *((void *)this + 9);
      uint64_t v33 = *(void *)(v32 + 400);
      uint64_t v34 = *(std::__shared_weak_count **)(v32 + 408);
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      strcpy(v151, "manlbolg");
      v151[9] = 0;
      *(_WORD *)&v151[10] = 0;
      *(void *)((char *)&buf + 4) = 0;
      LODWORD(buf) = 0;
      (*(void (**)(uint64_t))(*(void *)v33 + 576))(v33);
      *(void *)a6 = *(void *)((char *)&buf + 4);
      if (v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
      int v49 = 8;
LABEL_198:
      *a5 = v49;
      goto LABEL_199;
    }
    if (mSelector <= 1885762622)
    {
      if (mSelector != 1885762592)
      {
        if (mSelector != 1885762595) {
          goto LABEL_120;
        }
        *(void *)std::string v151 = 0;
        *(void *)&v151[8] = v151;
        *(void *)&v151[16] = 0x2000000000;
        uint64_t v152 = 0;
        v120[0] = MEMORY[0x1E4F143A8];
        v120[1] = 0x40000000;
        v120[2] = ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_19;
        v120[3] = &unk_1E6233580;
        int v121 = a4;
        v120[4] = v151;
        v120[5] = this;
        v120[6] = a6;
        uint64_t v35 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v35, (uint64_t)v120);
        uint64_t v36 = *(void *)(*(void *)&v151[8] + 24);
        if ((_BYTE)v116) {
          BOOL v37 = v36 == 0;
        }
        else {
          BOOL v37 = 1;
        }
        if (!v37)
        {
          uint64_t v38 = *(void *)(*(void *)&v151[8] + 24);
          do
          {
            *(double *)a6 = v21;
            a6 += 10;
            --v38;
          }
          while (v38);
        }
        goto LABEL_93;
      }
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_233;
        }
        *(_DWORD *)std::string v151 = 136315394;
        *(void *)&v151[4] = "HALS_PlugInStream.cpp";
        *(_WORD *)&v151[12] = 1024;
        *(_DWORD *)&v151[14] = 297;
        v113 = MEMORY[0x1E4F14500];
        v114 = "%25s:%-5d  HALS_PlugInStream::GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormat";
        goto LABEL_232;
      }
      uint64_t v64 = *((void *)this + 9);
      uint64_t v65 = *(void *)(v64 + 400);
      double v66 = *(std::__shared_weak_count **)(v64 + 408);
      if (v66) {
        atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v67 = *((unsigned int *)this + 21);
      if (a9) {
        uint64_t v68 = *((unsigned int *)a9 + 58);
      }
      else {
        uint64_t v68 = 0;
      }
      strcpy(v151, " tfpbolg");
      v151[9] = 0;
      *(_WORD *)&v151[10] = 0;
      DWORD1(buf) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *, void, void, uint64_t, char *, _DWORD *))(*(void *)v65 + 576))(v65, v67, v68, v151, 0, 0, 40, (char *)&buf + 4, a6);
      if (v66) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v66);
      }
      goto LABEL_154;
    }
    if (mSelector == 1885762623)
    {
      if (a4 > 0x27)
      {
        *a5 = 40;
        *(void *)std::string v151 = 0;
        *(void *)&v151[8] = v151;
        *(void *)&v151[16] = 0x2000000000;
        LOBYTE(v152) = 0;
        v119[0] = MEMORY[0x1E4F143A8];
        v119[1] = 0x40000000;
        v119[2] = ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_21;
        v119[3] = &unk_1E62335A8;
        v119[6] = v18;
        v119[7] = v19;
        v119[4] = v151;
        v119[5] = this;
        v119[8] = a6;
        long long v58 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v58, (uint64_t)v119);
        if (!*(unsigned char *)(*(void *)&v151[8] + 24))
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            DWORD1(buf) = 136315394;
            *((void *)&buf + 1) = "HALS_PlugInStream.cpp";
            __int16 v149 = 1024;
            int v150 = 436;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInStream::_GetPropertyData: kAudioStreamPropertyPhysicalFormatSupported: the format is not supported", (uint8_t *)&buf + 4, 0x12u);
          }
          uint64_t v59 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v59 = off_1F148A5D8;
          v59[2] = 560226676;
        }
        goto LABEL_119;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string v151 = 136315394;
        *(void *)&v151[4] = "HALS_PlugInStream.cpp";
        *(_WORD *)&v151[12] = 1024;
        *(_DWORD *)&v151[14] = 418;
        v113 = MEMORY[0x1E4F14500];
        v114 = "%25s:%-5d  HALS_PlugInStream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormatSupported";
LABEL_232:
        _os_log_impl(&dword_1BAA78000, v113, OS_LOG_TYPE_ERROR, v114, v151, 0x12u);
      }
LABEL_233:
      std::string v115 = __cxa_allocate_exception(0x10uLL);
      *(void *)std::string v115 = off_1F148A5D8;
      v115[2] = 561211770;
    }
    if (mSelector != 1885762657)
    {
      if (mSelector != 1885762669) {
        goto LABEL_120;
      }
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_233;
        }
        *(_DWORD *)std::string v151 = 136315394;
        *(void *)&v151[4] = "HALS_PlugInStream.cpp";
        *(_WORD *)&v151[12] = 1024;
        *(_DWORD *)&v151[14] = 306;
        v113 = MEMORY[0x1E4F14500];
        v114 = "%25s:%-5d  HALS_PlugInStream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormatMatch";
        goto LABEL_232;
      }
      *a5 = 40;
      uint64_t v25 = *((void *)this + 9);
      uint64_t v26 = *(void *)(v25 + 400);
      uint64_t v27 = *(std::__shared_weak_count **)(v25 + 408);
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      strcpy(v151, " tfpbolg");
      v151[9] = 0;
      *(_WORD *)&v151[10] = 0;
      DWORD1(buf) = 0;
      (*(void (**)(uint64_t))(*(void *)v26 + 576))(v26);
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      if (a8) {
        BOOL v95 = a7 == 40;
      }
      else {
        BOOL v95 = 0;
      }
      if (v95) {
        mach_port_t v96 = a8;
      }
      else {
        mach_port_t v96 = a6;
      }
      int v97 = v133;
      v133[0] = MEMORY[0x1E4F143A8];
      v133[1] = 0x40000000;
      v133[2] = ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_7;
      v133[3] = &unk_1E6233478;
      *(double *)&v133[6] = v21;
      v133[7] = v116;
      long long v98 = *((_OWORD *)v96 + 1);
      long long v134 = *(_OWORD *)v96;
      long long v135 = v98;
      uint64_t v99 = *((void *)v96 + 4);
      v133[5] = this;
      v133[4] = &v143;
      uint64_t v136 = v99;
      std::string v137 = a6;
      mach_port_t v100 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(void *)this + 56))(this);
      goto LABEL_183;
    }
    *(void *)std::string v151 = 0;
    *(void *)&v151[8] = v151;
    *(void *)&v151[16] = 0x2000000000;
    uint64_t v152 = 0;
    v122[0] = MEMORY[0x1E4F143A8];
    v122[1] = 0x40000000;
    v122[2] = ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_17;
    v122[3] = &unk_1E6233558;
    int v123 = a4;
    v122[4] = v151;
    v122[5] = this;
    v122[6] = a6;
    uint64_t v53 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v53, (uint64_t)v122);
    uint64_t v54 = *(void *)(*(void *)&v151[8] + 24);
    if ((_BYTE)v116) {
      BOOL v55 = v54 == 0;
    }
    else {
      BOOL v55 = 1;
    }
    if (!v55)
    {
      int64x2_t v56 = vdupq_n_s64(*(unint64_t *)&v21);
      uint64_t v57 = *(void *)(*(void *)&v151[8] + 24);
      do
      {
        *(double *)a6 = v21;
        *(int64x2_t *)(a6 + 10) = v56;
        a6 += 14;
        --v57;
      }
      while (v57);
    }
LABEL_117:
    unsigned int v63 = 56 * v54;
    goto LABEL_118;
  }
  if (mSelector > 1936092512)
  {
    if (mSelector > 1936092531)
    {
      if (mSelector != 1936092532)
      {
        if (mSelector == 1952542835)
        {
          if (a4 <= 3)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_233;
            }
            *(_DWORD *)std::string v151 = 136315394;
            *(void *)&v151[4] = "HALS_PlugInStream.cpp";
            *(_WORD *)&v151[12] = 1024;
            *(_DWORD *)&v151[14] = 442;
            v113 = MEMORY[0x1E4F14500];
            v114 = "%25s:%-5d  HALS_PlugInStream::GetPropertyData: bad property data size for kAudioStreamPropertyIsReferenceStream";
            goto LABEL_232;
          }
          if (*((_DWORD *)this + 14) == 1)
          {
            *a6 = 1;
            goto LABEL_197;
          }
          uint64_t v80 = *((void *)this + 9);
          uint64_t v81 = *(void *)(v80 + 400);
          unint64_t v82 = *(std::__shared_weak_count **)(v80 + 408);
          if (v82) {
            atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v83 = *((unsigned int *)this + 21);
          if (a9) {
            uint64_t v84 = *((unsigned int *)a9 + 58);
          }
          else {
            uint64_t v84 = 0;
          }
          strcpy(v151, "spatbolg");
          v151[9] = 0;
          *(_WORD *)&v151[10] = 0;
          int v108 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)v81 + 552))(v81, v83, v84, v151);
          if (v82) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v82);
          }
          if (!v108)
          {
            *a6 = 0;
            goto LABEL_197;
          }
          uint64_t v109 = *((void *)this + 9);
          uint64_t v110 = *(void *)(v109 + 400);
          uint64_t v30 = *(std::__shared_weak_count **)(v109 + 408);
          if (v30) {
            atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          strcpy(v151, "spatbolg");
          v151[9] = 0;
          *(_WORD *)&v151[10] = 0;
          *(void *)&long long buf = 0;
          (*(void (**)(uint64_t))(*(void *)v110 + 576))(v110);
        }
        else
        {
          if (mSelector != 1952805485) {
            goto LABEL_120;
          }
          if (a4 <= 3)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_233;
            }
            *(_DWORD *)std::string v151 = 136315394;
            *(void *)&v151[4] = "HALS_PlugInStream.cpp";
            *(_WORD *)&v151[12] = 1024;
            *(_DWORD *)&v151[14] = 211;
            v113 = MEMORY[0x1E4F14500];
            v114 = "%25s:%-5d  HALS_PlugInStream::GetPropertyData: bad property data size for kAudioStreamPropertyTerminalType";
            goto LABEL_232;
          }
          uint64_t v28 = *((void *)this + 9);
          uint64_t v29 = *(void *)(v28 + 400);
          uint64_t v30 = *(std::__shared_weak_count **)(v28 + 408);
          if (v30) {
            atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          strcpy(v151, "mretbolg");
          v151[9] = 0;
          *(_WORD *)&v151[10] = 0;
          *(void *)&long long buf = 0;
          (*(void (**)(uint64_t))(*(void *)v29 + 576))(v29);
        }
        *a6 = DWORD1(buf);
        if (v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
        goto LABEL_197;
      }
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_233;
        }
        *(_DWORD *)std::string v151 = 136315394;
        *(void *)&v151[4] = "HALS_PlugInStream.cpp";
        *(_WORD *)&v151[12] = 1024;
        *(_DWORD *)&v151[14] = 254;
        v113 = MEMORY[0x1E4F14500];
        v114 = "%25s:%-5d  HALS_PlugInStream::GetPropertyData: bad property data size for kAudioStreamPropertyVirtualFormat";
        goto LABEL_232;
      }
      uint64_t v70 = *((void *)this + 9);
      uint64_t v71 = *(void *)(v70 + 400);
      long long v72 = *(std::__shared_weak_count **)(v70 + 408);
      if (v72) {
        atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v73 = *((unsigned int *)this + 21);
      if (a9) {
        uint64_t v74 = *((unsigned int *)a9 + 58);
      }
      else {
        uint64_t v74 = 0;
      }
      strcpy(v151, " tfpbolg");
      v151[9] = 0;
      *(_WORD *)&v151[10] = 0;
      DWORD1(buf) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *, void, void, uint64_t, char *, _DWORD *))(*(void *)v71 + 576))(v71, v73, v74, v151, 0, 0, 40, (char *)&buf + 4, a6);
      if (v72) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v72);
      }
      if (a6[2] == 1819304813 && (a6[3] & 0x40) == 0)
      {
        if (v16) {
          int v93 = 9;
        }
        else {
          int v93 = 11;
        }
        int v94 = 4 * a6[7];
        a6[3] = v93;
        a6[4] = v94;
        a6[5] = 1;
        a6[6] = v94;
        a6[8] = 32;
      }
LABEL_154:
      if ((_BYTE)v116) {
        *(double *)a6 = v21;
      }
      int v49 = 40;
      goto LABEL_198;
    }
    if (mSelector != 1936092513)
    {
      if (mSelector != 1936092525) {
        goto LABEL_120;
      }
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_233;
        }
        *(_DWORD *)std::string v151 = 136315394;
        *(void *)&v151[4] = "HALS_PlugInStream.cpp";
        *(_WORD *)&v151[12] = 1024;
        *(_DWORD *)&v151[14] = 264;
        v113 = MEMORY[0x1E4F14500];
        v114 = "%25s:%-5d  HALS_PlugInStream::_GetPropertyData: bad property data size for kAudioDevicePropertyStreamFormatMatch";
        goto LABEL_232;
      }
      *a5 = 40;
      uint64_t v40 = *((void *)this + 9);
      uint64_t v41 = *(void *)(v40 + 400);
      long long v42 = *(std::__shared_weak_count **)(v40 + 408);
      if (v42) {
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      strcpy(v151, " tfpbolg");
      v151[9] = 0;
      *(_WORD *)&v151[10] = 0;
      DWORD1(buf) = 0;
      (*(void (**)(uint64_t))(*(void *)v41 + 576))(v41);
      if (v42) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v42);
      }
      int v101 = v144;
      if (*((_DWORD *)v144 + 12) == 1819304813 && (*((unsigned char *)v144 + 52) & 0x40) == 0)
      {
        if (v16) {
          int v102 = 9;
        }
        else {
          int v102 = 11;
        }
        int v103 = 4 * *((_DWORD *)v144 + 17);
        *((_DWORD *)v144 + 13) = v102;
        *((_DWORD *)v101 + 14) = v103;
        *((_DWORD *)v101 + 15) = 1;
        *((_DWORD *)v101 + 16) = v103;
        *((_DWORD *)v101 + 18) = 32;
      }
      if (a8) {
        BOOL v104 = a7 == 40;
      }
      else {
        BOOL v104 = 0;
      }
      if (v104) {
        int v105 = a8;
      }
      else {
        int v105 = a6;
      }
      int v97 = v138;
      v138[0] = MEMORY[0x1E4F143A8];
      v138[1] = 0x40000000;
      v138[2] = ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
      v138[3] = &unk_1E6233450;
      *(double *)&v138[6] = v21;
      v138[7] = v116;
      long long v106 = *((_OWORD *)v105 + 1);
      long long v139 = *(_OWORD *)v105;
      long long v140 = v106;
      uint64_t v107 = *((void *)v105 + 4);
      v138[5] = this;
      v138[4] = &v143;
      uint64_t v141 = v107;
      v142 = a6;
      mach_port_t v100 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(void *)this + 56))(this);
LABEL_183:
      HALB_CommandGate::ExecuteCommand(v100, (uint64_t)v97);
      goto LABEL_199;
    }
    *(void *)std::string v151 = 0;
    *(void *)&v151[8] = v151;
    *(void *)&v151[16] = 0x2000000000;
    uint64_t v152 = 0;
    v128[0] = MEMORY[0x1E4F143A8];
    v128[1] = 0x40000000;
    v128[2] = ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2;
    v128[3] = &unk_1E62334E0;
    BOOL v130 = v16;
    int v129 = a4;
    v128[4] = v151;
    v128[5] = this;
    v128[6] = a6;
    uint64_t v76 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v76, (uint64_t)v128);
    uint64_t v54 = *(void *)(*(void *)&v151[8] + 24);
    if ((_BYTE)v116) {
      BOOL v77 = v54 == 0;
    }
    else {
      BOOL v77 = 1;
    }
    if (!v77)
    {
      int64x2_t v78 = vdupq_n_s64(*(unint64_t *)&v21);
      uint64_t v79 = *(void *)(*(void *)&v151[8] + 24);
      do
      {
        *(double *)a6 = v21;
        *(int64x2_t *)(a6 + 10) = v78;
        a6 += 14;
        --v79;
      }
      while (v79);
    }
    goto LABEL_117;
  }
  if (mSelector <= 1935960433)
  {
    if (mSelector == 1935762292)
    {
      if (a4 <= 3)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_233;
        }
        *(_DWORD *)std::string v151 = 136315394;
        *(void *)&v151[4] = "HALS_PlugInStream.cpp";
        *(_WORD *)&v151[12] = 1024;
        *(_DWORD *)&v151[14] = 339;
        v113 = MEMORY[0x1E4F14500];
        v114 = "%25s:%-5d  HALS_PlugInStream::_GetPropertyData: bad property data size for kAudioStreamPropertyIsActive";
        goto LABEL_232;
      }
      v132[0] = MEMORY[0x1E4F143A8];
      v132[1] = 0x40000000;
      v132[2] = ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_9;
      v132[3] = &__block_descriptor_tmp_10_8409;
      v132[4] = this;
      v132[5] = a6;
      uint64_t v75 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v75, (uint64_t)v132);
      goto LABEL_197;
    }
    if (mSelector != 1935894638) {
      goto LABEL_120;
    }
    if (a4 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_233;
      }
      *(_DWORD *)std::string v151 = 136315394;
      *(void *)&v151[4] = "HALS_PlugInStream.cpp";
      *(_WORD *)&v151[12] = 1024;
      *(_DWORD *)&v151[14] = 219;
      v113 = MEMORY[0x1E4F14500];
      v114 = "%25s:%-5d  HALS_PlugInStream::GetPropertyData: bad property data size for kAudioStreamPropertyStartingChannel";
      goto LABEL_232;
    }
    if (*((_DWORD *)this + 14) == 1)
    {
      int NeighborStartingChannel = HALS_Device::GetNeighborStartingChannel(this, v118, v20);
    }
    else
    {
      uint64_t v85 = *((void *)this + 9);
      uint64_t v86 = *(void *)(v85 + 400);
      v87 = *(std::__shared_weak_count **)(v85 + 408);
      if (v87) {
        atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      strcpy(v151, "nhcsbolg");
      v151[9] = 0;
      *(_WORD *)&v151[10] = 0;
      *(void *)&long long buf = 0;
      (*(void (**)(uint64_t))(*(void *)v86 + 576))(v86);
      int v111 = DWORD1(buf);
      *a6 = DWORD1(buf);
      if (v87)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v87);
        int v111 = *a6;
      }
      if (v111) {
        goto LABEL_197;
      }
      int NeighborStartingChannel = 1;
    }
    *a6 = NeighborStartingChannel;
LABEL_197:
    int v49 = 4;
    goto LABEL_198;
  }
  switch(mSelector)
  {
    case 1935960434:
      if (a4 <= 3)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_233;
        }
        *(_DWORD *)std::string v151 = 136315394;
        *(void *)&v151[4] = "HALS_PlugInStream.cpp";
        *(_WORD *)&v151[12] = 1024;
        *(_DWORD *)&v151[14] = 348;
        v113 = MEMORY[0x1E4F14500];
        v114 = "%25s:%-5d  HALS_PlugInStream::_GetPropertyData: bad property data size for kAudioStreamPropertyDirection";
        goto LABEL_232;
      }
      v131[0] = MEMORY[0x1E4F143A8];
      v131[1] = 0x40000000;
      v131[2] = ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_11;
      v131[3] = &__block_descriptor_tmp_12_8411;
      v131[4] = this;
      v131[5] = a6;
      unint64_t v69 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v69, (uint64_t)v131);
      goto LABEL_197;
    case 1936092451:
      *(void *)std::string v151 = 0;
      *(void *)&v151[8] = v151;
      *(void *)&v151[16] = 0x2000000000;
      uint64_t v152 = 0;
      v125[0] = MEMORY[0x1E4F143A8];
      v125[1] = 0x40000000;
      v125[2] = ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3;
      v125[3] = &unk_1E6233508;
      BOOL v127 = v16;
      int v126 = a4;
      v125[4] = v151;
      v125[5] = this;
      v125[6] = a6;
      uint64_t v60 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v60, (uint64_t)v125);
      uint64_t v36 = *(void *)(*(void *)&v151[8] + 24);
      if ((_BYTE)v116) {
        BOOL v61 = v36 == 0;
      }
      else {
        BOOL v61 = 1;
      }
      if (!v61)
      {
        uint64_t v62 = *(void *)(*(void *)&v151[8] + 24);
        do
        {
          *(double *)a6 = v21;
          a6 += 10;
          --v62;
        }
        while (v62);
      }
LABEL_93:
      unsigned int v63 = 40 * v36;
LABEL_118:
      *a5 = v63;
LABEL_119:
      _Block_object_dispose(v151, 8);
      goto LABEL_199;
    case 1936092479:
      if (a4 > 0x27)
      {
        *a5 = 40;
        *(void *)std::string v151 = 0;
        *(void *)&v151[8] = v151;
        *(void *)&v151[16] = 0x2000000000;
        LOBYTE(v152) = 0;
        v124[0] = MEMORY[0x1E4F143A8];
        v124[1] = 0x40000000;
        v124[2] = ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_15;
        v124[3] = &unk_1E6233530;
        v124[6] = v18;
        v124[7] = v19;
        v124[4] = v151;
        v124[5] = this;
        v124[8] = a6;
        uint64_t v23 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v23, (uint64_t)v124);
        if (!*(unsigned char *)(*(void *)&v151[8] + 24))
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            DWORD1(buf) = 136315394;
            *((void *)&buf + 1) = "HALS_PlugInStream.cpp";
            __int16 v149 = 1024;
            int v150 = 393;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInStream::_GetPropertyData: kAudioDevicePropertyStreamFormatSupported: the format is not supported", (uint8_t *)&buf + 4, 0x12u);
          }
          std::string v24 = __cxa_allocate_exception(0x10uLL);
          *(void *)std::string v24 = off_1F148A5D8;
          v24[2] = 560226676;
        }
        goto LABEL_119;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string v151 = 136315394;
        *(void *)&v151[4] = "HALS_PlugInStream.cpp";
        *(_WORD *)&v151[12] = 1024;
        *(_DWORD *)&v151[14] = 375;
        v113 = MEMORY[0x1E4F14500];
        v114 = "%25s:%-5d  HALS_PlugInStream::_GetPropertyData: bad property data size for kAudioDevicePropertyStreamFormatSupported";
        goto LABEL_232;
      }
      goto LABEL_233;
  }
LABEL_120:
  if (HALS_Stream::HasProperty(this, a2, a3, a9))
  {
    HALS_Stream::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  else if ((*(unsigned int (**)(char *, void))(*((void *)this + 8) + 24))((char *)this + 64, a3->mSelector))
  {
    uint64_t v88 = *((void *)this + 9);
    uint64_t v89 = *(void *)(v88 + 400);
    v90 = *(std::__shared_weak_count **)(v88 + 408);
    if (v90) {
      atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (a9) {
      uint64_t v91 = *((unsigned int *)a9 + 58);
    }
    else {
      uint64_t v91 = 0;
    }
    (*(void (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *, uint64_t, _DWORD *, uint64_t, unsigned int *, _DWORD *))(*(void *)v89 + 576))(v89, *((unsigned int *)this + 21), v91, a3, a7, a8, a4, a5, a6);
    if (v90) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v90);
    }
  }
LABEL_199:
  HALS_ObjectMap::ReleaseObject(v118, v19);
  _Block_object_dispose(&v143, 8);
}

void sub_1BAD5CAA0(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, HALS_ObjectMap *a13)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  HALS_ObjectMap::ReleaseObject(a13, a2);
  _Block_object_dispose(&STACK[0x2F8], 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__8395(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  long long v3 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v3;
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, AudioStreamBasicDescription *a4)
{
  uint64_t v5 = *(HALB_FormatList ***)(a1 + 40);
  if (*(unsigned char *)(a1 + 56))
  {
    unsigned int v7 = &unk_1F1464420;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    HALB_FormatList::GetFormatListWithUpdatedSampleRate(v5[17], v5[18], (HALB_FormatList *)&v7, *(Float64 *)(a1 + 48));
    HALB_FormatList::BestMatchForVirtualFormat((HALB_FormatList *)&v7, (const AudioStreamBasicDescription *)(a1 + 64), *(const AudioStreamBasicDescription **)(a1 + 104), v6, *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 40));
    HALB_FormatList::~HALB_FormatList((HALB_FormatList *)&v7);
  }
  else
  {
    HALB_FormatList::BestMatchForVirtualFormat((HALB_FormatList *)(v5 + 13), (const AudioStreamBasicDescription *)(a1 + 64), *(const AudioStreamBasicDescription **)(a1 + 104), a4, *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 40));
  }
}

void sub_1BAD5CC2C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_7(uint64_t a1, uint64_t a2, uint64_t a3, AudioStreamBasicDescription *a4)
{
  uint64_t v5 = *(HALB_FormatList ***)(a1 + 40);
  if (*(unsigned char *)(a1 + 56))
  {
    unsigned int v7 = &unk_1F1464420;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    HALB_FormatList::GetFormatListWithUpdatedSampleRate(v5[17], v5[18], (HALB_FormatList *)&v7, *(Float64 *)(a1 + 48));
    HALB_FormatList::BestMatchForPhysicalFormat((HALB_FormatList *)&v7, (const AudioStreamBasicDescription *)(a1 + 64), *(const AudioStreamBasicDescription **)(a1 + 104), v6, *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 40));
    HALB_FormatList::~HALB_FormatList((HALB_FormatList *)&v7);
  }
  else
  {
    HALB_FormatList::BestMatchForPhysicalFormat((HALB_FormatList *)(v5 + 13), (const AudioStreamBasicDescription *)(a1 + 64), *(const AudioStreamBasicDescription **)(a1 + 104), a4, *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 40));
  }
}

void sub_1BAD5CD04(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_9(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(unsigned __int8 *)(*(void *)(result + 32) + 100);
  return result;
}

uint64_t ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_11(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(unsigned __int8 *)(*(void *)(result + 32) + 52);
  return result;
}

uint64_t ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2(uint64_t a1)
{
  return HALB_FormatList::GetVirtualFormats(*(void *)(a1 + 40) + 104, *(unsigned char *)(a1 + 60), *(unsigned int *)(a1 + 56) / 0x38uLL, (unint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(AudioStreamRangedDescription **)(a1 + 48));
}

uint64_t ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3(uint64_t a1)
{
  return HALB_FormatList::GetVirtualFormats(*(void *)(a1 + 40) + 104, *(unsigned char *)(a1 + 60), *(unsigned int *)(a1 + 56) / 0x28uLL, (unint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(AudioStreamBasicDescription **)(a1 + 48));
}

void sub_1BAD5CDC8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_15(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(unsigned char *)(a1 + 56))
  {
    long long v3 = &unk_1F1464420;
    long long v4 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    HALB_FormatList::GetFormatListWithUpdatedSampleRate(*(HALB_FormatList **)(v2 + 136), *(const HALB_FormatList **)(v2 + 144), (HALB_FormatList *)&v3, *(Float64 *)(a1 + 48));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALB_FormatList::IsVirtualFormatSupported((const AudioStreamBasicDescription *)v4, *((AudioStreamBasicDescription **)&v4 + 1), *(void *)(a1 + 64));
    HALB_FormatList::~HALB_FormatList((HALB_FormatList *)&v3);
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALB_FormatList::IsVirtualFormatSupported(*(const AudioStreamBasicDescription **)(v2 + 112), *(AudioStreamBasicDescription **)(v2 + 120), *(void *)(a1 + 64));
  }
}

void sub_1BAD5CE90(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HALB_FormatList::~HALB_FormatList((HALB_FormatList *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAD5CE80);
}

__n128 ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_17(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(v3 + 24) = 0;
  if (v1 >= 0x38)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = v1 / 0x38uLL;
    uint64_t v8 = -1;
    do
    {
      uint64_t v9 = *(void *)(v2 + 136);
      if (++v8 >= (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((*(void *)(v2 + 144) - v9) >> 3))) {
        break;
      }
      uint64_t v10 = v9 + v5;
      v5 += 56;
      uint64_t v11 = v4 + 56 * v6;
      __n128 result = *(__n128 *)v10;
      long long v13 = *(_OWORD *)(v10 + 16);
      long long v14 = *(_OWORD *)(v10 + 32);
      *(void *)(v11 + 48) = *(void *)(v10 + 48);
      *(_OWORD *)(v11 + 16) = v13;
      *(_OWORD *)(v11 + 32) = v14;
      *(__n128 *)uint64_t v11 = result;
      unint64_t v6 = *(void *)(v3 + 24) + 1;
      *(void *)(v3 + 24) = v6;
    }
    while (v6 < v7);
  }
  return result;
}

uint64_t ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_19(uint64_t a1)
{
  return HALB_FormatList::GetPhysicalFormats(*(void *)(a1 + 40) + 104, *(unsigned int *)(a1 + 56) / 0x38uLL, (unint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(AudioStreamBasicDescription **)(a1 + 48));
}

void sub_1BAD5CF9C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK17HALS_PlugInStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_21(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v3 = &unk_1F1464420;
    long long v4 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    HALB_FormatList::GetFormatListWithUpdatedSampleRate(*(HALB_FormatList **)(v2 + 136), *(const HALB_FormatList **)(v2 + 144), (HALB_FormatList *)&v3, *(Float64 *)(a1 + 48));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALB_FormatList::IsVirtualFormatSupported(*((const AudioStreamBasicDescription **)&v5 + 1), (AudioStreamBasicDescription *)v6, *(void *)(a1 + 64));
    HALB_FormatList::~HALB_FormatList((HALB_FormatList *)&v3);
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALB_FormatList::IsVirtualFormatSupported(*(const AudioStreamBasicDescription **)(v2 + 136), *(AudioStreamBasicDescription **)(v2 + 144), *(void *)(a1 + 64));
  }
}

void sub_1BAD5D064(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HALB_FormatList::~HALB_FormatList((HALB_FormatList *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAD5D054);
}

uint64_t HALS_PlugInStream::GetPropertyDataSize(HALS_PlugInStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, HALS_Client *a6)
{
  uint64_t v29 = 0;
  uint64_t v30 = &v29;
  uint64_t v31 = 0x2000000000;
  int v32 = 0;
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1885762656)
  {
    if (mSelector > 1936092512)
    {
      if (mSelector != 1936092513)
      {
        if (mSelector != 1952542835) {
          goto LABEL_23;
        }
        int v15 = 4;
LABEL_17:
        int v32 = v15;
        goto LABEL_22;
      }
      long long v13 = v27;
      v27[0] = MEMORY[0x1E4F143A8];
      v27[1] = 0x40000000;
      v27[2] = ___ZNK17HALS_PlugInStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2;
      v27[3] = &unk_1E62333B0;
      v27[4] = &v29;
      void v27[5] = this;
      long long v14 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(void *)this + 56))(this);
    }
    else if (mSelector == 1885762657)
    {
      long long v13 = v25;
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 0x40000000;
      v25[2] = ___ZNK17HALS_PlugInStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4;
      v25[3] = &unk_1E6233400;
      v25[4] = &v29;
      v25[5] = this;
      long long v14 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(void *)this + 56))(this);
    }
    else
    {
      if (mSelector != 1936092451) {
        goto LABEL_23;
      }
      long long v13 = v26;
      v26[0] = MEMORY[0x1E4F143A8];
      v26[1] = 0x40000000;
      v26[2] = ___ZNK17HALS_PlugInStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3;
      v26[3] = &unk_1E62333D8;
      v26[4] = &v29;
      v26[5] = this;
      long long v14 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(void *)this + 56))(this);
    }
    goto LABEL_21;
  }
  if (mSelector > 1851878763)
  {
    if (mSelector == 1851878764) {
      goto LABEL_16;
    }
    if (mSelector != 1885762595) {
      goto LABEL_23;
    }
    long long v13 = v24;
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 0x40000000;
    v24[2] = ___ZNK17HALS_PlugInStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_5;
    v24[3] = &unk_1E6233428;
    v24[4] = &v29;
    v24[5] = this;
    long long v14 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(void *)this + 56))(this);
LABEL_21:
    HALB_CommandGate::ExecuteCommand(v14, (uint64_t)v13);
    goto LABEL_22;
  }
  if (mSelector == 1668641652)
  {
    long long v13 = v28;
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 0x40000000;
    v28[2] = ___ZNK17HALS_PlugInStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke;
    v28[3] = &unk_1E6233388;
    v28[4] = &v29;
    v28[5] = this;
    long long v14 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInStream *))(*(void *)this + 56))(this);
    goto LABEL_21;
  }
  if (mSelector == 1819173229)
  {
LABEL_16:
    int v15 = 8;
    goto LABEL_17;
  }
LABEL_23:
  if (HALS_Stream::HasProperty(this, a2, a3, a6))
  {
    int PropertyDataSize = HALS_Stream::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
    *((_DWORD *)v30 + 6) = PropertyDataSize;
  }
  else if ((*(unsigned int (**)(char *, void))(*((void *)this + 8) + 24))((char *)this + 64, a3->mSelector))
  {
    uint64_t v19 = *((void *)this + 9);
    uint64_t v20 = *(void *)(v19 + 400);
    double v21 = *(std::__shared_weak_count **)(v19 + 408);
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (a6) {
      uint64_t v22 = *((unsigned int *)a6 + 58);
    }
    else {
      uint64_t v22 = 0;
    }
    int v23 = (*(uint64_t (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)v20 + 568))(v20, *((unsigned int *)this + 21), v22, a3, a4, a5);
    *((_DWORD *)v30 + 6) = v23;
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
  }
LABEL_22:
  uint64_t v16 = *((unsigned int *)v30 + 6);
  _Block_object_dispose(&v29, 8);
  return v16;
}

void sub_1BAD5D518(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Block_object_dispose((const void *)(v2 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK17HALS_PlugInStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 12 * *(_DWORD *)(*(void *)(result + 40) + 96);
  return result;
}

uint64_t ___ZNK17HALS_PlugInStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(void *)(result + 40) + 120)
                                                                   - *(_DWORD *)(*(void *)(result + 40) + 112)) & 0xFFFFFFF8;
  return result;
}

uint64_t ___ZNK17HALS_PlugInStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = -1840700264
                                                                  * ((*(void *)(*(void *)(result + 40) + 120)
                                                                    - *(void *)(*(void *)(result + 40) + 112)) >> 3);
  return result;
}

uint64_t ___ZNK17HALS_PlugInStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(void *)(result + 40) + 144)
                                                                   - *(_DWORD *)(*(void *)(result + 40) + 136)) & 0xFFFFFFF8;
  return result;
}

uint64_t ___ZNK17HALS_PlugInStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_5(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(void *)(result + 40) + 144)
                                                                   - *(_DWORD *)(*(void *)(result + 40) + 136)) & 0xFFFFFFF8;
  return result;
}

uint64_t HALS_PlugInStream::IsPropertySettable(HALS_PlugInStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if (a3->mSelector == 1952542835) {
    return 0;
  }
  if (mSelector == 1935762292) {
    return 1;
  }
  if (mSelector == 1668641652) {
    return 0;
  }
  if (!HALS_Stream::HasProperty(this, a2, a3, a4))
  {
    if ((*(unsigned int (**)(char *, void))(*((void *)this + 8) + 24))((char *)this + 64, a3->mSelector))
    {
      uint64_t v11 = *((void *)this + 9);
      uint64_t v12 = *(void *)(v11 + 400);
      long long v13 = *(std::__shared_weak_count **)(v11 + 408);
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (a4) {
        uint64_t v14 = *((unsigned int *)a4 + 58);
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *))(*(void *)v12 + 560))(v12, *((unsigned int *)this + 21), v14, a3);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      return v10;
    }
    return 0;
  }

  return HALS_Stream::IsPropertySettable((uint64_t)this, a2, (int *)a3);
}

void sub_1BAD5D738(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugInStream::HasProperty(HALS_PlugInStream *this, unsigned int a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1851878763)
  {
    if (mSelector != 1668641652)
    {
      int v8 = 1819173229;
      goto LABEL_6;
    }
    int v14 = *((_DWORD *)this + 24);
    return v14 != 0;
  }
  if (mSelector == 1952542835)
  {
    int v14 = *((unsigned __int8 *)this + 52);
    return v14 != 0;
  }
  int v8 = 1851878764;
LABEL_6:
  if (mSelector == v8)
  {
    uint64_t v9 = *((void *)this + 9);
    uint64_t v10 = *(void *)(v9 + 400);
    uint64_t v11 = *(std::__shared_weak_count **)(v9 + 408);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = *((unsigned int *)this + 21);
    if (a4) {
      uint64_t v13 = *((unsigned int *)a4 + 58);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v22 = 0x676C6F626C6E616DLL;
    int v23 = 0;
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v10 + 552))(v10, v12, v13, &v22);
    if (v11)
    {
      uint64_t v16 = v11;
LABEL_19:
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  else if (HALS_Stream::HasProperty(this, a2, a3, a4))
  {
    return 1;
  }
  else
  {
    if (!(*(unsigned int (**)(char *, void))(*((void *)this + 8) + 24))((char *)this + 64, a3->mSelector))return 0; {
    uint64_t v18 = *((void *)this + 9);
    }
    uint64_t v19 = *(void *)(v18 + 400);
    uint64_t v20 = *(std::__shared_weak_count **)(v18 + 408);
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (a4) {
      uint64_t v21 = *((unsigned int *)a4 + 58);
    }
    else {
      uint64_t v21 = 0;
    }
    uint64_t v15 = (*(uint64_t (**)(uint64_t, void, uint64_t, const AudioObjectPropertyAddress *))(*(void *)v19
                                                                                                  + 552))(v19, *((unsigned int *)this + 21), v21, a3);
    if (v20)
    {
      uint64_t v16 = v20;
      goto LABEL_19;
    }
  }
  return v15;
}

void sub_1BAD5D930(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_PlugInStream::Activate(HALS_PlugInStream *this, HALS_Object *a2)
{
}

void sub_1BAD5DB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1BAD5DC9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BAD5DD34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BAD5DDA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Timestamp_Writer::Timestamp_Data::Timestamp_Data(uint64_t a1, uint64_t a2, void *a3, double a4, double a5)
{
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "current sample");
  uint64_t v10 = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (v10) {
    uint64_t v10 = AMCP::Thing::convert_to<unsigned long long>(v10 + 40);
  }
  *(void *)a1 = v10;
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "current host");
  uint64_t v11 = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (v11) {
    uint64_t v11 = AMCP::Thing::convert_to<unsigned long long>(v11 + 40);
  }
  *(void *)(a1 + 8) = v11;
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 16) = vcvtmd_s64_f64(a4);
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = vcvtmd_s64_f64(a5 - a4);
  std::string::basic_string[abi:ne180100]<0>(__p, "IO rate scalar");
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (v12) {
    double v13 = AMCP::Thing::convert_to<double>((uint64_t)(v12 + 40));
  }
  else {
    double v13 = 0.0;
  }
  *(double *)(a1 + 40) = v13;
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "zts host");
  uint64_t v14 = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (v14) {
    uint64_t v14 = AMCP::Thing::convert_to<unsigned long long>(v14 + 40);
  }
  *(void *)(a1 + 56) = v14;
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "zts sample");
  uint64_t v15 = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (v15) {
    uint64_t v15 = AMCP::Thing::convert_to<long long>(v15 + 40);
  }
  *(void *)(a1 + 48) = v15;
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "zts rate scalar");
  uint64_t v16 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (v16) {
    double v17 = AMCP::Thing::convert_to<double>((uint64_t)(v16 + 40));
  }
  else {
    double v17 = 0.0;
  }
  *(double *)(a1 + 64) = v17;
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1BAD5DF98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Timestamp_Writer::Timestamp_Data>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  if (a2 < 0x38E38E38E38E38FLL)
  {
    uint64_t v2 = result;
    __n128 result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
    if (*MEMORY[0x1E4FB7E88]) {
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
    }
  }
  __break(1u);
  return result;
}

caulk::rt_safe_memory_resource *std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Timestamp_Writer::Timestamp_Data>>(caulk::rt_safe_memory_resource *result)
{
  if ((unint64_t)result < 0x38E38E38E38E38FLL)
  {
    __n128 result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
    if (*MEMORY[0x1E4FB7E88]) {
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_allocate(result);
    }
  }
  __break(1u);
  return result;
}

uint64_t std::__split_buffer<AMCP::DAL::Timestamp_Writer::Timestamp_Data,caulk::rt_allocator<AMCP::DAL::Timestamp_Writer::Timestamp_Data> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a1 + 8)) {
    *(void *)(a1 + 16) = (v2 - *(void *)(a1 + 8) - 72) % 0x48uLL + *(void *)(a1 + 8);
  }
  uint64_t v3 = *(caulk::rt_safe_memory_resource **)a1;
  if (*(void *)a1) {
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Timestamp_Writer::Timestamp_Data>>::deallocate[abi:ne180100](v3, 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 24) - (void)v3) >> 3));
  }
  return a1;
}

void AMCP::DAL::get_timestamp_writer_queue(AMCP::DAL *this)
{
  {
    uint64_t v1 = dispatch_queue_create("Time Stamp Writer Queue", 0);
    AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)AMCP::DAL::get_timestamp_writer_queue(void)::s_timestamp_writer_queue, v1);
    if (v1) {
      dispatch_release(v1);
    }
  }
}

uint64_t *applesauce::dispatch::v1::async<AMCP::DAL::Timestamp_Writer::~Timestamp_Writer()::$_0 &>(dispatch_queue_s *,AMCP::DAL::Timestamp_Writer::~Timestamp_Writer()::$_0 &)::{lambda(void *)#1}::__invoke(AMCP::Log::Scope_Registry *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  double v17 = a1;
  uint64_t v1 = (void *)*((void *)a1 + 2);
  if (*v1 != v1[1])
  {
    uint64_t v2 = *(const char **)a1;
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v3 = **(NSObject ***)buf;
    if (*(void *)v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v19);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      if (v2[23] >= 0) {
        uint64_t v16 = v2;
      }
      else {
        uint64_t v16 = *(const char **)v2;
      }
      *(_DWORD *)long long buf = 67109890;
      *(_DWORD *)&buf[4] = v15;
      *(_WORD *)uint64_t v19 = 2080;
      *(void *)&v19[2] = "Timestamp_Writer.cpp";
      __int16 v20 = 1024;
      int v21 = 109;
      __int16 v22 = 2080;
      int v23 = v16;
      _os_log_debug_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Timestamp_Writer::write_timestamp_file: writing time stamps to %s", buf, 0x22u);
    }
    if (v2[23] >= 0) {
      long long v4 = v2;
    }
    else {
      long long v4 = *(const char **)v2;
    }
    long long v5 = fopen(v4, "w");
    if (v5)
    {
      uint64_t v6 = *(void *)(*v1 + 16);
      uint64_t v7 = *(void *)(*v1 + 24);
      uint64_t v9 = *(void *)(*v1 + 48);
      uint64_t v8 = *(void *)(*v1 + 56);
      fwrite("Current Sample Time\tCurrent Host Time\tIO Sample Time\tIO Host Time\tIO Frame Size\tIO Sample Diff\tIO Host Diff\tRate Scalar\tZTS Sample\tZTS Host\tZTS Sample Diff\tZTS Host Diff\tZTS Host/Frame\n", 0xB9uLL, 1uLL, v5);
      uint64_t v10 = *v1;
      uint64_t v11 = v1[1];
      if (*v1 != v11)
      {
        do
        {
          fprintf(v5, "%lld\t%lld\t%lld\t%lld\t%lld\t%lld\t%lld\t%0.5f", *(void *)v10, *(void *)(v10 + 8), *(void *)(v10 + 16), *(void *)(v10 + 24), *(void *)(v10 + 32), *(void *)(v10 + 16) - v6, *(void *)(v10 + 24) - v7, *(double *)(v10 + 40));
          uint64_t v12 = *(void *)(v10 + 48);
          if (v12 == v9) {
            fputc(10, v5);
          }
          else {
            fprintf(v5, "\t%lld\t%lld\t%lld\t%lld\t%0.5f\n", v12, *(void *)(v10 + 56), v12 - v9, *(void *)(v10 + 56) - v8, (double)(unint64_t)(*(void *)(v10 + 56) - v8) / (double)(v12 - v9));
          }
          uint64_t v6 = *(void *)(v10 + 16);
          uint64_t v7 = *(void *)(v10 + 24);
          uint64_t v9 = *(void *)(v10 + 48);
          uint64_t v8 = *(void *)(v10 + 56);
          v10 += 72;
        }
        while (v10 != v11);
      }
      fclose(v5);
    }
  }
  return std::unique_ptr<-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1},std::default_delete<-[Core_Audio_Driver_Service_Client connect_to_driver_service:]::$_2::operator() const(void)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100]((uint64_t *)&v17);
}

void sub_1BAD5E3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAD5E328);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<std::basic_string<char,std::char_traits<char>,std::pmr::polymorphic_allocator<char>>>::__on_zero_shared(uint64_t result)
{
  if (*(char *)(result + 47) < 0) {
    return (*(uint64_t (**)(void, void, uint64_t, uint64_t))(**(void **)(result + 48) + 24))(*(void *)(result + 48), *(void *)(result + 24), *(void *)(result + 40) & 0x7FFFFFFFFFFFFFFFLL, 1);
  }
  return result;
}

void std::__shared_ptr_emplace<std::basic_string<char,std::char_traits<char>,std::pmr::polymorphic_allocator<char>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14706E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<std::basic_string<char,std::char_traits<char>,std::pmr::polymorphic_allocator<char>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14706E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

caulk::rt_safe_memory_resource *std::__shared_ptr_emplace<caulk::rt_vector<AMCP::DAL::Timestamp_Writer::Timestamp_Data>>::__on_zero_shared(void *a1)
{
  __n128 result = (caulk::rt_safe_memory_resource *)a1[3];
  if (result)
  {
    a1[4] = result;
    return std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Timestamp_Writer::Timestamp_Data>>::deallocate[abi:ne180100](result, 0x8E38E38E38E38E39 * ((uint64_t)(a1[5] - (void)result) >> 3));
  }
  return result;
}

void std::__shared_ptr_emplace<caulk::rt_vector<AMCP::DAL::Timestamp_Writer::Timestamp_Data>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1470698;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<caulk::rt_vector<AMCP::DAL::Timestamp_Writer::Timestamp_Data>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1470698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *___Z28AudioStatisticsLibraryLoaderv_block_invoke_8516()
{
  __n128 result = dlopen("/usr/lib/libAudioStatistics.dylib", 1);
  if (result)
  {
    uint64_t v1 = result;
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(result, "CreateSharedCAReportingClient");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientCreateReporterID");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientCreateReporterIDFromSessionID");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientCreatePerformanceReporterID");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientStartReporter");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientStopReporter");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientSetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientGetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientSetConfiguration");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientCopyConfiguration");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t (*)(void, void, void, void))dlsym(v1, "CAReportingClientSendMessage");
    AudioStatisticsLibraryLoader(void)::libSym = dlsym(v1, "CAReportingClientSendSingleMessage");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)dlsym(v1, "CAReportingClientDestroyReporterID");
    __n128 result = dlsym(v1, "CAReportingClientRequestMessage");
    AudioStatisticsLibraryLoader(void)::libSym = (uint64_t)result;
  }
  return result;
}

uint64_t AMCP::IO_Core::Play_State_Manager::start(uint64_t *a1, int a2, uint64_t *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  AMCP::Logging_Settings::instance((AMCP::Logging_Settings *)a1);
  if (HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance)
    || (AMCP::Logging_Settings::instance((AMCP::Logging_Settings *)v6), byte_1EBFFA394))
  {
    uint64_t v7 = *((unsigned __int8 *)a3 + 23);
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = a3[1];
    }
    if (v7)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v8 = **(NSObject ***)buf;
      if (*(void *)v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
      }
      BOOL v6 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
      if (v6)
      {
        uint64_t v9 = pthread_self();
        mach_port_t v10 = pthread_mach_thread_np(v9);
        uint64_t v11 = *((char *)a3 + 23) >= 0 ? (uint64_t)a3 : *a3;
        uint64_t v12 = a2 ? "Prewarm" : "Play";
        AMCP::IO_Core::Play_State_Manager::get_debug_string((AMCP::IO_Core::Play_State_Manager *)__p, *a1, a1[1]);
        double v13 = v26 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 67110402;
        *(_DWORD *)&buf[4] = v10;
        *(_WORD *)uint64_t v28 = 2080;
        *(void *)&v28[2] = "Play_State_Manager.cpp";
        __int16 v29 = 1024;
        int v30 = 22;
        __int16 v31 = 2080;
        int v32 = (uint64_t *)v11;
        __int16 v33 = 2080;
        uint64_t v34 = v12;
        __int16 v35 = 2080;
        uint64_t v36 = v13;
        _os_log_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_INFO, "%6u %32s:%-5d   %s: Play_State_Manager::start >>: request(%s)  --  %s", buf, 0x36u);
        if (v26 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  if (a2 == 1)
  {
    uint64_t v14 = *a1;
    mach_port_t v15 = a1;
  }
  else
  {
    if (a2) {
      goto LABEL_26;
    }
    mach_port_t v15 = a1 + 1;
    uint64_t v14 = a1[1];
  }
  if (v14 != -1) {
    *mach_port_t v15 = v14 + 1;
  }
LABEL_26:
  if (a1[1]) {
    uint64_t v16 = 2;
  }
  else {
    uint64_t v16 = *a1 != 0;
  }
  AMCP::Logging_Settings::instance((AMCP::Logging_Settings *)v6);
  if (HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance)
    || (AMCP::Logging_Settings::instance(v17), byte_1EBFFA394))
  {
    uint64_t v18 = *((unsigned __int8 *)a3 + 23);
    if ((v18 & 0x80u) != 0) {
      uint64_t v18 = a3[1];
    }
    if (v18)
    {
      AMCP::Log::Scope_Registry::get(v17);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v19 = **(NSObject ***)buf;
      if (*(void *)v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        __int16 v20 = pthread_self();
        mach_port_t v21 = pthread_mach_thread_np(v20);
        if (*((char *)a3 + 23) < 0) {
          a3 = (uint64_t *)*a3;
        }
        if (a2) {
          __int16 v22 = "Prewarm";
        }
        else {
          __int16 v22 = "Play";
        }
        AMCP::IO_Core::Play_State_Manager::get_debug_string((AMCP::IO_Core::Play_State_Manager *)__p, *a1, a1[1]);
        if (v26 >= 0) {
          int v23 = __p;
        }
        else {
          int v23 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 67110402;
        *(_DWORD *)&buf[4] = v21;
        *(_WORD *)uint64_t v28 = 2080;
        *(void *)&v28[2] = "Play_State_Manager.cpp";
        __int16 v29 = 1024;
        int v30 = 44;
        __int16 v31 = 2080;
        int v32 = a3;
        __int16 v33 = 2080;
        uint64_t v34 = (void *)v22;
        __int16 v35 = 2080;
        uint64_t v36 = v23;
        _os_log_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_INFO, "%6u %32s:%-5d   %s: Play_State_Manager::start <<: request(%s) --  %s", buf, 0x36u);
        if (v26 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return v16;
}

uint64_t AMCP::IO_Core::Play_State_Manager::stop(uint64_t *a1, int a2, uint64_t *a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  AMCP::Logging_Settings::instance((AMCP::Logging_Settings *)a1);
  if (HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance)
    || (AMCP::Logging_Settings::instance((AMCP::Logging_Settings *)v6), byte_1EBFFA394))
  {
    uint64_t v7 = *((unsigned __int8 *)a3 + 23);
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = a3[1];
    }
    if (v7)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v8 = **(NSObject ***)buf;
      if (*(void *)v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v34);
      }
      BOOL v6 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
      if (v6)
      {
        uint64_t v9 = pthread_self();
        mach_port_t v10 = pthread_mach_thread_np(v9);
        uint64_t v11 = *((char *)a3 + 23) >= 0 ? (uint64_t)a3 : *a3;
        uint64_t v12 = a2 ? "Prewarm" : "Play";
        AMCP::IO_Core::Play_State_Manager::get_debug_string((AMCP::IO_Core::Play_State_Manager *)__p, *a1, a1[1]);
        double v13 = v32 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 67110402;
        *(_DWORD *)&buf[4] = v10;
        *(_WORD *)uint64_t v34 = 2080;
        *(void *)&v34[2] = "Play_State_Manager.cpp";
        __int16 v35 = 1024;
        int v36 = 56;
        __int16 v37 = 2080;
        uint64_t v38 = (uint64_t *)v11;
        __int16 v39 = 2080;
        uint64_t v40 = v12;
        __int16 v41 = 2080;
        long long v42 = v13;
        _os_log_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_INFO, "%6u %32s:%-5d   %s: Play_State_Manager::stop >>: request(%s) --  %s", buf, 0x36u);
        if (v32 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  uint64_t v14 = a1[1];
  if (v14 || *a1)
  {
    if (a2 == 1)
    {
      if (*a1) {
        --*a1;
      }
    }
    else if (!a2)
    {
      if (!v14) {
        goto LABEL_30;
      }
      a1[1] = --v14;
    }
    if (v14)
    {
      uint64_t v15 = 2;
LABEL_31:
      AMCP::Logging_Settings::instance((AMCP::Logging_Settings *)v6);
      if (HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance)
        || (AMCP::Logging_Settings::instance(v16), byte_1EBFFA394))
      {
        uint64_t v17 = *((unsigned __int8 *)a3 + 23);
        if ((v17 & 0x80u) != 0) {
          uint64_t v17 = a3[1];
        }
        if (v17)
        {
          AMCP::Log::Scope_Registry::get(v16);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          uint64_t v18 = **(NSObject ***)buf;
          if (*(void *)v34) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v34);
          }
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            uint64_t v19 = pthread_self();
            mach_port_t v20 = pthread_mach_thread_np(v19);
            if (*((char *)a3 + 23) < 0) {
              a3 = (uint64_t *)*a3;
            }
            if (a2) {
              mach_port_t v21 = "Prewarm";
            }
            else {
              mach_port_t v21 = "Play";
            }
            AMCP::IO_Core::Play_State_Manager::get_debug_string((AMCP::IO_Core::Play_State_Manager *)__p, *a1, a1[1]);
            if (v32 >= 0) {
              __int16 v22 = __p;
            }
            else {
              __int16 v22 = (void **)__p[0];
            }
            *(_DWORD *)long long buf = 67110402;
            *(_DWORD *)&buf[4] = v20;
            *(_WORD *)uint64_t v34 = 2080;
            *(void *)&v34[2] = "Play_State_Manager.cpp";
            __int16 v35 = 1024;
            int v36 = 87;
            __int16 v37 = 2080;
            uint64_t v38 = a3;
            __int16 v39 = 2080;
            uint64_t v40 = (void *)v21;
            __int16 v41 = 2080;
            long long v42 = v22;
            _os_log_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_INFO, "%6u %32s:%-5d   %s: Play_State_Manager::stop <<: request(%s) --  %s", buf, 0x36u);
            if (v32 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
      return v15;
    }
LABEL_30:
    uint64_t v15 = *a1 != 0;
    goto LABEL_31;
  }
  AMCP::Logging_Settings::instance((AMCP::Logging_Settings *)v6);
  if (HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance)
    || (AMCP::Logging_Settings::instance(v23), byte_1EBFFA394))
  {
    uint64_t v24 = *((unsigned __int8 *)a3 + 23);
    if ((v24 & 0x80u) != 0) {
      uint64_t v24 = a3[1];
    }
    if (v24)
    {
      AMCP::Log::Scope_Registry::get(v23);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v25 = **(NSObject ***)buf;
      if (*(void *)v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v34);
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        char v26 = pthread_self();
        mach_port_t v27 = pthread_mach_thread_np(v26);
        if (*((char *)a3 + 23) < 0) {
          a3 = (uint64_t *)*a3;
        }
        if (a2) {
          uint64_t v28 = "Prewarm";
        }
        else {
          uint64_t v28 = "Play";
        }
        AMCP::IO_Core::Play_State_Manager::get_debug_string((AMCP::IO_Core::Play_State_Manager *)__p, *a1, a1[1]);
        if (v32 >= 0) {
          __int16 v29 = __p;
        }
        else {
          __int16 v29 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 67110402;
        *(_DWORD *)&buf[4] = v27;
        *(_WORD *)uint64_t v34 = 2080;
        *(void *)&v34[2] = "Play_State_Manager.cpp";
        __int16 v35 = 1024;
        int v36 = 63;
        __int16 v37 = 2080;
        uint64_t v38 = a3;
        __int16 v39 = 2080;
        uint64_t v40 = (void *)v28;
        __int16 v41 = 2080;
        long long v42 = v29;
        _os_log_impl(&dword_1BAA78000, v25, OS_LOG_TYPE_INFO, "%6u %32s:%-5d   %s: Play_State_Manager::stop << EXTRA STOP CALLS: %s --  %s", buf, 0x36u);
        if (v32 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 0;
}

void AMCP::IO_Core::Play_State_Manager::get_state_snapshot(AMCP::IO_Core::Play_State_Manager *this, unint64_t *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (a2[1])
  {
    long long v4 = 0;
    unint64_t v5 = 0;
    BOOL v6 = 0;
    unint64_t v7 = 0;
    do
    {
      if ((unint64_t)v6 >= v5)
      {
        uint64_t v9 = v6 - v4;
        unint64_t v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v5 - (void)v4) >> 1 > v10) {
          unint64_t v10 = (uint64_t)(v5 - (void)v4) >> 1;
        }
        if (v5 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v11);
        }
        else {
          uint64_t v12 = 0;
        }
        double v13 = (_DWORD *)(v11 + 4 * v9);
        _DWORD *v13 = 0;
        uint64_t v8 = v13 + 1;
        while (v6 != v4)
        {
          int v14 = *--v6;
          *--double v13 = v14;
        }
        unint64_t v5 = v11 + 4 * v12;
        *(void *)this = v13;
        *((void *)this + 1) = v8;
        *((void *)this + 2) = v5;
        if (v4) {
          operator delete(v4);
        }
        long long v4 = v13;
      }
      else
      {
        *BOOL v6 = 0;
        uint64_t v8 = v6 + 1;
      }
      *((void *)this + 1) = v8;
      ++v7;
      BOOL v6 = v8;
    }
    while (v7 < a2[1]);
  }
  else
  {
    long long v4 = 0;
    uint64_t v8 = 0;
  }
  if (*a2)
  {
    unint64_t v15 = 0;
    unint64_t v16 = *((void *)this + 2);
    do
    {
      if ((unint64_t)v8 >= v16)
      {
        uint64_t v18 = v8 - v4;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v16 - (void)v4) >> 1 > v19) {
          unint64_t v19 = (uint64_t)(v16 - (void)v4) >> 1;
        }
        if (v16 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v19;
        }
        if (v20) {
          unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v20);
        }
        else {
          uint64_t v21 = 0;
        }
        __int16 v22 = (_DWORD *)(v20 + 4 * v18);
        _DWORD *v22 = 1;
        uint64_t v17 = v22 + 1;
        while (v8 != v4)
        {
          int v23 = *--v8;
          *--__int16 v22 = v23;
        }
        unint64_t v16 = v20 + 4 * v21;
        *(void *)this = v22;
        *((void *)this + 1) = v17;
        *((void *)this + 2) = v16;
        if (v4) {
          operator delete(v4);
        }
        long long v4 = v22;
      }
      else
      {
        *uint64_t v8 = 1;
        uint64_t v17 = v8 + 1;
      }
      *((void *)this + 1) = v17;
      ++v15;
      uint64_t v8 = v17;
    }
    while (v15 < *a2);
  }
}

void sub_1BAD5F10C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void HALB_IOBufferManager_Server::~HALB_IOBufferManager_Server(HALB_IOBufferManager_Server *this)
{
  uint64_t v2 = *((void *)this + 7);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  for (uint64_t i = 0; i != -48; i -= 24)
  {
    long long v4 = *(void **)((char *)this + i + 32);
    if (v4)
    {
      *(void *)((char *)this + i + 40) = v4;
      operator delete(v4);
    }
  }
}

void HALB_IOBufferManager_Server::AddIOBuffer(HALB_IOBufferManager_Server *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  BOOL v6 = (char *)this + 24 * a2;
  uint64_t v9 = (unsigned int *)*((void *)v6 + 1);
  uint64_t v8 = (std::vector<unsigned int> *)(v6 + 8);
  std::vector<unsigned int>::pointer begin = v9;
  p_end = &v8->__end_;
  end = v8->__end_;
  uint64_t v12 = (char *)end - (char *)v9;
  unint64_t v13 = (unint64_t)((char *)end - (char *)v9) >> 2;
  unint64_t v14 = a3 + 1 - v13;
  if (a3 + 1 > v13)
  {
    unsigned int v39 = 0;
    unint64_t v15 = (std::vector<unsigned int>::pointer)((char *)begin + v12);
    unint64_t v16 = (char *)this + 24 * a2;
    uint64_t v19 = *((void *)v16 + 3);
    uint64_t v17 = (std::allocator<unsigned int> *)(v16 + 24);
    uint64_t v18 = v19;
    if (v14 > (v19 - (uint64_t)end) >> 2)
    {
      uint64_t v20 = v12 >> 2;
      unint64_t v21 = (v12 >> 2) + v14;
      if (v21 >> 62) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v22 = v18 - (void)begin;
      if (v22 >> 1 > v21) {
        unint64_t v21 = v22 >> 1;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      __v.__end_cap_.__value_ = v17;
      if (v23) {
        unint64_t v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v23);
      }
      else {
        uint64_t v24 = 0;
      }
      int v36 = (unsigned int *)(v23 + 4 * v20);
      __v.__first_ = (std::__split_buffer<unsigned int>::pointer)v23;
      __v.__begin_ = v36;
      __v.__end_cap_.__value_ = (unsigned int *)(v23 + 4 * v24);
      uint64_t v37 = 4 * v14;
      uint64_t v38 = &v36[v14];
      do
      {
        *v36++ = v39;
        v37 -= 4;
      }
      while (v37);
      __v.__end_ = v38;
      std::vector<unsigned int>::__swap_out_circular_buffer(v8, &__v, v15);
      if (__v.__first_) {
        operator delete(__v.__first_);
      }
      goto LABEL_33;
    }
    uint64_t v25 = (char *)end - (char *)v15;
    if (v14 <= end - v15)
    {
      uint64_t v28 = end;
      uint64_t v27 = v14;
    }
    else
    {
      unint64_t v26 = 0;
      uint64_t v27 = v25 >> 2;
      uint64_t v28 = &end[v14 - (v25 >> 2)];
      do
      {
        end[v26 / 4] = 0;
        v26 += 4;
      }
      while (4 * v14 - 4 * v27 != v26);
      std::vector<unsigned int>::pointer *p_end = v28;
      if (end == v15)
      {
LABEL_33:
        std::vector<unsigned int>::pointer begin = v8->__begin_;
        uint64_t v12 = (char *)*p_end - (char *)v8->__begin_;
        goto LABEL_34;
      }
    }
    __int16 v29 = &v15[v14];
    int v30 = &v28[-v14];
    __int16 v31 = v28;
    if (v30 < end)
    {
      __int16 v31 = v28;
      do
      {
        unsigned int v32 = *v30++;
        *v31++ = v32;
      }
      while (v30 < end);
    }
    std::vector<unsigned int>::pointer *p_end = v31;
    if (v28 != v29) {
      memmove(&v28[-(v28 - v29)], v15, (char *)v28 - (char *)v29);
    }
    unsigned int v33 = v39;
    if (v15 > &v39) {
      unsigned int v33 = 0;
    }
    uint64_t v34 = -v27;
    do
      *v15++ = v33;
    while (!__CFADD__(v34++, 1));
    goto LABEL_33;
  }
LABEL_34:
  if (a3 >= (unint64_t)(v12 >> 2)) {
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  }
  begin[a3] = a4;
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<ShouldUsePageMaxMask(void)::$_0 &&>>()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  size_t v2 = 128;
  uint64_t result = sysctlbyname("kern.osrelease", v3, &v2, 0, 0);
  if (!result)
  {
    __stringp = v3;
    strsep(&__stringp, ".");
    uint64_t result = atoi(v3);
    ShouldUsePageMaxMask(void)::kernelVersion = result;
  }
  return result;
}

void HALB_IOBufferManager_Server::Allocate(HALB_IOBufferManager_Server *this, char a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (_DWORD *)MEMORY[0x1E4F14AF0];
  if (*((unsigned char *)this + 4)) {
    goto LABEL_6;
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&ShouldUsePageMaxMask(void)::checked, memory_order_acquire) != -1)
  {
    *(void *)std::string __str = &v20;
    *(void *)long long buf = __str;
    std::__call_once(&ShouldUsePageMaxMask(void)::checked, buf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<ShouldUsePageMaxMask(void)::$_0 &&>>);
  }
  if (ShouldUsePageMaxMask(void)::kernelVersion < 20) {
LABEL_6:
  }
    int v4 = (*v3 + 304) & ~*v3;
  else {
    int v4 = 0x4000;
  }
  uint64_t v5 = 0;
  for (char i = 1; ; char i = 0)
  {
    char v19 = i;
    unint64_t v7 = (char *)this + 24 * v5;
    int v9 = *((_DWORD *)v7 + 2);
    uint64_t v8 = v7 + 8;
    unint64_t v10 = v8 + 8;
    unsigned int v11 = (*((_DWORD *)v8 + 2) - v9) & 0xFFFFFFFC;
    if (*((unsigned char *)this + 4)) {
      goto LABEL_13;
    }
    if (atomic_load_explicit((atomic_ullong *volatile)&ShouldUsePageMaxMask(void)::checked, memory_order_acquire) != -1)
    {
      *(void *)std::string __str = &v20;
      *(void *)long long buf = __str;
      std::__call_once(&ShouldUsePageMaxMask(void)::checked, buf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<ShouldUsePageMaxMask(void)::$_0 &&>>);
    }
    if (ShouldUsePageMaxMask(void)::kernelVersion < 20) {
LABEL_13:
    }
      unsigned int v12 = (v11 + 4 + *v3) & ~*v3;
    else {
      unsigned int v12 = (v11 + 16387) & 0xFFFFC000;
    }
    v4 += v12;
    uint64_t v13 = *(void *)v8;
    if (*v10 != *(void *)v8)
    {
      unint64_t v14 = 0;
      unsigned int v15 = 1;
      do
      {
        int v16 = *(_DWORD *)(v13 + 4 * v14);
        if (*((unsigned char *)this + 4)) {
          goto LABEL_21;
        }
        if (atomic_load_explicit((atomic_ullong *volatile)&ShouldUsePageMaxMask(void)::checked, memory_order_acquire) != -1)
        {
          *(void *)std::string __str = &v20;
          *(void *)long long buf = __str;
          std::__call_once(&ShouldUsePageMaxMask(void)::checked, buf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<ShouldUsePageMaxMask(void)::$_0 &&>>);
        }
        if (ShouldUsePageMaxMask(void)::kernelVersion < 20) {
LABEL_21:
        }
          unsigned int v17 = (v16 + *v3) & ~*v3;
        else {
          unsigned int v17 = (v16 + 0x3FFF) & 0xFFFFC000;
        }
        v4 += v17;
        unint64_t v14 = v15;
        uint64_t v13 = *(void *)v8;
        ++v15;
      }
      while (v14 < (uint64_t)(*v10 - *(void *)v8) >> 2);
    }
    uint64_t v5 = 1;
    if ((v19 & 1) == 0)
    {
      if (a2) {
        operator new();
      }
      snprintf(__str, 0x1FuLL, "AudioIO%X", *(_DWORD *)this);
      operator new();
    }
  }
}

void sub_1BAD5FBC4(_Unwind_Exception *a1)
{
  caulk::mach::mach_port::~mach_port(v2);
  MEMORY[0x1C1859840](v1, 0x1081C40D3AE782ALL);
  _Unwind_Resume(a1);
}

unint64_t HALB_IOBufferManager_Server::GetIOBuffer(HALB_IOBufferManager_Server *this, unsigned int a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = a3;
  unint64_t v7 = (char *)this + 24 * a2;
  uint64_t v9 = *((void *)v7 + 1);
  uint64_t v8 = v7 + 8;
  unint64_t v10 = (v8[1] - v9) >> 2;
  if (v10 <= a3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&buf[4] = "HALB_IOBufferManager.cpp";
    __int16 v39 = 1024;
    int v40 = 237;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOBufferManager_Server::GetIOBuffer: the stream index is out of range", buf, 0x12u);
    unint64_t v10 = (uint64_t)(v8[1] - *v8) >> 2;
  }
  if (v10 <= v6) {
    return 0;
  }
  uint64_t v11 = *(void *)(*((void *)this + 7) + 8);
  if (*((unsigned char *)this + 4)) {
    goto LABEL_11;
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&ShouldUsePageMaxMask(void)::checked, memory_order_acquire) != -1)
  {
    *(void *)long long buf = &v36;
    uint64_t v37 = buf;
    std::__call_once(&ShouldUsePageMaxMask(void)::checked, &v37, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<ShouldUsePageMaxMask(void)::$_0 &&>>);
  }
  if (ShouldUsePageMaxMask(void)::kernelVersion <= 19) {
LABEL_11:
  }
    unint64_t v12 = ~*MEMORY[0x1E4F14AF0] & (unint64_t)(*MEMORY[0x1E4F14AF0] + 304);
  else {
    unint64_t v12 = 0x4000;
  }
  uint64_t v14 = a2;
  unsigned int v15 = (_DWORD *)(v11 + v12);
  int v16 = 4 * (v15[*v15 + 1] + *v15);
  if (*((unsigned char *)this + 4)) {
    goto LABEL_17;
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&ShouldUsePageMaxMask(void)::checked, memory_order_acquire) != -1)
  {
    *(void *)long long buf = &v36;
    uint64_t v37 = buf;
    std::__call_once(&ShouldUsePageMaxMask(void)::checked, &v37, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<ShouldUsePageMaxMask(void)::$_0 &&>>);
  }
  if (ShouldUsePageMaxMask(void)::kernelVersion < 20) {
LABEL_17:
  }
    unsigned int v17 = (v16 + 8 + *MEMORY[0x1E4F14AF0]) & ~*MEMORY[0x1E4F14AF0];
  else {
    unsigned int v17 = (v16 + 16391) & 0xFFFFC000;
  }
  int v18 = 0;
  uint64_t v19 = 0;
  unint64_t result = 0;
  unint64_t v20 = (unint64_t)v15 + v17;
  do
  {
    int v33 = v18;
    if (!result)
    {
      unsigned int v22 = 0;
      int v21 = 0;
      uint64_t v23 = (char *)this + 24 * v19;
      uint64_t v24 = v23 + 8;
      uint64_t v25 = v23 + 16;
      while (1)
      {
        unsigned int v26 = v22;
        if (v22 >= (unint64_t)((uint64_t)(*v25 - *v24) >> 2))
        {
          unint64_t result = 0;
          goto LABEL_21;
        }
        unsigned int v27 = *(_DWORD *)(*v24 + 4 * v22);
        if (v19 == v14 && a3 == v22)
        {
          *a4 = v27;
          if (v27) {
            unint64_t result = v20;
          }
          else {
            unint64_t result = 0;
          }
          int v21 = 1;
        }
        else
        {
          if (*((unsigned char *)this + 4)) {
            goto LABEL_36;
          }
          if (atomic_load_explicit((atomic_ullong *volatile)&ShouldUsePageMaxMask(void)::checked, memory_order_acquire) != -1)
          {
            *(void *)long long buf = &v36;
            uint64_t v37 = buf;
            std::__call_once(&ShouldUsePageMaxMask(void)::checked, &v37, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<ShouldUsePageMaxMask(void)::$_0 &&>>);
          }
          if (ShouldUsePageMaxMask(void)::kernelVersion < 20) {
LABEL_36:
          }
            unsigned int v28 = (v27 + *MEMORY[0x1E4F14AF0]) & ~*MEMORY[0x1E4F14AF0];
          else {
            unsigned int v28 = (v27 + 0x3FFF) & 0xFFFFC000;
          }
          v20 += v28;
          uint64_t v29 = *((void *)this + 7);
          uint64_t v30 = *(void *)(v29 + 8);
          uint64_t v31 = *(void *)(v29 + 16);
          if (v20 >= v30 + v31 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 136315394;
            *(void *)&buf[4] = "HALB_IOBufferManager.cpp";
            __int16 v39 = 1024;
            int v40 = 269;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOBufferManager_Server::GetIOBuffer: Buffer pointer out of bounds", buf, 0x12u);
            uint64_t v32 = *((void *)this + 7);
            uint64_t v30 = *(void *)(v32 + 8);
            uint64_t v31 = *(void *)(v32 + 16);
          }
          if (v20 >= v30 + v31)
          {
            unint64_t result = 0;
            *a4 = 0;
            return result;
          }
          unint64_t result = 0;
        }
        unsigned int v22 = v26 + 1;
        if (result) {
          goto LABEL_21;
        }
      }
    }
    int v21 = 0;
LABEL_21:
    int v18 = 1;
    uint64_t v19 = 1;
  }
  while (((v21 | v33) & 1) == 0);
  return result;
}

vm_address_t HALB_IOBufferManager_Server::AllocateBuffer(vm_size_t size)
{
  kern_return_t v3;
  kern_return_t v4;
  kern_return_t v5;
  vm_address_t v6;
  int v7;
  int *v8;
  char *v9;
  unsigned int v10;
  NSObject *v12;
  const char *v13;
  _DWORD *exception;
  vm_address_t address;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  vm_address_t v21;
  __int16 v22;
  unsigned int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  unsigned int v28 = *MEMORY[0x1E4F143B8];
  if (size)
  {
    unsigned int v1 = size;
    address = 0;
    size_t v2 = (unsigned int *)MEMORY[0x1E4F14960];
    uint64_t v3 = vm_allocate(*MEMORY[0x1E4F14960], &address, size, 1);
    if (v3)
    {
      uint64_t v5 = v3;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        unsigned int v17 = "HALB_IOBufferManager.cpp";
        int v18 = 1024;
        uint64_t v19 = 312;
        unint64_t v20 = 1024;
        LODWORD(v21) = v5;
        unint64_t v12 = MEMORY[0x1E4F14500];
        uint64_t v13 = "%25s:%-5d  HALB_IOBufferManager_Server::AllocateBuffer: failed to allocate the buffer, Error: 0x%X";
LABEL_18:
        _os_log_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, v13, buf, 0x18u);
      }
    }
    else
    {
      if (!address)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315394;
          unsigned int v17 = "HALB_IOBufferManager.cpp";
          int v18 = 1024;
          uint64_t v19 = 313;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOBufferManager_Server::AllocateBuffer: vm_allocate returned nullptr", buf, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = off_1F148A5D8;
        exception[2] = 5;
LABEL_20:
      }
      int v4 = HALB_MlockFailHandling::_mlock((HALB_MlockFailHandling *)address, v1);
      if (!v4) {
        return address;
      }
      uint64_t v5 = v4;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        unint64_t v6 = address;
        unint64_t v7 = *__error();
        uint64_t v8 = __error();
        uint64_t v9 = strerror(*v8);
        *(_DWORD *)long long buf = 136316418;
        unsigned int v17 = "HALB_IOBufferManager.cpp";
        int v18 = 1024;
        uint64_t v19 = 319;
        unint64_t v20 = 2048;
        int v21 = v6;
        unsigned int v22 = 1024;
        uint64_t v23 = v1;
        uint64_t v24 = 1024;
        uint64_t v25 = v7;
        unsigned int v26 = 2080;
        unsigned int v27 = v9;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOBufferManager_Server::AllocateBuffer: failed to lock the buffer: addr %p, byte size %u, errno %d %s", buf, 0x32u);
      }
      unint64_t v10 = atomic_load((unsigned int *)&HALB_MlockFailHandling::mHandling);
      if (v10 != 2) {
        return address;
      }
      MEMORY[0x1C185AA50](*v2, address, v1);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315650;
        unsigned int v17 = "HALB_IOBufferManager.cpp";
        int v18 = 1024;
        uint64_t v19 = 323;
        unint64_t v20 = 1024;
        LODWORD(v21) = v5;
        unint64_t v12 = MEMORY[0x1E4F14500];
        uint64_t v13 = "%25s:%-5d  HALB_IOBufferManager_Server::AllocateBuffer: failed to lock the buffer, Error: 0x%X";
        goto LABEL_18;
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v5;
    goto LABEL_20;
  }
  return 0;
}

uint64_t HALB_MlockFailHandling::_mlock(HALB_MlockFailHandling *this, size_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = atomic_load((unsigned int *)&HALB_MlockFailHandling::mHandling);
  if (v2 == 1)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      int v16 = "HALB_IOBufferManager.cpp";
      __int16 v17 = 1024;
      int v18 = 693;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALB_MlockFailHandling::_mlock: synthesized a failure and did not lock", buf, 0x12u);
    }
    return 35;
  }
  else
  {
    uint64_t v3 = mlock(this, a2);
    if (v3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315394;
        int v16 = "HALB_IOBufferManager.cpp";
        __int16 v17 = 1024;
        int v18 = 683;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  wiredlog: mlock failure event seen.", buf, 0x12u);
      }
      if ((atomic_exchange(HALB_MlockFailHandling::hasReportingCooledDown(void)::sLazyMarshall, 1u) & 1) == 0)
      {
        v4.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        if (HALB_MlockFailHandling::hasReportingCooledDown(void)::sRef
          && (double)(v4.__d_.__rep_ - HALB_MlockFailHandling::hasReportingCooledDown(void)::sRef) / 1000000000.0 <= 10.0)
        {
          atomic_store(0, (unsigned __int8 *)HALB_MlockFailHandling::hasReportingCooledDown(void)::sLazyMarshall);
        }
        else
        {
          HALB_MlockFailHandling::hasReportingCooledDown(void)::sRef = std::chrono::steady_clock::now().__d_.__rep_;
          atomic_store(0, (unsigned __int8 *)HALB_MlockFailHandling::hasReportingCooledDown(void)::sLazyMarshall);
          if (MEMORY[0x1E4FB9410]) {
            BOOL v5 = MEMORY[0x1E4FB9418] == 0;
          }
          else {
            BOOL v5 = 1;
          }
          int v7 = !v5 && MEMORY[0x1E4FB9408] != 0;
          if (MEMORY[0x1E4FB9420]) {
            BOOL v8 = MEMORY[0x1E4FB9400] == 0;
          }
          else {
            BOOL v8 = 1;
          }
          if (v8) {
            int v9 = 0;
          }
          else {
            int v9 = v7;
          }
          v12[0] = v9;
          __int16 v13 = 19;
          uint64_t ReporterID = 0;
          if (v9 == 1)
          {
            uint64_t ReporterID = CAReportingClientCreateReporterID();
            CAReportingClientStartReporter();
            if (v12[0])
            {
              CFDictionaryRef v10 = CFDictionaryCreate(0, 0, 0, 0, 0, 0);
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 136315394;
                int v16 = "HALB_IOBufferManager.cpp";
                __int16 v17 = 1024;
                int v18 = 666;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  wiredlog: requesting report from service.", buf, 0x12u);
              }
              CAReportingClientSendMessage();
              CFRelease(v10);
            }
          }
          HALB_MlockFailHandling::WiredLoggerSession::~WiredLoggerSession((HALB_MlockFailHandling::WiredLoggerSession *)v12);
        }
      }
    }
  }
  return v3;
}

void sub_1BAD605EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void HALB_MlockFailHandling::WiredLoggerSession::~WiredLoggerSession(HALB_MlockFailHandling::WiredLoggerSession *this)
{
  if (*(unsigned char *)this)
  {
    CAReportingClientStopReporter();
    CAReportingClientDestroyReporterID();
  }
}

void HALB_IOBufferManager_Server::FreeBuffer(HALB_IOBufferManager_Server *this, unsigned int a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (this)
  {
    uint64_t v4 = a2;
    int v5 = munlock(this, a2);
    if (!v5)
    {
      JUMPOUT(0x1C185AA50);
    }
    int v6 = v5;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v7 = *__error();
      BOOL v8 = __error();
      int v9 = strerror(*v8);
      int v10 = 136316418;
      uint64_t v11 = "HALB_IOBufferManager.cpp";
      __int16 v12 = 1024;
      int v13 = 338;
      __int16 v14 = 2048;
      unsigned int v15 = this;
      __int16 v16 = 1024;
      unsigned int v17 = a2;
      __int16 v18 = 1024;
      int v19 = v7;
      __int16 v20 = 2080;
      int v21 = v9;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOBufferManager_Server::FreeBuffer: munlock failed: addr %p, byte size %u, errno %d %s", (uint8_t *)&v10, 0x32u);
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315650;
      uint64_t v11 = "HALB_IOBufferManager.cpp";
      __int16 v12 = 1024;
      int v13 = 340;
      __int16 v14 = 1024;
      LODWORD(v15) = v6;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOBufferManager_Server::FreeBuffer: munlock failed, Error: 0x%X", (uint8_t *)&v10, 0x18u);
    }
    MEMORY[0x1C185AA50](*MEMORY[0x1E4F14960], this, v4);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315650;
      uint64_t v11 = "HALB_IOBufferManager.cpp";
      __int16 v12 = 1024;
      int v13 = 344;
      __int16 v14 = 1024;
      LODWORD(v15) = v6;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOBufferManager_Server::FreeBuffer: vm_deallocate failed, Error: 0x%X", (uint8_t *)&v10, 0x18u);
    }
  }
}

void HALS_MetaStream::SetCurrentHWFormat(HALS_MetaStream *this, const AudioStreamBasicDescription *a2)
{
  if (!*((unsigned char *)this + 72))
  {
    double v4 = (*(double (**)(void))(**((void **)this + 8) + 264))(*((void *)this + 8));
    v5.n128_u64[0] = *(void *)&a2->mSampleRate;
    if (a2->mSampleRate != 0.0 && v5.n128_f64[0] != v4)
    {
      int v7 = *(void (**)(__n128))(**((void **)this + 8) + 272);
      v7(v5);
    }
  }
}

void HALS_MetaStream::GetCurrentHWFormat(HALS_MetaStream *this, AudioStreamBasicDescription *a2)
{
  if (*((unsigned char *)this + 72))
  {
    double v4 = (HALS_ObjectMap *)*((unsigned int *)this + 40);
    if (v4)
    {
      uint64_t v5 = HALS_ObjectMap::CopyObjectByObjectID(v4);
      int v7 = (HALS_ObjectMap *)v5;
      if (v5)
      {
        uint64_t v9 = *(void *)(v5 + 248);
        BOOL v8 = *(std::__shared_weak_count **)(v5 + 256);
        if (v8)
        {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          long long v10 = *(_OWORD *)(v9 + 24);
          long long v11 = *(_OWORD *)(v9 + 40);
          *(void *)&a2->mBitsPerChannel = *(void *)(v9 + 56);
          *(_OWORD *)&a2->mSampleRate = v10;
          *(_OWORD *)&a2->mBytesPerPacket = v11;
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        else
        {
          long long v13 = *(_OWORD *)(v9 + 24);
          long long v14 = *(_OWORD *)(v9 + 40);
          *(void *)&a2->mBitsPerChannel = *(void *)(v9 + 56);
          *(_OWORD *)&a2->mSampleRate = v13;
          *(_OWORD *)&a2->mBytesPerPacket = v14;
        }
      }
      else
      {
        *(_OWORD *)&a2->mSampleRate = k_default_multitap_format;
        *(_OWORD *)&a2->mBytesPerPacket = unk_1BB03CFE0;
        *(void *)&a2->mBitsPerChannel = 32;
      }
      HALS_ObjectMap::ReleaseObject(v7, v6);
    }
    else
    {
      a2->mSampleRate = (*(double (**)(void))(**((void **)this + 8) + 264))(*((void *)this + 8));
      *(_OWORD *)&a2->mFormatID = xmmword_1BAFF9650;
      *(_OWORD *)&a2->mBytesPerFrame = xmmword_1BAFF9660;
    }
  }
  else
  {
    a2->mSampleRate = (*(double (**)(void))(**((void **)this + 8) + 264))(*((void *)this + 8));
    *(void *)&a2->mFormatID = 0x96C70636DLL;
    UInt32 v12 = *((_DWORD *)this + 34);
    a2->mBytesPerPacket = 4 * v12;
    a2->mFramesPerPacket = 1;
    a2->mBytesPerFrame = 4 * v12;
    a2->mChannelsPerFrame = v12;
    a2->mBitsPerChannel = 32;
  }
}

uint64_t HALS_MetaStream::BuildFormatList(uint64_t this)
{
  *(void *)(this + 96) = *(void *)(this + 88);
  *(void *)(this + 120) = *(void *)(this + 112);
  if (!*(void *)(this + 144))
  {
    if (*(unsigned char *)(this + 72))
    {
      (*(void (**)(void))(**(void **)(this + 64) + 280))(*(void *)(this + 64));
      operator new[]();
    }
    (*(void (**)(void))(**(void **)(this + 64) + 280))(*(void *)(this + 64));
    operator new[]();
  }
  return this;
}

void sub_1BAD60D5C(_Unwind_Exception *a1)
{
  MEMORY[0x1C1859810](v1, 0x1000C80451B5BE8);
  _Unwind_Resume(a1);
}

uint64_t HALS_MetaStream::GetRealStreamID(HALS_MetaStream *this)
{
  unsigned int v2 = (HALS_IODevice *)*((void *)this + 18);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (unsigned int *)HALS_IODevice::CopyStreamByIndex(v2, *((unsigned char *)this + 52), *((_DWORD *)this + 38));
  if (v3) {
    uint64_t v5 = v3[4];
  }
  else {
    uint64_t v5 = 0;
  }
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v3, v4);
  return v5;
}

uint64_t HALS_MetaStream::GetRealDeviceID(HALS_MetaStream *this)
{
  uint64_t v1 = *((void *)this + 18);
  if (v1) {
    return *(unsigned int *)(v1 + 16);
  }
  else {
    return 0;
  }
}

uint64_t HALS_MetaStream::SynchronizeWithHardware(HALS_MetaStream *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 296))();
}

uint64_t HALS_MetaStream::SetStartingChannel(uint64_t this, int a2)
{
  *(_DWORD *)(this + 76) = a2;
  return this;
}

uint64_t HALS_MetaStream::SetInfo(HALS_ObjectMap **this)
{
  HALS_MetaStream::RemoveRealStreamPropertyListener((HALS_MetaStream *)this);
  HALS_MetaStream::RemoveRealTapPropertyListener((HALS_MetaStream *)this);
  *((unsigned char *)this + 52) = 1;
  *((unsigned char *)this + 72) = 0;
  HALS_ObjectMap::ReleaseObject_LongTerm(this[18], v2);
  *((_DWORD *)this + 34) = 0;
  this[18] = 0;
  this[19] = 0;
  *((_DWORD *)this + 40) = 0;
  uint64_t v3 = (uint64_t (*)(HALS_ObjectMap **))*((void *)*this + 37);

  return v3(this);
}

void HALS_MetaStream::RemoveRealStreamPropertyListener(HALS_MetaStream *this)
{
  int v1 = *((_DWORD *)this + 39);
  if (v1)
  {
    int v2 = *((_DWORD *)this + 4);
    uint64_t v3 = *((void *)this + 21);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZN15HALS_MetaStream32RemoveRealStreamPropertyListenerEv_block_invoke;
    block[3] = &__block_descriptor_tmp_41;
    int v6 = v2;
    int v7 = v1;
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)(v3 + 32));
    if (v4) {
      atomic_store(1u, (unsigned __int8 *)(v3 + 33));
    }
    dispatch_async(*(dispatch_queue_t *)v3, block);
  }
}

void HALS_MetaStream::RemoveRealTapPropertyListener(HALS_MetaStream *this)
{
  int v1 = *((_DWORD *)this + 40);
  if (v1)
  {
    int v2 = *((_DWORD *)this + 4);
    uint64_t v3 = *((void *)this + 21);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZN15HALS_MetaStream29RemoveRealTapPropertyListenerEv_block_invoke;
    block[3] = &__block_descriptor_tmp_43;
    int v6 = v2;
    int v7 = v1;
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)(v3 + 32));
    if (v4) {
      atomic_store(1u, (unsigned __int8 *)(v3 + 33));
    }
    dispatch_async(*(dispatch_queue_t *)v3, block);
  }
}

void ___ZN15HALS_MetaStream29RemoveRealTapPropertyListenerEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const AudioObjectPropertyAddress *a5)
{
  int v6 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = (const HALS_Listener *)*(unsigned int *)(a1 + 36);
  v7[0] = 0;
  v7[1] = v6;
  long long v8 = 0u;
  long long v9 = 0u;
  HALS_NotificationManager::RemovePropertyListener((HALS_NotificationManager *)v7, v5, &qword_1BB036F74, a4, a5);
  HALS_Listener::~HALS_Listener((HALS_Listener *)v7);
}

void sub_1BAD61040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HALS_Listener::~HALS_Listener((HALS_Listener *)va);
  _Unwind_Resume(a1);
}

void ___ZN15HALS_MetaStream32RemoveRealStreamPropertyListenerEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const AudioObjectPropertyAddress *a5)
{
  int v6 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = (const HALS_Listener *)*(unsigned int *)(a1 + 36);
  v7[0] = 0;
  v7[1] = v6;
  long long v8 = 0u;
  long long v9 = 0u;
  HALS_NotificationManager::RemovePropertyListener((HALS_NotificationManager *)v7, v5, &qword_1BB036F74, a4, a5);
  HALS_Listener::~HALS_Listener((HALS_Listener *)v7);
}

void sub_1BAD610A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HALS_Listener::~HALS_Listener((HALS_Listener *)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_MetaStream::SetInfo(HALS_ObjectMap **this, int a2)
{
  if (*((_DWORD *)this + 40) != a2)
  {
    HALS_MetaStream::RemoveRealStreamPropertyListener((HALS_MetaStream *)this);
    HALS_MetaStream::RemoveRealTapPropertyListener((HALS_MetaStream *)this);
    *((unsigned char *)this + 52) = 1;
    *((unsigned char *)this + 72) = 1;
    HALS_ObjectMap::ReleaseObject_LongTerm(this[18], v4);
    this[18] = 0;
    this[19] = 0;
    *((_DWORD *)this + 40) = a2;
    *((_DWORD *)this + 34) = 0;
    HALS_MetaStream::AddRealTapPropertyListener((HALS_MetaStream *)this);
  }
  uint64_t v5 = (uint64_t (*)(HALS_ObjectMap **))*((void *)*this + 37);

  return v5(this);
}

void HALS_MetaStream::AddRealTapPropertyListener(HALS_MetaStream *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v2 = (HALS_ObjectMap *)*((unsigned int *)this + 40);
  if (v2)
  {
    unsigned __int8 v4 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v2);
    if (v4)
    {
      uint64_t v10 = 0x2A2A2A2A2A2A2A2ALL;
      int v11 = -1;
      int v5 = *((_DWORD *)this + 4);
      v7[0] = 0;
      v7[1] = v5;
      long long v8 = 0u;
      long long v9 = 0u;
      unsigned int v6 = *((_DWORD *)this + 40);
      v12[0] = 0;
      char v13 = 0;
      HALS_NotificationManager::AddPropertyListener((uint64_t)v7, v6, (char *)&v10, (uint64_t)v12);
      if (v13) {
        AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v12);
      }
      HALS_Listener::~HALS_Listener((HALS_Listener *)v7);
    }
    HALS_ObjectMap::ReleaseObject(v4, v3);
  }
}

void sub_1BAD6122C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a57) {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a17);
  }
  HALS_Listener::~HALS_Listener((HALS_Listener *)&a10);
  HALS_ObjectMap::ReleaseObject(v57, v59);
  _Unwind_Resume(a1);
}

uint64_t HALS_MetaStream::SetInfo(HALS_ObjectMap **this, char a2, int a3)
{
  HALS_MetaStream::RemoveRealStreamPropertyListener((HALS_MetaStream *)this);
  HALS_MetaStream::RemoveRealTapPropertyListener((HALS_MetaStream *)this);
  *((unsigned char *)this + 52) = a2;
  *((unsigned char *)this + 72) = 0;
  HALS_ObjectMap::ReleaseObject_LongTerm(this[18], v6);
  this[18] = 0;
  this[19] = 0;
  *((_DWORD *)this + 40) = 0;
  *((_DWORD *)this + 34) = a3;
  int v7 = (uint64_t (*)(HALS_ObjectMap **))*((void *)*this + 37);

  return v7(this);
}

uint64_t HALS_MetaStream::SetInfo(HALS_ObjectMap **this, char a2, HALS_Device *a3, int a4)
{
  if (this[18] != a3 || *((_DWORD *)this + 38) != a4)
  {
    HALS_MetaStream::RemoveRealStreamPropertyListener((HALS_MetaStream *)this);
    HALS_MetaStream::RemoveRealTapPropertyListener((HALS_MetaStream *)this);
    *((unsigned char *)this + 52) = a2;
    *((unsigned char *)this + 72) = 0;
    HALS_ObjectMap::ReleaseObject_LongTerm(this[18], v8);
    this[18] = a3;
    *((_DWORD *)this + 39) = 0;
    *((_DWORD *)this + 40) = 0;
    *((_DWORD *)this + 38) = a4;
    *((_DWORD *)this + 34) = 0;
    HALS_MetaStream::AddRealStreamPropertyListener((HALS_MetaStream *)this, v9);
  }
  uint64_t v10 = (uint64_t (*)(HALS_ObjectMap **))*((void *)*this + 37);

  return v10(this);
}

void HALS_MetaStream::AddRealStreamPropertyListener(HALS_MetaStream *this, HALS_Object *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (HALS_ObjectMap *)*((void *)this + 18);
  if (v3)
  {
    HALS_ObjectMap::RetainObject(v3, a2);
    uint64_t v4 = HALS_IODevice::CopyStreamByIndex(*((HALS_IODevice **)this + 18), *((unsigned char *)this + 52), *((_DWORD *)this + 38));
    unsigned int v6 = (HALS_ObjectMap *)v4;
    if (v4)
    {
      unsigned int v7 = *(_DWORD *)(v4 + 16);
      *((_DWORD *)this + 39) = v7;
      uint64_t v12 = 0x2A2A2A2A2A2A2A2ALL;
      int v13 = -1;
      int v8 = *((_DWORD *)this + 4);
      v9[0] = 0;
      v9[1] = v8;
      long long v10 = 0u;
      long long v11 = 0u;
      AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v14, **((dispatch_object_t **)this + 21));
      char v15 = 1;
      HALS_NotificationManager::AddPropertyListener((uint64_t)v9, v7, (char *)&v12, (uint64_t)v14);
      if (v15) {
        AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v14);
      }
      HALS_Listener::~HALS_Listener((HALS_Listener *)v9);
    }
    HALS_ObjectMap::ReleaseObject(v6, v5);
  }
}

void sub_1BAD614CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a57) {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a17);
  }
  HALS_Listener::~HALS_Listener((HALS_Listener *)&a10);
  HALS_ObjectMap::ReleaseObject(v57, v59);
  _Unwind_Resume(a1);
}

uint64_t HALS_MetaStream::IsMetaStream(HALS_MetaStream *this)
{
  return 1;
}

uint64_t HALS_MetaStream::GetStartingChannel(HALS_MetaStream *this)
{
  return *((unsigned int *)this + 19);
}

void HALS_MetaStream::HandleGroupObjectPropertiesChanged(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int *a5, unsigned int *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, dispatch_object_t *a11)
{
  unsigned int v17 = *a11;
  if (*a11)
  {
    dispatch_retain(*a11);
    dispatch_group_enter(v17);
  }
  if (a4)
  {
    uint64_t v18 = a4;
    do
    {
      unsigned int v19 = *a5++;
      int v21 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)v19);
      if (v21) {
        (*(void (**)(uint64_t, HALS_ObjectMap *, uint64_t, void, uint64_t))(*(void *)a1 + 160))(a1, v21, a3, *a6, a8);
      }
      unsigned int v22 = *a6;
      HALS_ObjectMap::ReleaseObject(v21, v20);
      a8 += 12 * v22;
      ++a6;
      --v18;
    }
    while (v18);
  }
  if (v17)
  {
    dispatch_group_leave(v17);
    dispatch_release(v17);
  }
}

void sub_1BAD6164C(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t a10)
{
  HALS_ObjectMap::ReleaseObject(v10, a2);
  applesauce::dispatch::v1::group_session::~group_session(&a10);
  _Unwind_Resume(a1);
}

void HALS_MetaStream::HandleObjectPropertiesChanged(HALS_MetaStream *this, const HALS_Object *a2, uint64_t a3, int a4, AudioObjectPropertyAddress *a5)
{
  unsigned int v6 = (HALS_IODevice *)*((void *)this + 18);
  if (v6)
  {
    LODWORD(v8) = a4;
    long long v11 = (const HALS_Object *)HALS_IODevice::CopyStreamByIndex(v6, *((unsigned char *)this + 52), *((_DWORD *)this + 38));
    int v13 = v11;
    if (v11) {
      BOOL v14 = v11 == a2;
    }
    else {
      BOOL v14 = 0;
    }
    if (v14)
    {
      memset(v17, 0, sizeof(v17));
      if (v8)
      {
        uint64_t v8 = v8;
        do
        {
          if (HALS_MetaDevice::PassRealNotificationToClient((HALS_MetaDevice *)a5->mSelector, 0)) {
            CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v17, a5, v15);
          }
          ++a5;
          --v8;
        }
        while (v8);
        uint64_t v16 = *(void **)&v17[0];
        if (*(void *)&v17[0] != *((void *)&v17[0] + 1)) {
          HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), a3, -1431655765 * ((*((void *)&v17[0] + 1) - *(void *)&v17[0]) >> 2), *(const AudioObjectPropertyAddress **)&v17[0]);
        }
        if (v16) {
          operator delete(v16);
        }
      }
    }
    HALS_ObjectMap::ReleaseObject(v13, v12);
  }
}

void sub_1BAD61764(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (v10) {
    operator delete(v10);
  }
  HALS_ObjectMap::ReleaseObject(v9, a2);
  _Unwind_Resume(a1);
}

void HALS_MetaStream::SetPropertyData(HALS_Device **this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, double *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  if (((*((uint64_t (**)(HALS_Device **, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))*this
         + 12))(this, a2, a3, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    int v38 = 2003332927;
    goto LABEL_45;
  }
  if (HALB_Info::PropertyRequiresHogMode((HALB_Info *)a3->mSelector, v16)
    && !HALS_Device::IsHogModeOwnerOrFree(this[8], a8))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    int v38 = 560492391;
LABEL_45:
    exception[2] = v38;
  }
  uint64_t v73 = 0;
  uint64_t v74 = &v73;
  uint64_t v75 = 0x3002000000;
  uint64_t v76 = __Block_byref_object_copy__8645;
  BOOL v77 = __Block_byref_object_dispose__8646;
  int64x2_t v78 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = &v69;
  uint64_t v71 = 0x2000000000;
  char v72 = 0;
  uint64_t v65 = 0;
  double v66 = &v65;
  uint64_t v67 = 0x2000000000;
  int v68 = 0;
  v64[0] = MEMORY[0x1E4F143A8];
  v64[1] = 0x40000000;
  v64[2] = ___ZN15HALS_MetaStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
  v64[3] = &unk_1E6233900;
  v64[4] = &v73;
  v64[5] = &v65;
  v64[6] = &v69;
  v64[7] = this;
  unsigned int v17 = (HALB_Mutex *)(*((uint64_t (**)(HALS_Device **))*this + 7))(this);
  HALB_CommandGate::ExecuteCommand(v17, (uint64_t)v64);
  uint64_t v23 = (HALS_IODevice *)v74[5];
  if (v23)
  {
    uint64_t v24 = (unsigned int *)HALS_IODevice::CopyStreamByIndex(v23, *((unsigned char *)v70 + 24), *((_DWORD *)v66 + 6));
    pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  }
  else
  {
    uint64_t v24 = 0;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if (a3->mSelector == 1885762592)
  {
    if (v24) {
      goto LABEL_27;
    }
    if (*((unsigned char *)this + 72)) {
      goto LABEL_28;
    }
    if (a4 <= 0x27)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_52;
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_MetaStream.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 677;
      __int16 v39 = MEMORY[0x1E4F14500];
      int v40 = "%25s:%-5d  HALS_MetaStream::_SetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormat";
      goto LABEL_51;
    }
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x5002000000;
    unint64_t v82 = __Block_byref_object_copy__31;
    uint64_t v83 = __Block_byref_object_dispose__32;
    v54[0] = MEMORY[0x1E4F143A8];
    v54[1] = 0x40000000;
    v54[2] = ___ZN15HALS_MetaStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_37;
    v54[3] = &unk_1E6233978;
    v54[5] = this;
    v54[6] = a5;
    v54[4] = buf;
    uint64_t v32 = (HALB_Mutex *)(*((uint64_t (**)(HALS_Device **))*this + 7))(this);
    HALB_CommandGate::ExecuteCommand(v32, (uint64_t)v54);
    if (*a5 == 0.0 || *a5 == *(double *)(*(void *)&buf[8] + 40))
    {
      int v33 = *((_DWORD *)a5 + 2);
      if (v33 && v33 != *(_DWORD *)(*(void *)&buf[8] + 48))
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_70;
        }
        *(_DWORD *)uint64_t v79 = 136315394;
        *(void *)&v79[4] = "HALS_MetaStream.cpp";
        *(_WORD *)&v79[12] = 1024;
        *(_DWORD *)&v79[14] = 691;
        uint64_t v46 = MEMORY[0x1E4F14500];
        uint64_t v47 = "%25s:%-5d  HALS_MetaStream::_SetPropertyData: unsupported format ID for kAudioStreamPropertyPhysicalFormat";
      }
      else
      {
        int v34 = *((_DWORD *)a5 + 7);
        if (!v34 || v34 == *(_DWORD *)(*(void *)&buf[8] + 68))
        {
          long long v35 = *(_OWORD *)(*(void *)&buf[8] + 56);
          *(_OWORD *)uint64_t v79 = *(_OWORD *)(*(void *)&buf[8] + 40);
          *(_OWORD *)&v79[16] = v35;
          uint64_t v80 = *(void *)(*(void *)&buf[8] + 72);
          uint64_t v59 = 0;
          uint64_t v60 = &v59;
          uint64_t v61 = 0x2000000000;
          int v62 = 0;
          v50[0] = MEMORY[0x1E4F143A8];
          v50[1] = 0x40000000;
          v50[2] = ___ZN15HALS_MetaStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_39;
          v50[3] = &unk_1E62339A0;
          long long v51 = *(_OWORD *)v79;
          long long v52 = v35;
          uint64_t v53 = v80;
          v50[4] = &v59;
          v50[5] = this;
          char v36 = (HALB_Mutex *)(*((uint64_t (**)(HALS_Device **))*this + 7))(this);
          HALB_CommandGate::ExecuteCommand(v36, (uint64_t)v50);
          if (*((_DWORD *)v60 + 6))
          {
            uint64_t v43 = __cxa_allocate_exception(4uLL);
            *uint64_t v43 = *((_DWORD *)v60 + 6);
            __cxa_throw(v43, MEMORY[0x1E4FBA3A8], 0);
          }
          if (a8
            && (*(_DWORD *)(*(void *)&buf[8] + 48) != 1819304813
             || (*(_DWORD *)(*(void *)&buf[8] + 52) & 0x40) != 0))
          {
            HALS_Client::SetNonMixableFormat(a8, *((_DWORD *)this[8] + 4));
          }
          goto LABEL_42;
        }
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
LABEL_70:
          int v49 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v49 = off_1F148A5D8;
          v49[2] = 560226676;
        }
        *(_DWORD *)uint64_t v79 = 136315394;
        *(void *)&v79[4] = "HALS_MetaStream.cpp";
        *(_WORD *)&v79[12] = 1024;
        *(_DWORD *)&v79[14] = 694;
        uint64_t v46 = MEMORY[0x1E4F14500];
        uint64_t v47 = "%25s:%-5d  HALS_MetaStream::_SetPropertyData: unsupported number of channels for kAudioStreamPropertyPhysicalFormat";
      }
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_70;
      }
      *(_DWORD *)uint64_t v79 = 136315394;
      *(void *)&v79[4] = "HALS_MetaStream.cpp";
      *(_WORD *)&v79[12] = 1024;
      *(_DWORD *)&v79[14] = 688;
      uint64_t v46 = MEMORY[0x1E4F14500];
      uint64_t v47 = "%25s:%-5d  HALS_MetaStream::_SetPropertyData: unsupported sample rate for kAudioStreamPropertyPhysicalFormat";
    }
    _os_log_impl(&dword_1BAA78000, v46, OS_LOG_TYPE_ERROR, v47, v79, 0x12u);
    goto LABEL_70;
  }
  if (mSelector != 1936092532)
  {
    if (mSelector == 1935894638) {
      HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v19, v20, v21, v22, (uint64_t)a8);
    }
    if (!v24) {
      HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v19, v20, v21, v22, (uint64_t)a8);
    }
    goto LABEL_27;
  }
  if (v24)
  {
LABEL_27:
    (*(void (**)(unsigned int *, void, const AudioObjectPropertyAddress *, uint64_t, double *, uint64_t, const void *, HALS_Client *))(*(void *)v24 + 120))(v24, v24[4], a3, a4, a5, a6, a7, a8);
    goto LABEL_28;
  }
  if (!*((unsigned char *)this + 72))
  {
    if (a4 > 0x27)
    {
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&buf[16] = 0x5002000000;
      unint64_t v82 = __Block_byref_object_copy__31;
      uint64_t v83 = __Block_byref_object_dispose__32;
      v63[0] = MEMORY[0x1E4F143A8];
      v63[1] = 0x40000000;
      v63[2] = ___ZN15HALS_MetaStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_33;
      v63[3] = &unk_1E6233928;
      v63[5] = this;
      v63[6] = a5;
      v63[4] = buf;
      unsigned int v26 = (HALB_Mutex *)(*((uint64_t (**)(HALS_Device **))*this + 7))(this);
      HALB_CommandGate::ExecuteCommand(v26, (uint64_t)v63);
      if (*a5 == 0.0 || *a5 == *(double *)(*(void *)&buf[8] + 40))
      {
        int v27 = *((_DWORD *)a5 + 2);
        if (v27 && v27 != *(_DWORD *)(*(void *)&buf[8] + 48))
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_66;
          }
          *(_DWORD *)uint64_t v79 = 136315394;
          *(void *)&v79[4] = "HALS_MetaStream.cpp";
          *(_WORD *)&v79[12] = 1024;
          *(_DWORD *)&v79[14] = 639;
          uint64_t v44 = MEMORY[0x1E4F14500];
          unint64_t v45 = "%25s:%-5d  HALS_MetaStream::_SetPropertyData: unsupported format ID for kAudioStreamPropertyVirtualFormat";
        }
        else
        {
          int v28 = *((_DWORD *)a5 + 7);
          if (!v28 || v28 == *(_DWORD *)(*(void *)&buf[8] + 68))
          {
            long long v29 = *(_OWORD *)(*(void *)&buf[8] + 56);
            *(_OWORD *)uint64_t v79 = *(_OWORD *)(*(void *)&buf[8] + 40);
            *(_OWORD *)&v79[16] = v29;
            uint64_t v80 = *(void *)(*(void *)&buf[8] + 72);
            uint64_t v59 = 0;
            uint64_t v60 = &v59;
            uint64_t v61 = 0x2000000000;
            int v62 = 0;
            v55[0] = MEMORY[0x1E4F143A8];
            v55[1] = 0x40000000;
            v55[2] = ___ZN15HALS_MetaStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_35;
            v55[3] = &unk_1E6233950;
            long long v56 = *(_OWORD *)v79;
            long long v57 = v29;
            uint64_t v58 = v80;
            v55[4] = &v59;
            v55[5] = this;
            uint64_t v30 = (HALB_Mutex *)(*((uint64_t (**)(HALS_Device **))*this + 7))(this);
            HALB_CommandGate::ExecuteCommand(v30, (uint64_t)v55);
            if (*((_DWORD *)v60 + 6))
            {
              long long v42 = __cxa_allocate_exception(4uLL);
              _DWORD *v42 = *((_DWORD *)v60 + 6);
              __cxa_throw(v42, MEMORY[0x1E4FBA3A8], 0);
            }
            if (a8
              && (*(_DWORD *)(*(void *)&buf[8] + 48) != 1819304813
               || (*(_DWORD *)(*(void *)&buf[8] + 52) & 0x40) != 0))
            {
              HALS_Client::SetNonMixableFormat(a8, *((_DWORD *)this[8] + 4));
            }
LABEL_42:
            _Block_object_dispose(&v59, 8);
            _Block_object_dispose(buf, 8);
            goto LABEL_28;
          }
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
LABEL_66:
            uint64_t v48 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v48 = off_1F148A5D8;
            v48[2] = 560226676;
          }
          *(_DWORD *)uint64_t v79 = 136315394;
          *(void *)&v79[4] = "HALS_MetaStream.cpp";
          *(_WORD *)&v79[12] = 1024;
          *(_DWORD *)&v79[14] = 642;
          uint64_t v44 = MEMORY[0x1E4F14500];
          unint64_t v45 = "%25s:%-5d  HALS_MetaStream::_SetPropertyData: unsupported number of channels for kAudioStreamPropertyVirtualFormat";
        }
      }
      else
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_66;
        }
        *(_DWORD *)uint64_t v79 = 136315394;
        *(void *)&v79[4] = "HALS_MetaStream.cpp";
        *(_WORD *)&v79[12] = 1024;
        *(_DWORD *)&v79[14] = 636;
        uint64_t v44 = MEMORY[0x1E4F14500];
        unint64_t v45 = "%25s:%-5d  HALS_MetaStream::_SetPropertyData: unsupported sample rate for kAudioStreamPropertyVirtualFormat";
      }
      _os_log_impl(&dword_1BAA78000, v44, OS_LOG_TYPE_ERROR, v45, v79, 0x12u);
      goto LABEL_66;
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
LABEL_52:
      uint64_t v41 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v41 = off_1F148A5D8;
      v41[2] = 561211770;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "HALS_MetaStream.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 625;
    __int16 v39 = MEMORY[0x1E4F14500];
    int v40 = "%25s:%-5d  HALS_MetaStream::_SetPropertyData: bad property data size for kAudioStreamPropertyVirtualFormat";
LABEL_51:
    _os_log_impl(&dword_1BAA78000, v39, OS_LOG_TYPE_ERROR, v40, buf, 0x12u);
    goto LABEL_52;
  }
LABEL_28:
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v24, v18);
  _Block_object_dispose(&v65, 8);
  _Block_object_dispose(&v69, 8);
  _Block_object_dispose(&v73, 8);
  HALS_ObjectMap::ReleaseObject(v78, v31);
}

void sub_1BAD62318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose((const void *)(v70 - 208), 8);
  HALS_ObjectMap::ReleaseObject(0, v72);
  _Block_object_dispose(&a57, 8);
  _Block_object_dispose(&a61, 8);
  _Block_object_dispose(&a65, 8);
  HALS_ObjectMap::ReleaseObject(a70, v73);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8645(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8646(uint64_t a1, HALS_Object *a2)
{
}

void ___ZN15HALS_MetaStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(void *a1, HALS_Object *a2)
{
  uint64_t v3 = a1[7];
  HALS_ObjectMap::RetainObject(*(HALS_ObjectMap **)(v3 + 144), a2);
  uint64_t v4 = *(void *)(a1[4] + 8);
  int v5 = *(HALS_ObjectMap **)(v4 + 40);
  *(void *)(v4 + 40) = *(void *)(v3 + 144);
  HALS_ObjectMap::ReleaseObject(v5, v6);
  *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = *(_DWORD *)(v3 + 152);
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = *(unsigned char *)(v3 + 52);
}

__n128 __Block_byref_object_copy__31(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  long long v3 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v3;
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void ___ZN15HALS_MetaStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_33(void *a1)
{
  uint64_t v2 = a1[5];
  (*(void (**)(uint64_t, double *))(*(void *)v2 + 304))(v2, v7);
  uint64_t v4 = a1[6];
  int v5 = *(const AudioStreamBasicDescription **)(a1[4] + 8);
  long long v6 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)&v8.mSampleRate = *(_OWORD *)v4;
  *(_OWORD *)&v8.mBytesPerPacket = v6;
  *(void *)&v8.mBitsPerChannel = *(void *)(v4 + 32);
  if (v8.mFormatID == 1819304813)
  {
    v8.mBitsPerChannel = 0;
    *(void *)&v8.mFramesPerPacket = 0;
    *(void *)&v8.mFormatFlags = 0;
  }
  HALB_FormatList::BestMatchForPhysicalFormat((HALB_FormatList *)(v2 + 80), &v8, v5 + 1, v3, v7[0]);
}

uint64_t ___ZN15HALS_MetaStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_35(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 312))(*(void *)(a1 + 40), a1 + 48);
}

void sub_1BAD6256C(void *a1, int a2)
{
  uint64_t v4 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    int v5 = v4[2];
  }
  else {
    int v5 = 2003329396;
  }
  *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) = v5;
  __cxa_end_catch();
}

void ___ZN15HALS_MetaStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_37(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  long long v3 = (HALB_FormatList *)(v2 + 80);
  (*(void (**)(uint64_t, double *))(*(void *)v2 + 304))(v2, v5);
  HALB_FormatList::BestMatchForPhysicalFormat(v3, *(const AudioStreamBasicDescription **)(a1 + 48), (const AudioStreamBasicDescription *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v4, v5[0]);
}

uint64_t ___ZN15HALS_MetaStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_39(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 312))(*(void *)(a1 + 40), a1 + 48);
}

void sub_1BAD62684(void *a1, int a2)
{
  uint64_t v4 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    int v5 = v4[2];
  }
  else {
    int v5 = 2003329396;
  }
  *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) = v5;
  __cxa_end_catch();
}

void HALS_MetaStream::GetPropertyData(HALS_MetaStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, unsigned int *a5, _OWORD *a6, uint64_t a7, _OWORD *a8, HALS_Client *a9)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_MetaStream *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a9) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  if (a9) {
    BOOL v17 = *((unsigned char *)a9 + 258) == 0;
  }
  else {
    BOOL v17 = 1;
  }
  uint64_t v105 = 0;
  long long v106 = &v105;
  uint64_t v107 = 0x3002000000;
  int v108 = __Block_byref_object_copy__8645;
  uint64_t v109 = __Block_byref_object_dispose__8646;
  uint64_t v110 = 0;
  uint64_t v101 = 0;
  int v102 = &v101;
  uint64_t v103 = 0x2000000000;
  char v104 = 0;
  uint64_t v97 = 0;
  long long v98 = &v97;
  uint64_t v99 = 0x2000000000;
  int v100 = 0;
  v95[0] = 0;
  v95[1] = v95;
  v95[2] = 0x2000000000;
  int v96 = 0;
  v94[0] = MEMORY[0x1E4F143A8];
  v94[1] = 0x40000000;
  v94[2] = ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
  v94[3] = &unk_1E6233748;
  v94[8] = this;
  v94[4] = &v105;
  v94[5] = &v97;
  v94[6] = &v101;
  v94[7] = v95;
  uint64_t v18 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v18, (uint64_t)v94);
  BOOL v66 = v17;
  uint64_t v67 = a6;
  uint64_t v19 = (HALS_IODevice *)v106[5];
  if (v19)
  {
    uint64_t v20 = (unsigned int *)HALS_IODevice::CopyStreamByIndex(v19, *((unsigned char *)v102 + 24), *((_DWORD *)v98 + 6));
    pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  }
  else
  {
    uint64_t v20 = 0;
  }
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1935894637)
  {
    if (mSelector <= 1885762656)
    {
      if (mSelector == 1885762592) {
        goto LABEL_39;
      }
      if (mSelector != 1885762595)
      {
        if (mSelector == 1885762623)
        {
          if (v20) {
            goto LABEL_79;
          }
          if (a4 > 0x27)
          {
            *a5 = 40;
            *(void *)std::string v115 = 0;
            *(void *)&v115[8] = v115;
            *(void *)&v115[16] = 0x2000000000;
            LOBYTE(v116) = 0;
            v73[0] = MEMORY[0x1E4F143A8];
            v73[1] = 0x40000000;
            v73[2] = ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_26;
            v73[3] = &unk_1E62338B8;
            v73[4] = v115;
            v73[5] = this;
            v73[6] = a6;
            uint64_t v23 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(void *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v23, (uint64_t)v73);
            if (!*(unsigned char *)(*(void *)&v115[8] + 24))
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 136315394;
                long long v112 = "HALS_MetaStream.cpp";
                __int16 v113 = 1024;
                int v114 = 536;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaStream::_GetPropertyData: kAudioStreamPropertyPhysicalFormatSupported: the format is not supported", buf, 0x12u);
              }
              uint64_t v24 = __cxa_allocate_exception(0x10uLL);
              *(void *)uint64_t v24 = off_1F148A5D8;
              v24[2] = 560226676;
            }
            goto LABEL_68;
          }
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string v115 = 136315394;
            *(void *)&v115[4] = "HALS_MetaStream.cpp";
            *(_WORD *)&v115[12] = 1024;
            *(_DWORD *)&v115[14] = 532;
            unsigned int v63 = MEMORY[0x1E4F14500];
            uint64_t v64 = "%25s:%-5d  HALS_MetaStream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormatSupported";
            goto LABEL_120;
          }
LABEL_121:
          uint64_t v65 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v65 = off_1F148A5D8;
          v65[2] = 561211770;
        }
        goto LABEL_78;
      }
      if (v20) {
        goto LABEL_79;
      }
      *(void *)std::string v115 = 0;
      *(void *)&v115[8] = v115;
      *(void *)&v115[16] = 0x2000000000;
      uint64_t v116 = 0;
      v74[0] = MEMORY[0x1E4F143A8];
      v74[1] = 0x40000000;
      v74[2] = ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3_24;
      v74[3] = &unk_1E6233890;
      int v75 = a4;
      v74[4] = v115;
      v74[5] = this;
      v74[6] = a6;
      int v38 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v38, (uint64_t)v74);
LABEL_66:
      int v37 = 40 * *(_DWORD *)(*(void *)&v115[8] + 24);
      goto LABEL_67;
    }
    if (mSelector == 1885762657)
    {
      if (!v20)
      {
        *(void *)std::string v115 = 0;
        *(void *)&v115[8] = v115;
        *(void *)&v115[16] = 0x2000000000;
        uint64_t v116 = 0;
        v76[0] = MEMORY[0x1E4F143A8];
        v76[1] = 0x40000000;
        v76[2] = ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_22;
        v76[3] = &unk_1E6233868;
        int v77 = a4;
        v76[4] = v115;
        v76[5] = this;
        v76[6] = a6;
        char v36 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v36, (uint64_t)v76);
        goto LABEL_63;
      }
LABEL_79:
      (*(void (**)(unsigned int *, void, AudioObjectPropertyAddress *, uint64_t, unsigned int *, _OWORD *, uint64_t, _OWORD *, HALS_Client *))(*(void *)v20 + 112))(v20, v20[4], a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_80;
    }
    if (mSelector == 1885762669)
    {
      if (v20) {
        goto LABEL_79;
      }
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_121;
        }
        *(_DWORD *)std::string v115 = 136315394;
        *(void *)&v115[4] = "HALS_MetaStream.cpp";
        *(_WORD *)&v115[12] = 1024;
        *(_DWORD *)&v115[14] = 550;
        unsigned int v63 = MEMORY[0x1E4F14500];
        uint64_t v64 = "%25s:%-5d  HALS_MetaStream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormatMatch";
        goto LABEL_120;
      }
      *a5 = 40;
      if (a8) {
        BOOL v39 = a7 == 40;
      }
      else {
        BOOL v39 = 0;
      }
      if (v39) {
        int v40 = a8;
      }
      else {
        int v40 = a6;
      }
      long long v41 = v40[1];
      long long v69 = *v40;
      long long v70 = v41;
      uint64_t v71 = *((void *)v40 + 4);
      char v72 = a6;
      v68[0] = MEMORY[0x1E4F143A8];
      v68[1] = 0x40000000;
      v68[2] = ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_28;
      v68[3] = &__block_descriptor_tmp_29_8680;
      v68[4] = this;
      long long v42 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v42, (uint64_t)v68);
      goto LABEL_80;
    }
    if (mSelector != 1935762292) {
      goto LABEL_78;
    }
    if (v20) {
      goto LABEL_79;
    }
    if (!*((unsigned char *)this + 72))
    {
LABEL_86:
      HALS_Stream::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
      goto LABEL_80;
    }
    if (a4 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_121;
      }
      *(_DWORD *)std::string v115 = 136315394;
      *(void *)&v115[4] = "HALS_MetaStream.cpp";
      *(_WORD *)&v115[12] = 1024;
      *(_DWORD *)&v115[14] = 333;
      unsigned int v63 = MEMORY[0x1E4F14500];
      uint64_t v64 = "%25s:%-5d  HALS_MetaStream::_GetPropertyData: bad property data size for kAudioStreamPropertyIsActive";
      goto LABEL_120;
    }
    v93[0] = MEMORY[0x1E4F143A8];
    v93[1] = 0x40000000;
    v93[2] = ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_10;
    v93[3] = &__block_descriptor_tmp_11_8662;
    v93[4] = a6;
    unsigned int v26 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v26, (uint64_t)v93);
    goto LABEL_60;
  }
  if (mSelector <= 1936092478)
  {
    if (mSelector != 1935894638)
    {
      if (mSelector != 1935960434)
      {
        if (mSelector != 1936092451) {
          goto LABEL_78;
        }
        if (v20) {
          goto LABEL_79;
        }
        *(void *)std::string v115 = 0;
        *(void *)&v115[8] = v115;
        *(void *)&v115[16] = 0x2000000000;
        uint64_t v116 = 0;
        v85[0] = MEMORY[0x1E4F143A8];
        v85[1] = 0x40000000;
        v85[2] = ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3;
        v85[3] = &unk_1E62337F8;
        BOOL v87 = v66;
        int v86 = a4;
        v85[4] = v115;
        v85[5] = this;
        v85[6] = a6;
        uint64_t v25 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v25, (uint64_t)v85);
        goto LABEL_66;
      }
      if (a4 > 3)
      {
        v92[0] = MEMORY[0x1E4F143A8];
        v92[1] = 0x40000000;
        v92[2] = ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_12;
        v92[3] = &__block_descriptor_tmp_13_8664;
        v92[4] = this;
        v92[5] = a6;
        long long v35 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v35, (uint64_t)v92);
        goto LABEL_60;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
LABEL_109:
        int v62 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v62 = off_1F148A5D8;
        v62[2] = 561211770;
      }
      *(_DWORD *)std::string v115 = 136315394;
      *(void *)&v115[4] = "HALS_MetaStream.cpp";
      *(_WORD *)&v115[12] = 1024;
      *(_DWORD *)&v115[14] = 347;
      uint64_t v60 = MEMORY[0x1E4F14500];
      uint64_t v61 = "%25s:%-5d  HALS_MetaStream::_GetPropertyData: bad property data size for kAudioStreamPropertyDirection";
LABEL_108:
      _os_log_impl(&dword_1BAA78000, v60, OS_LOG_TYPE_ERROR, v61, v115, 0x12u);
      goto LABEL_109;
    }
    if (a4 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_109;
      }
      *(_DWORD *)std::string v115 = 136315394;
      *(void *)&v115[4] = "HALS_MetaStream.cpp";
      *(_WORD *)&v115[12] = 1024;
      *(_DWORD *)&v115[14] = 356;
      uint64_t v60 = MEMORY[0x1E4F14500];
      uint64_t v61 = "%25s:%-5d  HALS_MetaStream::_GetPropertyData: bad property data size for kAudioStreamPropertyStartingChannel";
      goto LABEL_108;
    }
    v91[0] = MEMORY[0x1E4F143A8];
    v91[1] = 0x40000000;
    v91[2] = ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_14;
    v91[3] = &__block_descriptor_tmp_15_8666;
    v91[4] = this;
    v91[5] = a6;
    int v34 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v34, (uint64_t)v91);
LABEL_60:
    *a5 = 4;
    goto LABEL_80;
  }
  if (mSelector <= 1936092524)
  {
    if (mSelector != 1936092479)
    {
      if (mSelector == 1936092513)
      {
        if (!v20)
        {
          *(void *)std::string v115 = 0;
          *(void *)&v115[8] = v115;
          *(void *)&v115[16] = 0x2000000000;
          uint64_t v116 = 0;
          v88[0] = MEMORY[0x1E4F143A8];
          v88[1] = 0x40000000;
          v88[2] = ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2;
          v88[3] = &unk_1E62337D0;
          BOOL v90 = v66;
          int v89 = a4;
          v88[5] = this;
          v88[4] = v115;
          v88[6] = a6;
          uint64_t v22 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v22, (uint64_t)v88);
LABEL_63:
          int v37 = 56 * *(_DWORD *)(*(void *)&v115[8] + 24);
LABEL_67:
          *a5 = v37;
LABEL_68:
          _Block_object_dispose(v115, 8);
          goto LABEL_80;
        }
        goto LABEL_79;
      }
      goto LABEL_78;
    }
    if (v20) {
      goto LABEL_79;
    }
    if (a4 > 0x27)
    {
      *a5 = 40;
      *(void *)std::string v115 = 0;
      *(void *)&v115[8] = v115;
      *(void *)&v115[16] = 0x2000000000;
      LOBYTE(v116) = 0;
      v84[0] = MEMORY[0x1E4F143A8];
      v84[1] = 0x40000000;
      v84[2] = ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_18;
      v84[3] = &unk_1E6233820;
      v84[4] = v115;
      v84[5] = this;
      v84[6] = a6;
      int v28 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v28, (uint64_t)v84);
      if (!*(unsigned char *)(*(void *)&v115[8] + 24))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 136315394;
          long long v112 = "HALS_MetaStream.cpp";
          __int16 v113 = 1024;
          int v114 = 405;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaStream::_GetPropertyData: kAudioDevicePropertyStreamFormatSupported: the format is not supported", buf, 0x12u);
        }
        long long v29 = __cxa_allocate_exception(0x10uLL);
        *(void *)long long v29 = off_1F148A5D8;
        v29[2] = 560226676;
      }
      goto LABEL_68;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string v115 = 136315394;
      *(void *)&v115[4] = "HALS_MetaStream.cpp";
      *(_WORD *)&v115[12] = 1024;
      *(_DWORD *)&v115[14] = 401;
      unsigned int v63 = MEMORY[0x1E4F14500];
      uint64_t v64 = "%25s:%-5d  HALS_MetaStream::_GetPropertyData: bad property data size for kAudioDevicePropertyStreamFormatSupported";
LABEL_120:
      _os_log_impl(&dword_1BAA78000, v63, OS_LOG_TYPE_ERROR, v64, v115, 0x12u);
      goto LABEL_121;
    }
    goto LABEL_121;
  }
  if (mSelector == 1936092525)
  {
    if (v20) {
      goto LABEL_79;
    }
    if (a4 <= 0x27)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_121;
      }
      *(_DWORD *)std::string v115 = 136315394;
      *(void *)&v115[4] = "HALS_MetaStream.cpp";
      *(_WORD *)&v115[12] = 1024;
      *(_DWORD *)&v115[14] = 419;
      unsigned int v63 = MEMORY[0x1E4F14500];
      uint64_t v64 = "%25s:%-5d  HALS_MetaStream::_GetPropertyData: bad property data size for kAudioDevicePropertyStreamFormatMatch";
      goto LABEL_120;
    }
    *a5 = 40;
    if (a8) {
      BOOL v30 = a7 == 40;
    }
    else {
      BOOL v30 = 0;
    }
    if (v30) {
      uint64_t v31 = a8;
    }
    else {
      uint64_t v31 = a6;
    }
    long long v32 = *v31;
    long long v80 = v31[1];
    uint64_t v81 = *((void *)v31 + 4);
    unint64_t v82 = a6;
    long long v79 = v32;
    v78[0] = MEMORY[0x1E4F143A8];
    v78[1] = 0x40000000;
    v78[2] = ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_20;
    v78[3] = &__block_descriptor_tmp_21_8673;
    BOOL v83 = v66;
    v78[4] = this;
    int v33 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v33, (uint64_t)v78);
    goto LABEL_80;
  }
  if (mSelector != 1936092532)
  {
LABEL_78:
    if (v20) {
      goto LABEL_79;
    }
    goto LABEL_86;
  }
LABEL_39:
  if (v20)
  {
    (*(void (**)(unsigned int *, void, AudioObjectPropertyAddress *, uint64_t, unsigned int *, _OWORD *, uint64_t, _OWORD *, HALS_Client *))(*(void *)v20 + 112))(v20, v20[4], a3, a4, a5, a6, a7, a8, a9);
    *(double *)a6 = (*(double (**)(void))(**((void **)this + 8) + 264))(*((void *)this + 8));
    goto LABEL_80;
  }
  if (*((unsigned char *)this + 72))
  {
    uint64_t v44 = (HALS_ObjectMap *)*((unsigned int *)this + 40);
    if (v44)
    {
      uint64_t v45 = HALS_ObjectMap::CopyObjectByObjectID(v44);
      uint64_t v46 = (HALS_ObjectMap *)v45;
      if (v45)
      {
        uint64_t v48 = *(void *)(v45 + 248);
        uint64_t v47 = *(std::__shared_weak_count **)(v45 + 256);
        if (v47)
        {
          atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
          long long v49 = *(_OWORD *)(v48 + 24);
          long long v50 = *(_OWORD *)(v48 + 40);
          *((void *)v67 + 4) = *(void *)(v48 + 56);
          *uint64_t v67 = v49;
          v67[1] = v50;
          std::__shared_weak_count::__release_shared[abi:ne180100](v47);
        }
        else
        {
          long long v54 = *(_OWORD *)(v48 + 24);
          long long v55 = *(_OWORD *)(v48 + 40);
          *((void *)v67 + 4) = *(void *)(v48 + 56);
          *uint64_t v67 = v54;
          v67[1] = v55;
        }
      }
      else
      {
        *uint64_t v67 = k_default_multitap_format;
        v67[1] = unk_1BB03CFE0;
        *((void *)v67 + 4) = 32;
      }
      *(double *)uint64_t v67 = HALS_MetaStream::GetTapSampleRate(this);
      if (*((_DWORD *)v67 + 2) == 1819304813 && (*((unsigned char *)v67 + 12) & 0x40) == 0)
      {
        if (v66) {
          int v57 = 9;
        }
        else {
          int v57 = 11;
        }
        int v58 = 4 * *((_DWORD *)v67 + 7);
        *((_DWORD *)v67 + 3) = v57;
        *((_DWORD *)v67 + 4) = v58;
        *((_DWORD *)v67 + 5) = 1;
        *((_DWORD *)v67 + 6) = v58;
        *((_DWORD *)v67 + 8) = 32;
      }
      HALS_ObjectMap::ReleaseObject(v46, v56);
      goto LABEL_80;
    }
    *a6 = k_default_multitap_format;
    a6[1] = unk_1BB03CFE0;
    *((void *)a6 + 4) = 32;
    *(double *)a6 = HALS_MetaStream::GetTapSampleRate(this);
    if (*((_DWORD *)a6 + 2) != 1819304813) {
      goto LABEL_80;
    }
  }
  else
  {
    *(double *)a6 = (*(double (**)(void))(**((void **)this + 8) + 264))(*((void *)this + 8));
    *((void *)a6 + 1) = 0x96C70636DLL;
    int v51 = *((_DWORD *)this + 34);
    *((_DWORD *)a6 + 4) = 4 * v51;
    *((_DWORD *)a6 + 5) = 1;
    *((_DWORD *)a6 + 6) = 4 * v51;
    *((_DWORD *)a6 + 7) = v51;
    *((_DWORD *)a6 + 8) = 32;
  }
  if ((*((unsigned char *)a6 + 12) & 0x40) == 0)
  {
    if (v66) {
      int v52 = 9;
    }
    else {
      int v52 = 11;
    }
    int v53 = 4 * *((_DWORD *)a6 + 7);
    *((_DWORD *)a6 + 3) = v52;
    *((_DWORD *)a6 + 4) = v53;
    *((_DWORD *)a6 + 5) = 1;
    *((_DWORD *)a6 + 6) = v53;
    *((_DWORD *)a6 + 8) = 32;
  }
LABEL_80:
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v20, v27);
  _Block_object_dispose(v95, 8);
  _Block_object_dispose(&v97, 8);
  _Block_object_dispose(&v101, 8);
  _Block_object_dispose(&v105, 8);
  HALS_ObjectMap::ReleaseObject(v110, v43);
}

void sub_1BAD63934(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(void *a1, HALS_Object *a2)
{
  uint64_t v3 = a1[8];
  HALS_ObjectMap::RetainObject(*(HALS_ObjectMap **)(v3 + 144), a2);
  uint64_t v4 = *(void *)(a1[4] + 8);
  int v5 = *(HALS_ObjectMap **)(v4 + 40);
  *(void *)(v4 + 40) = *(void *)(v3 + 144);
  HALS_ObjectMap::ReleaseObject(v5, v6);
  *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = *(_DWORD *)(v3 + 152);
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = *(unsigned char *)(v3 + 52);
  *(_DWORD *)(*(void *)(a1[7] + 8) + 24) = *(_DWORD *)(v3 + 136);
}

uint64_t ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_10(uint64_t result)
{
  **(_DWORD **)(result + 32) = 1;
  return result;
}

uint64_t ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_12(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(unsigned __int8 *)(*(void *)(result + 32) + 52);
  return result;
}

uint64_t ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_14(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(_DWORD *)(*(void *)(result + 32) + 76);
  return result;
}

uint64_t ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2(uint64_t a1)
{
  return HALB_FormatList::GetVirtualFormats(*(void *)(a1 + 40) + 80, *(unsigned char *)(a1 + 60), *(unsigned int *)(a1 + 56) / 0x38uLL, (unint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(AudioStreamRangedDescription **)(a1 + 48));
}

uint64_t ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3(uint64_t a1)
{
  return HALB_FormatList::GetVirtualFormats(*(void *)(a1 + 40) + 80, *(unsigned char *)(a1 + 60), *(unsigned int *)(a1 + 56) / 0x28uLL, (unint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(AudioStreamBasicDescription **)(a1 + 48));
}

void sub_1BAD63B2C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

BOOL ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_18(void *a1)
{
  BOOL result = HALB_FormatList::IsVirtualFormatSupported(*(const AudioStreamBasicDescription **)(a1[5] + 88), *(AudioStreamBasicDescription **)(a1[5] + 96), a1[6]);
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = result;
  return result;
}

void ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_20(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  (*(void (**)(uint64_t, double *))(*(void *)v2 + 304))(v2, &v5);
  if (v6 == 1819304813 && (v7 & 0x40) == 0)
  {
    if (*(unsigned char *)(a1 + 88)) {
      int v4 = 9;
    }
    else {
      int v4 = 11;
    }
    int v7 = v4;
    int v8 = 4 * v11;
    int v9 = 1;
    int v10 = 4 * v11;
    int v12 = 32;
  }
  HALB_FormatList::BestMatchForVirtualFormat((HALB_FormatList *)(v2 + 80), (const AudioStreamBasicDescription *)(a1 + 40), *(const AudioStreamBasicDescription **)(a1 + 80), v3, v5);
}

double HALS_MetaStream::GetTapSampleRate(HALS_MetaStream *this)
{
  double v1 = 0.0;
  if (*((unsigned char *)this + 72))
  {
    uint64_t v2 = (HALS_ObjectMap *)*((unsigned int *)this + 40);
    if (v2)
    {
      uint64_t v3 = HALS_ObjectMap::CopyObjectByObjectID(v2);
      double v5 = (HALS_ObjectMap *)v3;
      if (v3)
      {
        uint64_t v7 = *(void *)(v3 + 248);
        int v6 = *(std::__shared_weak_count **)(v3 + 256);
        if (v6)
        {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
          double v1 = *(double *)(v7 + 24);
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        else
        {
          double v1 = *(double *)(v7 + 24);
        }
      }
      else
      {
        double v1 = 48000.0;
      }
      HALS_ObjectMap::ReleaseObject(v5, v4);
    }
  }
  return v1;
}

__n128 ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_22(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(v3 + 24) = 0;
  if (v1 >= 0x38)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = v1 / 0x38uLL;
    uint64_t v8 = -1;
    do
    {
      uint64_t v9 = *(void *)(v2 + 112);
      if (++v8 >= (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((*(void *)(v2 + 120) - v9) >> 3))) {
        break;
      }
      uint64_t v10 = v9 + v5;
      v5 += 56;
      uint64_t v11 = v4 + 56 * v6;
      __n128 result = *(__n128 *)v10;
      long long v13 = *(_OWORD *)(v10 + 16);
      long long v14 = *(_OWORD *)(v10 + 32);
      *(void *)(v11 + 48) = *(void *)(v10 + 48);
      *(_OWORD *)(v11 + 16) = v13;
      *(_OWORD *)(v11 + 32) = v14;
      *(__n128 *)uint64_t v11 = result;
      unint64_t v6 = *(void *)(v3 + 24) + 1;
      *(void *)(v3 + 24) = v6;
    }
    while (v6 < v7);
  }
  return result;
}

uint64_t ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3_24(uint64_t a1)
{
  return HALB_FormatList::GetPhysicalFormats(*(void *)(a1 + 40) + 80, *(unsigned int *)(a1 + 56) / 0x38uLL, (unint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(AudioStreamBasicDescription **)(a1 + 48));
}

void sub_1BAD63DB4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

BOOL ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_26(void *a1)
{
  BOOL result = HALB_FormatList::IsVirtualFormatSupported(*(const AudioStreamBasicDescription **)(a1[5] + 112), *(AudioStreamBasicDescription **)(a1[5] + 120), a1[6]);
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = result;
  return result;
}

void ___ZNK15HALS_MetaStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (HALB_FormatList *)(v2 + 80);
  (*(void (**)(uint64_t, double *))(*(void *)v2 + 304))(v2, v5);
  HALB_FormatList::BestMatchForPhysicalFormat(v3, (const AudioStreamBasicDescription *)(a1 + 40), *(const AudioStreamBasicDescription **)(a1 + 80), v4, v5[0]);
}

uint64_t HALS_MetaStream::GetPropertyDataSize(HALS_MetaStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, HALS_Client *a6)
{
  if (((*(uint64_t (**)(HALS_MetaStream *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a6) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  uint64_t v43 = 0;
  uint64_t v44 = &v43;
  uint64_t v45 = 0x2000000000;
  int v46 = 0;
  uint64_t v37 = 0;
  int v38 = &v37;
  uint64_t v39 = 0x3002000000;
  int v40 = __Block_byref_object_copy__8645;
  long long v41 = __Block_byref_object_dispose__8646;
  long long v42 = 0;
  uint64_t v33 = 0;
  int v34 = &v33;
  uint64_t v35 = 0x2000000000;
  char v36 = 0;
  uint64_t v29 = 0;
  BOOL v30 = &v29;
  uint64_t v31 = 0x2000000000;
  int v32 = 0;
  v28[0] = MEMORY[0x1E4F143A8];
  v28[1] = 0x40000000;
  v28[2] = ___ZNK15HALS_MetaStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke;
  v28[3] = &unk_1E6233680;
  v28[4] = &v37;
  v28[5] = &v29;
  void v28[6] = &v33;
  v28[7] = this;
  int v12 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v12, (uint64_t)v28);
  long long v13 = (HALS_IODevice *)v38[5];
  if (v13)
  {
    long long v14 = (unsigned int *)HALS_IODevice::CopyStreamByIndex(v13, *((unsigned char *)v34 + 24), *((_DWORD *)v30 + 6));
    pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  }
  else
  {
    long long v14 = 0;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1935894637)
  {
    if (mSelector == 1885762595)
    {
      if (v14) {
        goto LABEL_22;
      }
      uint64_t v18 = v24;
      v24[0] = MEMORY[0x1E4F143A8];
      v24[1] = 0x40000000;
      v24[2] = ___ZNK15HALS_MetaStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_5;
      v24[3] = &unk_1E6233720;
      v24[4] = &v43;
      v24[5] = this;
      uint64_t v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(void *)this + 56))(this);
    }
    else
    {
      if (mSelector != 1885762657)
      {
LABEL_21:
        if (!v14) {
          goto LABEL_9;
        }
LABEL_22:
        uint64_t PropertyDataSize = (*(uint64_t (**)(unsigned int *, void, AudioObjectPropertyAddress *, uint64_t, const void *, HALS_Client *))(*(void *)v14 + 104))(v14, v14[4], a3, a4, a5, a6);
        goto LABEL_23;
      }
      if (v14) {
        goto LABEL_22;
      }
      uint64_t v18 = v25;
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 0x40000000;
      v25[2] = ___ZNK15HALS_MetaStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4;
      v25[3] = &unk_1E62336F8;
      v25[4] = &v43;
      v25[5] = this;
      uint64_t v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(void *)this + 56))(this);
    }
  }
  else
  {
    switch(mSelector)
    {
      case 0x73666D61u:
        if (v14) {
          goto LABEL_22;
        }
        uint64_t v18 = v27;
        v27[0] = MEMORY[0x1E4F143A8];
        v27[1] = 0x40000000;
        v27[2] = ___ZNK15HALS_MetaStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2;
        v27[3] = &unk_1E62336A8;
        v27[4] = &v43;
        void v27[5] = this;
        uint64_t v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(void *)this + 56))(this);
        break;
      case 0x73666D23u:
        if (v14) {
          goto LABEL_22;
        }
        uint64_t v18 = v26;
        v26[0] = MEMORY[0x1E4F143A8];
        v26[1] = 0x40000000;
        v26[2] = ___ZNK15HALS_MetaStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3;
        v26[3] = &unk_1E62336D0;
        v26[4] = &v43;
        v26[5] = this;
        uint64_t v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(void *)this + 56))(this);
        break;
      case 0x7363686Eu:
LABEL_9:
        uint64_t PropertyDataSize = HALS_Stream::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
LABEL_23:
        uint64_t v20 = PropertyDataSize;
        *((_DWORD *)v44 + 6) = PropertyDataSize;
        goto LABEL_24;
      default:
        goto LABEL_21;
    }
  }
  HALB_CommandGate::ExecuteCommand(v19, (uint64_t)v18);
  uint64_t v20 = *((unsigned int *)v44 + 6);
LABEL_24:
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v14, v17);
  _Block_object_dispose(&v29, 8);
  _Block_object_dispose(&v33, 8);
  _Block_object_dispose(&v37, 8);
  HALS_ObjectMap::ReleaseObject(v42, v21);
  _Block_object_dispose(&v43, 8);
  return v20;
}

void sub_1BAD643D4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 240), 8);
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(v1 - 136), v3);
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void ___ZNK15HALS_MetaStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke(void *a1, HALS_Object *a2)
{
  uint64_t v3 = a1[7];
  HALS_ObjectMap::RetainObject(*(HALS_ObjectMap **)(v3 + 144), a2);
  uint64_t v4 = *(void *)(a1[4] + 8);
  uint64_t v5 = *(HALS_ObjectMap **)(v4 + 40);
  *(void *)(v4 + 40) = *(void *)(v3 + 144);
  HALS_ObjectMap::ReleaseObject(v5, v6);
  *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = *(_DWORD *)(v3 + 152);
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = *(unsigned char *)(v3 + 52);
}

uint64_t ___ZNK15HALS_MetaStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(void *)(result + 40) + 96)
                                                                   - *(_DWORD *)(*(void *)(result + 40) + 88)) & 0xFFFFFFF8;
  return result;
}

uint64_t ___ZNK15HALS_MetaStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = -1840700264
                                                                  * ((*(void *)(*(void *)(result + 40) + 96)
                                                                    - *(void *)(*(void *)(result + 40) + 88)) >> 3);
  return result;
}

uint64_t ___ZNK15HALS_MetaStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(void *)(result + 40) + 120)
                                                                   - *(_DWORD *)(*(void *)(result + 40) + 112)) & 0xFFFFFFF8;
  return result;
}

uint64_t ___ZNK15HALS_MetaStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_5(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(void *)(result + 40) + 120)
                                                                   - *(_DWORD *)(*(void *)(result + 40) + 112)) & 0xFFFFFFF8;
  return result;
}

uint64_t HALS_MetaStream::IsPropertySettable(HALS_MetaStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  if (((*(uint64_t (**)(HALS_MetaStream *))(*(void *)this + 88))(this) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  if (a3->mSelector == 1935894638)
  {
    return HALS_Stream::IsPropertySettable((uint64_t)this, a2, (int *)a3);
  }
  else
  {
    uint64_t v27 = 0;
    int v28 = &v27;
    uint64_t v29 = 0x3002000000;
    BOOL v30 = __Block_byref_object_copy__8645;
    uint64_t v31 = __Block_byref_object_dispose__8646;
    int v32 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = &v23;
    uint64_t v25 = 0x2000000000;
    char v26 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = &v19;
    uint64_t v21 = 0x2000000000;
    int v22 = 0;
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 0x40000000;
    v18[2] = ___ZNK15HALS_MetaStream18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke;
    v18[3] = &unk_1E6233658;
    v18[4] = &v27;
    v18[5] = &v19;
    v18[6] = &v23;
    v18[7] = this;
    uint64_t v9 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v9, (uint64_t)v18);
    uint64_t v10 = (HALS_IODevice *)v28[5];
    if (v10)
    {
      uint64_t v11 = (unsigned int *)HALS_IODevice::CopyStreamByIndex(v10, *((unsigned char *)v24 + 24), *((_DWORD *)v20 + 6));
      int v12 = (HALS_ObjectMap *)v11;
      if (v11) {
        uint64_t IsPropertySettable = (*(uint64_t (**)(unsigned int *, void, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)v11 + 96))(v11, v11[4], a3, a4);
      }
      else {
        uint64_t IsPropertySettable = HALS_Stream::IsPropertySettable((uint64_t)this, a2, (int *)a3);
      }
      uint64_t v15 = IsPropertySettable;
      HALS_ObjectMap::ReleaseObject(v12, v14);
    }
    else
    {
      uint64_t v15 = HALS_Stream::IsPropertySettable((uint64_t)this, a2, (int *)a3);
    }
    _Block_object_dispose(&v19, 8);
    _Block_object_dispose(&v23, 8);
    _Block_object_dispose(&v27, 8);
    HALS_ObjectMap::ReleaseObject(v32, v16);
    return v15;
  }
}

void sub_1BAD647D0(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  HALS_ObjectMap::ReleaseObject(v21, a2);
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v22 - 96), 8);
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(v22 - 56), v24);
  _Unwind_Resume(a1);
}

void ___ZNK15HALS_MetaStream18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke(void *a1, HALS_Object *a2)
{
  uint64_t v3 = a1[7];
  HALS_ObjectMap::RetainObject(*(HALS_ObjectMap **)(v3 + 144), a2);
  uint64_t v4 = *(void *)(a1[4] + 8);
  uint64_t v5 = *(HALS_ObjectMap **)(v4 + 40);
  *(void *)(v4 + 40) = *(void *)(v3 + 144);
  HALS_ObjectMap::ReleaseObject(v5, v6);
  *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = *(_DWORD *)(v3 + 152);
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = *(unsigned char *)(v3 + 52);
}

uint64_t HALS_MetaStream::HasProperty(HALS_MetaStream *this, unsigned int a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  if (!(*(unsigned int (**)(HALS_MetaStream *, const AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 176))(this, a3, a4))return 0; {
  if (a3->mSelector != 1935894638)
  }
  {
    uint64_t v26 = 0;
    uint64_t v27 = &v26;
    uint64_t v28 = 0x3002000000;
    uint64_t v29 = __Block_byref_object_copy__8645;
    BOOL v30 = __Block_byref_object_dispose__8646;
    uint64_t v31 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = &v22;
    uint64_t v24 = 0x2000000000;
    char v25 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = &v18;
    uint64_t v20 = 0x2000000000;
    int v21 = 0;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 0x40000000;
    _OWORD v17[2] = ___ZNK15HALS_MetaStream11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke;
    v17[3] = &unk_1E6233630;
    v17[4] = &v26;
    v17[5] = &v18;
    v17[6] = &v22;
    v17[7] = this;
    uint64_t v10 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaStream *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v10, (uint64_t)v17);
    uint64_t v11 = (HALS_IODevice *)v27[5];
    if (v11)
    {
      int v12 = (unsigned int *)HALS_IODevice::CopyStreamByIndex(v11, *((unsigned char *)v23 + 24), *((_DWORD *)v19 + 6));
      long long v13 = (HALS_ObjectMap *)v12;
      if (v12) {
        uint64_t HasProperty = (*(uint64_t (**)(unsigned int *, void, const AudioObjectPropertyAddress *, HALS_Client *))(*(void *)v12 + 88))(v12, v12[4], a3, a4);
      }
      else {
        uint64_t HasProperty = HALS_Stream::HasProperty(this, a2, a3, a4);
      }
      uint64_t v9 = HasProperty;
      HALS_ObjectMap::ReleaseObject(v13, v15);
    }
    else
    {
      uint64_t v9 = HALS_Stream::HasProperty(this, a2, a3, a4);
    }
    _Block_object_dispose(&v18, 8);
    _Block_object_dispose(&v22, 8);
    _Block_object_dispose(&v26, 8);
    HALS_ObjectMap::ReleaseObject(v31, v16);
    return v9;
  }

  return HALS_Stream::HasProperty(this, a2, a3, a4);
}

void sub_1BAD64B04(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  HALS_ObjectMap::ReleaseObject(v21, a2);
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose((const void *)(v22 - 96), 8);
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(v22 - 56), v24);
  _Unwind_Resume(a1);
}

void ___ZNK15HALS_MetaStream11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke(void *a1, HALS_Object *a2)
{
  uint64_t v3 = a1[7];
  HALS_ObjectMap::RetainObject(*(HALS_ObjectMap **)(v3 + 144), a2);
  uint64_t v4 = *(void *)(a1[4] + 8);
  uint64_t v5 = *(HALS_ObjectMap **)(v4 + 40);
  *(void *)(v4 + 40) = *(void *)(v3 + 144);
  HALS_ObjectMap::ReleaseObject(v5, v6);
  *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = *(_DWORD *)(v3 + 152);
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = *(unsigned char *)(v3 + 52);
}

void HALS_MetaStream::~HALS_MetaStream(AMCP::Utility::Dispatch_Queue **this)
{
  HALS_MetaStream::~HALS_MetaStream(this);

  JUMPOUT(0x1C1859840);
}

{
  HALS_Object *v2;
  HALS_ObjectMap *v3;
  unsigned __int8 v4;
  uint64_t vars8;

  *this = (AMCP::Utility::Dispatch_Queue *)&unk_1F1470758;
  HALS_MetaStream::RemoveRealStreamPropertyListener((HALS_MetaStream *)this);
  HALS_MetaStream::RemoveRealTapPropertyListener((HALS_MetaStream *)this);
  uint64_t v3 = this[18];
  if (v3) {
    HALS_ObjectMap::ReleaseObject_LongTerm(v3, v2);
  }
  if (g_static_start_options == 1)
  {
    do
    {
      AMCP::Utility::Dispatch_Queue::flush_all_work(this[21]);
      uint64_t v4 = atomic_load((unsigned __int8 *)this[21] + 33);
    }
    while ((v4 & 1) != 0);
  }
  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100](this + 21, 0);
  HALB_FormatList::~HALB_FormatList((HALB_FormatList *)(this + 10));

  HALS_Object::~HALS_Object((HALS_Object *)this);
}

void HALS_MetaStream::Activate(HALS_MetaStream *this)
{
  (*(void (**)(HALS_MetaStream *))(*(void *)this + 296))(this);

  HALS_Object::Activate(this, v2);
}

void HALS_MetaStream::HALS_MetaStream(HALS_MetaStream *this, HALS_MetaDevice *a2, char a3, HALS_Device *a4, HALS_Object *a5)
{
  int v5 = (int)a5;
  v10[40] = *MEMORY[0x1E4F143B8];
  HALS_Object::HALS_Object(this, 1634956402, 1634956402, (uint64_t)a2, a5);
  *(_DWORD *)(v9 + 48) = *((_DWORD *)a2 + 4);
  *(unsigned char *)(v9 + 52) = a3;
  *(_DWORD *)(v9 + 56) = 0;
  *(void *)uint64_t v9 = &unk_1F1470758;
  *(void *)(v9 + 64) = a2;
  *(unsigned char *)(v9 + 72) = 0;
  *(_DWORD *)(v9 + 76) = 0;
  *(void *)(v9 + 80) = &unk_1F1464420;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_DWORD *)(v9 + 136) = 0;
  *(void *)(v9 + 144) = a4;
  *(_DWORD *)(v9 + 156) = 0;
  *(_DWORD *)(v9 + 160) = 0;
  *(_DWORD *)(v9 + 152) = v5;
  AMCP::Utility::Dispatch_Queue::create_concurrent_with_workloop((AMCP::Utility::Dispatch_Queue *)v10, "HALS_MetaStream Concurrent Queue");
  operator new();
}

void sub_1BAD64E54(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100](v4, 0);
  HALB_FormatList::~HALB_FormatList(v2);
  HALS_Object::~HALS_Object(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::io_proc_cycle_info_to_audio_io_cycle_info(uint64_t a1, uint64_t a2)
{
  AMCP::Graph::dal_time_to_audio_time_stamp((AMCP::DAL::DAL_Time *)a1, a2 + 64);
  AMCP::Graph::dal_time_to_audio_time_stamp((AMCP::DAL::DAL_Time *)(a1 + 40), a2 + 128);
  AMCP::Graph::dal_time_to_audio_time_stamp((AMCP::DAL::DAL_Time *)(a1 + 80), a2);
  uint64_t result = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)(a1 + 120));
  *(void *)(a2 + 192) = result;
  return result;
}

void AMCP::Graph::dal_time_to_audio_time_stamp(AMCP::DAL::DAL_Time *a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)a1 + 3);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a1 + 4);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v8 = **(NSObject ***)buf;
    if (*(void *)v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v26);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)long long buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)uint64_t v26 = 2080;
      *(void *)&v26[2] = "Client_IO_Handler.cpp";
      __int16 v27 = 1024;
      int v28 = 25;
      __int16 v29 = 2080;
      *(void *)BOOL v30 = "not (in.get_clock() != nullptr)";
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Bad time passed to dal_time_to_audio_time_stamp", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Bad time passed to dal_time_to_audio_time_stamp", (uint64_t)&v16);
    std::logic_error::logic_error(&v17, &v16);
    v17.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v18, &v17);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v23 = -1;
    v18.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v19 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v18);
    *(void *)&v30[6] = "void AMCP::Graph::dal_time_to_audio_time_stamp(const AMCP::DAL::DAL_Time &, CA::TimeStamp &)";
    uint64_t v31 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Client_IO_Handler.cpp";
    int v32 = 25;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v11);
    long long v14 = v11;
    uint64_t v15 = v12;
    long long v11 = 0uLL;
    uint64_t v12 = 0;
    long long v13 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(double *)a2 = (double)(uint64_t)floor(AMCP::DAL::DAL_Time::get_sample_time(a1));
  *(void *)(a2 + 8) = AMCP::DAL::DAL_Time::get_host_time(a1);
  uint64_t v6 = *((void *)a1 + 3);
  unint64_t v7 = (std::__shared_weak_count *)*((void *)a1 + 4);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(double *)(a2 + 16) = (*(double (**)(uint64_t))(*(void *)v6 + 160))(v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *(_DWORD *)(a2 + 56) = 7;
}

void sub_1BAD651F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Call_Audio_IO_Proc::reconfigure(uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  ++*(void *)(a1 + 8);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator=[abi:ne180100]((void *)(a1 + 16));
  mach_port_t v10 = (void *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 24);
  if (v11)
  {
    if (v11 == a2)
    {
      *(void *)(a1 + 40) = a1 + 16;
      (*(void (**)(void, uint64_t))(*(void *)*v10 + 24))(*v10, a1 + 16);
      goto LABEL_7;
    }
    *(void *)(a1 + 40) = v11;
  }
  else
  {
    mach_port_t v10 = (void *)(a1 + 40);
  }
  void *v10 = 0;
LABEL_7:
  char v12 = 0;
  uint64_t v13 = 0;
  *(double *)(a1 + 192) = a3;
  *(_DWORD *)(a1 + 200) = a5;
  uint64_t v14 = a1 + 48;
  *(unsigned char *)(a1 + 204) = BYTE4(a5);
  lock = (os_unfair_lock_s *)a1;
  uint64_t v97 = a1 + 48;
  uint64_t v98 = a1 + 144;
  uint64_t v99 = a1 + 96;
  do
  {
    char v101 = v12;
    uint64_t v15 = (uint64_t *)(a6 + 24 * v13);
    uint64_t v16 = v15[1];
    uint64_t v102 = *v15;
    uint64_t v103 = v16;
    std::logic_error v17 = (void *)(v14 + 24 * v13);
    uint64_t v19 = v17 + 1;
    std::logic_error v18 = (char *)v17[1];
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v16 - *v15) >> 4);
    uint64_t v21 = (char *)*v17;
    unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v18[-*v17] >> 4);
    unint64_t v23 = v20 - v22;
    unint64_t v104 = v20;
    if (v20 <= v22)
    {
      if (v20 < v22) {
        *uint64_t v19 = &v21[0x5555555555555570 * ((v16 - v102) >> 4)];
      }
    }
    else
    {
      uint64_t v24 = v14 + 24 * v13;
      uint64_t v27 = *(void *)(v24 + 16);
      uint64_t v26 = (void *)(v24 + 16);
      uint64_t v25 = v27;
      if (0xCCCCCCCCCCCCCCCDLL * ((v27 - (uint64_t)v18) >> 4) >= v23)
      {
        bzero(v18, 80 * ((80 * v23 - 80) / 0x50) + 80);
        unint64_t v20 = v104;
        *uint64_t v19 = &v18[80 * ((80 * v23 - 80) / 0x50) + 80];
      }
      else
      {
        if (v20 > 0x333333333333333) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        BOOL v95 = v26;
        unint64_t v28 = 0xCCCCCCCCCCCCCCCDLL * ((v25 - (uint64_t)v21) >> 4);
        uint64_t v29 = 2 * v28;
        if (2 * v28 <= v20) {
          uint64_t v29 = v20;
        }
        if (v28 >= 0x199999999999999) {
          unint64_t v30 = 0x333333333333333;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30 > 0x333333333333333) {
LABEL_93:
        }
          std::__throw_bad_array_new_length[abi:ne180100]();
        int v93 = (char *)operator new(80 * v30);
        size_t v92 = 80 * ((80 * v23 - 80) / 0x50) + 80;
        bzero(&v93[80 * v22], v92);
        uint64_t v31 = &v93[80 * v22];
        if (v18 == v21)
        {
          unint64_t v20 = v104;
          int v32 = v95;
        }
        else
        {
          int v32 = v95;
          do
          {
            *((_OWORD *)v31 - 5) = *((_OWORD *)v18 - 5);
            long long v33 = *((_OWORD *)v18 - 4);
            long long v34 = *((_OWORD *)v18 - 3);
            long long v35 = *((_OWORD *)v18 - 1);
            *((_OWORD *)v31 - 2) = *((_OWORD *)v18 - 2);
            *((_OWORD *)v31 - 1) = v35;
            *((_OWORD *)v31 - 4) = v33;
            *((_OWORD *)v31 - 3) = v34;
            v31 -= 80;
            v18 -= 80;
          }
          while (v18 != v21);
          std::logic_error v18 = (char *)*v17;
          unint64_t v20 = v104;
        }
        *std::logic_error v17 = v31;
        *uint64_t v19 = &v93[80 * v22 + v92];
        *int v32 = &v93[80 * v30];
        if (v18)
        {
          operator delete(v18);
          unint64_t v20 = v104;
        }
      }
    }
    char v36 = (char **)(v99 + 24 * v13);
    uint64_t v37 = (void **)(v36 + 1);
    int v38 = v36[1];
    uint64_t v39 = (uint64_t *)*v36;
    unint64_t v40 = 0xCCCCCCCCCCCCCCCDLL * ((v38 - *v36) >> 3);
    BOOL v41 = v20 >= v40;
    unint64_t v42 = v20 - v40;
    if (v20 <= v40)
    {
      uint64_t v58 = v98;
      if (v41) {
        goto LABEL_51;
      }
      std::vector<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>>::__base_destruct_at_end[abi:ne180100](v36, (uint64_t)&v39[5 * v20]);
      goto LABEL_47;
    }
    uint64_t v43 = v99 + 24 * v13;
    uint64_t v46 = *(void *)(v43 + 16);
    uint64_t v45 = (char **)(v43 + 16);
    uint64_t v44 = v46;
    if (0xCCCCCCCCCCCCCCCDLL * ((v46 - (uint64_t)v38) >> 3) >= v42)
    {
      uint64_t v59 = &v38[40 * v42];
      uint64_t v58 = v98;
      do
      {
        *(void *)int v38 = 0;
        *((void *)v38 + 4) = 0;
        v38 += 40;
      }
      while (v38 != v59);
      *uint64_t v37 = v59;
    }
    else
    {
      if (v20 > 0x666666666666666) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      int v96 = v45;
      unint64_t v47 = 0xCCCCCCCCCCCCCCCDLL * ((v44 - (uint64_t)v39) >> 3);
      uint64_t v48 = 2 * v47;
      if (2 * v47 <= v20) {
        uint64_t v48 = v20;
      }
      if (v47 >= 0x333333333333333) {
        unint64_t v49 = 0x666666666666666;
      }
      else {
        unint64_t v49 = v48;
      }
      if (v49 > 0x666666666666666) {
        goto LABEL_93;
      }
      unint64_t v94 = v49;
      long long v50 = (char *)operator new(40 * v49);
      int v51 = &v50[40 * v40];
      int v52 = &v50[40 * v104];
      int v53 = v51;
      do
      {
        *(void *)int v53 = 0;
        *((void *)v53 + 4) = 0;
        v53 += 40;
      }
      while (v53 != v52);
      while (v38 != (char *)v39)
      {
        uint64_t v54 = *((void *)v38 - 5);
        v38 -= 40;
        *(void *)int v38 = 0;
        *((void *)v51 - 5) = v54;
        v51 -= 40;
        std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100]((uint64_t)(v51 + 8), (uint64_t)(v38 + 8));
      }
      long long v55 = &v50[40 * v94];
      long long v56 = (uint64_t *)*v36;
      *char v36 = v51;
      int v57 = (uint64_t *)*v37;
      *uint64_t v37 = v52;
      for (*int v96 = v55; v57 != v56; v57 -= 5)
      {
        std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100](v57 - 5, 0);
        std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](v57 - 4);
      }
      uint64_t v58 = v98;
      unint64_t v20 = v104;
      if (v56)
      {
        operator delete(v56);
LABEL_47:
        unint64_t v20 = v104;
      }
    }
LABEL_51:
    uint64_t v60 = (char **)(v58 + 24 * v13);
    int v62 = v60 + 1;
    uint64_t v61 = v60[1];
    unsigned int v63 = *v60;
    unint64_t v64 = (v61 - *v60) >> 3;
    if (v20 <= v64)
    {
      BOOL v41 = v20 >= v64;
      uint64_t v80 = v103;
      if (v41) {
        goto LABEL_80;
      }
      BOOL v83 = &v63[8 * v20];
      while (v61 != v83)
      {
        uint64_t v85 = *((void *)v61 - 1);
        v61 -= 8;
        uint64_t v84 = v85;
        *(void *)uint64_t v61 = 0;
        if (v85) {
          (*(void (**)(uint64_t))(*(void *)v84 + 8))(v84);
        }
      }
      _DWORD *v62 = v83;
      goto LABEL_79;
    }
    uint64_t v65 = v58;
    unint64_t v66 = v20 - v64;
    uint64_t v67 = v65 + 24 * v13;
    uint64_t v70 = *(void *)(v67 + 16);
    long long v69 = (char **)(v67 + 16);
    uint64_t v68 = v70;
    if (v20 - v64 <= (v70 - (uint64_t)v61) >> 3)
    {
      bzero(v60[1], 8 * v66);
      uint64_t v80 = v103;
      unint64_t v20 = v104;
      _DWORD *v62 = &v61[8 * v66];
      goto LABEL_80;
    }
    if (v20 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v71 = v68 - (void)v63;
    uint64_t v72 = v71 >> 2;
    if (v71 >> 2 <= v20) {
      uint64_t v72 = v20;
    }
    if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v73 = v72;
    }
    if (v73 >> 61) {
      goto LABEL_93;
    }
    uint64_t v74 = (char *)operator new(8 * v73);
    int v75 = &v74[8 * v64];
    uint64_t v76 = &v74[8 * v73];
    bzero(v75, 8 * v66);
    int v77 = &v75[8 * v66];
    if (v61 == v63)
    {
      *uint64_t v60 = v75;
      _DWORD *v62 = v77;
      HALB_Mutex *v69 = v76;
    }
    else
    {
      do
      {
        uint64_t v78 = *((void *)v61 - 1);
        v61 -= 8;
        *(void *)uint64_t v61 = 0;
        *((void *)v75 - 1) = v78;
        v75 -= 8;
      }
      while (v61 != v63);
      long long v79 = *v60;
      uint64_t v61 = *v62;
      *uint64_t v60 = v75;
      _DWORD *v62 = v77;
      HALB_Mutex *v69 = v76;
      if (v61 != v79)
      {
        uint64_t v80 = v103;
        do
        {
          uint64_t v82 = *((void *)v61 - 1);
          v61 -= 8;
          uint64_t v81 = v82;
          *(void *)uint64_t v61 = 0;
          if (v82) {
            (*(void (**)(uint64_t))(*(void *)v81 + 8))(v81);
          }
        }
        while (v61 != v79);
        uint64_t v61 = v79;
        goto LABEL_77;
      }
    }
    uint64_t v80 = v103;
LABEL_77:
    unint64_t v20 = v104;
    if (!v61) {
      goto LABEL_80;
    }
    operator delete(v61);
LABEL_79:
    unint64_t v20 = v104;
LABEL_80:
    if (v80 != v102)
    {
      uint64_t v86 = 0;
      uint64_t v87 = 0;
      if (v20 <= 1) {
        uint64_t v88 = 1;
      }
      else {
        uint64_t v88 = v20;
      }
      do
      {
        int v89 = *v60;
        if (*(_DWORD *)(*v15 + v86 + 40) == 1) {
          operator new();
        }
        uint64_t v90 = *(void *)&v89[8 * v87];
        *(void *)&v89[8 * v87] = 0;
        if (v90) {
          (*(void (**)(uint64_t))(*(void *)v90 + 8))(v90);
        }
        ++v87;
        v86 += 48;
      }
      while (v88 != v87);
    }
    char v12 = 1;
    uint64_t v13 = 1;
    uint64_t v14 = v97;
  }
  while ((v101 & 1) == 0);

  os_unfair_lock_unlock(lock);
}

void sub_1BAD65A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_unfair_lock_t lock, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
}

void std::vector<std::unique_ptr<AMCP::DAL::Fixed_Buffer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>>::__base_destruct_at_end[abi:ne180100](v2, (uint64_t)*v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>>::__base_destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = result[1]; i != a2; i -= 40)
  {
    std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100]((uint64_t *)(i - 40), 0);
    uint64_t result = std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100]((void *)(i - 32));
  }
  v3[1] = a2;
  return result;
}

void AMCP::Graph::Call_Audio_IO_Proc::update_proc(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator=((void *)(a1 + 16), a2);
  ++*(void *)(a1 + 8);

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1BAD65C48(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AMCP::Graph::align_buffer(AMCP::Graph *this, const AMCP::DAL::DAL_Time_Range *a2, AMCP::DAL::Fixed_Buffer *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)a2 + 11);
  if (v5) {
    double v6 = (*(double (**)(uint64_t))(*(void *)v5 + 48))(v5);
  }
  else {
    double v6 = 0.0;
  }
  double sample_time = AMCP::DAL::DAL_Time::get_sample_time(this);
  if (round(v6) < round(AMCP::DAL::DAL_Time::get_sample_time((AMCP::Graph *)((char *)this + 40)) - sample_time))
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v9 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)long long buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)uint64_t v27 = 2080;
      *(void *)&v27[2] = "Client_IO_Handler.cpp";
      __int16 v28 = 1024;
      int v29 = 141;
      __int16 v30 = 2080;
      *(void *)uint64_t v31 = "not (buffer->get_capacity() >= target_range.get_range().length())";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v17);
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unint64_t v20 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&v31[6] = "void AMCP::Graph::align_buffer(const DAL::DAL_Time_Range &, DAL::Fixed_Buffer *)";
    int v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Client_IO_Handler.cpp";
    int v33 = 141;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    uint64_t v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }

  AMCP::DAL::Fixed_Buffer::set_range(a2, this);
}

void sub_1BAD65F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 128);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 129));
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *AMCP::Graph::dal_segment_to_proc_stream(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  double v6 = *(const AMCP::DAL::DAL_Time_Range **)(a1 + 80);
  if (v6)
  {
    AMCP::DAL::DAL_Timed_Segment::translate_range(v20, v6, a1);
    if ((double *)((char *)v20[1] - (char *)v20[0]) != (double *)96)
    {
      AMCP::Log::Scope_Registry::get(v9);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v14 = **(NSObject ***)buf;
      if (*(void *)v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v40);
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        long long v15 = pthread_self();
        mach_port_t v16 = pthread_mach_thread_np(v15);
        *(_DWORD *)long long buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v16;
        *(_WORD *)unint64_t v40 = 2080;
        *(void *)&v40[2] = "Client_IO_Handler.cpp";
        __int16 v41 = 1024;
        int v42 = 41;
        __int16 v43 = 2080;
        *(void *)uint64_t v44 = "not (ranges.size() == 1)";
        _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v21);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v23);
      std::logic_error::logic_error((std::logic_error *)&v25, &v23);
      v25.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
      std::logic_error::logic_error(&v27, (const std::logic_error *)&v25);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      int v32 = -1;
      v27.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      uint64_t v28 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v27);
      *(void *)&v44[6] = "void AMCP::Graph::dal_segment_to_proc_stream(const AMCP::DAL::DAL_Timed_Segment &, AMCP::Proc"
                           "_Stream &, BufferListPtr &, AMCP::DAL::DAL_Time_Delta &)";
      uint64_t v45 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Client_IO_Handler.cpp";
      int v46 = 41;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v34);
      long long v37 = v34;
      char v36 = &unk_1F148AA90;
      uint64_t v38 = v35;
      long long v34 = 0uLL;
      uint64_t v35 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)buf, (uint64_t)(v20[0] + 2), a4);
    AMCP::Graph::dal_time_to_audio_time_stamp((AMCP::DAL::DAL_Time *)buf, a2);
    if (*(void *)&v44[6]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v44[6]);
    }
    *(_DWORD *)(a2 + 64) = vcvtmd_s64_f64(v20[0][1] - *v20[0]);
    *(unsigned char *)(a2 + 68) = (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 48))(*(void *)(a1 + 80));
    AMCP::DAL::DAL_Timed_Segment::translate_range((double **)&v34, *(const AMCP::DAL::DAL_Time_Range **)(a1 + 80), a1);
    if (*((void *)&v34 + 1) - (void)v34 != 96)
    {
      AMCP::Log::Scope_Registry::get(v10);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      std::string v17 = **(NSObject ***)buf;
      if (*(void *)v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v40);
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        std::logic_error v18 = pthread_self();
        mach_port_t v19 = pthread_mach_thread_np(v18);
        *(_DWORD *)long long buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v19;
        *(_WORD *)unint64_t v40 = 2080;
        *(void *)&v40[2] = "DAL_Timed_Segment.cpp";
        __int16 v41 = 1024;
        int v42 = 40;
        __int16 v43 = 2080;
        *(void *)uint64_t v44 = "not (ranges.size() == 1)";
        _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We don't allow AudioBufferLists from multi range buffers", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v33);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"We don't allow AudioBufferLists from multi range buffers", (uint64_t)&v25);
      std::logic_error::logic_error(&v26, &v25);
      v26.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v27, &v26);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      int v32 = -1;
      v27.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      uint64_t v28 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v27);
      *(void *)&v44[6] = "BufferListPtr AMCP::DAL::DAL_Timed_Segment::get_audio_buffer_list() const";
      uint64_t v45 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
      int v46 = 40;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
      *(_OWORD *)&v23.__r_.__value_.__r.__words[1] = v21;
      uint64_t v24 = v22;
      long long v21 = 0uLL;
      uint64_t v22 = 0;
      v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    AMCP::DAL::DAL_Timed_Segment::get_audio_buffer_lists((AMCP::DAL::DAL_Timed_Segment *)buf, a1);
    mach_port_t v11 = *(NSObject ***)buf;
    long long v12 = **(void ***)buf;
    **(void **)long long buf = 0;
    char v36 = v12;
    std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100]((uint64_t)&v37, (uint64_t)(v11 + 1));
    v27.__vftable = (std::logic_error_vtbl *)buf;
    std::vector<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>,caulk::rt_allocator<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v27);
    *(void *)long long buf = &v34;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)buf);
    std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::operator=[abi:ne180100](a3, (uint64_t *)&v36);
    std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100]((uint64_t *)&v36, 0);
    std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](&v37);
    *(void *)(a2 + 72) = *a3;
    *(void *)long long buf = v20;
    return std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)buf);
  }
  else
  {
    *(void *)(a2 + 72) = 0;
    *(void *)long long buf = 0;
    *(void *)&v44[6] = 0;
    std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::operator=[abi:ne180100](a3, (uint64_t *)buf);
    std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100]((uint64_t *)buf, 0);
    return (caulk::rt_safe_memory_resource *)std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](v40);
  }
}

void sub_1BAD665C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40)
{
  *(void *)(v40 - 128) = &a39;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)(v40 - 128));
  *(void *)(v40 - 128) = &a10;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)(v40 - 128));
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v12 = a2;
  uint64_t v11 = a4;
  uint64_t v9 = a6;
  uint64_t v10 = a5;
  uint64_t v8 = a7;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)a1 + 48))(a1, &v12, a3, &v11, &v10, &v9, &v8);
}

void AMCP::Graph::create_cycle_info(AMCP::Graph *this, const AMCP::Graph::Manifest_Counter *a2, const AMCP::Graph::Manifest_Execution_Context *a3)
{
  *(_DWORD *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  uint64_t v7 = *((void *)a2 + 3);
  double v6 = (std::__shared_weak_count *)*((void *)a2 + 4);
  v29[0] = v7;
  v29[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::Graph::Manifest_Counter::calculate_buffer_start((AMCP::DAL::DAL_Time *)&v25, (uint64_t)a2, v29, 1, a3, *((float *)a3 + 10));
  AMCP::Graph::Manifest_Counter::calculate_buffer_start((AMCP::DAL::DAL_Time *)&v21, (uint64_t)a2, v29, 0, a3, *((float *)a3 + 10));
  AMCP::Graph::Manifest_Counter::get_current_cycle_anchor_time((uint64_t)&v17, (uint64_t)a2);
  *(_DWORD *)this = v25;
  *(_OWORD *)((char *)this + 8) = v26;
  uint64_t v9 = v27;
  uint64_t v8 = v28;
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)this + 3) = v9;
  *((void *)this + 4) = v8;
  uint64_t v11 = v23;
  uint64_t v10 = v24;
  *((_DWORD *)this + 10) = v21;
  *((_OWORD *)this + 3) = v22;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)this + 8) = v11;
  *((void *)this + 9) = v10;
  uint64_t v12 = v19;
  uint64_t v13 = v20;
  *((_DWORD *)this + 20) = v17;
  *(_OWORD *)((char *)this + 88) = v18;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)this + 13) = v12;
  *((void *)this + 14) = v13;
  boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)&v14, (uint64_t)&v17, (uint64_t)a3);
  *(_OWORD *)((char *)this + 120) = v14;
  *((void *)this + 17) = v15;
  *((_OWORD *)this + 9) = v16;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)this + 20) = v7;
  *((void *)this + 21) = v6;
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 10);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1BAD66950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  uint64_t v28 = *(std::__shared_weak_count **)(v26 - 72);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  AMCP::Graph::IO_Proc_Cycle_Info::~IO_Proc_Cycle_Info(v24);
  _Unwind_Resume(a1);
}

void AMCP::Graph::IO_Proc_Cycle_Info::~IO_Proc_Cycle_Info(AMCP::Graph::IO_Proc_Cycle_Info *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  double v6 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void CASettingsStorage::CASettingsStorage(CASettingsStorage *this, const char *a2, char a3, CFPropertyListFormat a4)
{
  char v4 = a4;
  *(void *)this = 0;
  *((_WORD *)this + 4) = 436;
  *((void *)this + 2) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  *((void *)this + 3) = 100;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((unsigned char *)this + 48) = 1;
  *((unsigned char *)this + 49) = a3;
  *((unsigned char *)this + 50) = v4;
  strlen(a2);
  operator new[]();
}

void CASettingsStorage::RefreshSettings(CASettingsStorage *this)
{
  if (*((unsigned char *)this + 49)
    && *((void *)this + 2)
    && (*((void *)this + 4) || *((void *)this + 5))
    && !*((unsigned char *)this + 48))
  {
    return;
  }
  if (stat(*(const char **)this, &v16)) {
    goto LABEL_7;
  }
  if (*((void *)this + 2))
  {
    __darwin_time_t v3 = *((void *)this + 4);
    if (v3 >= v16.st_mtimespec.tv_sec
      && (v3 != v16.st_mtimespec.tv_sec || *((void *)this + 5) >= v16.st_mtimespec.tv_nsec)
      && !*((unsigned char *)this + 48))
    {
      BOOL v2 = 0;
      BOOL v7 = 1;
      goto LABEL_21;
    }
  }
  char v4 = fopen(*(const char **)this, "r");
  if (v4)
  {
    uint64_t v5 = v4;
    int v6 = fileno(v4);
    if (flock(v6, 2) || (fseek(v5, 0, 2), size_t v8 = MEMORY[0x1C1859E30](v5), fseek(v5, 0, 0), !v8))
    {
      BOOL v7 = 0;
      BOOL v2 = 1;
    }
    else
    {
      std::vector<unsigned char>::vector(__ptr, v8);
      fread(__ptr[0], v8, 1uLL, v5);
      int v9 = fileno(v5);
      flock(v9, 8);
      char v14 = 1;
      CFDataRef v10 = CFDataCreate(0, (const UInt8 *)__ptr[0], v8);
      CFDataRef data = v10;
      uint64_t v11 = (const void *)*((void *)this + 2);
      if (v11)
      {
        CFRelease(v11);
        *((void *)this + 2) = 0;
        CFDataRef v10 = data;
      }
      CFPropertyListRef v12 = CFPropertyListCreateWithData(0, v10, 2uLL, 0, 0);
      *((void *)this + 2) = v12;
      BOOL v7 = v12 != 0;
      if (v12) {
        *((_OWORD *)this + 2) = v16.st_mtimespec;
      }
      BOOL v2 = v12 == 0;
      CACFData::~CACFData((CACFData *)&data);
      if (__ptr[0])
      {
        __ptr[1] = __ptr[0];
        operator delete(__ptr[0]);
      }
    }
    fclose(v5);
    *((unsigned char *)this + 48) = 0;
    if (v2) {
      goto LABEL_8;
    }
LABEL_21:
    if (v7) {
      return;
    }
    goto LABEL_8;
  }
LABEL_7:
  BOOL v2 = 1;
LABEL_8:
  if (!*((void *)this + 2)) {
    *((void *)this + 2) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  }
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  if (v2) {
    CASettingsStorage::SaveSettings(this);
  }
}

void sub_1BAD66CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CACFData::~CACFData(CACFData *this)
{
  if (*((unsigned char *)this + 8))
  {
    BOOL v2 = *(const void **)this;
    if (*(void *)this) {
      CFRelease(v2);
    }
  }
}

void CASettingsStorage::SaveSettings(CASettingsStorage *this)
{
  if (!*((unsigned char *)this + 50))
  {
    BOOL v2 = (const void *)*((void *)this + 2);
    if (v2)
    {
      CFDataRef Data = CFPropertyListCreateData(0, v2, *((CFPropertyListFormat *)this + 3), 0, 0);
      char v12 = 1;
      __darwin_time_t v3 = fopen(*(const char **)this, "w+");
      char v4 = v3;
      if (v3)
      {
        int v5 = fileno(v3);
        if (flock(v5, 2))
        {
          fclose(v4);
        }
        else
        {
          if (*((_WORD *)this + 4))
          {
            int v6 = fileno(v4);
            fchmod(v6, *((_WORD *)this + 4));
          }
          BytePtr = CFDataGetBytePtr(Data);
          unsigned int Length = CFDataGetLength(Data);
          fwrite(BytePtr, Length, 1uLL, v4);
          fflush(v4);
          int v9 = fileno(v4);
          flock(v9, 8);
          fclose(v4);
          stat(*(const char **)this, &v10);
          *((_OWORD *)this + 2) = v10.st_mtimespec;
        }
      }
      CACFData::~CACFData((CACFData *)&Data);
    }
  }
}

void sub_1BAD66E60(_Unwind_Exception *a1)
{
  CACFData::~CACFData((CACFData *)(v1 - 48));
  _Unwind_Resume(a1);
}

uint64_t CASettingsStorage::CopyCFTypeValue(CFDictionaryRef *this, const __CFString *a2, const void **a3, const void *a4)
{
  CASettingsStorage::RefreshSettings((CASettingsStorage *)this);
  uint64_t result = CFDictionaryGetValueIfPresent(this[2], a2, a3);
  if (result)
  {
    uint64_t result = (uint64_t)*a3;
    if (*a3)
    {
      return (uint64_t)CFRetain((CFTypeRef)result);
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void CASettingsStorage::SetCFTypeValue(CFMutableDictionaryRef *this, const __CFString *a2, const void *a3)
{
  CASettingsStorage::RefreshSettings((CASettingsStorage *)this);
  CFDictionarySetValue(this[2], a2, a3);

  CASettingsStorage::SaveSettings((CASettingsStorage *)this);
}

void CASettingsStorage::RemoveAllValues(CFMutableDictionaryRef *this)
{
  CASettingsStorage::RefreshSettings((CASettingsStorage *)this);
  CFDictionaryRemoveAllValues(this[2]);

  CASettingsStorage::SaveSettings((CASettingsStorage *)this);
}

void std::default_delete<AMCP::Graph::Manifest_Counter>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__shared_ptr_pointer<AMCP::Graph::Timebase_Set  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN4AMCP5Graph12Timebase_SetEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMCP::Graph::Timebase_Set  *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<AMCP::Graph::Timebase_Set>::operator()[abi:ne180100](*(void *)(a1 + 24));
}

void std::__shared_ptr_pointer<AMCP::Graph::Timebase_Set  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__emplace_unique_key_args<std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  char v14 = operator new(0x20uLL);
  *char v14 = 0;
  v14[1] = v8;
  *((_OWORD *)v14 + 1) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  long long v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *char v14 = *v22;
LABEL_38:
    void *v22 = v14;
    goto LABEL_39;
  }
  *char v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    unint64_t v23 = *(void *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    long long v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_1BAD6728C(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<AMCP::Graph::Timebase>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest_Inventory::set_nominal_buffer_size(void *a1, int a2, uint64_t a3)
{
  if (a1)
  {
    int v5 = a1;
    do
    {
      uint64_t v6 = v5[12];
      uint64_t v7 = *(void *)(v6 + 304);
      if (v7)
      {
        if (*(char *)(v6 + 31) < 0) {
          std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(v6 + 8), *(void *)(v6 + 16));
        }
        else {
          v9[0] = *(std::string *)(v6 + 8);
        }
        int v10 = a2;
        std::string __p = v9[0];
        memset(v9, 0, 24);
        int v8 = *(_DWORD *)(v6 + 40);
        uint64_t v12 = *(void *)(v6 + 32);
        int v13 = v8;
        (*(void (**)(uint64_t, int *, uint64_t))(*(void *)v7 + 104))(v7, &v10, a3);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      int v5 = (void *)*v5;
    }
    while (v5);
  }
}

void sub_1BAD673A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Manifest_Inventory::request_shared_buffer_for_connection(void *a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5, int a6, void *a7, int a8, int a9, int a10, int a11)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  if (*a7)
  {
    double v18 = *(double *)a5;
    if (v18 != (*(double (**)(void))(*(void *)*a7 + 152))(*a7))
    {
      AMCP::Log::Scope_Registry::get(v19);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v69, "com.apple.coreaudio", "AMCP");
      uint64_t v44 = *(NSObject **)v69.__r_.__value_.__l.__data_;
      if (v69.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v69.__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        uint64_t v45 = pthread_self();
        mach_port_t v46 = pthread_mach_thread_np(v45);
        LODWORD(v69.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(v69.__r_.__value_.__r.__words[0]) = v46;
        LOWORD(v69.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v69.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Inventory.cpp";
        WORD1(v69.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v69.__r_.__value_.__r.__words[2]) = 78;
        LOWORD(v70) = 2080;
        *(void *)((char *)&v70 + 2) = "not (clock == nullptr or format.mSampleRate == clock->get_sample_rate())";
        _os_log_error_impl(&dword_1BAA78000, v44, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Unexpected sample rate for connection", (uint8_t *)&v69, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v56);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Unexpected sample rate for connection", (uint64_t)v54);
      std::logic_error::logic_error((std::logic_error *)&v60, (const std::string *)v54);
      v60.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
      std::logic_error::logic_error((std::logic_error *)&v74, (const std::logic_error *)&v60);
      long long v76 = 0uLL;
      int v77 = 0;
      int v78 = -1;
      uint64_t v74 = (NSObject **)&unk_1F1489CC8;
      v75.__imp_.__imp_ = (const char *)&unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v69, (uint64_t)&v74);
      *((void *)&v70 + 1) = "std::shared_ptr<Manifest_Buffer> AMCP::Graph::Manifest_Inventory::request_shared_buffer_fo"
                              "r_connection(std::shared_ptr<DAL::DAL_Buffer>, const Manifest_Buffer::Buffer_Identifier &,"
                              " CA::StreamDescription, Manifest_Buffer::Buffer_Style, Timebase_Ref, Buffer_Alignment, Dri"
                              "ft_Correction_Status, Node_Buffer_Ownership, int32_t)";
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/A"
                                                                 "MCP/IO/Graph/Manifest_Inventory.cpp";
      LODWORD(__p.__r_.__value_.__r.__words[1]) = 78;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v58);
      std::logic_error v63 = *(std::logic_error *)v58;
      int v62 = &unk_1F148AA90;
      uint64_t v64 = *(void *)&v58[16];
      memset(v58, 0, sizeof(v58));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
  }
  uint64_t v51 = a2;
  uint64_t v20 = AMCP::Graph::Manifest_Inventory::request_shared_buffer_for_connection(std::shared_ptr<AMCP::DAL::DAL_Buffer>,AMCP::Wire_Identifier const&,CA::StreamDescription,AMCP::Graph::Manifest_Buffer::Buffer_Style,std::shared_ptr<AMCP::Graph::Timebase>,Buffer_Alignment,Drift_Correction_Status,Node_Buffer_Ownership,int)::count++;
  uint64_t v21 = (char *)operator new(0x170uLL);
  *((void *)v21 + 1) = 0;
  *((void *)v21 + 2) = 0;
  *(void *)uint64_t v21 = &unk_1F1470910;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v69 = *(std::string *)a4;
  }
  *(void *)&long long v70 = *(void *)(a4 + 24);
  DWORD2(v70) = *(_DWORD *)(a4 + 32);
  if (*(char *)(a4 + 63) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a4 + 40), *(void *)(a4 + 48));
  }
  else {
    std::string __p = *(std::string *)(a4 + 40);
  }
  uint64_t v72 = *(void *)(a4 + 64);
  int v73 = *(_DWORD *)(a4 + 72);
  long long v22 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)uint64_t v54 = *(_OWORD *)a5;
  *(_OWORD *)&v54[16] = v22;
  uint64_t v55 = *(void *)(a5 + 32);
  long long v23 = *a3;
  uint64_t v24 = *((void *)a3 + 1);
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  long long v25 = *(_OWORD *)a7;
  uint64_t v26 = a7[1];
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)v21 + 3) = v20;
  *((_OWORD *)v21 + 2) = *(_OWORD *)&v69.__r_.__value_.__l.__data_;
  std::string::size_type v27 = v69.__r_.__value_.__r.__words[2];
  memset(&v69, 0, sizeof(v69));
  uint64_t v28 = v70;
  *((void *)v21 + 6) = v27;
  *((void *)v21 + 7) = v28;
  *((_DWORD *)v21 + 16) = DWORD2(v70);
  std::string::size_type v29 = __p.__r_.__value_.__r.__words[2];
  *(_OWORD *)(v21 + 72) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  memset(&__p, 0, sizeof(__p));
  uint64_t v30 = v72;
  *((_DWORD *)v21 + 26) = v73;
  *((void *)v21 + 11) = v29;
  *((void *)v21 + 12) = v30;
  long long v31 = *(_OWORD *)v54;
  long long v32 = *(_OWORD *)&v54[16];
  *((void *)v21 + 18) = v55;
  *((_OWORD *)v21 + 7) = v31;
  *((_OWORD *)v21 + 8) = v32;
  *(_OWORD *)(v21 + 152) = v25;
  *((_DWORD *)v21 + 42) = a9;
  *((_DWORD *)v21 + 43) = a10;
  *((_DWORD *)v21 + 44) = a6;
  *((_DWORD *)v21 + 45) = a8;
  *((void *)v21 + 23) = 0;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v21 + 48) = 2;
  *((void *)v21 + 25) = 0;
  *((void *)v21 + 26) = 0;
  *(_OWORD *)(v21 + 216) = v25;
  long long v33 = *(_OWORD *)(v21 + 152);
  uint64_t v34 = *((void *)v21 + 20);
  if (v34) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v21 + 58) = 2;
  *((void *)v21 + 30) = 0;
  *((void *)v21 + 31) = 0;
  *((_OWORD *)v21 + 16) = v33;
  long long v35 = *(_OWORD *)(v21 + 152);
  uint64_t v36 = *((void *)v21 + 20);
  if (v36) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v21 + 68) = 2;
  *((void *)v21 + 35) = 0;
  *((void *)v21 + 36) = 0;
  *(_OWORD *)(v21 + 296) = v35;
  uint64_t v38 = *((void *)v21 + 19);
  long long v37 = (std::__shared_weak_count *)*((void *)v21 + 20);
  *((void *)v21 + 39) = -1;
  *((void *)v21 + 40) = 0;
  *(_OWORD *)(v21 + 328) = v23;
  *((_DWORD *)v21 + 86) = a11;
  *((void *)v21 + 44) = 0;
  *((void *)v21 + 45) = 0;
  if (!v37)
  {
    if (!v38) {
      goto LABEL_29;
    }
    uint64_t v40 = 0;
    double v39 = *((double *)v21 + 14);
    goto LABEL_25;
  }
  atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  if (!v38) {
    goto LABEL_29;
  }
  double v39 = *((double *)v21 + 14);
  uint64_t v38 = *((void *)v21 + 19);
  uint64_t v40 = (std::__shared_weak_count *)*((void *)v21 + 20);
  if (!v40)
  {
LABEL_25:
    char v41 = 1;
    goto LABEL_26;
  }
  char v41 = 0;
  atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_26:
  double v43 = (*(double (**)(uint64_t))(*(void *)v38 + 152))(v38);
  if ((v41 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (v39 != v43)
  {
    AMCP::Log::Scope_Registry::get(v42);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v74, "com.apple.coreaudio", "AMCP");
    uint64_t v47 = *v74;
    if (v75.__vftable) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v75.__vftable);
    }
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      uint64_t v48 = pthread_self();
      mach_port_t v49 = pthread_mach_thread_np(v48);
      LODWORD(v74) = 67109890;
      HIDWORD(v74) = v49;
      LOWORD(v75.__vftable) = 2080;
      *(std::logic_error_vtbl **)((char *)&v75.__vftable + 2) = (std::logic_error_vtbl *)"Manifest_Buffer.cpp";
      WORD1(v75.__imp_.__imp_) = 1024;
      HIDWORD(v75.__imp_.__imp_) = 51;
      LOWORD(v76) = 2080;
      *(void *)((char *)&v76 + 2) = "not (m_format.mSampleRate == get_timebase()->get_sample_rate())";
      _os_log_error_impl(&dword_1BAA78000, v47, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Unexpected sample rate for connection", (uint8_t *)&v74, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v68);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Unexpected sample rate for connection", (uint64_t)&v60, v51);
    std::logic_error::logic_error(&v61, &v60);
    v61.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v62, &v61);
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    int v67 = -1;
    int v62 = &unk_1F1489CC8;
    v63.__imp_.__imp_ = (const char *)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v74, (uint64_t)&v62);
    *((void *)&v76 + 1) = "AMCP::Graph::Manifest_Buffer::Manifest_Buffer(size_t, Buffer_Identifier, CA::StreamDescripti"
                            "on, std::shared_ptr<DAL::DAL_Buffer>, Buffer_Style, Timebase_Ref, Buffer_Alignment, Drift_Co"
                            "rrection_Status, Node_Buffer_Ownership, int32_t)";
    int v77 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    int v78 = 51;
    std::vector<void *>::vector(&v56);
    int v50 = backtrace((void **)v56, (*((void *)&v56 + 1) - (void)v56) >> 3);
    std::vector<void *>::resize((char **)&v56, v50);
    *(void *)uint64_t v58 = &unk_1F148AA90;
    *(_OWORD *)&v58[8] = v56;
    uint64_t v59 = v57;
    long long v56 = 0uLL;
    uint64_t v57 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
LABEL_29:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  *a1 = v21 + 24;
  a1[1] = v21;
  v53[0] = (uint64_t)(v21 + 24);
  v53[1] = (uint64_t)v21;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v21 + 1, 1uLL, memory_order_relaxed);
  AMCP::Graph::Manifest_Inventory::add_buffer(v51, v53);

  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v21);
}

void sub_1BAD67CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v59 = *(std::__shared_weak_count **)(v57 + 360);
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  std::string v60 = *(std::__shared_weak_count **)(v57 + 336);
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  std::logic_error v61 = *(std::__shared_weak_count **)(v57 + 304);
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  int v62 = *(std::__shared_weak_count **)(v57 + 264);
  if (v62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
  std::logic_error v63 = *(std::__shared_weak_count **)(v57 + 224);
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  uint64_t v64 = *(std::__shared_weak_count **)(v57 + 160);
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  if (*(char *)(v57 + 95) < 0) {
    operator delete(*(void **)(v57 + 72));
  }
  if (*(char *)(v57 + 55) < 0) {
    operator delete(*(void **)(v57 + 32));
  }
  AMCP::Wire_Identifier::~Wire_Identifier(&__p);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v57);
  operator delete(v65);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest_Inventory::add_buffer(uint64_t a1, uint64_t *a2)
{
  AMCP::Graph::Manifest_Buffer::get_buffer_id(&v47, *a2);
  unint64_t v5 = std::hash<AMCP::Wire_Identifier>::operator()((uint64_t)&v47);
  unint64_t v6 = v5;
  unint64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    unint64_t v9 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v2 = v5;
      if (v5 >= v7) {
        unint64_t v2 = v5 % v7;
      }
    }
    else
    {
      unint64_t v2 = (v7 - 1) & v5;
    }
    int v10 = *(void ***)(*(void *)(a1 + 8) + 8 * v2);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v6)
        {
          if (std::equal_to<AMCP::Wire_Identifier>::operator()[abi:ne180100]((uint64_t)(i + 2), (unsigned __int8 **)&v47))
          {
            goto LABEL_74;
          }
        }
        else
        {
          if (v9 > 1)
          {
            if (v12 >= v7) {
              v12 %= v7;
            }
          }
          else
          {
            v12 &= v7 - 1;
          }
          if (v12 != v2) {
            break;
          }
        }
      }
    }
  }
  int v13 = (char *)operator new(0x70uLL);
  char v14 = (void *)(a1 + 24);
  v54[0] = v13;
  v54[1] = a1 + 24;
  *(void *)int v13 = 0;
  *((void *)v13 + 1) = v6;
  *((_OWORD *)v13 + 1) = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v15 = v48;
  *((void *)v13 + 4) = *((void *)&v47.__r_.__value_.__l + 2);
  *((void *)v13 + 5) = v15;
  *((_DWORD *)v13 + 12) = v49;
  *(_OWORD *)(v13 + 56) = *(_OWORD *)__p;
  v47.__r_.__value_.__r.__words[2] = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v16 = v51;
  uint64_t v17 = v52;
  uint64_t v51 = 0;
  *((void *)v13 + 9) = v16;
  *((void *)v13 + 10) = v17;
  *((_DWORD *)v13 + 22) = v53;
  *((void *)v13 + 12) = 0;
  *((void *)v13 + 13) = 0;
  char v55 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 32) + 1);
  float v19 = *(float *)(a1 + 40);
  if (!v7 || (float)(v19 * (float)v7) < v18)
  {
    BOOL v20 = 1;
    if (v7 >= 3) {
      BOOL v20 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v7);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      int8x8_t prime = (int8x8_t)v22;
    }
    else {
      int8x8_t prime = (int8x8_t)v21;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = *(void *)(a1 + 16);
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 32) / *(float *)(a1 + 40));
      if (v7 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (*(void *)&prime <= v30) {
        int8x8_t prime = (int8x8_t)v30;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *(void *)(a1 + 16);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v24 = operator new(8 * *(void *)&prime);
          long long v25 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = v24;
          if (v25) {
            operator delete(v25);
          }
          uint64_t v26 = 0;
          *(int8x8_t *)(a1 + 16) = prime;
          do
            *(void *)(*(void *)(a1 + 8) + 8 * v26++) = 0;
          while (*(void *)&prime != v26);
          std::string::size_type v27 = (void *)*v14;
          if (*v14)
          {
            unint64_t v28 = v27[1];
            uint8x8_t v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(void *)&prime) {
                v28 %= *(void *)&prime;
              }
            }
            else
            {
              v28 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(a1 + 8) + 8 * v28) = v14;
            long long v33 = (void *)*v27;
            if (*v27)
            {
              do
              {
                unint64_t v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(void *)&prime) {
                    v34 %= *(void *)&prime;
                  }
                }
                else
                {
                  v34 &= *(void *)&prime - 1;
                }
                if (v34 != v28)
                {
                  uint64_t v35 = *(void *)(a1 + 8);
                  if (!*(void *)(v35 + 8 * v34))
                  {
                    *(void *)(v35 + 8 * v34) = v27;
                    goto LABEL_55;
                  }
                  void *v27 = *v33;
                  *long long v33 = **(void **)(*(void *)(a1 + 8) + 8 * v34);
                  **(void **)(*(void *)(a1 + 8) + 8 * v34) = v33;
                  long long v33 = v27;
                }
                unint64_t v34 = v28;
LABEL_55:
                std::string::size_type v27 = v33;
                long long v33 = (void *)*v33;
                unint64_t v28 = v34;
              }
              while (v33);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v44 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = 0;
        if (v44) {
          operator delete(v44);
        }
        unint64_t v7 = 0;
        *(void *)(a1 + 16) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v2 = v6 % v7;
      }
      else {
        unint64_t v2 = v6;
      }
    }
    else
    {
      unint64_t v2 = (v7 - 1) & v6;
    }
  }
  uint64_t v36 = *(void **)(*(void *)(a1 + 8) + 8 * v2);
  uint64_t i = (void *)v54[0];
  if (v36)
  {
    *(void *)v54[0] = *v36;
LABEL_72:
    *uint64_t v36 = i;
    goto LABEL_73;
  }
  *(void *)v54[0] = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = i;
  *(void *)(*(void *)(a1 + 8) + 8 * v2) = v14;
  if (*i)
  {
    unint64_t v37 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v37 >= v7) {
        v37 %= v7;
      }
    }
    else
    {
      v37 &= v7 - 1;
    }
    uint64_t v36 = (void *)(*(void *)(a1 + 8) + 8 * v37);
    goto LABEL_72;
  }
LABEL_73:
  v54[0] = 0;
  ++*(void *)(a1 + 32);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>>>>::reset[abi:ne180100]((uint64_t)v54);
LABEL_74:
  uint64_t v39 = *a2;
  uint64_t v38 = a2[1];
  if (v38) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v40 = (std::__shared_weak_count *)i[13];
  i[12] = v39;
  i[13] = v38;
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (SHIBYTE(v51) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  uint64_t v41 = *(void *)(a1 + 80);
  unint64_t v42 = *(void *)(*a2 + 128);
  double v43 = *(std::__shared_weak_count **)(*a2 + 136);
  unint64_t v45 = v42;
  mach_port_t v46 = v43;
  if (v43) {
    atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__emplace_unique_key_args<std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase>>(v41, v42, (uint64_t)&v45);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
}

void sub_1BAD683EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>>>>::reset[abi:ne180100](v4 - 88);
  AMCP::Wire_Identifier::~Wire_Identifier((void **)va);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest_Buffer::get_buffer_id(std::string *this, uint64_t a2)
{
  if (*(char *)(a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    *this = *(std::string *)(a2 + 8);
  }
  this[1].__r_.__value_.__r.__words[0] = *(void *)(a2 + 32);
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 40);
  uint64_t v4 = (std::string *)((char *)this + 40);
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 48);
    this[2].__r_.__value_.__l.__size_ = *(void *)(a2 + 64);
  }
  this[2].__r_.__value_.__r.__words[2] = *(void *)(a2 + 72);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 80);
}

void sub_1BAD684C0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Buffer>::__on_zero_shared(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 172) == 2)
  {
    unint64_t v2 = *(std::__shared_weak_count **)(a1 + 336);
    *(void *)(a1 + 328) = 0;
    *(void *)(a1 + 336) = 0;
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 360);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 336);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 304);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  unint64_t v6 = *(std::__shared_weak_count **)(a1 + 264);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  unint64_t v7 = *(std::__shared_weak_count **)(a1 + 224);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint8x8_t v8 = *(std::__shared_weak_count **)(a1 + 160);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 55) < 0)
  {
    unint64_t v9 = *(void **)(a1 + 32);
    operator delete(v9);
  }
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Buffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1470910;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Buffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1470910;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AMCP::Graph::Manifest_Inventory::take_power_assertions(AMCP::Graph::Manifest_Inventory *this)
{
  if (!*(unsigned char *)this)
  {
    uint64_t v1 = *((void *)this + 10);
    unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
    if (v2) {
      atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    for (uint64_t i = *(uint64_t ***)(v1 + 16); i; uint64_t i = (uint64_t **)*i)
      (*(void (**)(uint64_t *))(*i[2] + 232))(i[2]);
    if (v2)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
  }
}

void AMCP::Graph::Manifest_Inventory::begin_processing(AMCP::Graph::Manifest_Inventory *this, int a2)
{
  if (this)
  {
    unint64_t v3 = this;
    do
    {
      uint64_t v4 = *((void *)v3 + 12);
      uint64_t v5 = *(void *)(v4 + 304);
      if (v5)
      {
        if (*(char *)(v4 + 31) < 0) {
          std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(v4 + 8), *(void *)(v4 + 16));
        }
        else {
          v7[0] = *(std::string *)(v4 + 8);
        }
        int v8 = a2;
        std::string __p = v7[0];
        memset(v7, 0, 24);
        int v6 = *(_DWORD *)(v4 + 40);
        uint64_t v10 = *(void *)(v4 + 32);
        int v11 = v6;
        (*(void (**)(uint64_t, int *, void))(*(void *)v5 + 184))(v5, &v8, *(unsigned int *)(v4 + 156));
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      unint64_t v3 = *(AMCP::Graph::Manifest_Inventory **)v3;
    }
    while (v3);
  }
}

void sub_1BAD6879C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Manifest_Inventory::begin_cycle(void *a1, uint64_t *a2, float *a3)
{
  for (uint64_t i = *(uint64_t ***)(a1[10] + 16); i; uint64_t i = (uint64_t **)*i)
    (*(void (**)(uint64_t *))(*i[2] + 88))(i[2]);
  for (uint64_t j = (void *)a1[3]; j; uint64_t j = (void *)*j)
  {
    uint64_t v8 = j[12];
    unint64_t v9 = *(std::__shared_weak_count **)(v8 + 136);
    v21[0] = *(void *)(v8 + 128);
    v21[1] = (uint64_t)v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)v19, (AMCP::DAL::DAL_Time_Delta *)a3, v21);
    AMCP::Graph::Manifest_Counter::calculate_buffer_start((AMCP::DAL::DAL_Time *)v17, a1[8], v21, *(unsigned int *)(j[12] + 156), (AMCP::DAL::DAL_Time_Delta *)v19, a3[10]);
    uint64_t v10 = *a2;
    if (*a2)
    {
      uint64_t v11 = *(void *)j[12];
      vcvtmd_s64_f64(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v17));
      AMCP::Graph::Manifest_Log::add_message(v10, 4, "Manifest_Buffer(%ld)::begin_cycle: cycle anchor: %llu  %p", v12, v13, v14, v15, v16, v11);
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
}

void sub_1BAD68904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

double AMCP::Graph::Manifest_Inventory::end_cycle(AMCP::Log::Scope_Registry *a1, uint64_t a2, double *a3)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t **)*((void *)a1 + 14);
  int v6 = (uint64_t **)*((void *)a1 + 15);
  while (v5 != v6)
  {
    uint64_t v8 = *v5;
    v5 += 2;
    AMCP::IO_Core::Device_Connection::end_cycle(v8, a2, (AMCP::DAL::DAL_Time_Delta *)a3);
  }
  for (uint64_t i = (uint64_t **)*((void *)a1 + 3); i; uint64_t i = (uint64_t **)*i)
    AMCP::Graph::Manifest_Buffer::advance((AMCP::Graph::Manifest_Buffer *)i[12]);
  uint64_t v10 = *((void *)a1 + 10);
  if (!*(void *)(v10 + 24))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v38 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      uint64_t v39 = pthread_self();
      mach_port_t v40 = pthread_mach_thread_np(v39);
      *(_DWORD *)long long buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v40;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Timebase_Set.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 32;
      LOWORD(v57) = 2080;
      *(void *)((char *)&v57 + 2) = "not (not m_timebases.empty())";
      _os_log_error_impl(&dword_1BAA78000, v38, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to run an manifest with no timebases", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v55);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to run an manifest with no timebases", (uint64_t)&v47);
    std::logic_error::logic_error(&v48, &v47);
    v48.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v49, &v48);
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    int v54 = -1;
    v49.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v50 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v49);
    *((void *)&v57 + 1) = "void AMCP::Graph::Timebase_Set::end_cycle(const DAL::DAL_Time_Delta &) const";
    uint64_t v58 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Timebase_Set.cpp";
    int v59 = 32;
    std::vector<void *>::vector(&v42);
    int v41 = backtrace((void **)v42, (*((void *)&v42 + 1) - (void)v42) >> 3);
    std::vector<void *>::resize((char **)&v42, v41);
    long long v45 = v42;
    uint64_t v46 = v43;
    long long v42 = 0uLL;
    uint64_t v43 = 0;
    uint64_t v44 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  for (uint64_t j = *(void **)(v10 + 16); j; uint64_t j = (void *)*j)
  {
    *(_OWORD *)long long buf = *(_OWORD *)a3;
    uint64_t v12 = *((void *)a3 + 3);
    *(double *)&buf[16] = a3[2];
    *(void *)&long long v57 = v12;
    uint64_t v13 = (std::__shared_weak_count *)*((void *)a3 + 4);
    *((void *)&v57 + 1) = v13;
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v14 = v13;
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = j[2];
    BOOL v16 = (v15 | v12) == 0;
    if (!v15 || !v12) {
      goto LABEL_33;
    }
    uint64_t v17 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    uint64_t v19 = v17[23];
    if ((v19 & 0x80u) == 0) {
      uint64_t v20 = v17[23];
    }
    else {
      uint64_t v20 = *((void *)v17 + 1);
    }
    uint64_t v21 = *(unsigned __int8 *)(v18 + 23);
    int v22 = (char)v21;
    if ((v21 & 0x80u) != 0) {
      uint64_t v21 = *(void *)(v18 + 8);
    }
    if (v20 == v21)
    {
      if (v22 >= 0) {
        long long v23 = (unsigned __int8 *)v18;
      }
      else {
        long long v23 = *(unsigned __int8 **)v18;
      }
      if ((v19 & 0x80) != 0)
      {
        BOOL v16 = memcmp(*(const void **)v17, v23, *((void *)v17 + 1)) == 0;
        goto LABEL_33;
      }
      if (v17[23])
      {
        uint64_t v24 = v19 - 1;
        do
        {
          int v26 = *v17++;
          int v25 = v26;
          int v28 = *v23++;
          int v27 = v28;
          BOOL v30 = v24-- != 0;
          BOOL v16 = v25 == v27;
        }
        while (v25 == v27 && v30);
LABEL_33:
        if (!v13) {
          goto LABEL_35;
        }
LABEL_34:
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        goto LABEL_35;
      }
      BOOL v16 = 1;
      if (v13) {
        goto LABEL_34;
      }
    }
    else
    {
      BOOL v16 = 0;
      if (v13) {
        goto LABEL_34;
      }
    }
LABEL_35:
    if (v16)
    {
      uint64_t v31 = j[2];
      if ((buf[0] & 2) != 0) {
        goto LABEL_46;
      }
    }
    else
    {
      if ((*(unsigned char *)a3 & 1) == 0) {
        AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)a3);
      }
      uint64_t v32 = *((void *)a3 + 2);
      long long v33 = *((_OWORD *)j + 1);
      uint64_t v34 = j[3];
      if (v34) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
      }
      *(_DWORD *)long long buf = 1;
      *(void *)&uint8_t buf[8] = 0;
      *(void *)&buf[16] = v32;
      long long v57 = v33;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      uint64_t v31 = j[2];
    }
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)buf);
LABEL_46:
    (*(void (**)(uint64_t, double))(*(void *)v31 + 96))(v31, *(double *)&buf[8]);
    if (*((void *)&v57 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v57 + 1));
    }
  }
  uint64_t v35 = *((void *)a1 + 8);
  if ((*(unsigned char *)a3 & 2) == 0) {
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)a3);
  }
  double v36 = a3[1];

  return AMCP::Graph::Manifest_Counter::advance(v35, v36);
}

void AMCP::Graph::Manifest_Inventory::release_power_assertions(AMCP::Graph::Manifest_Inventory *this)
{
  if (!*(unsigned char *)this)
  {
    uint64_t v1 = *((void *)this + 10);
    unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
    if (v2) {
      atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    for (uint64_t i = *(uint64_t ***)(v1 + 16); i; uint64_t i = (uint64_t **)*i)
      (*(void (**)(uint64_t *))(*i[2] + 240))(i[2]);
    if (v2)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
  }
}

void AMCP::Graph::Manifest_Inventory::anchor_time(AMCP::Graph::Manifest_Inventory *this, int a2, const AMCP::Graph::Manifest_Execution_Context *a3, const AMCP::DAL::DAL_Time *a4)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(*((void *)this + 10) + 24))
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v76, "com.apple.coreaudio", "AMCP");
    long long v57 = *(NSObject **)v76.__r_.__value_.__l.__data_;
    if (v76.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v76.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      uint64_t v58 = pthread_self();
      mach_port_t v59 = pthread_mach_thread_np(v58);
      LODWORD(v76.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v76.__r_.__value_.__r.__words[0]) = v59;
      LOWORD(v76.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v76.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Inventory.cpp";
      WORD1(v76.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v76.__r_.__value_.__r.__words[2]) = 291;
      LOWORD(v77) = 2080;
      *(void *)((char *)&v77 + 2) = "not (m_timebases->size() != 0)";
      _os_log_error_impl(&dword_1BAA78000, v57, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to run an manifest with no timebases", (uint8_t *)&v76, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v69);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to run an manifest with no timebases", (uint64_t)&v68);
    std::logic_error::logic_error(&v64, &v68);
    v64.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v70, &v64);
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    int v74 = -1;
    v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v70.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v76, (uint64_t)&v70);
    *((void *)&v77 + 1) = "void AMCP::Graph::Manifest_Inventory::anchor_time(Object_ID, const Manifest_Execution_Contex"
                            "t &, const DAL::DAL_Time &) const";
    int v78 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Inventory.cpp";
    int v79 = 291;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v66);
    long long v81 = v66;
    uint64_t v80 = (std::string *)&unk_1F148AA90;
    uint64_t v82 = v67;
    long long v66 = 0uLL;
    int v67 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v6 = *((void *)this + 8);
  if (!*(unsigned char *)v6) {
    AMCP::Graph::Manifest_Counter::start(v6, a4);
  }
  v64.__vftable = 0;
  v64.__imp_.__imp_ = 0;
  unint64_t v65 = 0;
  unint64_t v7 = (uint64_t *)*((void *)this + 3);
  std::logic_error v61 = this;
  int v62 = a3;
  if (v7)
  {
    imp = 0;
    do
    {
      long long v9 = *((_OWORD *)v7 + 6);
      uint64_t v10 = v7[13];
      if (v10)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
        imp = (char *)v64.__imp_.__imp_;
      }
      if ((unint64_t)imp >= v65)
      {
        long long v63 = v9;
        uint64_t v11 = (imp - (char *)v64.__vftable) >> 4;
        if ((unint64_t)(v11 + 1) >> 60) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v12 = (uint64_t)(v65 - (unint64_t)v64.__vftable) >> 3;
        if (v12 <= v11 + 1) {
          unint64_t v12 = v11 + 1;
        }
        if (v65 - (unint64_t)v64.__vftable >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        *((void *)&v77 + 1) = &v65;
        uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v13);
        uint64_t v15 = &v14[16 * v11];
        v76.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
        v76.__r_.__value_.__l.__size_ = (std::string::size_type)v15;
        *(void *)&long long v77 = &v14[16 * v16];
        *(_OWORD *)uint64_t v15 = v63;
        v76.__r_.__value_.__r.__words[2] = (std::string::size_type)(v15 + 16);
        std::vector<std::shared_ptr<DSP_Host_Types::FormatDescription>>::__swap_out_circular_buffer(&v64, &v76);
        imp = (char *)v64.__imp_.__imp_;
        uint64_t v6 = std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v76);
      }
      else
      {
        *(_OWORD *)imp = v9;
        imp += 16;
      }
      v64.__imp_.__imp_ = imp;
      unint64_t v7 = (uint64_t *)*v7;
    }
    while (v7);
    for (uint64_t i = v64.__vftable; ; uint64_t i = (std::logic_error_vtbl *)((char *)i + 16))
    {
      if (i == (std::logic_error_vtbl *)imp)
      {
        uint64_t i = (std::logic_error_vtbl *)imp;
        goto LABEL_29;
      }
LABEL_20:
      uint64_t v18 = i->~logic_error;
      if (!*((void *)i->~logic_error + 37)) {
        break;
      }
    }
    uint64_t v19 = imp - 16;
    while (v19 != (char *)i)
    {
      imp = v19;
      uint64_t v21 = *(void *)v19;
      v19 -= 16;
      uint64_t v20 = (void (__cdecl *)(std::logic_error *__hidden))v21;
      if (*(void *)(v21 + 296))
      {
        i->~logic_error = v20;
        *((void *)v19 + 2) = v18;
        int v22 = i->~logic_error_0;
        i->~logic_error_0 = (void (__cdecl *)(std::logic_error *__hidden))*((void *)v19 + 3);
        *((void *)v19 + 3) = v22;
        uint64_t i = (std::logic_error_vtbl *)((char *)i + 16);
        if (i != (std::logic_error_vtbl *)imp) {
          goto LABEL_20;
        }
        break;
      }
    }
  }
  else
  {
    uint64_t i = 0;
  }
LABEL_29:
  if (i != (std::logic_error_vtbl *)v64.__imp_.__imp_)
  {
    long long v23 = (const char *)i;
    do
    {
      for (uint64_t j = v64.__vftable; j != i; uint64_t j = (std::logic_error_vtbl *)((char *)j + 16))
      {
        int v25 = j->~logic_error;
        if (!*((void *)j->~logic_error + 37))
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v76, "com.apple.coreaudio", "AMCP");
          std::string v47 = *(NSObject **)v76.__r_.__value_.__l.__data_;
          if (v76.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v76.__r_.__value_.__l.__size_);
          }
          if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
          {
            std::logic_error v48 = pthread_self();
            mach_port_t v49 = pthread_mach_thread_np(v48);
            LODWORD(v76.__r_.__value_.__l.__data_) = 67109890;
            HIDWORD(v76.__r_.__value_.__r.__words[0]) = v49;
            LOWORD(v76.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v76.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Inventory.cpp";
            WORD1(v76.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(v76.__r_.__value_.__r.__words[2]) = 226;
            LOWORD(v77) = 2080;
            *(void *)((char *)&v77 + 2) = "not ((*i)->is_processing())";
            _os_log_error_impl(&dword_1BAA78000, v47, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s All peers must be running", (uint8_t *)&v76, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v75);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"All peers must be running", (uint64_t)&v68);
          std::logic_error::logic_error(&v69, &v68);
          v69.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)&v70, &v69);
          uint64_t v71 = 0;
          uint64_t v72 = 0;
          uint64_t v73 = 0;
          int v74 = -1;
          v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
          v70.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v76, (uint64_t)&v70);
          *((void *)&v77 + 1) = "std::vector<std::shared_ptr<Manifest_Buffer>>::iterator AMCP::Graph::find_peer(const s"
                                  "td::shared_ptr<Manifest_Buffer> &, std::vector<std::shared_ptr<Manifest_Buffer>>::iter"
                                  "ator, std::vector<std::shared_ptr<Manifest_Buffer>>::iterator)";
          int v78 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Inventory.cpp";
          int v79 = 226;
          std::vector<void *>::vector(&v66);
          int v50 = backtrace((void **)v66, (*((void *)&v66 + 1) - (void)v66) >> 3);
          std::vector<void *>::resize((char **)&v66, v50);
          long long v81 = v66;
          uint64_t v80 = (std::string *)&unk_1F148AA90;
          uint64_t v82 = v67;
          long long v66 = 0uLL;
          int v67 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        if (*((char *)v25 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v76, *((const std::string::value_type **)v25 + 1), *((void *)v25 + 2));
        }
        else
        {
          long long v26 = *(_OWORD *)((char *)v25 + 8);
          v76.__r_.__value_.__r.__words[2] = *((void *)v25 + 3);
          *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v26;
        }
        *(void *)&long long v77 = *((void *)v25 + 4);
        DWORD2(v77) = *((_DWORD *)v25 + 10);
        uint64_t v27 = *(void *)v23;
        if (*(char *)(*(void *)v23 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)(v27 + 8), *(void *)(v27 + 16));
        }
        else
        {
          long long v28 = *(_OWORD *)(v27 + 8);
          v70.__r_.__value_.__r.__words[2] = *(void *)(v27 + 24);
          *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v28;
        }
        uint64_t v71 = *(void *)(v27 + 32);
        LODWORD(v72) = *(_DWORD *)(v27 + 40);
        uint64_t v80 = &v76;
        *(void *)&long long v81 = &v77;
        *((void *)&v81 + 1) = (char *)&v77 + 8;
        v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
        v68.__r_.__value_.__l.__size_ = (std::string::size_type)&v71;
        v68.__r_.__value_.__r.__words[2] = (std::string::size_type)&v72;
        uint64_t v6 = std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v80, (unsigned __int8 ***)&v68);
        char v29 = v6;
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v76.__r_.__value_.__l.__data_);
        }
        if (v29)
        {
          if (j != i)
          {
            BOOL v30 = *(AMCP::Log::Scope_Registry **)v23;
            uint64_t v31 = j->~logic_error;
            uint64_t v32 = (std::__shared_weak_count *)j->~logic_error_0;
            if (v32) {
              atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (*((void *)v30 + 37))
            {
              AMCP::Log::Scope_Registry::get(v30);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v76, "com.apple.coreaudio", "AMCP");
              int v54 = *(NSObject **)v76.__r_.__value_.__l.__data_;
              if (v76.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v76.__r_.__value_.__l.__size_);
              }
              if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
              {
                char v55 = pthread_self();
                mach_port_t v56 = pthread_mach_thread_np(v55);
                LODWORD(v76.__r_.__value_.__l.__data_) = 67109890;
                HIDWORD(v76.__r_.__value_.__r.__words[0]) = v56;
                LOWORD(v76.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&v76.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
                WORD1(v76.__r_.__value_.__r.__words[2]) = 1024;
                HIDWORD(v76.__r_.__value_.__r.__words[2]) = 125;
                LOWORD(v77) = 2080;
                *(void *)((char *)&v77 + 2) = "not (not is_processing())";
                _os_log_error_impl(&dword_1BAA78000, v54, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Don't call anchor_to_timebase_anchor on buffers that are currently processing", (uint8_t *)&v76, 0x22u);
              }
              AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v75);
              __cxa_allocate_exception(0x40uLL);
              caulk::make_string((caulk *)"Don't call anchor_to_timebase_anchor on buffers that are currently processing", (uint64_t)&v68);
              std::logic_error::logic_error(&v69, &v68);
              v69.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
              std::logic_error::logic_error((std::logic_error *)&v70, &v69);
              uint64_t v71 = 0;
              uint64_t v72 = 0;
              uint64_t v73 = 0;
              int v74 = -1;
              v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
              v70.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v76, (uint64_t)&v70);
              *((void *)&v77 + 1) = "void AMCP::Graph::Manifest_Buffer::anchor_to_peer(std::shared_ptr<Manifest_Buffer>"
                                      ", AMCP::Object_ID, Manifest_Counter &, const Manifest_Execution_Context &)";
              int v78 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
              int v79 = 125;
              applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v66);
              long long v81 = v66;
              uint64_t v80 = (std::string *)&unk_1F148AA90;
              uint64_t v82 = v67;
              long long v66 = 0uLL;
              int v67 = 0;
              boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
            }
            long long v33 = (AMCP::Graph::Manifest_Counter *)*((void *)v61 + 8);
            *(_OWORD *)&v76.__r_.__value_.__l.__data_ = *((_OWORD *)v31 + 13);
            uint64_t v34 = *((void *)v31 + 29);
            v76.__r_.__value_.__r.__words[2] = *((void *)v31 + 28);
            *(void *)&long long v77 = v34;
            uint64_t v35 = *((void *)v31 + 30);
            *((void *)&v77 + 1) = v35;
            if (v35) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
            }
            AMCP::Graph::Manifest_Buffer::anchor_time(v30, (std::__shared_weak_count **)&v76, a2, v33, v62);
            goto LABEL_58;
          }
          break;
        }
      }
      double v36 = *(AMCP::Log::Scope_Registry **)v23;
      if (*(void *)(*(void *)v23 + 296))
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v76, "com.apple.coreaudio", "AMCP");
        uint64_t v51 = *(NSObject **)v76.__r_.__value_.__l.__data_;
        if (v76.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v76.__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
        {
          uint64_t v52 = pthread_self();
          mach_port_t v53 = pthread_mach_thread_np(v52);
          LODWORD(v76.__r_.__value_.__l.__data_) = 67109890;
          HIDWORD(v76.__r_.__value_.__r.__words[0]) = v53;
          LOWORD(v76.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v76.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
          WORD1(v76.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v76.__r_.__value_.__r.__words[2]) = 135;
          LOWORD(v77) = 2080;
          *(void *)((char *)&v77 + 2) = "not (not is_processing())";
          _os_log_error_impl(&dword_1BAA78000, v51, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Don't call anchor_to_timebase_anchor on buffers that are currently processing", (uint8_t *)&v76, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v75);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Don't call anchor_to_timebase_anchor on buffers that are currently processing", (uint64_t)&v68);
        std::logic_error::logic_error(&v69, &v68);
        v69.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error((std::logic_error *)&v70, &v69);
        uint64_t v71 = 0;
        uint64_t v72 = 0;
        uint64_t v73 = 0;
        int v74 = -1;
        v70.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
        v70.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v76, (uint64_t)&v70);
        *((void *)&v77 + 1) = "void AMCP::Graph::Manifest_Buffer::anchor_to_timebase_anchor(AMCP::Object_ID, Manifest_C"
                                "ounter &, const Manifest_Execution_Context &)";
        int v78 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
        int v79 = 135;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v66);
        long long v81 = v66;
        uint64_t v80 = (std::string *)&unk_1F148AA90;
        uint64_t v82 = v67;
        long long v66 = 0uLL;
        int v67 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      unint64_t v37 = (AMCP::Graph::Manifest_Counter *)*((void *)v61 + 8);
      uint64_t v32 = (std::__shared_weak_count *)*((void *)v36 + 17);
      uint64_t v80 = (std::string *)*((void *)v36 + 16);
      *(void *)&long long v81 = v32;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)&v76, v62, (uint64_t *)&v80);
      AMCP::Graph::Manifest_Counter::calculate_buffer_start((AMCP::DAL::DAL_Time *)&v70, (uint64_t)v37, (uint64_t *)&v80, *((unsigned int *)v36 + 39), (AMCP::DAL::DAL_Time_Delta *)&v76, *((float *)v62 + 10));
      AMCP::Graph::Manifest_Buffer::anchor_time(v36, (std::__shared_weak_count **)&v70, a2, v37, v62);
      if (v72) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v72);
      }
LABEL_58:
      uint64_t v6 = *((void *)&v77 + 1);
      if (*((void *)&v77 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v77 + 1));
      }
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
      v23 += 16;
    }
    while (v23 != v64.__imp_.__imp_);
  }
  for (k = (void *)*((void *)v61 + 3); k; k = (void *)*k)
    ++*(void *)(k[12] + 296);
  v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
  uint64_t v39 = (uint64_t **)*((void *)v61 + 14);
  mach_port_t v40 = (uint64_t **)*((void *)v61 + 15);
  if (v39 != v40)
  {
    while (1)
    {
      AMCP::IO_Core::Device_Connection::get_timebase((AMCP::IO_Core::Device_Connection *)&v70, *v39);
      AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)&v76, v62, (uint64_t *)&v70);
      if (v70.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v70.__r_.__value_.__l.__size_);
      }
      uint64_t v41 = *((void *)v61 + 8);
      AMCP::IO_Core::Device_Connection::get_timebase((AMCP::IO_Core::Device_Connection *)&v80, *v39);
      AMCP::Graph::Manifest_Counter::calculate_buffer_start((AMCP::DAL::DAL_Time *)&v70, v41, (uint64_t *)&v80, 1, (AMCP::DAL::DAL_Time_Delta *)&v76, *((float *)v62 + 10));
      if ((void)v81) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v81);
      }
      long long v42 = *v39;
      uint64_t v43 = (std::__shared_weak_count *)(*v39)[1];
      if (!v43) {
        break;
      }
      uint64_t v44 = std::__shared_weak_count::lock(v43);
      if (!v44) {
        goto LABEL_74;
      }
      long long v45 = (os_unfair_lock_s *)*v42;
LABEL_75:
      os_unfair_lock_lock(v45 + 1);
      double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v70);
      uint64_t v80 = (std::string *)&unk_1F1461660;
      *(double *)&long long v81 = sample_time;
      uint64_t v82 = &v80;
      AMCP::IO_Core::Device_Node_State::for_each_stream_connection((uint64_t)v45, 1u, (uint64_t)&v80);
      std::__function::__value_func<BOOL ()(AMCP::IO_Core::Stream_Connection &)>::~__value_func[abi:ne180100](&v80);
      os_unfair_lock_unlock(v45 + 1);
      if (v44) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v44);
      }
      if (v72) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v72);
      }
      if (*((void *)&v77 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v77 + 1));
      }
      v39 += 2;
      if (v39 == v40) {
        return;
      }
    }
    uint64_t v44 = 0;
LABEL_74:
    long long v45 = 0;
    goto LABEL_75;
  }
}

void sub_1BAD69ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,char *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,std::__shared_weak_count *a48)
{
  if (a48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a48);
  }
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  a30 = &a16;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest_Inventory::cross_check_buffer(AMCP::Log::Scope_Registry *a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (char *)a1 + 24;
  while (1)
  {
    unint64_t v2 = *(char **)v2;
    if (!v2) {
      break;
    }
    if (**((void **)v2 + 12) == *a2) {
      return;
    }
  }
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v6, "com.apple.coreaudio", "AMCP");
  unint64_t v3 = *v6;
  if (*(void *)v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v7);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = pthread_self();
    mach_port_t v5 = pthread_mach_thread_np(v4);
    LODWORD(v6) = 67109634;
    HIDWORD(v6) = v5;
    *(_WORD *)unint64_t v7 = 2080;
    *(void *)&std::string v7[2] = "Manifest_Inventory.cpp";
    __int16 v8 = 1024;
    int v9 = 324;
    _os_log_debug_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Found a manifest buffer that is not in the buffer map", (uint8_t *)&v6, 0x18u);
  }
}

void std::__shared_ptr_emplace<AMCP::Graph::Converter>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 144);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 136);
  uint64_t v10 = *(void *)(a1 + 128);
  uint64_t v11 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 120))(v2, &v10);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v4 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 168);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  unint64_t v7 = *(std::__shared_weak_count **)(a1 + 152);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  __int16 v8 = *(std::__shared_weak_count **)(a1 + 136);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table(a1 + 72);
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  int v9 = *(std::__shared_weak_count **)(a1 + 32);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
}

void std::__shared_ptr_emplace<AMCP::Graph::Converter>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1470960;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Graph::Converter>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1470960;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t *AMCP::Graph::Manifest_Inventory::get_buffer_alignments(uint64_t *this, void *a2)
{
  this[1] = 0;
  uint64_t v2 = this + 1;
  this[2] = 0;
  *this = (uint64_t)(this + 1);
  if (a2)
  {
    unint64_t v3 = a2;
    uint64_t v4 = (uint64_t)this;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      int v7 = *(_DWORD *)(v3[12] + 156);
      __int16 v8 = v2;
      int v9 = v2;
      if (v5)
      {
        uint64_t v10 = v5;
        while (1)
        {
          while (1)
          {
            int v9 = (void *)v10;
            int v11 = *(_DWORD *)(v10 + 28);
            if (v7 >= v11) {
              break;
            }
            uint64_t v10 = *v9;
            __int16 v8 = v9;
            if (!*v9) {
              goto LABEL_11;
            }
          }
          if (v11 >= v7) {
            break;
          }
          uint64_t v10 = v9[1];
          if (!v10)
          {
            __int16 v8 = v9 + 1;
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        unint64_t v12 = operator new(0x20uLL);
        v12[7] = v7;
        *(void *)unint64_t v12 = 0;
        *((void *)v12 + 1) = 0;
        *((void *)v12 + 2) = v9;
        *__int16 v8 = v12;
        uint64_t v13 = **(void **)v4;
        if (v13)
        {
          *(void *)uint64_t v4 = v13;
          unint64_t v12 = (_DWORD *)*v8;
        }
        this = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v4 + 8), (uint64_t *)v12);
        unint64_t v6 = *(void *)(v4 + 16) + 1;
        *(void *)(v4 + 16) = v6;
      }
      unint64_t v3 = (void *)*v3;
      if (!v3 || v6 >= 2) {
        break;
      }
      uint64_t v5 = *v2;
    }
  }
  return this;
}

void sub_1BAD6A5C8(_Unwind_Exception *a1)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Manifest_Inventory::report_thread_error(uint64_t this)
{
  if (this) {
    return (*(uint64_t (**)(uint64_t))(*(void *)this + 48))(this);
  }
  return this;
}

void sub_1BAD6A654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, NSObject **a9, long long a10)
{
  if (a2)
  {
    uint64_t v10 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a9, "com.apple.coreaudio", "AMCP");
    int v11 = *a9;
    if ((void)a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a10);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      unint64_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      LODWORD(a9) = 67109634;
      HIDWORD(a9) = v13;
      LOWORD(a10) = 2080;
      *(void *)((char *)&a10 + 2) = "Manifest_Inventory.cpp";
      WORD5(a10) = 1024;
      HIDWORD(a10) = 525;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Exception thrown from thread error handler", (uint8_t *)&a9, 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAD6A628);
  }
  _Unwind_Resume(exception_object);
}

Float64 AudioGetHostClockFrequency(void)
{
  return 24000000.0;
}

UInt32 AudioGetHostClockMinimumTimeDelta(void)
{
  return 1;
}

UInt64 AudioConvertHostTimeToNanos(UInt64 inHostTime)
{
  return __udivti3();
}

UInt64 AudioConvertNanosToHostTime(UInt64 inNanos)
{
  return __udivti3();
}

void non-virtual thunk to'ADS_DeviceManager::~ADS_DeviceManager(ADS_DeviceManager *this)
{
  HALS_PlugIn::~HALS_PlugIn((ADS_DeviceManager *)((char *)this - 328));

  JUMPOUT(0x1C1859840);
}

{
  HALS_PlugIn::~HALS_PlugIn((ADS_DeviceManager *)((char *)this - 328));
}

void ADS_DeviceManager::~ADS_DeviceManager(ADS_DeviceManager *this)
{
  HALS_PlugIn::~HALS_PlugIn(this);

  JUMPOUT(0x1C1859840);
}

uint64_t std::__shared_ptr_emplace<HALS_UCPlugIn>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<HALS_UCPlugIn>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14710A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALS_UCPlugIn>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14710A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

_UNKNOWN **ADSLoader::GetIOThreadStateChangeInterface(ADSLoader *this)
{
  return &gAudioServerPlugInIOThreadStateChangeInterfacePtr;
}

_UNKNOWN **ADSLoader::GetIsolatedInterface(ADSLoader *this)
{
  return &gAudioServerPlugInIsolatedDriverInterfacePtr;
}

_UNKNOWN **ADSLoader::GetCOMInterface(ADSLoader *this)
{
  return &gAudioServerPlugInDriverInterfacePtr;
}

void ADSLoader::~ADSLoader(ADSLoader *this)
{
  *(void *)this = &unk_1F1470BE0;
  CACFString::~CACFString((ADSLoader *)((char *)this + 8));

  JUMPOUT(0x1C1859840);
}

{
  *(void *)this = &unk_1F1470BE0;
  CACFString::~CACFString((ADSLoader *)((char *)this + 8));
}

void non-virtual thunk to'HALS_IOUABox::~HALS_IOUABox(HALS_IOUABox *this, HALS_Object *a2)
{
  HALS_IOUABox::~HALS_IOUABox((HALS_IOUABox *)((char *)this - 336), a2);

  JUMPOUT(0x1C1859840);
}

{
  HALS_IOUABox::~HALS_IOUABox((HALS_IOUABox *)((char *)this - 336), a2);
}

void HALS_IOUABox::~HALS_IOUABox(HALS_IOUABox *this, HALS_Object *a2)
{
  *(void *)this = &unk_1F1470C18;
  unint64_t v3 = (HALS_IOUABox *)((char *)this + 336);
  *((void *)this + 42) = &unk_1F1470D10;
  uint64_t v4 = (void *)*((void *)this + 48);
  if (v4)
  {
    *((void *)this + 49) = v4;
    operator delete(v4);
  }
  HALS_IOUAObject::~HALS_IOUAObject(v3, a2);

  HALS_Box::~HALS_Box(this);
}

{
  uint64_t vars8;

  HALS_IOUABox::~HALS_IOUABox(this, a2);

  JUMPOUT(0x1C1859840);
}

HALS_ObjectMap *HALS_IOUABox::_CopyControlByDescription(HALS_IOUABox *this, HALS_Object *a2, int a3, int a4)
{
  uint64_t v4 = (HALS_ObjectMap **)*((void *)this + 48);
  uint64_t v5 = (HALS_ObjectMap **)*((void *)this + 49);
  if (v4 != v5)
  {
    while (1)
    {
      unint64_t v6 = *v4;
      if (*v4)
      {
        if (*((_DWORD *)v6 + 5) == a2 && *((_DWORD *)v6 + 12) == a3 && *((_DWORD *)v6 + 13) == a4) {
          break;
        }
      }
      if (++v4 == v5) {
        return 0;
      }
    }
  }
  if (v4 == v5) {
    return 0;
  }
  int v7 = *v4;
  HALS_ObjectMap::RetainObject(*v4, a2);
  return v7;
}

HALS_ObjectMap *HALS_IOUABox::_CopyControlByIndex(HALS_IOUABox *this, HALS_Object *a2)
{
  uint64_t v2 = *((void *)this + 48);
  if (a2 >= (unint64_t)((*((void *)this + 49) - v2) >> 3)) {
    unint64_t v3 = 0;
  }
  else {
    unint64_t v3 = *(HALS_ObjectMap **)(v2 + 8 * a2);
  }
  HALS_ObjectMap::RetainObject(v3, a2);
  return v3;
}

uint64_t HALS_IOUABox::_GetNumberControls(HALS_IOUABox *this)
{
  return (*((void *)this + 49) - *((void *)this + 48)) >> 3;
}

void HALS_IOUABox::_CopyControls(uint64_t a1, void **a2)
{
  uint64_t v2 = *(HALS_ObjectMap ***)(a1 + 384);
  unint64_t v3 = *(HALS_ObjectMap ***)(a1 + 392);
  if (v2 != v3)
  {
    uint64_t v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, (HALS_Object *)a2);
      uint64_t v5 = *v2;
      int v7 = (HALS_ObjectMap **)v4[1];
      unint64_t v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v9 = ((char *)v7 - (unsigned char *)*v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v6 - (void)*v4;
        uint64_t v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
          uint64_t v11 = v9 + 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        }
        else {
          a2 = 0;
        }
        mach_port_t v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        std::__shared_weak_count *v13 = v5;
        __int16 v8 = v13 + 1;
        uint64_t v15 = (char *)*v4;
        uint64_t v14 = (char *)v4[1];
        if (v14 != *v4)
        {
          do
          {
            uint64_t v16 = (HALS_ObjectMap *)*((void *)v14 - 1);
            v14 -= 8;
            *--mach_port_t v13 = v16;
          }
          while (v14 != v15);
          uint64_t v14 = (char *)*v4;
        }
        *uint64_t v4 = v13;
        v4[1] = v8;
        _OWORD v4[2] = (void *)(v12 + 8 * (void)a2);
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        HALS_ObjectMap *v7 = v5;
        __int16 v8 = v7 + 1;
      }
      v4[1] = v8;
      ++v2;
    }
    while (v2 != v3);
  }
}

void HALS_IOUABox::SetPropertyData(HALS_IOUABox *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, const AudioObjectPropertyAddress *a5, unsigned int a6, void *a7, HALS_Client *a8)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (a3->mSelector == 1652060014)
  {
    if (a4 <= 3)
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v22 = **(NSObject ***)buf;
      if (*(void *)v39) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v39);
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        long long v23 = pthread_self();
        mach_port_t v24 = pthread_mach_thread_np(v23);
        *(_DWORD *)long long buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v24;
        *(_WORD *)uint64_t v39 = 2080;
        *(void *)&double v39[2] = "HALS_IOUABox.cpp";
        __int16 v40 = 1024;
        int v41 = 349;
        __int16 v42 = 2080;
        *(void *)uint64_t v43 = "inDataSize < SizeOf32(UInt32)";
        _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s bad property data size for kAudioBoxPropertyAcquired", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v37);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v30, "kAudioHardwareBadPropertySizeError");
      std::runtime_error::runtime_error(&v31, &v30);
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      int v36 = -1;
      v31.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      uint64_t v32 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v31);
      *(void *)&v43[6] = "virtual void HALS_IOUABox::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &,"
                           " UInt32, const void *, UInt32, const void *, HALS_Client *)";
      uint64_t v44 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUABox.cpp";
      int v45 = 349;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v25);
      uint64_t v27 = &unk_1F148AA90;
      long long v28 = v25;
      uint64_t v29 = v26;
      long long v25 = 0uLL;
      uint64_t v26 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    uint64_t v12 = *((void *)this + 43);
    mach_port_t v13 = *(HALS_IOUAUCDriver **)(v12 + 792);
    uint64_t v14 = *(std::__shared_weak_count **)(v12 + 800);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    HALS_IOUAUCDriver::SetPropertyData(v13, a3, *((_DWORD *)this + 88), a7, a6, a5, a4);
    if (v14)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  else
  {
    if (HALS_Box::HasProperty((uint64_t)this, a2, (int *)a3)) {
      HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v17, (uint64_t)v18, v19, (uint64_t)v20, (uint64_t)a8);
    }
    HALS_IOUAObject::SetPropertyData((HALS_IOUABox *)((char *)this + 336), &a3->mSelector, a5, (CFTypeRef *)a7, v18, v19, v20, v21);
  }
}

void sub_1BAD6AFC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOUABox::GetPropertyData(HALS_IOUABox *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, AudioObjectPropertyAddress *a5, uint64_t *a6, unsigned int a7, void *a8, HALS_Client *a9)
{
  uint64_t v11 = a6;
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1751737453)
  {
    if (mSelector > 1819111267)
    {
      if (mSelector > 1851878763)
      {
        if (mSelector == 1953653102 || mSelector == 1920168547) {
          goto LABEL_60;
        }
        int v28 = 1851878764;
      }
      else
      {
        if (mSelector == 1819111268 || mSelector == 1819173229) {
          goto LABEL_54;
        }
        int v28 = 1836411236;
      }
    }
    else
    {
      if (mSelector <= 1818850144)
      {
        if (mSelector == 1751737454 || mSelector == 1768124270) {
          goto LABEL_60;
        }
        int v26 = 1768777573;
        goto LABEL_48;
      }
      if (mSelector == 1818850145 || mSelector == 1818850162) {
        goto LABEL_60;
      }
      int v28 = 1819107691;
    }
    if (mSelector != v28) {
      goto LABEL_92;
    }
    goto LABEL_54;
  }
  if (mSelector > 1651536494)
  {
    if (mSelector <= 1652060013)
    {
      if (mSelector == 1651536495)
      {
LABEL_35:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CFTypeRef cf = 136315394;
            *(void *)&cf[4] = "HALS_IOUABox.cpp";
            *(_WORD *)&cf[12] = 1024;
            *(_DWORD *)&cf[14] = 248;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOUABox::GetPropertyData: bad property data size", cf, 0x12u);
          }
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "kAudioHardwareBadPropertySizeError");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        *(void *)CFTypeRef cf = a4;
        uint64_t v29 = *((void *)this + 43);
        uint64_t v30 = *(void *)(v29 + 792);
        std::runtime_error v31 = *(std::__shared_weak_count **)(v29 + 800);
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v30 + 4), a3, *((_DWORD *)this + 88), a8, a7, a6, (unint64_t *)cf);
        if (v31) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
        unsigned int v32 = 4;
LABEL_41:
        a5->signed int mSelector = v32;
        return;
      }
      if (mSelector != 1651861860)
      {
        int v27 = 1652060006;
        goto LABEL_34;
      }
LABEL_54:
      uint64_t v33 = *((void *)this + 43);
      uint64_t v34 = *(void *)(v33 + 792);
      uint64_t v35 = *(std::__shared_weak_count **)(v33 + 800);
      if (v35) {
        atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)&long long v86 = *((unsigned int *)this + 88);
      *((void *)&v86 + 1) = *(void *)&a3->mSelector;
      HALS_IOUAUCDriver::get_string_property((HALS_IOUAUCDriver *)cf, v34, v86, (void *)a3->mElement, a8, a7);
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      *uint64_t v11 = (uint64_t)CFRetain(*(CFTypeRef *)cf);
      a5->signed int mSelector = 8;
      if (*(void *)cf) {
        CFRelease(*(CFTypeRef *)cf);
      }
      return;
    }
    if (mSelector == 1652060014)
    {
      if (a4 <= 3)
      {
        AMCP::Log::Scope_Registry::get(this);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        uint64_t v60 = **(NSObject ***)cf;
        if (*(void *)&cf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&cf[8]);
        }
        if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
        {
          std::logic_error v61 = pthread_self();
          mach_port_t v62 = pthread_mach_thread_np(v61);
          *(_DWORD *)CFTypeRef cf = 67109890;
          *(_DWORD *)&cf[4] = v62;
          *(_WORD *)&cf[8] = 2080;
          *(void *)&cf[10] = "HALS_IOUABox.cpp";
          __int16 v78 = 1024;
          int v79 = 307;
          __int16 v80 = 2080;
          *(void *)long long v81 = "inDataSize < SizeOf32(UInt32)";
          _os_log_error_impl(&dword_1BAA78000, v60, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s bad property data size", cf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v76);
        __cxa_allocate_exception(0x40uLL);
        std::runtime_error::runtime_error(&v69, "kAudioBoxPropertyAcquired");
        std::runtime_error::runtime_error(&outputStruct, &v69);
        uint64_t v72 = 0;
        uint64_t v73 = 0;
        uint64_t v74 = 0;
        int v75 = -1;
        outputStruct.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        uint64_t v71 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)cf, (uint64_t)&outputStruct);
        *(void *)&v81[6] = "virtual void HALS_IOUABox::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress "
                             "&, UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
        uint64_t v82 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUABox.cpp";
        int v83 = 307;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v64);
        long long v66 = &unk_1F148AA90;
        long long v67 = v64;
        uint64_t v68 = v65;
        long long v64 = 0uLL;
        uint64_t v65 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      a5->signed int mSelector = 4;
      *(void *)CFTypeRef cf = 4;
      LODWORD(outputStruct.__vftable) = 0;
      uint64_t v54 = *((void *)this + 43);
      uint64_t v55 = *(void *)(v54 + 792);
      mach_port_t v56 = *(std::__shared_weak_count **)(v54 + 800);
      if (v56) {
        atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v55 + 4), a3, *((_DWORD *)this + 88), a8, a7, &outputStruct, (unint64_t *)cf);
      if (v56) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v56);
      }
      *(_DWORD *)uint64_t v11 = outputStruct.__vftable;
      return;
    }
    if (mSelector == 1668641652)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 46) - *((void *)this + 45)) >> 2) >= a4 / 0xCuLL) {
        unint64_t v47 = a4 / 0xCuLL;
      }
      else {
        unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 46) - *((void *)this + 45)) >> 2);
      }
      if (v47)
      {
        uint64_t v48 = 0;
        unint64_t v49 = 0;
        do
        {
          uint64_t v50 = *((void *)this + 45);
          if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 46) - v50) >> 2) > v49)
          {
            uint64_t v51 = (char *)a6 + v48;
            uint64_t v52 = (uint64_t *)(v50 + v48);
            uint64_t v53 = *v52;
            *((_DWORD *)v51 + 2) = *((_DWORD *)v52 + 2);
            *(void *)uint64_t v51 = v53;
          }
          ++v49;
          v48 += 12;
        }
        while (12 * v47 != v48);
      }
      unsigned int v32 = 12 * v47;
      goto LABEL_41;
    }
    int v26 = 1751412337;
LABEL_48:
    if (mSelector == v26) {
      goto LABEL_60;
    }
    goto LABEL_92;
  }
  if (mSelector > 1651007860)
  {
    if (mSelector == 1651007861 || mSelector == 1651010921) {
      goto LABEL_35;
    }
    int v27 = 1651013225;
LABEL_34:
    if (mSelector == v27) {
      goto LABEL_35;
    }
LABEL_92:
    if (HALS_Box::HasProperty((uint64_t)this, a2, (int *)a3))
    {
      HALS_Box::GetPropertyData(this, a2, a3, a4, &a5->mSelector, v11, a7, (uint64_t *)a8, a9);
    }
    else
    {
      HALS_IOUAObject::GetPropertyData((HALS_IOUABox *)((char *)this + 336), &a3->mSelector, a5, (AMCP::Log::Scope_Registry **)v11, (unsigned int *)a8, v57, v58, v59, a9);
    }
    return;
  }
  if (mSelector == 1634429294)
  {
LABEL_60:
    *(void *)CFTypeRef cf = a4;
    uint64_t v36 = *((void *)this + 43);
    uint64_t v37 = *(void *)(v36 + 792);
    uint64_t v38 = *(std::__shared_weak_count **)(v36 + 800);
    if (v38) {
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v37 + 4), a3, *((_DWORD *)this + 88), a8, a7, a6, (unint64_t *)cf);
    if (v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v38);
    }
    a5->signed int mSelector = *(_DWORD *)cf;
    return;
  }
  if (mSelector != 1650682915)
  {
    if (mSelector == 1650751011)
    {
      *(void *)CFTypeRef cf = a5->mSelector;
      uint64_t v18 = *((void *)this + 43);
      uint64_t v19 = *(void *)(v18 + 792);
      uint64_t v20 = *(std::__shared_weak_count **)(v18 + 800);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v19 + 4), a3, *((_DWORD *)this + 88), a8, a7, a6, (unint64_t *)cf);
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      unint64_t v21 = a5->mSelector;
      if (v21 >= 4)
      {
        unint64_t v22 = v21 >> 2;
        do
        {
          long long v23 = (HALS_ObjectMap *)HALS_IOUADriver::CopyDeviceByUCID(*((HALS_IOUADriver **)this + 43), *(_DWORD *)v11);
          if (v23) {
            int v25 = *((_DWORD *)v23 + 4);
          }
          else {
            int v25 = 0;
          }
          *(_DWORD *)uint64_t v11 = v25;
          HALS_ObjectMap::ReleaseObject(v23, v24);
          uint64_t v11 = (uint64_t *)((char *)v11 + 4);
          --v22;
        }
        while (v22);
      }
      return;
    }
    goto LABEL_92;
  }
  *(void *)CFTypeRef cf = a5->mSelector;
  uint64_t v39 = *((void *)this + 43);
  uint64_t v40 = *(void *)(v39 + 792);
  int v41 = *(std::__shared_weak_count **)(v39 + 800);
  if (v41) {
    atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v40 + 4), a3, *((_DWORD *)this + 88), a8, a7, a6, (unint64_t *)cf);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  unint64_t v42 = a5->mSelector;
  if (v42 >= 4)
  {
    unint64_t v43 = v42 >> 2;
    do
    {
      uint64_t v44 = (HALS_ObjectMap *)HALS_IOUADriver::CopyClockDeviceByUCID(*((HALS_IOUADriver **)this + 43), *(_DWORD *)v11);
      if (v44) {
        int v46 = *((_DWORD *)v44 + 4);
      }
      else {
        int v46 = 0;
      }
      *(_DWORD *)uint64_t v11 = v46;
      HALS_ObjectMap::ReleaseObject(v44, v45);
      uint64_t v11 = (uint64_t *)((char *)v11 + 4);
      --v43;
    }
    while (v43);
  }
}

void sub_1BAD6B974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOUABox::GetPropertyDataSize(HALS_IOUABox *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, const void *a5, HALS_Client *a6)
{
  signed int mSelector = a3->mSelector;
  uint64_t PropertySize = 8;
  if ((int)a3->mSelector <= 1768777572)
  {
    if (mSelector > 1652060013)
    {
      if (mSelector <= 1751412336)
      {
        if (mSelector != 1652060014)
        {
          if (mSelector != 1668641652) {
            goto LABEL_35;
          }
          return (*((_DWORD *)this + 92) - *((_DWORD *)this + 90)) & 0xFFFFFFFC;
        }
LABEL_22:
        uint64_t v16 = *((void *)this + 43);
        uint64_t v17 = *(void *)(v16 + 792);
        uint64_t v18 = *(std::__shared_weak_count **)(v16 + 800);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v17 + 4), a3, *((_DWORD *)this + 88), a5, a4);
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        return PropertySize;
      }
      if (mSelector == 1751412337 || mSelector == 1751737454) {
        goto LABEL_22;
      }
      int v15 = 1768124270;
LABEL_21:
      if (mSelector != v15) {
        goto LABEL_35;
      }
      goto LABEL_22;
    }
    if (mSelector <= 1650751010)
    {
      if (mSelector == 1634429294) {
        goto LABEL_22;
      }
      int v15 = 1650682915;
      goto LABEL_21;
    }
    if (mSelector == 1650751011) {
      goto LABEL_22;
    }
    int v14 = 1651861860;
  }
  else
  {
    if (mSelector <= 1819173228)
    {
      if (mSelector > 1818850161)
      {
        if (mSelector != 1818850162)
        {
          if (mSelector != 1819107691)
          {
            int v14 = 1819111268;
            goto LABEL_33;
          }
          return PropertySize;
        }
        goto LABEL_22;
      }
      if (mSelector == 1768777573) {
        goto LABEL_22;
      }
      int v15 = 1818850145;
      goto LABEL_21;
    }
    if (mSelector > 1851878763)
    {
      if (mSelector == 1851878764) {
        return PropertySize;
      }
      if (mSelector == 1953653102) {
        goto LABEL_22;
      }
      int v15 = 1920168547;
      goto LABEL_21;
    }
    if (mSelector == 1819173229) {
      return PropertySize;
    }
    int v14 = 1836411236;
  }
LABEL_33:
  if (mSelector == v14) {
    return PropertySize;
  }
LABEL_35:
  if (HALS_Box::HasProperty((uint64_t)this, a2, (int *)a3))
  {
    return HALS_Box::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
  }
  else
  {
    return HALS_IOUAObject::GetPropertyDataSize((HALS_IOUABox *)((char *)this + 336), a3, v20, v21, v22, v23);
  }
}

void sub_1BAD6BD20(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOUABox::IsPropertySettable(HALS_IOUABox *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1768777572)
  {
    if (mSelector > 1819173228)
    {
      if (mSelector <= 1851878763)
      {
        BOOL v8 = mSelector == 1819173229;
        int v9 = 1836411236;
      }
      else
      {
        BOOL v8 = mSelector == 1851878764 || mSelector == 1953653102;
        int v9 = 1920168547;
      }
    }
    else if (mSelector <= 1818850161)
    {
      BOOL v8 = mSelector == 1768777573;
      int v9 = 1818850145;
    }
    else
    {
      BOOL v8 = mSelector == 1818850162 || mSelector == 1819107691;
      int v9 = 1819111268;
    }
    goto LABEL_28;
  }
  BOOL IsPropertySettable = 0;
  if (mSelector <= 1652060013)
  {
    if (mSelector > 1650751010)
    {
      if (mSelector != 1650751011)
      {
        if (mSelector != 1651861860) {
          goto LABEL_40;
        }
        goto LABEL_33;
      }
      return IsPropertySettable;
    }
    if (mSelector != 1634429294)
    {
      int v11 = 1650682915;
      goto LABEL_25;
    }
LABEL_33:
    uint64_t v13 = *((void *)this + 43);
    uint64_t v14 = *(void *)(v13 + 792);
    int v15 = *(std::__shared_weak_count **)(v13 + 800);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL IsPropertySettable = HALS_IOUAUCDriver::GetIsPropertySettable((HALS_IOUAUCDriver *)*(unsigned int *)(v14 + 4), a3, *((_DWORD *)this + 88));
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    return IsPropertySettable;
  }
  if (mSelector <= 1751412336)
  {
    if (mSelector != 1652060014)
    {
      int v11 = 1668641652;
LABEL_25:
      if (mSelector != v11) {
        goto LABEL_40;
      }
      return IsPropertySettable;
    }
    goto LABEL_33;
  }
  BOOL v8 = mSelector == 1751412337 || mSelector == 1751737454;
  int v9 = 1768124270;
LABEL_28:
  if (v8 || mSelector == v9) {
    goto LABEL_33;
  }
LABEL_40:
  if (HALS_Box::HasProperty((uint64_t)this, a2, (int *)a3))
  {
    return HALS_Box::IsPropertySettable((uint64_t)this, a2, (int *)a3);
  }
  else
  {
    return HALS_IOUAObject::IsPropertySettable((HALS_IOUABox *)((char *)this + 336), a3, v17, v18);
  }
}

void sub_1BAD6BFA4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOUABox::HasProperty(HALS_IOUABox *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1768777572)
  {
    if (mSelector <= 1819173228)
    {
      BOOL v6 = mSelector == 1768777573 || mSelector == 1819107691;
      int v7 = 1819111268;
    }
    else if (mSelector > 1920168546)
    {
      BOOL v6 = mSelector == 1953653102;
      int v7 = 1920168547;
    }
    else
    {
      BOOL v6 = mSelector == 1819173229;
      int v7 = 1851878764;
    }
    goto LABEL_20;
  }
  if (mSelector <= 1651861859)
  {
    BOOL v6 = mSelector == 1634429294 || mSelector == 1650682915;
    int v7 = 1650751011;
LABEL_20:
    if (!v6 && mSelector != v7) {
      goto LABEL_17;
    }
LABEL_25:
    uint64_t v10 = *((void *)this + 43);
    uint64_t v11 = *(void *)(v10 + 792);
    uint64_t v12 = *(std::__shared_weak_count **)(v10 + 800);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL HasProperty = HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)*(unsigned int *)(v11 + 4), a3, *((_DWORD *)this + 88));
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    return HasProperty;
  }
  switch(mSelector)
  {
    case 1651861860:
      goto LABEL_25;
    case 1668641652:
      return *((void *)this + 46) != *((void *)this + 45);
    case 1768124270:
      goto LABEL_25;
  }
LABEL_17:
  if (HALS_Box::HasProperty((uint64_t)this, a2, (int *)a3)) {
    return 1;
  }
  uint64_t v14 = *(uint64_t (**)(void))(*((void *)this + 42) + 16);

  return v14();
}

void sub_1BAD6C178(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOUABox::_Deactivate(HALS_IOUABox *this)
{
  uint64_t v2 = (HALS_ObjectMap **)*((void *)this + 48);
  unint64_t v3 = (HALS_ObjectMap **)*((void *)this + 49);
  if (v2 != v3)
  {
    do
    {
      (*(void (**)(void))(*(void *)*v2 + 8))();
      uint64_t v4 = *v2++;
      HALS_ObjectMap::ObjectIsDead(v4, v5);
    }
    while (v2 != v3);
    uint64_t v2 = (HALS_ObjectMap **)*((void *)this + 48);
  }
  *((void *)this + 49) = v2;
  *((_DWORD *)this + 2) = 0;
}

void HALS_IOUABox::Activate(HALS_IOUABox *this)
{
  HALS_IOUABox::UpdateControls(this);
  (*(void (**)(void))(*((void *)this + 42) + 24))();

  HALS_Object::Activate(this, v2);
}

void HALS_IOUABox::UpdateControls(HALS_IOUABox *this)
{
  uint64_t v44 = 0;
  int v45 = &v44;
  uint64_t v46 = 0x2000000000;
  char v47 = 0;
  uint64_t v2 = *((void *)this + 43);
  uint64_t v3 = *(void *)(v2 + 792);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 800);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v3 + 4), (const AudioObjectPropertyAddress *)"lrtcbolg", *((_DWORD *)this + 88), 0, 0);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (PropertySize >= 4)
  {
    std::vector<unsigned int>::vector(&v43, PropertySize >> 2);
    std::vector<unsigned int>::pointer begin = v43.__begin_;
    unint64_t v35 = (char *)v43.__end_ - (char *)v43.__begin_;
    uint64_t v9 = *((void *)this + 43);
    uint64_t v10 = *(void *)(v9 + 792);
    uint64_t v11 = *(std::__shared_weak_count **)(v9 + 800);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v10 + 4), (const AudioObjectPropertyAddress *)"lrtcbolg", *((_DWORD *)this + 88), 0, 0, begin, &v35);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    std::vector<unsigned int>::pointer v7 = v43.__begin_;
    std::vector<unsigned int>::pointer end = v43.__end_;
  }
  else
  {
    std::vector<unsigned int>::pointer end = 0;
    std::vector<unsigned int>::pointer v7 = 0;
    memset(&v43, 0, sizeof(v43));
  }
  unint64_t v35 = 0;
  uint64_t v36 = &v35;
  uint64_t v37 = 0x4002000000;
  uint64_t v38 = __Block_byref_object_copy__8916;
  uint64_t v39 = __Block_byref_object_dispose__8917;
  uint64_t v40 = 0;
  int v41 = 0;
  uint64_t v42 = 0;
  uint64_t v27 = 0;
  int v28 = &v27;
  uint64_t v29 = 0x4002000000;
  uint64_t v30 = __Block_byref_object_copy__8916;
  std::runtime_error v31 = __Block_byref_object_dispose__8917;
  unsigned int v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 1174405120;
  v23[2] = ___ZN12HALS_IOUABox14UpdateControlsEv_block_invoke;
  v23[3] = &unk_1F1470D38;
  v23[7] = this;
  std::string __p = 0;
  v23[4] = &v44;
  int v25 = 0;
  uint64_t v26 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v7, (uint64_t)end, end - v7);
  v23[5] = &v35;
  v23[6] = &v27;
  uint64_t v12 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUABox *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v12, (uint64_t)v23);
  uint64_t v17 = (void *)v36[5];
  uint64_t v18 = (void *)v36[6];
  while (v17 != v18)
  {
    (**(void (***)(void, uint64_t, uint64_t, uint64_t, uint64_t))*v17)(*v17, v13, v14, v15, v16);
    ++v17;
  }
  uint64_t v19 = (HALS_IOUAControl **)v28[5];
  for (uint64_t i = (HALS_IOUAControl **)v28[6]; v19 != i; ++v19)
  {
    uint64_t v21 = *v19;
    if (HALS_IOUAControl::RefreshCache(*v19)) {
      *((unsigned char *)v45 + 24) = 1;
    }
    HALS_ObjectMap::ReleaseObject(v21, v22);
  }
  if (__p)
  {
    int v25 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v27, 8);
  if (v32)
  {
    uint64_t v33 = v32;
    operator delete(v32);
  }
  _Block_object_dispose(&v35, 8);
  if (v40)
  {
    int v41 = v40;
    operator delete(v40);
  }
  if (v43.__begin_)
  {
    v43.__end_ = v43.__begin_;
    operator delete(v43.__begin_);
  }
  _Block_object_dispose(&v44, 8);
}

void sub_1BAD6C5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  uint64_t v37 = *(void **)(v35 - 104);
  if (v37)
  {
    *(void *)(v35 - 96) = v37;
    operator delete(v37);
  }
  _Block_object_dispose((const void *)(v35 - 80), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__8916(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__8917(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN12HALS_IOUABox14UpdateControlsEv_block_invoke(void *a1, HALS_Object *a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[8];
  uint64_t v3 = (void *)a1[7];
  unint64_t v4 = a1[9] - v2;
  uint64_t v5 = *(void *)(a1[5] + 8);
  BOOL v6 = (HALS_ObjectMap **)v3[48];
  std::vector<unsigned int>::pointer v7 = (char *)v3[49];
  if (v6 != (HALS_ObjectMap **)v7)
  {
    BOOL v8 = (char *)v3[48];
    do
    {
      uint64_t v9 = *(void *)v8;
      v8 += 8;
      *(unsigned char *)(v9 + 13) = 0;
    }
    while (v8 != v7);
  }
  if ((v4 & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (v4 >> 2);
    while (1)
    {
      uint64_t v12 = v3[48];
      uint64_t v13 = v3[49];
      if (v12 != v13)
      {
        while (!*(void *)v12 || *(_DWORD *)(*(void *)v12 + 88) != *(_DWORD *)(v2 + 4 * v10))
        {
          v12 += 8;
          if (v12 == v13) {
            goto LABEL_13;
          }
        }
      }
      if (v12 == v13)
      {
LABEL_13:
        unsigned int v14 = *(_DWORD *)(v2 + 4 * v10);
        if (v14)
        {
          uint64_t v15 = v3[43];
          uint64_t v16 = *(void *)(v15 + 792);
          uint64_t v17 = *(std::__shared_weak_count **)(v15 + 800);
          if (v17) {
            atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int outputStruct = 0;
          unint64_t v52 = 4;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v16 + 4), (const AudioObjectPropertyAddress *)"salcbolg", v14, 0, 0, &outputStruct, &v52);
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
          uint64_t v18 = v3[43];
          uint64_t v19 = *(void *)(v18 + 792);
          uint64_t v20 = *(std::__shared_weak_count **)(v18 + 800);
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v55 = 0;
          unint64_t v54 = 4;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v19 + 4), (const AudioObjectPropertyAddress *)"slcbbolg", v14, 0, 0, &v55, &v54);
          if (v20) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          }
          uint64_t v21 = v3[43];
          uint64_t v22 = *(void *)(v21 + 792);
          long long v23 = *(std::__shared_weak_count **)(v21 + 800);
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v57 = 0;
          unint64_t v56 = 4;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v22 + 4), (const AudioObjectPropertyAddress *)"pcscbolg", v14, 0, 0, &v57, &v56);
          if (v23) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          }
          uint64_t v24 = v3[43];
          uint64_t v25 = *(void *)(v24 + 792);
          uint64_t v26 = *(std::__shared_weak_count **)(v24 + 800);
          if (v26) {
            atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v59 = 0;
          unint64_t v58 = 4;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v25 + 4), (const AudioObjectPropertyAddress *)"mlecbolg", v14, 0, 0, &v59, &v58);
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          operator new();
        }
      }
      else
      {
        *(unsigned char *)(*(void *)v12 + 13) = 1;
      }
      if (++v10 == v11)
      {
        BOOL v6 = (HALS_ObjectMap **)v3[48];
        std::vector<unsigned int>::pointer v7 = (char *)v3[49];
        goto LABEL_36;
      }
    }
  }
  while (1)
  {
LABEL_36:
    if (v6 == (HALS_ObjectMap **)v7)
    {
      char v28 = 0;
      goto LABEL_47;
    }
    uint64_t v27 = *v6;
    if (*v6)
    {
      if (!*((unsigned char *)v27 + 13)) {
        break;
      }
    }
    ++v6;
  }
  (*(void (**)(HALS_ObjectMap *))(*(void *)v27 + 8))(v27);
  HALS_ObjectMap::ObjectIsDead(*v6, v29);
  char v28 = 1;
  if (v6 != (HALS_ObjectMap **)v7)
  {
    uint64_t v30 = v6 + 1;
    if (v6 + 1 != (HALS_ObjectMap **)v7)
    {
      do
      {
        std::runtime_error v31 = *v30;
        if (*v30 && !*((unsigned char *)v31 + 13))
        {
          (*(void (**)(HALS_ObjectMap *))(*(void *)v31 + 8))(v31);
          HALS_ObjectMap::ObjectIsDead(*v30, v32);
        }
        else
        {
          *v6++ = v31;
        }
        ++v30;
      }
      while (v30 != (HALS_ObjectMap **)v7);
      char v28 = 1;
    }
  }
  std::vector<unsigned int>::pointer v7 = (char *)v6;
LABEL_47:
  uint64_t v33 = (char **)(v3 + 48);
  if (v7 != (char *)v3[49])
  {
    a2 = (HALS_Object *)v3[49];
    v3[49] = v7;
  }
  uint64_t v36 = v5 + 40;
  uint64_t v35 = *(uint64_t **)(v5 + 40);
  uint64_t v34 = *(uint64_t **)(v36 + 8);
  if (v34 != v35)
  {
    do
    {
      uint64_t v37 = *v35;
      unint64_t v38 = v3[50];
      if ((unint64_t)v7 >= v38)
      {
        uint64_t v39 = (v7 - *v33) >> 3;
        if ((unint64_t)(v39 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v40 = v38 - (void)*v33;
        uint64_t v41 = v40 >> 2;
        if (v40 >> 2 <= (unint64_t)(v39 + 1)) {
          uint64_t v41 = v39 + 1;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v41;
        }
        if (v42) {
          unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v42);
        }
        else {
          a2 = 0;
        }
        std::vector<unsigned int> v43 = (void *)(v42 + 8 * v39);
        *std::vector<unsigned int> v43 = v37;
        std::vector<unsigned int>::pointer v7 = (char *)(v43 + 1);
        int v45 = (char *)v3[48];
        uint64_t v44 = (char *)v3[49];
        if (v44 != v45)
        {
          do
          {
            uint64_t v46 = *((void *)v44 - 1);
            v44 -= 8;
            *--std::vector<unsigned int> v43 = v46;
          }
          while (v44 != v45);
          uint64_t v44 = *v33;
        }
        v3[48] = v43;
        v3[49] = v7;
        v3[50] = v42 + 8 * (void)a2;
        if (v44) {
          operator delete(v44);
        }
      }
      else
      {
        *(void *)std::vector<unsigned int>::pointer v7 = v37;
        v7 += 8;
      }
      v3[49] = v7;
      ++v35;
    }
    while (v35 != v34);
    char v28 = 1;
  }
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = v28;
  uint64_t v47 = *(void *)(a1[6] + 8);
  if (v33 != (char **)(v47 + 40)) {
    std::vector<HALS_IOUAControl *>::__assign_with_size[abi:ne180100]<HALS_IOUAControl **,HALS_IOUAControl **>((void *)(v47 + 40), *v33, v7, (v7 - *v33) >> 3);
  }
  uint64_t v48 = *(HALS_ObjectMap ***)(v47 + 40);
  unint64_t v49 = *(HALS_ObjectMap ***)(v47 + 48);
  while (v48 != v49)
  {
    uint64_t v50 = *v48++;
    HALS_ObjectMap::RetainObject(v50, a2);
  }
}

void sub_1BAD6CD50(_Unwind_Exception *a1)
{
}

void sub_1BAD6CD5C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void AMCP::Graph::Synchronized_Mixer_Manager::get_mixer(unint64_t a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4, const AMCP::DAL::DAL_Time_Delta *a5)
{
  uint64_t v7 = (uint64_t)a3;
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>((void *)a2, a3);
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = v10[7];
    uint64_t v13 = *(void *)(v12 + 88);
    if (v13)
    {
      double v14 = *(double *)(v13 + 8);
      int32x4_t v15 = *(int32x4_t *)(v13 + 16);
      int v16 = *(_DWORD *)(v13 + 32);
      int v17 = *(_DWORD *)(v13 + 36);
      LODWORD(v13) = *(_DWORD *)(v13 + 40);
    }
    else
    {
      int v16 = 0;
      int v17 = 0;
      int32x4_t v15 = 0uLL;
      double v14 = 0.0;
    }
    BOOL v18 = v16 == *(_DWORD *)(a4 + 24);
    BOOL v19 = v17 == *(_DWORD *)(a4 + 28);
    int v20 = ~vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(vceqq_s32(v15, *(int32x4_t *)(a4 + 8)), 0x1FuLL)), (int8x16_t)xmmword_1BAFF9640)) & 0xF;
    BOOL v21 = v14 == *(double *)a4 && v20 == 0;
    if (v21 && v18 && v19 && v13 == *(_DWORD *)(a4 + 32)) {
      goto LABEL_194;
    }
  }
  uint64_t v22 = (void **)(a2 + 40);
  long long v23 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>((void *)(a2 + 40), (unsigned __int8 *)v7);
  uint64_t v109 = (void *)a1;
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = v7;
    uint64_t v26 = *((void *)v23 + 5);
    uint64_t v27 = *(void *)(v26 + 48);
    char v28 = *(std::__shared_weak_count **)(v26 + 56);
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v30 = *((void *)a5 + 3);
    uint64_t v29 = (std::__shared_weak_count *)*((void *)a5 + 4);
    if (v29)
    {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    BOOL v21 = v27 == v30;
    uint64_t v7 = v25;
    if (!v21)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v29);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      std::runtime_error v31 = *(NSObject **)buf.__r_.__value_.__l.__data_;
      if (buf.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        unsigned int v32 = pthread_self();
        mach_port_t v33 = pthread_mach_thread_np(v32);
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v33;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Synchronized_Mixer_Manager.cpp";
        WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(buf.__r_.__value_.__r.__words[2]) = 54;
        LOWORD(v126) = 2080;
        *(void *)((char *)&v126 + 2) = "not ((*found).second->get_timebase() == buffer_size.get_clock())";
        _os_log_error_impl(&dword_1BAA78000, v31, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Wrong time base for synchronizer", (uint8_t *)&buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v124);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Wrong time base for synchronizer", (uint64_t)&v116);
      std::logic_error::logic_error(&v117, &v116);
      v117.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v118, &v117);
      uint64_t v120 = 0;
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      int v123 = -1;
      v118.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      uint64_t v119 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v118);
      *((void *)&v126 + 1) = "Synchronizer_Ref AMCP::Graph::Synchronized_Mixer_Manager::get_synchronizer_for_node(const"
                               " Graph_Node_UID &, const DAL::DAL_Time_Delta &)";
      BOOL v127 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Synchronized_Mixer_Manager.cpp";
      int v128 = 54;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v111);
      long long v114 = v111;
      uint64_t v115 = v112;
      long long v111 = 0uLL;
      uint64_t v112 = 0;
      __int16 v113 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    goto LABEL_111;
  }
  uint64_t v34 = (std::__shared_weak_count *)*((void *)a5 + 4);
  __int16 v113 = (void *)*((void *)a5 + 3);
  *(void *)&long long v114 = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v35 = (std::__shared_weak_count *)operator new(0xC8uLL);
  v35->__shared_owners_ = 0;
  v35->__shared_weak_owners_ = 0;
  v35->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1470E18;
  *(void *)&long long v36 = AMCP::DAL::Synchronizer::Synchronizer((uint64_t)&v35[1], &v113);
  *((void *)&v36 + 1) = v35;
  long long v107 = v36;
  if (*(char *)(v7 + 23) < 0) {
    std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
  }
  else {
    std::string buf = *(std::string *)v7;
  }
  long long v106 = a5;
  long long v126 = v107;
  unint64_t v37 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&buf);
  unint64_t v38 = v37;
  unint64_t v39 = *(void *)(a2 + 48);
  if (v39)
  {
    uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v39);
    v40.i16[0] = vaddlv_u8(v40);
    unint64_t v41 = v40.u32[0];
    if (v40.u32[0] > 1uLL)
    {
      a1 = v37;
      if (v37 >= v39) {
        a1 = v37 % v39;
      }
    }
    else
    {
      a1 = (v39 - 1) & v37;
    }
    unint64_t v42 = (unsigned __int8 **)*((void *)*v22 + a1);
    if (v42)
    {
      uint64_t v105 = v7;
      std::vector<unsigned int> v43 = *v42;
      if (!*v42)
      {
        uint64_t v7 = v105;
        goto LABEL_50;
      }
      while (1)
      {
        unint64_t v44 = *((void *)v43 + 1);
        if (v44 == v38)
        {
          if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v43 + 16, (unsigned __int8 *)&buf))
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v35);
            uint64_t v7 = v105;
            a5 = v106;
            goto LABEL_106;
          }
        }
        else
        {
          if (v41 > 1)
          {
            if (v44 >= v39) {
              v44 %= v39;
            }
          }
          else
          {
            v44 &= v39 - 1;
          }
          if (v44 != a1)
          {
LABEL_48:
            uint64_t v7 = v105;
            break;
          }
        }
        std::vector<unsigned int> v43 = *(unsigned __int8 **)v43;
        if (!v43) {
          goto LABEL_48;
        }
      }
    }
  }
LABEL_50:
  int v45 = (char *)operator new(0x38uLL);
  uint64_t v46 = (void (__cdecl **)(std::logic_error *__hidden))(a2 + 56);
  v118.__vftable = (std::logic_error_vtbl *)v45;
  v118.__imp_.__imp_ = (const char *)(a2 + 56);
  *(void *)int v45 = 0;
  *((void *)v45 + 1) = v38;
  *(std::string *)(v45 + 16) = buf;
  memset(&buf, 0, sizeof(buf));
  *(_OWORD *)(v45 + 40) = v107;
  long long v126 = 0uLL;
  LOBYTE(v119) = 1;
  float v47 = (float)(unint64_t)(*(void *)(a2 + 64) + 1);
  float v48 = *(float *)(a2 + 72);
  if (!v39 || (float)(v48 * (float)v39) < v47)
  {
    BOOL v49 = 1;
    if (v39 >= 3) {
      BOOL v49 = (v39 & (v39 - 1)) != 0;
    }
    unint64_t v50 = v49 | (2 * v39);
    unint64_t v51 = vcvtps_u32_f32(v47 / v48);
    if (v50 <= v51) {
      int8x8_t prime = (int8x8_t)v51;
    }
    else {
      int8x8_t prime = (int8x8_t)v50;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v39 = *(void *)(a2 + 48);
    }
    if (*(void *)&prime > v39) {
      goto LABEL_62;
    }
    if (*(void *)&prime < v39)
    {
      unint64_t v59 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 64) / *(float *)(a2 + 72));
      if (v39 < 3 || (uint8x8_t v60 = (uint8x8_t)vcnt_s8((int8x8_t)v39), v60.i16[0] = vaddlv_u8(v60), v60.u32[0] > 1uLL))
      {
        unint64_t v59 = std::__next_prime(v59);
      }
      else
      {
        uint64_t v61 = 1 << -(char)__clz(v59 - 1);
        if (v59 >= 2) {
          unint64_t v59 = v61;
        }
      }
      if (*(void *)&prime <= v59) {
        int8x8_t prime = (int8x8_t)v59;
      }
      if (*(void *)&prime >= v39)
      {
        unint64_t v39 = *(void *)(a2 + 48);
      }
      else
      {
        if (prime)
        {
LABEL_62:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v53 = operator new(8 * *(void *)&prime);
          unint64_t v54 = *v22;
          HALS_Object *v22 = v53;
          if (v54) {
            operator delete(v54);
          }
          uint64_t v55 = 0;
          *(int8x8_t *)(a2 + 48) = prime;
          do
            *((void *)*v22 + v55++) = 0;
          while (*(void *)&prime != v55);
          unint64_t v56 = *v46;
          if (*v46)
          {
            unint64_t v57 = *((void *)v56 + 1);
            uint8x8_t v58 = (uint8x8_t)vcnt_s8(prime);
            v58.i16[0] = vaddlv_u8(v58);
            if (v58.u32[0] > 1uLL)
            {
              if (v57 >= *(void *)&prime) {
                v57 %= *(void *)&prime;
              }
            }
            else
            {
              v57 &= *(void *)&prime - 1;
            }
            *((void *)*v22 + v57) = v46;
            mach_port_t v62 = *(void (__cdecl **)(std::logic_error *__hidden))v56;
            if (*(void *)v56)
            {
              do
              {
                unint64_t v63 = *((void *)v62 + 1);
                if (v58.u32[0] > 1uLL)
                {
                  if (v63 >= *(void *)&prime) {
                    v63 %= *(void *)&prime;
                  }
                }
                else
                {
                  v63 &= *(void *)&prime - 1;
                }
                if (v63 != v57)
                {
                  if (!*((void *)*v22 + v63))
                  {
                    *((void *)*v22 + v63) = v56;
                    goto LABEL_87;
                  }
                  *(void *)unint64_t v56 = *(void *)v62;
                  *(void *)mach_port_t v62 = **((void **)*v22 + v63);
                  **((void **)*v22 + v63) = v62;
                  mach_port_t v62 = v56;
                }
                unint64_t v63 = v57;
LABEL_87:
                unint64_t v56 = v62;
                mach_port_t v62 = *(void (__cdecl **)(std::logic_error *__hidden))v62;
                unint64_t v57 = v63;
              }
              while (v62);
            }
          }
          unint64_t v39 = (unint64_t)prime;
          goto LABEL_91;
        }
        unint64_t v104 = *v22;
        HALS_Object *v22 = 0;
        if (v104) {
          operator delete(v104);
        }
        unint64_t v39 = 0;
        *(void *)(a2 + 48) = 0;
      }
    }
LABEL_91:
    if ((v39 & (v39 - 1)) != 0)
    {
      if (v38 >= v39) {
        a1 = v38 % v39;
      }
      else {
        a1 = v38;
      }
    }
    else
    {
      a1 = (v39 - 1) & v38;
    }
  }
  long long v64 = (void (__cdecl **)(std::logic_error *__hidden))*((void *)*v22 + a1);
  uint64_t v65 = v118.__vftable;
  if (v64)
  {
    v118.~logic_error = *v64;
    a5 = v106;
  }
  else
  {
    v118.~logic_error = *v46;
    *uint64_t v46 = (void (__cdecl *)(std::logic_error *__hidden))v65;
    *((void *)*v22 + a1) = v46;
    a5 = v106;
    if (!v65->~logic_error) {
      goto LABEL_105;
    }
    unint64_t v66 = *((void *)v65->~logic_error + 1);
    if ((v39 & (v39 - 1)) != 0)
    {
      if (v66 >= v39) {
        v66 %= v39;
      }
    }
    else
    {
      v66 &= v39 - 1;
    }
    long long v64 = (void (__cdecl **)(std::logic_error *__hidden))((char *)*v22 + 8 * v66);
  }
  *long long v64 = (void (__cdecl *)(std::logic_error *__hidden))v65;
LABEL_105:
  v118.__vftable = 0;
  ++*(void *)(a2 + 64);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v118);
LABEL_106:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  uint64_t v24 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>((void *)(a2 + 40), (unsigned __int8 *)v7);
LABEL_111:
  long long v67 = (int64x2_t *)*((void *)v24 + 6);
  v110[0] = *((int64x2_t **)v24 + 5);
  v110[1] = v67;
  if (v67) {
    atomic_fetch_add_explicit(&v67->i64[1], 1uLL, memory_order_relaxed);
  }
  int v108 = (std::__shared_weak_count *)v67;
  uint64_t v68 = operator new(0xB8uLL);
  v68[1] = 0;
  v68[2] = 0;
  *uint64_t v68 = &unk_1F1470DC8;
  AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer((uint64_t)(v68 + 3), (const CA::StreamDescription *)a4, a5, v110);
  unint64_t v69 = std::hash<AMCP::Terminal_Identifier>::operator()(v7);
  unint64_t v70 = v69;
  unint64_t v71 = *(void *)(a2 + 8);
  if (v71)
  {
    uint8x8_t v72 = (uint8x8_t)vcnt_s8((int8x8_t)v71);
    v72.i16[0] = vaddlv_u8(v72);
    unint64_t v73 = v72.u32[0];
    if (v72.u32[0] > 1uLL)
    {
      long long v67 = (int64x2_t *)v69;
      if (v69 >= v71) {
        long long v67 = (int64x2_t *)(v69 % v71);
      }
    }
    else
    {
      long long v67 = (int64x2_t *)((v71 - 1) & v69);
    }
    uint64_t v74 = *(std::string::size_type **)(*(void *)a2 + 8 * (void)v67);
    if (v74)
    {
      for (std::string::size_type i = *v74; i; std::string::size_type i = *(void *)i)
      {
        unint64_t v76 = *(void *)(i + 8);
        if (v76 == v70)
        {
          buf.__r_.__value_.__r.__words[0] = i + 16;
          buf.__r_.__value_.__l.__size_ = i + 40;
          buf.__r_.__value_.__r.__words[2] = i + 48;
          v118.__vftable = (std::logic_error_vtbl *)v7;
          v118.__imp_.__imp_ = (const char *)(v7 + 24);
          uint64_t v119 = (void *)(v7 + 32);
          if (std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&buf, (unsigned __int8 ***)&v118))
          {
            a1 = (unint64_t)v109;
            uint64_t v102 = v108;
            goto LABEL_189;
          }
        }
        else
        {
          if (v73 > 1)
          {
            if (v76 >= v71) {
              v76 %= v71;
            }
          }
          else
          {
            v76 &= v71 - 1;
          }
          if ((int64x2_t *)v76 != v67) {
            break;
          }
        }
      }
    }
  }
  long long v77 = (char *)operator new(0x48uLL);
  __int16 v78 = (void *)(a2 + 16);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
  buf.__r_.__value_.__l.__size_ = a2 + 16;
  buf.__r_.__value_.__s.__data_[16] = 0;
  *(void *)long long v77 = 0;
  *((void *)v77 + 1) = v70;
  int v79 = (std::string *)(v77 + 16);
  if (*(char *)(v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v79, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
  }
  else
  {
    *(_OWORD *)&v79->__r_.__value_.__l.__data_ = *(_OWORD *)v7;
    *((void *)v77 + 4) = *(void *)(v7 + 16);
  }
  *((void *)v77 + 5) = *(void *)(v7 + 24);
  *((_DWORD *)v77 + 12) = *(_DWORD *)(v7 + 32);
  *((void *)v77 + 7) = 0;
  *((void *)v77 + 8) = 0;
  buf.__r_.__value_.__s.__data_[16] = 1;
  float v80 = (float)(unint64_t)(*(void *)(a2 + 24) + 1);
  float v81 = *(float *)(a2 + 32);
  if (!v71 || (float)(v81 * (float)v71) < v80)
  {
    BOOL v82 = 1;
    if (v71 >= 3) {
      BOOL v82 = (v71 & (v71 - 1)) != 0;
    }
    unint64_t v83 = v82 | (2 * v71);
    unint64_t v84 = vcvtps_u32_f32(v80 / v81);
    if (v83 <= v84) {
      int8x8_t v85 = (int8x8_t)v84;
    }
    else {
      int8x8_t v85 = (int8x8_t)v83;
    }
    if (*(void *)&v85 == 1)
    {
      int8x8_t v85 = (int8x8_t)2;
    }
    else if ((*(void *)&v85 & (*(void *)&v85 - 1)) != 0)
    {
      int8x8_t v85 = (int8x8_t)std::__next_prime(*(void *)&v85);
    }
    unint64_t v71 = *(void *)(a2 + 8);
    if (*(void *)&v85 > v71) {
      goto LABEL_145;
    }
    if (*(void *)&v85 < v71)
    {
      unint64_t v92 = vcvtps_u32_f32((float)*(unint64_t *)(a2 + 24) / *(float *)(a2 + 32));
      if (v71 < 3 || (uint8x8_t v93 = (uint8x8_t)vcnt_s8((int8x8_t)v71), v93.i16[0] = vaddlv_u8(v93), v93.u32[0] > 1uLL))
      {
        unint64_t v92 = std::__next_prime(v92);
      }
      else
      {
        uint64_t v94 = 1 << -(char)__clz(v92 - 1);
        if (v92 >= 2) {
          unint64_t v92 = v94;
        }
      }
      if (*(void *)&v85 <= v92) {
        int8x8_t v85 = (int8x8_t)v92;
      }
      if (*(void *)&v85 >= v71)
      {
        unint64_t v71 = *(void *)(a2 + 8);
      }
      else
      {
        if (v85)
        {
LABEL_145:
          if (*(void *)&v85 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v86 = operator new(8 * *(void *)&v85);
          uint64_t v87 = *(void **)a2;
          *(void *)a2 = v86;
          if (v87) {
            operator delete(v87);
          }
          uint64_t v88 = 0;
          *(int8x8_t *)(a2 + 8) = v85;
          do
            *(void *)(*(void *)a2 + 8 * v88++) = 0;
          while (*(void *)&v85 != v88);
          int v89 = (void *)*v78;
          if (*v78)
          {
            unint64_t v90 = v89[1];
            uint8x8_t v91 = (uint8x8_t)vcnt_s8(v85);
            v91.i16[0] = vaddlv_u8(v91);
            if (v91.u32[0] > 1uLL)
            {
              if (v90 >= *(void *)&v85) {
                v90 %= *(void *)&v85;
              }
            }
            else
            {
              v90 &= *(void *)&v85 - 1;
            }
            *(void *)(*(void *)a2 + 8 * v90) = v78;
            BOOL v95 = (void *)*v89;
            if (*v89)
            {
              do
              {
                unint64_t v96 = v95[1];
                if (v91.u32[0] > 1uLL)
                {
                  if (v96 >= *(void *)&v85) {
                    v96 %= *(void *)&v85;
                  }
                }
                else
                {
                  v96 &= *(void *)&v85 - 1;
                }
                if (v96 != v90)
                {
                  if (!*(void *)(*(void *)a2 + 8 * v96))
                  {
                    *(void *)(*(void *)a2 + 8 * v96) = v89;
                    goto LABEL_170;
                  }
                  *int v89 = *v95;
                  *BOOL v95 = **(void **)(*(void *)a2 + 8 * v96);
                  **(void **)(*(void *)a2 + 8 * v96) = v95;
                  BOOL v95 = v89;
                }
                unint64_t v96 = v90;
LABEL_170:
                int v89 = v95;
                BOOL v95 = (void *)*v95;
                unint64_t v90 = v96;
              }
              while (v95);
            }
          }
          unint64_t v71 = (unint64_t)v85;
          goto LABEL_174;
        }
        uint64_t v103 = *(void **)a2;
        *(void *)a2 = 0;
        if (v103) {
          operator delete(v103);
        }
        unint64_t v71 = 0;
        *(void *)(a2 + 8) = 0;
      }
    }
LABEL_174:
    if ((v71 & (v71 - 1)) != 0)
    {
      if (v70 >= v71) {
        long long v67 = (int64x2_t *)(v70 % v71);
      }
      else {
        long long v67 = (int64x2_t *)v70;
      }
    }
    else
    {
      long long v67 = (int64x2_t *)((v71 - 1) & v70);
    }
  }
  uint64_t v97 = *(std::string::size_type **)(*(void *)a2 + 8 * (void)v67);
  std::string::size_type i = buf.__r_.__value_.__r.__words[0];
  if (v97)
  {
    *(void *)buf.__r_.__value_.__l.__data_ = *v97;
    a1 = (unint64_t)v109;
    uint64_t v102 = v108;
  }
  else
  {
    *(void *)buf.__r_.__value_.__l.__data_ = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = i;
    *(void *)(*(void *)a2 + 8 * (void)v67) = v78;
    a1 = (unint64_t)v109;
    uint64_t v102 = v108;
    if (!*(void *)i) {
      goto LABEL_188;
    }
    unint64_t v98 = *(void *)(*(void *)i + 8);
    if ((v71 & (v71 - 1)) != 0)
    {
      if (v98 >= v71) {
        v98 %= v71;
      }
    }
    else
    {
      v98 &= v71 - 1;
    }
    uint64_t v97 = (std::string::size_type *)(*(void *)a2 + 8 * v98);
  }
  *uint64_t v97 = i;
LABEL_188:
  buf.__r_.__value_.__r.__words[0] = 0;
  ++*(void *)(a2 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::shared_ptr<AMCP::DAL::Synchronized_Mixer>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::shared_ptr<AMCP::DAL::Synchronized_Mixer>>,void *>>>>::reset[abi:ne180100]((uint64_t)&buf);
LABEL_189:
  *(void *)&long long v99 = v68 + 3;
  *((void *)&v99 + 1) = v68;
  int v100 = *(std::__shared_weak_count **)(i + 64);
  *(_OWORD *)(i + 56) = v99;
  if (v100) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v100);
  }
  uint64_t v11 = std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>((void *)a2, (unsigned __int8 **)v7);
  if (v102) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v102);
  }
  uint64_t v12 = v11[7];
LABEL_194:
  uint64_t v101 = v11[8];
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v101;
  if (v101) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_1BAD6DAE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, long long a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,char a33)
{
  if (*((void *)&a13 + 1))
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&a13 + 1));
    a12 = __p;
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::shared_ptr<AMCP::DAL::Synchronized_Mixer>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::shared_ptr<AMCP::DAL::Synchronized_Mixer>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<AMCP::Terminal_Identifier const,std::shared_ptr<AMCP::DAL::Synchronized_Mixer>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_emplace<AMCP::DAL::Synchronized_Mixer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::DAL::Synchronized_Mixer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1470DC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::DAL::Synchronized_Mixer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1470DC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__split_buffer<AMCP::Terminal_Identifier>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      unint64_t v4 = v2 - 5;
      *(void *)(a1 + 16) = v2 - 5;
      if (*((char *)v2 - 17) < 0)
      {
        operator delete(*v4);
        unint64_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void AMCP::Graph::Synchronized_Mixer_Manager::get_anchor_time(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = mach_absolute_time();
  long long v7 = *(_OWORD *)a3;
  uint64_t v8 = a3[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = v7;
  double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a1);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 32);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 136))(v10);
  BOOL v14 = round(sample_time) >= round(*(double *)&v12) || v13 == 0;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (!v14)
  {
    AMCP::Log::Scope_Registry::get(v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint8x8_t v58 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
    {
      unint64_t v59 = pthread_self();
      mach_port_t v60 = pthread_mach_thread_np(v59);
      double v61 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a1);
      uint64_t v62 = *(void *)(a1 + 24);
      unint64_t v63 = *(std::__shared_weak_count **)(a1 + 32);
      if (v63) {
        atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      double v64 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(void *)v62 + 136))(v62));
      if (!v65) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      *(_DWORD *)std::string buf = 67110402;
      *(_DWORD *)&uint8_t buf[4] = v60;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Synchronized_Mixer_Manager.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 116;
      *(_WORD *)uint64_t v88 = 2080;
      *(void *)&v88[2] = "not (anchor_time.get_sample_time() >= anchor_time.get_clock()->get_anchor_time())";
      *(_WORD *)&v88[10] = 2048;
      *(void *)&v88[12] = vcvtmd_s64_f64(v61);
      *(_WORD *)&v88[20] = 2048;
      *(void *)&v88[22] = vcvtmd_s64_f64(v64);
      _os_log_error_impl(&dword_1BAA78000, v58, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Manifest anchor time should not represent a time before the timebase's anchor time: time(%lld) anchor(%lld)", buf, 0x36u);
      if (v63) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v63);
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v83);
    __cxa_allocate_exception(0x40uLL);
    double v66 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a1);
    uint64_t v67 = *(void *)(a1 + 24);
    uint64_t v68 = *(void *)(a1 + 32);
    if (v68) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v68 + 8), 1uLL, memory_order_relaxed);
    }
    double v69 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(void *)v67 + 136))(v67));
    if (!v70) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    caulk::make_string((caulk *)"Manifest anchor time should not represent a time before the timebase's anchor time: time(%lld) anchor(%lld)", (uint64_t)&v71, vcvtmd_s64_f64(v66), vcvtmd_s64_f64(v69));
    std::logic_error::logic_error(&v76, &v71);
    v76.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v77, &v76);
    uint64_t v79 = 0;
    float v80 = 0;
    uint64_t v81 = 0;
    int v82 = -1;
    v77.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    __int16 v78 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v77);
    *(void *)&v88[8] = "DAL::DAL_Time AMCP::Graph::Synchronized_Mixer_Manager::get_anchor_time(const Timebase_Ref &) const";
    *(void *)&v88[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Synchronized_Mixer_Manager.cpp";
    *(_DWORD *)&v88[24] = 116;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v74);
    long long v85 = v74;
    unint64_t v84 = &unk_1F148AA90;
    *(void *)&long long v86 = v75;
    long long v74 = 0uLL;
    uint64_t v75 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  for (std::string::size_type i = *(void **)(a2 + 56); i; std::string::size_type i = (void *)*i)
  {
    uint64_t v16 = i[5];
    uint64_t v18 = *(void *)(v16 + 48);
    int v17 = *(std::__shared_weak_count **)(v16 + 56);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v19 = (*a3 | v18) == 0;
    if (*a3) {
      BOOL v20 = v18 == 0;
    }
    else {
      BOOL v20 = 1;
    }
    if (v20) {
      goto LABEL_39;
    }
    BOOL v21 = (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)*a3 + 16))(*a3);
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    uint64_t v23 = v21[23];
    if ((v23 & 0x80u) == 0) {
      uint64_t v24 = v21[23];
    }
    else {
      uint64_t v24 = *((void *)v21 + 1);
    }
    uint64_t v25 = *(unsigned __int8 *)(v22 + 23);
    int v26 = (char)v25;
    if ((v25 & 0x80u) != 0) {
      uint64_t v25 = *(void *)(v22 + 8);
    }
    if (v24 == v25)
    {
      if (v26 >= 0) {
        uint64_t v27 = (unsigned __int8 *)v22;
      }
      else {
        uint64_t v27 = *(unsigned __int8 **)v22;
      }
      if ((v23 & 0x80) != 0)
      {
        BOOL v19 = memcmp(*(const void **)v21, v27, *((void *)v21 + 1)) == 0;
        goto LABEL_39;
      }
      if (v21[23])
      {
        uint64_t v28 = v23 - 1;
        do
        {
          int v30 = *v21++;
          int v29 = v30;
          int v32 = *v27++;
          int v31 = v32;
          BOOL v34 = v28-- != 0;
          BOOL v19 = v29 == v31;
        }
        while (v29 == v31 && v34);
LABEL_39:
        if (!v17) {
          goto LABEL_41;
        }
LABEL_40:
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        goto LABEL_41;
      }
      BOOL v19 = 1;
      if (v17) {
        goto LABEL_40;
      }
    }
    else
    {
      BOOL v19 = 0;
      if (v17) {
        goto LABEL_40;
      }
    }
LABEL_41:
    if (v19)
    {
      uint64_t v35 = i[5];
      os_unfair_lock_lock((os_unfair_lock_t)v35);
      AMCP::DAL::Synchronizer::_get_pending_time_range((AMCP::DAL::Synchronizer *)buf, v35);
      std::string v71 = *(std::string *)&v88[16];
      uint64_t v72 = v89;
      unint64_t v73 = v90;
      if (v90)
      {
        atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
        if (v90) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v90);
        }
      }
      if (*(void *)&v88[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v88[8]);
      }
      long long v36 = *(uint64_t **)(v35 + 24);
      if (v36)
      {
        while (1)
        {
          unint64_t v37 = (std::logic_error *)(v36 + 20);
          if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(v36 + 15), (AMCP::DAL::DAL_Time *)(v36 + 20))
            && !*((unsigned char *)v36 + 200))
          {
            break;
          }
LABEL_73:
          long long v36 = (uint64_t *)*v36;
          if (!v36) {
            goto LABEL_77;
          }
        }
        unint64_t v38 = (std::__shared_weak_count *)v36[19];
        if (v38) {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::logic_error v77 = *v37;
        __int16 v78 = (void *)v36[22];
        uint64_t v40 = v36[23];
        unint64_t v39 = (std::__shared_weak_count *)v36[24];
        if (v39)
        {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          *(std::logic_error *)std::string buf = v77;
          *(void *)&buf[16] = v78;
          *(void *)uint64_t v88 = v40;
          *(void *)&v88[8] = v39;
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v39);
          if (v38) {
            goto LABEL_54;
          }
        }
        else
        {
          *(std::logic_error *)std::string buf = *v37;
          *(void *)&buf[16] = v36[22];
          *(void *)uint64_t v88 = v40;
          *(void *)&v88[8] = 0;
          if (v38) {
LABEL_54:
          }
            std::__shared_weak_count::__release_shared[abi:ne180100](v38);
        }
        std::logic_error v77 = (std::logic_error)*((_OWORD *)v36 + 13);
        uint64_t v41 = v36[29];
        __int16 v78 = (void *)v36[28];
        uint64_t v79 = v41;
        unint64_t v42 = (std::__shared_weak_count *)v36[30];
        float v80 = v42;
        if (v42) {
          atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (((uint64_t)v77.__vftable & 2) == 0) {
          AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v77);
        }
        imp = v77.__imp_.__imp_;
        long long v44 = *(_OWORD *)v88;
        if (*(void *)&v88[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v88[8] + 8), 1uLL, memory_order_relaxed);
        }
        LODWORD(v84) = 2;
        long long v85 = (unint64_t)imp;
        long long v86 = v44;
        AMCP::DAL::DAL_Time::operator+=((AMCP::DAL::DAL_Time *)buf, (uint64_t)&v84);
        if (*((void *)&v86 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v86 + 1));
        }
        if (!AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)buf, (AMCP::DAL::DAL_Time *)(v35 + 104))
          && AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v71, (AMCP::DAL::DAL_Time *)buf))
        {
          LODWORD(v71.__r_.__value_.__l.__data_) = *(_DWORD *)buf;
          *(_OWORD *)&v71.__r_.__value_.__r.__words[1] = *(_OWORD *)&buf[8];
          uint64_t v46 = *(void *)v88;
          int v45 = *(std::__shared_weak_count **)&v88[8];
          if (*(void *)&v88[8]) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v88[8] + 8), 1uLL, memory_order_relaxed);
          }
          float v47 = v73;
          uint64_t v72 = v46;
          unint64_t v73 = v45;
          if (v47) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v47);
          }
        }
        if (v80) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v80);
        }
        if (*(void *)&v88[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v88[8]);
        }
        goto LABEL_73;
      }
LABEL_77:
      os_unfair_lock_unlock((os_unfair_lock_t)v35);
      BOOL v48 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a1, (AMCP::DAL::DAL_Time *)&v71);
      BOOL v49 = !v48;
      if (v48) {
        unint64_t v50 = &v71;
      }
      else {
        unint64_t v50 = (std::string *)a1;
      }
      *(_DWORD *)a1 = v50->__r_.__value_.__l.__data_;
      p_std::string::size_type size = &v71.__r_.__value_.__l.__size_;
      if (!v48) {
        p_std::string::size_type size = (std::string::size_type *)(a1 + 8);
      }
      *(void *)(a1 + 8) = *p_size;
      unint64_t v52 = &v71.__r_.__value_.__r.__words[2];
      if (!v48) {
        unint64_t v52 = (std::string::size_type *)(a1 + 16);
      }
      *(void *)(a1 + 16) = *v52;
      uint64_t v53 = &v72;
      if (!v48) {
        uint64_t v53 = (uint64_t *)(a1 + 24);
      }
      uint64_t v54 = *v53;
      uint64_t v55 = v73;
      unint64_t v56 = *(std::__shared_weak_count **)(a1 + 32);
      if (v49) {
        unint64_t v57 = *(std::__shared_weak_count **)(a1 + 32);
      }
      else {
        unint64_t v57 = v73;
      }
      if (v57) {
        atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)(a1 + 24) = v54;
      *(void *)(a1 + 32) = v57;
      if (v56) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v56);
      }
      if (v55) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v55);
      }
    }
  }
  if ((*(_DWORD *)a1 & 0xFFFFFFFE) == 2) {
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a1);
  }
}

void sub_1BAD6E780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44)
{
  uint64_t v46 = *(std::__shared_weak_count **)(v44 + 32);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::DAL_Time::validate(AMCP::DAL::DAL_Time *this)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (AMCP::Log::Scope_Registry *)*((void *)this + 3);
  if (!v2)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v12 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      char v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)int v30 = 2080;
      *(void *)&v30[2] = "DAL_Time.cpp";
      __int16 v31 = 1024;
      int v32 = 96;
      __int16 v33 = 2080;
      *(void *)BOOL v34 = "not (m_timebase != nullptr)";
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to translate times with an invalid clock", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to translate times with an invalid clock", (uint64_t)&v20);
    std::logic_error::logic_error(&v21, &v20);
    v21.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v22, &v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v23 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    *(void *)&v34[6] = "void AMCP::DAL::DAL_Time::validate() const";
    uint64_t v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    int v36 = 96;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    int v17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  int v3 = *(_DWORD *)this;
  if (*(_DWORD *)this == 1)
  {
    *((double *)this + 1) = (*(double (**)(AMCP::Log::Scope_Registry *, void))(*(void *)v2 + 64))(v2, *((void *)this + 2));
    long long v7 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void))(**((void **)this + 3) + 136))(*((void *)this + 3));
    if (v8 && round(*((double *)this + 1)) < round(*(double *)&v7) && *((void *)this + 2))
    {
      AMCP::Log::Scope_Registry::get(v7);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v9 = **(NSObject ***)buf;
      if (*(void *)v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        uint64_t v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        *(_DWORD *)std::string buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v11;
        *(_WORD *)int v30 = 2080;
        *(void *)&v30[2] = "DAL_Time.cpp";
        __int16 v31 = 1024;
        int v32 = 107;
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d We somehow are dealing with a time before the timebase's valid time region", buf, 0x18u);
      }
    }
  }
  else if (v3 == 2)
  {
    *((void *)this + 2) = (*(uint64_t (**)(AMCP::Log::Scope_Registry *, double))(*(void *)v2 + 56))(v2, *((double *)this + 1));
  }
  else if (!v3)
  {
    AMCP::Log::Scope_Registry::get(v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v4 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = pthread_self();
      mach_port_t v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)int v30 = 2080;
      *(void *)&v30[2] = "DAL_Time.cpp";
      __int16 v31 = 1024;
      int v32 = 97;
      __int16 v33 = 2080;
      *(void *)BOOL v34 = "not (m_valid_types != Valid_Types::Invalid)";
      _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to validate time with an invalid clock", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to validate time with an invalid clock", (uint64_t)&v20);
    std::logic_error::logic_error(&v21, &v20);
    v21.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v22, &v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v23 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    *(void *)&v34[6] = "void AMCP::DAL::DAL_Time::validate() const";
    uint64_t v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    int v36 = 97;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    int v17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  *(_DWORD *)this = 3;
}

void sub_1BAD6EF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::DAL_Time::get_host_time(AMCP::DAL::DAL_Time *this)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)this)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v3 = **(NSObject ***)buf;
    if (*(void *)v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v21);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      unint64_t v4 = pthread_self();
      mach_port_t v5 = pthread_mach_thread_np(v4);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v5;
      *(_WORD *)std::logic_error v21 = 2080;
      *(void *)&uint64_t v21[2] = "DAL_Time.cpp";
      __int16 v22 = 1024;
      int v23 = 71;
      __int16 v24 = 2080;
      *(void *)uint64_t v25 = "not (m_valid_types != Valid_Types::Invalid)";
      _os_log_error_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to get host time with an invalid clock", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v19);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to get host time with an invalid clock", (uint64_t)&v11);
    std::logic_error::logic_error(&v12, &v11);
    v12.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v13, &v12);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = -1;
    v13.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    mach_port_t v14 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v13);
    *(void *)&void v25[6] = "uint64_t AMCP::DAL::DAL_Time::get_host_time() const";
    uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    int v27 = 71;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v6);
    long long v9 = v6;
    uint64_t v10 = v7;
    long long v6 = 0uLL;
    uint64_t v7 = 0;
    char v8 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if ((*(_DWORD *)this & 1) == 0) {
    AMCP::DAL::DAL_Time::validate(this);
  }
  return *((void *)this + 2);
}

void sub_1BAD6F274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

double AMCP::DAL::DAL_Time::get_sample_time(AMCP::DAL::DAL_Time *this)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)this)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v3 = **(NSObject ***)buf;
    if (*(void *)v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v21);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      unint64_t v4 = pthread_self();
      mach_port_t v5 = pthread_mach_thread_np(v4);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v5;
      *(_WORD *)std::logic_error v21 = 2080;
      *(void *)&uint64_t v21[2] = "DAL_Time.cpp";
      __int16 v22 = 1024;
      int v23 = 84;
      __int16 v24 = 2080;
      *(void *)uint64_t v25 = "not (m_valid_types != Valid_Types::Invalid)";
      _os_log_error_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to get sample time with an invalid clock", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v19);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to get sample time with an invalid clock", (uint64_t)&v11);
    std::logic_error::logic_error(&v12, &v11);
    v12.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v13, &v12);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = -1;
    v13.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    mach_port_t v14 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v13);
    *(void *)&void v25[6] = "Sample_Time AMCP::DAL::DAL_Time::get_sample_time() const";
    uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    int v27 = 84;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v6);
    long long v9 = v6;
    uint64_t v10 = v7;
    long long v6 = 0uLL;
    uint64_t v7 = 0;
    char v8 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if ((*(_DWORD *)this & 2) == 0) {
    AMCP::DAL::DAL_Time::validate(this);
  }
  return *((double *)this + 1);
}

void sub_1BAD6F58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

BOOL AMCP::DAL::DAL_Time::operator==(AMCP::DAL::DAL_Time *this, AMCP::DAL::DAL_Time *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)this) {
    BOOL v2 = *(_DWORD *)a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v18 = **(NSObject ***)buf;
    if (*(void *)v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v36);
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      char v19 = pthread_self();
      mach_port_t v20 = pthread_mach_thread_np(v19);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v20;
      *(_WORD *)int v36 = 2080;
      *(void *)&v36[2] = "DAL_Time.cpp";
      __int16 v37 = 1024;
      int v38 = 149;
      __int16 v39 = 2080;
      *(void *)uint64_t v40 = "not (not (m_valid_types == Valid_Types::Invalid or t.m_valid_types == Valid_Types::Invalid))";
      _os_log_error_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v26);
    std::logic_error::logic_error(&v27, &v26);
    v27.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v28, &v27);
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int v33 = -1;
    v28.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v29 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v28);
    *(void *)&v40[6] = "BOOL AMCP::DAL::DAL_Time::operator==(const DAL_Time &) const";
    uint64_t v41 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    int v42 = 149;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
    long long v24 = v21;
    uint64_t v25 = v22;
    long long v21 = 0uLL;
    uint64_t v22 = 0;
    int v23 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  unint64_t v5 = *((void *)this + 3);
  uint64_t v6 = *((void *)a2 + 3);
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    if (v5 | v6) {
      goto LABEL_32;
    }
  }
  else
  {
    char v8 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(void *)v5 + 16))(v5);
    unint64_t v5 = (*(uint64_t (**)(void))(**((void **)a2 + 3) + 16))(*((void *)a2 + 3));
    uint64_t v9 = v8[23];
    if ((v9 & 0x80u) == 0) {
      uint64_t v10 = v8[23];
    }
    else {
      uint64_t v10 = *((void *)v8 + 1);
    }
    uint64_t v11 = *(unsigned __int8 *)(v5 + 23);
    int v12 = (char)v11;
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = *(void *)(v5 + 8);
    }
    if (v10 != v11) {
      goto LABEL_32;
    }
    if (v12 >= 0) {
      std::logic_error v13 = (unsigned __int8 *)v5;
    }
    else {
      std::logic_error v13 = *(unsigned __int8 **)v5;
    }
    if ((v9 & 0x80) != 0)
    {
      unint64_t v5 = memcmp(*(const void **)v8, v13, *((void *)v8 + 1));
      if (v5) {
        goto LABEL_32;
      }
    }
    else if (v8[23])
    {
      while (*v8 == *v13)
      {
        ++v8;
        ++v13;
        if (!--v9) {
          goto LABEL_27;
        }
      }
LABEL_32:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v15 = **(NSObject ***)buf;
      if (*(void *)v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v36);
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = pthread_self();
        mach_port_t v17 = pthread_mach_thread_np(v16);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v17;
        *(_WORD *)int v36 = 2080;
        *(void *)&v36[2] = "DAL_Time.cpp";
        __int16 v37 = 1024;
        int v38 = 150;
        __int16 v39 = 2080;
        *(void *)uint64_t v40 = "not (is_same_timebase(m_timebase, t.m_timebase))";
        _os_log_error_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s DAL_Time comparisions must be source from the same timebase", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"DAL_Time comparisions must be source from the same timebase", (uint64_t)&v26);
      std::logic_error::logic_error(&v27, &v26);
      v27.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v28, &v27);
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      int v33 = -1;
      v28.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      int v29 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v28);
      *(void *)&v40[6] = "BOOL AMCP::DAL::DAL_Time::operator==(const DAL_Time &) const";
      uint64_t v41 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
      int v42 = 150;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
      long long v24 = v21;
      uint64_t v25 = v22;
      long long v21 = 0uLL;
      uint64_t v22 = 0;
      int v23 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
  }
LABEL_27:
  if ((*(unsigned char *)this & 2) == 0) {
    AMCP::DAL::DAL_Time::validate(this);
  }
  if ((*(unsigned char *)a2 & 2) == 0) {
    AMCP::DAL::DAL_Time::validate(a2);
  }
  return round(*((double *)this + 1)) == round(*((double *)a2 + 1));
}

void sub_1BAD6FBC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v26 - 128);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a24);
  MEMORY[0x1C1859090](&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v25) {
    __cxa_free_exception(v24);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v26 - 129));
  _Unwind_Resume(a1);
}

BOOL AMCP::DAL::DAL_Time::operator<(AMCP::DAL::DAL_Time *this, AMCP::DAL::DAL_Time *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)this) {
    BOOL v2 = *(_DWORD *)a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v18 = **(NSObject ***)buf;
    if (*(void *)v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v36);
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      char v19 = pthread_self();
      mach_port_t v20 = pthread_mach_thread_np(v19);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v20;
      *(_WORD *)int v36 = 2080;
      *(void *)&v36[2] = "DAL_Time.cpp";
      __int16 v37 = 1024;
      int v38 = 159;
      __int16 v39 = 2080;
      *(void *)uint64_t v40 = "not (not (m_valid_types == Valid_Types::Invalid or t.m_valid_types == Valid_Types::Invalid))";
      _os_log_error_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v26);
    std::logic_error::logic_error(&v27, &v26);
    v27.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v28, &v27);
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int v33 = -1;
    v28.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v29 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v28);
    *(void *)&v40[6] = "BOOL AMCP::DAL::DAL_Time::operator<(const DAL_Time &) const";
    uint64_t v41 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    int v42 = 159;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
    long long v24 = v21;
    uint64_t v25 = v22;
    long long v21 = 0uLL;
    uint64_t v22 = 0;
    int v23 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  unint64_t v5 = *((void *)this + 3);
  uint64_t v6 = *((void *)a2 + 3);
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    if (v5 | v6) {
      goto LABEL_32;
    }
  }
  else
  {
    char v8 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(void *)v5 + 16))(v5);
    unint64_t v5 = (*(uint64_t (**)(void))(**((void **)a2 + 3) + 16))(*((void *)a2 + 3));
    uint64_t v9 = v8[23];
    if ((v9 & 0x80u) == 0) {
      uint64_t v10 = v8[23];
    }
    else {
      uint64_t v10 = *((void *)v8 + 1);
    }
    uint64_t v11 = *(unsigned __int8 *)(v5 + 23);
    int v12 = (char)v11;
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = *(void *)(v5 + 8);
    }
    if (v10 != v11) {
      goto LABEL_32;
    }
    if (v12 >= 0) {
      std::logic_error v13 = (unsigned __int8 *)v5;
    }
    else {
      std::logic_error v13 = *(unsigned __int8 **)v5;
    }
    if ((v9 & 0x80) != 0)
    {
      unint64_t v5 = memcmp(*(const void **)v8, v13, *((void *)v8 + 1));
      if (v5) {
        goto LABEL_32;
      }
    }
    else if (v8[23])
    {
      while (*v8 == *v13)
      {
        ++v8;
        ++v13;
        if (!--v9) {
          goto LABEL_27;
        }
      }
LABEL_32:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v15 = **(NSObject ***)buf;
      if (*(void *)v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v36);
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = pthread_self();
        mach_port_t v17 = pthread_mach_thread_np(v16);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v17;
        *(_WORD *)int v36 = 2080;
        *(void *)&v36[2] = "DAL_Time.cpp";
        __int16 v37 = 1024;
        int v38 = 160;
        __int16 v39 = 2080;
        *(void *)uint64_t v40 = "not (is_same_timebase(m_timebase, t.m_timebase))";
        _os_log_error_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s DAL_Time comparisions must be source from the same timebase", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"DAL_Time comparisions must be source from the same timebase", (uint64_t)&v26);
      std::logic_error::logic_error(&v27, &v26);
      v27.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v28, &v27);
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      int v33 = -1;
      v28.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      int v29 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v28);
      *(void *)&v40[6] = "BOOL AMCP::DAL::DAL_Time::operator<(const DAL_Time &) const";
      uint64_t v41 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
      int v42 = 160;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
      long long v24 = v21;
      uint64_t v25 = v22;
      long long v21 = 0uLL;
      uint64_t v22 = 0;
      int v23 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
  }
LABEL_27:
  if ((*(unsigned char *)this & 2) == 0) {
    AMCP::DAL::DAL_Time::validate(this);
  }
  if ((*(unsigned char *)a2 & 2) == 0) {
    AMCP::DAL::DAL_Time::validate(a2);
  }
  return round(*((double *)this + 1)) < round(*((double *)a2 + 1));
}

void sub_1BAD701FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v26 - 128);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a24);
  MEMORY[0x1C1859090](&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v25) {
    __cxa_free_exception(v24);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v26 - 129));
  _Unwind_Resume(a1);
}

AMCP::DAL::DAL_Time *AMCP::DAL::DAL_Time::operator+=(AMCP::DAL::DAL_Time *this, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)this) {
    BOOL v2 = *(_DWORD *)a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v18 = **(NSObject ***)buf;
    if (*(void *)v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v36);
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      char v19 = pthread_self();
      mach_port_t v20 = pthread_mach_thread_np(v19);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v20;
      *(_WORD *)int v36 = 2080;
      *(void *)&v36[2] = "DAL_Time.cpp";
      __int16 v37 = 1024;
      int v38 = 170;
      __int16 v39 = 2080;
      *(void *)uint64_t v40 = "not (not (m_valid_types == Valid_Types::Invalid or t.m_valid_types == Valid_Types::Invalid))";
      _os_log_error_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v26);
    std::logic_error::logic_error(&v27, &v26);
    v27.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v28, &v27);
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int v33 = -1;
    v28.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v29 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v28);
    *(void *)&v40[6] = "DAL_Time &AMCP::DAL::DAL_Time::operator+=(const DAL_Time_Delta &)";
    uint64_t v41 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    int v42 = 170;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
    long long v24 = v21;
    uint64_t v25 = v22;
    long long v21 = 0uLL;
    uint64_t v22 = 0;
    int v23 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  unint64_t v5 = *((void *)this + 3);
  uint64_t v6 = *(void *)(a2 + 24);
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    if (v5 | v6) {
      goto LABEL_32;
    }
  }
  else
  {
    char v8 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(void *)v5 + 16))(v5);
    unint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 16))(*(void *)(a2 + 24));
    uint64_t v9 = v8[23];
    if ((v9 & 0x80u) == 0) {
      uint64_t v10 = v8[23];
    }
    else {
      uint64_t v10 = *((void *)v8 + 1);
    }
    uint64_t v11 = *(unsigned __int8 *)(v5 + 23);
    int v12 = (char)v11;
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = *(void *)(v5 + 8);
    }
    if (v10 != v11) {
      goto LABEL_32;
    }
    if (v12 >= 0) {
      std::logic_error v13 = (unsigned __int8 *)v5;
    }
    else {
      std::logic_error v13 = *(unsigned __int8 **)v5;
    }
    if ((v9 & 0x80) != 0)
    {
      unint64_t v5 = memcmp(*(const void **)v8, v13, *((void *)v8 + 1));
      if (v5) {
        goto LABEL_32;
      }
    }
    else if (v8[23])
    {
      while (*v8 == *v13)
      {
        ++v8;
        ++v13;
        if (!--v9) {
          goto LABEL_27;
        }
      }
LABEL_32:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v15 = **(NSObject ***)buf;
      if (*(void *)v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v36);
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = pthread_self();
        mach_port_t v17 = pthread_mach_thread_np(v16);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v17;
        *(_WORD *)int v36 = 2080;
        *(void *)&v36[2] = "DAL_Time.cpp";
        __int16 v37 = 1024;
        int v38 = 171;
        __int16 v39 = 2080;
        *(void *)uint64_t v40 = "not (is_same_timebase(m_timebase, t.m_timebase))";
        _os_log_error_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s DAL_Time comparisions must be source from the same timebase", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"DAL_Time comparisions must be source from the same timebase", (uint64_t)&v26);
      std::logic_error::logic_error(&v27, &v26);
      v27.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v28, &v27);
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      int v33 = -1;
      v28.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      int v29 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v28);
      *(void *)&v40[6] = "DAL_Time &AMCP::DAL::DAL_Time::operator+=(const DAL_Time_Delta &)";
      uint64_t v41 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
      int v42 = 171;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
      long long v24 = v21;
      uint64_t v25 = v22;
      long long v21 = 0uLL;
      uint64_t v22 = 0;
      int v23 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
  }
LABEL_27:
  if ((*(unsigned char *)this & 2) == 0) {
    AMCP::DAL::DAL_Time::validate(this);
  }
  if ((*(unsigned char *)a2 & 2) == 0) {
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)a2);
  }
  *(_DWORD *)this = 2;
  *((void *)this + 2) = 0;
  *((double *)this + 1) = *(double *)(a2 + 8) + *((double *)this + 1);
  return this;
}

void sub_1BAD70840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v26 - 128);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a24);
  MEMORY[0x1C1859090](&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v25) {
    __cxa_free_exception(v24);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v26 - 129));
  _Unwind_Resume(a1);
}

void AMCP::DAL::DAL_Time_Delta::validate(AMCP::DAL::DAL_Time_Delta *this)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 3);
  if (!v2)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v6 = **(NSObject ***)buf;
    if (*(void *)v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v24);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      BOOL v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)long long v24 = 2080;
      *(void *)&v24[2] = "DAL_Time.cpp";
      __int16 v25 = 1024;
      int v26 = 415;
      __int16 v27 = 2080;
      *(void *)std::logic_error v28 = "not (m_timebase != nullptr)";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to translate times with an invalid clock", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v22);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to translate times with an invalid clock", (uint64_t)&v14);
    std::logic_error::logic_error(&v15, &v14);
    v15.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v16, &v15);
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v21 = -1;
    v16.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    mach_port_t v17 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v16);
    *(void *)&void v28[6] = "void AMCP::DAL::DAL_Time_Delta::validate() const";
    int v29 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    int v30 = 415;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v9);
    long long v12 = v9;
    uint64_t v13 = v10;
    long long v9 = 0uLL;
    uint64_t v10 = 0;
    uint64_t v11 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  int v3 = *(_DWORD *)this;
  if (*(_DWORD *)this == 1)
  {
    double v4 = (double)*((uint64_t *)this + 2);
    *((double *)this + 1) = v4 / (*(double (**)(uint64_t))(*(void *)v2 + 72))(v2);
    int v3 = *(_DWORD *)this;
  }
  if (v3 == 2)
  {
    double v5 = *((double *)this + 1);
    *((void *)this + 2) = (uint64_t)(v5
                                    * (*(double (**)(void))(**((void **)this + 3) + 72))(*((void *)this + 3)));
  }
  *(_DWORD *)this = 3;
}

void sub_1BAD70BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 128);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 129));
  _Unwind_Resume(a1);
}

AMCP::DAL::DAL_Time *AMCP::DAL::DAL_Time::operator-=(AMCP::DAL::DAL_Time *this, AMCP::DAL::DAL_Time_Delta *a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)this) {
    BOOL v2 = *(_DWORD *)a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v18 = **(NSObject ***)buf;
    if (*(void *)v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v36);
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = pthread_self();
      mach_port_t v20 = pthread_mach_thread_np(v19);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v20;
      *(_WORD *)int v36 = 2080;
      *(void *)&v36[2] = "DAL_Time.cpp";
      __int16 v37 = 1024;
      int v38 = 182;
      __int16 v39 = 2080;
      *(void *)uint64_t v40 = "not (not (m_valid_types == Valid_Types::Invalid or t.m_valid_types == Valid_Types::Invalid))";
      _os_log_error_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v26);
    std::logic_error::logic_error(&v27, &v26);
    v27.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v28, &v27);
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int v33 = -1;
    v28.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v29 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v28);
    *(void *)&v40[6] = "DAL_Time &AMCP::DAL::DAL_Time::operator-=(const DAL_Time_Delta &)";
    uint64_t v41 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    int v42 = 182;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
    long long v24 = v21;
    uint64_t v25 = v22;
    long long v21 = 0uLL;
    uint64_t v22 = 0;
    int v23 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  unint64_t v5 = *((void *)this + 3);
  uint64_t v6 = *((void *)a2 + 3);
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    if (v5 | v6) {
      goto LABEL_32;
    }
  }
  else
  {
    mach_port_t v8 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(void *)v5 + 16))(v5);
    unint64_t v5 = (*(uint64_t (**)(void))(**((void **)a2 + 3) + 16))(*((void *)a2 + 3));
    uint64_t v9 = v8[23];
    if ((v9 & 0x80u) == 0) {
      uint64_t v10 = v8[23];
    }
    else {
      uint64_t v10 = *((void *)v8 + 1);
    }
    uint64_t v11 = *(unsigned __int8 *)(v5 + 23);
    int v12 = (char)v11;
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = *(void *)(v5 + 8);
    }
    if (v10 != v11) {
      goto LABEL_32;
    }
    if (v12 >= 0) {
      uint64_t v13 = (unsigned __int8 *)v5;
    }
    else {
      uint64_t v13 = *(unsigned __int8 **)v5;
    }
    if ((v9 & 0x80) != 0)
    {
      unint64_t v5 = memcmp(*(const void **)v8, v13, *((void *)v8 + 1));
      if (v5) {
        goto LABEL_32;
      }
    }
    else if (v8[23])
    {
      while (*v8 == *v13)
      {
        ++v8;
        ++v13;
        if (!--v9) {
          goto LABEL_27;
        }
      }
LABEL_32:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      std::logic_error v15 = **(NSObject ***)buf;
      if (*(void *)v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v36);
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        std::logic_error v16 = pthread_self();
        mach_port_t v17 = pthread_mach_thread_np(v16);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v17;
        *(_WORD *)int v36 = 2080;
        *(void *)&v36[2] = "DAL_Time.cpp";
        __int16 v37 = 1024;
        int v38 = 183;
        __int16 v39 = 2080;
        *(void *)uint64_t v40 = "not (is_same_timebase(m_timebase, t.m_timebase))";
        _os_log_error_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s DAL_Time comparisions must be source from the same timebase", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"DAL_Time comparisions must be source from the same timebase", (uint64_t)&v26);
      std::logic_error::logic_error(&v27, &v26);
      v27.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v28, &v27);
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      int v33 = -1;
      v28.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      int v29 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v28);
      *(void *)&v40[6] = "DAL_Time &AMCP::DAL::DAL_Time::operator-=(const DAL_Time_Delta &)";
      uint64_t v41 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
      int v42 = 183;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
      long long v24 = v21;
      uint64_t v25 = v22;
      long long v21 = 0uLL;
      uint64_t v22 = 0;
      int v23 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
  }
LABEL_27:
  if ((*(unsigned char *)this & 2) == 0) {
    AMCP::DAL::DAL_Time::validate(this);
  }
  if ((*(unsigned char *)a2 & 2) == 0) {
    AMCP::DAL::DAL_Time_Delta::validate(a2);
  }
  *(_DWORD *)this = 2;
  *((void *)this + 2) = 0;
  *((double *)this + 1) = *((double *)this + 1) - *((double *)a2 + 1);
  return this;
}

void sub_1BAD71220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v26 - 128);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a24);
  MEMORY[0x1C1859090](&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v25) {
    __cxa_free_exception(v24);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v26 - 129));
  _Unwind_Resume(a1);
}

double AMCP::DAL::DAL_Time::operator-(uint64_t a1, AMCP::DAL::DAL_Time *this, AMCP::DAL::DAL_Time *a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)this) {
    BOOL v3 = *(_DWORD *)a3 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v24 = **(NSObject ***)buf;
    if (*(void *)v42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v42);
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      int v25 = pthread_self();
      mach_port_t v26 = pthread_mach_thread_np(v25);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v26;
      *(_WORD *)int v42 = 2080;
      *(void *)&v42[2] = "DAL_Time.cpp";
      __int16 v43 = 1024;
      int v44 = 193;
      __int16 v45 = 2080;
      *(void *)uint64_t v46 = "not (not (m_valid_types == Valid_Types::Invalid or t.m_valid_types == Valid_Types::Invalid))";
      _os_log_error_impl(&dword_1BAA78000, v24, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v32);
    std::logic_error::logic_error(&v33, &v32);
    v33.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v34, &v33);
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int v39 = -1;
    v34.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v35 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
    *(void *)&v46[6] = "DAL_Time_Delta AMCP::DAL::DAL_Time::operator-(const DAL_Time &) const";
    float v47 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    int v48 = 193;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
    long long v30 = v27;
    uint64_t v31 = v28;
    long long v27 = 0uLL;
    uint64_t v28 = 0;
    int v29 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  unint64_t v7 = *((void *)this + 3);
  uint64_t v8 = *((void *)a3 + 3);
  if (v7) {
    BOOL v9 = v8 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    if (v7 | v8) {
      goto LABEL_34;
    }
  }
  else
  {
    uint64_t v10 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(void *)v7 + 16))(v7);
    unint64_t v7 = (*(uint64_t (**)(void))(**((void **)a3 + 3) + 16))(*((void *)a3 + 3));
    uint64_t v11 = v10[23];
    if ((v11 & 0x80u) == 0) {
      uint64_t v12 = v10[23];
    }
    else {
      uint64_t v12 = *((void *)v10 + 1);
    }
    uint64_t v13 = *(unsigned __int8 *)(v7 + 23);
    int v14 = (char)v13;
    if ((v13 & 0x80u) != 0) {
      uint64_t v13 = *(void *)(v7 + 8);
    }
    if (v12 != v13) {
      goto LABEL_34;
    }
    if (v14 >= 0) {
      std::logic_error v15 = (unsigned __int8 *)v7;
    }
    else {
      std::logic_error v15 = *(unsigned __int8 **)v7;
    }
    if ((v11 & 0x80) != 0)
    {
      unint64_t v7 = memcmp(*(const void **)v10, v15, *((void *)v10 + 1));
      if (v7) {
        goto LABEL_34;
      }
    }
    else if (v10[23])
    {
      while (*v10 == *v15)
      {
        ++v10;
        ++v15;
        if (!--v11) {
          goto LABEL_27;
        }
      }
LABEL_34:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      long long v21 = **(NSObject ***)buf;
      if (*(void *)v42) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v42);
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = pthread_self();
        mach_port_t v23 = pthread_mach_thread_np(v22);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v23;
        *(_WORD *)int v42 = 2080;
        *(void *)&v42[2] = "DAL_Time.cpp";
        __int16 v43 = 1024;
        int v44 = 194;
        __int16 v45 = 2080;
        *(void *)uint64_t v46 = "not (is_same_timebase(m_timebase, t.m_timebase))";
        _os_log_error_impl(&dword_1BAA78000, v21, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s DAL_Time comparisions must be source from the same timebase", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"DAL_Time comparisions must be source from the same timebase", (uint64_t)&v32);
      std::logic_error::logic_error(&v33, &v32);
      v33.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v34, &v33);
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      int v39 = -1;
      v34.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      uint64_t v35 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
      *(void *)&v46[6] = "DAL_Time_Delta AMCP::DAL::DAL_Time::operator-(const DAL_Time &) const";
      float v47 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
      int v48 = 194;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
      long long v30 = v27;
      uint64_t v31 = v28;
      long long v27 = 0uLL;
      uint64_t v28 = 0;
      int v29 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
  }
LABEL_27:
  if ((*(unsigned char *)this & 2) == 0) {
    AMCP::DAL::DAL_Time::validate(this);
  }
  if ((*(unsigned char *)a3 & 2) == 0) {
    AMCP::DAL::DAL_Time::validate(a3);
  }
  double v16 = *((double *)this + 1);
  double v17 = *((double *)a3 + 1);
  uint64_t v19 = *((void *)this + 3);
  uint64_t v18 = *((void *)this + 4);
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  double result = v16 - v17;
  *(_DWORD *)a1 = 2;
  *(double *)(a1 + 8) = result;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v19;
  *(void *)(a1 + 32) = v18;
  return result;
}

void sub_1BAD7187C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v26 - 128);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a24);
  MEMORY[0x1C1859090](&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v25) {
    __cxa_free_exception(v24);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v26 - 129));
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::DAL_Time::translate_time(uint64_t a1, AMCP::DAL::DAL_Time *this, uint64_t *a3)
{
  uint64_t result = *a3;
  uint64_t v7 = *((void *)this + 3);
  if (*a3) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (!(result | v7)) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v11 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 3) + 16))(*((void *)this + 3));
    uint64_t v12 = v11[23];
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = v11[23];
    }
    else {
      uint64_t v13 = *((void *)v11 + 1);
    }
    uint64_t v14 = *(unsigned __int8 *)(result + 23);
    int v15 = (char)v14;
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *(void *)(result + 8);
    }
    if (v13 == v14)
    {
      if (v15 >= 0) {
        double v16 = (unsigned __int8 *)result;
      }
      else {
        double v16 = *(unsigned __int8 **)result;
      }
      if ((v12 & 0x80) == 0)
      {
        if (v11[23])
        {
          while (*v11 == *v16)
          {
            ++v11;
            ++v16;
            if (!--v12) {
              goto LABEL_7;
            }
          }
          goto LABEL_24;
        }
LABEL_7:
        *(_OWORD *)a1 = *(_OWORD *)this;
        uint64_t v9 = *((void *)this + 3);
        *(void *)(a1 + 16) = *((void *)this + 2);
        *(void *)(a1 + 24) = v9;
        uint64_t v10 = *((void *)this + 4);
        *(void *)(a1 + 32) = v10;
        if (v10) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
        }
        return result;
      }
      uint64_t result = memcmp(*(const void **)v11, v16, *((void *)v11 + 1));
      if (!result) {
        goto LABEL_7;
      }
    }
  }
LABEL_24:
  uint64_t result = AMCP::DAL::DAL_Time::get_host_time(this);
  uint64_t v18 = *a3;
  uint64_t v17 = a3[1];
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = result;
  *(void *)(a1 + 24) = v18;
  *(void *)(a1 + 32) = v17;
  return result;
}

uint64_t AMCP::DAL::DAL_Time_Range::DAL_Time_Range(uint64_t a1, uint64_t *a2, double a3, double a4)
{
  uint64_t v5 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = *a2;
    uint64_t v7 = (std::__shared_weak_count *)a2[1];
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = *a2;
  }
  *a2 = 0;
  a2[1] = 0;
  *(_DWORD *)a1 = 2;
  *(double *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 2;
  *(double *)(a1 + 48) = a4;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = v7;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return a1;
}

uint64_t AMCP::DAL::DAL_Time_Range::DAL_Time_Range(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  double v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *a2;
    uint64_t v5 = (std::__shared_weak_count *)a2[1];
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = *a2;
  }
  *a2 = 0;
  a2[1] = 0;
  *(_DWORD *)a1 = 2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 40) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

{
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;

  uint64_t v3 = *a2;
  double v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *a2;
    uint64_t v5 = (std::__shared_weak_count *)a2[1];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_DWORD *)a1 = 2;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    *(_DWORD *)(a1 + 40) = 2;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = v6;
    *(void *)(a1 + 72) = v5;
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    *(_DWORD *)a1 = 2;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 2;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = v3;
    *(void *)(a1 + 72) = 0;
  }
  return a1;
}

AMCP::DAL::DAL_Time_Range *AMCP::DAL::DAL_Time_Range::DAL_Time_Range(AMCP::DAL::DAL_Time_Range *this, const AMCP::DAL::DAL_Time *a2, const AMCP::DAL::DAL_Time *a3)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  long long v4 = *(_OWORD *)a2;
  *((void *)this + 2) = *((void *)a2 + 2);
  *(_OWORD *)this = v4;
  *((void *)this + 3) = *((void *)a2 + 3);
  uint64_t v5 = *((void *)a2 + 4);
  *((void *)this + 4) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  long long v6 = *(_OWORD *)a3;
  *((void *)this + 7) = *((void *)a3 + 2);
  *(_OWORD *)((char *)this + 40) = v6;
  *((void *)this + 8) = *((void *)a3 + 3);
  uint64_t v7 = *((void *)a3 + 4);
  *((void *)this + 9) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v8 = *((void *)a2 + 3);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)a2 + 4);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *((void *)a3 + 3);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)a3 + 4);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v12 = (v8 | v11) == 0;
  if (!v8 || !v11)
  {
LABEL_32:
    if (!v10) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  uint64_t v13 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(void *)v8 + 16))(v8);
  unint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
  uint64_t v14 = v13[23];
  if ((v14 & 0x80u) == 0) {
    uint64_t v15 = v13[23];
  }
  else {
    uint64_t v15 = *((void *)v13 + 1);
  }
  uint64_t v16 = *(unsigned __int8 *)(v8 + 23);
  int v17 = (char)v16;
  if ((v16 & 0x80u) != 0) {
    uint64_t v16 = *(void *)(v8 + 8);
  }
  if (v15 != v16)
  {
    BOOL v12 = 0;
    if (!v10) {
      goto LABEL_34;
    }
LABEL_33:
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    goto LABEL_34;
  }
  if (v17 >= 0) {
    uint64_t v18 = (unsigned __int8 *)v8;
  }
  else {
    uint64_t v18 = *(unsigned __int8 **)v8;
  }
  if ((v14 & 0x80) != 0)
  {
    unint64_t v8 = memcmp(*(const void **)v13, v18, *((void *)v13 + 1));
    BOOL v12 = v8 == 0;
    goto LABEL_32;
  }
  if (v13[23])
  {
    uint64_t v19 = v14 - 1;
    do
    {
      int v21 = *v13++;
      int v20 = v21;
      int v23 = *v18++;
      int v22 = v23;
      BOOL v25 = v19-- != 0;
      BOOL v12 = v20 == v22;
    }
    while (v20 == v22 && v25);
    goto LABEL_32;
  }
  BOOL v12 = 1;
  if (v10) {
    goto LABEL_33;
  }
LABEL_34:
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v27 = **(NSObject ***)buf;
    if (*(void *)v46) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v46);
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = pthread_self();
      mach_port_t v29 = pthread_mach_thread_np(v28);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v29;
      *(_WORD *)uint64_t v46 = 2080;
      *(void *)&v46[2] = "DAL_Time.cpp";
      __int16 v47 = 1024;
      int v48 = 266;
      __int16 v49 = 2080;
      *(void *)unint64_t v50 = "not (is_same_timebase(start.get_clock(), end.get_clock()))";
      _os_log_error_impl(&dword_1BAA78000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s DAL_Time_Interval requires time from the same clock", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"DAL_Time_Interval requires time from the same clock", (uint64_t)&v36);
    std::logic_error::logic_error(&v37, &v36);
    v37.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v38, &v37);
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    int v43 = -1;
    v38.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v39 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
    *(void *)&void v50[6] = "AMCP::DAL::DAL_Time_Range::DAL_Time_Range(const DAL_Time &, const DAL_Time &)";
    unint64_t v51 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    int v52 = 266;
    std::vector<void *>::vector(&v31);
    int v30 = backtrace((void **)v31, (*((void *)&v31 + 1) - (void)v31) >> 3);
    std::vector<void *>::resize((char **)&v31, v30);
    long long v34 = v31;
    uint64_t v35 = v32;
    long long v31 = 0uLL;
    uint64_t v32 = 0;
    std::logic_error v33 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return this;
}

void sub_1BAD720E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37)
{
  int v39 = *(std::__shared_weak_count **)(v37 + 72);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  uint64_t v40 = *(std::__shared_weak_count **)(v37 + 32);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::DAL::DAL_Time_Range::DAL_Time_Range(uint64_t a1, long long *a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  uint64_t v4 = *((void *)a2 + 4);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  long long v5 = *(long long *)((char *)a2 + 40);
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  uint64_t v6 = *((void *)a2 + 9);
  *(void *)(a1 + 72) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = *((void *)a2 + 3);
  unint64_t v8 = (std::__shared_weak_count *)*((void *)a2 + 4);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *((void *)a2 + 8);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)a2 + 9);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v11 = (v7 | v10) == 0;
  if (!v7 || !v10)
  {
LABEL_32:
    if (!v9) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  BOOL v12 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(void *)v7 + 16))(v7);
  unint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 16))(v10);
  uint64_t v13 = v12[23];
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = v12[23];
  }
  else {
    uint64_t v14 = *((void *)v12 + 1);
  }
  uint64_t v15 = *(unsigned __int8 *)(v7 + 23);
  int v16 = (char)v15;
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *(void *)(v7 + 8);
  }
  if (v14 != v15)
  {
    BOOL v11 = 0;
    if (!v9) {
      goto LABEL_34;
    }
LABEL_33:
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    goto LABEL_34;
  }
  if (v16 >= 0) {
    int v17 = (unsigned __int8 *)v7;
  }
  else {
    int v17 = *(unsigned __int8 **)v7;
  }
  if ((v13 & 0x80) != 0)
  {
    unint64_t v7 = memcmp(*(const void **)v12, v17, *((void *)v12 + 1));
    BOOL v11 = v7 == 0;
    goto LABEL_32;
  }
  if (v12[23])
  {
    uint64_t v18 = v13 - 1;
    do
    {
      int v20 = *v12++;
      int v19 = v20;
      int v22 = *v17++;
      int v21 = v22;
      BOOL v24 = v18-- != 0;
      BOOL v11 = v19 == v21;
    }
    while (v19 == v21 && v24);
    goto LABEL_32;
  }
  BOOL v11 = 1;
  if (v9) {
    goto LABEL_33;
  }
LABEL_34:
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (!v11)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v26 = **(NSObject ***)buf;
    if (*(void *)v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v45);
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      long long v27 = pthread_self();
      mach_port_t v28 = pthread_mach_thread_np(v27);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v28;
      *(_WORD *)__int16 v45 = 2080;
      *(void *)&v45[2] = "DAL_Time.cpp";
      __int16 v46 = 1024;
      int v47 = 279;
      __int16 v48 = 2080;
      *(void *)__int16 v49 = "not (is_same_timebase(other.start().get_clock(), other.end().get_clock()))";
      _os_log_error_impl(&dword_1BAA78000, v26, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s DAL_Time_Interval requires time from the same clock", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v43);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"DAL_Time_Interval requires time from the same clock", (uint64_t)&v35);
    std::logic_error::logic_error(&v36, &v35);
    v36.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v37, &v36);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    int v42 = -1;
    v37.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    std::logic_error v38 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v37);
    *(void *)&v49[6] = "AMCP::DAL::DAL_Time_Range::DAL_Time_Range(const time_range<DAL_Time, DAL_Time_Delta> &)";
    unint64_t v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    int v51 = 279;
    std::vector<void *>::vector(&v30);
    int v29 = backtrace((void **)v30, (*((void *)&v30 + 1) - (void)v30) >> 3);
    std::vector<void *>::resize((char **)&v30, v29);
    long long v33 = v30;
    uint64_t v34 = v31;
    long long v30 = 0uLL;
    uint64_t v31 = 0;
    uint64_t v32 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return a1;
}

void sub_1BAD72754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37)
{
  uint64_t v39 = *(std::__shared_weak_count **)(v37 + 72);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  uint64_t v40 = *(std::__shared_weak_count **)(v37 + 32);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::DAL::DAL_Time_Range::operator=(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 72);
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = v8;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return a1;
}

double AMCP::DAL::DAL_Time_Range::get_range(AMCP::DAL::DAL_Time_Range *this)
{
  double sample_time = AMCP::DAL::DAL_Time::get_sample_time(this);
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time_Range *)((char *)this + 40));
  return sample_time;
}

BOOL AMCP::DAL::DAL_Time_Delta::operator==(AMCP::DAL::DAL_Time_Delta *this, uint64_t a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)this) {
    BOOL v2 = *(_DWORD *)a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v19 = **(NSObject ***)buf;
    if (*(void *)v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v37);
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int v20 = pthread_self();
      mach_port_t v21 = pthread_mach_thread_np(v20);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v21;
      *(_WORD *)uint64_t v37 = 2080;
      *(void *)&_OWORD v37[2] = "DAL_Time.cpp";
      __int16 v38 = 1024;
      int v39 = 320;
      __int16 v40 = 2080;
      *(void *)uint64_t v41 = "not (not (m_valid_types == DAL_Time::Valid_Types::Invalid or t.m_valid_types == DAL_Time::Valid_Types::Invalid))";
      _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v35);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v27);
    std::logic_error::logic_error(&v28, &v27);
    v28.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v29, &v28);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    int v34 = -1;
    v29.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v30 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v29);
    *(void *)&v41[6] = "BOOL AMCP::DAL::DAL_Time_Delta::operator==(const DAL_Time_Delta &) const";
    int v42 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    int v43 = 320;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v22);
    long long v25 = v22;
    uint64_t v26 = v23;
    long long v22 = 0uLL;
    uint64_t v23 = 0;
    BOOL v24 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  unint64_t v5 = *((void *)this + 3);
  uint64_t v6 = *(void *)(a2 + 24);
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    if (v5 | v6) {
      goto LABEL_40;
    }
  }
  else
  {
    uint64_t v8 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(void *)v5 + 16))(v5);
    unint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 16))(*(void *)(a2 + 24));
    uint64_t v9 = v8[23];
    if ((v9 & 0x80u) == 0) {
      uint64_t v10 = v8[23];
    }
    else {
      uint64_t v10 = *((void *)v8 + 1);
    }
    uint64_t v11 = *(unsigned __int8 *)(v5 + 23);
    int v12 = (char)v11;
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = *(void *)(v5 + 8);
    }
    if (v10 != v11) {
      goto LABEL_40;
    }
    if (v12 >= 0) {
      uint64_t v13 = (unsigned __int8 *)v5;
    }
    else {
      uint64_t v13 = *(unsigned __int8 **)v5;
    }
    if ((v9 & 0x80) != 0)
    {
      unint64_t v5 = memcmp(*(const void **)v8, v13, *((void *)v8 + 1));
      if (v5) {
        goto LABEL_40;
      }
    }
    else if (v8[23])
    {
      while (*v8 == *v13)
      {
        ++v8;
        ++v13;
        if (!--v9) {
          goto LABEL_27;
        }
      }
LABEL_40:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v16 = **(NSObject ***)buf;
      if (*(void *)v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v37);
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        int v17 = pthread_self();
        mach_port_t v18 = pthread_mach_thread_np(v17);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v18;
        *(_WORD *)uint64_t v37 = 2080;
        *(void *)&_OWORD v37[2] = "DAL_Time.cpp";
        __int16 v38 = 1024;
        int v39 = 321;
        __int16 v40 = 2080;
        *(void *)uint64_t v41 = "not (is_same_timebase(m_timebase, t.m_timebase))";
        _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s DAL_Time_Delta comparisions must be source from the same timebase", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v35);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"DAL_Time_Delta comparisions must be source from the same timebase", (uint64_t)&v27);
      std::logic_error::logic_error(&v28, &v27);
      v28.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v29, &v28);
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      int v34 = -1;
      v29.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      long long v30 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v29);
      *(void *)&v41[6] = "BOOL AMCP::DAL::DAL_Time_Delta::operator==(const DAL_Time_Delta &) const";
      int v42 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
      int v43 = 321;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v22);
      long long v25 = v22;
      uint64_t v26 = v23;
      long long v22 = 0uLL;
      uint64_t v23 = 0;
      BOOL v24 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
  }
LABEL_27:
  if ((*(_DWORD *)this & 2) != 0 && (*(_DWORD *)a2 & 2) != 0 && (*(_DWORD *)this & *(_DWORD *)a2 & 1) == 0) {
    return round(*((double *)this + 1)) == round(*(double *)(a2 + 8));
  }
  AMCP::DAL::DAL_Time_Delta::validate(this);
  if ((*(_DWORD *)this & 2) != 0 && (*(unsigned char *)a2 & 2) != 0)
  {
    return round(*((double *)this + 1)) == round(*(double *)(a2 + 8));
  }
  else
  {
    if ((*(_DWORD *)this & 1) == 0 || (*(unsigned char *)a2 & 1) == 0) {
      return 0;
    }
    return *((void *)this + 2) == *(void *)(a2 + 16);
  }
}

void sub_1BAD72FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v26 - 128);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a24);
  MEMORY[0x1C1859090](&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v25) {
    __cxa_free_exception(v24);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v26 - 129));
  _Unwind_Resume(a1);
}

BOOL AMCP::DAL::DAL_Time_Delta::operator<(AMCP::DAL::DAL_Time_Delta *this, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)this) {
    BOOL v2 = *(_DWORD *)a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v18 = **(NSObject ***)buf;
    if (*(void *)v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v36);
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v19 = pthread_self();
      mach_port_t v20 = pthread_mach_thread_np(v19);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v20;
      *(_WORD *)std::logic_error v36 = 2080;
      *(void *)&v36[2] = "DAL_Time.cpp";
      __int16 v37 = 1024;
      int v38 = 343;
      __int16 v39 = 2080;
      *(void *)__int16 v40 = "not (not (m_valid_types == DAL_Time::Valid_Types::Invalid or t.m_valid_types == DAL_Time::Valid_Types::Invalid))";
      _os_log_error_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v26);
    std::logic_error::logic_error(&v27, &v26);
    v27.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v28, &v27);
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int v33 = -1;
    v28.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    std::logic_error v29 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v28);
    *(void *)&v40[6] = "BOOL AMCP::DAL::DAL_Time_Delta::operator<(const DAL_Time_Delta &) const";
    uint64_t v41 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
    int v42 = 343;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
    long long v24 = v21;
    uint64_t v25 = v22;
    long long v21 = 0uLL;
    uint64_t v22 = 0;
    uint64_t v23 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  unint64_t v5 = *((void *)this + 3);
  uint64_t v6 = *(void *)(a2 + 24);
  if (v5) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    if (v5 | v6) {
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t v8 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(void *)v5 + 16))(v5);
    unint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a2 + 24) + 16))(*(void *)(a2 + 24));
    uint64_t v9 = v8[23];
    if ((v9 & 0x80u) == 0) {
      uint64_t v10 = v8[23];
    }
    else {
      uint64_t v10 = *((void *)v8 + 1);
    }
    uint64_t v11 = *(unsigned __int8 *)(v5 + 23);
    int v12 = (char)v11;
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = *(void *)(v5 + 8);
    }
    if (v10 != v11) {
      goto LABEL_37;
    }
    if (v12 >= 0) {
      uint64_t v13 = (unsigned __int8 *)v5;
    }
    else {
      uint64_t v13 = *(unsigned __int8 **)v5;
    }
    if ((v9 & 0x80) != 0)
    {
      unint64_t v5 = memcmp(*(const void **)v8, v13, *((void *)v8 + 1));
      if (v5) {
        goto LABEL_37;
      }
    }
    else if (v8[23])
    {
      while (*v8 == *v13)
      {
        ++v8;
        ++v13;
        if (!--v9) {
          goto LABEL_27;
        }
      }
LABEL_37:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v15 = **(NSObject ***)buf;
      if (*(void *)v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v36);
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        int v16 = pthread_self();
        mach_port_t v17 = pthread_mach_thread_np(v16);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v17;
        *(_WORD *)std::logic_error v36 = 2080;
        *(void *)&v36[2] = "DAL_Time.cpp";
        __int16 v37 = 1024;
        int v38 = 344;
        __int16 v39 = 2080;
        *(void *)__int16 v40 = "not (is_same_timebase(m_timebase, t.m_timebase))";
        _os_log_error_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s DAL_Time_Delta comparisions must be source from the same timebase", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"DAL_Time_Delta comparisions must be source from the same timebase", (uint64_t)&v26);
      std::logic_error::logic_error(&v27, &v26);
      v27.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v28, &v27);
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      int v33 = -1;
      v28.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      std::logic_error v29 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v28);
      *(void *)&v40[6] = "BOOL AMCP::DAL::DAL_Time_Delta::operator<(const DAL_Time_Delta &) const";
      uint64_t v41 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Time.cpp";
      int v42 = 344;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
      long long v24 = v21;
      uint64_t v25 = v22;
      long long v21 = 0uLL;
      uint64_t v22 = 0;
      uint64_t v23 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
  }
LABEL_27:
  if ((*(_DWORD *)this & 2) != 0 && (*(_DWORD *)a2 & 2) != 0 && (*(_DWORD *)this & *(_DWORD *)a2 & 1) == 0) {
    return round(*((double *)this + 1)) < round(*(double *)(a2 + 8));
  }
  AMCP::DAL::DAL_Time_Delta::validate(this);
  if ((*(_DWORD *)this & 2) != 0 && (*(unsigned char *)a2 & 2) != 0) {
    return round(*((double *)this + 1)) < round(*(double *)(a2 + 8));
  }
  if (*(_DWORD *)this & 1) != 0 && (*(unsigned char *)a2) {
    return *((void *)this + 2) < *(void *)(a2 + 16);
  }
  return 0;
}

void sub_1BAD7366C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v26 - 128);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a24);
  MEMORY[0x1C1859090](&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v25) {
    __cxa_free_exception(v24);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v26 - 129));
  _Unwind_Resume(a1);
}

void AMCP::DAL::DAL_Time_Delta::translate_time_delta(uint64_t a1, AMCP::DAL::DAL_Time_Delta *this, uint64_t *a3)
{
  uint64_t v6 = *a3;
  uint64_t v7 = *((void *)this + 3);
  if (*a3) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (!(v6 | v7)) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v11 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    uint64_t v12 = (*(uint64_t (**)(void))(**((void **)this + 3) + 16))(*((void *)this + 3));
    uint64_t v13 = v11[23];
    if ((v13 & 0x80u) == 0) {
      uint64_t v14 = v11[23];
    }
    else {
      uint64_t v14 = *((void *)v11 + 1);
    }
    uint64_t v15 = *(unsigned __int8 *)(v12 + 23);
    int v16 = (char)v15;
    if ((v15 & 0x80u) != 0) {
      uint64_t v15 = *(void *)(v12 + 8);
    }
    if (v14 == v15)
    {
      if (v16 >= 0) {
        mach_port_t v17 = (unsigned __int8 *)v12;
      }
      else {
        mach_port_t v17 = *(unsigned __int8 **)v12;
      }
      if ((v13 & 0x80) == 0)
      {
        if (v11[23])
        {
          while (*v11 == *v17)
          {
            ++v11;
            ++v17;
            if (!--v13) {
              goto LABEL_7;
            }
          }
          goto LABEL_24;
        }
LABEL_7:
        *(_OWORD *)a1 = *(_OWORD *)this;
        uint64_t v9 = *((void *)this + 3);
        *(void *)(a1 + 16) = *((void *)this + 2);
        *(void *)(a1 + 24) = v9;
        uint64_t v10 = *((void *)this + 4);
        *(void *)(a1 + 32) = v10;
        if (v10) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
        }
        return;
      }
      if (!memcmp(*(const void **)v11, v17, *((void *)v11 + 1))) {
        goto LABEL_7;
      }
    }
  }
LABEL_24:
  if ((*(unsigned char *)this & 1) == 0) {
    AMCP::DAL::DAL_Time_Delta::validate(this);
  }
  uint64_t v18 = *((void *)this + 2);
  uint64_t v20 = *a3;
  uint64_t v19 = a3[1];
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)a1 = 1;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v18;
  *(void *)(a1 + 24) = v20;
  *(void *)(a1 + 32) = v19;
}

uint64_t caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::store(uint64_t result, long long *a2)
{
  uint64_t v2 = result;
  int v25 = 0;
  uint64_t v3 = result + 64;
  unsigned int add = atomic_fetch_add((atomic_uint *volatile)(result + 4), 1u);
  uint64_t v5 = result + 64 + 192 * (add & 1);
  int v6 = 2 * add;
  atomic_store(2 * add, (unsigned int *)v5);
  long long v7 = *a2;
  *(_OWORD *)(v5 + 24) = a2[1];
  *(_OWORD *)(v5 + 8) = v7;
  long long v8 = a2[2];
  long long v9 = a2[3];
  long long v10 = a2[4];
  *(_OWORD *)(v5 + 88) = a2[5];
  *(_OWORD *)(v5 + 72) = v10;
  *(_OWORD *)(v5 + 56) = v9;
  *(_OWORD *)(v5 + 40) = v8;
  long long v11 = a2[6];
  long long v12 = a2[7];
  long long v13 = a2[8];
  *(_OWORD *)(v5 + 145) = *(long long *)((char *)a2 + 137);
  *(_OWORD *)(v5 + 136) = v13;
  *(_OWORD *)(v5 + 120) = v12;
  *(_OWORD *)(v5 + 104) = v11;
  __dmb(0xBu);
  atomic_compare_exchange_strong((atomic_uint *volatile)v5, (unsigned int *)&v6, (2 * add) | 1);
  if (v6 != 2 * add)
  {
    do
    {
      uint64_t result = caulk::concurrent::details::spinloop::spin((uint64_t)&v25);
      unsigned int v15 = atomic_fetch_add((atomic_uint *volatile)(v2 + 4), 1u);
      uint64_t v16 = v3 + 192 * (v15 & 1);
      int v17 = 2 * v15;
      atomic_store(2 * v15, (unsigned int *)v16);
      long long v18 = *a2;
      *(_OWORD *)(v16 + 24) = a2[1];
      *(_OWORD *)(v16 + 8) = v18;
      long long v19 = a2[2];
      long long v20 = a2[3];
      long long v21 = a2[4];
      *(_OWORD *)(v16 + 88) = a2[5];
      *(_OWORD *)(v16 + 72) = v21;
      *(_OWORD *)(v16 + 56) = v20;
      *(_OWORD *)(v16 + 40) = v19;
      long long v22 = a2[6];
      long long v23 = a2[7];
      long long v24 = a2[8];
      *(_OWORD *)(v16 + 145) = *(long long *)((char *)a2 + 137);
      *(_OWORD *)(v16 + 136) = v24;
      *(_OWORD *)(v16 + 120) = v23;
      *(_OWORD *)(v16 + 104) = v22;
      __dmb(0xBu);
      atomic_compare_exchange_strong((atomic_uint *volatile)v16, (unsigned int *)&v17, (2 * v15) | 1);
    }
    while (v17 != 2 * v15);
  }
  atomic_store(1u, (unsigned __int8 *)v2);
  return result;
}

uint64_t AMCP::IOAudio2::Engine::release_power_assertions(AMCP::IOAudio2::Engine *this)
{
  return AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions((uint64_t)this + 120);
}

uint64_t AMCP::IOAudio2::Engine::take_power_assertions(AMCP::IOAudio2::Engine *this)
{
  return AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions((uint64_t)this + 120);
}

double AMCP::IOAudio2::Engine::convert_host_to_sample_time(os_unfair_lock_s *this, unint64_t a2)
{
  uint64_t v3 = (AMCP::IO_Clock *)&this[140];
  uint64_t v4 = this + 160;
  os_unfair_lock_lock(this + 160);
  double v5 = AMCP::IO_Clock::convert_host_to_sample_time_internal(v3, a2);
  os_unfair_lock_unlock(v4);
  return v5;
}

unint64_t AMCP::IOAudio2::Engine::convert_sample_to_host_time(os_unfair_lock_s *this, double a2)
{
  return AMCP::IO_Clock::convert_sample_to_host_time(this + 140, a2);
}

double AMCP::IOAudio2::Engine::get_current_host_ticks_per_frame(os_unfair_lock_s *this)
{
  uint64_t v2 = this + 160;
  os_unfair_lock_lock(this + 160);
  double v3 = *(double *)&this[156]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2);
  return v3;
}

void AMCP::IOAudio2::Engine::get_current_time(AMCP::IOAudio2::Engine *this@<X0>, AMCP::IO_Clock *a2@<X8>)
{
}

BOOL AMCP::IOAudio2::Engine::has_time(os_unfair_lock_s *this)
{
  return AMCP::IO_Clock::has_time(this + 140);
}

BOOL AMCP::IOAudio2::Engine::reset_time(os_unfair_lock_s *this)
{
  return AMCP::IO_Clock::reset_time(this + 140);
}

uint64_t AMCP::IOAudio2::Engine::update_time(AMCP::IOAudio2::Engine *this)
{
  return AMCP::IO_Clock::update_time((AMCP::IOAudio2::Engine *)((char *)this + 560));
}

double AMCP::IOAudio2::Engine::get_zero_time_stamp@<D0>(AMCP::IOAudio2::Engine *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 91);
  if (v2 && (double v3 = *(long long **)(v2 + 16)) != 0)
  {
    long long v4 = *v3;
    *(void *)(a2 + 8) = *((void *)v3 + 1);
    *(double *)a2 = (double)(unint64_t)v4;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(void *)(a2 + 48) = 0;
  }
  else
  {
    *(void *)(a2 + 48) = 0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
  }
  *(void *)&double result = 3;
  *(void *)(a2 + 56) = 3;
  return result;
}

uint64_t AMCP::IOAudio2::Engine::end_writing(AMCP::IOAudio2::Engine *this, unint64_t a2, unint64_t a3, double a4, unint64_t a5)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(*((void *)this + 91) + 16);
  if (v7)
  {
    double v8 = (double)a5 + a4;
    if (v8 > (double)*(unint64_t *)(v7 + 32)) {
      *(void *)(v7 + 32) = (unint64_t)v8;
    }
  }
  if (*((void *)this + 95) == *((void *)this + 96)) {
    return 1;
  }
  if (!*((unsigned char *)this + 785)) {
    return 1;
  }
  unint64_t v9 = (unint64_t)a4;
  unint64_t v10 = (unint64_t)a4 >> 32;
  unint64_t v11 = AMCP::IO_Clock::convert_sample_to_host_time((os_unfair_lock_s *)this + 140, a4);
  long long v12 = (AMCP::Log::Scope_Registry *)MEMORY[0x1C1858890](*((unsigned int *)this + 181), 0, 0, a5, v10, v9, HIDWORD(v11), v11);
  int v13 = (int)v12;
  if (!v12) {
    return 1;
  }
  AMCP::Log::Scope_Registry::get(v12);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v28, "com.apple.coreaudio", "AMCP");
  int v15 = *(_DWORD *)(v28 + 16);
  switch(v15)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v14);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      long long v22 = **(NSObject ***)buf;
      if (*(void *)v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
      }
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_INFO)) {
        break;
      }
      long long v23 = pthread_self();
      mach_port_t v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v24;
      *(_WORD *)uint64_t v31 = 2080;
      *(void *)&v31[2] = "IOAudio2_Engine.cpp";
      __int16 v32 = 1024;
      int v33 = 355;
      __int16 v34 = 1024;
      int v35 = v13;
      long long v19 = v22;
      os_log_type_t v20 = OS_LOG_TYPE_INFO;
      goto LABEL_19;
    case 2:
      AMCP::Log::Scope_Registry::get(v14);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v25 = **(NSObject ***)buf;
      if (*(void *)v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v26 = pthread_self();
        mach_port_t v27 = pthread_mach_thread_np(v26);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v27;
        *(_WORD *)uint64_t v31 = 2080;
        *(void *)&v31[2] = "IOAudio2_Engine.cpp";
        __int16 v32 = 1024;
        int v33 = 355;
        __int16 v34 = 1024;
        int v35 = v13;
        _os_log_debug_impl(&dword_1BAA78000, v25, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d IOAudio2 engine end_writing got an error from the kernel trap: %d", buf, 0x1Eu);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v14);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v16 = **(NSObject ***)buf;
      if (*(void *)v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = pthread_self();
        mach_port_t v18 = pthread_mach_thread_np(v17);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v18;
        *(_WORD *)uint64_t v31 = 2080;
        *(void *)&v31[2] = "IOAudio2_Engine.cpp";
        __int16 v32 = 1024;
        int v33 = 355;
        __int16 v34 = 1024;
        int v35 = v13;
        long long v19 = v16;
        os_log_type_t v20 = OS_LOG_TYPE_DEFAULT;
LABEL_19:
        _os_log_impl(&dword_1BAA78000, v19, v20, "%6u %32s:%-5d IOAudio2 engine end_writing got an error from the kernel trap: %d", buf, 0x1Eu);
      }
      break;
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  return 0;
}

void sub_1BAD73E24(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::IOAudio2::Engine::write_data_to_stream(uint64_t a1, double a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, size_t **a8)
{
  unint64_t v8 = a5;
  if (a5 < (unint64_t)((uint64_t)(*(void *)(a1 + 768) - *(void *)(a1 + 760)) >> 3))
  {
    float v12 = AMCP::Core::Engine::calculate_safety_violation_write((AMCP::Core::Engine *)a1, a2);
    if (v12 < 0.0) {
      kdebug_trace();
    }
    unint64_t v13 = (unint64_t)a2;
    kdebug_trace();
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 720));
    uint64_t v14 = *(void *)(a1 + 96);
    if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 104) - v14) >> 3) <= v8) {
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v15 = *(void *)(a1 + 760);
    if (v8 >= (*(void *)(a1 + 768) - v15) >> 3) {
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v16 = v14 + 56 * v8;
    int v17 = *(_DWORD *)(v16 + 24);
    unsigned int v18 = *(_DWORD *)(v16 + 40);
    if (v17 == 1667326771) {
      unint64_t v19 = 4;
    }
    else {
      unint64_t v19 = v18;
    }
    os_log_type_t v20 = *(char **)(*(void *)(v15 + 8 * v8) + 16);
    unint64_t v21 = *(unsigned int *)(a1 + 40);
    unint64_t v22 = v13 % v21;
    unint64_t v23 = (v21 - v13 % v21) * v19;
    if (v23 >= **a8) {
      size_t v24 = **a8;
    }
    else {
      size_t v24 = v23;
    }
    memcpy(&v20[v22 * v19], (const void *)(*a8)[1], v24);
    size_t v25 = **a8;
    if (v25 > v24)
    {
      memcpy(v20, (const void *)(*a8)[1], v25 - v24);
      size_t v25 = **a8;
    }
    uint64_t v26 = *(void *)(*(void *)(a1 + 728) + 16);
    if (v26)
    {
      double v27 = (double)(v25 / v19) + a2;
      if (v27 > (double)*(unint64_t *)(v26 + 32)) {
        *(void *)(v26 + 32) = (unint64_t)v27;
      }
    }
    kdebug_trace();
    float v28 = AMCP::Core::Engine::calculate_safety_violation_write((AMCP::Core::Engine *)a1, a2);
    if ((int)v28 < 0) {
      kdebug_trace();
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 720));
  }
  return 1;
}

uint64_t AMCP::IOAudio2::Engine::begin_writing(AMCP::IOAudio2::Engine *this, double a2)
{
  return 1;
}

uint64_t AMCP::IOAudio2::Engine::end_reading(AMCP::IOAudio2::Engine *this, double a2)
{
  return 1;
}

uint64_t AMCP::IOAudio2::Engine::read_data_from_stream(uint64_t a1, double a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, size_t **a8)
{
  unint64_t v8 = a5;
  if (a5 < (unint64_t)((uint64_t)(*(void *)(a1 + 744) - *(void *)(a1 + 736)) >> 3))
  {
    unint64_t v13 = (os_unfair_lock_s *)(a1 + 720);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 720));
    uint64_t v14 = *(void *)(a1 + 96);
    if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 104) - v14) >> 3) <= v8) {
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v15 = *(void *)(a1 + 760);
    if (v8 >= (*(void *)(a1 + 768) - v15) >> 3) {
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v16 = *(char **)(*(void *)(v15 + 8 * v8) + 16);
    unint64_t v17 = *(unsigned int *)(a1 + 40);
    uint64_t v18 = v14 + 56 * v8;
    unint64_t v19 = *(unsigned int *)(v18 + 40) * (unint64_t)v17;
    AMCP::IO_Clock::get_current_zts((AMCP::IO_Clock *)v24, a1 + 560);
    uint64_t v20 = a6 + (unint64_t)(a2 - v24[0]) % v17 * *(unsigned int *)(v18 + 40);
    if (v19 - v20 >= **a8) {
      size_t v21 = **a8;
    }
    else {
      size_t v21 = v19 - v20;
    }
    memcpy((void *)(*a8)[1], &v16[v20], v21);
    size_t v22 = **a8;
    if (v22 > v21) {
      memcpy((void *)((*a8)[1] + v21), v16, v22 - v21);
    }
    os_unfair_lock_unlock(v13);
  }
  return 1;
}

uint64_t AMCP::IOAudio2::Engine::begin_reading(AMCP::IOAudio2::Engine *this, unint64_t a2, unint64_t a3, double a4, uint64_t a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 92) == *((void *)this + 93) || !*((unsigned char *)this + 784)) {
    return 1;
  }
  unint64_t v8 = AMCP::IO_Clock::convert_sample_to_host_time((os_unfair_lock_s *)this + 140, a4);
  float v9 = AMCP::Core::Engine::calculate_safety_violation_read(this, a4);
  if (v9 <= -5.0) {
    kdebug_trace();
  }
  kdebug_trace();
  int v10 = MEMORY[0x1C1858890](*((unsigned int *)this + 181), 0, 1, a5, (unint64_t)a4 >> 32, (unint64_t)a4, HIDWORD(v8), v8);
  kdebug_trace();
  float v12 = AMCP::Core::Engine::calculate_safety_violation_read(this, a4);
  if ((int)v12 <= -5) {
    unint64_t v11 = (AMCP::Log::Scope_Registry *)kdebug_trace();
  }
  if (!v10) {
    return 1;
  }
  AMCP::Log::Scope_Registry::get(v11);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v27, "com.apple.coreaudio", "AMCP");
  int v14 = *(_DWORD *)(v27 + 16);
  switch(v14)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v13);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      size_t v21 = **(NSObject ***)buf;
      if (*(void *)v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
      }
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_INFO)) {
        break;
      }
      size_t v22 = pthread_self();
      mach_port_t v23 = pthread_mach_thread_np(v22);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v23;
      *(_WORD *)uint64_t v30 = 2080;
      *(void *)&v30[2] = "IOAudio2_Engine.cpp";
      __int16 v31 = 1024;
      int v32 = 238;
      __int16 v33 = 1024;
      int v34 = v10;
      uint64_t v18 = v21;
      os_log_type_t v19 = OS_LOG_TYPE_INFO;
      goto LABEL_20;
    case 2:
      AMCP::Log::Scope_Registry::get(v13);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      size_t v24 = **(NSObject ***)buf;
      if (*(void *)v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
      }
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        size_t v25 = pthread_self();
        mach_port_t v26 = pthread_mach_thread_np(v25);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v26;
        *(_WORD *)uint64_t v30 = 2080;
        *(void *)&v30[2] = "IOAudio2_Engine.cpp";
        __int16 v31 = 1024;
        int v32 = 238;
        __int16 v33 = 1024;
        int v34 = v10;
        _os_log_debug_impl(&dword_1BAA78000, v24, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d IOAudio2 engine begin_reading got an error from the kernel trap: %d", buf, 0x1Eu);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v13);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v15 = **(NSObject ***)buf;
      if (*(void *)v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = pthread_self();
        mach_port_t v17 = pthread_mach_thread_np(v16);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v17;
        *(_WORD *)uint64_t v30 = 2080;
        *(void *)&v30[2] = "IOAudio2_Engine.cpp";
        __int16 v31 = 1024;
        int v32 = 238;
        __int16 v33 = 1024;
        int v34 = v10;
        uint64_t v18 = v15;
        os_log_type_t v19 = OS_LOG_TYPE_DEFAULT;
LABEL_20:
        _os_log_impl(&dword_1BAA78000, v18, v19, "%6u %32s:%-5d IOAudio2 engine begin_reading got an error from the kernel trap: %d", buf, 0x1Eu);
      }
      break;
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  return 0;
}

void sub_1BAD7457C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMCP::IOAudio2::Engine::end_io_cycle(AMCP::IOAudio2::Engine *this)
{
  return 1;
}

uint64_t AMCP::IOAudio2::Engine::begin_io_cycle(AMCP::IOAudio2::Engine *this)
{
  return 1;
}

uint64_t AMCP::IOAudio2::Engine::end_io_thread(AMCP::IOAudio2::Engine *this)
{
  return 1;
}

uint64_t AMCP::IOAudio2::Engine::begin_io_thread(AMCP::IOAudio2::Engine *this)
{
  return 1;
}

uint64_t AMCP::IOAudio2::Engine::maximum_past_data(AMCP::IOAudio2::Engine *this)
{
  return 0;
}

uint64_t AMCP::IOAudio2::Engine::available_past_data(AMCP::IOAudio2::Engine *this)
{
  return 0;
}

uint64_t AMCP::IOAudio2::Engine::set_past_data_enabled(AMCP::IOAudio2::Engine *this)
{
  return 0;
}

uint64_t AMCP::IOAudio2::Engine::is_past_data_enabled(AMCP::IOAudio2::Engine *this)
{
  return 0;
}

uint64_t AMCP::IOAudio2::Engine::supports_past_data(AMCP::IOAudio2::Engine *this)
{
  return 0;
}

void AMCP::IOAudio2::Engine::set_output_stream_active_list(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 120;
  AMCP::Core::Implementation::Simple_Engine_IO_State::get_output_stream_active_list((AMCP::Core::Implementation::Simple_Engine_IO_State *)v6, (os_unfair_lock_s *)(a1 + 120));
  AMCP::Core::Implementation::Simple_Engine_IO_State::set_output_stream_active_list(__p, v4, a2);
  AMCP::IOAudio2::Engine::update_stream_active_state(a1, (uint64_t *)(a1 + 96), (uint64_t)v6, (uint64_t)__p);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v6[0]) {
    operator delete(v6[0]);
  }
}

void sub_1BAD7466C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::IOAudio2::Engine::update_stream_active_state(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    int v10 = 0;
    int v11 = 0;
    float v12 = *(void **)a4;
    unint64_t v13 = *(void **)a3;
    while (v13 != (void *)(*(void *)a3 + 8 * (*(void *)(a3 + 8) >> 6)) || (*(_DWORD *)(a3 + 8) & 0x3F) != v10)
    {
      if (v12 == (void *)(*(void *)a4 + 8 * (*(void *)(a4 + 8) >> 6)) && (*(_DWORD *)(a4 + 8) & 0x3F) == v11) {
        break;
      }
      uint64_t v16 = *v12 >> v11;
      if (((*v13 >> v10) & 1) != (v16 & 1))
      {
        mach_port_t v17 = *(_DWORD *)(a1 + 724);
        if (!v17)
        {
LABEL_36:
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone,unsigned int const&,unsigned long long>(v17, *(_DWORD *)(v5 + 4), v16 & 1);
        uint64_t v4 = a2[1];
      }
      v5 += 56;
      v13 += v10 == 63;
      if (v10 == 63) {
        int v10 = 0;
      }
      else {
        ++v10;
      }
      v12 += v11 == 63;
      if (v11 == 63) {
        int v11 = 0;
      }
      else {
        ++v11;
      }
      if (v5 == v4) {
        return;
      }
    }
    if (v5 != v4)
    {
      while (v12 != (void *)(*(void *)a4 + 8 * (*(void *)(a4 + 8) >> 6)) || (*(_DWORD *)(a4 + 8) & 0x3F) != v11)
      {
        mach_port_t v19 = *(_DWORD *)(a1 + 724);
        if (!v19) {
          goto LABEL_36;
        }
        applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone,unsigned int const&,unsigned long long>(v19, *(_DWORD *)(v5 + 4), (*v12 >> v11) & 1);
        v5 += 56;
        uint64_t v4 = a2[1];
        if (v5 == v4) {
          return;
        }
        v12 += v11 == 63;
        if (v11 == 63) {
          int v11 = 0;
        }
        else {
          ++v11;
        }
      }
      while (v5 != v4)
      {
        mach_port_t v20 = *(_DWORD *)(a1 + 724);
        if (!v20) {
          goto LABEL_36;
        }
        applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone,unsigned int const&,unsigned long long>(v20, *(_DWORD *)(v5 + 4), 0);
        v5 += 56;
        uint64_t v4 = a2[1];
      }
    }
  }
}

void sub_1BAD74894(void *a1)
{
  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

void applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone,unsigned int const&,unsigned long long>(mach_port_t a1, unsigned int a2, uint64_t a3)
{
  input[0] = a2;
  input[1] = a3;
  memset(v17, 0, sizeof(v17));
  uint32_t outputCnt = 0;
  memset(__p, 0, sizeof(__p));
  size_t v14 = 0;
  uint64_t v3 = IOConnectCallMethod(a1, 6u, input, 2u, 0, 0, 0, &outputCnt, 0, &v14);
  if (v3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v5 = std::system_category();
    v11.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&v11.__r_.__value_.__r.__words[1] = xmmword_1BAFF94D0;
    strcpy(v11.__r_.__value_.__l.__data_, "Error on IOConnectCallScalarMethod for selector ");
    std::to_string(&v10, 6u);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v6 = &v10;
    }
    else {
      int v6 = (std::string *)v10.__r_.__value_.__r.__words[0];
    }
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v10.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v10.__r_.__value_.__l.__size_;
    }
    unint64_t v8 = std::string::append(&v11, (const std::string::value_type *)v6, size);
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v8->__r_.__value_.__r.__words[2];
    long long v12 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1C1859260](exception, v3, v5, &v12);
    __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  std::vector<unsigned long long>::resize(v17, outputCnt);
  if (v14)
  {
    std::vector<unsigned char>::__append((unint64_t *)__p, v14);
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
  if (v17[0]) {
    operator delete(v17[0]);
  }
}

void sub_1BAD74A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *a31)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v32 & 1) == 0)
    {
LABEL_10:
      uint64_t v35 = *(void **)(v33 - 88);
      if (v35) {
        operator delete(v35);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v32)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v31);
  goto LABEL_10;
}

void AMCP::IOAudio2::Engine::get_output_stream_active_list(os_unfair_lock_s *this@<X0>, AMCP::Core::Implementation::Simple_Engine_IO_State *a2@<X8>)
{
}

void AMCP::IOAudio2::Engine::set_input_stream_active_list(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 120;
  AMCP::Core::Implementation::Simple_Engine_IO_State::get_input_stream_active_list((AMCP::Core::Implementation::Simple_Engine_IO_State *)v6, (os_unfair_lock_s *)(a1 + 120));
  AMCP::Core::Implementation::Simple_Engine_IO_State::set_input_stream_active_list(__p, v4, a2);
  AMCP::IOAudio2::Engine::update_stream_active_state(a1, (uint64_t *)(a1 + 72), (uint64_t)v6, (uint64_t)__p);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v6[0]) {
    operator delete(v6[0]);
  }
}

void sub_1BAD74B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::IOAudio2::Engine::get_input_stream_active_list(os_unfair_lock_s *this@<X0>, AMCP::Core::Implementation::Simple_Engine_IO_State *a2@<X8>)
{
}

uint64_t AMCP::IOAudio2::Engine::set_transport_state(uint64_t a1, signed int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v4 = atomic_load((unsigned int *)(a1 + 136));
  int v16 = v4;
  uint64_t v5 = (AMCP::Log::Scope_Registry *)MEMORY[0x1C18597F0]();
  int v13 = (int)v5;
  uint64_t v14 = a1;
  uint64_t v15 = &v16;
  if (v4 < a2)
  {
    if (!a2)
    {
      AMCP::Log::Scope_Registry::get(v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
      long long v9 = *(NSObject **)__p;
      if (*(void *)v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v18);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        std::string v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        LODWORD(__p) = 67109890;
        HIDWORD(__p) = v11;
        *(_WORD *)uint64_t v18 = 2080;
        *(void *)&v18[2] = "IOAudio2_Engine.cpp";
        __int16 v19 = 1024;
        int v20 = 448;
        __int16 v21 = 2080;
        size_t v22 = "in_new_state != Transport_State::off";
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s can't transition to off state with a start call", (uint8_t *)&__p, 0x22u);
      }
      abort();
    }
    if (!v4)
    {
      BOOL v6 = AMCP::IO_Clock::reset_time((os_unfair_lock_s *)(a1 + 560));
      MEMORY[0x1C18597F0](v6);
      operator new();
    }
    if (!*(unsigned char *)(a1 + 48)) {
      goto LABEL_16;
    }
    kdebug_trace();
    AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions(a1 + 120);
    mach_port_t v7 = *(_DWORD *)(a1 + 724);
    if (*(unsigned char *)(a1 + 48))
    {
      if (v7)
      {
        applesauce::iokit::call_method_struct<applesauce::iokit::ReplyScalar<1>,unsigned long long &>((uint64_t)&__p, v7, 0xAu, a2 == 1);
        if (__p)
        {
          *(void *)uint64_t v18 = __p;
          operator delete(__p);
        }
        goto LABEL_15;
      }
    }
    else if (v7)
    {
      applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone>(*(_DWORD *)(a1 + 724), 0, 0, 0);
LABEL_15:
      kdebug_trace();
      goto LABEL_16;
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v4 > a2) {
    AMCP::IOAudio2::Engine::stop((AMCP::Log::Scope_Registry *)a1, v4, a2);
  }
LABEL_16:
  atomic_store(a2, (unsigned int *)(a1 + 136));
  return applesauce::raii::v1::detail::ScopeGuard<AMCP::IOAudio2::Engine::set_transport_state(AMCP::Transport_State)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)&v13);
}

void sub_1BAD750B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, char a12)
{
  __cxa_free_exception(v12);
  applesauce::raii::v1::detail::ScopeGuard<AMCP::IOAudio2::Engine::set_transport_state(AMCP::Transport_State)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<AMCP::IOAudio2::Engine::set_transport_state(AMCP::Transport_State)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  if ((int)MEMORY[0x1C18597F0]() > *(_DWORD *)a1)
  {
    uint64_t v2 = *(unsigned int **)(a1 + 8);
    atomic_store(0, v2 + 34);
    AMCP::IOAudio2::Engine::stop((AMCP::Log::Scope_Registry *)v2, **(_DWORD **)(a1 + 16), **(_DWORD **)(a1 + 16));
  }
  return a1;
}

AMCP::Log::Scope_Registry *AMCP::IOAudio2::Engine::stop(AMCP::Log::Scope_Registry *this, int a2, int a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a3 == 2)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    BOOL v6 = *(NSObject **)__p;
    if (*(void *)v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v13);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      LODWORD(__p) = 67109890;
      HIDWORD(__p) = v8;
      *(_WORD *)int v13 = 2080;
      *(void *)&v13[2] = "IOAudio2_Engine.cpp";
      __int16 v14 = 1024;
      int v15 = 463;
      __int16 v16 = 2080;
      mach_port_t v17 = "in_new_state != Transport_State::on";
LABEL_24:
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s can't transition to on state with a stop call", (uint8_t *)&__p, 0x22u);
    }
LABEL_25:
    abort();
  }
  if (a2 < a3)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    BOOL v6 = *(NSObject **)__p;
    if (*(void *)v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v13);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      long long v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      LODWORD(__p) = 67109890;
      HIDWORD(__p) = v10;
      *(_WORD *)int v13 = 2080;
      *(void *)&v13[2] = "IOAudio2_Engine.cpp";
      __int16 v14 = 1024;
      int v15 = 464;
      __int16 v16 = 2080;
      mach_port_t v17 = "in_old_state >= in_new_state";
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  int v4 = (os_unfair_lock_s *)this;
  if (!a2 || *((unsigned char *)this + 48))
  {
    kdebug_trace();
    mach_port_t os_unfair_lock_opaque = v4[181]._os_unfair_lock_opaque;
    if (LOBYTE(v4[12]._os_unfair_lock_opaque))
    {
      if (os_unfair_lock_opaque)
      {
        applesauce::iokit::call_method_struct<applesauce::iokit::ReplyScalar<1>,unsigned long long &>((uint64_t)&__p, os_unfair_lock_opaque, 0xBu, a3 == 1);
        if (__p) {
          operator delete(__p);
        }
        goto LABEL_11;
      }
    }
    else if (os_unfair_lock_opaque)
    {
      applesauce::iokit::call_method_struct<applesauce::iokit::ReplyNone>(v4[181]._os_unfair_lock_opaque, 1u, 0, 0);
LABEL_11:
      AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions((uint64_t)&v4[30]);
      this = (AMCP::Log::Scope_Registry *)kdebug_trace();
      goto LABEL_12;
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_12:
  if (!a3)
  {
    AMCP::IOAudio2::Engine::release_buffers((AMCP::IOAudio2::Engine *)v4);
    return (AMCP::Log::Scope_Registry *)AMCP::IO_Clock::reset_time(v4 + 140);
  }
  return this;
}

void sub_1BAD754B0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v2);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::IOAudio2::Engine::release_buffers(AMCP::IOAudio2::Engine *this)
{
  uint64_t v2 = (void *)*((void *)this + 92);
  uint64_t v3 = (void *)*((void *)this + 93);
  while (v3 != v2)
  {
    uint64_t v5 = (unsigned int *)*--v3;
    int v4 = v5;
    void *v3 = 0;
    if (v5) {
      std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](v4);
    }
  }
  *((void *)this + 93) = v2;
  BOOL v6 = (void *)*((void *)this + 95);
  mach_port_t v7 = (void *)*((void *)this + 96);
  while (v7 != v6)
  {
    long long v9 = (unsigned int *)*--v7;
    mach_port_t v8 = v9;
    void *v7 = 0;
    if (v9) {
      std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](v8);
    }
  }
  *((void *)this + 96) = v6;
  mach_port_t v10 = (unsigned int *)*((void *)this + 91);
  *((void *)this + 91) = 0;
  if (v10)
  {
    std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](v10);
  }
}

void applesauce::iokit::call_method_struct<applesauce::iokit::ReplyScalar<1>,unsigned long long &>(uint64_t a1, mach_port_t a2, uint32_t a3, uint64_t a4)
{
  uint64_t input = a4;
  std::vector<unsigned long long>::vector(&v22);
  uint32_t outputCnt = 1;
  memset(v20, 0, sizeof(v20));
  size_t v19 = 0;
  uint64_t v7 = IOConnectCallMethod(a2, a3, &input, 1u, 0, 0, (uint64_t *)v22, &outputCnt, 0, &v19);
  if (v7)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    mach_port_t v10 = std::system_category();
    v16.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&v16.__r_.__value_.__r.__words[1] = xmmword_1BAFF94D0;
    strcpy(v16.__r_.__value_.__l.__data_, "Error on IOConnectCallScalarMethod for selector ");
    std::to_string(&v15, a3);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      mach_port_t v11 = &v15;
    }
    else {
      mach_port_t v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    int v13 = std::string::append(&v16, (const std::string::value_type *)v11, size);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    std::string::size_type v18 = v13->__r_.__value_.__r.__words[2];
    long long v17 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1C1859260](exception, v7, v10, &v17);
    __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  std::vector<unsigned long long>::resize((char **)&v22, outputCnt);
  if (v19)
  {
    std::vector<unsigned char>::__append(v20, v19);
    mach_port_t v8 = (void *)v20[0];
  }
  else
  {
    mach_port_t v8 = 0;
  }
  *(_OWORD *)a1 = v22;
  *(void *)(a1 + 16) = v23;
  uint64_t v23 = 0;
  long long v22 = 0uLL;
  if (v8)
  {
    operator delete(v8);
    if ((void)v22)
    {
      *((void *)&v22 + 1) = v22;
      operator delete((void *)v22);
    }
  }
}

void sub_1BAD75750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v31 & 1) == 0)
    {
LABEL_10:
      int v34 = *(void **)(v32 - 80);
      if (v34)
      {
        *(void *)(v32 - 72) = v34;
        operator delete(v34);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v30);
  goto LABEL_10;
}

void *std::vector<unsigned long long>::vector(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(8uLL);
  *a1 = v2;
  *v2++ = 0;
  a1[1] = v2;
  a1[2] = v2;
  return a1;
}

void *std::vector<std::unique_ptr<applesauce::iokit::mapped_memory>>::reserve(void *result, unint64_t a2)
{
  if (a2 > (uint64_t)(result[2] - *result) >> 3)
  {
    if (a2 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 8 * v4;
    std::vector<std::unique_ptr<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine,std::default_delete<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine>>>::__swap_out_circular_buffer(v2, v5);
    return (void *)std::__split_buffer<std::unique_ptr<applesauce::iokit::mapped_memory>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<applesauce::iokit::mapped_memory>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(unsigned int **)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t AMCP::IOAudio2::Engine::get_transport_state(AMCP::IOAudio2::Engine *this)
{
  return atomic_load((unsigned int *)this + 34);
}

__n128 AMCP::IOAudio2::Engine::get_stream_format@<Q0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a1 + 72;
  uint64_t v5 = 72;
  if (!a2)
  {
    uint64_t v5 = 96;
    uint64_t v4 = a1 + 96;
  }
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(v4 + 8);
  while (1)
  {
    if (v6 == v7)
    {
      *(void *)(a4 + 32) = 0;
      result.n128_u64[0] = 0;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      return result;
    }
    if (*(_DWORD *)v6 == a3) {
      break;
    }
    v6 += 56;
  }
  __n128 result = *(__n128 *)(v6 + 16);
  long long v9 = *(_OWORD *)(v6 + 32);
  *(__n128 *)a4 = result;
  *(_OWORD *)(a4 + 16) = v9;
  *(void *)(a4 + 32) = *(void *)(v6 + 48);
  return result;
}

void AMCP::IOAudio2::Engine::get_output_format_list(AMCP::IOAudio2::Engine *this@<X0>, AMCP::Core::Implementation::Simple_Engine_Data *a2@<X8>)
{
}

void AMCP::IOAudio2::Engine::get_input_format_list(AMCP::IOAudio2::Engine *this@<X0>, AMCP::Core::Implementation::Simple_Engine_Data *a2@<X8>)
{
}

uint64_t AMCP::IOAudio2::Engine::get_output_latency(AMCP::IOAudio2::Engine *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t AMCP::IOAudio2::Engine::get_input_latency(AMCP::IOAudio2::Engine *this)
{
  return *((unsigned int *)this + 15);
}

uint64_t AMCP::IOAudio2::Engine::get_output_safety_offset(AMCP::IOAudio2::Engine *this)
{
  return *((unsigned int *)this + 14);
}

uint64_t AMCP::IOAudio2::Engine::get_input_safety_offset(AMCP::IOAudio2::Engine *this)
{
  return *((unsigned int *)this + 13);
}

BOOL AMCP::IOAudio2::Engine::has_output_streams(AMCP::IOAudio2::Engine *this)
{
  return *((void *)this + 12) != *((void *)this + 13);
}

BOOL AMCP::IOAudio2::Engine::has_input_streams(AMCP::IOAudio2::Engine *this)
{
  return *((void *)this + 9) != *((void *)this + 10);
}

uint64_t AMCP::IOAudio2::Engine::supports_prewarming(AMCP::IOAudio2::Engine *this)
{
  return *((unsigned __int8 *)this + 48);
}

uint64_t AMCP::IOAudio2::Engine::get_clock_domain(AMCP::IOAudio2::Engine *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t AMCP::IOAudio2::Engine::get_suggested_ring_buffer_frame_size(AMCP::IOAudio2::Engine *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t AMCP::IOAudio2::Engine::get_max_io_buffer_frame_size(AMCP::IOAudio2::Engine *this)
{
  return (3 * *((_DWORD *)this + 10)) >> 3;
}

double AMCP::IOAudio2::Engine::get_sample_rate(AMCP::IOAudio2::Engine *this)
{
  return *((double *)this + 4);
}

void *AMCP::IOAudio2::Engine::get_device_uid@<X0>(const void **this@<X0>, void *a2@<X8>)
{
  return AMCP::Core::Implementation::Simple_Engine_Data::get_device_uid(a2, this[3]);
}

void AMCP::IOAudio2::Engine::~Engine(AMCP::IOAudio2::Engine *this)
{
  AMCP::IOAudio2::Engine::~Engine(this);

  JUMPOUT(0x1C1859840);
}

{
  unsigned int *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  void **v11;

  *(void *)this = &unk_1F1470E68;
  AMCP::IOAudio2::Engine::set_transport_state((uint64_t)this, 0);
  mach_port_t v11 = (void **)((char *)this + 760);
  std::vector<std::unique_ptr<applesauce::iokit::mapped_memory>>::__destroy_vector::operator()[abi:ne180100](&v11);
  mach_port_t v11 = (void **)((char *)this + 736);
  std::vector<std::unique_ptr<applesauce::iokit::mapped_memory>>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v2 = (unsigned int *)*((void *)this + 91);
  *((void *)this + 91) = 0;
  if (v2) {
    std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](v2);
  }
  IOConnectRelease(*((_DWORD *)this + 181));
  AMCP::IO_Clock::~IO_Clock((AMCP::IOAudio2::Engine *)((char *)this + 560));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::IOAudio2::Engine *)((char *)this + 240));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (void *)*((void *)this + 22);
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 18);
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 12);
  if (v7)
  {
    *((void *)this + 13) = v7;
    operator delete(v7);
  }
  mach_port_t v8 = (void *)*((void *)this + 9);
  if (v8)
  {
    *((void *)this + 10) = v8;
    operator delete(v8);
  }
  long long v9 = (const void *)*((void *)this + 3);
  if (v9) {
    CFRelease(v9);
  }
  mach_port_t v10 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
}

void std::vector<std::unique_ptr<applesauce::iokit::mapped_memory>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = (unsigned int *)*--v4;
        uint64_t v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__function::__func<AMCP::IOAudio2::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,double,unsigned int,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,BOOL,BOOL,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::IOAudio2::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,double,unsigned int,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,BOOL,BOOL,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,double,unsigned int,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,BOOL,BOOL,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::IOAudio2::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,double,unsigned int,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,BOOL,BOOL,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26EngineC1EN10applesauce5iokit17io_connect_holderENS2_2CF9StringRefEdjjbjjjjRKNSt3__16vectorINS_4Core14Implementation18Simple_Engine_Data11Stream_InfoENS7_9allocatorISC_EEEESH_bbRKNS_7Utility14Dispatch_QueueEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IOAudio2::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,double,unsigned int,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,BOOL,BOOL,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::IOAudio2::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,double,unsigned int,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,BOOL,BOOL,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 304))();
}

uint64_t std::__function::__func<AMCP::IOAudio2::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,double,unsigned int,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,BOOL,BOOL,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::IOAudio2::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,double,unsigned int,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,BOOL,BOOL,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1471020;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IOAudio2::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,double,unsigned int,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,BOOL,BOOL,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::IOAudio2::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,double,unsigned int,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,BOOL,BOOL,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F1471020;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IOAudio2::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,double,unsigned int,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,BOOL,BOOL,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::IOAudio2::Engine::Engine(applesauce::iokit::io_connect_holder,applesauce::CF::StringRef,double,unsigned int,unsigned int,BOOL,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,BOOL,BOOL,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::~__func()
{
}

void AMCP::IOAudio2::Engine::Engine(uint64_t a1, double a2, uint64_t a3, CFTypeRef *a4, int a5, int a6, char a7, int a8, int a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_queue_t *a15)
{
  v31[4] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F1470E68;
  CFTypeRef v22 = *a4;
  if (*a4) {
    CFRetain(*a4);
  }
  long long v29 = 0uLL;
  uint64_t v30 = 0;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(&v29, *(const void **)a12, *(void *)(a12 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a12 + 8) - *(void *)a12) >> 3));
  long long v27 = 0uLL;
  uint64_t v28 = 0;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(&v27, *(const void **)a13, *(void *)(a13 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a13 + 8) - *(void *)a13) >> 3));
  *(void *)(a1 + 24) = v22;
  *(double *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 44) = a6;
  *(unsigned char *)(a1 + 48) = a7;
  *(_DWORD *)(a1 + 52) = a8;
  *(_DWORD *)(a1 + 56) = a9;
  *(_DWORD *)(a1 + 60) = a10;
  *(_DWORD *)(a1 + 64) = a11;
  *(_OWORD *)(a1 + 72) = v29;
  *(void *)(a1 + 88) = v30;
  long long v29 = 0uLL;
  uint64_t v30 = 0;
  *(_OWORD *)(a1 + 96) = v27;
  *(void *)(a1 + 112) = v28;
  unint64_t v23 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a12 + 8) - *(void *)a12) >> 3);
  uint64_t v24 = (uint64_t)(*(void *)(a13 + 8) - *(void *)a13) >> 3;
  long long v27 = 0uLL;
  uint64_t v28 = 0;
  AMCP::Core::Implementation::Simple_Engine_IO_State::Simple_Engine_IO_State((AMCP::Core::Implementation::Simple_Engine_IO_State *)(a1 + 120), (const __CFString **)a4, v23, 0x6DB6DB6DB6DB6DB7 * v24, 0, a15, v25);
  v31[0] = &unk_1F1471020;
  v31[1] = a1;
  v31[3] = v31;
  AMCP::IO_Clock::IO_Clock(a1 + 560);
}

void sub_1BAD75FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  a19 = v25 + 760;
  std::vector<std::unique_ptr<applesauce::iokit::mapped_memory>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a19 = v25 + 736;
  std::vector<std::unique_ptr<applesauce::iokit::mapped_memory>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  long long v29 = *v27;
  _opaque_pthread_t *v27 = 0;
  if (v29) {
    std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](v29);
  }
  IOConnectRelease(*(_DWORD *)(v25 + 724));
  AMCP::IO_Clock::~IO_Clock(v26);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(v25 + 240));
  uint64_t v30 = *(std::__shared_weak_count **)(v25 + 232);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  int v31 = *(std::__shared_weak_count **)(v25 + 216);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  uint64_t v32 = *(void **)(v25 + 176);
  if (v32) {
    operator delete(v32);
  }
  uint64_t v33 = *(void **)(v25 + 144);
  if (v33) {
    operator delete(v33);
  }
  int v34 = *(void **)(v25 + 96);
  if (v34)
  {
    *(void *)(v25 + 104) = v34;
    operator delete(v34);
  }
  uint64_t v35 = *(void **)(v25 + 72);
  if (v35)
  {
    *(void *)(v25 + 80) = v35;
    operator delete(v35);
  }
  uint64_t v36 = *(const void **)(v25 + 24);
  if (v36) {
    CFRelease(v36);
  }
  __int16 v37 = *(std::__shared_weak_count **)(v25 + 16);
  if (v37) {
    std::__shared_weak_count::__release_weak(v37);
  }
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Terminal::Terminal(uint64_t a1, long long *a2, uint64_t a3, int a4)
{
  char v8 = 0;
  uint64_t v9 = 0;
  long long v10 = *a2;
  long long v11 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v10;
  *(_OWORD *)(a1 + 16) = v11;
  uint64_t v12 = a1 + 40;
  uint64_t v13 = (uint64_t)a2 + 40;
  do
  {
    char v14 = v8;
    std::string v15 = (std::string *)(v12 + 24 * v9);
    v15->__r_.__value_.__r.__words[0] = 0;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    std::string v16 = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v15, *(long long **)(v13 + 24 * v9), *(long long **)(v13 + 24 * v9 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v13 + 24 * v9 + 8) - *(void *)(v13 + 24 * v9)) >> 3));
    char v8 = 1;
    uint64_t v9 = 1;
  }
  while ((v14 & 1) == 0);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  if (*((unsigned char *)a2 + 96))
  {
    BOOL v17 = 1;
  }
  else
  {
    AMCP::Graph::File_Capture_Settings::instance((AMCP::Graph::File_Capture_Settings *)v16);
    BOOL v17 = BYTE1(AMCP::Graph::File_Capture_Settings::instance(void)::s_instance) != 0;
  }
  *(unsigned char *)(a1 + 96) = v17;
  *(_DWORD *)(a1 + 100) = a4;
  *(void *)(a1 + 104) = a3;
  return a1;
}

void sub_1BAD761F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((v12 & 1) == 0)
  {
    uint64_t v14 = 24 * v11;
    uint64_t v15 = v10 + 16;
    do
    {
      a10 = v15 + v14;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
      v14 -= 24;
    }
    while (v14);
  }
  _Unwind_Resume(exception_object);
}

double AMCP::Graph::Terminal::get_description(AMCP::Graph::Terminal *this, uint64_t a2)
{
  char v4 = 0;
  uint64_t v5 = 0;
  *((void *)this + 11) = 1;
  *((unsigned char *)this + 96) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  uint64_t v6 = (char *)this + 40;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + 1) = v7;
  *((void *)this + 4) = *(void *)(a2 + 32);
  char v8 = (char *)(a2 + 40);
  do
  {
    char v9 = v4;
    if (v6 != v8) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v6[24 * v5], *(std::string **)&v8[24 * v5], *(long long **)&v8[24 * v5 + 8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v8[24 * v5 + 8] - *(void *)&v8[24 * v5]) >> 3));
    }
    char v4 = 1;
    uint64_t v5 = 1;
  }
  while ((v9 & 1) == 0);
  double result = *(double *)(a2 + 88);
  *((double *)this + 11) = result;
  *((unsigned char *)this + 96) = *(unsigned char *)(a2 + 96);
  return result;
}

void sub_1BAD762F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  for (uint64_t i = 64; i != 16; i -= 24)
  {
    a10 = (void **)(v10 + i);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  }
  _Unwind_Resume(a1);
}

uint64_t Property_Type_Info::get_property_data_and_qualifier_type_code(Property_Type_Info *this, int a2, AMCP::HAL *a3)
{
  uint64_t v6 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  uint64_t v7 = *(void *)this;
  uint64_t v8 = *((void *)this + 1);
  if (*(void *)this != v8)
  {
    while (*(_DWORD *)v7 != a2)
    {
      v7 += 48;
      if (v7 == v8) {
        goto LABEL_20;
      }
    }
  }
  if (v7 == v8
    || (char v9 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)(v7 + 8), a3)) == 0)
  {
LABEL_20:
    unsigned int hal_property_value_type_code = AMCP::HAL::get_hal_property_value_type_code(a3);
    uint64_t v15 = AMCP::HAL::get_hal_property_qualifier_type_code(a3) << 32;
  }
  else
  {
    int v11 = *((_DWORD *)v9 + 5);
    int v10 = *((_DWORD *)v9 + 6);
    if (v11 == 1667658612) {
      int v12 = 6;
    }
    else {
      int v12 = 0;
    }
    if (v11 == 1886155636) {
      int v13 = 15;
    }
    else {
      int v13 = v12;
    }
    if (v11 == 1918990199) {
      unsigned int hal_property_value_type_code = 1;
    }
    else {
      unsigned int hal_property_value_type_code = v13;
    }
    switch(v10)
    {
      case 1918990199:
        uint64_t v15 = 0x100000000;
        break;
      case 1886155636:
        uint64_t v15 = 0xF00000000;
        break;
      case 1667658612:
        uint64_t v15 = 0x600000000;
        break;
      default:
        uint64_t v15 = 0;
        break;
    }
  }
  uint64_t v16 = v15 | hal_property_value_type_code;
  std::mutex::unlock(v6);
  return v16;
}

uint64_t Property_Type_Info::get_property_qualifier_type_code(Property_Type_Info *this, int a2, AMCP::HAL *a3)
{
  uint64_t v6 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  uint64_t v7 = *(void *)this;
  uint64_t v8 = *((void *)this + 1);
  if (*(void *)this != v8)
  {
    while (*(_DWORD *)v7 != a2)
    {
      v7 += 48;
      if (v7 == v8) {
        goto LABEL_11;
      }
    }
  }
  if (v7 == v8
    || (char v9 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)(v7 + 8), a3)) == 0)
  {
LABEL_11:
    uint64_t hal_property_qualifier_type_code = AMCP::HAL::get_hal_property_qualifier_type_code(a3);
  }
  else
  {
    int v10 = *((_DWORD *)v9 + 6);
    switch(v10)
    {
      case 1918990199:
        uint64_t hal_property_qualifier_type_code = 1;
        break;
      case 1886155636:
        uint64_t hal_property_qualifier_type_code = 15;
        break;
      case 1667658612:
        uint64_t hal_property_qualifier_type_code = 6;
        break;
      default:
        uint64_t hal_property_qualifier_type_code = 0;
        break;
    }
  }
  std::mutex::unlock(v6);
  return hal_property_qualifier_type_code;
}

void Property_Type_Info::add_custom_properties(Property_Type_Info *this, unsigned int a2, uint64_t a3, const AudioServerPlugInCustomPropertyInfo *a4)
{
  char v9 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  int v10 = *(_DWORD **)this;
  int v11 = (_DWORD *)*((void *)this + 1);
  if (*(_DWORD **)this != v11)
  {
    while (*v10 != a2)
    {
      v10 += 12;
      if (v10 == v11) {
        goto LABEL_10;
      }
    }
  }
  if (v10 == v11)
  {
LABEL_10:
    long long v14 = 0uLL;
    long long v48 = 0u;
    long long v49 = 0u;
    int v15 = 1065353216;
    int v50 = 1065353216;
    if (a3)
    {
      p_mQualifierDataType = &a4->mQualifierDataType;
      do
      {
        unsigned int v44 = *(p_mQualifierDataType - 2);
        *(void *)__int16 v45 = *(void *)(p_mQualifierDataType - 1);
        std::__hash_table<std::__hash_value_type<unsigned int,Custom_Property_Types>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Custom_Property_Types>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Custom_Property_Types>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Custom_Property_Types>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,Custom_Property_Types>>((uint64_t)&v48, v44, (uint64_t)&v44);
        p_mQualifierDataType += 3;
        --a3;
      }
      while (a3);
      int v15 = v50;
      size_t v17 = *((void *)&v48 + 1);
      long long v14 = 0uLL;
    }
    else
    {
      size_t v17 = 0;
    }
    unsigned int v44 = a2;
    *(_OWORD *)&v45[4] = v14;
    long long v46 = v14;
    float v47 = *(float *)&v15;
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)&v45[4], v17);
    std::string::size_type v18 = (uint64_t *)v49;
    if (!(void)v49)
    {
LABEL_56:
      unint64_t v35 = *((void *)this + 2);
      uint64_t v36 = (_DWORD *)*((void *)this + 1);
      if ((unint64_t)v36 >= v35)
      {
        unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v36 - *(void *)this) >> 4);
        unint64_t v39 = v38 + 1;
        if (v38 + 1 > 0x555555555555555) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *(void *)this) >> 4);
        if (2 * v40 > v39) {
          unint64_t v39 = 2 * v40;
        }
        if (v40 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v41 = 0x555555555555555;
        }
        else {
          unint64_t v41 = v39;
        }
        v51[4] = (char *)this + 16;
        if (v41) {
          unint64_t v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<MutationItinerary::Device>>(v41);
        }
        else {
          uint64_t v42 = 0;
        }
        uint64_t v43 = (_DWORD *)(v41 + 48 * v38);
        v51[0] = v41;
        v51[1] = v43;
        v51[3] = v41 + 48 * v42;
        *uint64_t v43 = v44;
        std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v43 + 2), (uint64_t *)&v45[4]);
        double v51[2] = v43 + 12;
        std::vector<std::pair<unsigned int,std::unordered_map<unsigned int,Custom_Property_Types>>>::__swap_out_circular_buffer((uint64_t *)this, v51);
        __int16 v37 = (_DWORD *)*((void *)this + 1);
        std::__split_buffer<std::pair<unsigned int,std::unordered_map<unsigned int,Custom_Property_Types>>>::~__split_buffer((uint64_t)v51);
      }
      else
      {
        *uint64_t v36 = v44;
        __int16 v37 = v36 + 12;
        std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v36 + 2), (uint64_t *)&v45[4]);
      }
      *((void *)this + 1) = v37;
      std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)&v45[4]);
      std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)&v48);
      goto LABEL_69;
    }
    unint64_t v19 = *(void *)&v45[12];
    while (1)
    {
      unint64_t v20 = *((unsigned int *)v18 + 4);
      if (v19)
      {
        uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v19);
        v21.i16[0] = vaddlv_u8(v21);
        if (v21.u32[0] > 1uLL)
        {
          unint64_t v4 = *((unsigned int *)v18 + 4);
          if (v19 <= v20) {
            unint64_t v4 = v20 % v19;
          }
        }
        else
        {
          unint64_t v4 = (v19 - 1) & v20;
        }
        CFTypeRef v22 = *(uint64_t ***)(*(void *)&v45[4] + 8 * v4);
        if (v22)
        {
          for (uint64_t i = *v22; i; uint64_t i = (uint64_t *)*i)
          {
            unint64_t v24 = i[1];
            if (v24 == v20)
            {
              if (*((_DWORD *)i + 4) == v20) {
                goto LABEL_55;
              }
            }
            else
            {
              if (v21.u32[0] > 1uLL)
              {
                if (v24 >= v19) {
                  v24 %= v19;
                }
              }
              else
              {
                v24 &= v19 - 1;
              }
              if (v24 != v4) {
                break;
              }
            }
          }
        }
      }
      uint64_t v25 = operator new(0x20uLL);
      *uint64_t v25 = 0;
      v25[1] = v20;
      uint64_t v26 = v18[2];
      *((_DWORD *)v25 + 6) = *((_DWORD *)v18 + 6);
      v25[2] = v26;
      float v27 = (float)(unint64_t)(*((void *)&v46 + 1) + 1);
      if (!v19 || (float)(v47 * (float)v19) < v27)
      {
        BOOL v28 = (v19 & (v19 - 1)) != 0;
        if (v19 < 3) {
          BOOL v28 = 1;
        }
        unint64_t v29 = v28 | (2 * v19);
        unint64_t v30 = vcvtps_u32_f32(v27 / v47);
        if (v29 <= v30) {
          size_t v31 = v30;
        }
        else {
          size_t v31 = v29;
        }
        std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)&v45[4], v31);
        unint64_t v19 = *(void *)&v45[12];
        if ((*(void *)&v45[12] & (*(void *)&v45[12] - 1)) != 0)
        {
          if (*(void *)&v45[12] <= v20) {
            unint64_t v4 = v20 % *(void *)&v45[12];
          }
          else {
            unint64_t v4 = v20;
          }
        }
        else
        {
          unint64_t v4 = (*(_DWORD *)&v45[12] - 1) & v20;
        }
      }
      uint64_t v32 = *(void *)&v45[4];
      uint64_t v33 = *(void **)(*(void *)&v45[4] + 8 * v4);
      if (v33)
      {
        *uint64_t v25 = *v33;
      }
      else
      {
        *uint64_t v25 = v46;
        *(void *)&long long v46 = v25;
        *(void *)(v32 + 8 * v4) = &v46;
        if (!*v25) {
          goto LABEL_54;
        }
        unint64_t v34 = *(void *)(*v25 + 8);
        if ((v19 & (v19 - 1)) != 0)
        {
          if (v34 >= v19) {
            v34 %= v19;
          }
        }
        else
        {
          v34 &= v19 - 1;
        }
        uint64_t v33 = (void *)(*(void *)&v45[4] + 8 * v34);
      }
      *uint64_t v33 = v25;
LABEL_54:
      ++*((void *)&v46 + 1);
LABEL_55:
      std::string::size_type v18 = (uint64_t *)*v18;
      if (!v18) {
        goto LABEL_56;
      }
    }
  }
  if (a3)
  {
    uint64_t v12 = (uint64_t)(v10 + 2);
    int v13 = &a4->mQualifierDataType;
    do
    {
      unsigned int v44 = *(v13 - 2);
      *(void *)__int16 v45 = *(void *)(v13 - 1);
      std::__hash_table<std::__hash_value_type<unsigned int,Custom_Property_Types>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Custom_Property_Types>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Custom_Property_Types>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Custom_Property_Types>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,Custom_Property_Types>>(v12, v44, (uint64_t)&v44);
      v13 += 3;
      --a3;
    }
    while (a3);
  }
LABEL_69:
  std::mutex::unlock(v9);
}

void sub_1BAD76958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(v17);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)&a17);
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned int,Custom_Property_Types>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Custom_Property_Types>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Custom_Property_Types>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Custom_Property_Types>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,Custom_Property_Types>>(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    char v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = operator new(0x20uLL);
  *uint64_t v12 = 0;
  v12[1] = v6;
  unsigned char v12[2] = *(void *)a3;
  *((_DWORD *)v12 + 6) = *(_DWORD *)(a3 + 8);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *uint64_t v12 = *v20;
LABEL_38:
    *unint64_t v20 = v12;
    goto LABEL_39;
  }
  *uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v21 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_1BAD76BAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::pair<unsigned int,std::unordered_map<unsigned int,Custom_Property_Types>>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  unint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    int v7 = *(_DWORD *)(v4 - 48);
    v4 -= 48;
    *(_DWORD *)(v6 - 48) = v7;
    v6 -= 48;
    double result = (uint64_t *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table(v6 + 8, (uint64_t *)(v4 + 8));
  }
  a2[1] = v6;
  uint64_t v8 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v8;
  uint64_t v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<unsigned int,std::unordered_map<unsigned int,Custom_Property_Types>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(i - 40);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void Property_Type_Info::remove_custom_properties(Property_Type_Info *this, int a2)
{
  uint64_t v4 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  unint64_t v5 = *(void *)this;
  uint64_t v6 = *((void *)this + 1);
  if (*(void *)this != v6)
  {
    while (*(_DWORD *)v5 != a2)
    {
      v5 += 48;
      if (v5 == v6) {
        goto LABEL_31;
      }
    }
  }
  if (v5 != v6)
  {
    unint64_t v7 = v5 + 48;
    if (v5 + 48 != v6)
    {
      do
      {
        *(_DWORD *)unint64_t v5 = *(_DWORD *)v7;
        if (*(void *)(v5 + 32))
        {
          uint64_t v8 = *(void **)(v5 + 24);
          if (v8)
          {
            do
            {
              uint64_t v9 = (void *)*v8;
              operator delete(v8);
              uint64_t v8 = v9;
            }
            while (v9);
          }
          *(void *)(v5 + 24) = 0;
          uint64_t v10 = *(void *)(v5 + 16);
          if (v10)
          {
            for (uint64_t i = 0; i != v10; ++i)
              *(void *)(*(void *)(v5 + 8) + 8 * i) = 0;
          }
          *(void *)(v5 + 32) = 0;
        }
        uint64_t v12 = *(void *)(v7 + 8);
        *(void *)(v7 + 8) = 0;
        float v13 = *(void **)(v5 + 8);
        *(void *)(v5 + 8) = v12;
        if (v13) {
          operator delete(v13);
        }
        uint64_t v14 = *(void *)(v7 + 24);
        unint64_t v15 = *(void *)(v7 + 16);
        *(void *)(v5 + 24) = v14;
        *(void *)(v5 + 16) = v15;
        *(void *)(v7 + 16) = 0;
        uint64_t v16 = *(void *)(v7 + 32);
        *(void *)(v5 + 32) = v16;
        *(_DWORD *)(v5 + 40) = *(_DWORD *)(v7 + 40);
        if (v16)
        {
          unint64_t v17 = *(void *)(v14 + 8);
          if ((v15 & (v15 - 1)) != 0)
          {
            if (v17 >= v15) {
              v17 %= v15;
            }
          }
          else
          {
            v17 &= v15 - 1;
          }
          *(void *)(*(void *)(v5 + 8) + 8 * v17) = v5 + 24;
          *(void *)(v7 + 24) = 0;
          *(void *)(v7 + 32) = 0;
        }
        v7 += 48;
        v5 += 48;
      }
      while (v7 != v6);
      uint64_t v6 = *((void *)this + 1);
    }
    for (; v6 != v5; v6 -= 48)
      std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(v6 - 40);
    *((void *)this + 1) = v5;
    unint64_t v18 = *(void *)this;
    int64x2_t v19 = *(int64x2_t *)((char *)this + 8);
    int64x2_t v20 = vshrq_n_s64(vsubq_s64(v19, vdupq_n_s64(*(void *)this)), 4uLL);
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * v20.i64[0];
    unint64_t v22 = v21;
    if (0xAAAAAAAAAAAAAAABLL * v20.i64[1] > v21)
    {
      unint64_t v29 = (char *)this + 16;
      if (v19.i64[0] == v18)
      {
        unint64_t v23 = 0;
        uint64_t v24 = 0;
      }
      else
      {
        unint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MutationItinerary::Device>>(v21);
      }
      uint64_t v25 = v23;
      uint64_t v26 = &v23[48 * v22];
      float v27 = v26;
      BOOL v28 = &v23[48 * v24];
      std::vector<std::pair<unsigned int,std::unordered_map<unsigned int,Custom_Property_Types>>>::__swap_out_circular_buffer((uint64_t *)this, &v25);
      std::__split_buffer<std::pair<unsigned int,std::unordered_map<unsigned int,Custom_Property_Types>>>::~__split_buffer((uint64_t)&v25);
    }
  }
LABEL_31:

  std::mutex::unlock(v4);
}

void sub_1BAD76ED4(void *a1)
{
}

void CAAudioValueRange_ComputeUnion(double *a1, double **a2, char **a3)
{
  unint64_t v5 = *a3;
  a3[1] = *a3;
  unint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 == v6)
  {
LABEL_22:
    double v23 = *a1;
    uint64_t v22 = *((void *)a1 + 1);
    unint64_t v24 = (unint64_t)a3[2];
    if ((unint64_t)v5 < v24)
    {
      *(double *)unint64_t v5 = v23;
      *((void *)v5 + 1) = v22;
      uint64_t v25 = v5 + 16;
LABEL_70:
      a3[1] = v25;
      return;
    }
    uint64_t v29 = (v5 - *a3) >> 4;
    if (!((unint64_t)(v29 + 1) >> 60))
    {
      uint64_t v30 = v24 - (void)*a3;
      uint64_t v31 = v30 >> 3;
      if (v30 >> 3 <= (unint64_t)(v29 + 1)) {
        uint64_t v31 = v29 + 1;
      }
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v32 = v31;
      }
      if (v32) {
        unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v32);
      }
      else {
        uint64_t v33 = 0;
      }
      int v50 = (void *)(v32 + 16 * v29);
      unint64_t v51 = v32 + 16 * v33;
      *(double *)int v50 = v23;
      v50[1] = v22;
      uint64_t v25 = (char *)(v50 + 2);
      uint64_t v53 = *a3;
      uint64_t v52 = a3[1];
      if (v52 != *a3)
      {
        do
        {
          *((_OWORD *)v50 - 1) = *((_OWORD *)v52 - 1);
          v50 -= 2;
          v52 -= 16;
        }
        while (v52 != v53);
        uint64_t v52 = *a3;
      }
      *a3 = (char *)v50;
      a3[1] = v25;
      a3[2] = (char *)v51;
      if (v52) {
        operator delete(v52);
      }
      goto LABEL_70;
    }
LABEL_103:
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  double v9 = *a1;
  if (v7[1] < *a1)
  {
    while (1)
    {
      unint64_t v10 = (unint64_t)a3[2];
      if ((unint64_t)v5 >= v10)
      {
        uint64_t v11 = (v5 - *a3) >> 4;
        if ((unint64_t)(v11 + 1) >> 60) {
          goto LABEL_103;
        }
        uint64_t v12 = v10 - (void)*a3;
        uint64_t v13 = v12 >> 3;
        if (v12 >> 3 <= (unint64_t)(v11 + 1)) {
          uint64_t v13 = v11 + 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v14);
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v16 = (char *)(v14 + 16 * v11);
        *(_OWORD *)uint64_t v16 = *(_OWORD *)v7;
        unint64_t v18 = *a3;
        unint64_t v17 = a3[1];
        int64x2_t v19 = v16;
        if (v17 != *a3)
        {
          do
          {
            *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
            v19 -= 16;
            v17 -= 16;
          }
          while (v17 != v18);
          unint64_t v17 = *a3;
        }
        unint64_t v5 = v16 + 16;
        *a3 = v19;
        a3[1] = v16 + 16;
        a3[2] = (char *)(v14 + 16 * v15);
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(_OWORD *)unint64_t v5 = *(_OWORD *)v7;
        v5 += 16;
      }
      a3[1] = v5;
      int64x2_t v20 = v7 + 2;
      uint64_t v6 = a2[1];
      if (v7 + 2 == v6) {
        goto LABEL_22;
      }
      double v21 = v7[3];
      double v9 = *a1;
      v7 += 2;
      if (v21 >= *a1) {
        goto LABEL_25;
      }
    }
  }
  int64x2_t v20 = *a2;
LABEL_25:
  double v26 = a1[1];
  if (*v20 <= v26)
  {
    unint64_t v34 = v20 + 2;
    while (1)
    {
      unint64_t v35 = v34;
      if (v34 == v6) {
        break;
      }
      v34 += 2;
      if (*v35 > v26)
      {
        uint64_t v36 = v35 - 2;
        uint64_t v6 = v34 - 2;
        goto LABEL_41;
      }
    }
    uint64_t v36 = v34 - 2;
LABEL_41:
    if (v9 >= *v20) {
      __int16 v37 = v20;
    }
    else {
      __int16 v37 = a1;
    }
    uint64_t v38 = *(void *)v37;
    if (v36[1] >= v26) {
      double v26 = v36[1];
    }
    unint64_t v39 = (unint64_t)a3[2];
    if ((unint64_t)v5 >= v39)
    {
      uint64_t v45 = (v5 - *a3) >> 4;
      if ((unint64_t)(v45 + 1) >> 60) {
        goto LABEL_103;
      }
      uint64_t v46 = v39 - (void)*a3;
      uint64_t v47 = v46 >> 3;
      if (v46 >> 3 <= (unint64_t)(v45 + 1)) {
        uint64_t v47 = v45 + 1;
      }
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v48 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v48 = v47;
      }
      if (v48) {
        unint64_t v48 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v48);
      }
      else {
        uint64_t v49 = 0;
      }
      unint64_t v58 = v48 + 16 * v45;
      unint64_t v59 = v48 + 16 * v49;
      *(void *)unint64_t v58 = v38;
      *(double *)(v58 + 8) = v26;
      BOOL v28 = (char *)(v58 + 16);
      double v61 = *a3;
      mach_port_t v60 = a3[1];
      if (v60 != *a3)
      {
        do
        {
          *(_OWORD *)(v58 - 16) = *((_OWORD *)v60 - 1);
          v58 -= 16;
          v60 -= 16;
        }
        while (v60 != v61);
        mach_port_t v60 = *a3;
      }
      *a3 = (char *)v58;
      a3[1] = v28;
      a3[2] = (char *)v59;
      if (v60) {
        operator delete(v60);
      }
    }
    else
    {
      *(void *)unint64_t v5 = v38;
      *((double *)v5 + 1) = v26;
      BOOL v28 = v5 + 16;
    }
  }
  else
  {
    unint64_t v27 = (unint64_t)a3[2];
    if ((unint64_t)v5 >= v27)
    {
      uint64_t v40 = (v5 - *a3) >> 4;
      if ((unint64_t)(v40 + 1) >> 60) {
        goto LABEL_103;
      }
      uint64_t v41 = v27 - (void)*a3;
      uint64_t v42 = v41 >> 3;
      if (v41 >> 3 <= (unint64_t)(v40 + 1)) {
        uint64_t v42 = v40 + 1;
      }
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v43 = v42;
      }
      if (v43) {
        unint64_t v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v43);
      }
      else {
        uint64_t v44 = 0;
      }
      uint64_t v54 = (double *)(v43 + 16 * v40);
      unint64_t v55 = v43 + 16 * v44;
      *uint64_t v54 = v9;
      v54[1] = v26;
      BOOL v28 = (char *)(v54 + 2);
      unint64_t v57 = *a3;
      unint64_t v56 = a3[1];
      if (v56 != *a3)
      {
        do
        {
          *((_OWORD *)v54 - 1) = *((_OWORD *)v56 - 1);
          v54 -= 2;
          v56 -= 16;
        }
        while (v56 != v57);
        unint64_t v56 = *a3;
      }
      *a3 = (char *)v54;
      a3[1] = v28;
      a3[2] = (char *)v55;
      if (v56) {
        operator delete(v56);
      }
    }
    else
    {
      *(double *)unint64_t v5 = v9;
      *((double *)v5 + 1) = v26;
      BOOL v28 = v5 + 16;
    }
    uint64_t v6 = v20;
  }
  for (a3[1] = v28; v6 != a2[1]; v6 += 2)
  {
    unint64_t v62 = (unint64_t)a3[2];
    if ((unint64_t)v28 >= v62)
    {
      uint64_t v63 = (v28 - *a3) >> 4;
      if ((unint64_t)(v63 + 1) >> 60) {
        goto LABEL_103;
      }
      uint64_t v64 = v62 - (void)*a3;
      uint64_t v65 = v64 >> 3;
      if (v64 >> 3 <= (unint64_t)(v63 + 1)) {
        uint64_t v65 = v63 + 1;
      }
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v66 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v66 = v65;
      }
      if (v66) {
        unint64_t v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v66);
      }
      else {
        uint64_t v67 = 0;
      }
      uint64_t v68 = (char *)(v66 + 16 * v63);
      *(_OWORD *)uint64_t v68 = *(_OWORD *)v6;
      char v70 = *a3;
      double v69 = a3[1];
      std::string v71 = v68;
      if (v69 != *a3)
      {
        do
        {
          *((_OWORD *)v71 - 1) = *((_OWORD *)v69 - 1);
          v71 -= 16;
          v69 -= 16;
        }
        while (v69 != v70);
        double v69 = *a3;
      }
      BOOL v28 = v68 + 16;
      *a3 = v71;
      a3[1] = v68 + 16;
      a3[2] = (char *)(v66 + 16 * v67);
      if (v69) {
        operator delete(v69);
      }
    }
    else
    {
      *(_OWORD *)BOOL v28 = *(_OWORD *)v6;
      v28 += 16;
    }
    a3[1] = v28;
  }
}

void ADS::PropertyManager::FindProperty(ADS::PropertyManager *this, long long a2, int a3)
{
  uint64_t v4 = *(uint64_t **)a2;
  unint64_t v5 = *(uint64_t **)(a2 + 8);
  if (*(uint64_t **)a2 == v5)
  {
LABEL_22:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    return;
  }
  int v7 = DWORD2(a2);
  uint64_t v8 = a2;
  uint64_t v9 = HIDWORD(*((void *)&a2 + 1));
  do
  {
    uint64_t v10 = *v4;
    uint64_t v11 = (std::__shared_weak_count *)v4[1];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 64))(v10);
    if (v12 != v7)
    {
      BOOL v15 = 0;
      if (!v11) {
        goto LABEL_16;
      }
LABEL_15:
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      goto LABEL_16;
    }
    BOOL v15 = HIDWORD(v12) == v9 && a3 == v13;
    if (v11) {
      goto LABEL_15;
    }
LABEL_16:
    if (v15) {
      goto LABEL_19;
    }
    v4 += 2;
  }
  while (v4 != v5);
  uint64_t v4 = v5;
LABEL_19:
  if (v4 == *(uint64_t **)(v8 + 8)) {
    goto LABEL_22;
  }
  uint64_t v16 = v4[1];
  *(void *)this = *v4;
  *((void *)this + 1) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_1BAD77494(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void ADS::PropertyManager::AddProperty(uint64_t a1, void *a2)
{
  unint64_t v5 = *(void **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if ((unint64_t)v5 < v4)
  {
    uint64_t v6 = a2[1];
    void *v5 = *a2;
    v5[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    int v7 = v5 + 2;
    goto LABEL_23;
  }
  uint64_t v8 = *(void **)a1;
  uint64_t v9 = ((uint64_t)v5 - *(void *)a1) >> 4;
  unint64_t v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 60) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v11 = v4 - (void)v8;
  if (v11 >> 3 > v10) {
    unint64_t v10 = v11 >> 3;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  int v13 = (char *)operator new(16 * v12);
  unint64_t v14 = &v13[16 * v9];
  long long v15 = *(_OWORD *)a2;
  *(_OWORD *)unint64_t v14 = *(_OWORD *)a2;
  if (*((void *)&v15 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v8 = *(void **)a1;
    unint64_t v5 = *(void **)(a1 + 8);
  }
  uint64_t v16 = &v13[16 * v12];
  int v7 = v14 + 16;
  if (v5 == v8)
  {
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v16;
    if (!v8) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  do
  {
    long long v17 = *((_OWORD *)v5 - 1);
    v5 -= 2;
    *((_OWORD *)v14 - 1) = v17;
    v14 -= 16;
    void *v5 = 0;
    v5[1] = 0;
  }
  while (v5 != v8);
  unint64_t v18 = *(void **)a1;
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)a1 = v14;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v16;
  if (v8 != v18)
  {
    do
    {
      int64x2_t v19 = (std::__shared_weak_count *)*(v8 - 1);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v8 -= 2;
    }
    while (v8 != v18);
    uint64_t v8 = v18;
  }
  if (v8) {
LABEL_22:
  }
    operator delete(v8);
LABEL_23:
  *(void *)(a1 + 8) = v7;
}

void sub_1BAD775FC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZN3ADS15PropertyManager15SetPropertyDataEj26AudioObjectPropertyAddressPKvjNS_17SettabilityPolicyE_block_invoke(uint64_t result)
{
  if (ADS::Simulator::sHost)
  {
    uint64_t v1 = *(unsigned int *)(result + 40);
    uint64_t v2 = *(void *)(result + 32);
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(ADS::Simulator::sHost + 32);
    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    return v3(ADS::Simulator::sHost, v1, 0, v2);
  }
  return result;
}

void sub_1BAD77690(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t std::__split_buffer<std::unique_ptr<HALS_PlugInManager::DeferredPlugInLoadInfo>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    std::unique_ptr<HALS_PlugInManager::DeferredPlugInLoadInfo>::reset[abi:ne180100]((HALS_PlugInManager::DeferredPlugInLoadInfo **)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

HALS_PlugInManager::DeferredPlugInLoadInfo *std::unique_ptr<HALS_PlugInManager::DeferredPlugInLoadInfo>::reset[abi:ne180100](HALS_PlugInManager::DeferredPlugInLoadInfo **a1, HALS_PlugInManager::DeferredPlugInLoadInfo *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    HALS_PlugInManager::DeferredPlugInLoadInfo::~DeferredPlugInLoadInfo(result);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

void HALS_PlugInManager::DeferredPlugInLoadInfo::~DeferredPlugInLoadInfo(HALS_PlugInManager::DeferredPlugInLoadInfo *this)
{
  uint64_t v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (io_object_t *)*((void *)this + 3);
  unint64_t v4 = (io_object_t *)*((void *)this + 4);
  if (v3 != v4)
  {
    do
      IOObjectRelease(*v3++);
    while (v3 != v4);
    uint64_t v3 = (io_object_t *)*((void *)this + 3);
  }
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

void HALS_PlugInManager::LoadPlugIns(HALS_PlugInManager *this)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (const char **)operator new(0x18uLL);
  uint64_t v2 = 0;
  *((void *)&v3 + 1) = 0x1BB09DF55;
  long long v29 = xmmword_1E6233A20;
  *(_OWORD *)uint64_t v1 = xmmword_1E6233A20;
  unint64_t v4 = MEMORY[0x1E4F14500];
  uint64_t v30 = v1;
  BOOL v28 = "/Library/Apple/Audio/Plug-Ins/HAL";
  v1[2] = "/Library/Apple/Audio/Plug-Ins/HAL";
  *(void *)&long long v3 = 136315394;
  long long v31 = v3;
  *(void *)&long long v3 = 136315650;
  long long v35 = v3;
  do
  {
    CFStringRef v49 = CFStringCreateWithCString(0, v30[v2], 0x600u);
    char v50 = 1;
    CFURLRef v47 = CFURLCreateWithFileSystemPath(0, v49, kCFURLPOSIXPathStyle, 1u);
    char v48 = 1;
    if (v47)
    {
      CFDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
      __int16 v54 = 257;
      unint64_t v5 = operator new(0x18uLL);
      *(_OWORD *)unint64_t v5 = v29;
      v5[2] = v28;
      uint64_t v6 = (const char *)v5[v2];
      if (!access(v6, 5))
      {
        int v7 = opendir(v6);
        if (v7)
        {
          uint64_t v41 = 0;
          bzero(&v58, 0x418uLL);
          for (int i = readdir_r(v7, &v58, &v41); !i && v41; int i = readdir_r(v7, &v58, &v41))
          {
            d_name = v41->d_name;
            unint64_t v10 = &v41->d_name[strlen(v41->d_name) - 1];
            do
            {
              uint64_t v11 = v10;
              int v13 = *v10--;
              int v12 = v13;
            }
            while (v11 >= d_name && v12 != 46);
            if (v11 >= d_name && !strcmp(v10 + 1, ".driver"))
            {
              CFDictionaryRef v14 = (const __CFDictionary *)CFStringCreateWithFileSystemRepresentation(0, d_name);
              CFMutableDictionaryRef v51 = v14;
              LOBYTE(v52) = 1;
              if (v14 && Mutable)
              {
                if (HIBYTE(v54)) {
                  CFArrayAppendValue(Mutable, v14);
                }
              }
              CACFString::~CACFString((CACFString *)&v51);
            }
          }
          closedir(v7);
        }
      }
      uint64_t v32 = v2;
      if (Mutable)
      {
        CFRetain(Mutable);
        CFArrayRef v15 = Mutable;
      }
      else
      {
        CFArrayRef v15 = 0;
      }
      operator delete(v5);
      CACFArray::~CACFArray((CACFArray *)&Mutable);
      CFArrayRef v45 = v15;
      __int16 v46 = 1;
      if (v15)
      {
        CFIndex Count = CFArrayGetCount(v15);
        if (Count)
        {
          CFIndex v34 = Count;
          unint64_t v43 = 0;
          unsigned int CFType = CACFArray::GetCFType(&v45, 0, (const void **)&v43);
          unint64_t v18 = v43;
          if (v43) {
            unsigned int v19 = CFType;
          }
          else {
            unsigned int v19 = 0;
          }
          if (v19 == 1)
          {
            CFTypeID v20 = CFGetTypeID(v43);
            if (v20 == CFStringGetTypeID())
            {
              double v21 = (void *)MEMORY[0x1C18586C0](0, v18, 0, 1, v47);
              unint64_t v43 = v21;
              char v44 = 1;
              if (v21)
              {
                uint64_t v41 = (dirent *)CFURLCopyAbsoluteURL((CFURLRef)v21);
                char v42 = 1;
                CFStringRef v39 = CFURLGetString((CFURLRef)v41);
                char v40 = 0;
                int v38 = 1024;
                MEMORY[0x1F4188790](v39);
                CACFString::GetCString(v39, (__CFString *)&v27 - 32, (char *)&v38, v22);
                if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(v58.d_ino) = v35;
                  *(__uint64_t *)((char *)&v58.d_ino + 4) = (__uint64_t)"HALS_PlugInManager.cpp";
                  WORD2(v58.d_seekoff) = 1024;
                  *(_DWORD *)((char *)&v58.d_seekoff + 6) = 142;
                  v58.d_namlen = 2080;
                  *(void *)&v58.d_type = &v27 - 128;
                  _os_log_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInManager::LoadPlugIns: loading plug-in from: %s", (uint8_t *)&v58, 0x1Cu);
                }
                unint64_t v55 = &unk_1F1461AA8;
                CFBundleRef v56 = CFBundleCreate(0, (CFURLRef)v43);
                char v57 = 1;
                v58.CFArrayRef d_ino = (__uint64_t)CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
                LOWORD(v58.d_seekoff) = 257;
                if (v56)
                {
                  CFDictionaryRef Mutable = CFBundleGetInfoDictionary(v56);
                  __int16 v54 = 0;
                  if (Mutable)
                  {
                    CFMutableDictionaryRef v51 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
                    __int16 v52 = 257;
                    CACFDictionary::GetCACFDictionary(&Mutable, @"AudioServerPlugIn_LoadingConditions", (CACFDictionary *)&v51);
                    if (v51) {
                      CACFDictionary::GetCACFArray(&v51, @"IOService Matching", (CACFArray *)&v58);
                    }
                    CACFDictionary::~CACFDictionary((CACFDictionary *)&v51);
                  }
                }
                else
                {
                  CFDictionaryRef Mutable = 0;
                  __int16 v54 = 0;
                }
                if (v58.d_ino)
                {
                  CFRetain((CFTypeRef)v58.d_ino);
                  CFArrayRef d_ino = (const __CFArray *)v58.d_ino;
                }
                else
                {
                  CFArrayRef d_ino = 0;
                }
                CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
                CACFArray::~CACFArray((CACFArray *)&v58);
                HALB_CFBundle::~HALB_CFBundle((HALB_CFBundle *)&v55);
                CFArrayRef v36 = d_ino;
                __int16 v37 = 1;
                if (d_ino && CFArrayGetCount(d_ino))
                {
                  uint64_t v33 = &v27;
                  operator new();
                }
                if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(v58.d_ino) = v31;
                  *(__uint64_t *)((char *)&v58.d_ino + 4) = (__uint64_t)"HALS_PlugInManager.cpp";
                  WORD2(v58.d_seekoff) = 1024;
                  *(_DWORD *)((char *)&v58.d_seekoff + 6) = 227;
                  _os_log_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInManager::LoadPlugIns:     Loading....", (uint8_t *)&v58, 0x12u);
                }
                HALS_PlugInManager::CreatePlugIn((HALS_PlugInManager *)v43, v24);
              }
              if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
              {
                LODWORD(v58.d_ino) = v31;
                *(__uint64_t *)((char *)&v58.d_ino + 4) = (__uint64_t)"HALS_PlugInManager.cpp";
                WORD2(v58.d_seekoff) = 1024;
                *(_DWORD *)((char *)&v58.d_seekoff + 6) = 134;
                _os_log_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInManager::LoadPlugIns: failed to create a URL for the plug-in", (uint8_t *)&v58, 0x12u);
              }
              exception = __cxa_allocate_exception(0x10uLL);
              *(void *)exception = off_1F148A5D8;
              exception[2] = 1852797029;
            }
          }
          if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v58.d_ino) = v31;
            *(__uint64_t *)((char *)&v58.d_ino + 4) = (__uint64_t)"HALS_PlugInManager.cpp";
            WORD2(v58.d_seekoff) = 1024;
            *(_DWORD *)((char *)&v58.d_seekoff + 6) = 130;
            _os_log_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInManager::LoadPlugIns: failed to get the name of the plug-in", (uint8_t *)&v58, 0x12u);
          }
          uint64_t v25 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v25 = off_1F148A5D8;
          v25[2] = 1852797029;
        }
      }
      CACFArray::~CACFArray((CACFArray *)&v45);
      uint64_t v2 = v32;
    }
    CACFObject<__CFURL const*>::~CACFObject((uint64_t)&v47);
    CACFString::~CACFString((CACFString *)&v49);
    ++v2;
  }
  while (v2 != 3);
  operator delete(v30);
}

void sub_1BAD786E4(_Unwind_Exception *a1)
{
  CACFArray::~CACFArray((CACFArray *)(v1 + 23));
  CACFObject<__CFURL const*>::~CACFObject((uint64_t)(v1 + 25));
  CACFString::~CACFString((CACFString *)(v1 + 27));
  operator delete(v1[5]);
  _Unwind_Resume(a1);
}

void sub_1BAD78764(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAD7876CLL);
  }
  __clang_call_terminate(a1);
}

const void **applesauce::CF::ObjectRef<__CFString const*>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void HALS_PlugInManager::CreatePlugIn(HALS_PlugInManager *this, const __CFURL *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  v2[1] = 0;
  HALS_System::GetInstance(&v3, 0, v2);
  operator new();
}

void sub_1BAD79AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t HALS_PlugInManager::DeferredPlugInLoadingMatchingHandler(HALS_PlugInManager *this, io_iterator_t iterator)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)HALS_PlugInManager::sDeferredPlugInLoadList;
  uint64_t v3 = *(void *)(HALS_PlugInManager::sDeferredPlugInLoadList + 8);
  if (*(void *)HALS_PlugInManager::sDeferredPlugInLoadList != v3)
  {
    while (**(HALS_PlugInManager ***)v4 != this)
    {
      v4 += 8;
      if (v4 == v3) {
        goto LABEL_9;
      }
    }
  }
  if (v4 != v3)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      uint64_t v8 = "HALS_PlugInManager.cpp";
      __int16 v9 = 1024;
      int v10 = 651;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInManager::DeferredPlugInLoadingMatchingHandler: Loading....", (uint8_t *)&v7, 0x12u);
    }
    HALS_PlugInManager::CreatePlugIn(*(HALS_PlugInManager **)(*(void *)v4 + 8), v5);
  }
LABEL_9:
  for (uint64_t result = IOIteratorNext(iterator); result; uint64_t result = IOIteratorNext(iterator))
    IOObjectRelease(result);
  return result;
}

void sub_1BAD79DA8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAD79D58);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_CustomProcessor::MyProcessInputSequence(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, void))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), *(void *)a2, *a3, **(unsigned int **)(a2 + 8));
  a3[1] = *(void *)(a2 + 8);
  return result;
}

void HALS_CustomProcessor::~HALS_CustomProcessor(HALS_CustomProcessor *this)
{
}

void HALS_VolumeProcessor::MyProcessInputSequence(HALS_VolumeProcessor *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v6 = *(unsigned __int8 **)a3;
  int v7 = *(unsigned __int8 **)a2;
  uint64_t v8 = *(unsigned int **)(a2 + 8);
  if (v7 == v6) {
    HALS_VolumeProcessor::Process(a1, a4, v7, *v8);
  }
  else {
    HALS_VolumeProcessor::Process(a1, a4, (float *)v7, v6, *v8);
  }
  *(void *)(a3 + 8) = *(void *)(a2 + 8);
}

float HALS_VolumeProcessor::Process(HALS_VolumeProcessor *this, double a2, float *__A, unsigned __int8 *a4, unsigned int a5)
{
  unsigned int v5 = a5;
  uint64_t v6 = a4;
  int v7 = __A;
  if (*((unsigned char *)this + 8))
  {
    double v9 = *((double *)this + 4);
    if (v9 == 0.0)
    {
      *((double *)this + 4) = a2;
      double v9 = a2;
    }
    double v10 = (double)a5 + a2;
    if (v10 < v9)
    {
      unsigned int v11 = 0;
      unsigned int v12 = 0;
      goto LABEL_26;
    }
    double v14 = v9 + *((double *)this + 5);
    if (v14 <= a2) {
      goto LABEL_57;
    }
    if (v9 > a2 && v10 >= v14)
    {
      unsigned int v5 = (v9 - a2);
      unsigned int v11 = (v14 - v9);
      a2 = v10 - v14;
      unsigned int v12 = (v10 - v14);
      goto LABEL_26;
    }
    if (v9 <= a2 && v10 < v14)
    {
      unsigned int v12 = 0;
      unsigned int v11 = a5;
      if (!a5) {
        goto LABEL_56;
      }
      goto LABEL_36;
    }
    if (v9 > a2 && v10 >= v9 && v10 < v14)
    {
      unsigned int v12 = 0;
      unsigned int v5 = (v9 - a2);
      a2 = v10 - v9;
      unsigned int v11 = (v10 - v9);
LABEL_26:
      if (v5)
      {
        float v18 = *((float *)this + 5);
        if (v18 == 1.0)
        {
          memcpy(a4, __A, 4 * *((_DWORD *)this + 4) * v5);
        }
        else if (v18 == 0.0)
        {
          bzero(a4, 4 * *((_DWORD *)this + 4) * v5);
        }
        else
        {
          float __B = v18 * v18;
          vDSP_vsmul(__A, 1, &__B, (float *)a4, 1, *((_DWORD *)this + 4) * v5);
        }
        unsigned int v19 = *((_DWORD *)this + 4) * v5;
        v7 += v19;
        v6 += 4 * v19;
      }
      if (v11) {
        goto LABEL_36;
      }
      goto LABEL_56;
    }
    if (v9 <= a2 && v14 > a2 && v10 >= v14)
    {
      unsigned int v11 = (v14 - a2);
      a2 = v10 - v14;
      unsigned int v12 = (v10 - v14);
      if (!v11)
      {
LABEL_56:
        unsigned int v5 = v12;
LABEL_57:
        if (v5)
        {
          float v28 = *((float *)this + 6);
          *((float *)this + 5) = v28;
          if (v28 == 1.0)
          {
            memcpy(v6, v7, 4 * *((_DWORD *)this + 4) * v5);
          }
          else if (v28 == 0.0)
          {
            bzero(v6, 4 * *((_DWORD *)this + 4) * v5);
          }
          else
          {
            float v30 = v28 * v28;
            vDSP_vsmul(v7, 1, &v30, (float *)v6, 1, *((_DWORD *)this + 4) * v5);
          }
        }
        return *(float *)&a2;
      }
LABEL_36:
      int v20 = 0;
      uint64_t v21 = *((unsigned int *)this + 4);
      uint64_t v22 = 4 * v21;
      while (1)
      {
        if (v21)
        {
          unint64_t v23 = 0;
          do
          {
            *(float *)&v6[v23] = (float)(*((float *)this + 5) * *((float *)this + 5)) * v7[v23 / 4];
            v23 += 4;
          }
          while (v22 != v23);
        }
        float v24 = *((float *)this + 5);
        LODWORD(a2) = *((_DWORD *)this + 6);
        float v25 = *((float *)this + 7);
        if (v25 >= 0.0) {
          break;
        }
        if (v24 > *(float *)&a2) {
          goto LABEL_42;
        }
LABEL_43:
        *((_DWORD *)this + 5) = LODWORD(a2);
        int v7 = (float *)((char *)v7 + v22);
        v6 += v22;
        if (++v20 == v11) {
          goto LABEL_56;
        }
      }
      if (v25 <= 0.0 || v24 >= *(float *)&a2) {
        goto LABEL_43;
      }
LABEL_42:
      *(float *)&a2 = v24 + v25;
      goto LABEL_43;
    }
  }
  else
  {
    size_t v13 = *((_DWORD *)this + 3) * a5;
    memcpy(v6, __A, v13);
  }
  return *(float *)&a2;
}

void HALS_VolumeProcessor::~HALS_VolumeProcessor(HALS_VolumeProcessor *this)
{
}

void HALS_Resampler::MyProcessInputSequence(HALS_Resampler *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
}

void HALS_Resampler::Process(HALS_Resampler *this, const unsigned __int8 *a2, unsigned int *a3, unsigned __int8 *a4, unsigned int *a5, unsigned __int8 *a6)
{
  if (*((unsigned char *)this + 8))
  {
    unsigned int v11 = (OpaqueAudioConverter *)*((void *)this + 13);
    if (v11 && *((void *)this + 14))
    {
      UInt32 v13 = *((_DWORD *)this + 3) * *a3;
      UInt32 ioOutputDataSize = 4 * *a3 * *((_DWORD *)this + 4);
      AudioConverterConvertBuffer(v11, v13, a2, &ioOutputDataSize, a4);
      unsigned int v14 = *a3;
      unsigned int v18 = *a5;
      unsigned int v19 = v14;
      HALS_Resampler::Process_Resample(this, a4, &v19, a6, &v18);
      *a3 = v19;
      unsigned int v15 = v18;
      *a5 = v18;
      UInt32 v16 = 4 * v15 * *((_DWORD *)this + 4);
      UInt32 ioOutputDataSize = *((_DWORD *)this + 3) * v15;
      AudioConverterConvertBuffer(*((AudioConverterRef *)this + 14), v16, a6, &ioOutputDataSize, a4);
    }
    else
    {
      HALS_Resampler::Process_Resample(this, a2, a3, a4, a5);
    }
  }
  else
  {
    if (*((unsigned char *)this + 10)) {
      size_t v17 = *((_DWORD *)this + 3) * *a3;
    }
    else {
      size_t v17 = *((unsigned int *)this + 3);
    }
    memcpy(a4, a2, v17);
    *a5 = *a3;
  }
}

void HALS_Resampler::Process_Resample(HALS_Resampler *this, const unsigned __int8 *a2, unsigned int *a3, unsigned __int8 *a4, unsigned int *a5)
{
  size_t v7 = *((unsigned int *)this + 4);
  if (!v7)
  {
    unsigned int v30 = 0;
    unsigned int v31 = 0;
    goto LABEL_27;
  }
  unsigned int v11 = 0;
  do
  {
    unsigned int v12 = (float *)&a2[4 * v11];
    unsigned int v13 = v11 + 1;
    if (v11 + 1 >= v7) {
      unsigned int v14 = 0;
    }
    else {
      unsigned int v14 = (float *)&a2[4 * v13];
    }
    unsigned int v15 = *a3;
    UInt32 v16 = (float *)&a4[4 * v11];
    size_t v17 = &a4[4 * v13];
    if (v11 + 1 >= v7) {
      unsigned int v18 = 0;
    }
    else {
      unsigned int v18 = (float *)v17;
    }
    unsigned int v19 = *a5;
    unsigned int v35 = *a5;
    unsigned int v36 = v15;
    unint64_t v20 = v11 >> 1;
    int v21 = *((_DWORD *)this + 6);
    switch(v21)
    {
      case 2:
        uint64_t v24 = *((void *)this + 10);
        if (v20 >= (*((void *)this + 11) - v24) >> 3) {
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        }
        float v25 = *(RamstadSRC **)(v24 + 8 * v20);
        int v26 = *((_DWORD *)v25 + 12);
        if (v26 == 2)
        {
          RamstadSRC::processStereo(v25, v12, v14, v16, v18, v15, v19, v7, v7);
        }
        else
        {
          if (v26 != 1)
          {
            int v29 = 0;
            goto LABEL_23;
          }
          RamstadSRC::processMono(v25, v12, (float *)&a4[4 * v11], v15, v19, v7, v7);
        }
        int v29 = v27 & ~(v27 >> 31);
LABEL_23:
        *a3 = v29;
        break;
      case 1:
        uint64_t v28 = *((void *)this + 7);
        if (v20 >= (*((void *)this + 8) - v28) >> 3) {
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        }
        ShortTermLinearInterpolationResampler::PushConvertFloat(*(ShortTermLinearInterpolationResampler **)(v28 + 8 * v20), v12, v14, v16, v18, &v36, &v35, v7, v7);
        break;
      case 0:
        uint64_t v22 = *((void *)this + 4);
        if (v20 >= (*((void *)this + 5) - v22) >> 3) {
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        }
        unint64_t v23 = *(Resampler2 **)(v22 + 8 * v20);
        unsigned int v33 = v19;
        unsigned int v34 = v15;
        Resampler2::PushConvert(v23, v12, v14, v16, v18, &v34, &v33, v7, v7, v32);
        unsigned int v35 = v33;
        unsigned int v36 = v15;
        break;
    }
    v11 += 2;
    size_t v7 = *((unsigned int *)this + 4);
  }
  while (v11 < v7);
  unsigned int v30 = v35;
  unsigned int v31 = v36;
LABEL_27:
  *a3 = v31;
  *a5 = v30;
}

void HALS_Resampler::~HALS_Resampler(HALS_Resampler *this)
{
  HALS_Resampler::~HALS_Resampler(this);

  JUMPOUT(0x1C1859840);
}

{
  Resampler2 **v2;
  Resampler2 **v3;
  void *v4;
  void *v5;
  RamstadSRC **v6;
  RamstadSRC **v7;
  OpaqueAudioConverter *v8;
  OpaqueAudioConverter *v9;
  void *v10;
  void *v11;
  void *v12;

  *(void *)this = &unk_1F1471140;
  uint64_t v2 = (Resampler2 **)*((void *)this + 4);
  uint64_t v3 = (Resampler2 **)*((void *)this + 5);
  while (v2 != v3)
  {
    if (*v2)
    {
      Resampler2::~Resampler2(*v2);
      MEMORY[0x1C1859840]();
    }
    ++v2;
  }
  if (!*((_DWORD *)this + 6)) {
    Resampler2::ShutdownVarispeedMode((Resampler2 *)*((unsigned int *)this + 5));
  }
  uint64_t v4 = (void *)*((void *)this + 7);
  unsigned int v5 = (void *)*((void *)this + 8);
  while (v4 != v5)
  {
    if (*v4) {
      MEMORY[0x1C1859840](*v4, 0x1000C40AC875A91);
    }
    ++v4;
  }
  uint64_t v6 = (RamstadSRC **)*((void *)this + 10);
  size_t v7 = (RamstadSRC **)*((void *)this + 11);
  while (v6 != v7)
  {
    if (*v6)
    {
      RamstadSRC::~RamstadSRC(*v6);
      MEMORY[0x1C1859840]();
    }
    ++v6;
  }
  uint64_t v8 = (OpaqueAudioConverter *)*((void *)this + 13);
  if (v8) {
    AudioConverterDispose(v8);
  }
  double v9 = (OpaqueAudioConverter *)*((void *)this + 14);
  if (v9) {
    AudioConverterDispose(v9);
  }
  double v10 = (void *)*((void *)this + 10);
  if (v10)
  {
    *((void *)this + 11) = v10;
    operator delete(v10);
  }
  unsigned int v11 = (void *)*((void *)this + 7);
  if (v11)
  {
    *((void *)this + 8) = v11;
    operator delete(v11);
  }
  unsigned int v12 = (void *)*((void *)this + 4);
  if (v12)
  {
    *((void *)this + 5) = v12;
    operator delete(v12);
  }
}

void *HALS_DelayProcessor::MyProcessInputSequence(HALS_DelayProcessor *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = *(unsigned __int8 **)a3;
  uint64_t v6 = *(unsigned __int8 **)a2;
  size_t v7 = *(int **)(a2 + 8);
  if (v6 == v5) {
    uint64_t result = HALS_DelayProcessor::Process(a1, v6, *v7);
  }
  else {
    uint64_t result = HALS_DelayProcessor::Process(a1, v6, v5, *v7);
  }
  *(void *)(a3 + 8) = *(void *)(a2 + 8);
  return result;
}

void *HALS_DelayProcessor::Process(HALS_DelayProcessor *this, unsigned __int8 *a2, int a3)
{
  int v6 = *((_DWORD *)this + 10);
  int v7 = *((_DWORD *)this + 3);
  uint64_t v8 = (void *)(*((void *)this + 3) + (v7 * v6));
  unsigned int v9 = v6 + a3;
  unsigned int v10 = *((_DWORD *)this + 8);
  int v11 = v10 - v6;
  if (v6 + a3 > v10) {
    int v12 = v10 - v6;
  }
  else {
    int v12 = a3;
  }
  memcpy(v8, a2, (v12 * v7));
  if (v9 > v10 && a3 != v11) {
    memcpy(*((void **)this + 3), &a2[*((_DWORD *)this + 3) * v12], (*((_DWORD *)this + 3) * (a3 - v11)));
  }
  int v14 = *((_DWORD *)this + 9);
  unsigned int v15 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 10) = (*((_DWORD *)this + 10) + a3) % v15;
  unsigned int v16 = v14 + a3;
  int v17 = v15 - v14;
  if (v14 + a3 > v15) {
    int v18 = v15 - v14;
  }
  else {
    int v18 = a3;
  }
  uint64_t result = memcpy(a2, (const void *)(*((void *)this + 3) + (*((_DWORD *)this + 3) * v14)), (v18 * *((_DWORD *)this + 3)));
  if (v16 > v15 && a3 != v17) {
    uint64_t result = memcpy(&a2[*((_DWORD *)this + 3) * v18], *((const void **)this + 3), (*((_DWORD *)this + 3) * (a3 - v17)));
  }
  *((_DWORD *)this + 9) = (*((_DWORD *)this + 9) + a3) % *((_DWORD *)this + 8);
  return result;
}

void *HALS_DelayProcessor::Process(HALS_DelayProcessor *this, const unsigned __int8 *a2, unsigned __int8 *a3, unsigned int a4)
{
  int v8 = *((_DWORD *)this + 10);
  int v9 = *((_DWORD *)this + 3);
  unsigned int v10 = (void *)(*((void *)this + 3) + (v9 * v8));
  unsigned int v11 = *((_DWORD *)this + 8) - v8;
  if (v11 >= a4) {
    unsigned int v12 = a4;
  }
  else {
    unsigned int v12 = *((_DWORD *)this + 8) - v8;
  }
  memcpy(v10, a2, v12 * v9);
  if (v11 < a4)
  {
    unsigned int v13 = a4 - v11;
    if (a4 < v11) {
      unsigned int v13 = 0;
    }
    memcpy(*((void **)this + 3), &a2[*((_DWORD *)this + 3) * v12], *((_DWORD *)this + 3) * v13);
  }
  int v14 = *((_DWORD *)this + 9);
  unsigned int v15 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 10) = (*((_DWORD *)this + 10) + a4) % v15;
  unsigned int v16 = v15 - v14;
  if (v15 - v14 >= a4) {
    unsigned int v17 = a4;
  }
  else {
    unsigned int v17 = v15 - v14;
  }
  uint64_t result = memcpy(a3, (const void *)(*((void *)this + 3) + (*((_DWORD *)this + 3) * v14)), v17 * *((_DWORD *)this + 3));
  if (v16 < a4)
  {
    unsigned int v19 = a4 - v16;
    if (a4 < v16) {
      unsigned int v19 = 0;
    }
    uint64_t result = memcpy(&a3[*((_DWORD *)this + 3) * v17], *((const void **)this + 3), *((_DWORD *)this + 3) * v19);
  }
  *((_DWORD *)this + 9) = (*((_DWORD *)this + 9) + a4) % *((_DWORD *)this + 8);
  return result;
}

void HALS_DelayProcessor::~HALS_DelayProcessor(HALB_IOBufferManager_Server **this)
{
  HALS_DelayProcessor::~HALS_DelayProcessor(this);

  JUMPOUT(0x1C1859840);
}

{
  *this = (HALB_IOBufferManager_Server *)&unk_1F1471168;
  HALB_IOBufferManager_Server::FreeBuffer(this[3], *((_DWORD *)this + 3) * *((_DWORD *)this + 8));
}

uint64_t HALS_IOProcessor::Resampler_SetRateScalar(HALS_IOProcessor *this, double a2, double a3)
{
  uint64_t result = *((void *)this + 16);
  if (result)
  {
    double v5 = a2;
    if (*((unsigned char *)this + 8))
    {
      a2 = a3;
      a3 = v5;
    }
    return HALS_Resampler::SetRateScalar(result, a2, a3);
  }
  return result;
}

uint64_t HALS_Resampler::SetRateScalar(uint64_t this, double a2, double a3)
{
  if (*(unsigned char *)(this + 8))
  {
    int v4 = *(_DWORD *)(this + 24);
    double v5 = a3 / a2;
    switch(v4)
    {
      case 2:
        int v9 = *(uint64_t **)(this + 80);
        unsigned int v10 = *(uint64_t **)(this + 88);
        if (v9 != v10)
        {
          LODWORD(v3) = vcvtmd_s64_f64(v5);
          signed int v11 = vcvtmd_s64_f64((v5 - floor(v5)) * 2147483650.0);
          do
          {
            uint64_t v12 = *v9++;
            *(_DWORD *)(v12 + 60) = v3;
            *(_DWORD *)(v12 + 68) = v11;
            *(void *)(v12 + 80) = (v3 << 32 >> 1) + v11;
            *(void *)(v12 + 256) = -1;
            *(_DWORD *)(v12 + 264) = -1;
          }
          while (v9 != v10);
        }
        break;
      case 1:
        unsigned int v13 = *(uint64_t **)(this + 56);
        int v14 = *(uint64_t **)(this + 64);
        while (v13 != v14)
        {
          uint64_t v15 = *v13++;
          this = ShortTermLinearInterpolationResampler::SetRate(v15, v5);
        }
        break;
      case 0:
        int v6 = *(uint64_t **)(this + 32);
        int v7 = *(uint64_t **)(this + 40);
        while (v6 != v7)
        {
          uint64_t v8 = *v6++;
          this = Resampler2::SetVarispeedRate(v8, v5);
        }
        break;
    }
  }
  return this;
}

BOOL HALS_IOProcessor::Resampler_IsEnabled(HALS_IOProcessor *this)
{
  uint64_t v1 = *((void *)this + 16);
  return v1 && *(unsigned char *)(v1 + 8) != 0;
}

uint64_t HALS_IOProcessor::CalculateFrameSize(HALS_IOProcessor *this, int a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = *((void *)this + 16);
  if (a2)
  {
    if (v4)
    {
      unsigned int v14 = a3;
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        double v5 = *(RamstadSRC ***)(v4 + 80);
        int v6 = *(RamstadSRC ***)(v4 + 88);
        if (v5 != v6)
        {
          uint64_t v7 = a3;
          do
          {
            if (*v5) {
              uint64_t v7 = RamstadSRC::inputSamplesForOutputSamples(*v5, v3);
            }
            ++v5;
          }
          while (v5 != v6);
          return v7;
        }
        return a3;
      }
      unsigned int v13 = 100 * a3;
      unsigned int v10 = &v13;
      signed int v11 = &v14;
      goto LABEL_20;
    }
  }
  else if (v4)
  {
    unsigned int v14 = a3;
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      uint64_t v8 = *(RamstadSRC ***)(v4 + 80);
      int v9 = *(RamstadSRC ***)(v4 + 88);
      if (v8 != v9)
      {
        uint64_t v7 = a3;
        do
        {
          if (*v8) {
            uint64_t v7 = RamstadSRC::outputSamplesForInputSamples(*v8, v3, (int *)&v13);
          }
          ++v8;
        }
        while (v8 != v9);
        return v7;
      }
      return a3;
    }
    unsigned int v13 = 100 * a3;
    unsigned int v10 = &v14;
    signed int v11 = &v13;
LABEL_20:
    HALS_Resampler::PreflightFrameSizes((ShortTermLinearInterpolationResampler *)v4, v10, v11);
    return v13;
  }
  return v3;
}

ShortTermLinearInterpolationResampler *HALS_Resampler::PreflightFrameSizes(ShortTermLinearInterpolationResampler *this, unsigned int *a2, unsigned int *a3)
{
  if (!*((unsigned char *)this + 8))
  {
    unsigned int v7 = *a3;
    if (*a3 >= *a2) {
      unsigned int v7 = *a2;
    }
    *a2 = v7;
    goto LABEL_9;
  }
  int v5 = *((_DWORD *)this + 6);
  if (v5 == 1)
  {
    this = (ShortTermLinearInterpolationResampler *)**((void **)this + 7);
    if (this)
    {
      return ShortTermLinearInterpolationResampler::PreFlight(this, a2, a3);
    }
  }
  else if (!v5)
  {
    this = (ShortTermLinearInterpolationResampler *)**((void **)this + 4);
    if (this)
    {
      unsigned int v6 = *a2;
      unsigned int v8 = *a3;
      unsigned int v9 = v6;
      this = (ShortTermLinearInterpolationResampler *)Resampler2::PreFlight(this, &v9, &v8);
      *a2 = v9;
      unsigned int v7 = v8;
LABEL_9:
      *a3 = v7;
    }
  }
  return this;
}

void HALS_IOProcessor::~HALS_IOProcessor(HALS_IOProcessor *this)
{
  HALS_IOProcessor::~HALS_IOProcessor(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t v2;
  uint64_t v3;
  OpaqueAudioConverter *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(void *)this = &unk_1F1471190;
  uint64_t v2 = *((void *)this + 14);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 15);
  if (v3)
  {
    uint64_t v4 = *(OpaqueAudioConverter **)(v3 + 8);
    if (v4) {
      AudioConverterDispose(v4);
    }
    MEMORY[0x1C1859840](v3, 0x1020C4086E7B43CLL);
  }
  int v5 = *((void *)this + 16);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  unsigned int v6 = *((void *)this + 17);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  unsigned int v7 = *((void *)this + 18);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  std::unique_ptr<HALS_IOProcessor_ProcessingManifest>::reset[abi:ne180100]((uint64_t *)this + 19, 0);
  std::unique_ptr<HALS_IOProcessor_ProcessingManifest>::reset[abi:ne180100]((uint64_t *)this + 19, 0);
}

uint64_t *std::unique_ptr<HALS_IOProcessor_ProcessingManifest>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = *(void **)(v2 + 64);
    if (v3)
    {
      *(void *)(v2 + 72) = v3;
      operator delete(v3);
    }
    JUMPOUT(0x1C1859840);
  }
  return result;
}

void HALS_ChannelMapper::Process(HALS_ChannelMapper *this, unsigned __int8 *a2, unsigned __int8 *__dst, UInt32 inNumberPCMFrames)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)this)
  {
    int v5 = *((_DWORD *)this + 5);
    UInt32 v4 = *((_DWORD *)this + 6);
    inInputData.mNumberBuffers = 1;
    inInputData.mBuffers[0].mNumberChannels = v4;
    inInputData.mBuffers[0].mDataByteSize = v5 * inNumberPCMFrames;
    inInputData.mBuffers[0].mCFDataRef Data = a2;
    int v7 = *((_DWORD *)this + 7);
    UInt32 v6 = *((_DWORD *)this + 8);
    outOutputData.mNumberBuffers = 1;
    outOutputData.mBuffers[0].mNumberChannels = v6;
    outOutputData.mBuffers[0].mDataByteSize = v7 * inNumberPCMFrames;
    outOutputData.mBuffers[0].mCFDataRef Data = __dst;
    OSStatus v8 = AudioConverterConvertComplexBuffer(*((AudioConverterRef *)this + 1), inNumberPCMFrames, &inInputData, &outOutputData);
    if (v8)
    {
      OSStatus v9 = v8;
      v13[0] = HIBYTE(v8);
      v13[1] = BYTE2(v8);
      v13[2] = BYTE1(v8);
      v13[3] = v8;
      v13[4] = 0;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315906;
        unsigned int v17 = "HALS_IOProcessor.cpp";
        __int16 v18 = 1024;
        int v19 = 555;
        __int16 v20 = 1024;
        OSStatus v21 = v9;
        __int16 v22 = 2080;
        unint64_t v23 = v13;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ChannelMapper::Process: AudioConverterConvertBuffer failed, Error: %d (%s)", buf, 0x22u);
      }
    }
  }
  else
  {
    size_t v10 = *((unsigned int *)this + 5);
    if (*((unsigned char *)this + 16))
    {
      signed int v11 = __dst;
      size_t v12 = v10 * inNumberPCMFrames;
    }
    else
    {
      signed int v11 = __dst;
      size_t v12 = v10;
    }
    memcpy(v11, a2, v12);
  }
}

void HALS_Resampler::HALS_Resampler(HALS_Resampler *this, const AudioStreamBasicDescription *inSourceFormat, Float64 a3, int a4, unsigned int a5, Resampler2 *a6)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F1471140;
  AudioFormatID mFormatID = inSourceFormat->mFormatID;
  if (mFormatID == 1819304813)
  {
    if (inSourceFormat->mSampleRate == a3) {
      int v10 = a4;
    }
    else {
      int v10 = 1;
    }
  }
  else
  {
    int v10 = 0;
  }
  BOOL v11 = mFormatID == 1819304813;
  *((unsigned char *)this + 8) = v10;
  *((unsigned char *)this + 9) = a4;
  *((unsigned char *)this + 10) = mFormatID == 1819304813;
  p_mBytesPerFrame = &inSourceFormat->mBytesPerFrame;
  if (!v11) {
    p_mBytesPerFrame = &inSourceFormat->mBytesPerPacket;
  }
  UInt32 v13 = *p_mBytesPerFrame;
  UInt32 mChannelsPerFrame = inSourceFormat->mChannelsPerFrame;
  *((void *)this + 14) = 0;
  *((_DWORD *)this + 3) = v13;
  *((_DWORD *)this + 4) = mChannelsPerFrame;
  *((_DWORD *)this + 5) = a6;
  *((_DWORD *)this + 6) = 0;
  *((_OWORD *)this + 2) = 0u;
  CFURLRef v47 = (void **)((char *)this + 32);
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  if (v10)
  {
    if (a5 > 2) {
      a5 = 0;
    }
    else {
      *((_DWORD *)this + 6) = a5;
    }
    if (a6 <= 0x20 && inSourceFormat->mSampleRate == a3)
    {
      *((_DWORD *)this + 6) = 1;
      LODWORD(v15) = (mChannelsPerFrame & 1) + (mChannelsPerFrame >> 1);
    }
    else
    {
      unint64_t v15 = (mChannelsPerFrame & 1) + (mChannelsPerFrame >> 1);
      if (a5 == 2)
      {
        if (v15)
        {
          unsigned int v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v15);
          unsigned int v35 = (char *)*((void *)this + 10);
          unsigned int v34 = (char *)*((void *)this + 11);
          unsigned int v36 = v32;
          if (v34 != v35)
          {
            do
            {
              uint64_t v37 = *((void *)v34 - 1);
              v34 -= 8;
              *((void *)v36 - 1) = v37;
              v36 -= 8;
            }
            while (v34 != v35);
            unsigned int v34 = (char *)*((void *)this + 10);
          }
          *((void *)this + 10) = v36;
          *((void *)this + 11) = v32;
          *((void *)this + 12) = &v32[8 * v33];
          if (v34) {
            operator delete(v34);
          }
          operator new();
        }
        goto LABEL_39;
      }
      if (a5 != 1)
      {
        Resampler2::InitializeVarispeedMode(a6);
        uint64_t v22 = *((void *)this + 4);
        if (v15 > (*((void *)this + 6) - v22) >> 3)
        {
          uint64_t v23 = *((void *)this + 5);
          uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v15);
          float v25 = &v24[(v23 - v22) & 0xFFFFFFFFFFFFFFF8];
          int v27 = &v24[8 * v26];
          int v29 = (char *)*((void *)this + 4);
          uint64_t v28 = (char *)*((void *)this + 5);
          unsigned int v30 = v25;
          if (v28 != v29)
          {
            do
            {
              uint64_t v31 = *((void *)v28 - 1);
              v28 -= 8;
              *((void *)v30 - 1) = v31;
              v30 -= 8;
            }
            while (v28 != v29);
            uint64_t v28 = (char *)*v47;
          }
          *((void *)this + 4) = v30;
          *((void *)this + 5) = v25;
          *((void *)this + 6) = v27;
          if (v28) {
            operator delete(v28);
          }
        }
        if (v15) {
          operator new();
        }
        goto LABEL_39;
      }
    }
    if (v15)
    {
      unsigned int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v15);
      int v19 = (char *)*((void *)this + 7);
      __int16 v18 = (char *)*((void *)this + 8);
      __int16 v20 = v16;
      if (v18 != v19)
      {
        do
        {
          uint64_t v21 = *((void *)v18 - 1);
          v18 -= 8;
          *((void *)v20 - 1) = v21;
          v20 -= 8;
        }
        while (v18 != v19);
        __int16 v18 = (char *)*((void *)this + 7);
      }
      *((void *)this + 7) = v20;
      *((void *)this + 8) = v16;
      *((void *)this + 9) = &v16[8 * v17];
      if (v18) {
        operator delete(v18);
      }
      operator new();
    }
LABEL_39:
    if (inSourceFormat->mFormatID != 1819304813
      || (~inSourceFormat->mFormatFlags & 9) != 0
      || inSourceFormat->mBitsPerChannel != 32)
    {
      long long v38 = *(_OWORD *)&inSourceFormat->mBytesPerPacket;
      *(_OWORD *)&inDestinationFormat.mSampleRate = *(_OWORD *)&inSourceFormat->mSampleRate;
      *(_OWORD *)&inDestinationFormat.mBytesPerPacket = v38;
      *(void *)&inDestinationFormat.mBitsPerChannel = *(void *)&inSourceFormat->mBitsPerChannel;
      UInt32 v39 = 4 * inSourceFormat->mChannelsPerFrame;
      inDestinationFormat.mFormatFlags = 9;
      inDestinationFormat.mBytesPerPacket = v39;
      inDestinationFormat.mBytesPerFrame = v39;
      inDestinationFormat.mBitsPerChannel = 32;
      OSStatus v40 = AudioConverterNew(inSourceFormat, &inDestinationFormat, (AudioConverterRef *)this + 13);
      UInt32 v41 = v40;
      if (v40)
      {
        buf[0] = HIBYTE(v40);
        buf[1] = BYTE2(v40);
        buf[2] = BYTE1(v40);
        buf[3] = v40;
        LOBYTE(v51) = 0;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v58.mSampleRate) = 136315906;
          *(void *)((char *)&v58.mSampleRate + 4) = "HALS_IOProcessor.cpp";
          LOWORD(v58.mFormatFlags) = 1024;
          *(AudioFormatFlags *)((char *)&v58.mFormatFlags + 2) = 697;
          HIWORD(v58.mBytesPerPacket) = 1024;
          v58.mFramesPerPacket = v41;
          LOWORD(v58.mBytesPerFrame) = 2080;
          *(void *)((char *)&v58.mBytesPerFrame + 2) = buf;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Resampler::HALS_Resampler: failed to create the To converter, Error: %d (%s)", (uint8_t *)&v58, 0x22u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = off_1F148A5D8;
        exception[2] = v41;
      }
      long long v42 = *(_OWORD *)&inSourceFormat->mBytesPerPacket;
      *(_OWORD *)&v58.mSampleRate = *(_OWORD *)&inSourceFormat->mSampleRate;
      *(_OWORD *)&v58.mBytesPerPacket = v42;
      *(void *)&v58.mBitsPerChannel = *(void *)&inSourceFormat->mBitsPerChannel;
      v58.mSampleRate = a3;
      inDestinationFormat.mSampleRate = a3;
      OSStatus v43 = AudioConverterNew(&inDestinationFormat, &v58, (AudioConverterRef *)this + 14);
      OSStatus v44 = v43;
      if (v43)
      {
        v48[0] = HIBYTE(v43);
        v48[1] = BYTE2(v43);
        v48[2] = BYTE1(v43);
        v48[3] = v43;
        v48[4] = 0;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315906;
          CFMutableDictionaryRef v51 = "HALS_IOProcessor.cpp";
          __int16 v52 = 1024;
          int v53 = 704;
          __int16 v54 = 1024;
          OSStatus v55 = v44;
          __int16 v56 = 2080;
          char v57 = v48;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Resampler::HALS_Resampler: failed to create the From converter, Error: %d (%s)", buf, 0x22u);
        }
        __int16 v46 = __cxa_allocate_exception(0x10uLL);
        *(void *)__int16 v46 = off_1F148A5D8;
        v46[2] = v44;
      }
    }
  }
}

void sub_1BAD7B7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11)
{
  UInt32 v13 = (void *)v11[10];
  if (v13)
  {
    v11[11] = v13;
    operator delete(v13);
  }
  unsigned int v14 = (void *)v11[7];
  if (v14)
  {
    v11[8] = v14;
    operator delete(v14);
  }
  unint64_t v15 = *a11;
  if (*a11)
  {
    void v11[5] = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void HALS_DelayProcessor::HALS_DelayProcessor(HALS_DelayProcessor *this, const AudioStreamBasicDescription *a2, int a3)
{
  *(void *)this = &unk_1F1471168;
  if (a3) {
    BOOL v4 = a2->mFormatID == 1819304813;
  }
  else {
    BOOL v4 = 0;
  }
  char v5 = v4;
  *((unsigned char *)this + 8) = v5;
  UInt32 mBytesPerFrame = a2->mBytesPerFrame;
  *((_DWORD *)this + 3) = mBytesPerFrame;
  *((_DWORD *)this + 4) = a3;
  *((void *)this + 3) = 0;
  unsigned int v7 = 2 * a3 + 0x2000;
  *((void *)this + 4) = v7;
  *((_DWORD *)this + 10) = a3;
  if (v4)
  {
    Buffer = (void *)HALB_IOBufferManager_Server::AllocateBuffer(mBytesPerFrame * v7);
    *((void *)this + 3) = Buffer;
    bzero(Buffer, (*((_DWORD *)this + 3) * *((_DWORD *)this + 8)));
  }
}

uint64_t HALS_IOProcessor::HALS_IOProcessor(uint64_t result, int a2, char a3, long long *a4, long long *a5, int a6, uint64_t a7, uint64_t a8, void *a9, int a10, uint64_t a11, char a12)
{
  *(void *)uint64_t result = &unk_1F1471190;
  *(unsigned char *)(result + 8) = a2;
  *(unsigned char *)(result + 9) = a3;
  *(unsigned char *)(result + 10) = *((_DWORD *)a5 + 2) == 1819304813;
  *(void *)(result + 12) = *((void *)a5 + 2);
  long long v12 = *a4;
  long long v13 = a4[1];
  *(void *)(result + 56) = *((void *)a4 + 4);
  *(_OWORD *)(result + 40) = v13;
  *(_OWORD *)(result + 24) = v12;
  long long v14 = *a5;
  long long v15 = a5[1];
  *(void *)(result + 96) = *((void *)a5 + 4);
  *(_OWORD *)(result + 64) = v14;
  *(_OWORD *)(result + 80) = v15;
  *(_DWORD *)(result + 104) = 0;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  if (a2)
  {
    if (a11) {
      operator new();
    }
    if (*((_DWORD *)a5 + 2) == 1819304813)
    {
      if ((~*((_DWORD *)a5 + 3) & 9) == 0 && *((_DWORD *)a5 + 8) == 32 && (a12 & 1) == 0) {
        operator new();
      }
      if (*(double *)a5 != *(double *)a4 || a6) {
        operator new();
      }
      if (a10) {
        operator new();
      }
    }
    return result;
  }
  if (*((_DWORD *)a5 + 2) == 1819304813
    && (*((_DWORD *)a5 + 3) & 9) == 9
    && *((_DWORD *)a5 + 8) == 32
    && (a12 & 1) == 0)
  {
    operator new();
  }
  int v16 = *((_DWORD *)a4 + 2);
  if (a9)
  {
    if (v16 != 1819304813) {
      goto LABEL_17;
    }
    if (a9[1] != *a9) {
LABEL_16:
    }
      operator new();
  }
  else if (v16 != 1819304813)
  {
    goto LABEL_17;
  }
  if (*((_DWORD *)a4 + 7) != *((_DWORD *)a5 + 7)) {
    goto LABEL_16;
  }
LABEL_17:
  if (*((void *)a4 + 1) == 1819304813 && (*(double *)a4 != *(double *)a5 || a6)) {
    operator new();
  }
  if (a10 && *((_DWORD *)a4 + 2) == 1819304813) {
    operator new();
  }
  return result;
}

void sub_1BAD7C9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  MEMORY[0x1C1859840](v13, 0x10A1C40076B55E3);
  std::default_delete<HALS_IOProcessor_ProcessingManifest>::operator()[abi:ne180100](v12);
  std::unique_ptr<HALS_IOProcessor_ProcessingManifest>::reset[abi:ne180100](a12, 0);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOProcessor::NeedsLocalBuffer(HALS_IOProcessor *this)
{
  if (*((unsigned char *)this + 8))
  {
    uint64_t v1 = *((void *)this + 19);
    int v2 = *((_DWORD *)this + 26);
    if (v1)
    {
      uint64_t v3 = *(void *)(v1 + 64);
      uint64_t v4 = *(void *)(v1 + 72);
      while (1)
      {
        if (v3 == v4) {
          return 0;
        }
        if ((*(_DWORD *)v3 & ~v2) == 0) {
          break;
        }
        v3 += 16;
      }
      return *(unsigned char *)(v3 + 4) & 1;
    }
    else
    {
      return ((v2 - 2) & 0xFFFFFFF6) == 0;
    }
  }
  else
  {
    unsigned int v5 = *((_DWORD *)this + 26);
    BOOL v6 = v5 > 0xF;
    unsigned int v7 = (0xFCFCu >> v5) & 1;
    if (v6) {
      return 0;
    }
    else {
      return v7;
    }
  }
}

BOOL HALS_IOProcessor::NeedsIntermediate1Buffer(HALS_IOProcessor *this)
{
  if (*((unsigned char *)this + 8))
  {
    uint64_t v2 = *((void *)this + 19);
    int v3 = *((_DWORD *)this + 26);
    if (v2)
    {
      uint64_t v4 = *(void *)(v2 + 64);
      uint64_t v5 = *(void *)(v2 + 72);
      while (1)
      {
        if (v4 == v5) {
          return 0;
        }
        if ((*(_DWORD *)v4 & ~v3) == 0) {
          break;
        }
        v4 += 16;
      }
      return (*(unsigned char *)(v4 + 4) & 0x40) != 0;
    }
    else
    {
      BOOL result = 0;
      switch(v3)
      {
        case 2:
        case 3:
        case 10:
        case 11:
          goto LABEL_11;
        default:
          return result;
      }
    }
  }
  else
  {
    BOOL result = 0;
    switch(*((_DWORD *)this + 26))
    {
      case 2:
      case 3:
        goto LABEL_11;
      case 6:
      case 7:
      case 0xE:
      case 0xF:
        return 1;
      case 0xA:
      case 0xB:
        if (!*((unsigned char *)this + 9)) {
          return 1;
        }
LABEL_11:
        uint64_t v7 = *((void *)this + 16);
        if (!*(void *)(v7 + 104)) {
          return 0;
        }
        BOOL result = *(void *)(v7 + 112) != 0;
        break;
      case 0xC:
      case 0xD:
        return *((unsigned __int8 *)this + 9) == 0;
      default:
        return result;
    }
  }
  return result;
}

uint64_t HALS_IOProcessor::NeedsIntermediate2Buffer(HALS_IOProcessor *this)
{
  if (*((unsigned char *)this + 8))
  {
    uint64_t v2 = *((void *)this + 19);
    int v3 = *((_DWORD *)this + 26);
    if (v2)
    {
      uint64_t v4 = *(void *)(v2 + 64);
      uint64_t v5 = *(void *)(v2 + 72);
      while (v4 != v5)
      {
        if ((*(_DWORD *)v4 & ~v3) == 0) {
          return *(unsigned __int8 *)(v4 + 4) >> 7;
        }
        v4 += 16;
      }
    }
    else if (v3 == 11)
    {
LABEL_11:
      uint64_t v7 = *((void *)this + 16);
      if (*(void *)(v7 + 104)) {
        return *(void *)(v7 + 112) != 0;
      }
    }
    return 0;
  }
  else
  {
    uint64_t result = 0;
    switch(*((_DWORD *)this + 26))
    {
      case 6:
      case 7:
        goto LABEL_11;
      case 0xA:
      case 0xB:
        if (*((unsigned char *)this + 9)) {
          goto LABEL_11;
        }
        goto LABEL_9;
      case 0xC:
      case 0xD:
        return *((unsigned __int8 *)this + 9) == 0;
      case 0xE:
      case 0xF:
LABEL_9:
        uint64_t result = 1;
        break;
      default:
        return result;
    }
  }
  return result;
}

void *HALS_IOProcessorList::DestroyProcessor(void *this, HALS_IOProcessor *a2)
{
  uint64_t v2 = this;
  int v3 = (HALS_IOProcessor **)*this;
  uint64_t v4 = (HALS_IOProcessor **)this[1];
  if ((HALS_IOProcessor **)*this != v4)
  {
    while (*v3 != a2)
    {
      if (++v3 == v4) {
        return this;
      }
    }
  }
  if (v3 != v4)
  {
    uint64_t v5 = v3 + 1;
    if (v3 + 1 != v4)
    {
      do
      {
        int v3 = v5;
        this = *(v5 - 1);
        *(v5 - 1) = *v5;
        unsigned __int8 *v5 = 0;
        if (this) {
          this = (void *)(*(uint64_t (**)(void *, HALS_IOProcessor *))(*this + 8))(this, a2);
        }
        uint64_t v5 = v3 + 1;
      }
      while (v3 + 1 != v4);
      uint64_t v4 = (HALS_IOProcessor **)v2[1];
    }
    while (v4 != v3)
    {
      BOOL v6 = *--v4;
      this = v6;
      *uint64_t v4 = 0;
      if (v6) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
      }
    }
    v2[1] = v3;
  }
  return this;
}

uint64_t CATimeUtilities::GregorianDateFromAbsoluteTime(CATimeUtilities *this, CFAbsoluteTime a2)
{
  {
    CATimeUtilities::GregorianDateFromAbsoluteTime(double)::tz = (uint64_t)CFTimeZoneCopySystem();
  }
  CFTimeZoneRef v3 = (const __CFTimeZone *)CATimeUtilities::GregorianDateFromAbsoluteTime(double)::tz;

  return *(_OWORD *)&CFAbsoluteTimeGetGregorianDate(a2, v3);
}

void sub_1BAD7CF40(_Unwind_Exception *a1)
{
}

void non-virtual thunk to'AMCP::Null::Driver::~Driver(AMCP::Null::Driver *this)
{
  AMCP::Null::Driver::~Driver((AMCP::Null::Driver *)((char *)this - 24));

  JUMPOUT(0x1C1859840);
}

{
  AMCP::Null::Driver::~Driver((AMCP::Null::Driver *)((char *)this - 24));
}

void AMCP::Null::Driver::~Driver(AMCP::Null::Driver *this)
{
  *(void *)this = &unk_1F1471260;
  *((void *)this + 3) = &unk_1F1471288;
  uint64_t v4 = (void **)((char *)this + 120);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::mutex::~mutex((std::mutex *)((char *)this + 56));
  *((void *)this + 3) = &unk_1F146D188;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  CFTimeZoneRef v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

{
  uint64_t vars8;

  AMCP::Null::Driver::~Driver(this);

  JUMPOUT(0x1C1859840);
}

std::__shared_mutex_base *AMCP::Null::Driver::shutdown(AMCP::Null::Driver *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v16, "com.apple.coreaudio", "AMCP");
  int v3 = *(_DWORD *)(v16 + 16);
  switch(v3)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      OSStatus v9 = **(NSObject ***)buf;
      if (*(void *)v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v19);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        int v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        *(_DWORD *)std::string buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v11;
        *(_WORD *)int v19 = 2080;
        *(void *)&v19[2] = "Null_Driver_Imp.cpp";
        __int16 v20 = 1024;
        int v21 = 41;
        uint64_t v7 = v9;
        os_log_type_t v8 = OS_LOG_TYPE_INFO;
        goto LABEL_12;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v12 = **(NSObject ***)buf;
      if (*(void *)v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v19);
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        long long v14 = pthread_self();
        mach_port_t v15 = pthread_mach_thread_np(v14);
        *(_DWORD *)std::string buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v15;
        *(_WORD *)int v19 = 2080;
        *(void *)&v19[2] = "Null_Driver_Imp.cpp";
        __int16 v20 = 1024;
        int v21 = 41;
        _os_log_debug_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Tearing down Null driver", buf, 0x18u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v4 = **(NSObject ***)buf;
      if (*(void *)v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v19);
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = pthread_self();
        mach_port_t v6 = pthread_mach_thread_np(v5);
        *(_DWORD *)std::string buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v6;
        *(_WORD *)int v19 = 2080;
        *(void *)&v19[2] = "Null_Driver_Imp.cpp";
        __int16 v20 = 1024;
        int v21 = 41;
        uint64_t v7 = v4;
        os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
LABEL_12:
        _os_log_impl(&dword_1BAA78000, v7, v8, "%6u %32s:%-5d Tearing down Null driver", buf, 0x18u);
      }
      break;
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  return AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*((void *)this + 4) + 16), *((_DWORD *)this + 12));
}

void sub_1BAD7D2D4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__function::__value_func<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    int v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Null::Driver::build_core(void)::$_1,std::allocator<AMCP::Null::Driver::build_core(void)::$_1>,void ()(std::vector<unsigned int> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Null::Driver::build_core(void)::$_1,std::allocator<AMCP::Null::Driver::build_core(void)::$_1>,void ()(std::vector<unsigned int> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Driver10build_coreEvE3$_1")) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void std::__function::__func<AMCP::Null::Driver::build_core(void)::$_1,std::allocator<AMCP::Null::Driver::build_core(void)::$_1>,void ()(std::vector<unsigned int> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(*(void *)(v3 + 32) + 32);
  unsigned int v5 = *(_DWORD *)(v3 + 48);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&lpsrc, *(void *)(v3 + 8), *(std::__shared_weak_count **)(v3 + 16));
  if (lpsrc
  {
    *(void *)&long long v12 = v6;
    *((void *)&v12 + 1) = v11;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = (void **)&v12;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v13 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v13, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  uint64_t v17 = 0;
  os_log_type_t v8 = (char *)operator new(0x30uLL);
  *(void *)os_log_type_t v8 = &unk_1F14714E0;
  *(_OWORD *)(v8 + 8) = v12;
  long long v12 = 0uLL;
  *((void *)v8 + 4) = 0;
  *((void *)v8 + 5) = 0;
  *((void *)v8 + 3) = 0;
  OSStatus v9 = v13;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)v8 + 3, v13, v14, (v14 - (uint64_t)v13) >> 2);
  uint64_t v17 = v8;
  AMCP::Core::Conductor::enqueue_config_change(v4, v5, v5, 17, (uint64_t)v16);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v16);
  if (v9) {
    operator delete(v9);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1BAD7D5F4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    uint64_t v4 = (std::__shared_weak_count *)v2[2];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    operator delete(v2);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,std::allocator<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,std::allocator<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Driver15destroy_objectsERKNSt3__16vectorIjNS2_9allocatorIjEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,std::allocator<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0>,void ()(void)>::operator()(void *a1)
{
  uint64_t v2 = (std::mutex *)(a1[1] + 56);
  std::mutex::lock(v2);
  uint64_t v3 = (_DWORD *)a1[3];
  uint64_t v4 = (_DWORD *)a1[4];
  while (v3 != v4)
  {
    uint64_t v5 = a1[1];
    mach_port_t v6 = *(long long **)(v5 + 120);
    uint64_t v7 = *(long long **)(v5 + 128);
    if (v6 != v7)
    {
      while (*(_DWORD *)(*(void *)v6 + 88) != *v3)
      {
        if (++v6 == v7) {
          goto LABEL_18;
        }
      }
    }
    if (v6 != v7)
    {
      os_log_type_t v8 = v6 + 1;
      if (v6 + 1 != v7)
      {
        do
        {
          mach_port_t v6 = v8;
          long long v9 = *v8;
          *(void *)os_log_type_t v8 = 0;
          *((void *)v8 + 1) = 0;
          int v10 = (std::__shared_weak_count *)*((void *)v8 - 1);
          *(v8 - 1) = v9;
          if (v10) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          }
          os_log_type_t v8 = v6 + 1;
        }
        while (v6 + 1 != v7);
        uint64_t v7 = *(long long **)(v5 + 128);
      }
      while (v7 != v6)
      {
        mach_port_t v11 = (std::__shared_weak_count *)*((void *)v7 - 1);
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        --v7;
      }
      *(void *)(v5 + 128) = v6;
    }
LABEL_18:
    ++v3;
  }

  std::mutex::unlock(v2);
}

void std::__function::__func<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,std::allocator<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,std::allocator<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0>,void ()(void)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,std::allocator<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0>,void ()(void)>::destroy[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__function::__func<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,std::allocator<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

void *std::__function::__func<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,std::allocator<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14714E0;
  return std::__compressed_pair_elem<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0 const&,0ul>(a2 + 1, a1 + 8);
}

void *std::__compressed_pair_elem<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0 const&,0ul>(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 2, *(const void **)(a2 + 16), *(void *)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 2);
  return a1;
}

void sub_1BAD7D898(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,std::allocator<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &unk_1F14714E0;
  std::__compressed_pair_elem<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_1BAD7D904(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,std::allocator<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14714E0;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0,std::allocator<AMCP::Null::Driver::destroy_objects(std::vector<unsigned int> const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14714E0;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

uint64_t std::__function::__func<AMCP::Null::Driver::build_core(void)::$_1,std::allocator<AMCP::Null::Driver::build_core(void)::$_1>,void ()(std::vector<unsigned int> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14713E0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Null::Driver::build_core(void)::$_1,std::allocator<AMCP::Null::Driver::build_core(void)::$_1>,void ()(std::vector<unsigned int> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F14713E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Null::Driver::build_core(void)::$_1,std::allocator<AMCP::Null::Driver::build_core(void)::$_1>,void ()(std::vector<unsigned int> const&)>::~__func()
{
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>>::dispatch;
LABEL_6:
      std::__function::__value_func<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      long long v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::Null::Driver::build_core(void)::$_0,std::allocator<AMCP::Null::Driver::build_core(void)::$_0>,std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Null::Driver::build_core(void)::$_0,std::allocator<AMCP::Null::Driver::build_core(void)::$_0>,std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Driver10build_coreEvE3$_0")) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::Null::Driver::build_core(void)::$_0,std::allocator<AMCP::Null::Driver::build_core(void)::$_0>,std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  mach_port_t v6 = operator new(0x20uLL);
  v6[1] = 0;
  v6[2] = 0;
  *mach_port_t v6 = &unk_1F1488C30;
  *((unsigned char *)v6 + 24) = 0;
  v14[0] = (uint64_t)(v6 + 3);
  v14[1] = (uint64_t)v6;
  int v15 = 0;
  int v16 = 0;
  uint64_t v7 = *(void *)(*(void *)(v5 + 32) + 32);
  unsigned int v8 = *(_DWORD *)(v5 + 48);
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)v11, v14);
  *(void *)&long long v12 = v5;
  *((void *)&v12 + 1) = a2;
  uint64_t v13 = a3;
  uint64_t v18 = 0;
  uint64_t v9 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v9 = &unk_1F1471460;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v9 + 8), v11);
  *(_OWORD *)(v9 + 40) = v12;
  *((void *)v9 + 7) = v13;
  uint64_t v18 = v9;
  AMCP::Core::Conductor::enqueue_config_change(v7, v8, v8, 17, (uint64_t)v17);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v17);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v11);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v14);
}

void sub_1BAD7DDCC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    operator delete(v2);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0,std::allocator<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0,std::allocator<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Driver14create_objectsERKN10applesauce2CF8ArrayRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0,std::allocator<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0>,void ()(void)>::operator()(void *a1)
{
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[5];
  BOOL is_valid = AMCP::Utility::Expiration_Check::is_valid((AMCP::Utility::Expiration_Check *)(a1 + 1));
  if (!is_valid)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v94 = **(NSObject ***)buf;
    if ((void)v110) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v110);
    }
    if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
    {
      BOOL v95 = pthread_self();
      mach_port_t v96 = pthread_mach_thread_np(v95);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v96;
      LOWORD(v110) = 2080;
      *(void *)((char *)&v110 + 2) = "Null_Driver_Imp.cpp";
      WORD5(v110) = 1024;
      HIDWORD(v110) = 113;
      LOWORD(v111) = 2080;
      *(void *)((char *)&v111 + 2) = "expiration_check.is_valid()";
      _os_log_error_impl(&dword_1BAA78000, v94, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", buf, 0x22u);
    }
    abort();
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 40);
  v106[0] = *(void *)(v2 + 32);
  v106[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v5 = *(_DWORD *)(v2 + 48);
  v105[0] = 0;
  v105[1] = 0;
  mach_port_t v6 = (CFArrayRef *)a1[6];
  uint64_t v7 = operator new(8uLL);
  void *v7 = 0x161626F78;
  *(void *)&long long v110 = v7 + 1;
  *((void *)&v110 + 1) = v7 + 1;
  *(void *)std::string buf = v7;
  AMCP::Null::make_object_list(&v107, v106, v5, v105, v6, (unsigned int **)buf);
  operator delete(v7);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unsigned int v8 = *(std::__shared_weak_count **)(v2 + 40);
  v102[0] = *(void *)(v2 + 32);
  v102[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = *(_DWORD *)(v2 + 48);
  v101[0] = 0;
  v101[1] = 0;
  uint64_t v10 = (CFArrayRef *)a1[6];
  mach_port_t v11 = operator new(8uLL);
  *mach_port_t v11 = 1633905771;
  *(void *)&long long v110 = v11 + 1;
  *((void *)&v110 + 1) = v11 + 1;
  *(void *)std::string buf = v11;
  AMCP::Null::make_object_list(&v103, v102, v9, v101, v10, (unsigned int **)buf);
  operator delete(v11);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  long long v12 = *(std::__shared_weak_count **)(v2 + 40);
  v98[0] = *(void *)(v2 + 32);
  v98[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = *(_DWORD *)(v2 + 48);
  v97[0] = 0;
  v97[1] = 0;
  uint64_t v14 = (CFArrayRef *)a1[6];
  int v15 = operator new(8uLL);
  *int v15 = 0x161646576;
  *(void *)&long long v110 = v15 + 1;
  *((void *)&v110 + 1) = v15 + 1;
  *(void *)std::string buf = v15;
  AMCP::Null::make_object_list(&v99, v98, v13, v97, v14, (unsigned int **)buf);
  operator delete(v15);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v19 = v107;
  __int16 v20 = v108;
  if (v107 != v108)
  {
    int v21 = (void *)(v2 + 120);
    do
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*v19 + 16))(*v19, v16, v17, v18);
      uint64_t v22 = a1[7];
      int v23 = *(_DWORD *)(*v19 + 88);
      float v25 = *(_DWORD **)(v22 + 8);
      unint64_t v24 = *(void *)(v22 + 16);
      if ((unint64_t)v25 >= v24)
      {
        int v27 = *(_DWORD **)v22;
        uint64_t v28 = ((uint64_t)v25 - *(void *)v22) >> 2;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v30 = v24 - (void)v27;
        if (v30 >> 1 > v29) {
          unint64_t v29 = v30 >> 1;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v29;
        }
        if (v31)
        {
          unint64_t v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v31);
          int v27 = *(_DWORD **)v22;
          float v25 = *(_DWORD **)(v22 + 8);
        }
        else
        {
          uint64_t v16 = 0;
        }
        unsigned int v32 = (_DWORD *)(v31 + 4 * v28);
        *unsigned int v32 = v23;
        uint64_t v26 = v32 + 1;
        while (v25 != v27)
        {
          int v33 = *--v25;
          *--unsigned int v32 = v33;
        }
        *(void *)uint64_t v22 = v32;
        *(void *)(v22 + 8) = v26;
        *(void *)(v22 + 16) = v31 + 4 * v16;
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        *float v25 = v23;
        uint64_t v26 = v25 + 1;
      }
      *(void *)(v22 + 8) = v26;
      unsigned int v35 = *(_OWORD **)(v2 + 128);
      unint64_t v34 = *(void *)(v2 + 136);
      if ((unint64_t)v35 >= v34)
      {
        uint64_t v37 = ((uint64_t)v35 - *v21) >> 4;
        if ((unint64_t)(v37 + 1) >> 60) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v38 = v34 - *v21;
        uint64_t v39 = v38 >> 3;
        if (v38 >> 3 <= (unint64_t)(v37 + 1)) {
          uint64_t v39 = v37 + 1;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v40 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v39;
        }
        *((void *)&v111 + 1) = v2 + 136;
        UInt32 v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v40);
        long long v42 = &v41[16 * v37];
        *(void *)std::string buf = v41;
        *(void *)&long long v110 = v42;
        *(void *)&long long v111 = &v41[16 * v43];
        *(_OWORD *)long long v42 = *(_OWORD *)v19;
        *uint64_t v19 = 0;
        v19[1] = 0;
        *((void *)&v110 + 1) = v42 + 16;
        std::vector<std::shared_ptr<DSP_Host_Types::FormatDescription>>::__swap_out_circular_buffer((void *)(v2 + 120), buf);
        unsigned int v36 = *(_OWORD **)(v2 + 128);
        std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        *unsigned int v35 = *(_OWORD *)v19;
        unsigned int v36 = v35 + 1;
        *uint64_t v19 = 0;
        v19[1] = 0;
        *(void *)(v2 + 128) = v36;
      }
      *(void *)(v2 + 128) = v36;
      v19 += 2;
    }
    while (v19 != v20);
  }
  OSStatus v44 = v103;
  CFArrayRef v45 = v104;
  if (v103 != v104)
  {
    __int16 v46 = (void *)(v2 + 120);
    do
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*v44 + 16))(*v44, v16, v17, v18);
      uint64_t v47 = a1[7];
      int v48 = *(_DWORD *)(*v44 + 88);
      char v50 = *(_DWORD **)(v47 + 8);
      unint64_t v49 = *(void *)(v47 + 16);
      if ((unint64_t)v50 >= v49)
      {
        __int16 v52 = *(_DWORD **)v47;
        uint64_t v53 = ((uint64_t)v50 - *(void *)v47) >> 2;
        unint64_t v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 62) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v55 = v49 - (void)v52;
        if (v55 >> 1 > v54) {
          unint64_t v54 = v55 >> 1;
        }
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v56 = v54;
        }
        if (v56)
        {
          unint64_t v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v56);
          __int16 v52 = *(_DWORD **)v47;
          char v50 = *(_DWORD **)(v47 + 8);
        }
        else
        {
          uint64_t v16 = 0;
        }
        char v57 = (_DWORD *)(v56 + 4 * v53);
        *char v57 = v48;
        CFMutableDictionaryRef v51 = v57 + 1;
        while (v50 != v52)
        {
          int v58 = *--v50;
          *--char v57 = v58;
        }
        *(void *)uint64_t v47 = v57;
        *(void *)(v47 + 8) = v51;
        *(void *)(v47 + 16) = v56 + 4 * v16;
        if (v52) {
          operator delete(v52);
        }
      }
      else
      {
        _DWORD *v50 = v48;
        CFMutableDictionaryRef v51 = v50 + 1;
      }
      *(void *)(v47 + 8) = v51;
      mach_port_t v60 = *(_OWORD **)(v2 + 128);
      unint64_t v59 = *(void *)(v2 + 136);
      if ((unint64_t)v60 >= v59)
      {
        uint64_t v62 = ((uint64_t)v60 - *v46) >> 4;
        if ((unint64_t)(v62 + 1) >> 60) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v63 = v59 - *v46;
        uint64_t v64 = v63 >> 3;
        if (v63 >> 3 <= (unint64_t)(v62 + 1)) {
          uint64_t v64 = v62 + 1;
        }
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v65 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v65 = v64;
        }
        *((void *)&v111 + 1) = v2 + 136;
        unint64_t v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v65);
        uint64_t v67 = &v66[16 * v62];
        *(void *)std::string buf = v66;
        *(void *)&long long v110 = v67;
        *(void *)&long long v111 = &v66[16 * v68];
        *(_OWORD *)uint64_t v67 = *(_OWORD *)v44;
        *OSStatus v44 = 0;
        v44[1] = 0;
        *((void *)&v110 + 1) = v67 + 16;
        std::vector<std::shared_ptr<DSP_Host_Types::FormatDescription>>::__swap_out_circular_buffer((void *)(v2 + 120), buf);
        double v61 = *(_OWORD **)(v2 + 128);
        std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        *mach_port_t v60 = *(_OWORD *)v44;
        double v61 = v60 + 1;
        *OSStatus v44 = 0;
        v44[1] = 0;
        *(void *)(v2 + 128) = v61;
      }
      *(void *)(v2 + 128) = v61;
      v44 += 2;
    }
    while (v44 != v45);
  }
  double v69 = v99;
  char v70 = v100;
  if (v99 != v100)
  {
    std::string v71 = (void *)(v2 + 120);
    do
    {
      (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*v69 + 16))(*v69, v16, v17, v18);
      uint64_t v72 = a1[7];
      int v73 = *(_DWORD *)(*v69 + 88);
      uint64_t v75 = *(_DWORD **)(v72 + 8);
      unint64_t v74 = *(void *)(v72 + 16);
      if ((unint64_t)v75 >= v74)
      {
        std::logic_error v77 = *(_DWORD **)v72;
        uint64_t v78 = ((uint64_t)v75 - *(void *)v72) >> 2;
        unint64_t v79 = v78 + 1;
        if ((unint64_t)(v78 + 1) >> 62) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v80 = v74 - (void)v77;
        if (v80 >> 1 > v79) {
          unint64_t v79 = v80 >> 1;
        }
        if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v81 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v81 = v79;
        }
        if (v81)
        {
          unint64_t v81 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v81);
          std::logic_error v77 = *(_DWORD **)v72;
          uint64_t v75 = *(_DWORD **)(v72 + 8);
        }
        else
        {
          uint64_t v16 = 0;
        }
        int v82 = (_DWORD *)(v81 + 4 * v78);
        _DWORD *v82 = v73;
        std::logic_error v76 = v82 + 1;
        while (v75 != v77)
        {
          int v83 = *--v75;
          *--int v82 = v83;
        }
        *(void *)uint64_t v72 = v82;
        *(void *)(v72 + 8) = v76;
        *(void *)(v72 + 16) = v81 + 4 * v16;
        if (v77) {
          operator delete(v77);
        }
      }
      else
      {
        _DWORD *v75 = v73;
        std::logic_error v76 = v75 + 1;
      }
      *(void *)(v72 + 8) = v76;
      long long v85 = *(_OWORD **)(v2 + 128);
      unint64_t v84 = *(void *)(v2 + 136);
      if ((unint64_t)v85 >= v84)
      {
        uint64_t v87 = ((uint64_t)v85 - *v71) >> 4;
        if ((unint64_t)(v87 + 1) >> 60) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v88 = v84 - *v71;
        uint64_t v89 = v88 >> 3;
        if (v88 >> 3 <= (unint64_t)(v87 + 1)) {
          uint64_t v89 = v87 + 1;
        }
        if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v90 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v90 = v89;
        }
        *((void *)&v111 + 1) = v2 + 136;
        uint64_t v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v90);
        unint64_t v92 = &v91[16 * v87];
        *(void *)std::string buf = v91;
        *(void *)&long long v110 = v92;
        *(void *)&long long v111 = &v91[16 * v93];
        *(_OWORD *)unint64_t v92 = *(_OWORD *)v69;
        void *v69 = 0;
        v69[1] = 0;
        *((void *)&v110 + 1) = v92 + 16;
        std::vector<std::shared_ptr<DSP_Host_Types::FormatDescription>>::__swap_out_circular_buffer((void *)(v2 + 120), buf);
        long long v86 = *(_OWORD **)(v2 + 128);
        std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        *long long v85 = *(_OWORD *)v69;
        long long v86 = v85 + 1;
        void *v69 = 0;
        v69[1] = 0;
        *(void *)(v2 + 128) = v86;
      }
      *(void *)(v2 + 128) = v86;
      v69 += 2;
    }
    while (v69 != v70);
  }
  *(void *)std::string buf = &v99;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)std::string buf = &v103;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)std::string buf = &v107;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1BAD7E608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void ***a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  a13 = &a20;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  a20 = (void **)&a27;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&a20);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0,std::allocator<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0,std::allocator<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 8);
}

__n128 std::__function::__func<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0,std::allocator<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1471460;
  AMCP::Utility::Expiration_Check::Expiration_Check(a2 + 8, (uint64_t *)(a1 + 8));
  __n128 result = *(__n128 *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

char *std::__function::__func<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0,std::allocator<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v3 = &unk_1F1471460;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v3 + 8), v2);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  *((void *)v3 + 7) = *(void *)(a1 + 56);
  return v3;
}

void sub_1BAD7E7C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0,std::allocator<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1471460;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0,std::allocator<AMCP::Null::Driver::create_objects(applesauce::CF::ArrayRef const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1471460;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  return a1;
}

uint64_t std::__function::__func<AMCP::Null::Driver::build_core(void)::$_0,std::allocator<AMCP::Null::Driver::build_core(void)::$_0>,std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1471350;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Null::Driver::build_core(void)::$_0,std::allocator<AMCP::Null::Driver::build_core(void)::$_0>,std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F1471350;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Null::Driver::build_core(void)::$_0,std::allocator<AMCP::Null::Driver::build_core(void)::$_0>,std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>::~__func()
{
}

uint64_t AMCP::Graph::Timebase::is_valid(AMCP::Graph::Timebase *this)
{
  return 1;
}

void AMCP::DAL::AUParameter_Data_Handler::get_data(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t AMCP::DAL::AUParameter_Data_Handler::dal_operation_get_property()
{
  return 0;
}

double AMCP::DAL::AUParameter_Data_Handler::dal_operation_apply()
{
  return 0.0;
}

void AMCP::DAL::AUParameter_Data_Handler::dal_operation_context_create(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t *AMCP::DAL::AUParameter_Data_Handler::get_ring_buffer_time_translator(AMCP::DAL::AUParameter_Data_Handler *this)
{
  {
    AMCP::DAL::AUParameter_Data_Handler::get_ring_buffer_time_translator(void)const::s_translator = (uint64_t)&unk_1F1471620;
  }
  return &AMCP::DAL::AUParameter_Data_Handler::get_ring_buffer_time_translator(void)const::s_translator;
}

void AMCP::DAL::AUParameter_Buffer_Time_Translator::translate_range(const AMCP::DAL::DAL_Time_Range *a1@<X1>, const AMCP::DAL::DAL_Time_Range *a2@<X2>, uint64_t *a3@<X8>)
{
  double sample_time = AMCP::DAL::DAL_Time::get_sample_time(a1);
  long long v8 = *(_OWORD *)((char *)a1 + 24);
  uint64_t v9 = *((void *)a1 + 4);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  LODWORD(v39) = 2;
  double v40 = sample_time;
  UInt32 v41 = 0;
  long long v42 = v8;
  long long v27 = *(_OWORD *)a2;
  uint64_t v10 = *((void *)a2 + 3);
  *(void *)&long long v28 = *((void *)a2 + 2);
  *((void *)&v28 + 1) = v10;
  mach_port_t v11 = (std::__shared_weak_count *)*((void *)a2 + 4);
  unint64_t v29 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v30 = *(_OWORD *)((char *)a2 + 40);
  uint64_t v12 = *((void *)a2 + 8);
  *(void *)&long long v31 = *((void *)a2 + 7);
  *((void *)&v31 + 1) = v12;
  int v13 = (std::__shared_weak_count *)*((void *)a2 + 9);
  unsigned int v32 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::DAL::DAL_Time::operator-=((AMCP::DAL::DAL_Time *)&v27, (AMCP::DAL::DAL_Time_Delta *)&v39);
  AMCP::DAL::DAL_Time::operator-=((AMCP::DAL::DAL_Time *)&v30, (AMCP::DAL::DAL_Time_Delta *)&v39);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)v35, &v27);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (*((void *)&v42 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v42 + 1));
  }
  double v14 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v35);
  double v15 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v37);
  *(double *)&long long v27 = v14;
  *((double *)&v27 + 1) = v15;
  long long v28 = *(_OWORD *)a2;
  uint64_t v16 = *((void *)a2 + 3);
  unint64_t v29 = (std::__shared_weak_count *)*((void *)a2 + 2);
  *(void *)&long long v30 = v16;
  uint64_t v17 = (std::__shared_weak_count *)*((void *)a2 + 4);
  *((void *)&v30 + 1) = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v31 = *(_OWORD *)((char *)a2 + 40);
  uint64_t v18 = (std::__shared_weak_count *)*((void *)a2 + 7);
  uint64_t v20 = *((void *)a2 + 8);
  uint64_t v19 = (std::__shared_weak_count *)*((void *)a2 + 9);
  unsigned int v32 = v18;
  uint64_t v33 = v20;
  unint64_t v34 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *((void *)&v42 + 1) = a3 + 2;
  int v21 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>((caulk::rt_safe_memory_resource *)1);
  uint64_t v39 = v21;
  double v40 = *(double *)&v21;
  *(void *)&long long v42 = (char *)v21 + 96 * v22;
  *(_OWORD *)int v21 = v27;
  int v23 = v29;
  *((_OWORD *)v21 + 1) = v28;
  *((void *)v21 + 4) = v23;
  *((void *)v21 + 5) = v16;
  *((void *)v21 + 6) = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v24 = v32;
  *(_OWORD *)((char *)v21 + 56) = v31;
  *((void *)v21 + 9) = v24;
  *((void *)v21 + 10) = v20;
  *((void *)v21 + 11) = v19;
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    UInt32 v41 = (char *)v21 + 96;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__swap_out_circular_buffer(a3, &v39);
    uint64_t v25 = a3[1];
    std::__split_buffer<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range> &>::~__split_buffer((uint64_t)&v39);
    a3[1] = v25;
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    if (!v17) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  UInt32 v41 = (char *)v21 + 96;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__swap_out_circular_buffer(a3, &v39);
  uint64_t v26 = a3[1];
  std::__split_buffer<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range> &>::~__split_buffer((uint64_t)&v39);
  a3[1] = v26;
  if (v17) {
LABEL_21:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
LABEL_22:
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
}

void sub_1BAD7EC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  *(void *)(v22 - 112) = v21;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)(v22 - 112));
  AMCP::DAL::Buffer_Time_Translator::Translation_Range::~Translation_Range((AMCP::DAL::Buffer_Time_Translator::Translation_Range *)&a9);
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&a21);
  _Unwind_Resume(a1);
}

void AMCP::DAL::AUParameter_Buffer_Time_Translator::~AUParameter_Buffer_Time_Translator(AMCP::DAL::AUParameter_Buffer_Time_Translator *this)
{
}

uint64_t AMCP::DAL::AUParameter_Data_Handler::mix(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v9 = (uint64_t *)(AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::AUParameter_Data_Handler>(*a2) + 56);
  uint64_t v10 = *(void *)(a1 + 80);

  return AMCP::DAL::merge_values(v10, v9, a3, a4, a5);
}

uint64_t AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::AUParameter_Data_Handler>(uint64_t result)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!result)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v1 = **(NSObject ***)buf;
    if (*(void *)v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v19);
    }
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      uint64_t v2 = pthread_self();
      mach_port_t v3 = pthread_mach_thread_np(v2);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v3;
      *(_WORD *)uint64_t v19 = 2080;
      *(void *)&v19[2] = "Container.h";
      __int16 v20 = 1024;
      int v21 = 121;
      __int16 v22 = 2080;
      *(void *)int v23 = "not ((m_impl.get()) != nullptr)";
      _os_log_error_impl(&dword_1BAA78000, v1, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to call Container::GetContainerData on a null Container", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v17);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to call Container::GetContainerData on a null Container", (uint64_t)&v9);
    std::logic_error::logic_error(&v10, &v9);
    v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v11, &v10);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    int v16 = -1;
    v11.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v12 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v11);
    *(void *)&v23[6] = "T *AMCP::DAL::Container::get_container_data_ptr() const [T = AMCP::DAL::AUParameter_Data_Handler]";
    unint64_t v24 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Container.h";
    int v25 = 121;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v4);
    long long v7 = v4;
    uint64_t v8 = v5;
    long long v4 = 0uLL;
    uint64_t v5 = 0;
    mach_port_t v6 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return result;
}

void sub_1BAD7EF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::merge_values(uint64_t result, uint64_t *a2, double a3, double a4, double a5)
{
  if (result)
  {
    uint64_t v8 = result;
    double v9 = a3 - a5;
    double v10 = round(a3);
    double v11 = round(a4);
    unint64_t v90 = a2 + 3;
    uint64_t v91 = a2 + 4;
    do
    {
      int64x2_t v93 = 0uLL;
      unint64_t v94 = 0;
      uint64_t v12 = *(double **)(v8 + 32);
      uint64_t v13 = *(double **)(v8 + 40);
      if (v12 != v13)
      {
        uint64_t v14 = 0;
        do
        {
          double v15 = *v12;
          double v16 = *v12 + 1.0;
          double v17 = round(*v12);
          double v18 = round(v16);
          if (v17 < v10) {
            double v15 = a3;
          }
          if (v11 < v18) {
            double v16 = a4;
          }
          double v19 = round(v15);
          double v20 = round(v16);
          if (v17 < v18) {
            double v21 = v11;
          }
          else {
            double v21 = v18;
          }
          if (v17 < v18) {
            double v22 = v10;
          }
          else {
            double v22 = v17;
          }
          if (v17 >= v18 || v10 >= v11)
          {
            double v20 = v21;
            double v19 = v22;
          }
          if (v19 < v20 || v10 < v11 && v17 < v18 && (v17 != v11 ? (BOOL v24 = v10 == v18) : (BOOL v24 = 1), v24))
          {
            if ((unint64_t)v14 >= v94)
            {
              uint64_t v25 = ((uint64_t)v14 - v93.i64[0]) >> 4;
              if ((unint64_t)(v25 + 1) >> 60) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v26 = (uint64_t)(v94 - v93.i64[0]) >> 3;
              if (v26 <= v25 + 1) {
                unint64_t v26 = v25 + 1;
              }
              if (v94 - v93.i64[0] >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v27 = v26;
              }
              unint64_t v98 = (int64x2_t *)&v94;
              if (v27) {
                unint64_t v27 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>(v27);
              }
              else {
                uint64_t v28 = 0;
              }
              unint64_t v29 = (_OWORD *)(v27 + 16 * v25);
              *unint64_t v29 = *(_OWORD *)v12;
              uint64_t v30 = v93.i64[1];
              if (v93.i64[1] == v93.i64[0])
              {
                int64x2_t v34 = vdupq_n_s64(v93.u64[1]);
                unint64_t v31 = v27 + 16 * v25;
              }
              else
              {
                unint64_t v31 = v27 + 16 * v25;
                do
                {
                  uint64_t v32 = *(void *)(v30 - 16);
                  v30 -= 16;
                  int v33 = *(_DWORD *)(v30 + 8);
                  *(void *)(v31 - 16) = v32;
                  v31 -= 16;
                  *(_DWORD *)(v31 + 8) = v33;
                }
                while (v30 != v93.i64[0]);
                int64x2_t v34 = v93;
              }
              uint64_t v14 = (caulk::rt_safe_memory_resource *)(v29 + 1);
              v93.i64[0] = v31;
              int64x2_t v96 = v34;
              unint64_t v35 = v94;
              unint64_t v94 = v27 + 16 * v28;
              unint64_t v97 = v35;
              BOOL v95 = (void *)v34.i64[0];
              __n128 result = std::__split_buffer<AMCP::DAL::AU_Stream_Parameter,caulk::rt_allocator<AMCP::DAL::AU_Stream_Parameter> &>::~__split_buffer((uint64_t)&v95);
            }
            else
            {
              *(_OWORD *)uint64_t v14 = *(_OWORD *)v12;
              uint64_t v14 = (caulk::rt_safe_memory_resource *)((char *)v14 + 16);
            }
            v93.i64[1] = (uint64_t)v14;
          }
          v12 += 2;
        }
        while (v12 != v13);
        uint64_t v36 = v93.i64[0];
        if ((caulk::rt_safe_memory_resource *)v93.i64[0] != v14)
        {
          while (1)
          {
            double v37 = *(double *)v36;
            uint64_t v92 = *(void *)(v36 + 8);
            uint64_t v39 = *a2;
            unint64_t v38 = a2[1];
            __n128 result = (uint64_t)std::__hash_table<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::__unordered_map_hasher<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::hash<AMCP::DAL::AUParameterKey>,std::equal_to<void>,true>,std::__unordered_map_equal<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::equal_to<void>,std::hash<AMCP::DAL::AUParameterKey>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>>>::find<AMCP::DAL::AUParameterKey>(*a2, v38, (unsigned int *)(v8 + 16));
            double v40 = (int64x2_t *)result;
            if (!result) {
              break;
            }
LABEL_123:
            double v72 = v37 - v9;
            unint64_t v73 = v40[3].u64[0];
            unint64_t v74 = v40[2].u64[1];
            if (v74 >= v73)
            {
              uint64_t v75 = v40[2].i64[0];
              uint64_t v76 = (uint64_t)(v74 - v75) >> 4;
              unint64_t v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 60) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v78 = v73 - v75;
              if (v78 >> 3 > v77) {
                unint64_t v77 = v78 >> 3;
              }
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v79 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v79 = v77;
              }
              unint64_t v98 = v40 + 3;
              if (v79) {
                unint64_t v79 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>(v79);
              }
              else {
                uint64_t v80 = 0;
              }
              unint64_t v81 = v79 + 16 * v76;
              *(double *)unint64_t v81 = v72;
              *(void *)(v81 + 8) = v92;
              uint64_t v83 = v40[2].i64[0];
              unint64_t v82 = v40[2].u64[1];
              if (v82 == v83)
              {
                int64x2_t v87 = vdupq_n_s64(v82);
                unint64_t v84 = v79 + 16 * v76;
              }
              else
              {
                unint64_t v84 = v79 + 16 * v76;
                do
                {
                  uint64_t v85 = *(void *)(v82 - 16);
                  v82 -= 16;
                  int v86 = *(_DWORD *)(v82 + 8);
                  *(void *)(v84 - 16) = v85;
                  v84 -= 16;
                  *(_DWORD *)(v84 + 8) = v86;
                }
                while (v82 != v83);
                int64x2_t v87 = v40[2];
              }
              uint64_t v12 = (double *)(v81 + 16);
              v40[2].i64[0] = v84;
              v40[2].i64[1] = v81 + 16;
              int64x2_t v96 = v87;
              uint64_t v88 = v40[3].i64[0];
              v40[3].i64[0] = v79 + 16 * v80;
              unint64_t v97 = v88;
              BOOL v95 = (void *)v87.i64[0];
              __n128 result = std::__split_buffer<AMCP::DAL::AU_Stream_Parameter,caulk::rt_allocator<AMCP::DAL::AU_Stream_Parameter> &>::~__split_buffer((uint64_t)&v95);
            }
            else
            {
              *(double *)unint64_t v74 = v72;
              *(void *)(v74 + 8) = v92;
              uint64_t v12 = (double *)(v74 + 16);
            }
            v40[2].i64[1] = (uint64_t)v12;
            v36 += 16;
            if ((caulk::rt_safe_memory_resource *)v36 == v14)
            {
              uint64_t v14 = (caulk::rt_safe_memory_resource *)v93.i64[0];
              goto LABEL_151;
            }
          }
          uint64_t v41 = *(unsigned int *)(v8 + 16);
          uint64_t v42 = *(unsigned int *)(v8 + 20);
          uint64_t v43 = *(unsigned int *)(v8 + 24);
          unint64_t v44 = 0xC6A4A7935BD1E995
              * ((0xC6A4A7935BD1E995
                * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v42) ^ ((0xC6A4A7935BD1E995 * v42) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v41) ^ ((0xC6A4A7935BD1E995 * v41) >> 47)) + 3864292196u))
                + 3864292196u) ^ (0xC6A4A7935BD1E995
                                * ((0xC6A4A7935BD1E995 * v43) ^ ((0xC6A4A7935BD1E995 * v43) >> 47))))
              + 3864292196u;
          if (v38)
          {
            uint8x8_t v45 = (uint8x8_t)vcnt_s8((int8x8_t)v38);
            v45.i16[0] = vaddlv_u8(v45);
            if (v45.u32[0] > 1uLL)
            {
              uint64_t v12 = (double *)(0xC6A4A7935BD1E995
                             * ((0xC6A4A7935BD1E995
                               * ((0xC6A4A7935BD1E995
                                 * ((0xC6A4A7935BD1E995 * v42) ^ ((0xC6A4A7935BD1E995 * v42) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v41) ^ ((0xC6A4A7935BD1E995 * v41) >> 47)) + 3864292196u))
                               + 3864292196u) ^ (0xC6A4A7935BD1E995
                                               * ((0xC6A4A7935BD1E995 * v43) ^ ((0xC6A4A7935BD1E995 * v43) >> 47))))
                             + 3864292196u);
              if (v44 >= v38) {
                uint64_t v12 = (double *)(v44 % v38);
              }
            }
            else
            {
              uint64_t v12 = (double *)(v44 & (v38 - 1));
            }
            __int16 v46 = *(uint64_t ***)(v39 + 8 * (void)v12);
            if (v46)
            {
              for (int i = *v46; i; int i = (uint64_t *)*i)
              {
                unint64_t v48 = i[1];
                if (v48 == v44)
                {
                  if (*((_DWORD *)i + 4) == v41 && *(uint64_t *)((char *)i + 20) == __PAIR64__(v43, v42)) {
                    goto LABEL_122;
                  }
                }
                else
                {
                  if (v45.u32[0] > 1uLL)
                  {
                    if (v48 >= v38) {
                      v48 %= v38;
                    }
                  }
                  else
                  {
                    v48 &= v38 - 1;
                  }
                  if ((double *)v48 != v12) {
                    break;
                  }
                }
              }
            }
          }
          uint64_t v49 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v91 + 16))(*v91, 56, 8);
          BOOL v95 = (void *)v49;
          v96.i64[0] = (uint64_t)v91;
          *(void *)uint64_t v49 = 0;
          *(void *)(v49 + 8) = v44;
          int v50 = *(_DWORD *)(v8 + 24);
          *(void *)(v49 + 16) = *(void *)(v8 + 16);
          *(_DWORD *)(v49 + 24) = v50;
          *(void *)(v49 + 40) = 0;
          *(void *)(v49 + 48) = 0;
          *(void *)(v49 + 32) = 0;
          uint64_t v51 = a2[5];
          float v52 = *((float *)a2 + 12);
          v96.i8[8] = 1;
          float v53 = (float)(unint64_t)(v51 + 1);
          if (!v38 || (float)(v52 * (float)v38) < v53)
          {
            BOOL v54 = (v38 & (v38 - 1)) != 0;
            if (v38 < 3) {
              BOOL v54 = 1;
            }
            unint64_t v55 = v54 | (2 * v38);
            unint64_t v56 = vcvtps_u32_f32(v53 / v52);
            if (v55 <= v56) {
              int8x8_t prime = (int8x8_t)v56;
            }
            else {
              int8x8_t prime = (int8x8_t)v55;
            }
            if (*(void *)&prime == 1)
            {
              int8x8_t prime = (int8x8_t)2;
            }
            else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
            {
              int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
            }
            unint64_t v38 = a2[1];
            if (*(void *)&prime <= v38)
            {
              if (*(void *)&prime < v38)
              {
                unint64_t v64 = vcvtps_u32_f32((float)(unint64_t)a2[5] / *((float *)a2 + 12));
                if (v38 < 3
                  || (uint8x8_t v65 = (uint8x8_t)vcnt_s8((int8x8_t)v38), v65.i16[0] = vaddlv_u8(v65), v65.u32[0] > 1uLL))
                {
                  unint64_t v64 = std::__next_prime(v64);
                }
                else
                {
                  uint64_t v66 = 1 << -(char)__clz(v64 - 1);
                  if (v64 >= 2) {
                    unint64_t v64 = v66;
                  }
                }
                if (*(void *)&prime <= v64) {
                  int8x8_t prime = (int8x8_t)v64;
                }
                if (*(void *)&prime >= v38)
                {
                  unint64_t v38 = a2[1];
                }
                else
                {
                  if (prime) {
                    goto LABEL_78;
                  }
                  uint64_t v89 = *a2;
                  *a2 = 0;
                  if (v89) {
                    std::allocator_traits<std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,void *> *> *>>::deallocate[abi:ne180100](a2[2], v89, a2[1]);
                  }
                  unint64_t v38 = 0;
                  a2[1] = 0;
                }
              }
            }
            else
            {
LABEL_78:
              if (*(void *)&prime >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2[2] + 16))(a2[2], 8 * *(void *)&prime, 8);
              uint64_t v59 = *a2;
              *a2 = v58;
              if (v59) {
                std::allocator_traits<std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,void *> *> *>>::deallocate[abi:ne180100](a2[2], v59, a2[1]);
              }
              uint64_t v60 = 0;
              a2[1] = (uint64_t)prime;
              do
                *(void *)(*a2 + 8 * v60++) = 0;
              while (*(void *)&prime != v60);
              double v61 = (void *)*v90;
              if (*v90)
              {
                unint64_t v62 = v61[1];
                uint8x8_t v63 = (uint8x8_t)vcnt_s8(prime);
                v63.i16[0] = vaddlv_u8(v63);
                if (v63.u32[0] > 1uLL)
                {
                  if (v62 >= *(void *)&prime) {
                    v62 %= *(void *)&prime;
                  }
                }
                else
                {
                  v62 &= *(void *)&prime - 1;
                }
                *(void *)(*a2 + 8 * v62) = v90;
                uint64_t v67 = (void *)*v61;
                if (*v61)
                {
                  do
                  {
                    unint64_t v68 = v67[1];
                    if (v63.u32[0] > 1uLL)
                    {
                      if (v68 >= *(void *)&prime) {
                        v68 %= *(void *)&prime;
                      }
                    }
                    else
                    {
                      v68 &= *(void *)&prime - 1;
                    }
                    if (v68 != v62)
                    {
                      if (!*(void *)(*a2 + 8 * v68))
                      {
                        *(void *)(*a2 + 8 * v68) = v61;
                        goto LABEL_103;
                      }
                      *double v61 = *v67;
                      *uint64_t v67 = **(void **)(*a2 + 8 * v68);
                      **(void **)(*a2 + 8 * v68) = v67;
                      uint64_t v67 = v61;
                    }
                    unint64_t v68 = v62;
LABEL_103:
                    double v61 = v67;
                    uint64_t v67 = (void *)*v67;
                    unint64_t v62 = v68;
                  }
                  while (v67);
                }
              }
              unint64_t v38 = (unint64_t)prime;
            }
            if ((v38 & (v38 - 1)) != 0)
            {
              if (v44 >= v38) {
                uint64_t v12 = (double *)(v44 % v38);
              }
              else {
                uint64_t v12 = (double *)v44;
              }
            }
            else
            {
              uint64_t v12 = (double *)((v38 - 1) & v44);
            }
          }
          double v69 = *(void **)(*a2 + 8 * (void)v12);
          char v70 = v95;
          if (v69)
          {
            *BOOL v95 = *v69;
            goto LABEL_120;
          }
          *BOOL v95 = a2[3];
          a2[3] = (uint64_t)v70;
          *(void *)(*a2 + 8 * (void)v12) = v90;
          if (*v70)
          {
            unint64_t v71 = *(void *)(*v70 + 8);
            if ((v38 & (v38 - 1)) != 0)
            {
              if (v71 >= v38) {
                v71 %= v38;
              }
            }
            else
            {
              v71 &= v38 - 1;
            }
            double v69 = (void *)(*a2 + 8 * v71);
LABEL_120:
            void *v69 = v70;
          }
          ++a2[5];
          uint64_t v39 = *a2;
          unint64_t v38 = a2[1];
LABEL_122:
          __n128 result = (uint64_t)std::__hash_table<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::__unordered_map_hasher<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::hash<AMCP::DAL::AUParameterKey>,std::equal_to<void>,true>,std::__unordered_map_equal<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::equal_to<void>,std::hash<AMCP::DAL::AUParameterKey>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>>>::find<AMCP::DAL::AUParameterKey>(v39, v38, (unsigned int *)(v8 + 16));
          double v40 = (int64x2_t *)result;
          goto LABEL_123;
        }
LABEL_151:
        if (v14) {
          __n128 result = (uint64_t)std::allocator_traits<caulk::rt_allocator<AMCP::DAL::AU_Stream_Parameter>>::deallocate[abi:ne180100](v14, (uint64_t)(v94 - (void)v14) >> 4);
        }
      }
      uint64_t v8 = *(void *)v8;
    }
    while (v8);
  }
  return result;
}

void sub_1BAD7F830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, caulk::rt_safe_memory_resource *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  std::__hash_node_destructor<std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,void *>>>::operator()[abi:ne180100](a10, v19);
  if (a15) {
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::AU_Stream_Parameter>>::deallocate[abi:ne180100](a15, (a17 - (uint64_t)a15) >> 4);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::__unordered_map_hasher<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::hash<AMCP::DAL::AUParameterKey>,std::equal_to<void>,true>,std::__unordered_map_equal<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::equal_to<void>,std::hash<AMCP::DAL::AUParameterKey>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>>>::find<AMCP::DAL::AUParameterKey>(uint64_t a1, unint64_t a2, unsigned int *a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  uint64_t v5 = a3[2];
  unint64_t v6 = 0xC6A4A7935BD1E995
     * ((0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v4) ^ ((0xC6A4A7935BD1E995 * v4) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v3) ^ ((0xC6A4A7935BD1E995 * v3) >> 47)) + 3864292196u))
       + 3864292196u) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))))
     + 3864292196u;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v4) ^ ((0xC6A4A7935BD1E995 * v4) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v3) ^ ((0xC6A4A7935BD1E995 * v3) >> 47)) + 3864292196u))
         + 3864292196u) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))))
       + 3864292196u;
    if (v6 >= a2) {
      unint64_t v8 = v6 % a2;
    }
  }
  else
  {
    unint64_t v8 = v6 & (a2 - 1);
  }
  double v9 = *(uint64_t ***)(a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  for (__n128 result = *v9; result; __n128 result = (uint64_t *)*result)
  {
    unint64_t v11 = result[1];
    if (v11 == v6)
    {
      if (*((_DWORD *)result + 4) == v3 && *(uint64_t *)((char *)result + 20) == __PAIR64__(v5, v4)) {
        return result;
      }
    }
    else
    {
      if (v7.u32[0] > 1uLL)
      {
        if (v11 >= a2) {
          v11 %= a2;
        }
      }
      else
      {
        v11 &= a2 - 1;
      }
      if (v11 != v8) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t std::__split_buffer<AMCP::DAL::AU_Stream_Parameter,caulk::rt_allocator<AMCP::DAL::AU_Stream_Parameter> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  }
  uint64_t v4 = *(caulk::rt_safe_memory_resource **)a1;
  if (*(void *)a1) {
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::AU_Stream_Parameter>>::deallocate[abi:ne180100](v4, (uint64_t)(*(void *)(a1 + 24) - (void)v4) >> 4);
  }
  return a1;
}

uint64_t std::__hash_node_destructor<std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,void *>>>::operator()[abi:ne180100](uint64_t result, void *a2)
{
  uint64_t v3 = (uint64_t **)result;
  if (*(unsigned char *)(result + 8))
  {
    uint64_t v4 = (caulk::rt_safe_memory_resource *)a2[4];
    if (v4)
    {
      a2[5] = v4;
      std::allocator_traits<caulk::rt_allocator<AMCP::DAL::AU_Stream_Parameter>>::deallocate[abi:ne180100](v4, (uint64_t)(a2[6] - (void)v4) >> 4);
    }
  }
  else if (!a2)
  {
    return result;
  }
  uint64_t v5 = **v3;

  return std::allocator_traits<std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,void *>>>::deallocate[abi:ne180100](v5, (uint64_t)a2);
}

uint64_t AMCP::DAL::AUParameter_Data_Handler::copy(uint64_t a1, double *a2, uint64_t *a3, double a4)
{
  uint64_t v7 = *a3;
  AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::AUParameter_Data_Handler>(*a3);
  double v8 = *a2;
  double v9 = a2[1];
  double v10 = *(void **)(v7 + 80);
  if (v10)
  {
    double v11 = round(v8 - a4);
    double v12 = round(v9 - a4);
    do
    {
      uint64_t v14 = v10[4];
      uint64_t v13 = v10[5];
      while (v14 != v13)
      {
        double v15 = round(*(double *)v14);
        if (v15 >= v11 && v15 < v12)
        {
          if (v14 != v13)
          {
            uint64_t v17 = v14 + 16;
            if (v14 + 16 != v13)
            {
              do
              {
                double v18 = round(*(double *)v17);
                if (v18 < v11 || v18 >= v12)
                {
                  double v20 = *(double *)v17;
                  *(_DWORD *)(v14 + 8) = *(_DWORD *)(v17 + 8);
                  *(double *)uint64_t v14 = v20;
                  v14 += 16;
                }
                v17 += 16;
              }
              while (v17 != v13);
              uint64_t v13 = v10[5];
            }
            if (v14 != v13) {
              v10[5] = v14;
            }
          }
          break;
        }
        v14 += 16;
      }
      double v10 = (void *)*v10;
    }
    while (v10);
    double v8 = *a2;
    double v9 = a2[1];
  }
  uint64_t v21 = *(void *)(a1 + 80);

  return AMCP::DAL::merge_values(v21, (uint64_t *)(v7 + 56), v8, v9, a4);
}

void AMCP::DAL::AUParameter_Data_Handler::get_audio_buffer_list(void *a1@<X8>)
{
  *a1 = 0;
  a1[4] = 0;
}

{
  *a1 = 0;
  a1[4] = 0;
}

double AMCP::DAL::AUParameter_Data_Handler::get_length_in_frames(AMCP::DAL::AUParameter_Data_Handler *this)
{
  return *((double *)this + 14);
}

uint64_t AMCP::DAL::AUParameter_Data_Handler::get_allocation_size(AMCP::DAL::AUParameter_Data_Handler *this)
{
  return *((void *)this + 12);
}

uint64_t AMCP::DAL::AUParameter_Data_Handler::reuse_container(uint64_t this)
{
  if (*(void *)(this + 96))
  {
    uint64_t v1 = (void *)this;
    uint64_t v2 = (void *)(this + 56);
    this = std::__hash_table<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::__unordered_map_hasher<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::hash<AMCP::DAL::AUParameterKey>,std::equal_to<void>,true>,std::__unordered_map_equal<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::equal_to<void>,std::hash<AMCP::DAL::AUParameterKey>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>>>::__deallocate_node(this + 56, *(void **)(this + 80));
    v1[10] = 0;
    uint64_t v3 = v1[8];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v2 + 8 * i) = 0;
    }
    v1[12] = 0;
  }
  return this;
}

void AMCP::DAL::AUParameter_Data_Handler::adopt(AMCP::Log::Scope_Registry *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v4, "com.apple.coreaudio", "AMCP");
  uint64_t v1 = *v4;
  if (*(void *)v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v5);
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    uint64_t v2 = pthread_self();
    mach_port_t v3 = pthread_mach_thread_np(v2);
    LODWORD(v4) = 67109890;
    HIDWORD(v4) = v3;
    *(_WORD *)uint64_t v5 = 2080;
    *(void *)&v5[2] = "AUParameter_Data_Handler.cpp";
    __int16 v6 = 1024;
    int v7 = 95;
    __int16 v8 = 2080;
    double v9 = "false";
    _os_log_error_impl(&dword_1BAA78000, v1, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s AUParameter_Data_Handler::adopt unsupported", (uint8_t *)&v4, 0x22u);
  }
  abort();
}

BOOL AMCP::DAL::AUParameter_Data_Handler::dal_operation_is_supported(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = *((unsigned __int8 *)a2 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *((void *)a2 + 1);
  }
  if (v2 != 3) {
    return 0;
  }
  if (v3 >= 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = *(unsigned __int16 **)a2;
  }
  int v5 = *v4;
  int v6 = *((unsigned __int8 *)v4 + 2);
  return v5 == 26989 && v6 == 120;
}

void AMCP::DAL::AUParameter_Data_Handler::~AUParameter_Data_Handler(AMCP::DAL::AUParameter_Data_Handler *this)
{
  std::__hash_table<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::__unordered_map_hasher<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::hash<AMCP::DAL::AUParameterKey>,std::equal_to<void>,true>,std::__unordered_map_equal<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::equal_to<void>,std::hash<AMCP::DAL::AUParameterKey>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>>>::~__hash_table((uint64_t)this + 56);

  JUMPOUT(0x1C1859840);
}

{
  std::__hash_table<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::__unordered_map_hasher<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::hash<AMCP::DAL::AUParameterKey>,std::equal_to<void>,true>,std::__unordered_map_equal<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::equal_to<void>,std::hash<AMCP::DAL::AUParameterKey>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>>>::~__hash_table((uint64_t)this + 56);
}

uint64_t boost::circular_buffer<AMCP::Zero_Time_Stamp,std::allocator<AMCP::Zero_Time_Stamp>>::at(void *a1, int64_t a2)
{
  if (a1[4] <= (unint64_t)a2)
  {
    std::logic_error::logic_error(&v5, "circular_buffer");
    v5.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
    boost::throw_exception<std::out_of_range>(&v5);
  }
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 3)) <= a2) {
    a2 += 0x5555555555555555 * ((v3 - *a1) >> 3);
  }
  return v2 + 24 * a2;
}

void AMCP::Logging_Settings::instance(AMCP::Logging_Settings *this)
{
  {
    byte_1EBFFA394 = 0;
    AMCP::Logging_Settings::instance(void)::s_instance = 0;
  }
}

void AMCP::Utility::Settings_Storage::at_as<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(unsigned char *a1, uint64_t a2, const void **a3)
{
  int v6 = (std::mutex *)(a2 + 16);
  std::mutex::lock((std::mutex *)(a2 + 16));
  CFDictionaryRef v7 = *(const __CFDictionary **)(a2 + 112);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(a1, v7, *a3);

  std::mutex::unlock(v6);
}

void sub_1BAD7FF94(void *a1)
{
  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::DAL::Default_Data_Handler::get_data@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t result = AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::Default_Data_Handler>(*a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::Default_Data_Handler>(uint64_t result)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!result)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v1 = **(NSObject ***)buf;
    if (*(void *)v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v19);
    }
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      uint64_t v2 = pthread_self();
      mach_port_t v3 = pthread_mach_thread_np(v2);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v3;
      *(_WORD *)double v19 = 2080;
      *(void *)&v19[2] = "Container.h";
      __int16 v20 = 1024;
      int v21 = 121;
      __int16 v22 = 2080;
      *(void *)int v23 = "not ((m_impl.get()) != nullptr)";
      _os_log_error_impl(&dword_1BAA78000, v1, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to call Container::GetContainerData on a null Container", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v17);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to call Container::GetContainerData on a null Container", (uint64_t)&v9);
    std::logic_error::logic_error(&v10, &v9);
    v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v11, &v10);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    int v16 = -1;
    v11.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    double v12 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v11);
    *(void *)&v23[6] = "T *AMCP::DAL::Container::get_container_data_ptr() const [T = AMCP::DAL::Default_Data_Handler]";
    BOOL v24 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Container.h";
    int v25 = 121;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v4);
    long long v7 = v4;
    uint64_t v8 = v5;
    long long v4 = 0uLL;
    uint64_t v5 = 0;
    int v6 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return result;
}

void sub_1BAD80250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Default_Data_Handler::dal_operation_get_property()
{
  return 0;
}

void AMCP::DAL::Default_Data_Handler::dal_operation_apply(AMCP::Log::Scope_Registry *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  uint64_t v1 = **(NSObject ***)buf;
  if (*(void *)v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v20);
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    uint64_t v2 = pthread_self();
    mach_port_t v3 = pthread_mach_thread_np(v2);
    *(_DWORD *)std::string buf = 67109634;
    *(_DWORD *)&uint8_t buf[4] = v3;
    *(_WORD *)__int16 v20 = 2080;
    *(void *)&v20[2] = "Default_Data_Handler.cpp";
    __int16 v21 = 1024;
    int v22 = 90;
    _os_log_error_impl(&dword_1BAA78000, v1, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Default data handler does not support dal_operation_apply", buf, 0x18u);
  }
  AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v18);
  __cxa_allocate_exception(0x40uLL);
  caulk::make_string((caulk *)"Default data handler does not support dal_operation_apply", (uint64_t)&v10);
  std::runtime_error::runtime_error(&v11, &v10);
  std::runtime_error::runtime_error(&v12, &v11);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v17 = -1;
  v12.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
  uint64_t v13 = &unk_1F148A9D0;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v12);
  int v23 = "virtual Sample_Time_Range AMCP::DAL::Default_Data_Handler::dal_operation_apply(const Sample_Time_Range &, Contai"
        "ner, Sample_Time_Range, const DAL_Settings &, DAL_Operation_Context_Ref) const";
  BOOL v24 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Default_Data_Handler.cpp";
  int v25 = 90;
  std::vector<void *>::vector(&v5);
  int v4 = backtrace((void **)v5, (*((void *)&v5 + 1) - (void)v5) >> 3);
  std::vector<void *>::resize((char **)&v5, v4);
  long long v8 = v5;
  uint64_t v9 = v6;
  long long v5 = 0uLL;
  uint64_t v6 = 0;
  long long v7 = &unk_1F148AA90;
  boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
}

void sub_1BAD805E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,void *a24)
{
  std::runtime_error::~runtime_error(v24);
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  *(void *)(v26 - 128) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v26 - 120));
  std::runtime_error::~runtime_error((std::runtime_error *)(v26 - 144));
  a24 = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v25 + 24));
  std::runtime_error::~runtime_error(&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  __cxa_free_exception(v24);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v26 - 145));
  _Unwind_Resume(a1);
}

void AMCP::DAL::Default_Data_Handler::dal_operation_context_create(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t *AMCP::DAL::Default_Data_Handler::get_ring_buffer_time_translator(AMCP::DAL::Default_Data_Handler *this)
{
  {
    AMCP::DAL::Default_Data_Handler::get_ring_buffer_time_translator(void)const::s_translator = (uint64_t)&unk_1F1472808;
  }
  return &AMCP::DAL::Default_Data_Handler::get_ring_buffer_time_translator(void)const::s_translator;
}

void AMCP::DAL::Default_Data_Handler::mix(AMCP::Log::Scope_Registry *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  uint64_t v1 = **(NSObject ***)buf;
  if (*(void *)v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v20);
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    uint64_t v2 = pthread_self();
    mach_port_t v3 = pthread_mach_thread_np(v2);
    *(_DWORD *)std::string buf = 67109634;
    *(_DWORD *)&uint8_t buf[4] = v3;
    *(_WORD *)__int16 v20 = 2080;
    *(void *)&v20[2] = "Default_Data_Handler.cpp";
    __int16 v21 = 1024;
    int v22 = 70;
    _os_log_error_impl(&dword_1BAA78000, v1, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Default data handler does not support mixing", buf, 0x18u);
  }
  AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v18);
  __cxa_allocate_exception(0x40uLL);
  caulk::make_string((caulk *)"Default data handler does not support mixing", (uint64_t)&v10);
  std::runtime_error::runtime_error(&v11, &v10);
  std::runtime_error::runtime_error(&v12, &v11);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v17 = -1;
  v12.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
  uint64_t v13 = &unk_1F148A9D0;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v12);
  int v23 = "virtual void AMCP::DAL::Default_Data_Handler::mix(Sample_Time_Range, Container, Sample_Time, DAL_Operation_Context_Ref) const";
  BOOL v24 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Default_Data_Handler.cpp";
  int v25 = 70;
  std::vector<void *>::vector(&v5);
  int v4 = backtrace((void **)v5, (*((void *)&v5 + 1) - (void)v5) >> 3);
  std::vector<void *>::resize((char **)&v5, v4);
  long long v8 = v5;
  uint64_t v9 = v6;
  long long v5 = 0uLL;
  uint64_t v6 = 0;
  long long v7 = &unk_1F148AA90;
  boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
}

void sub_1BAD80A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,void *a24)
{
  std::runtime_error::~runtime_error(v24);
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  *(void *)(v26 - 128) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v26 - 120));
  std::runtime_error::~runtime_error((std::runtime_error *)(v26 - 144));
  a24 = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v25 + 24));
  std::runtime_error::~runtime_error(&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  __cxa_free_exception(v24);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v26 - 145));
  _Unwind_Resume(a1);
}

void *AMCP::DAL::Default_Data_Handler::copy(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v4 = *(void **)(AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::Default_Data_Handler>(*a3) + 56);
  long long v5 = *(const void **)(a1 + 56);
  size_t v6 = *(void *)(a1 + 64) - (void)v5;

  return memcpy(v4, v5, v6);
}

void AMCP::DAL::Default_Data_Handler::get_audio_buffer_list(void *a1@<X8>)
{
  *a1 = 0;
  a1[4] = 0;
}

{
  *a1 = 0;
  a1[4] = 0;
}

double AMCP::DAL::Default_Data_Handler::get_length_in_frames(AMCP::DAL::Default_Data_Handler *this)
{
  return 0.0;
}

uint64_t AMCP::DAL::Default_Data_Handler::get_allocation_size(AMCP::DAL::Default_Data_Handler *this)
{
  return *((void *)this + 8) - *((void *)this + 7);
}

void AMCP::DAL::Default_Data_Handler::adopt(AMCP::Log::Scope_Registry *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v4, "com.apple.coreaudio", "AMCP");
  uint64_t v1 = *v4;
  if (*(void *)v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v5);
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    uint64_t v2 = pthread_self();
    mach_port_t v3 = pthread_mach_thread_np(v2);
    LODWORD(v4) = 67109890;
    HIDWORD(v4) = v3;
    *(_WORD *)long long v5 = 2080;
    *(void *)&v5[2] = "Default_Data_Handler.cpp";
    __int16 v6 = 1024;
    int v7 = 39;
    __int16 v8 = 2080;
    uint64_t v9 = "false";
    _os_log_error_impl(&dword_1BAA78000, v1, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Default_Data_Handler::adopt unsupported", (uint8_t *)&v4, 0x22u);
  }
  abort();
}

uint64_t AMCP::DAL::Default_Data_Handler::dal_operation_is_supported()
{
  return 0;
}

void AMCP::DAL::Default_Data_Handler::~Default_Data_Handler(AMCP::DAL::Default_Data_Handler *this)
{
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C1859840);
}

{
  void *v2;

  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
}

uint64_t AMCP::Graph::Null_Timebase::get_private_transport_state(AMCP::Graph::Null_Timebase *this)
{
  return *((unsigned int *)this + 24);
}

double AMCP::Graph::Null_Timebase::get_max_io_buffer_frame_size(AMCP::Graph::Null_Timebase *this)
{
  return *((double *)this + 18);
}

uint64_t AMCP::Graph::Null_Timebase::wait_for_time_to_start(uint64_t a1, uint64_t a2, uint64_t a3)
{
  mach_port_t v3 = *(uint64_t ***)(a2 + 16);
  if (!v3) {
    return 0;
  }
  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr))(*v3[2] + 192))(&v8);
    uint64_t v6 = v8;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (v6) {
      break;
    }
    mach_port_t v3 = (uint64_t **)*v3;
    if (!v3) {
      return 0;
    }
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v3[2] + 200))(v3[2], a2, a3);
}

void AMCP::Graph::Null_Timebase::get_engine_ptr(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t AMCP::Graph::Null_Timebase::available_past_data(AMCP::Graph::Null_Timebase *this)
{
  return 0;
}

uint64_t AMCP::Graph::Null_Timebase::supports_past_data(AMCP::Graph::Null_Timebase *this)
{
  return 0;
}

double AMCP::Graph::Null_Timebase::get_rate_scalar(AMCP::Graph::Null_Timebase *this)
{
  return 1.0;
}

double AMCP::Graph::Null_Timebase::get_sample_rate(AMCP::Graph::Null_Timebase *this)
{
  return *((double *)this + 14);
}

uint64_t AMCP::Graph::Null_Timebase::get_engine_info(uint64_t a1)
{
  return *(void *)(a1 + 136);
}

uint64_t AMCP::Graph::Null_Timebase::get_anchor_time(AMCP::Graph::Null_Timebase *this)
{
  uint64_t v1 = AMCP::Graph::Null_Timebase::demand_counter(this);
  AMCP::Graph::Manifest_Counter::get_anchor_time((uint64_t)v4, (uint64_t)v1);
  double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return *(void *)&sample_time;
}

void sub_1BAD80EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

char *AMCP::Graph::Null_Timebase::demand_counter(AMCP::Graph::Null_Timebase *this)
{
  uint64_t v2 = (char *)this + 24;
  uint64_t v4 = *((void *)this + 6);
  mach_port_t v3 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (!v4)
  {
    std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v10, *((void *)this + 1), *((std::__shared_weak_count **)this + 2));
    uint64_t v6 = v10;
    long long v5 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    HIBYTE(v9) = 0;
    *((unsigned char *)this + 24) = 0;
    *((void *)this + 5) = 0;
    *((void *)this + 6) = v6;
    *(_OWORD *)((char *)this + 25) = v9;
    int v7 = (std::__shared_weak_count *)*((void *)this + 7);
    *((void *)this + 7) = v5;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    *((_DWORD *)this + 16) = 0;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  return v2;
}

void AMCP::Graph::Null_Timebase::get_state(AMCP::Graph::Null_Timebase *this@<X0>, AMCP::IO_Core::Play_State_Manager *a2@<X8>)
{
  uint64_t v4 = (os_unfair_lock_s *)((char *)this + 72);
  os_unfair_lock_lock((os_unfair_lock_t)this + 18);
  AMCP::IO_Core::Play_State_Manager::get_state_snapshot(a2, (unint64_t *)this + 10);

  os_unfair_lock_unlock(v4);
}

void sub_1BAD80FBC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Null_Timebase::is_running(AMCP::Graph::Null_Timebase *this)
{
  return *AMCP::Graph::Null_Timebase::demand_counter(this);
}

void AMCP::Graph::Null_Timebase::stop(uint64_t a1, int a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 72);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  std::string::basic_string[abi:ne180100]<0>(__p, "Null_Timebase");
  int v5 = AMCP::IO_Core::Play_State_Manager::stop((uint64_t *)(a1 + 80), a2, (uint64_t *)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (!*(void *)(a1 + 88) && *(_DWORD *)(a1 + 96) && !*(void *)(a1 + 80))
  {
    *AMCP::Graph::Null_Timebase::demand_counter((AMCP::Graph::Null_Timebase *)a1) = 0;
    *(_DWORD *)(a1 + 96) = v5;
  }
  os_unfair_lock_unlock(v4);
}

void sub_1BAD81090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  os_unfair_lock_unlock(v15);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Null_Timebase::advance_to_time(AMCP::Graph::Null_Timebase *a1, double a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = AMCP::Graph::Null_Timebase::demand_counter(a1);
  AMCP::Graph::Manifest_Counter::get_current_cycle_anchor_time((uint64_t)v25, (uint64_t)v4);
  if (round(a2) < round(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v25)))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v8 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      unint64_t v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)uint64_t v28 = 2080;
      *(void *)&v28[2] = "Null_Timebase.cpp";
      __int16 v29 = 1024;
      int v30 = 234;
      __int16 v31 = 2080;
      *(void *)uint64_t v32 = "not (target_time >= current.get_sample_time())";
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v16);
    std::logic_error::logic_error(&v17, &v16);
    v17.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v18, &v17);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v23 = -1;
    v18.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    double v19 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v18);
    *(void *)&v32[6] = "virtual void AMCP::Graph::Null_Timebase::advance_to_time(Sample_Time)";
    int v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Timebase.cpp";
    int v34 = 234;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v11);
    uint64_t v13 = &unk_1F148AA90;
    long long v14 = v11;
    uint64_t v15 = v12;
    long long v11 = 0uLL;
    uint64_t v12 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v25);
  char v7 = AMCP::Graph::Null_Timebase::demand_counter(a1);
  AMCP::Graph::Manifest_Counter::advance((uint64_t)v7, a2 - sample_time);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
}

void sub_1BAD81390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,char a28)
{
  int v30 = *(std::__shared_weak_count **)(v28 - 136);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  _Unwind_Resume(exception_object);
}

double AMCP::Graph::Null_Timebase::advance(AMCP::Graph::Null_Timebase *a1, double a2)
{
  mach_port_t v3 = AMCP::Graph::Null_Timebase::demand_counter(a1);

  return AMCP::Graph::Manifest_Counter::advance((uint64_t)v3, a2);
}

void AMCP::Graph::Null_Timebase::start(uint64_t a1, int a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 72);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  std::string::basic_string[abi:ne180100]<0>(&__p, "Null_Timebase");
  int v5 = AMCP::IO_Core::Play_State_Manager::start((uint64_t *)(a1 + 80), a2, (uint64_t *)&__p);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if (*(void *)(a1 + 88))
  {
    BOOL v7 = 1;
    if (v6) {
      goto LABEL_20;
    }
  }
  else
  {
    BOOL v7 = *(void *)(a1 + 80) != 0;
    if (v6) {
      goto LABEL_20;
    }
  }
  if (v7)
  {
    if (*(_DWORD *)(a1 + 100) == 1)
    {
      uint64_t v8 = AMCP::Graph::Null_Timebase::demand_counter((AMCP::Graph::Null_Timebase *)a1);
      std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v12, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
      LODWORD(__p) = 2;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      long long v16 = v12;
      long long v12 = 0uLL;
      AMCP::Graph::Manifest_Counter::start((uint64_t)v8, (AMCP::DAL::DAL_Time *)&__p);
      if (*((void *)&v16 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
      }
      if (*((void *)&v12 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
      }
      uint64_t v9 = 0;
    }
    else
    {
      mach_port_t v10 = AMCP::Graph::Null_Timebase::demand_counter((AMCP::Graph::Null_Timebase *)a1);
      std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v11, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
      LODWORD(__p) = 2;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      long long v16 = v11;
      long long v11 = 0uLL;
      AMCP::Graph::Manifest_Counter::start((uint64_t)v10, (AMCP::DAL::DAL_Time *)&__p);
      if (*((void *)&v16 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
      }
      if (*((void *)&v11 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
      }
      uint64_t v9 = mach_absolute_time();
    }
    *(void *)(a1 + 128) = v9;
    *(_DWORD *)(a1 + 96) = v5;
  }
LABEL_20:
  os_unfair_lock_unlock(v4);
}

void sub_1BAD815EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  os_unfair_lock_unlock(v21);
  _Unwind_Resume(a1);
}

double AMCP::Graph::Null_Timebase::get_host_ticks_per_frame(AMCP::Graph::Null_Timebase *this)
{
  return *((double *)this + 15);
}

double AMCP::Graph::Null_Timebase::convert_host_to_sample_time(AMCP::Graph::Null_Timebase *this, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = a2;
  long long v7 = 0u;
  long long v8 = 0u;
  uint64_t v9 = 0;
  uint64_t v10 = 2;
  uint64_t v4 = 0;
  memset(v3, 0, sizeof(v3));
  uint64_t v5 = 1;
  AMCP::Graph::Null_Timebase::translate_time((uint64_t)this, (uint64_t)v6, (uint64_t)v3);
  return *(double *)v3;
}

void AMCP::Graph::Null_Timebase::translate_time(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(a2 + 56) & 3) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v20 = **(NSObject ***)buf;
    if (*(void *)v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v38);
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = pthread_self();
      mach_port_t v22 = pthread_mach_thread_np(v21);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v22;
      *(_WORD *)unint64_t v38 = 2080;
      *(void *)&v38[2] = "Null_Timebase.cpp";
      __int16 v39 = 1024;
      int v40 = 84;
      __int16 v41 = 2080;
      *(void *)uint64_t v42 = "not ((inTime.mFlags & kAudioTimeStampSampleHostTimeValid) != 0)";
      _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s TranslateTime has to have either sample time or host time valid on the input", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"TranslateTime has to have either sample time or host time valid on the input", (uint64_t)&v28);
    std::logic_error::logic_error(&v29, &v28);
    v29.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v30, &v29);
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    int v35 = -1;
    v30.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    __int16 v31 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
    *(void *)&v42[6] = "void AMCP::Graph::Null_Timebase::translate_time(const CA::TimeStamp &, CA::TimeStamp &) const";
    uint64_t v43 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Timebase.cpp";
    int v44 = 84;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
    long long v26 = v23;
    uint64_t v27 = v24;
    long long v23 = 0uLL;
    uint64_t v24 = 0;
    uint64_t v25 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  double v5 = *(double *)(a1 + 120);
  unint64_t v6 = *(void *)(a1 + 128);
  long long v7 = AMCP::Graph::Null_Timebase::demand_counter((AMCP::Graph::Null_Timebase *)a1);
  AMCP::Graph::Manifest_Counter::get_anchor_time((uint64_t)buf, (uint64_t)v7);
  uint64_t v8 = (uint64_t)floor(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)buf));
  if (*(void *)&v42[6]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v42[6]);
  }
  double v9 = (double)v8;
  int v10 = *(_DWORD *)(a3 + 56);
  if (v10)
  {
    int v11 = *(_DWORD *)(a2 + 56);
    if (v11)
    {
      double v12 = *(double *)a2;
    }
    else
    {
      double v12 = 0.0;
      if ((v11 & 2) != 0)
      {
        unint64_t v13 = *(void *)(a2 + 8);
        if (v13)
        {
          double v14 = -(double)(v6 - v13);
          BOOL v15 = v13 >= v6;
          unint64_t v16 = v13 - v6;
          if (v15) {
            double v14 = (double)v16;
          }
          double v12 = v14 / v5 + v9;
        }
      }
    }
    *(double *)a3 = v12;
    if ((v10 & 2) == 0)
    {
LABEL_6:
      if ((v10 & 4) == 0) {
        return;
      }
      goto LABEL_7;
    }
  }
  else if ((v10 & 2) == 0)
  {
    goto LABEL_6;
  }
  int v17 = *(_DWORD *)(a2 + 56);
  if ((v17 & 2) != 0)
  {
    unint64_t v18 = *(void *)(a2 + 8);
  }
  else
  {
    if ((v17 & 1) == 0)
    {
      *(void *)(a3 + 8) = 0;
      if ((v10 & 4) == 0) {
        return;
      }
LABEL_7:
      *(void *)(a3 + 16) = 0x3FF0000000000000;
      return;
    }
    double v19 = *(double *)a2;
    if (*(double *)a2 >= v9) {
      unint64_t v18 = v6 + vcvtad_u64_f64(v5 * (v19 - v9));
    }
    else {
      unint64_t v18 = v6 - vcvtad_u64_f64(v5 * (v9 - v19));
    }
  }
  *(void *)(a3 + 8) = v18;
  if ((v10 & 4) != 0) {
    goto LABEL_7;
  }
}

void sub_1BAD81A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  std::logic_error v29 = *(std::__shared_weak_count **)(v27 - 96);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Graph::Null_Timebase::convert_sample_to_host_time(AMCP::Graph::Null_Timebase *this, double a2)
{
  double v6 = a2;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  uint64_t v10 = 1;
  uint64_t v4 = 0;
  memset(v3, 0, sizeof(v3));
  uint64_t v5 = 2;
  AMCP::Graph::Null_Timebase::translate_time((uint64_t)this, (uint64_t)&v6, (uint64_t)v3);
  return *((void *)&v3[0] + 1);
}

uint64_t AMCP::Graph::Null_Timebase::get_clock_domain(AMCP::Graph::Null_Timebase *this)
{
  return (*((_DWORD *)this + 26) + 1000);
}

double AMCP::Graph::Null_Timebase::get_last_zero_time_stamp@<D0>(AMCP::Graph::Null_Timebase *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  mach_port_t v3 = AMCP::Graph::Null_Timebase::demand_counter(this);
  if (!*v3)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v5 = **(NSObject ***)buf;
    if (*(void *)v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v23);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      double v6 = pthread_self();
      mach_port_t v7 = pthread_mach_thread_np(v6);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)long long v23 = 2080;
      *(void *)&v23[2] = "Null_Timebase.cpp";
      __int16 v24 = 1024;
      int v25 = 51;
      __int16 v26 = 2080;
      *(void *)uint64_t v27 = "not (is_running())";
      _os_log_error_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Trying to get current time when clock is not running", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v21);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Trying to get current time when clock is not running", (uint64_t)&v13);
    std::logic_error::logic_error(&v14, &v13);
    v14.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v15, &v14);
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    int v20 = -1;
    v15.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unint64_t v16 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v15);
    *(void *)&void v27[6] = "virtual CA::TimeStamp AMCP::Graph::Null_Timebase::get_last_zero_time_stamp() const";
    std::string v28 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Timebase.cpp";
    int v29 = 51;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v8);
    long long v11 = v8;
    uint64_t v12 = v9;
    long long v8 = 0uLL;
    uint64_t v9 = 0;
    uint64_t v10 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(void *)&double result = 7;
  *(void *)(a2 + 56) = 7;
  return result;
}

void sub_1BAD81E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

void AMCP::Graph::Null_Timebase::get_current_time(AMCP::Graph::Null_Timebase *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = AMCP::Graph::Null_Timebase::demand_counter(this);
  if (!*v4)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v9 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)uint64_t v27 = 2080;
      *(void *)&v27[2] = "Null_Timebase.cpp";
      __int16 v28 = 1024;
      int v29 = 40;
      __int16 v30 = 2080;
      *(void *)__int16 v31 = "not (is_running())";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Trying to get current time when clock is not running", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Trying to get current time when clock is not running", (uint64_t)&v17);
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v19, &v18);
    uint64_t v21 = 0;
    mach_port_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v20 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&void v31[6] = "virtual CA::TimeStamp AMCP::Graph::Null_Timebase::get_current_time() const";
    uint64_t v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Timebase.cpp";
    int v33 = 40;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    std::logic_error v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v5 = AMCP::Graph::Null_Timebase::demand_counter(this);
  AMCP::Graph::Manifest_Counter::get_current_cycle_anchor_time((uint64_t)buf, (uint64_t)v5);
  double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)buf);
  mach_port_t v7 = AMCP::Graph::Null_Timebase::demand_counter(this);
  AMCP::Graph::Manifest_Counter::get_current_cycle_anchor_time((uint64_t)&v19, (uint64_t)v7);
  uint64_t host_time = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)&v19);
  *(double *)a2 = (double)(uint64_t)vcvtmd_s64_f64(sample_time);
  *(void *)(a2 + 8) = host_time;
  *(void *)(a2 + 16) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(void *)(a2 + 56) = 7;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (*(void *)&v31[6]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v31[6]);
  }
}

void sub_1BAD82198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  int v33 = *(std::__shared_weak_count **)(v31 - 96);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Null_Timebase::get_underlying_device_uid(AMCP::Graph::Null_Timebase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 175) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 19), *((void *)this + 20));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 152);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 21);
  }
}

uint64_t AMCP::Graph::Null_Timebase::get_clock_id(AMCP::Graph::Null_Timebase *this)
{
  return (uint64_t)this + 152;
}

void AMCP::Graph::Null_Timebase::~Null_Timebase(void **this)
{
  *this = &unk_1F1471720;
  if (*((char *)this + 175) < 0) {
    operator delete(this[19]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[7];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mach_port_t v3 = (std::__shared_weak_count *)this[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *this = &unk_1F1471720;
  if (*((char *)this + 175) < 0) {
    operator delete(this[19]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[7];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  mach_port_t v3 = (std::__shared_weak_count *)this[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void AMCP::Graph::make_mock_timebase(void *a1, unsigned int a2, int a3, uint64_t a4, double a5)
{
  uint64_t v10 = (char *)operator new(0xC8uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_1F1471888;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  mach_port_t v11 = v10 + 24;
  *((void *)v10 + 4) = 0;
  *((void *)v10 + 5) = 0;
  *((void *)v10 + 3) = &unk_1F1471720;
  v10[48] = 0;
  *((_DWORD *)v10 + 24) = 0;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 22) = 0;
  *((void *)v10 + 13) = 0;
  *((void *)v10 + 14) = 0;
  *((_DWORD *)v10 + 30) = 0;
  *((_DWORD *)v10 + 31) = a3;
  *((_DWORD *)v10 + 32) = a2;
  *((double *)v10 + 17) = a5;
  *((double *)v10 + 18) = 24000000.0 / a5;
  *((void *)v10 + 19) = 0;
  *((void *)v10 + 20) = 0;
  *((void *)v10 + 21) = 0x40B0000000000000;
  std::to_string(&v18, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::logic_error v14 = std::string::insert(&v18, 0, (const std::string::value_type *)p_p, size);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  *((void *)v10 + 24) = *((void *)&v14->__r_.__value_.__l + 2);
  *((_OWORD *)v10 + 11) = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)v10 + 5);
  if (!v16)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 2, 1uLL, memory_order_relaxed);
    *((void *)v10 + 4) = v11;
    *((void *)v10 + 5) = v10;
    goto LABEL_18;
  }
  if (v16->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 2, 1uLL, memory_order_relaxed);
    *((void *)v10 + 4) = v11;
    *((void *)v10 + 5) = v10;
    std::__shared_weak_count::__release_weak(v16);
LABEL_18:
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10);
  }
  *a1 = v11;
  a1[1] = v10;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10);
}

void sub_1BAD82558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<AMCP::Graph::Null_Timebase>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::Graph::Null_Timebase>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1471888;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Graph::Null_Timebase>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1471888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t HostedDSP_StreamProcessor::StreamProcessInfo::StreamProcessInfo(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 24) = a5;
  *(_DWORD *)(a1 + 28) = 0;
  uint64_t v6 = *(void *)(a4 + 112);
  if (*(void *)(a4 + 120) == v6 || v6 == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
    long long v8 = *v12;
    if (*(void *)v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v13);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      LODWORD(v12) = 67109634;
      HIDWORD(v12) = v10;
      *(_WORD *)uint64_t v13 = 2080;
      *(void *)&v13[2] = "HostedDSP_StreamProcessor.cpp";
      __int16 v14 = 1024;
      int v15 = 32;
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] There is no device/engine assigned for this DSP stream.", (uint8_t *)&v12, 0x18u);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(v6 + 8);
  }
  return a1;
}

uint64_t HostedDSP_StreamProcessor::PerformIO_ProcessStream(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a1 == 1869968496)
  {
    HostedDSP_StreamProcessor::ProcessWithHostedDSP(a1);
    void v17[3] = 0;
    uint64_t v3 = HostedDSP_StreamProcessor::ProcessWithEngineAndIOProcessor(a1, (uint64_t)v17);
    std::__function::__value_func<BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::~__value_func[abi:ne180100](v17);
    return v3;
  }
  if (*(_DWORD *)a1 != 1768845428) {
    return 0;
  }
  if (*(void *)(*(void *)(a1 + 16) + 120) == *(void *)(*(void *)(a1 + 16) + 112)) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 112);
  }
  if (!v2)
  {
LABEL_18:
    int v20 = (void (**)(void **, void *, __n128))&unk_1F1471AD0;
    uint64_t v21 = v2;
    mach_port_t v22 = (void **)&v20;
    uint64_t v3 = HostedDSP_StreamProcessor::ProcessWithEngineAndIOProcessor(a1, (uint64_t)&v20);
    std::__function::__value_func<BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::~__value_func[abi:ne180100](&v20);
    HostedDSP_StreamProcessor::ProcessWithHostedDSP(a1);
    return v3;
  }
  if (*(_DWORD *)(v2 + 100) == 4) {
    return 0;
  }
  uint64_t v4 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v4 = &unk_1F1471930;
  long long v5 = *(_OWORD *)a1;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v4 + 8) = v5;
  v19[3] = v4;
  uint64_t v6 = *(const void **)(v2 + 112);
  if (!v6
  {
    std::__function::__value_func<void ()(AudioBufferList *,AudioBufferList *,unsigned int)>::~__value_func[abi:ne180100](v19);
    goto LABEL_18;
  }
  __n128 v10 = std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0>,void ()(AudioBufferList *,AudioBufferList *,unsigned int)>::__clone((uint64_t)v4);
  mach_port_t v11 = v8 + 32;
  mach_port_t v22 = v9;
  if (v8 + 32 != (unsigned char *)&v20)
  {
    long long v12 = (unsigned char *)*((void *)v8 + 7);
    if (v9 == (void **)&v20)
    {
      if (v12 == v11)
      {
        v20[3]((void **)&v20, v18, v10);
        (*((void (**)(void **))*v22 + 4))(v22);
        mach_port_t v22 = 0;
        (*(void (**)(void, void (***)(void **, void *, __n128)))(**((void **)v8 + 7) + 24))(*((void *)v8 + 7), &v20);
        (*(void (**)(void))(**((void **)v8 + 7) + 32))(*((void *)v8 + 7));
        *((void *)v8 + 7) = 0;
        mach_port_t v22 = (void **)&v20;
        (*(void (**)(void *, unsigned char *))(v18[0] + 24))(v18, v8 + 32);
        (*(void (**)(void *))(v18[0] + 32))(v18);
      }
      else
      {
        v20[3]((void **)&v20, (void *)v8 + 4, v10);
        (*((void (**)(void **))*v22 + 4))(v22);
        mach_port_t v22 = (void **)*((void *)v8 + 7);
      }
      *((void *)v8 + 7) = v11;
    }
    else if (v12 == v11)
    {
      (*(void (**)(unsigned char *, void **, __n128))(*(void *)v11 + 24))(v8 + 32, (void **)&v20, v10);
      (*(void (**)(void))(**((void **)v8 + 7) + 32))(*((void *)v8 + 7));
      *((void *)v8 + 7) = v22;
      mach_port_t v22 = (void **)&v20;
    }
    else
    {
      mach_port_t v22 = (void **)*((void *)v8 + 7);
      *((void *)v8 + 7) = v9;
    }
  }
  std::__function::__value_func<void ()(AudioBufferList *,AudioBufferList *,unsigned int)>::~__value_func[abi:ne180100](&v20);
  std::__function::__value_func<void ()(AudioBufferList *,AudioBufferList *,unsigned int)>::~__value_func[abi:ne180100](v19);
  int v20 = (void (**)(void **, void *, __n128))&unk_1F14719C0;
  uint64_t v21 = v2;
  mach_port_t v22 = (void **)&v20;
  HostedDSP_StreamProcessor::ProcessWithEngineAndIOProcessor(a1, (uint64_t)&v20);
  std::__function::__value_func<BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::~__value_func[abi:ne180100](&v20);
  v18[0] = &unk_1F1471A50;
  v18[1] = v2;
  v18[3] = v18;
  uint64_t v3 = HostedDSP_StreamProcessor::ProcessWithEngineAndIOProcessor(a1, (uint64_t)v18);
  std::__function::__value_func<BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::~__value_func[abi:ne180100](v18);
  __int16 v14 = *(const void **)(v2 + 112);
  if (v14)
  {
    uint64_t v16 = (void *)v15[7];
    v15[7] = 0;
    if (v16 == v15 + 4)
    {
      (*(void (**)(void *))(v15[4] + 32))(v15 + 4);
    }
    else if (v16)
    {
      (*(void (**)(void *))(*v16 + 40))(v16);
    }
  }
  return v3;
}

void sub_1BAD82C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HostedDSP_StreamProcessor::ProcessWithHostedDSP(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 24);
  if (v1)
  {
    uint64_t v2 = (unsigned int *)result;
    uint64_t v3 = *(void *)(result + 16);
    if (!*(_DWORD *)(v3 + 108)
      || ((uint64_t v4 = *(uint64_t **)(v3 + 112), *(uint64_t **)(v3 + 120) != v4) ? (v5 = v4 == 0) : (v5 = 1), v5))
    {
      uint64_t v4 = (uint64_t *)(v3 + 408);
    }
    uint64_t v6 = *v4;
    if (*(void *)(v6 + 8)) {
      uint64_t v7 = *(unsigned int *)(v6 + 308);
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void *)(v3 + 112);
    uint64_t v9 = *(void *)(v3 + 120);
    __n128 v10 = (uint64_t *)(v3 + 112);
    if (v8 != v9)
    {
      mach_port_t v11 = *(unsigned int **)(v3 + 264);
      uint64_t v12 = *v11;
      if (v12 != (unint64_t)(*(void *)(v3 + 272) - (void)v11 - 8) >> 4) {
        __assert_rtn("GetNumberBuffers", "CoreAudioBaseTypes.hpp", 1096, "GetAudioBufferList().mNumberBuffers == (mStorage.size() - kHeaderSize) / sizeof(AudioBuffer)");
      }
      uint64_t v13 = v11 + 4;
      uint64_t v14 = v12 + 1;
      do
      {
        if (!--v14)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::out_of_range::out_of_range[abi:ne180100](exception, "accessing a CA::BufferList with an out-of-range index");
          __cxa_throw(exception, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
        }
        if (*(void *)(v8 + 104)) {
          int v15 = (void *)(v8 + 32);
        }
        else {
          int v15 = (void *)(v8 + 16);
        }
        void *v13 = *v15 + *(unsigned int *)(v8 + 48);
        *((_DWORD *)v13 - 2) = *(_DWORD *)(v8 + 84);
        *((_DWORD *)v13 - 1) = *(_DWORD *)(v8 + 80) * v1;
        v13 += 2;
        v8 += 128;
      }
      while (v8 != v9);
    }
    uint64_t v16 = *(void *)(v3 + 288);
    *(void *)(v16 + 16) = *(void *)(v3 + 56) + v7;
    HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)v25, (uint64_t *)(v3 + 112));
    *(_DWORD *)(v16 + 12) = v26 * v1;
    __n128 ClientFormat = HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)v25, v10);
    *(_DWORD *)(v16 + 8) = v27;
    std::string v18 = *(unsigned int **)(*((void *)v2 + 2) + 264);
    std::logic_error v19 = (_OWORD *)(*(uint64_t (**)(void, __n128))(**((void **)v2 + 1) + 120))(*((void *)v2 + 1), ClientFormat);
    uint64_t v20 = (*(uint64_t (**)(void))(**((void **)v2 + 1) + 128))(*((void *)v2 + 1));
    uint64_t v21 = (_OWORD *)(*(uint64_t (**)(void))(**((void **)v2 + 1) + 136))(*((void *)v2 + 1));
    if (*v2 != 1768845428) {
      std::logic_error v19 = (_OWORD *)v20;
    }
    kdebug_trace();
    if (*v2 == 1869968496)
    {
      uint64_t v23 = (uint64_t **)(*(uint64_t (**)(void))(**((void **)v2 + 1) + 144))(*((void *)v2 + 1));
      HALS_IOContextHostedDSP::ProcessStream(**v23, (*v23)[1], *v2 | ((unint64_t)v2[7] << 32), *(_DWORD *)(*((void *)v2 + 2) + 12), v2[6], (unsigned int *)v16, v18, v19, v21);
    }
    else if (*v2 == 1768845428)
    {
      mach_port_t v22 = (uint64_t **)(*(uint64_t (**)(void))(**((void **)v2 + 1) + 144))(*((void *)v2 + 1));
      HALS_IOContextHostedDSP::ProcessStream(**v22, (*v22)[1], *v2 | ((unint64_t)v2[7] << 32), *(_DWORD *)(*((void *)v2 + 2) + 12), v2[6], v18, (unsigned int *)v16, v19, v21);
    }
    return kdebug_trace();
  }
  return result;
}

void sub_1BAD83038(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t HostedDSP_StreamProcessor::ProcessWithEngineAndIOProcessor(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (unsigned int *)(a1 + 24);
  if (*(_DWORD *)(a1 + 24))
  {
    uint64_t v4 = *(void *)(a1 + 16);
    BOOL v5 = *(uint64_t **)(v4 + 112);
    uint64_t v6 = *(uint64_t **)(v4 + 120);
    if (v5 != v6)
    {
      uint64_t v7 = a2;
      uint64_t v8 = 0;
      uint64_t v47 = (unsigned int *)(a1 + 24);
      while (1)
      {
        uint64_t v9 = *v5;
        uint64_t v10 = *(void *)(*v5 + 8);
        if (v10)
        {
          mach_port_t v11 = *(AMCP::Log::Scope_Registry **)(v7 + 24);
          if (!v11) {
            goto LABEL_8;
          }
          mach_port_t v11 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(AMCP::Log::Scope_Registry *, uint64_t *))(*(void *)v11 + 48))(v11, v5);
          if (v11) {
            break;
          }
        }
LABEL_53:
        v5 += 16;
        if (v5 == v6) {
          return v8;
        }
      }
      uint64_t v9 = *v5;
LABEL_8:
      uint64_t v12 = *(unsigned int *)(v9 + 308);
      uint64_t v13 = *(void *)(a1 + 16);
      uint64_t v14 = *(void *)(v13 + 32);
      uint64_t v15 = *(void *)(v13 + 40);
      if (v14) {
        uint64_t v16 = (unsigned __int8 *)(v14 + v12);
      }
      else {
        uint64_t v16 = 0;
      }
      if (v15) {
        std::string v17 = (unsigned __int8 *)(v15 + v12);
      }
      else {
        std::string v17 = 0;
      }
      if (*(_DWORD *)a1 == 1869968496)
      {
        if (v5[13])
        {
          unsigned int v27 = *v2;
          unsigned int v52 = 0;
          unsigned int v53 = v27;
          unsigned int v28 = *(_DWORD *)(v9 + 4 * *(unsigned __int8 *)(v13 + 8) + 672);
          unsigned int v52 = v28;
          uint64_t v29 = 24;
          if ((unint64_t)v16 | (unint64_t)v17) {
            uint64_t v29 = 48;
          }
          unsigned int v30 = *(_DWORD *)(v13 + v29);
          if (*(_DWORD *)(v13 + 108))
          {
            HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)v49, (uint64_t *)(v13 + 112));
            unsigned int v28 = v52;
          }
          else
          {
            long long v31 = *(_OWORD *)(v13 + 384);
            *(_OWORD *)uint64_t v49 = *(_OWORD *)(v13 + 368);
            long long v50 = v31;
            uint64_t v51 = *(void *)(v13 + 400);
          }
          if (v28 * DWORD2(v50) > v30)
          {
            uint64_t v32 = *(void *)(a1 + 16);
            if (*(_DWORD *)(v32 + 108))
            {
              HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)v49, (uint64_t *)(v32 + 112));
            }
            else
            {
              long long v33 = *(_OWORD *)(v32 + 384);
              *(_OWORD *)uint64_t v49 = *(_OWORD *)(v32 + 368);
              long long v50 = v33;
              uint64_t v51 = *(void *)(v32 + 400);
            }
            unsigned int v52 = v30 / DWORD2(v50);
            AMCP::Log::Scope_Registry::get(v11);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v49, "com.apple.coreaudio", "AMCP");
            __int16 v46 = *(caulk::concurrent::messenger **)(*(void *)v49 + 8);
            uint64_t v34 = pthread_self();
            mach_port_t v35 = pthread_mach_thread_np(v34);
            unsigned int v36 = v52;
            uint64_t v37 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
            *(_DWORD *)(v37 + 16) = 0;
            *(unsigned char *)(v37 + 20) = 16;
            *(_DWORD *)(v37 + 24) = v35;
            *(void *)(v37 + 32) = "HostedDSP_StreamProcessor.cpp";
            *(_DWORD *)(v37 + 40) = 248;
            *(_DWORD *)(v37 + 44) = v28;
            *(_DWORD *)(v37 + 48) = v36;
            *(void *)uint64_t v37 = &unk_1F14718D8;
            *(void *)(v37 + 8) = 0;
            caulk::concurrent::messenger::enqueue(v46, (caulk::concurrent::message *)v37);
            if (*(void *)&v49[2]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v49[2]);
            }
          }
          uint64_t v38 = v5[2];
          if (v38) {
            __int16 v39 = (unsigned __int8 *)(v38 + v12);
          }
          else {
            __int16 v39 = 0;
          }
          uint64_t v40 = v5[4];
          if (v40) {
            __int16 v41 = (unsigned __int8 *)(v40 + v12);
          }
          else {
            __int16 v41 = 0;
          }
          HALS_IOProcessor::Process((HALS_IOProcessor *)v5[13], *(double *)(*v5 + 576), v39, &v53, v41, &v52, v16, v17);
          uint64_t v2 = v47;
          uint64_t v7 = a2;
        }
        uint64_t v42 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8));
        uint64_t v43 = v5[2];
        if (v43) {
          uint64_t v44 = v43 + v12;
        }
        else {
          uint64_t v44 = 0;
        }
        uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, void))(*(void *)v10 + 840))(v10, v42, *((unsigned int *)v5 + 24), *v5, v44, *(unsigned int *)(a1 + 24));
      }
      else if (*(_DWORD *)a1 == 1768845428)
      {
        v49[0] = 0;
        v49[0] = *(_DWORD *)(v9 + 4 * *(unsigned __int8 *)(v13 + 8) + 672);
        uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8));
        uint64_t v19 = v5[2];
        uint64_t v20 = v19 ? v19 + v12 : 0;
        uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t, void))(*(void *)v10 + 832))(v10, v18, *((unsigned int *)v5 + 24), *v5, v20, v49[0]);
        uint64_t v21 = (HALS_IOProcessor *)v5[13];
        if (v21)
        {
          if (v5[14]) {
            mach_port_t v22 = (uint64_t *)(*(void *)(a1 + 16) + 56);
          }
          else {
            mach_port_t v22 = v5 + 4;
          }
          uint64_t v23 = *v22;
          if (v23) {
            int v24 = (unsigned __int8 *)(v23 + v12);
          }
          else {
            int v24 = 0;
          }
          uint64_t v25 = v5[2];
          if (v25) {
            int v26 = (unsigned __int8 *)(v25 + v12);
          }
          else {
            int v26 = 0;
          }
          HALS_IOProcessor::Process(v21, *(double *)(*v5 + 512), v24, v2, v26, v49, v16, v17);
        }
      }
      goto LABEL_53;
    }
  }
  return 0;
}

void sub_1BAD834A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t caulk::concurrent::details::rt_message_call<HostedDSP_StreamProcessor::ProcessWithEngineAndIOProcessor(HostedDSP_StreamProcessor::StreamProcessInfo &,std::function<BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)mach_port_t v11 = 2080;
    *(void *)&_OWORD v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d HostedDSP_StreamProcessor::ProcessWithEngineAndIOProcessor clipped amount processed from:%u to:%u", (uint8_t *)&v10, 0x24u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAD83690(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HostedDSP_StreamProcessor::ProcessWithEngineAndIOProcessor(HostedDSP_StreamProcessor::StreamProcessInfo &,std::function<BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_3,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_3>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::target_type()
{
}

uint64_t std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_3,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_3>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN25HostedDSP_StreamProcessor26ProcessInputStreamsWithDSPERNS_17StreamProcessInfoEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_3,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_3>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::operator()(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) == a2)
  {
    if (*(unsigned char *)(a2 + 124)) {
      BOOL v4 = *(_DWORD *)(a2 + 120) == 0;
    }
    else {
      BOOL v4 = 1;
    }
    int v3 = v4;
  }
  else
  {
    int v3 = 0;
  }
  uint64_t v5 = *(void *)(*(void *)a2 + 8);
  BOOL v6 = v5
    && (*(unsigned int (**)(uint64_t))(*(void *)v5 + 680))(v5)
    && *(_DWORD *)(*(void *)(*(void *)a2 + 288) + 96) != 0;
  return v3 | v6;
}

uint64_t std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_3,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_3>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1471AD0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_3,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_3>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F1471AD0;
  result[1] = v3;
  return result;
}

void std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_3,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_3>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::~__func()
{
}

void *std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_2,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_2>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::target_type()
{
}

uint64_t std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_2,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_2>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN25HostedDSP_StreamProcessor26ProcessInputStreamsWithDSPERNS_17StreamProcessInfoEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_2,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_2>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) == a2;
}

uint64_t std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_2,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_2>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1471A50;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_2,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_2>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F1471A50;
  result[1] = v3;
  return result;
}

void std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_2,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_2>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::~__func()
{
}

void *std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_1,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_1>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::target_type()
{
}

uint64_t std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_1,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_1>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN25HostedDSP_StreamProcessor26ProcessInputStreamsWithDSPERNS_17StreamProcessInfoEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_1,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_1>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(*(void *)a2 + 8);
  BOOL v5 = v4
    && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 680))(v4)
    && *(_DWORD *)(*(void *)(*(void *)a2 + 288) + 96) != 0;
  return v3 != a2 && v5;
}

uint64_t std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_1,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_1>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14719C0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_1,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_1>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F14719C0;
  result[1] = v3;
  return result;
}

void std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_1,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_1>,BOOL ()(HALS_IODSPInfo::EngineStreamInfo const&)>::~__func()
{
}

void *std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0>,void ()(AudioBufferList *,AudioBufferList *,unsigned int)>::target_type()
{
}

uint64_t std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0>,void ()(AudioBufferList *,AudioBufferList *,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN25HostedDSP_StreamProcessor26ProcessInputStreamsWithDSPERNS_17StreamProcessInfoEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0>,void ()(AudioBufferList *,AudioBufferList *,unsigned int)>::operator()(uint64_t a1, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4 = *a2;
  BOOL v5 = *a3;
  BOOL v6 = (_OWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 120))(*(void *)(a1 + 16));
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 128))(*(void *)(a1 + 16));
  int v8 = (_OWORD *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 136))(*(void *)(a1 + 16));
  if (*(_DWORD *)(a1 + 8) != 1768845428) {
    BOOL v6 = (_OWORD *)v7;
  }
  uint64_t v9 = (uint64_t **)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 144))(*(void *)(a1 + 16));
  HALS_IOContextHostedDSP::ProcessStream(**v9, (*v9)[1], *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned int *)(a1 + 36) << 32), *(_DWORD *)(*(void *)(a1 + 24) + 12), *(_DWORD *)(a1 + 32), v4, v5, v6, v8);
}

__n128 std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0>,void ()(AudioBufferList *,AudioBufferList *,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1471930;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0>,void ()(AudioBufferList *,AudioBufferList *,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F1471930;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0,std::allocator<HostedDSP_StreamProcessor::ProcessInputStreamsWithDSP(HostedDSP_StreamProcessor::StreamProcessInfo &)::$_0>,void ()(AudioBufferList *,AudioBufferList *,unsigned int)>::~__func()
{
}

void *AMCP::DAL::Synchronized_Mixer::add_emission_handler(uint64_t a1, void *a2)
{
  v10[3] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      uint64_t v9 = v8;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v8);
    }
    else
    {
      uint64_t v9 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v4 = a1 + 120;
  if ((void *)(a1 + 120) != v8)
  {
    BOOL v5 = v9;
    uint64_t v6 = *(void *)(a1 + 144);
    if (v9 == v8)
    {
      if (v6 == v4)
      {
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, v10);
        (*(void (**)(void *))(*v9 + 32))(v9);
        uint64_t v9 = 0;
        (*(void (**)(void, void *))(**(void **)(a1 + 144) + 24))(*(void *)(a1 + 144), v8);
        (*(void (**)(void))(**(void **)(a1 + 144) + 32))(*(void *)(a1 + 144));
        *(void *)(a1 + 144) = 0;
        uint64_t v9 = v8;
        (*(void (**)(void *, uint64_t))(v10[0] + 24))(v10, a1 + 120);
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else
      {
        (*(void (**)(void *, uint64_t))(v8[0] + 24))(v8, a1 + 120);
        (*(void (**)(void *))(*v9 + 32))(v9);
        uint64_t v9 = *(void **)(a1 + 144);
      }
      *(void *)(a1 + 144) = v4;
    }
    else if (v6 == v4)
    {
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 24))(a1 + 120, v8);
      (*(void (**)(void))(**(void **)(a1 + 144) + 32))(*(void *)(a1 + 144));
      *(void *)(a1 + 144) = v9;
      uint64_t v9 = v8;
    }
    else
    {
      uint64_t v9 = *(void **)(a1 + 144);
      *(void *)(a1 + 144) = v5;
    }
  }
  return std::__function::__value_func<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::~__value_func[abi:ne180100](v8);
}

void sub_1BAD83FAC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::DAL::Synchronized_Mixer::remove_source(AMCP::Log::Scope_Registry *a1, _DWORD *a2, int a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v18 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = pthread_self();
      mach_port_t v20 = pthread_mach_thread_np(v19);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v20;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Synchronized_Mixer.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 54;
      LOWORD(v38) = 2080;
      *(void *)((char *)&v38 + 2) = "not (buffer_alignment == Buffer_Alignment::Aligned_For_Output)";
      _os_log_error_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Synchronized_Mixer has a source that's input aligned", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Synchronized_Mixer has a source that's input aligned", (uint64_t)&v23);
    std::logic_error::logic_error(&v24, &v23);
    v24.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v30, &v24);
    uint64_t v32 = 0;
    long long v33 = 0;
    uint64_t v34 = 0;
    int v35 = -1;
    v30.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v31 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
    *((void *)&v38 + 1) = "virtual BOOL AMCP::DAL::Synchronized_Mixer::remove_source(const Source_ID &, Buffer_Alignment)";
    *(void *)&long long v39 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronized_Mixer.cpp";
    DWORD2(v39) = 54;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
    int v26 = &unk_1F148AA90;
    *(_OWORD *)std::string __p = v21;
    uint64_t v28 = v22;
    long long v21 = 0uLL;
    uint64_t v22 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v4 = *((void *)a1 + 13);
  os_unfair_lock_lock((os_unfair_lock_t)v4);
  if (!std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((void *)(v4 + 8), a2))goto LABEL_33; {
  BOOL v5 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((void *)(v4 + 8), a2);
  }
  if (!v5) {
    goto LABEL_40;
  }
  int v6 = *((_DWORD *)v5 + 28);
  BOOL v7 = __OFSUB__(v6--, 1);
  *((_DWORD *)v5 + 28) = v6;
  if (!((v6 < 0) ^ v7 | (v6 == 0))) {
    goto LABEL_33;
  }
  int v8 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((void *)(v4 + 8), a2);
  if (!v8) {
LABEL_40:
  }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  *((unsigned char *)v8 + 200) = 1;
  uint64_t v9 = *(uint64_t **)(v4 + 24);
  if (v9)
  {
    char v10 = 0;
    while (1)
    {
      AMCP::DAL::Synchronizer_Source::get_source_id((AMCP::DAL::Synchronizer_Source *)buf, (uint64_t)(v9 + 8));
      BOOL has_pending_range = AMCP::DAL::Synchronizer::_has_pending_range(v4, buf);
      BOOL v12 = has_pending_range;
      if (SBYTE7(v38) < 0)
      {
        operator delete(*(void **)&buf[8]);
        if (v12)
        {
LABEL_13:
          *(_OWORD *)std::string buf = *(_OWORD *)(v9 + 15);
          uint64_t v13 = v9[18];
          *(void *)&buf[16] = v9[17];
          *(void *)&long long v38 = v13;
          __int16 v14 = (std::__shared_weak_count *)v9[19];
          *((void *)&v38 + 1) = v14;
          if (v14) {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v39 = *((_OWORD *)v9 + 10);
          uint64_t v15 = v9[23];
          uint64_t v40 = v9[22];
          __int16 v16 = (std::__shared_weak_count *)v9[24];
          uint64_t v41 = v15;
          uint64_t v42 = v16;
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          AMCP::DAL::Synchronizer::_get_latest_common_pending_time((AMCP::DAL::Synchronizer *)&v26, v4);
          AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v30, (const AMCP::DAL::DAL_Time *)(v4 + 104), (const AMCP::DAL::DAL_Time *)&v26);
          if (v29) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v29);
          }
          if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v30, (AMCP::DAL::DAL_Time *)&v34))
          {
            AMCP::DAL::Synchronizer_Source::get_source_id((AMCP::DAL::Synchronizer_Source *)&v26, (uint64_t)(v9 + 8));
            AMCP::DAL::Synchronizer::_emit((void *)v4, (uint64_t)&v26, &v30);
            if (SHIBYTE(v28) < 0) {
              operator delete(__p[0]);
            }
            char v10 = 1;
          }
          if (v36) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v36);
          }
          if (v33) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v33);
          }
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
        }
      }
      else if (has_pending_range)
      {
        goto LABEL_13;
      }
      uint64_t v9 = (uint64_t *)*v9;
      if (!v9) {
        goto LABEL_34;
      }
    }
  }
LABEL_33:
  char v10 = 0;
LABEL_34:
  AMCP::DAL::Synchronizer::_sweep_and_remove_sources((AMCP::DAL::Synchronizer *)v4);
  os_unfair_lock_unlock((os_unfair_lock_t)v4);
  return v10 & 1;
}

void sub_1BAD84408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,char a34)
{
  os_unfair_lock_unlock(v34);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Synchronized_Mixer::add_source(AMCP::Log::Scope_Registry *a1, unsigned int *a2, int a3)
{
  uint64_t v3 = (uint64_t)&v81;
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v62 = **(NSObject ***)buf;
    if ((void)__p) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p);
    }
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      uint8x8_t v63 = pthread_self();
      mach_port_t v64 = pthread_mach_thread_np(v63);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v64;
      LOWORD(__p) = 2080;
      *(void *)((char *)&__p + 2) = "Synchronized_Mixer.cpp";
      WORD5(__p) = 1024;
      HIDWORD(__p) = 48;
      LOWORD(v90) = 2080;
      *(void *)((char *)&v90 + 2) = "not (buffer_alignment == Buffer_Alignment::Aligned_For_Output)";
      _os_log_error_impl(&dword_1BAA78000, v62, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Synchronized_Mixer has a source that's input aligned", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v75);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Synchronized_Mixer has a source that's input aligned", (uint64_t)&v71);
    std::logic_error::logic_error((std::logic_error *)&v79, &v71);
    v79.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error((std::logic_error *)&v118, (const std::logic_error *)&v79);
    long long v120 = 0uLL;
    uint64_t v121 = 0;
    int v122 = -1;
    std::logic_error v118 = (NSObject **)&unk_1F1489CC8;
    v119.__imp_.__imp_ = (const char *)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v118);
    *((void *)&v90 + 1) = "virtual void AMCP::DAL::Synchronized_Mixer::add_source(const Source_ID &, Buffer_Alignment)";
    uint64_t v91 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronized_Mixer.cpp";
    int v92 = 48;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v77);
    std::logic_error v82 = *(std::logic_error *)v77;
    unint64_t v81 = &unk_1F148AA90;
    uint64_t v83 = *(void *)&v77[16];
    memset(v77, 0, sizeof(v77));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v5 = *((void *)a1 + 13);
  os_unfair_lock_lock((os_unfair_lock_t)v5);
  int v6 = (void **)(v5 + 8);
  BOOL v7 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((void *)(v5 + 8), a2);
  if (std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((void *)(v5 + 8), a2))
  {
    if (*((unsigned char *)v7 + 200)) {
      *((unsigned char *)v7 + 200) = 0;
    }
    goto LABEL_124;
  }
  int data = *a2;
  LODWORD(v71.__r_.__value_.__l.__data_) = *a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v71.__r_.__value_.__r.__words[1], *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
    int data = (int)v71.__r_.__value_.__l.__data_;
  }
  else
  {
    *(_OWORD *)&v71.__r_.__value_.__r.__words[1] = *(_OWORD *)(a2 + 2);
    uint64_t v72 = *((void *)a2 + 3);
  }
  uint64_t v73 = *((void *)a2 + 4);
  unsigned int v74 = a2[10];
  *(_DWORD *)std::string buf = data;
  int v9 = SHIBYTE(v72);
  if (SHIBYTE(v72) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__p, (const std::string::value_type *)v71.__r_.__value_.__l.__size_, v71.__r_.__value_.__r.__words[2]);
  }
  else
  {
    long long __p = *(_OWORD *)&v71.__r_.__value_.__r.__words[1];
    *(void *)&long long v90 = v72;
  }
  char v10 = (long long *)(v5 + 48);
  *((void *)&v90 + 1) = v73;
  LODWORD(v91) = v74;
  int v92 = 0;
  mach_port_t v11 = (AMCP::Log::Scope_Registry *)AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v93, (uint64_t *)(v5 + 48));
  char v101 = 0;
  long long v12 = *(_OWORD *)(v5 + 48);
  uint64_t v13 = *(void *)(v5 + 56);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  LODWORD(v102) = 1;
  *((void *)&v102 + 1) = 0;
  std::string::size_type v103 = 0;
  long long v104 = v12;
  char v105 = 0;
  LOBYTE(v106) = 0;
  char v114 = 0;
  long long v14 = *v10;
  uint64_t v15 = *(void *)(v5 + 56);
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  LODWORD(v115) = 1;
  std::string::size_type v116 = 0;
  *((void *)&v115 + 1) = 0;
  long long v117 = v14;
  if (!*(void *)v10)
  {
    AMCP::Log::Scope_Registry::get(v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v118, "com.apple.coreaudio", "AMCP");
    uint8x8_t v65 = *v118;
    if (v119.__vftable) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v119.__vftable);
    }
    if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
    {
      uint64_t v66 = pthread_self();
      mach_port_t v67 = pthread_mach_thread_np(v66);
      LODWORD(v118) = 67109890;
      HIDWORD(v118) = v67;
      LOWORD(v119.__vftable) = 2080;
      *(std::logic_error_vtbl **)((char *)&v119.__vftable + 2) = (std::logic_error_vtbl *)"Synchronizer.cpp";
      WORD1(v119.__imp_.__imp_) = 1024;
      HIDWORD(v119.__imp_.__imp_) = 27;
      LOWORD(v120) = 2080;
      *(void *)((char *)&v120 + 2) = "not (timebase)";
      _os_log_error_impl(&dword_1BAA78000, v65, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v118, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v87);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v79);
    std::logic_error::logic_error(&v80, &v79);
    v80.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v81, &v80);
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    int v86 = -1;
    unint64_t v81 = &unk_1F1489CC8;
    v82.__imp_.__imp_ = (const char *)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v118, (uint64_t)&v81);
    *((void *)&v120 + 1) = "AMCP::DAL::Synchronizer_Source::Synchronizer_Source(Source_ID, const Timebase_Ref &)";
    uint64_t v121 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
    int v122 = 27;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v75);
    *(void *)unint64_t v77 = &unk_1F148AA90;
    *(_OWORD *)&v77[8] = v75;
    uint64_t v78 = v76;
    long long v75 = 0uLL;
    uint64_t v76 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  double v69 = a2 + 2;
  uint64_t v70 = v5;
  if (v9 < 0) {
    operator delete((void *)v71.__r_.__value_.__l.__size_);
  }
  uint64_t v16 = *a2;
  unint64_t v17 = std::hash<AMCP::Terminal_Identifier>::operator()((uint64_t)v69);
  unint64_t v18 = (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v17) ^ ((0xC6A4A7935BD1E995 * v17) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v16) ^ ((0xC6A4A7935BD1E995 * v16) >> 47)) + 3864292196u);
  unint64_t v19 = 3864292196u - 0x395B586CA42E166BLL * v18;
  uint64_t v20 = v70;
  unint64_t v21 = *(void *)(v70 + 16);
  if (!v21) {
    goto LABEL_37;
  }
  uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
  v22.i16[0] = vaddlv_u8(v22);
  unint64_t v23 = v22.u32[0];
  if (v22.u32[0] > 1uLL)
  {
    uint64_t v3 = 3864292196u - 0x395B586CA42E166BLL * v18;
    if (v19 >= v21) {
      uint64_t v3 = v19 % v21;
    }
  }
  else
  {
    uint64_t v3 = v19 & (v21 - 1);
  }
  std::logic_error v24 = (void *)*((void *)*v6 + v3);
  if (!v24) {
    goto LABEL_37;
  }
  unint64_t v25 = v19;
  int v26 = (void *)*v24;
  if (!*v24) {
    goto LABEL_36;
  }
  do
  {
    unint64_t v27 = v26[1];
    if (v27 == v25)
    {
      if (AMCP::DAL::Source_ID::operator==((uint64_t)(v26 + 2), a2)) {
        goto LABEL_114;
      }
      goto LABEL_34;
    }
    if (v23 > 1)
    {
      if (v27 >= v21) {
        v27 %= v21;
      }
    }
    else
    {
      v27 &= v21 - 1;
    }
    if (v27 != v3) {
      break;
    }
LABEL_34:
    int v26 = (void *)*v26;
  }
  while (v26);
  uint64_t v20 = v70;
LABEL_36:
  unint64_t v19 = v25;
LABEL_37:
  uint64_t v28 = (std::string *)operator new(0x180uLL);
  uint64_t v29 = v28;
  std::logic_error v118 = (NSObject **)v28;
  v119.__vftable = (std::logic_error_vtbl *)(v20 + 24);
  unint64_t v68 = (NSObject **)(v20 + 24);
  LOBYTE(v119.__imp_.__imp_) = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  v28->__r_.__value_.__l.__size_ = v19;
  LODWORD(v28->__r_.__value_.__r.__words[2]) = v16;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v28 + 1, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v28[1].__r_.__value_.__l.__data_ = *v69;
    v28[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 3);
  }
  v29[2].__r_.__value_.__r.__words[0] = *((void *)a2 + 4);
  LODWORD(v29[2].__r_.__value_.__r.__words[1]) = a2[10];
  LODWORD(v29[2].__r_.__value_.__r.__words[2]) = *(_DWORD *)buf;
  std::logic_error v30 = v29 + 3;
  if (SBYTE7(v90) < 0)
  {
    std::string::__init_copy_ctor_external(v30, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
  }
  else
  {
    *(_OWORD *)&v30->__r_.__value_.__l.__data_ = __p;
    v29[3].__r_.__value_.__r.__words[2] = v90;
  }
  v29[4].__r_.__value_.__r.__words[0] = *((void *)&v90 + 1);
  LODWORD(v29[4].__r_.__value_.__r.__words[1]) = v91;
  LODWORD(v29[4].__r_.__value_.__r.__words[2]) = v92;
  *(_OWORD *)&v29[5].__r_.__value_.__l.__data_ = v93;
  std::string::size_type v32 = v95;
  long long v31 = v96;
  v29[5].__r_.__value_.__r.__words[2] = v94;
  v29[6].__r_.__value_.__r.__words[0] = v32;
  v29[6].__r_.__value_.__l.__size_ = (std::string::size_type)v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)&v29[6].__r_.__value_.__r.__words[2] = v97;
  std::string::size_type v33 = v99;
  v29[7].__r_.__value_.__l.__size_ = v98;
  v29[7].__r_.__value_.__r.__words[2] = v33;
  uint64_t v34 = v100;
  v29[8].__r_.__value_.__r.__words[0] = (std::string::size_type)v100;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v29[8].__r_.__value_.__s.__data_[8] = v101;
  *(_OWORD *)&v29[8].__r_.__value_.__r.__words[2] = v102;
  long long v35 = v104;
  v29[9].__r_.__value_.__l.__size_ = v103;
  *(_OWORD *)&v29[9].__r_.__value_.__r.__words[2] = v35;
  if (*((void *)&v35 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v35 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v29[10].__r_.__value_.__s.__data_[8] = v105;
  v29[10].__r_.__value_.__s.__data_[16] = 0;
  v29[14].__r_.__value_.__s.__data_[0] = 0;
  if (v114)
  {
    *(_OWORD *)&v29[10].__r_.__value_.__r.__words[2] = v106;
    v29[11].__r_.__value_.__l.__size_ = v107;
    std::string::size_type v36 = v109;
    v29[11].__r_.__value_.__r.__words[2] = v108;
    v29[12].__r_.__value_.__r.__words[0] = v36;
    if (v36) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)&v29[12].__r_.__value_.__r.__words[1] = v110;
    std::string::size_type v37 = v112;
    v29[13].__r_.__value_.__r.__words[0] = v111;
    v29[13].__r_.__value_.__l.__size_ = v37;
    std::string::size_type v38 = v113;
    v29[13].__r_.__value_.__r.__words[2] = v113;
    if (v38) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
    }
    v29[14].__r_.__value_.__s.__data_[0] = 1;
  }
  *(_OWORD *)&v29[14].__r_.__value_.__r.__words[1] = v115;
  long long v39 = v117;
  v29[15].__r_.__value_.__r.__words[0] = v116;
  *(_OWORD *)&v29[15].__r_.__value_.__r.__words[1] = v39;
  if (*((void *)&v39 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v39 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  LOBYTE(v119.__imp_.__imp_) = 1;
  float v40 = (float)(unint64_t)(*(void *)(v20 + 32) + 1);
  float v41 = *(float *)(v20 + 40);
  if (!v21 || (float)(v41 * (float)v21) < v40)
  {
    BOOL v42 = v21 < 3 || (v21 & (v21 - 1)) != 0;
    unint64_t v43 = v42 | (2 * v21);
    unint64_t v44 = vcvtps_u32_f32(v40 / v41);
    if (v43 <= v44) {
      int8x8_t prime = (int8x8_t)v44;
    }
    else {
      int8x8_t prime = (int8x8_t)v43;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v21 = *(void *)(v20 + 16);
    if (*(void *)&prime <= v21)
    {
      if (*(void *)&prime < v21)
      {
        unint64_t v52 = vcvtps_u32_f32((float)*(unint64_t *)(v20 + 32) / *(float *)(v20 + 40));
        if (v21 < 3 || (uint8x8_t v53 = (uint8x8_t)vcnt_s8((int8x8_t)v21), v53.i16[0] = vaddlv_u8(v53), v53.u32[0] > 1uLL))
        {
          unint64_t v52 = std::__next_prime(v52);
        }
        else
        {
          uint64_t v54 = 1 << -(char)__clz(v52 - 1);
          if (v52 >= 2) {
            unint64_t v52 = v54;
          }
        }
        if (*(void *)&prime <= v52) {
          int8x8_t prime = (int8x8_t)v52;
        }
        if (*(void *)&prime >= v21)
        {
          unint64_t v21 = *(void *)(v20 + 16);
        }
        else
        {
          if (prime) {
            goto LABEL_70;
          }
          double v61 = *v6;
          *int v6 = 0;
          if (v61) {
            operator delete(v61);
          }
          unint64_t v21 = 0;
          *(void *)(v20 + 16) = 0;
        }
      }
    }
    else
    {
LABEL_70:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      __int16 v46 = operator new(8 * *(void *)&prime);
      uint64_t v47 = *v6;
      *int v6 = v46;
      if (v47) {
        operator delete(v47);
      }
      uint64_t v48 = 0;
      *(int8x8_t *)(v20 + 16) = prime;
      do
        *((void *)*v6 + v48++) = 0;
      while (*(void *)&prime != v48);
      uint64_t v49 = *v68;
      if (*v68)
      {
        Class isa = v49[1].isa;
        uint8x8_t v51 = (uint8x8_t)vcnt_s8(prime);
        v51.i16[0] = vaddlv_u8(v51);
        if (v51.u32[0] > 1uLL)
        {
          if ((unint64_t)isa >= *(void *)&prime) {
            Class isa = (Class)((unint64_t)isa % *(void *)&prime);
          }
        }
        else
        {
          Class isa = (Class)((unint64_t)isa & (*(void *)&prime - 1));
        }
        *((void *)*v6 + (void)isa) = v68;
        unint64_t v55 = v49->isa;
        if (v49->isa)
        {
          do
          {
            unint64_t v56 = (unint64_t)v55[1].isa;
            if (v51.u32[0] > 1uLL)
            {
              if (v56 >= *(void *)&prime) {
                v56 %= *(void *)&prime;
              }
            }
            else
            {
              v56 &= *(void *)&prime - 1;
            }
            if ((Class)v56 != isa)
            {
              if (!*((void *)*v6 + v56))
              {
                *((void *)*v6 + v56) = v49;
                goto LABEL_95;
              }
              v49->Class isa = v55->isa;
              v55->Class isa = (*((NSObject **)*v6 + v56))->isa;
              **((void **)*v6 + v56) = v55;
              unint64_t v55 = v49;
            }
            unint64_t v56 = (unint64_t)isa;
LABEL_95:
            uint64_t v49 = v55;
            unint64_t v55 = v55->isa;
            Class isa = (Class)v56;
          }
          while (v55);
        }
      }
      unint64_t v21 = (unint64_t)prime;
    }
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v19 >= v21) {
        uint64_t v3 = v19 % v21;
      }
      else {
        uint64_t v3 = v19;
      }
    }
    else
    {
      uint64_t v3 = (v21 - 1) & v19;
    }
  }
  char v57 = (NSObject **)*((void *)*v6 + v3);
  uint64_t v58 = v118;
  if (v57)
  {
    *std::logic_error v118 = *v57;
  }
  else
  {
    *std::logic_error v118 = *v68;
    *unint64_t v68 = v58;
    *((void *)*v6 + v3) = v68;
    if (!*v58) {
      goto LABEL_113;
    }
    unint64_t v59 = (unint64_t)(*v58)[1].isa;
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v59 >= v21) {
        v59 %= v21;
      }
    }
    else
    {
      v59 &= v21 - 1;
    }
    char v57 = (NSObject **)((char *)*v6 + 8 * v59);
  }
  *char v57 = v58;
LABEL_113:
  std::logic_error v118 = 0;
  ++*(void *)(v20 + 32);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,void *>>>>::reset[abi:ne180100]((uint64_t)&v118);
LABEL_114:
  if (*((void *)&v117 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v117 + 1));
  }
  std::__optional_destruct_base<AMCP::DAL::DAL_Time_Range,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v106);
  if (*((void *)&v104 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v104 + 1));
  }
  if (v100) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v100);
  }
  uint64_t v5 = v70;
  if (v96) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v96);
  }
  if (SBYTE7(v90) < 0) {
    operator delete((void *)__p);
  }
LABEL_124:
  uint64_t v60 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>(v6, a2);
  if (!v60) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  ++*((_DWORD *)v60 + 28);
  os_unfair_lock_unlock((os_unfair_lock_t)v5);
}

void sub_1BAD851B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (STACK[0x248]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x248]);
  }
  std::__optional_destruct_base<AMCP::DAL::DAL_Time_Range,false>::~__optional_destruct_base[abi:ne180100](a13);
  if (a68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a68);
  }
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range(v69);
  if (a49 < 0) {
    operator delete(__p);
  }
  if (v70 < 0) {
    operator delete(a16);
  }
  os_unfair_lock_unlock(v68);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Synchronized_Mixer::get_direct_write_ranges(os_unfair_lock_s *this@<X0>, const AMCP::DAL::DAL_Time_Range *a2@<X1>, uint64_t *a3@<X8>)
{
  int v6 = this + 38;
  os_unfair_lock_lock(this + 38);
  AMCP::DAL::Mixing_Ring_Buffer::get_direct_write_ranges((AMCP::DAL::Mixing_Ring_Buffer *)this, a2, a3);

  os_unfair_lock_unlock(v6);
}

void sub_1BAD853D8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Synchronized_Mixer::commit_direct_write(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  int v6 = (os_unfair_lock_s *)(a1 + 152);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 152));
  AMCP::DAL::Ring_Buffer_Base::commit_direct_write(a1, v7, a3);
  os_unfair_lock_unlock(v6);
  uint64_t v8 = *(void *)(a1 + 104);

  AMCP::DAL::Synchronizer::receive_data(v8, a2, a3 + 16);
}

void sub_1BAD85458(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Synchronized_Mixer::reset_time(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(a1 + 104);
  os_unfair_lock_lock((os_unfair_lock_t)v4);
  if (std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((void *)(v4 + 8), a2))
  {
    uint64_t v5 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((void *)(v4 + 8), a2);
    if (!v5) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    int v6 = v5;
    long long v7 = *((_OWORD *)v5 + 23);
    uint64_t v8 = (std::__shared_weak_count *)v5[47];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      *((void *)&v26 + 1) = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      *((void *)&v26 + 1) = 0;
    }
    *(void *)&long long v26 = v7;
    int v27 = 2;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    int v9 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    long long v30 = v26;
    long long v26 = 0uLL;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v10 = v9;
    int v22 = 2;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    long long v21 = v7;
    long long v25 = v7;
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v31, (const AMCP::DAL::DAL_Time *)&v27, (const AMCP::DAL::DAL_Time *)&v22);
    *(_OWORD *)(v6 + 15) = v31;
    v6[17] = v32;
    long long v11 = v33;
    long long v33 = 0uLL;
    long long v12 = (std::__shared_weak_count *)v6[19];
    *((_OWORD *)v6 + 9) = v11;
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    *((_OWORD *)v6 + 10) = v34;
    v6[22] = v35;
    long long v13 = v36;
    long long v36 = 0uLL;
    long long v14 = (std::__shared_weak_count *)v6[24];
    *(_OWORD *)(v6 + 23) = v13;
    if (v14)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      if (*((void *)&v36 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
      }
    }
    if (*((void *)&v33 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v33 + 1));
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (*((void *)&v26 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
    }
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v6 + 86) = 2;
    *((_DWORD *)v6 + 91) = 0;
    *(void *)((char *)v6 + 356) = 0;
    *(void *)((char *)v6 + 348) = 0;
    uint64_t v15 = (std::__shared_weak_count *)v6[47];
    *((_OWORD *)v6 + 23) = v21;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  *(void *)&long long v16 = *(void *)(v4 + 48);
  unint64_t v17 = *(std::__shared_weak_count **)(v4 + 56);
  *(void *)&long long v18 = v16;
  *((void *)&v18 + 1) = v17;
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v19 = *(std::__shared_weak_count **)(v4 + 56);
    LODWORD(v31) = 2;
    *((void *)&v31 + 1) = 0;
    uint64_t v32 = 0;
    long long v33 = v18;
    *(void *)&long long v16 = *(void *)(v4 + 48);
    *((void *)&v16 + 1) = v19;
    BOOL v20 = v19 == 0;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    unint64_t v19 = 0;
    LODWORD(v31) = 2;
    *((void *)&v31 + 1) = 0;
    uint64_t v32 = 0;
    long long v33 = (unint64_t)v16;
    BOOL v20 = 1;
    *((void *)&v16 + 1) = 0;
  }
  int v27 = 2;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  long long v30 = v16;
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::set(v4 + 64, (uint64_t)&v31, (uint64_t)&v27);
  if (!v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)v4);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 152));
  AMCP::DAL::Ring_Buffer_Base::reset_time(a1);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 152));
}

void sub_1BAD85724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  os_unfair_lock_unlock(v18);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Synchronized_Mixer::set_nominal_buffer_size(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 104);
  os_unfair_lock_lock((os_unfair_lock_t)v5);
  if (std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((void *)(v5 + 8), a2))
  {
    int v6 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((void *)(v5 + 8), a2);
    if (!v6) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    *((_DWORD *)v6 + 52) = *(_DWORD *)a3;
    v6[27] = *(void *)(a3 + 8);
    uint64_t v7 = *(void *)(a3 + 24);
    v6[28] = *(void *)(a3 + 16);
    uint64_t v8 = *(void *)(a3 + 32);
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    int v9 = (std::__shared_weak_count *)v6[30];
    v6[29] = v7;
    v6[30] = v8;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)v5);
}

void sub_1BAD85830(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(uint64_t a1, int *a2, void *a3)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  uint64_t v49 = a1;
  int v50 = *a2;
  if (*((char *)a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&v51, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else {
    std::string v51 = *(std::string *)(a2 + 2);
  }
  uint64_t v52 = *((void *)a2 + 4);
  int v53 = a2[10];
  long long v54 = *(_OWORD *)a3;
  uint64_t v6 = a3[3];
  uint64_t v55 = a3[2];
  uint64_t v56 = v6;
  uint64_t v7 = (std::__shared_weak_count *)a3[4];
  char v57 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v58 = *(_OWORD *)(a3 + 5);
  uint64_t v8 = a3[8];
  uint64_t v59 = a3[7];
  uint64_t v60 = v8;
  int v9 = (std::__shared_weak_count *)a3[9];
  double v61 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(void *)(a1 + 104);
  uint64_t v36 = v49;
  int v37 = v50;
  int v11 = SHIBYTE(v51.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v51;
  }
  uint64_t v39 = v52;
  int v40 = v53;
  long long v41 = v54;
  uint64_t v42 = v55;
  uint64_t v43 = v6;
  unint64_t v44 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v45 = v58;
  uint64_t v46 = v59;
  uint64_t v47 = v8;
  uint64_t v48 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v35 = v11;
  unint64_t v77 = 0;
  long long v12 = (char *)operator new(0x90uLL);
  *(void *)long long v12 = &unk_1F1471CC0;
  *((void *)v12 + 1) = v36;
  *((_DWORD *)v12 + 4) = v37;
  long long v13 = (std::string *)(v12 + 24);
  int v14 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v12 + 5) = *((void *)&__p.__r_.__value_.__l + 2);
  }
  *((void *)v12 + 6) = v39;
  *((_DWORD *)v12 + 14) = v40;
  *((_OWORD *)v12 + 4) = v41;
  *((void *)v12 + 10) = v42;
  *((void *)v12 + 11) = v6;
  *((void *)v12 + 12) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(v12 + 104) = v45;
  *((void *)v12 + 15) = v46;
  *((void *)v12 + 16) = v8;
  *((void *)v12 + 17) = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v77 = v12;
  os_unfair_lock_lock((os_unfair_lock_t)v10);
  if (!std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((void *)(v10 + 8), a2))
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v27 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = pthread_self();
      mach_port_t v29 = pthread_mach_thread_np(v28);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v29;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Synchronizer.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 275;
      LOWORD(v79) = 2080;
      *(void *)((char *)&v79 + 2) = "not (_is_contributing(source_id))";
      _os_log_error_impl(&dword_1BAA78000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s set_anchor_time_and_nominal_buffer_size invalid source!", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v75);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"set_anchor_time_and_nominal_buffer_size invalid source!", (uint64_t)&v67);
    std::logic_error::logic_error(&v68, &v67);
    v68.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v69, &v68);
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    int v74 = -1;
    v69.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v70 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v69);
    *((void *)&v79 + 1) = "void AMCP::DAL::Synchronizer::set_anchor_time_and_nominal_buffer_size(const Source_ID &, con"
                            "st DAL_Time_Range &, std::function<void ()>)";
    *(void *)&long long v80 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
    DWORD2(v80) = 275;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v62);
    long long v65 = v62;
    uint64_t v30 = v63;
    uint64_t v63 = 0;
    mach_port_t v64 = &unk_1F148AA90;
    uint64_t v66 = v30;
    long long v62 = 0uLL;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (!AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(v10 + 64), (AMCP::DAL::DAL_Time *)(v10 + 104)))
  {
    if (round(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v10 + 64))) != 0.0
      && !AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a3, (AMCP::DAL::DAL_Time *)(v10 + 64)))
    {
      goto LABEL_31;
    }
LABEL_30:
    caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::set(v10 + 64, (uint64_t)a3, (uint64_t)a3);
    goto LABEL_31;
  }
  BOOL v15 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a3, (AMCP::DAL::DAL_Time *)(v10 + 104));
  if (v15)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v15);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v31 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = pthread_self();
      mach_port_t v33 = pthread_mach_thread_np(v32);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v33;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Synchronizer.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 296;
      LOWORD(v79) = 2080;
      *(void *)((char *)&v79 + 2) = "not (range.start() >= m_emitted_time_range.end())";
      _os_log_error_impl(&dword_1BAA78000, v31, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Synchronizer::anchoring to a past time", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v75);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Synchronizer::anchoring to a past time", (uint64_t)&v67);
    std::logic_error::logic_error(&v68, &v67);
    v68.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v69, &v68);
    uint64_t v71 = 0;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    int v74 = -1;
    v69.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v70 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v69);
    *((void *)&v79 + 1) = "void AMCP::DAL::Synchronizer::set_anchor_time_and_nominal_buffer_size(const Source_ID &, con"
                            "st DAL_Time_Range &, std::function<void ()>)";
    *(void *)&long long v80 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
    DWORD2(v80) = 296;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v62);
    long long v65 = v62;
    uint64_t v34 = v63;
    uint64_t v63 = 0;
    mach_port_t v64 = &unk_1F148AA90;
    uint64_t v66 = v34;
    long long v62 = 0uLL;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (*(void *)(v10 + 32) == 1 || *(unsigned char *)(v10 + 168)) {
    goto LABEL_30;
  }
LABEL_31:
  AMCP::DAL::Synchronizer::_check_sources_for_overloads(v10);
  long long v16 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((void *)(v10 + 8), a2);
  if (!v16) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  unint64_t v17 = v16;
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)buf, (const AMCP::DAL::DAL_Time *)a3, (const AMCP::DAL::DAL_Time *)a3);
  *(_OWORD *)(v17 + 15) = *(_OWORD *)buf;
  v17[17] = *(void *)&buf[16];
  long long v18 = v79;
  long long v79 = 0uLL;
  unint64_t v19 = (std::__shared_weak_count *)v17[19];
  *((_OWORD *)v17 + 9) = v18;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  *((_OWORD *)v17 + 10) = v80;
  v17[22] = v81;
  long long v20 = v82;
  long long v82 = 0uLL;
  long long v21 = (std::__shared_weak_count *)v17[24];
  *(_OWORD *)(v17 + 23) = v20;
  if (v21)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    if (*((void *)&v82 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v82 + 1));
    }
  }
  if (*((void *)&v79 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v79 + 1));
  }
  AMCP::DAL::DAL_Time::operator-((uint64_t)buf, (AMCP::DAL::DAL_Time *)(a3 + 5), (AMCP::DAL::DAL_Time *)a3);
  *((_DWORD *)v17 + 52) = *(_DWORD *)buf;
  *(_OWORD *)(v17 + 27) = *(_OWORD *)&buf[8];
  long long v22 = v79;
  if (*((void *)&v79 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v79 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v23 = (std::__shared_weak_count *)v17[30];
  *(_OWORD *)(v17 + 29) = v22;
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (*((void *)&v22 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
  }
  *((_DWORD *)v17 + 86) = *(_DWORD *)a3;
  v17[44] = a3[1];
  v17[45] = a3[2];
  uint64_t v25 = a3[3];
  uint64_t v24 = a3[4];
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  long long v26 = (std::__shared_weak_count *)v17[47];
  v17[46] = v25;
  v17[47] = v24;
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  std::__optional_destruct_base<AMCP::DAL::DAL_Time_Range,false>::reset[abi:ne180100]((uint64_t)(v17 + 32));
  *((unsigned char *)v17 + 248) = 0;
  if (*(void *)(v10 + 32) == 1 || *(unsigned char *)(v10 + 168))
  {
    *(unsigned char *)(v10 + 168) = 0;
    if (v77) {
      (*(void (**)(char *))(*(void *)v77 + 48))(v77);
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)v10);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v76);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v14 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v35 < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
}

void sub_1BAD86160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58,uint64_t a59,char a60)
{
  os_unfair_lock_unlock(v60);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(v61 - 224));
  AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0::~$_0((uint64_t)&a11);
  AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0::~$_0((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 88);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void *std::__function::__func<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3DAL18Synchronized_Mixer39set_anchor_time_and_nominal_buffer_sizeERKNS0_9Source_IDERKNS0_14DAL_Time_RangeE16Buffer_AlignmentE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 8);
  os_unfair_lock_lock(v2 + 38);
  AMCP::DAL::Ring_Buffer_Base::set_anchor_time_and_nominal_buffer_size((uint64_t)v2, v3, a1 + 64);

  os_unfair_lock_unlock(v2 + 38);
}

void std::__function::__func<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 88);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*(char *)(a1 + 39) < 0)
  {
    uint64_t v4 = *(void **)(a1 + 16);
    operator delete(v4);
  }
}

void std::__function::__func<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1471CC0;
  return std::__compressed_pair_elem<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = (std::string *)(a1 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 32);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 40) = v6;
  long long v7 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  long long v9 = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v9;
  uint64_t v10 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void *std::__function::__func<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x90uLL);
  void *v2 = &unk_1F1471CC0;
  std::__compressed_pair_elem<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BAD8652C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1471CC0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 136);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 96);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&,Buffer_Alignment)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1471CC0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 136);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 96);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void AMCP::DAL::Synchronized_Mixer::reuse(AMCP::DAL::Synchronized_Mixer *this)
{
  uint64_t v1 = *((void *)this + 13);
  os_unfair_lock_lock((os_unfair_lock_t)v1);
  for (uint64_t i = *(void **)(v1 + 24); i; uint64_t i = (void *)*i)
    std::__optional_destruct_base<AMCP::DAL::DAL_Time_Range,false>::reset[abi:ne180100]((uint64_t)(i + 32));

  os_unfair_lock_unlock((os_unfair_lock_t)v1);
}

uint64_t AMCP::DAL::Synchronized_Mixer::get_allowed_read_range(AMCP::DAL::Synchronized_Mixer *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 64))();
}

uint64_t AMCP::DAL::Ring_Buffer_Base::get_time_range@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)(this + 8);
  uint64_t v2 = *(void *)(this + 32);
  *(void *)(a2 + 16) = *(void *)(this + 24);
  *(void *)(a2 + 24) = v2;
  uint64_t v3 = *(void *)(this + 40);
  *(void *)(a2 + 32) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(this + 48);
  uint64_t v4 = *(void *)(this + 72);
  *(void *)(a2 + 56) = *(void *)(this + 64);
  *(void *)(a2 + 64) = v4;
  uint64_t v5 = *(void *)(this + 80);
  *(void *)(a2 + 72) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void AMCP::DAL::Synchronized_Mixer::receive_data(uint64_t a1, unsigned int *a2, void *a3)
{
  uint64_t v6 = (os_unfair_lock_s *)(a1 + 152);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 152));
  AMCP::DAL::Mixing_Ring_Buffer::receive_data((void *)a1, v7, a3);
  os_unfair_lock_unlock(v6);
  uint64_t v8 = *(void *)(a1 + 104);

  AMCP::DAL::Synchronizer::receive_data(v8, a2, (uint64_t)a3);
}

void sub_1BAD86768(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Synchronized_Mixer::~Synchronized_Mixer(AMCP::DAL::Synchronized_Mixer *this)
{
  AMCP::DAL::Synchronized_Mixer::~Synchronized_Mixer(this);

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;

  *(void *)this = &unk_1F1471B50;
  std::__function::__value_func<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::~__value_func[abi:ne180100]((void *)this + 15);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)this = &unk_1F147E198;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

uint64_t AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(uint64_t a1, const CA::StreamDescription *a2, const AMCP::DAL::DAL_Time_Delta *a3, int64x2_t **a4)
{
  v33[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = AMCP::DAL::Ring_Buffer_Base::Ring_Buffer_Base((AMCP::DAL::Ring_Buffer_Base *)a1, a2, a3);
  *(void *)uint64_t v6 = &unk_1F1471B50;
  uint64_t v7 = *a4;
  *((void *)v6 + 13) = *a4;
  uint64_t v8 = a4[1];
  *((void *)v6 + 14) = v8;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->i64[1], 1uLL, memory_order_relaxed);
    uint64_t v7 = *(int64x2_t **)(a1 + 104);
  }
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  v33[0] = &unk_1F1471C30;
  v33[1] = a1;
  v33[3] = v33;
  unint64_t v9 = v7[10].u64[0];
  unint64_t v10 = v7[9].u64[1];
  if (v10 < v9)
  {
    std::__function::__value_func<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>::__value_func[abi:ne180100](v7[9].i64[1], (uint64_t)v33);
    uint64_t v11 = v10 + 32;
    v7[9].i64[1] = v10 + 32;
    goto LABEL_27;
  }
  uint64_t v12 = v7[9].i64[0];
  uint64_t v13 = (uint64_t)(v10 - v12) >> 5;
  if ((unint64_t)(v13 + 1) >> 59) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v14 = v9 - v12;
  uint64_t v15 = v14 >> 4;
  if (v14 >> 4 <= (unint64_t)(v13 + 1)) {
    uint64_t v15 = v13 + 1;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v16 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v15;
  }
  uint64_t v32 = v7 + 10;
  if (v16)
  {
    if (v16 >> 59) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v17 = (char *)operator new(32 * v16);
  }
  else
  {
    unint64_t v17 = 0;
  }
  mach_port_t v29 = v17;
  v30.i64[0] = (uint64_t)&v17[32 * v13];
  long long v31 = &v17[32 * v16];
  std::__function::__value_func<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>::__value_func[abi:ne180100](v30.i64[0], (uint64_t)v33);
  uint64_t v18 = v30.i64[0];
  uint64_t v11 = v30.i64[0] + 32;
  v30.i64[1] = v30.i64[0] + 32;
  long long v20 = (void *)v7[9].i64[0];
  unint64_t v19 = v7[9].u64[1];
  if ((void *)v19 != v20)
  {
    long long v21 = (void *)(v19 - 8);
    while (1)
    {
      uint64_t v22 = v18 - 32;
      uint64_t v23 = (void *)*v21;
      if (*v21)
      {
        if (v21 - 3 == v23)
        {
          *(void *)(v18 - 8) = v22;
          (*(void (**)(void, uint64_t))(*(void *)*v21 + 24))(*v21, v22);
          goto LABEL_23;
        }
        *(void *)(v18 - 8) = v23;
        uint64_t v24 = v21;
      }
      else
      {
        uint64_t v24 = (void *)(v18 - 8);
      }
      *uint64_t v24 = 0;
LABEL_23:
      uint64_t v25 = v21 - 3;
      v21 -= 4;
      uint64_t v18 = v22;
      if (v25 == v20)
      {
        int64x2_t v26 = v7[9];
        uint64_t v11 = v30.i64[1];
        uint64_t v18 = v22;
        goto LABEL_26;
      }
    }
  }
  int64x2_t v26 = vdupq_n_s64(v19);
LABEL_26:
  v7[9].i64[0] = v18;
  v7[9].i64[1] = v11;
  int64x2_t v30 = v26;
  int v27 = (char *)v7[10].i64[0];
  v7[10].i64[0] = (uint64_t)v31;
  long long v31 = v27;
  mach_port_t v29 = (char *)v26.i64[0];
  std::__split_buffer<std::function<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>>::~__split_buffer((uint64_t)&v29);
LABEL_27:
  v7[9].i64[1] = v11;
  std::__function::__value_func<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>::~__value_func[abi:ne180100](v33);
  return a1;
}

void sub_1BAD86AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::__split_buffer<std::function<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>>::~__split_buffer((uint64_t)&a9);
  std::__function::__value_func<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>::~__value_func[abi:ne180100](&a14);
  std::__function::__value_func<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::~__value_func[abi:ne180100]((void *)v14 + 15);
  unint64_t v16 = (std::__shared_weak_count *)*((void *)v14 + 14);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  AMCP::DAL::Mixing_Ring_Buffer::~Mixing_Ring_Buffer(v14);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Mixing_Ring_Buffer::~Mixing_Ring_Buffer(AMCP::DAL::Mixing_Ring_Buffer *this)
{
  *(void *)this = &unk_1F147E198;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F147E198;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1F147E198;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void *std::__function::__func<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3DAL18Synchronized_MixerC1ERKN2CA17StreamDescriptionERKNS0_14DAL_Time_DeltaERKNSt3__110shared_ptrINS0_12SynchronizerEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>::operator()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(void *)(v3 + 144))
  {
    long long v30 = 0u;
    memset(v29, 0, sizeof(v29));
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 152));
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v3 + 72))(&v15, v3);
    v29[0] = v15;
    *(_OWORD *)((char *)&v29[1] + 8) = v17;
    *(_OWORD *)((char *)&v29[2] + 8) = v18;
    *(void *)&v29[1] = v16;
    *((void *)&v29[3] + 1) = v19;
    long long v30 = v20;
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 152));
    if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)v29, (AMCP::DAL::DAL_Time *)((char *)&v29[2] + 8)))
    {
      caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::intersection((uint64_t)&v15, a3, v29);
      AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v21, &v15);
      if (*((void *)&v20 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
      }
      if (*((void *)&v17 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
      }
      long long v7 = v21;
      uint64_t v8 = v22;
      uint64_t v9 = v23;
      unint64_t v10 = v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v11 = v25;
      uint64_t v12 = v26;
      uint64_t v13 = v27;
      uint64_t v14 = v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      AMCP::DAL::Ring_Buffer_Base::create_readable_range(v3, (uint64_t)&v7, (uint64_t)&v15);
      uint64_t v6 = *(void *)(v3 + 144);
      if (!v6) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v6 + 48))(v6, a2, &v15);
      if (*((void *)&v20 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
      }
      if (*((void *)&v17 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
      }
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
    }
    if (*((void *)&v30 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v30 + 1));
    }
    if (*(void *)&v29[2]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v29[2]);
    }
  }
}

void sub_1BAD86DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a40);
  }
  if (a35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a35);
  }
  uint64_t v42 = *(std::__shared_weak_count **)(v40 - 72);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  uint64_t v43 = *(std::__shared_weak_count **)(v40 - 112);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1471C30;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F1471C30;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0,std::allocator<AMCP::DAL::Synchronized_Mixer::Synchronized_Mixer(CA::StreamDescription const&,AMCP::DAL::DAL_Time_Delta const&,std::shared_ptr<AMCP::DAL::Synchronizer> const&)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>::~__func()
{
}

CFMutableDictionaryRef HALB_UCObject::Release(HALB_UCObject *this)
{
  io_object_t v2 = *((_DWORD *)this + 2);
  if (v2)
  {
    IOObjectRelease(v2);
    *((_DWORD *)this + 2) = 0;
  }

  return CACFDictionary::SetCFMutableDictionaryToEmpty((HALB_UCObject *)((char *)this + 16));
}

CFMutableDictionaryRef CACFDictionary::SetCFMutableDictionaryToEmpty(CACFDictionary *this)
{
  if (*((unsigned char *)this + 8))
  {
    io_object_t v2 = *(const void **)this;
    if (*(void *)this) {
      CFRelease(v2);
    }
  }
  CFMutableDictionaryRef result = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  *(void *)this = result;
  *((_WORD *)this + 4) = 257;
  return result;
}

uint64_t HALB_UCObject::Retain(HALB_UCObject *this)
{
  uint64_t result = *((unsigned int *)this + 2);
  if (result) {
    return IOObjectRetain(result);
  }
  return result;
}

void HALB_UCObject::CacheProperties(HALB_UCObject *this)
{
  kern_return_t v3;
  kern_return_t v4;
  _DWORD *exception;
  CFMutableDictionaryRef properties;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  kern_return_t v12;
  uint64_t v13;

  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 33))
  {
    io_registry_entry_t v2 = *((_DWORD *)this + 2);
    if (v2)
    {
      if (*((unsigned char *)this + 32))
      {
        properties = 0;
        uint64_t v3 = IORegistryEntryCreateCFProperties(v2, &properties, 0, 0);
        if (v3)
        {
          uint64_t v4 = v3;
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315650;
            uint64_t v8 = "HALB_UCObject.cpp";
            uint64_t v9 = 1024;
            unint64_t v10 = 444;
            long long v11 = 1024;
            uint64_t v12 = v4;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_UCObject::CacheProperties: failed to get the properties from the IO Registry, Error: 0x%X", buf, 0x18u);
          }
          exception = __cxa_allocate_exception(0x10uLL);
          *(void *)exception = off_1F148A5D8;
          exception[2] = v4;
        }
        CACFDictionary::SetCFMutableDictionaryFromCopy((HALB_UCObject *)((char *)this + 16), properties);
        if (properties) {
          CFRelease(properties);
        }
        *((unsigned char *)this + 32) = 0;
      }
    }
  }
}

uint64_t HALB_UCObject::PropertiesChanged(uint64_t this)
{
  *(unsigned char *)(this + 32) = 1;
  return this;
}

void HALB_UCObject::~HALB_UCObject(HALB_UCObject *this)
{
  HALB_UCObject::~HALB_UCObject(this);

  JUMPOUT(0x1C1859840);
}

{
  void (**v2)(HALB_UCObject *);
  io_connect_t v3;

  io_registry_entry_t v2 = (void (**)(HALB_UCObject *))&unk_1F1471D40;
  *(void *)this = &unk_1F1471D40;
  uint64_t v3 = *((_DWORD *)this + 3);
  if (v3)
  {
    IOServiceClose(v3);
    *((_DWORD *)this + 3) = 0;
    io_registry_entry_t v2 = *(void (***)(HALB_UCObject *))this;
  }
  v2[5](this);
  CACFDictionary::~CACFDictionary((HALB_UCObject *)((char *)this + 16));
}

BOOL HALB_UCObject::HasProperty(HALB_UCObject *this, const __CFString *a2)
{
  kern_return_t v4;
  CFDictionaryRef v5;
  const void *v6;
  BOOL v7;
  kern_return_t v9;
  _DWORD *exception;
  CFMutableDictionaryRef properties;
  unsigned char buf[12];
  __int16 v13;
  int v14;
  __int16 v15;
  kern_return_t v16;
  uint64_t v17;

  long long v17 = *MEMORY[0x1E4F143B8];
  properties = 0;
  if (*((unsigned char *)this + 33))
  {
    uint64_t v4 = IORegistryEntryCreateCFProperties(*((_DWORD *)this + 2), &properties, 0, 0);
    if (v4)
    {
      uint64_t v9 = v4;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = "HALB_UCObject.cpp";
        uint64_t v13 = 1024;
        uint64_t v14 = 174;
        long long v15 = 1024;
        uint64_t v16 = v9;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_UCObject::CopyProperties: failed to get the properties from the IO Registry, Error: 0x%X", buf, 0x18u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = v9;
    }
    uint64_t v5 = properties;
    if (!properties) {
      return 0;
    }
  }
  else
  {
    (*(void (**)(HALB_UCObject *))(*(void *)this + 24))(this);
    uint64_t v6 = (const void *)*((void *)this + 2);
    if (!v6) {
      return 0;
    }
    CFRetain(v6);
    uint64_t v5 = (const __CFDictionary *)*((void *)this + 2);
    if (!v5) {
      return 0;
    }
  }
  *(void *)std::string buf = v5;
  *(_WORD *)&uint8_t buf[8] = 1;
  long long v7 = CFDictionaryContainsKey(v5, a2) != 0;
  CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
  return v7;
}

void sub_1BAD8738C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

void sub_1BAD873A0(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAD87230);
  }
  JUMPOUT(0x1BAD87398);
}

void sub_1BAD873C0()
{
}

BOOL HALB_UCObject::CopyProperty_CFType(const __CFDictionary **this, CFStringRef key, const void **a3)
{
  if (!*((unsigned char *)this + 33))
  {
    (*((void (**)(const __CFDictionary **))*this + 3))(this);
    CFDictionaryRef v8 = this[2];
    if (v8)
    {
      Value = CFDictionaryGetValue(v8, key);
      *a3 = Value;
      BOOL v7 = Value != 0;
      if (!Value) {
        return v7;
      }
    }
    else
    {
      BOOL v7 = 0;
      Value = *a3;
      if (!*a3) {
        return v7;
      }
    }
    CFRetain(Value);
    return v7;
  }
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(*((_DWORD *)this + 2), key, 0, 0);
  *a3 = CFProperty;
  return CFProperty != 0;
}

void sub_1BAD87490(void *a1)
{
}

void HALB_UCObject::CopyProperty_UInt32(const __CFDictionary **this, const __CFString *a2, unsigned int *a3)
{
  CFTypeRef cf = 0;
  if (HALB_UCObject::CopyProperty_CFType(this, a2, &cf))
  {
    CFNumberRef v4 = (const __CFNumber *)cf;
    CFTypeID v5 = CFGetTypeID(cf);
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberRef v7 = v4;
      char v8 = 0;
      unsigned int valuePtr = 0;
      if (v4)
      {
        CFNumberGetValue(v4, kCFNumberSInt32Type, &valuePtr);
        unsigned int v6 = valuePtr;
      }
      else
      {
        unsigned int v6 = 0;
      }
      *a3 = v6;
      CACFNumber::~CACFNumber((CACFNumber *)&v7);
    }
    CFRelease(v4);
  }
}

void sub_1BAD87538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL HALB_UCObject::CopyProperty_CFString(const __CFDictionary **this, const __CFString *a2, const __CFString **a3)
{
  CFTypeRef cf = 0;
  BOOL result = HALB_UCObject::CopyProperty_CFType(this, a2, &cf);
  if (result)
  {
    CFStringRef v5 = (const __CFString *)cf;
    CFTypeID v6 = CFGetTypeID(cf);
    if (v6 == CFStringGetTypeID())
    {
      *a3 = v5;
      return 1;
    }
    else
    {
      CFRelease(v5);
      return 0;
    }
  }
  return result;
}

BOOL HALB_UCObject::CopyProperty_CFArray(const __CFDictionary **this, const __CFString *a2, const __CFArray **a3)
{
  CFTypeRef cf = 0;
  BOOL result = HALB_UCObject::CopyProperty_CFType(this, a2, &cf);
  if (result)
  {
    CFArrayRef v5 = (const __CFArray *)cf;
    CFTypeID v6 = CFGetTypeID(cf);
    if (v6 == CFArrayGetTypeID())
    {
      *a3 = v5;
      return 1;
    }
    else
    {
      CFRelease(v5);
      return 0;
    }
  }
  return result;
}

void HALB_UCObject::SetProperty_SInt32(HALB_UCObject *this, const __CFString *a2)
{
  kern_return_t v3;
  kern_return_t v4;
  _DWORD *exception;
  CFNumberRef v6;
  char v7;
  int valuePtr;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  kern_return_t v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int valuePtr = (int)a2;
  CFTypeID v6 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v7 = 1;
  uint64_t v3 = IORegistryEntrySetCFProperty(*((_DWORD *)this + 2), @"exclusive access owner", v6);
  if (v3)
  {
    CFNumberRef v4 = v3;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      unsigned int valuePtr = 136315650;
      uint64_t v9 = "HALB_UCObject.cpp";
      unint64_t v10 = 1024;
      long long v11 = 410;
      uint64_t v12 = 1024;
      uint64_t v13 = v4;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_UCObject::SetProperty: got an error from the IORegistry, Error: 0x%X", (uint8_t *)&valuePtr, 0x18u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v4;
  }
  CACFNumber::~CACFNumber((CACFNumber *)&v6);
}

void sub_1BAD87780(_Unwind_Exception *exception_object)
{
}

void HALB_UCObject::CopyProperty_BOOL(HALB_UCObject *this, const __CFString *a2, const __CFString *a3, BOOL *a4)
{
  CFBooleanRef CFProperty = (const __CFBoolean *)IORegistryEntryCreateCFProperty((io_registry_entry_t)this, a2, 0, 0);
  if (CFProperty)
  {
    CFBooleanRef v6 = CFProperty;
    CFTypeID v7 = CFGetTypeID(CFProperty);
    if (v7 == CFBooleanGetTypeID())
    {
      LOBYTE(a3->isa) = CFBooleanGetValue(v6) != 0;
    }
    else
    {
      CFTypeID v8 = CFGetTypeID(v6);
      if (v8 == CFNumberGetTypeID())
      {
        CFBooleanRef v9 = v6;
        char v10 = 0;
        int valuePtr = 0;
        CFNumberGetValue(v6, kCFNumberSInt32Type, &valuePtr);
        LOBYTE(a3->isa) = valuePtr != 0;
        CACFNumber::~CACFNumber((CACFNumber *)&v9);
      }
    }
    CFRelease(v6);
  }
}

void sub_1BAD87860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CACFNumber::~CACFNumber((CACFNumber *)va);
  _Unwind_Resume(a1);
}

void HALB_UCIterator::~HALB_UCIterator(io_object_t *this)
{
  if (*((unsigned char *)this + 4))
  {
    io_object_t v2 = *this;
    if (v2)
    {
      IOObjectRelease(v2);
      *this = 0;
    }
  }
}

uint64_t HALB_UCObject::MapMemory(HALB_UCObject *this, unsigned int a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 3) && *((unsigned char *)this + 34))
  {
    int v4 = MEMORY[0x1C1858840]();
    if (v4)
    {
      int v6 = v4;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315650;
        CFBooleanRef v9 = "HALB_UCObject.cpp";
        __int16 v10 = 1024;
        int v11 = 743;
        __int16 v12 = 1024;
        int v13 = v6;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_UCObject::MapMemory: failed to map in the memory, Error: 0x%X", buf, 0x18u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = v6;
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        CFBooleanRef v9 = "HALB_UCObject.cpp";
        __int16 v10 = 1024;
        int v11 = 745;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_UCObject::MapMemory: mapped in a NULL pointer", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 1852797029;
    }
  }
  return 0;
}

void non-virtual thunk to'HALS_PlugInClockDevice::HandlePlugIn_PropertiesChanged(HALS_PlugInClockDevice *this, unsigned int a2, const AudioObjectPropertyAddress *a3)
{
}

void non-virtual thunk to'HALS_PlugInClockDevice::~HALS_PlugInClockDevice(HALS_PlugInClockDevice *this)
{
  HALS_PlugInClockDevice::~HALS_PlugInClockDevice((HALS_PlugInClockDevice *)((char *)this - 368));

  JUMPOUT(0x1C1859840);
}

{
  HALS_PlugInClockDevice::~HALS_PlugInClockDevice((HALS_PlugInClockDevice *)((char *)this - 368));
}

void HALS_PlugInClockDevice::~HALS_PlugInClockDevice(HALS_PlugInClockDevice *this)
{
  *(void *)this = &unk_1F1471D90;
  io_object_t v2 = (HALS_PlugInClockDevice *)((char *)this + 368);
  *((void *)this + 46) = &unk_1F1471F70;
  uint64_t v3 = *((void *)this + 51);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    HALS_ObjectMap::ObjectIsDead(*((HALS_ObjectMap **)this + 51), v4);
    *((void *)this + 51) = 0;
  }
  v5[0] = 0;
  v5[1] = 0;
  HALS_System::GetInstance(&v6, 0, v5);
  HALS_IOContext_Manager::destroy_engine_for_device(*(os_unfair_lock_s **)(v6 + 1392), this);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_PlugInClockDevice *)((char *)this + 416));
  HALS_PlugInObject::~HALS_PlugInObject(v2);

  HALS_ClockDevice::~HALS_ClockDevice(this);
}

{
  uint64_t vars8;

  HALS_PlugInClockDevice::~HALS_PlugInClockDevice(this);

  JUMPOUT(0x1C1859840);
}

void HALS_PlugInClockDevice::HandlePlugIn_PropertiesChanged(HALS_PlugInClockDevice *this, unsigned int a2, const AudioObjectPropertyAddress *a3)
{
}

HALS_ObjectMap *HALS_PlugInClockDevice::_CopyIOEngine(HALS_ObjectMap **this, HALS_Object *a2)
{
  return this[51];
}

uint64_t HALS_PlugInClockDevice::create_mcp_engine(HALS_PlugInClockDevice *this)
{
  uint64_t v1 = *((void *)this + 47);
  int v3 = *((_DWORD *)this + 97);
  return (*(uint64_t (**)(void, uint64_t, HALS_PlugInClockDevice *, int *))(**(void **)(v1 + 400) + 152))(*(void *)(v1 + 400), v1, this, &v3);
}

void HALS_PlugInClockDevice::SetPropertyData(HALS_PlugInClockDevice *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t mSelector = a3->mSelector;
  switch(mSelector)
  {
    case 0x6964656E:
      uint64_t v23 = *((void *)this + 47);
      uint64_t v24 = *(void *)(v23 + 400);
      uint64_t v16 = *(std::__shared_weak_count **)(v23 + 408);
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v25 = *((unsigned int *)this + 97);
      if (a8) {
        uint64_t v26 = *((unsigned int *)a8 + 58);
      }
      else {
        uint64_t v26 = 0;
      }
      strcpy((char *)v40, "nedibolg");
      BYTE1(v40[2]) = 0;
      HIWORD(v40[2]) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, _DWORD *, void, void, uint64_t, const void *))(*(void *)v24 + 584))(v24, v25, v26, v40, 0, 0, a4, a5);
      goto LABEL_29;
    case 0x6E737274:
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          v40[0] = 136315394;
          *(void *)&v40[1] = "HALS_PlugInClockDevice.cpp";
          __int16 v41 = 1024;
          int v42 = 455;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::SetPropertyData: bad property data size for kAudioClockDevicePropertyNominalSampleRate", (uint8_t *)v40, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = off_1F148A5D8;
        exception[2] = 561211770;
      }
      uint64_t v19 = *((void *)this + 47);
      uint64_t v20 = *(void *)(v19 + 400);
      long long v21 = *(std::__shared_weak_count **)(v19 + 408);
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (a8) {
        uint64_t v22 = *((unsigned int *)a8 + 58);
      }
      else {
        uint64_t v22 = 0;
      }
      (*(void (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *, void, void, uint64_t, const void *))(*(void *)v20 + 584))(v20, *((unsigned int *)this + 97), v22, a3, 0, 0, a4, a5);
      if (v21)
      {
        std::string::size_type v38 = v21;
LABEL_37:
        std::__shared_weak_count::__release_shared[abi:ne180100](v38);
      }
      break;
    case 0x6C6E616D:
      uint64_t v14 = *((void *)this + 47);
      uint64_t v15 = *(void *)(v14 + 400);
      uint64_t v16 = *(std::__shared_weak_count **)(v14 + 408);
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = *((unsigned int *)this + 97);
      if (a8) {
        uint64_t v18 = *((unsigned int *)a8 + 58);
      }
      else {
        uint64_t v18 = 0;
      }
      strcpy((char *)v40, "manlbolg");
      BYTE1(v40[2]) = 0;
      HIWORD(v40[2]) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, _DWORD *, void, void, uint64_t, const void *))(*(void *)v15 + 584))(v15, v17, v18, v40, 0, 0, a4, a5);
LABEL_29:
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      return;
    default:
      if (HALS_ClockDevice::HasProperty((uint64_t)this, a2, (int *)a3))
      {
        if (HALS_ClockDevice::IsPropertySettable((uint64_t)this, a2, (int *)a3)) {
          HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v30, v31, v32, v33, (uint64_t)a8);
        }
        uint64_t mSelector = a3->mSelector;
      }
      if ((*(unsigned int (**)(char *, uint64_t))(*((void *)this + 46) + 24))((char *)this + 368, mSelector))
      {
        uint64_t v34 = *((void *)this + 47);
        uint64_t v35 = *(void *)(v34 + 400);
        uint64_t v36 = *(std::__shared_weak_count **)(v34 + 408);
        if (v36) {
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v37 = a8 ? *((unsigned int *)a8 + 58) : 0;
        (*(void (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *))(*(void *)v35 + 584))(v35, *((unsigned int *)this + 97), v37, a3, a6, a7, a4, a5);
        if (v36)
        {
          std::string::size_type v38 = v36;
          goto LABEL_37;
        }
      }
      break;
  }
}

void sub_1BAD880E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_PlugInClockDevice::GetPropertyData(HALS_PlugInClockDevice *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, unsigned int *a5, uint64_t *a6, uint64_t a7, const void *a8, HALS_Client *a9)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  uint64_t mSelector = a3->mSelector;
  if ((int)mSelector <= 1819111267)
  {
    if ((int)mSelector <= 1719105133)
    {
      if ((int)mSelector > 1668510817)
      {
        if (mSelector == 1668510818)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
              __int16 v96 = 1024;
              int v97 = 394;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioDevicePropertyClockIsStable", buf, 0x12u);
            }
            exception = __cxa_allocate_exception(0x10uLL);
            *(void *)exception = off_1F148A5D8;
            exception[2] = 561211770;
          }
          uint64_t v47 = *((void *)this + 47);
          uint64_t v30 = *(void *)(v47 + 400);
          uint64_t v31 = *(std::__shared_weak_count **)(v47 + 408);
          if (v31) {
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v32 = *((unsigned int *)this + 97);
          if (a9) {
            uint64_t v33 = *((unsigned int *)a9 + 58);
          }
          else {
            uint64_t v33 = 0;
          }
          goto LABEL_141;
        }
        if (mSelector == 1668641652)
        {
          unsigned int v34 = a4 / 0xC;
          if (*((_DWORD *)this + 100) < a4 / 0xC) {
            unsigned int v34 = *((_DWORD *)this + 100);
          }
          if (v34)
          {
            uint64_t v35 = 0;
            unint64_t v36 = 0;
            do
            {
              if (v36 < *((unsigned int *)this + 100))
              {
                uint64_t v37 = (char *)a6 + v35;
                std::string::size_type v38 = (uint64_t *)(*((void *)this + 49) + v35);
                uint64_t v39 = *v38;
                *((_DWORD *)v37 + 2) = *((_DWORD *)v38 + 2);
                *(void *)uint64_t v37 = v39;
              }
              ++v36;
              v35 += 12;
            }
            while (12 * v34 != v35);
          }
          int v40 = 4 * v34;
          goto LABEL_146;
        }
        goto LABEL_112;
      }
      if (mSelector != 1668049764)
      {
        if (mSelector == 1668050795)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
              __int16 v96 = 1024;
              int v97 = 386;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioDevicePropertyClockAlgorithm", buf, 0x12u);
            }
            uint64_t v78 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v78 = off_1F148A5D8;
            v78[2] = 561211770;
          }
          uint64_t v29 = *((void *)this + 47);
          uint64_t v30 = *(void *)(v29 + 400);
          uint64_t v31 = *(std::__shared_weak_count **)(v29 + 408);
          if (v31) {
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v32 = *((unsigned int *)this + 97);
          if (a9) {
            uint64_t v33 = *((unsigned int *)a9 + 58);
          }
          else {
            uint64_t v33 = 0;
          }
          goto LABEL_141;
        }
        goto LABEL_112;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
          __int16 v96 = 1024;
          int v97 = 333;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioClockDevicePropertyClockDomain", buf, 0x12u);
        }
        uint64_t v76 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v76 = off_1F148A5D8;
        v76[2] = 561211770;
      }
      uint64_t v45 = *((void *)this + 47);
      uint64_t v46 = *(void *)(v45 + 400);
      uint64_t v28 = *(std::__shared_weak_count **)(v45 + 408);
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      strcpy(buf, "dklcbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      LODWORD(v93) = 0;
      int v94 = 0;
      (*(void (**)(uint64_t))(*(void *)v46 + 576))(v46);
    }
    else if ((int)mSelector <= 1768187245)
    {
      if (mSelector == 1719105134)
      {
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
            __int16 v96 = 1024;
            int v97 = 309;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioObjectPropertyFirmwareVersion", buf, 0x12u);
          }
          long long v82 = __cxa_allocate_exception(0x10uLL);
          *(void *)long long v82 = off_1F148A5D8;
          v82[2] = 561211770;
        }
        uint64_t v59 = *((void *)this + 47);
        uint64_t v60 = *(void *)(v59 + 400);
        uint64_t v25 = *(std::__shared_weak_count **)(v59 + 408);
        if (v25) {
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        strcpy(buf, "nvwfbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        uint64_t v93 = 0;
        int v94 = 0;
        (*(void (**)(uint64_t))(*(void *)v60 + 576))(v60);
        goto LABEL_136;
      }
      if (mSelector != 1735354734) {
        goto LABEL_112;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
          __int16 v96 = 1024;
          int v97 = 349;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioClockDevicePropertyDeviceIsRunning", buf, 0x12u);
        }
        uint64_t v88 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v88 = off_1F148A5D8;
        v88[2] = 561211770;
      }
      uint64_t v41 = *((void *)this + 47);
      uint64_t v42 = *(void *)(v41 + 400);
      uint64_t v28 = *(std::__shared_weak_count **)(v41 + 408);
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      strcpy(buf, "niogbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      LODWORD(v93) = 0;
      int v94 = 0;
      (*(void (**)(uint64_t))(*(void *)v42 + 576))(v42);
    }
    else
    {
      switch(mSelector)
      {
        case 0x6964656E:
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
              __int16 v96 = 1024;
              int v97 = 293;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioObjectPropertyIdentify", buf, 0x12u);
            }
            long long v80 = __cxa_allocate_exception(0x10uLL);
            *(void *)long long v80 = off_1F148A5D8;
            v80[2] = 561211770;
          }
          uint64_t v50 = *((void *)this + 47);
          uint64_t v51 = *(void *)(v50 + 400);
          uint64_t v28 = *(std::__shared_weak_count **)(v50 + 408);
          if (v28) {
            atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          strcpy(buf, "nedibolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          LODWORD(v93) = 0;
          int v94 = 0;
          (*(void (**)(uint64_t))(*(void *)v51 + 576))(v51);
          break;
        case 0x6C69766E:
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
              __int16 v96 = 1024;
              int v97 = 341;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioClockDevicePropertyDeviceIsAlive", buf, 0x12u);
            }
            long long v79 = __cxa_allocate_exception(0x10uLL);
            *(void *)long long v79 = off_1F148A5D8;
            v79[2] = 561211770;
          }
          uint64_t v48 = *((void *)this + 47);
          uint64_t v49 = *(void *)(v48 + 400);
          uint64_t v28 = *(std::__shared_weak_count **)(v48 + 408);
          if (v28) {
            atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          strcpy(buf, "nvilbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          LODWORD(v93) = 0;
          int v94 = 0;
          (*(void (**)(uint64_t))(*(void *)v49 + 576))(v49);
          break;
        case 0x6C6D616B:
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
              __int16 v96 = 1024;
              int v97 = 285;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioObjectPropertyManufacturer", buf, 0x12u);
            }
            int v86 = __cxa_allocate_exception(0x10uLL);
            *(void *)int v86 = off_1F148A5D8;
            v86[2] = 561211770;
          }
          uint64_t v23 = *((void *)this + 47);
          uint64_t v24 = *(void *)(v23 + 400);
          uint64_t v25 = *(std::__shared_weak_count **)(v23 + 408);
          if (v25) {
            atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          strcpy(buf, "kamlbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          uint64_t v93 = 0;
          int v94 = 0;
          (*(void (**)(uint64_t))(*(void *)v24 + 576))(v24);
          goto LABEL_136;
        default:
          goto LABEL_112;
      }
    }
    goto LABEL_134;
  }
  if ((int)mSelector > 1919512166)
  {
    if ((int)mSelector <= 1935763059)
    {
      if (mSelector == 1919512167)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
            __int16 v96 = 1024;
            int v97 = 371;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioDevicePropertyZeroTimeStampPeriod", buf, 0x12u);
          }
          int v92 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v92 = off_1F148A5D8;
          v92[2] = 561211770;
        }
        uint64_t v64 = *((void *)this + 47);
        uint64_t v65 = *(void *)(v64 + 400);
        uint64_t v66 = *(std::__shared_weak_count **)(v64 + 408);
        if (v66) {
          atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v67 = (*(uint64_t (**)(uint64_t))(*(void *)v65 + 24))(v65);
        if (v66) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v66);
        }
        uint64_t v68 = *((void *)this + 47);
        uint64_t v30 = *(void *)(v68 + 400);
        uint64_t v31 = *(std::__shared_weak_count **)(v68 + 408);
        if (v67)
        {
          if (v31) {
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          strcpy(buf, "zisfbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          LODWORD(v93) = 0;
          int v94 = 0;
          (*(void (**)(uint64_t))(*(void *)v30 + 576))(v30);
          int v75 = 0;
LABEL_142:
          *(_DWORD *)a6 = v75;
          if (v31)
          {
            int v74 = v31;
            goto LABEL_144;
          }
          goto LABEL_145;
        }
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v32 = *((unsigned int *)this + 97);
        if (a9) {
          uint64_t v33 = *((unsigned int *)a9 + 58);
        }
        else {
          uint64_t v33 = 0;
        }
LABEL_141:
        *(_DWORD *)std::string buf = 0;
        LODWORD(v93) = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, void, void, uint64_t, uint64_t *, unsigned char *))(*(void *)v30 + 576))(v30, v32, v33, a3, 0, 0, 4, &v93, buf);
        int v75 = *(_DWORD *)buf;
        goto LABEL_142;
      }
      if (mSelector == 1920168547)
      {
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
            __int16 v96 = 1024;
            int v97 = 410;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioObjectPropertyResourceBundle", buf, 0x12u);
          }
          long long v90 = __cxa_allocate_exception(0x10uLL);
          *(void *)long long v90 = off_1F148A5D8;
          v90[2] = 561211770;
        }
        *a6 = (uint64_t)HALS_PlugInObject::CopyResourceBundlePath((uint64_t)this + 368, (uint64_t)a9);
        goto LABEL_139;
      }
      goto LABEL_112;
    }
    if (mSelector == 1935763060)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
          __int16 v96 = 1024;
          int v97 = 402;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioDevicePropertySafetyOffset", buf, 0x12u);
        }
        uint64_t v84 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v84 = off_1F148A5D8;
        v84[2] = 561211770;
      }
      *(_DWORD *)a6 = 0;
      goto LABEL_145;
    }
    if (mSelector == 1936618861)
    {
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
          __int16 v96 = 1024;
          int v97 = 301;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioObjectPropertySerialNumber", buf, 0x12u);
        }
        uint64_t v81 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v81 = off_1F148A5D8;
        v81[2] = 561211770;
      }
      uint64_t v57 = *((void *)this + 47);
      uint64_t v58 = *(void *)(v57 + 400);
      uint64_t v25 = *(std::__shared_weak_count **)(v57 + 408);
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      strcpy(buf, "munsbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      uint64_t v93 = 0;
      int v94 = 0;
      (*(void (**)(uint64_t))(*(void *)v58 + 576))(v58);
      goto LABEL_136;
    }
    if (mSelector != 1953653102)
    {
LABEL_112:
      if (HALS_ClockDevice::HasProperty((uint64_t)this, a2, (int *)a3))
      {
        HALS_ClockDevice::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
      }
      else if ((*(unsigned int (**)(char *, uint64_t))(*((void *)this + 46) + 24))((char *)this + 368, mSelector))
      {
        uint64_t v69 = *((void *)this + 47);
        uint64_t v70 = *(void *)(v69 + 400);
        uint64_t v71 = *(std::__shared_weak_count **)(v69 + 408);
        if (v71) {
          atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (a9) {
          uint64_t v72 = *((unsigned int *)a9 + 58);
        }
        else {
          uint64_t v72 = 0;
        }
        (*(void (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, unsigned int *, uint64_t *))(*(void *)v70 + 576))(v70, *((unsigned int *)this + 97), v72, a3, a7, a8, a4, a5, a6);
        if (v71)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v71);
        }
      }
      return;
    }
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
        __int16 v96 = 1024;
        int v97 = 325;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioClockDevicePropertyTransportType", buf, 0x12u);
      }
      char v87 = __cxa_allocate_exception(0x10uLL);
      *(void *)char v87 = off_1F148A5D8;
      v87[2] = 561211770;
    }
    uint64_t v26 = *((void *)this + 47);
    uint64_t v27 = *(void *)(v26 + 400);
    uint64_t v28 = *(std::__shared_weak_count **)(v26 + 408);
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    strcpy(buf, "nartbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    LODWORD(v93) = 0;
    int v94 = 0;
    (*(void (**)(uint64_t))(*(void *)v27 + 576))(v27);
LABEL_134:
    *(_DWORD *)a6 = v93;
    if (v28)
    {
      int v74 = v28;
LABEL_144:
      std::__shared_weak_count::__release_shared[abi:ne180100](v74);
    }
LABEL_145:
    int v40 = 4;
    goto LABEL_146;
  }
  if ((int)mSelector <= 1819569762)
  {
    if (mSelector == 1819111268)
    {
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
          __int16 v96 = 1024;
          int v97 = 277;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioObjectPropertyModelName", buf, 0x12u);
        }
        uint64_t v91 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v91 = off_1F148A5D8;
        v91[2] = 561211770;
      }
      uint64_t v62 = *((void *)this + 47);
      uint64_t v63 = *(void *)(v62 + 400);
      uint64_t v25 = *(std::__shared_weak_count **)(v62 + 408);
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      strcpy(buf, "domlbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      uint64_t v93 = 0;
      int v94 = 0;
      (*(void (**)(uint64_t))(*(void *)v63 + 576))(v63);
      goto LABEL_136;
    }
    if (mSelector == 1819173229)
    {
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
          __int16 v96 = 1024;
          int v97 = 269;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioObjectPropertyName", buf, 0x12u);
        }
        uint64_t v89 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v89 = off_1F148A5D8;
        v89[2] = 561211770;
      }
      uint64_t v43 = *((void *)this + 47);
      uint64_t v44 = *(void *)(v43 + 400);
      uint64_t v25 = *(std::__shared_weak_count **)(v43 + 408);
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      strcpy(buf, "manlbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      uint64_t v93 = 0;
      int v94 = 0;
      (*(void (**)(uint64_t))(*(void *)v44 + 576))(v44);
LABEL_136:
      *a6 = v93;
      if (!v25)
      {
LABEL_139:
        int v40 = 8;
LABEL_146:
        *a5 = v40;
        return;
      }
      uint64_t v73 = v25;
LABEL_138:
      std::__shared_weak_count::__release_shared[abi:ne180100](v73);
      goto LABEL_139;
    }
    goto LABEL_112;
  }
  if (mSelector == 1819569763)
  {
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
        __int16 v96 = 1024;
        int v97 = 357;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioClockDevicePropertyLatency", buf, 0x12u);
      }
      uint64_t v83 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v83 = off_1F148A5D8;
      v83[2] = 561211770;
    }
    uint64_t v61 = *((void *)this + 47);
    uint64_t v30 = *(void *)(v61 + 400);
    uint64_t v31 = *(std::__shared_weak_count **)(v61 + 408);
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v32 = *((unsigned int *)this + 97);
    if (a9) {
      uint64_t v33 = *((unsigned int *)a9 + 58);
    }
    else {
      uint64_t v33 = 0;
    }
    goto LABEL_141;
  }
  if (mSelector != 1853059619)
  {
    if (mSelector == 1853059700)
    {
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
          __int16 v96 = 1024;
          int v97 = 317;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInClockDevice::GetPropertyData: bad property data size for kAudioClockDevicePropertyNominalSampleRate", buf, 0x12u);
        }
        uint64_t v85 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v85 = off_1F148A5D8;
        v85[2] = 561211770;
      }
      uint64_t v18 = *((void *)this + 47);
      uint64_t v19 = *(void *)(v18 + 400);
      uint64_t v20 = *(std::__shared_weak_count **)(v18 + 408);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v21 = *((unsigned int *)this + 97);
      if (a9) {
        uint64_t v22 = *((unsigned int *)a9 + 58);
      }
      else {
        uint64_t v22 = 0;
      }
      *(void *)std::string buf = 0;
      LODWORD(v93) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, void, void, uint64_t, uint64_t *, unsigned char *))(*(void *)v19 + 576))(v19, v21, v22, a3, 0, 0, 8, &v93, buf);
      *a6 = *(void *)buf;
      if (!v20) {
        goto LABEL_139;
      }
      uint64_t v73 = v20;
      goto LABEL_138;
    }
    goto LABEL_112;
  }
  uint64_t v52 = *((void *)this + 47);
  uint64_t v53 = *(void *)(v52 + 400);
  long long v54 = *(std::__shared_weak_count **)(v52 + 408);
  if (v54) {
    atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v55 = *((unsigned int *)this + 97);
  if (a9) {
    uint64_t v56 = *((unsigned int *)a9 + 58);
  }
  else {
    uint64_t v56 = 0;
  }
  strcpy(buf, "#rsnbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *, void, void, uint64_t, unsigned int *, uint64_t *))(*(void *)v53 + 576))(v53, v55, v56, buf, 0, 0, a4, a5, a6);
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
}

void sub_1BAD89C38(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugInClockDevice::GetPropertyDataSize(HALS_PlugInClockDevice *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, HALS_Client *a6)
{
  uint64_t mSelector = a3->mSelector;
  uint64_t v13 = 8;
  if ((int)mSelector <= 1851878763)
  {
    if (mSelector == 1668641652) {
      return (12 * *((_DWORD *)this + 100));
    }
    int v14 = 1819173229;
  }
  else
  {
    if (mSelector == 1851878764) {
      return v13;
    }
    if (mSelector == 1853059619)
    {
      uint64_t v16 = *((void *)this + 47);
      uint64_t v17 = *(void *)(v16 + 400);
      uint64_t v18 = *(std::__shared_weak_count **)(v16 + 408);
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v19 = *((unsigned int *)this + 97);
      if (a6) {
        uint64_t v20 = *((unsigned int *)a6 + 58);
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v26 = 0x676C6F626E737223;
      int v27 = 0;
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void, void))(*(void *)v17 + 568))(v17, v19, v20, &v26, 0, 0);
      if (!v18) {
        return v13;
      }
      uint64_t v25 = v18;
LABEL_25:
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      return v13;
    }
    int v14 = 1920168547;
  }
  if (mSelector == v14) {
    return v13;
  }
  if (!HALS_ClockDevice::HasProperty((uint64_t)this, a2, (int *)a3))
  {
    if (!(*(unsigned int (**)(char *, uint64_t))(*((void *)this + 46) + 24))((char *)this + 368, mSelector))return 0; {
    uint64_t v21 = *((void *)this + 47);
    }
    uint64_t v22 = *(void *)(v21 + 400);
    uint64_t v23 = *(std::__shared_weak_count **)(v21 + 408);
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (a6) {
      uint64_t v24 = *((unsigned int *)a6 + 58);
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v13 = (*(uint64_t (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)v22 + 568))(v22, *((unsigned int *)this + 97), v24, a3, a4, a5);
    if (!v23) {
      return v13;
    }
    uint64_t v25 = v23;
    goto LABEL_25;
  }

  return HALS_ClockDevice::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
}

void sub_1BAD89F34(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugInClockDevice::IsPropertySettable(HALS_PlugInClockDevice *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  uint64_t v8 = 0;
  uint64_t mSelector = a3->mSelector;
  if ((int)mSelector > 1819173228)
  {
    if (mSelector == 1920168547) {
      return v8;
    }
    if (mSelector == 1819173229)
    {
      uint64_t v15 = *((void *)this + 47);
      uint64_t v16 = *(void *)(v15 + 400);
      __int16 v12 = *(std::__shared_weak_count **)(v15 + 408);
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = *((unsigned int *)this + 97);
      if (a4) {
        uint64_t v18 = *((unsigned int *)a4 + 58);
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v26 = 0x676C6F626C6E616DLL;
      int v27 = 0;
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v16 + 560))(v16, v17, v18, &v26);
LABEL_27:
      uint64_t v8 = v24;
      if (v12)
      {
        uint64_t v25 = v12;
LABEL_29:
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      return v8;
    }
  }
  else
  {
    if (mSelector == 1668641652) {
      return v8;
    }
    if (mSelector == 1768187246)
    {
      uint64_t v10 = *((void *)this + 47);
      uint64_t v11 = *(void *)(v10 + 400);
      __int16 v12 = *(std::__shared_weak_count **)(v10 + 408);
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = *((unsigned int *)this + 97);
      if (a4) {
        uint64_t v14 = *((unsigned int *)a4 + 58);
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v26 = 0x676C6F626964656ELL;
      int v27 = 0;
      uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v11 + 560))(v11, v13, v14, &v26);
      goto LABEL_27;
    }
  }
  if (!HALS_ClockDevice::HasProperty((uint64_t)this, a2, (int *)a3))
  {
    if (!(*(unsigned int (**)(char *, uint64_t))(*((void *)this + 46) + 24))((char *)this + 368, mSelector))return 0; {
    uint64_t v20 = *((void *)this + 47);
    }
    uint64_t v21 = *(void *)(v20 + 400);
    uint64_t v22 = *(std::__shared_weak_count **)(v20 + 408);
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (a4) {
      uint64_t v23 = *((unsigned int *)a4 + 58);
    }
    else {
      uint64_t v23 = 0;
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *))(*(void *)v21 + 560))(v21, *((unsigned int *)this + 97), v23, a3);
    if (!v22) {
      return v8;
    }
    uint64_t v25 = v22;
    goto LABEL_29;
  }

  return HALS_ClockDevice::IsPropertySettable((uint64_t)this, a2, (int *)a3);
}

void sub_1BAD8A1DC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugInClockDevice::HasProperty(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v7 = *a3;
  if ((int)v7 > 1819111267)
  {
    switch(v7)
    {
      case 0x6C6D6F64:
        uint64_t v21 = *(void *)(a1 + 376);
        uint64_t v22 = *(void *)(v21 + 400);
        uint64_t v10 = *(std::__shared_weak_count **)(v21 + 408);
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v23 = *(unsigned int *)(a1 + 388);
        if (a4) {
          uint64_t v24 = *(unsigned int *)(a4 + 232);
        }
        else {
          uint64_t v24 = 0;
        }
        uint64_t v41 = 0x676C6F626C6D6F64;
        int v42 = 0;
        uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v22 + 552))(v22, v23, v24, &v41);
        break;
      case 0x736E756D:
        uint64_t v29 = *(void *)(a1 + 376);
        uint64_t v30 = *(void *)(v29 + 400);
        uint64_t v10 = *(std::__shared_weak_count **)(v29 + 408);
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v31 = *(unsigned int *)(a1 + 388);
        if (a4) {
          uint64_t v32 = *(unsigned int *)(a4 + 232);
        }
        else {
          uint64_t v32 = 0;
        }
        uint64_t v41 = 0x676C6F62736E756DLL;
        int v42 = 0;
        uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v30 + 552))(v30, v31, v32, &v41);
        break;
      case 0x6C6E616D:
        uint64_t v13 = *(void *)(a1 + 376);
        uint64_t v14 = *(void *)(v13 + 400);
        uint64_t v10 = *(std::__shared_weak_count **)(v13 + 408);
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v15 = *(unsigned int *)(a1 + 388);
        if (a4) {
          uint64_t v16 = *(unsigned int *)(a4 + 232);
        }
        else {
          uint64_t v16 = 0;
        }
        uint64_t v41 = 0x676C6F626C6E616DLL;
        int v42 = 0;
        uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v14 + 552))(v14, v15, v16, &v41);
        break;
      default:
        goto LABEL_32;
    }
LABEL_51:
    uint64_t v33 = v38;
    if (v10)
    {
      uint64_t v39 = v10;
LABEL_53:
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
      return v33;
    }
    return v33;
  }
  switch(v7)
  {
    case 0x6677766E:
      uint64_t v17 = *(void *)(a1 + 376);
      uint64_t v18 = *(void *)(v17 + 400);
      uint64_t v10 = *(std::__shared_weak_count **)(v17 + 408);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v19 = *(unsigned int *)(a1 + 388);
      if (a4) {
        uint64_t v20 = *(unsigned int *)(a4 + 232);
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v41 = 0x676C6F626677766ELL;
      int v42 = 0;
      uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v18 + 552))(v18, v19, v20, &v41);
      goto LABEL_51;
    case 0x6964656E:
      uint64_t v25 = *(void *)(a1 + 376);
      uint64_t v26 = *(void *)(v25 + 400);
      uint64_t v10 = *(std::__shared_weak_count **)(v25 + 408);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v27 = *(unsigned int *)(a1 + 388);
      if (a4) {
        uint64_t v28 = *(unsigned int *)(a4 + 232);
      }
      else {
        uint64_t v28 = 0;
      }
      uint64_t v41 = 0x676C6F626964656ELL;
      int v42 = 0;
      uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v26 + 552))(v26, v27, v28, &v41);
      goto LABEL_51;
    case 0x6C6D616B:
      uint64_t v8 = *(void *)(a1 + 376);
      uint64_t v9 = *(void *)(v8 + 400);
      uint64_t v10 = *(std::__shared_weak_count **)(v8 + 408);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v11 = *(unsigned int *)(a1 + 388);
      if (a4) {
        uint64_t v12 = *(unsigned int *)(a4 + 232);
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v41 = 0x676C6F626C6D616BLL;
      int v42 = 0;
      uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v9 + 552))(v9, v11, v12, &v41);
      goto LABEL_51;
  }
LABEL_32:
  if (HALS_ClockDevice::HasProperty(a1, a2, a3)) {
    return 1;
  }
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)(a1 + 368) + 24))(a1 + 368, v7)) {
    return 0;
  }
  uint64_t v34 = *(void *)(a1 + 376);
  uint64_t v35 = *(void *)(v34 + 400);
  unint64_t v36 = *(std::__shared_weak_count **)(v34 + 408);
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a4) {
    uint64_t v37 = *(unsigned int *)(a4 + 232);
  }
  else {
    uint64_t v37 = 0;
  }
  uint64_t v33 = (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*(void *)v35 + 552))(v35, *(unsigned int *)(a1 + 388), v37, a3);
  if (v36)
  {
    uint64_t v39 = v36;
    goto LABEL_53;
  }
  return v33;
}

void sub_1BAD8A624(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugInClockDevice::_Deactivate(uint64_t this)
{
  *(_DWORD *)(this + 8) = 0;
  return this;
}

void HALS_PlugInClockDevice::Activate(HALS_PlugInClockDevice *this)
{
  io_object_t v2 = (char *)this + 368;
  int v3 = (void (***)(void))(*(uint64_t (**)(void, void, HALS_PlugInClockDevice *))(**(void **)(*((void *)this + 47) + 400)
                                                                                             + 136))(*(void *)(*((void *)this + 47) + 400), *((void *)this + 47), this);
  *((void *)this + 51) = v3;
  (**v3)();
  HALS_Object::Activate(this, v4);
  (*(void (**)(char *))(*((void *)this + 46) + 32))(v2);
  v7[0] = 0;
  v7[1] = 0;
  HALS_System::GetInstance(&v8, 0, v7);
  BOOL has_engine_for_device = HALS_IOContext_Manager::has_engine_for_device(*(HALS_IOContext_Manager **)(v8 + 1392), this);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (!has_engine_for_device)
  {
    v6[0] = 0;
    v6[1] = 0;
    HALS_System::GetInstance(&v8, 0, v6);
    HALS_IOContext_Manager::create_engine_for_device(*(os_unfair_lock_s **)(v8 + 1392), this);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
}

void sub_1BAD8A7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN22HALS_PlugInClockDevice32HandlePlugIn_RequestConfigChangeENS_19ConfigChangePayloadEb_block_invoke(uint64_t a1)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  io_object_t v2 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 56));
  uint64_t v3 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 60));
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = *(unsigned __int8 *)(a1 + 48);
    kdebug_trace();
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 543;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v3 + 112;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInClockDevice::HandlePlugIn_RequestConfigChange: %s  --->", buf, 0x1Cu);
    }
    long long v51 = 0u;
    long long v52 = 0u;
    uint64_t v8 = (HALS_NotificationManager *)*(unsigned int *)(v3 + 16);
    uint64_t v39 = 0x676C6F6263666762;
    LODWORD(v40) = 0;
    HALS_NotificationManager::PropertiesChanged_Sync(v8, 0, 1u, (const AudioObjectPropertyAddress *)&v39, v7);
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    v47[0] = 0;
    v47[1] = 0;
    HALS_System::GetInstance(buf, 0, v47);
    uint64_t v9 = *(void *)buf;
    uint64_t v10 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 200))(v3);
    uint64_t v11 = v10;
    if (v10) {
      CFRetain(v10);
    }
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v11);
    HALS_System::GetRawDeviceListUsingClockDevice(v9, (uint64_t)&v48, &cf);
    if (cf) {
      CFRelease(cf);
    }
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    uint64_t v12 = *(void *)(v3 + 408);
    std::string __p = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    if (v12) {
      (*(void (**)(uint64_t, void **))(*(void *)v12 + 216))(v12, &__p);
    }
    v42[0] = 0;
    v42[1] = 0;
    HALS_System::GetInstance(buf, 0, v42);
    HALS_IOContext_Manager::pause_contexts_for_device(*(os_unfair_lock_s **)(*(void *)buf + 1392), (HALS_IODevice *)v3);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    HALS_ClockDeviceState::HALS_ClockDeviceState((HALS_ClockDeviceState *)&v39);
    HALS_ClockDeviceState::Capture((HALS_ClockDeviceState *)&v39, (HALS_ClockDevice *)v3, (const CAPropertyAddressList *)HALS_ClockDeviceState::sStandardDevicePropertiesToCapture);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 572;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v3 + 112;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInClockDevice::HandlePlugIn_RequestConfigChange: %s  --- calling driver", buf, 0x1Cu);
    }
    if (v6)
    {
      kdebug_trace();
      uint64_t v13 = *(void *)(v3 + 376);
      uint64_t v14 = *(void *)(v13 + 400);
      uint64_t v15 = *(std::__shared_weak_count **)(v13 + 408);
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v16 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v14 + 96))(v14, *(unsigned int *)(v3 + 388), v4, v5);
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      kdebug_trace();
      if (v16 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315906;
        *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 583;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v3 + 112;
        __int16 v57 = 1024;
        int v58 = v16;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInClockDevice::HandlePlugIn_RequestConfigChange: %s  --- driver encountered error %d", buf, 0x22u);
      }
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 588;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v3 + 112;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInClockDevice::HandlePlugIn_RequestConfigChange: %s  --- driver returned", buf, 0x1Cu);
    }
    HALS_ClockDeviceState::HALS_ClockDeviceState((HALS_ClockDeviceState *)buf);
    HALS_ClockDeviceState::Capture(v17, (HALS_ClockDevice *)v3, (const CAPropertyAddressList *)HALS_ClockDeviceState::sStandardDevicePropertiesToCapture);
    HALS_ClockDeviceState::Compare((HALS_ClockDeviceState *)&v39, (const HALS_ClockDeviceState *)buf, (const AudioObjectPropertyAddress *)&v51, v18);
    if ((void)v51 == *((void *)&v51 + 1))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v53 = 136315650;
        *(void *)&v53[4] = "HALS_PlugInClockDevice.cpp";
        *(_WORD *)&v53[12] = 1024;
        *(_DWORD *)&v53[14] = 613;
        __int16 v54 = 2080;
        uint64_t v55 = v3 + 112;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInClockDevice::HandlePlugIn_RequestConfigChange: %s  but nothing changed", v53, 0x1Cu);
      }
    }
    else
    {
      uint64_t v37 = 0x676C6F6264696666;
      LODWORD(v38) = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v51, (AudioObjectPropertyAddress *)&v37, v19);
    }
    strcpy(v53, "egfcbolg");
    v53[9] = 0;
    *(_WORD *)&v53[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v51, (AudioObjectPropertyAddress *)v53, v20);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*(void **)&buf[16]);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(v41);
    uint64_t v26 = *(void *)(v3 + 408);
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 936))(v26);
    }
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    HALS_System::GetInstance(buf, 0, &v39);
    HALS_IOContext_Manager::rebuild_engine_for_device(*(HALS_IOContext_Manager **)(*(void *)buf + 1392), (const HALS_IODevice *)v3);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 634;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v3 + 112;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInClockDevice::HandlePlugIn_RequestConfigChange: %s  --- sending notifications", buf, 0x1Cu);
    }
    kdebug_trace();
    unsigned int v27 = *(_DWORD *)(v3 + 16);
    memset(buf, 0, 24);
    HALS_NotificationManager::GroupPropertiesChanged(1, v27, 0, (uint64_t)&v51, (uint64_t *)buf, (uint64_t)&__p);
    *(void *)uint64_t v53 = buf;
    std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
    uint64_t v28 = v48;
    uint64_t v29 = v49;
    if (v48 != v49)
    {
      uint64_t v30 = v48;
      do
      {
        unsigned int v31 = *v30;
        memset(buf, 0, 24);
        HALS_NotificationManager::GroupPropertiesChanged(1, v31, 0, (uint64_t)&v51, (uint64_t *)buf, (uint64_t)&__p);
        *(void *)uint64_t v53 = buf;
        std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
        ++v30;
      }
      while (v30 != v29);
    }
    kdebug_trace();
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 648;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v3 + 112;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInClockDevice::HandlePlugIn_RequestConfigChange: %s  --- restarting IO", buf, 0x1Cu);
    }
    uint64_t v32 = *(void *)(v3 + 408);
    if (v32)
    {
      (*(void (**)(uint64_t, long long *))(*(void *)v32 + 232))(v32, &v51);
      (*(void (**)(void, void **))(**(void **)(v3 + 408) + 224))(*(void *)(v3 + 408), &__p);
    }
    *(void *)uint64_t v53 = 0;
    *(void *)&v53[8] = 0;
    HALS_System::GetInstance(buf, 0, (uint64_t *)v53);
    uint64_t v33 = (os_unfair_lock_s *)(*(void *)(*(void *)buf + 1392) + 16);
    os_unfair_lock_lock(v33);
    os_unfair_lock_unlock(v33);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    HALS_System::GetInstance(buf, 0, &v37);
    HALS_IOContext_Manager::resume_contexts_for_device(*(os_unfair_lock_s **)(*(void *)buf + 1392), (HALS_IODevice *)v3);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    v36[0] = 0;
    v36[1] = 0;
    HALS_System::GetInstance(buf, 0, v36);
    HALS_System::CheckForDefaultDeviceChanges(*(HALS_System **)buf);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (__p)
    {
      uint64_t v44 = __p;
      operator delete(__p);
    }
    if (v28) {
      operator delete(v28);
    }
    if ((void)v51)
    {
      *((void *)&v51 + 1) = v51;
      operator delete((void *)v51);
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 668;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v3 + 112;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInClockDevice::HandlePlugIn_RequestConfigChange: %s  <---", buf, 0x1Cu);
    }
    kdebug_trace();
  }
  else
  {
    BOOL v21 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
    if (v2)
    {
      if (v21)
      {
        int v23 = *(_DWORD *)(a1 + 60);
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 523;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v23;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInClockDevice::HandlePlugIn_RequestConfigChange: Device %u is no longer valid, calling abort config change", buf, 0x18u);
      }
      if (*(unsigned char *)(a1 + 48))
      {
        uint64_t v24 = *((void *)v2 + 50);
        uint64_t v25 = (std::__shared_weak_count *)*((void *)v2 + 51);
        if (v25) {
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, void, void, void))(*(void *)v24 + 104))(v24, *(unsigned int *)(a1 + 64), *(void *)(a1 + 32), *(void *)(a1 + 40));
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
      }
    }
    else if (v21)
    {
      int v35 = *(_DWORD *)(a1 + 60);
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALS_PlugInClockDevice.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 533;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v35;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInClockDevice::HandlePlugIn_RequestConfigChange: Failed to perform or abort config change request for device %u", buf, 0x18u);
    }
  }
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v3, v22);
  HALS_ObjectMap::ReleaseObject(v2, v34);
}

void sub_1BAD8B234(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  HALS_ObjectMap::ReleaseObject(v31, a2);
  HALS_ObjectMap::ReleaseObject(v30, v34);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest::Manifest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 1065353216;
  uint64_t v7 = (char *)operator new(0xE0uLL);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)uint64_t v7 = &unk_1F1472060;
  long long v8 = *a6;
  uint64_t v9 = *((void *)a6 + 1);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *((_OWORD *)v7 + 2) = 0u;
  v7[24] = 1;
  *((_OWORD *)v7 + 3) = 0u;
  *((_DWORD *)v7 + 16) = 1065353216;
  *(_OWORD *)(v7 + 72) = v8;
  operator new();
}

void sub_1BAD8D934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  a49 = &a63;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  if (a68) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a68);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::~__hash_table((uint64_t)&a35);
  uint64_t v69 = a28;
  uint64_t v70 = *(std::__shared_weak_count **)(a28 + 104);
  if (v70)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
    uint64_t v69 = a28;
  }
  uint64_t v71 = *(std::__shared_weak_count **)(v69 + 80);
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>>>::~__hash_table(a16);
  a35 = a12;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<int>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  if (!(a2 >> 62))
  {
    io_object_t v2 = result;
    BOOL result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
    if (*MEMORY[0x1E4FB7E88]) {
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
    }
  }
  __break(1u);
  return result;
}

void std::unordered_map<std::string,std::shared_ptr<AMCP::Graph::Node>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Graph::Node> const&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100](a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (!v9) {
    goto LABEL_18;
  }
  uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v10.i16[0] = vaddlv_u8(v10);
  unint64_t v11 = v10.u32[0];
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v3 = v7;
    if (v7 >= v9) {
      unint64_t v3 = v7 % v9;
    }
  }
  else
  {
    unint64_t v3 = (v9 - 1) & v7;
  }
  uint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  if (!v12 || (uint64_t v13 = *v12) == 0)
  {
LABEL_18:
    uint64_t v15 = (void *)(a1 + 16);
    int v16 = operator new(0x38uLL);
    v32[0] = v16;
    v32[1] = a1 + 16;
    void *v16 = 0;
    v16[1] = v8;
    *((_OWORD *)v16 + 1) = *(_OWORD *)a2;
    uint64_t v17 = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v19 = *a3;
    uint64_t v18 = a3[1];
    v16[4] = v17;
    v16[5] = v19;
    v16[6] = v18;
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    }
    char v33 = 1;
    float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
    float v21 = *(float *)(a1 + 32);
    if (!v9 || (float)(v21 * (float)v9) < v20)
    {
      BOOL v22 = 1;
      if (v9 >= 3) {
        BOOL v22 = (v9 & (v9 - 1)) != 0;
      }
      unint64_t v23 = v22 | (2 * v9);
      unint64_t v24 = vcvtps_u32_f32(v20 / v21);
      if (v23 <= v24) {
        size_t v25 = v24;
      }
      else {
        size_t v25 = v23;
      }
      std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v25);
      unint64_t v9 = *(void *)(a1 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v8 >= v9) {
          unint64_t v3 = v8 % v9;
        }
        else {
          unint64_t v3 = v8;
        }
      }
      else
      {
        unint64_t v3 = (v9 - 1) & v8;
      }
    }
    uint64_t v26 = *(void *)a1;
    unsigned int v27 = *(void **)(*(void *)a1 + 8 * v3);
    if (v27)
    {
      void *v16 = *v27;
    }
    else
    {
      void *v16 = *v15;
      *uint64_t v15 = v16;
      *(void *)(v26 + 8 * v3) = v15;
      if (!*v16)
      {
LABEL_41:
        v32[0] = 0;
        ++*(void *)(a1 + 24);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)v32);
        return;
      }
      unint64_t v28 = *(void *)(*v16 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v28 >= v9) {
          v28 %= v9;
        }
      }
      else
      {
        v28 &= v9 - 1;
      }
      unsigned int v27 = (void *)(*(void *)a1 + 8 * v28);
    }
    void *v27 = v16;
    goto LABEL_41;
  }
  while (1)
  {
    unint64_t v14 = *((void *)v13 + 1);
    if (v14 == v8) {
      break;
    }
    if (v11 > 1)
    {
      if (v14 >= v9) {
        v14 %= v9;
      }
    }
    else
    {
      v14 &= v9 - 1;
    }
    if (v14 != v3) {
      goto LABEL_18;
    }
LABEL_17:
    uint64_t v13 = *(unsigned __int8 **)v13;
    if (!v13) {
      goto LABEL_18;
    }
  }
  if (!std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v13 + 16, (unsigned __int8 *)a2)) {
    goto LABEL_17;
  }
  uint64_t v30 = *a3;
  uint64_t v29 = a3[1];
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v31 = (std::__shared_weak_count *)*((void *)v13 + 6);
  *((void *)v13 + 5) = v30;
  *((void *)v13 + 6) = v29;
  if (v31)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
}

void sub_1BAD8E36C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(void **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>((unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v15 = (void *)(a1 + 16);
  uint64_t i = operator new(0x38uLL);
  v28[0] = i;
  v28[1] = a1 + 16;
  *(void *)uint64_t i = 0;
  *((void *)i + 1) = v8;
  int v16 = *a3;
  long long v17 = **a3;
  *((void *)i + 4) = *((void *)*a3 + 2);
  *((_OWORD *)i + 1) = v17;
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 2) = 0;
  *(void *)int v16 = 0;
  *((void *)i + 5) = 0;
  *((void *)i + 6) = 0;
  char v29 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void *)a1;
  size_t v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *(void *)uint64_t i = *v25;
LABEL_38:
    *size_t v25 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v15;
  *uint64_t v15 = i;
  *(void *)(v24 + 8 * v3) = v15;
  if (*(void *)i)
  {
    unint64_t v26 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }
    else
    {
      v26 &= v9 - 1;
    }
    size_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
  return i;
}

void sub_1BAD8E5D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>>>::~__hash_table(uint64_t a1)
{
  io_object_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<AMCP::Graph::Node>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      io_object_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void AMCP::Graph::Manifest::create_connection_and_intermediate_tasks(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char **a6, uint64_t *a7, uint64_t a8)
{
  uint64_t v302 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 408))
  {
    AMCP::Graph::Graph_Wire::Connection::Connection((std::string *)__str, (const AMCP::Graph::Graph_Wire::Connection *)(a2 + 192));
  }
  else
  {
    *(_DWORD *)v279 = 0;
    long long v278 = 0u;
    long long v277 = 0u;
    *(_OWORD *)__src = 0u;
    *(_OWORD *)v275 = 0u;
    long long v274 = 0u;
    memset(__str, 0, sizeof(__str));
    *(void *)&v279[4] = 64;
    v281 = 0;
    uint64_t v280 = 0;
    memset(v283, 0, sizeof(v283));
    int v282 = 1;
  }
  uint64_t v194 = a8;
  uint64_t v13 = (uint64_t *)(a1 + 32);
  unint64_t v14 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&__str[40]);
  unint64_t v15 = v14;
  unint64_t v16 = *(void *)(a1 + 40);
  uint64_t v198 = a1;
  if (v16)
  {
    uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v17.i16[0] = vaddlv_u8(v17);
    unint64_t v18 = v17.u32[0];
    if (v17.u32[0] > 1uLL)
    {
      unint64_t v8 = v14;
      if (v14 >= v16) {
        unint64_t v8 = v14 % v16;
      }
    }
    else
    {
      unint64_t v8 = (v16 - 1) & v14;
    }
    float v19 = *(void ***)(*v13 + 8 * v8);
    if (v19)
    {
      BOOL v20 = (char *)*v19;
      if (*v19)
      {
        do
        {
          unint64_t v21 = *((void *)v20 + 1);
          if (v21 == v15)
          {
            if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>((unsigned __int8 *)v20 + 16, &__str[40]))
            {
              goto LABEL_46;
            }
          }
          else
          {
            if (v18 > 1)
            {
              if (v21 >= v16) {
                v21 %= v16;
              }
            }
            else
            {
              v21 &= v16 - 1;
            }
            if (v21 != v8) {
              break;
            }
          }
          BOOL v20 = *(char **)v20;
        }
        while (v20);
      }
    }
  }
  BOOL v20 = (char *)operator new(0x38uLL);
  unint64_t v22 = (void *)(a1 + 48);
  v299.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
  v299.__r_.__value_.__l.__size_ = a1 + 48;
  v299.__r_.__value_.__s.__data_[16] = 0;
  *(void *)BOOL v20 = 0;
  *((void *)v20 + 1) = v15;
  size_t v23 = (std::string *)(v20 + 16);
  if ((__str[63] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)&__str[40], *(std::string::size_type *)&__str[48]);
  }
  else
  {
    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)&__str[40];
    *((void *)v20 + 4) = *(void *)&__str[56];
  }
  *((void *)v20 + 5) = 0;
  *((void *)v20 + 6) = 0;
  v299.__r_.__value_.__s.__data_[16] = 1;
  float v24 = (float)(unint64_t)(*(void *)(a1 + 56) + 1);
  float v25 = *(float *)(a1 + 64);
  if (!v16 || (float)(v25 * (float)v16) < v24)
  {
    BOOL v26 = 1;
    if (v16 >= 3) {
      BOOL v26 = (v16 & (v16 - 1)) != 0;
    }
    unint64_t v27 = v26 | (2 * v16);
    unint64_t v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28) {
      size_t v29 = v28;
    }
    else {
      size_t v29 = v27;
    }
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)v13, v29);
    unint64_t v16 = *(void *)(a1 + 40);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16) {
        unint64_t v8 = v15 % v16;
      }
      else {
        unint64_t v8 = v15;
      }
    }
    else
    {
      unint64_t v8 = (v16 - 1) & v15;
    }
  }
  uint64_t v30 = *v13;
  unsigned int v31 = *(void **)(*v13 + 8 * v8);
  if (v31)
  {
    *(void *)BOOL v20 = *v31;
LABEL_44:
    void *v31 = v20;
    goto LABEL_45;
  }
  *(void *)BOOL v20 = *v22;
  void *v22 = v20;
  *(void *)(v30 + 8 * v8) = v22;
  if (*(void *)v20)
  {
    unint64_t v32 = *(void *)(*(void *)v20 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v32 >= v16) {
        v32 %= v16;
      }
    }
    else
    {
      v32 &= v16 - 1;
    }
    unsigned int v31 = (void *)(*v13 + 8 * v32);
    goto LABEL_44;
  }
LABEL_45:
  v299.__r_.__value_.__r.__words[0] = 0;
  ++*(void *)(a1 + 56);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v299);
LABEL_46:
  char v33 = (std::__shared_weak_count *)*((void *)v20 + 6);
  v271 = (char *)*((void *)v20 + 5);
  v272 = v33;
  if (v33) {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::Graph::Terminal::get_description((AMCP::Graph::Terminal *)v269, a4);
  memset(v255, 0, sizeof(v255));
  long long v257 = 0u;
  long long v258 = 0u;
  int v256 = 0;
  int v259 = 0;
  long long v260 = 0u;
  long long v261 = 0u;
  std::logic_error v262 = (std::logic_error)0;
  long long v263 = 0u;
  memset(v264, 0, sizeof(v264));
  std::string::operator=((std::string *)v255, (const std::string *)__str);
  *(void *)&v255[24] = *(void *)&__str[24];
  int v256 = *(_DWORD *)&__str[32];
  std::string::operator=((std::string *)&v257, (const std::string *)&__str[40]);
  *((void *)&v258 + 1) = v274;
  int v259 = DWORD2(v274);
  uint64_t v35 = *(void *)(a2 + 416);
  uint64_t v34 = *(void *)(a2 + 424);
  if (v34) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v36 = (std::__shared_weak_count *)*((void *)&v260 + 1);
  *(void *)&long long v260 = v35;
  *((void *)&v260 + 1) = v34;
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  uint64_t v38 = *(void *)(a2 + 432);
  uint64_t v37 = *(void *)(a2 + 440);
  if (v37) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v39 = (std::__shared_weak_count *)*((void *)&v261 + 1);
  *(void *)&long long v261 = v38;
  *((void *)&v261 + 1) = v37;
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if (!(void)v260)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v39);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v299, "com.apple.coreaudio", "AMCP");
    uint64_t v144 = *(NSObject **)v299.__r_.__value_.__l.__data_;
    if (v299.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v299.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v144, OS_LOG_TYPE_ERROR))
    {
      uint64_t v145 = pthread_self();
      mach_port_t v146 = pthread_mach_thread_np(v145);
      AMCP::Terminal_Identifier_to_string(&v238, (const void **)__str);
      int v147 = (v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &v238
           : (std::string *)v238.__r_.__value_.__r.__words[0];
      LODWORD(v299.__r_.__value_.__l.__data_) = 67110146;
      HIDWORD(v299.__r_.__value_.__r.__words[0]) = v146;
      LOWORD(v299.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v299.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Wire.cpp";
      WORD1(v299.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v299.__r_.__value_.__r.__words[2]) = 153;
      *(_WORD *)v300 = 2080;
      *(void *)&v300[2] = "not (info.m_source_clock != nullptr)";
      *(_WORD *)&v300[10] = 2080;
      *(void *)&v300[12] = v147;
      _os_log_error_impl(&dword_1BAA78000, v144, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Missing clock for wire - %s", (uint8_t *)&v299, 0x2Cu);
      if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v238.__r_.__value_.__l.__data_);
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v230);
    __cxa_allocate_exception(0x40uLL);
    AMCP::Terminal_Identifier_to_string((std::string *)v292, (const void **)__str);
    if (v292[23] >= 0) {
      std::logic_error v148 = v292;
    }
    else {
      std::logic_error v148 = *(unsigned char **)v292;
    }
    caulk::make_string((caulk *)"Missing clock for wire - %s", (uint64_t)v287, v148);
    std::logic_error::logic_error((std::logic_error *)&v233, (const std::string *)v287);
    v233.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error((std::logic_error *)&v238, (const std::logic_error *)&v233);
    long long v239 = 0uLL;
    uint64_t v240 = 0;
    LODWORD(v241) = -1;
    v238.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v238.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v299, (uint64_t)&v238);
    *(void *)&v300[8] = "Graph_Wire::Wire_Info AMCP::Graph::Graph_Wire::get_wire_info_for_connection(const Connection &"
                          ", const Node_Map &) const";
    *(void *)&v300[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Wire.cpp";
    *(_DWORD *)&v300[24] = 153;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v236);
    *(std::logic_error *)&v295[8] = v236;
    *(void *)v295 = &unk_1F148AA90;
    *(void *)&v295[24] = *(void *)v237;
    v236.__vftable = 0;
    v236.__imp_.__imp_ = 0;
    *(void *)v237 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (!(void)v261)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v39);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v299, "com.apple.coreaudio", "AMCP");
    __int16 v149 = *(NSObject **)v299.__r_.__value_.__l.__data_;
    if (v299.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v299.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v149, OS_LOG_TYPE_ERROR))
    {
      int v150 = pthread_self();
      mach_port_t v151 = pthread_mach_thread_np(v150);
      AMCP::Terminal_Identifier_to_string(&v238, (const void **)&__str[40]);
      uint64_t v152 = (v238.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &v238
           : (std::string *)v238.__r_.__value_.__r.__words[0];
      LODWORD(v299.__r_.__value_.__l.__data_) = 67110146;
      HIDWORD(v299.__r_.__value_.__r.__words[0]) = v151;
      LOWORD(v299.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v299.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Wire.cpp";
      WORD1(v299.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v299.__r_.__value_.__r.__words[2]) = 154;
      *(_WORD *)v300 = 2080;
      *(void *)&v300[2] = "not (info.m_dest_clock != nullptr)";
      *(_WORD *)&v300[10] = 2080;
      *(void *)&v300[12] = v152;
      _os_log_error_impl(&dword_1BAA78000, v149, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Missing clock for wire - %s", (uint8_t *)&v299, 0x2Cu);
      if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v238.__r_.__value_.__l.__data_);
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v230);
    __cxa_allocate_exception(0x40uLL);
    AMCP::Terminal_Identifier_to_string((std::string *)v292, (const void **)&__str[40]);
    if (v292[23] >= 0) {
      uint64_t v153 = v292;
    }
    else {
      uint64_t v153 = *(unsigned char **)v292;
    }
    caulk::make_string((caulk *)"Missing clock for wire - %s", (uint64_t)v287, v153);
    std::logic_error::logic_error((std::logic_error *)&v233, (const std::string *)v287);
    v233.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error((std::logic_error *)&v238, (const std::logic_error *)&v233);
    long long v239 = 0uLL;
    uint64_t v240 = 0;
    LODWORD(v241) = -1;
    v238.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v238.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v299, (uint64_t)&v238);
    *(void *)&v300[8] = "Graph_Wire::Wire_Info AMCP::Graph::Graph_Wire::get_wire_info_for_connection(const Connection &"
                          ", const Node_Map &) const";
    *(void *)&v300[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Wire.cpp";
    *(_DWORD *)&v300[24] = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v236);
    *(std::logic_error *)&v295[8] = v236;
    *(void *)v295 = &unk_1F148AA90;
    *(void *)&v295[24] = *(void *)v237;
    v236.__vftable = 0;
    v236.__imp_.__imp_ = 0;
    *(void *)v237 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t terminal_for_key = get_terminal_for_key((uint64_t)__str, a3);
  std::logic_error v41 = *(std::logic_error *)terminal_for_key;
  long long v42 = *(_OWORD *)(terminal_for_key + 16);
  *(void *)&v264[0] = *(void *)(terminal_for_key + 32);
  long long v263 = v42;
  std::logic_error v262 = v41;
  uint64_t v43 = get_terminal_for_key((uint64_t)&__str[40], a3);
  long long v44 = *(_OWORD *)v43;
  long long v45 = *(_OWORD *)(v43 + 16);
  *((void *)&v264[2] + 1) = *(void *)(v43 + 32);
  *(_OWORD *)((char *)&v264[1] + 8) = v45;
  *(_OWORD *)((char *)v264 + 8) = v44;
  double v46 = *(double *)&v262.__vftable;
  uint64_t v47 = *(void *)(a2 + 416);
  uint64_t v48 = *(std::__shared_weak_count **)(a2 + 424);
  if (v48) {
    atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v50 = (*(double (**)(uint64_t))(*(void *)v47 + 152))(v47);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  if (v46 != v50)
  {
    AMCP::Log::Scope_Registry::get(v49);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v299, "com.apple.coreaudio", "AMCP");
    uint64_t v154 = *(NSObject **)v299.__r_.__value_.__l.__data_;
    if (v299.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v299.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
    {
      uint64_t v155 = pthread_self();
      mach_port_t v156 = pthread_mach_thread_np(v155);
      LODWORD(v299.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v299.__r_.__value_.__r.__words[0]) = v156;
      LOWORD(v299.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v299.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Wire.cpp";
      WORD1(v299.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v299.__r_.__value_.__r.__words[2]) = 161;
      *(_WORD *)v300 = 2080;
      *(void *)&v300[2] = "not (info.m_source_format.mSampleRate == get_source_timebase()->get_sample_rate())";
      _os_log_error_impl(&dword_1BAA78000, v154, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Unexpected sample rate for connection", (uint8_t *)&v299, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v233);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Unexpected sample rate for connection", (uint64_t)v287);
    std::logic_error::logic_error(&v236, (const std::string *)v287);
    v236.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v238, &v236);
    long long v239 = 0uLL;
    uint64_t v240 = 0;
    LODWORD(v241) = -1;
    v238.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v238.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v299, (uint64_t)&v238);
    *(void *)&v300[8] = "Graph_Wire::Wire_Info AMCP::Graph::Graph_Wire::get_wire_info_for_connection(const Connection &"
                          ", const Node_Map &) const";
    *(void *)&v300[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Wire.cpp";
    *(_DWORD *)&v300[24] = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v292);
    *(std::string *)&v295[8] = *(std::string *)v292;
    *(void *)v295 = &unk_1F148AA90;
    memset(v292, 0, 24);
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  double v51 = *((double *)v264 + 1);
  uint64_t v52 = *(void *)(a2 + 432);
  uint64_t v53 = *(std::__shared_weak_count **)(a2 + 440);
  if (v53) {
    atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v55 = (*(double (**)(uint64_t))(*(void *)v52 + 152))(v52);
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  if (v51 != v55)
  {
    AMCP::Log::Scope_Registry::get(v54);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v299, "com.apple.coreaudio", "AMCP");
    v157 = *(NSObject **)v299.__r_.__value_.__l.__data_;
    if (v299.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v299.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
    {
      uint64_t v158 = pthread_self();
      mach_port_t v159 = pthread_mach_thread_np(v158);
      LODWORD(v299.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v299.__r_.__value_.__r.__words[0]) = v159;
      LOWORD(v299.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v299.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Wire.cpp";
      WORD1(v299.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v299.__r_.__value_.__r.__words[2]) = 162;
      *(_WORD *)v300 = 2080;
      *(void *)&v300[2] = "not (info.m_dest_format.mSampleRate == get_dest_timebase()->get_sample_rate())";
      _os_log_error_impl(&dword_1BAA78000, v157, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Unexpected sample rate for connection", (uint8_t *)&v299, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v233);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Unexpected sample rate for connection", (uint64_t)v287);
    std::logic_error::logic_error(&v236, (const std::string *)v287);
    v236.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v238, &v236);
    long long v239 = 0uLL;
    uint64_t v240 = 0;
    LODWORD(v241) = -1;
    v238.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v238.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v299, (uint64_t)&v238);
    *(void *)&v300[8] = "Graph_Wire::Wire_Info AMCP::Graph::Graph_Wire::get_wire_info_for_connection(const Connection &"
                          ", const Node_Map &) const";
    *(void *)&v300[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Wire.cpp";
    *(_DWORD *)&v300[24] = 162;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v292);
    *(std::string *)&v295[8] = *(std::string *)v292;
    *(void *)v295 = &unk_1F148AA90;
    memset(v292, 0, 24);
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v56 = *(void *)(terminal_for_key + 104);
  if ((v56 & 0xFF00000000) == 0)
  {
    AMCP::Log::Scope_Registry::get(v54);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v299, "com.apple.coreaudio", "AMCP");
    long long v160 = *(NSObject **)v299.__r_.__value_.__l.__data_;
    if (v299.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v299.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
    {
      long long v161 = pthread_self();
      mach_port_t v162 = pthread_mach_thread_np(v161);
      LODWORD(v299.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v299.__r_.__value_.__r.__words[0]) = v162;
      LOWORD(v299.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v299.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Wire.cpp";
      WORD1(v299.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v299.__r_.__value_.__r.__words[2]) = 164;
      *(_WORD *)v300 = 2080;
      *(void *)&v300[2] = "not (source_terminal.get_buffer_alignment().has_value())";
      _os_log_error_impl(&dword_1BAA78000, v160, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Source terminal is missing buffer alignment.", (uint8_t *)&v299, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v233);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Source terminal is missing buffer alignment.", (uint64_t)v287);
    std::logic_error::logic_error(&v236, (const std::string *)v287);
    v236.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v238, &v236);
    long long v239 = 0uLL;
    uint64_t v240 = 0;
    LODWORD(v241) = -1;
    v238.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v238.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v299, (uint64_t)&v238);
    *(void *)&v300[8] = "Graph_Wire::Wire_Info AMCP::Graph::Graph_Wire::get_wire_info_for_connection(const Connection &"
                          ", const Node_Map &) const";
    *(void *)&v300[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Wire.cpp";
    *(_DWORD *)&v300[24] = 164;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v292);
    *(std::string *)&v295[8] = *(std::string *)v292;
    *(void *)v295 = &unk_1F148AA90;
    memset(v292, 0, 24);
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v57 = *(void *)(v43 + 104);
  if ((v57 & 0xFF00000000) == 0)
  {
    AMCP::Log::Scope_Registry::get(v54);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v299, "com.apple.coreaudio", "AMCP");
    uint64_t v163 = *(NSObject **)v299.__r_.__value_.__l.__data_;
    if (v299.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v299.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v163, OS_LOG_TYPE_ERROR))
    {
      v164 = pthread_self();
      mach_port_t v165 = pthread_mach_thread_np(v164);
      LODWORD(v299.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v299.__r_.__value_.__r.__words[0]) = v165;
      LOWORD(v299.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v299.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Wire.cpp";
      WORD1(v299.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v299.__r_.__value_.__r.__words[2]) = 165;
      *(_WORD *)v300 = 2080;
      *(void *)&v300[2] = "not (dest_terminal.get_buffer_alignment().has_value())";
      _os_log_error_impl(&dword_1BAA78000, v163, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Destination terminal is missing buffer alignment.", (uint8_t *)&v299, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v233);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Destination terminal is missing buffer alignment.", (uint64_t)v287);
    std::logic_error::logic_error(&v236, (const std::string *)v287);
    v236.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v238, &v236);
    long long v239 = 0uLL;
    uint64_t v240 = 0;
    LODWORD(v241) = -1;
    v238.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v238.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v299, (uint64_t)&v238);
    *(void *)&v300[8] = "Graph_Wire::Wire_Info AMCP::Graph::Graph_Wire::get_wire_info_for_connection(const Connection &"
                          ", const Node_Map &) const";
    *(void *)&v300[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Wire.cpp";
    *(_DWORD *)&v300[24] = 165;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v292);
    *(std::string *)&v295[8] = *(std::string *)v292;
    *(void *)v295 = &unk_1F148AA90;
    memset(v292, 0, 24);
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (v56 != v57)
  {
    AMCP::Log::Scope_Registry::get(v54);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v299, "com.apple.coreaudio", "AMCP");
    long long v166 = *(NSObject **)v299.__r_.__value_.__l.__data_;
    if (v299.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v299.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v166, OS_LOG_TYPE_ERROR))
    {
      long long v167 = pthread_self();
      mach_port_t v168 = pthread_mach_thread_np(v167);
      LODWORD(v299.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v299.__r_.__value_.__r.__words[0]) = v168;
      LOWORD(v299.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v299.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Wire.cpp";
      WORD1(v299.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v299.__r_.__value_.__r.__words[2]) = 168;
      *(_WORD *)v300 = 2080;
      *(void *)&v300[2] = "not (src_alignment == dest_alignment)";
      _os_log_error_impl(&dword_1BAA78000, v166, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Source and dest terminals should have the same alignment.", (uint8_t *)&v299, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v233);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Source and dest terminals should have the same alignment.", (uint64_t)v287);
    std::logic_error::logic_error(&v236, (const std::string *)v287);
    v236.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v238, &v236);
    long long v239 = 0uLL;
    uint64_t v240 = 0;
    LODWORD(v241) = -1;
    v238.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v238.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v299, (uint64_t)&v238);
    *(void *)&v300[8] = "Graph_Wire::Wire_Info AMCP::Graph::Graph_Wire::get_wire_info_for_connection(const Connection &"
                          ", const Node_Map &) const";
    *(void *)&v300[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Wire.cpp";
    *(_DWORD *)&v300[24] = 168;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v292);
    *(std::string *)&v295[8] = *(std::string *)v292;
    *(void *)v295 = &unk_1F148AA90;
    memset(v292, 0, 24);
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  int v267 = *(void *)(terminal_for_key + 104);
  int v265 = HIDWORD(v278);
  if (*(_DWORD *)(terminal_for_key + 100))
  {
    if (*(_DWORD *)(v43 + 100)) {
      int v58 = 2;
    }
    else {
      int v58 = 1;
    }
    unsigned int v266 = v58;
  }
  else
  {
    unsigned int v266 = 0;
  }
  int v268 = v283[1];
  long long v245 = 0u;
  long long v246 = 0u;
  long long v247 = 0u;
  LODWORD(v244) = 0;
  int v248 = 0;
  v254 = 0;
  uint64_t v253 = 0;
  v238.__r_.__value_.__s.__data_[0] = (v278 | HIDWORD(v278)) != 0;
  v238.__r_.__value_.__s.__data_[1] = DWORD1(v278) != 0;
  v238.__r_.__value_.__s.__data_[2] = __src[1] != (void *)v277;
  v238.__r_.__value_.__s.__data_[3] = DWORD2(v278) == 1;
  v238.__r_.__value_.__s.__data_[4] = *(void *)&v283[3] != *(void *)&v283[5];
  v238.__r_.__value_.__s.__data_[5] = v280 != 0;
  uint64_t v60 = *(void *)(a2 + 416);
  uint64_t v59 = *(std::__shared_weak_count **)(a2 + 424);
  if (v59) {
    atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v249 = v60;
  v250 = v59;
  uint64_t v62 = *(void *)(a2 + 432);
  uint64_t v61 = *(std::__shared_weak_count **)(a2 + 440);
  if (v61) {
    atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v251 = v62;
  v252 = v61;
  uint64_t v63 = *(void *)(a2 + 148);
  *(std::logic_error *)&v238.__r_.__value_.__r.__words[1] = v262;
  long long v239 = v263;
  uint64_t v240 = *(void *)&v264[0];
  long long v241 = *(_OWORD *)((char *)v264 + 8);
  long long v242 = *(_OWORD *)((char *)&v264[1] + 8);
  uint64_t v243 = *((void *)&v264[2] + 1);
  uint64_t v244 = v63;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v245, (char *)__src[1], v277, (uint64_t)(v277 - (unint64_t)__src[1]) >> 2);
  uint64_t v64 = (std::__shared_weak_count *)std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v246 + 8, *(char **)&v283[3], *(uint64_t *)&v283[5], (uint64_t)(*(void *)&v283[5] - *(void *)&v283[3]) >> 2);
  int v248 = v270;
  uint64_t v65 = v280;
  if (v280)
  {
    uint64_t v66 = v281;
    if (v281) {
      atomic_fetch_add_explicit(&v281->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v64 = v254;
    uint64_t v253 = v65;
    v254 = v66;
    if (v64) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v64);
    }
  }
  uint64_t v244 = *(void *)v279;
  if (!v238.__r_.__value_.__s.__data_[0])
  {
    if (v265
      || (double v67 = (*(double (**)(void))(*(void *)v260 + 152))(v260),
          v67 != (*(double (**)(void))(*(void *)v261 + 152))(v261)))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v64);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v299, "com.apple.coreaudio", "AMCP");
      uint64_t v136 = *(NSObject **)v299.__r_.__value_.__l.__data_;
      if (v299.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v299.__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v136, OS_LOG_TYPE_ERROR))
      {
        std::string v137 = pthread_self();
        mach_port_t v138 = pthread_mach_thread_np(v137);
        LODWORD(v299.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(v299.__r_.__value_.__r.__words[0]) = v138;
        LOWORD(v299.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v299.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest.cpp";
        WORD1(v299.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v299.__r_.__value_.__r.__words[2]) = 231;
        *(_WORD *)v300 = 2080;
        *(void *)&v300[2] = "not (conversion_info.m_requires_resampler || (wire_info.m_drift_correction == Drift_Correc"
                              "tion_Status::NoDriftCorrection && wire_info.m_source_clock->get_sample_rate() == wire_info"
                              ".m_dest_clock->get_sample_rate()))";
        _os_log_error_impl(&dword_1BAA78000, v136, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Drift correction can only be disabled for timebases with the same nominal sample rate.", (uint8_t *)&v299, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v230);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Drift correction can only be disabled for timebases with the same nominal sample rate.", (uint64_t)v292);
      std::logic_error::logic_error((std::logic_error *)&v233, (const std::string *)v292);
      v233.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
      std::logic_error::logic_error((std::logic_error *)v295, (const std::logic_error *)&v233);
      memset(&v295[24], 0, 24);
      *(_DWORD *)&v295[48] = -1;
      *(void *)v295 = &unk_1F1489CC8;
      *(void *)&v295[16] = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v299, (uint64_t)v295);
      *(void *)&v300[8] = "void AMCP::Graph::Manifest::create_connection_and_intermediate_tasks(const Graph_Wire &, Nod"
                            "e_Map, const Terminal &, Terminal_Identifier, std::shared_ptr<Manifest_Task>, std::vector<st"
                            "d::shared_ptr<Manifest_Task>> &, std::shared_ptr<Manifest_Inventory>)";
      *(void *)&v300[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
      *(_DWORD *)&v300[24] = 231;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v236);
      *(std::logic_error *)&v287[8] = v236;
      *(void *)v287 = &unk_1F148AA90;
      *(void *)&v287[24] = *(void *)v237;
      v236.__vftable = 0;
      v236.__imp_.__imp_ = 0;
      *(void *)v237 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
  }
  if (*(_DWORD *)&v279[8])
  {
    int v68 = 4;
  }
  else if (v283[0] == 1)
  {
    int v68 = 3;
  }
  else if (v282 == 1)
  {
    int v68 = 2;
  }
  else if (v283[2])
  {
    int v68 = 1;
  }
  else
  {
    int v68 = v266 < 2 || v283[1] != 0;
  }
  std::logic_error v236 = v262;
  *(_OWORD *)v237 = v263;
  *(void *)&v237[16] = *(void *)&v264[0];
  long long v70 = v260;
  if (*((void *)&v260 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v260 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  if ((__str[23] & 0x80000000) != 0) {
    std::string::__init_copy_ctor_external(&v233, *(const std::string::value_type **)__str, *(std::string::size_type *)&__str[8]);
  }
  else {
    std::string v233 = *(std::string *)__str;
  }
  unint64_t v234 = *(void *)&__str[24];
  int v235 = *(_DWORD *)&__str[32];
  int v191 = v68;
  if ((__str[63] & 0x80000000) != 0) {
    std::string::__init_copy_ctor_external(&v230, *(const std::string::value_type **)&__str[40], *(std::string::size_type *)&__str[48]);
  }
  else {
    std::string v230 = *(std::string *)&__str[40];
  }
  unint64_t v231 = v274;
  int v232 = DWORD2(v274);
  uint64_t v71 = v260;
  uint64_t v72 = v261;
  if (*(char *)(a2 + 63) < 0) {
    std::string::__init_copy_ctor_external(&v299, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else {
    std::string v299 = *(std::string *)(a2 + 40);
  }
  *(void *)v300 = *(void *)(a2 + 64);
  *(_DWORD *)&v300[8] = *(_DWORD *)(a2 + 72);
  uint64_t v73 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(a3, (unsigned __int8 *)&v299);
  int v74 = v73;
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v299.__r_.__value_.__l.__data_);
  }
  if (v238.__r_.__value_.__s.__data_[0]
    || *(_DWORD *)&v238.__r_.__value_.__s.__data_[2]
    || *(_DWORD *)(*((void *)v74 + 5) + 16) == 3 && v71 != v72)
  {
    uint64_t v75 = *(void *)(a1 + 80);
    if (v75) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v75 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v76 = operator new(0xF0uLL);
    v76[1] = 0;
    v76[2] = 0;
    *uint64_t v76 = &unk_1F1470960;
    AMCP::Graph::Converter::Converter((AMCP::Graph::Converter *)(v76 + 3), (const AMCP::Graph::Graph_Wire::Conversion_Info *)&v238, (const AMCP::Graph::Graph_Wire::Wire_Info *)v255);
  }
  uint64_t v77 = *(void *)(a1 + 72);
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v220, v233.__r_.__value_.__l.__data_, v233.__r_.__value_.__l.__size_);
  }
  else {
    std::string v220 = v233;
  }
  unint64_t v221 = v234;
  int v222 = v235;
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v217, v230.__r_.__value_.__l.__data_, v230.__r_.__value_.__l.__size_);
  }
  else {
    std::string v217 = v230;
  }
  int v219 = v232;
  std::string v223 = v220;
  unint64_t v224 = v234;
  memset(&v220, 0, sizeof(v220));
  int v225 = v235;
  long long v226 = *(_OWORD *)&v217.__r_.__value_.__l.__data_;
  std::string::size_type v78 = v217.__r_.__value_.__r.__words[2];
  memset(&v217, 0, sizeof(v217));
  unint64_t v218 = v231;
  int v229 = v232;
  uint64_t v227 = v78;
  unint64_t v228 = v231;
  if (*((void *)&v70 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v70 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  if (*(void *)v194 == v77)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v73);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v299, "com.apple.coreaudio", "AMCP");
    uint64_t v169 = *(NSObject **)v299.__r_.__value_.__l.__data_;
    if (v299.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v299.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v169, OS_LOG_TYPE_ERROR))
    {
      v170 = pthread_self();
      mach_port_t v171 = pthread_mach_thread_np(v170);
      LODWORD(v299.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v299.__r_.__value_.__r.__words[0]) = v171;
      LOWORD(v299.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v299.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Inventory.cpp";
      WORD1(v299.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v299.__r_.__value_.__r.__words[2]) = 412;
      *(_WORD *)v300 = 2080;
      *(void *)&v300[2] = "not (previous_inventory.get() != this)";
      _os_log_error_impl(&dword_1BAA78000, v169, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Bad arguments to Manifest_Inventory::request_buffer_for_terminal", (uint8_t *)&v299, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v284);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Bad arguments to Manifest_Inventory::request_buffer_for_terminal", (uint64_t)v292);
    std::logic_error::logic_error((std::logic_error *)&v286, (const std::string *)v292);
    v286.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error((std::logic_error *)v295, (const std::logic_error *)&v286);
    memset(&v295[24], 0, 24);
    *(_DWORD *)&v295[48] = -1;
    *(void *)v295 = &unk_1F1489CC8;
    *(void *)&v295[16] = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v299, (uint64_t)v295);
    *(void *)&v300[8] = "std::shared_ptr<Manifest_Buffer> AMCP::Graph::Manifest_Inventory::request_buffer_for_terminal("
                          "const std::shared_ptr<Manifest_Inventory> &, Wire_Identifier, const Node_Map &, const CA::Stre"
                          "amDescription &, Manifest_Buffer::Buffer_Style, Timebase_Ref, Drift_Correction_Status, Node_Bu"
                          "ffer_Ownership, Buffer_Alignment, int32_t)";
    *(void *)&v300[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Inventory.cpp";
    *(_DWORD *)&v300[24] = 412;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v293.__r_.__value_.__l.__data_);
    *(std::string *)&v287[8] = v293;
    *(void *)v287 = &unk_1F148AA90;
    memset(&v293, 0, sizeof(v293));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v193 = v77;
  long long v79 = a3;
  int v80 = v265;
  int v81 = v266;
  int v82 = v267;
  int v190 = v268;
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v299, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
  }
  else {
    std::string v299 = v223;
  }
  *(void *)v300 = v224;
  *(_DWORD *)&v300[8] = v225;
  if (SHIBYTE(v227) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v300[16], (const std::string::value_type *)v226, *((std::string::size_type *)&v226 + 1));
  }
  else
  {
    *(_OWORD *)&v300[16] = v226;
    *(void *)&v300[32] = v227;
  }
  *(void *)&v300[40] = v228;
  LODWORD(v301) = v229;
  int v189 = v80;
  if (*(void *)v194
    && (uint64_t v83 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::find<AMCP::Wire_Identifier>((void *)(*(void *)v194 + 8), (unsigned __int8 **)&v299)) != 0)
  {
    uint64_t v84 = v83[12];
    uint64_t v85 = (std::__shared_weak_count *)v83[13];
    if (v85)
    {
      atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)v295 = v84;
    *(void *)&v295[8] = v85;
    AMCP::Graph::Manifest_Inventory::add_buffer(v193, (uint64_t *)v295);
    if (v85) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v85);
    }
  }
  else
  {
    uint64_t v85 = 0;
    uint64_t v84 = 0;
  }
  if ((v300[39] & 0x80000000) != 0) {
    operator delete(*(void **)&v300[16]);
  }
  if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v299.__r_.__value_.__l.__data_);
    if (!v81) {
      goto LABEL_153;
    }
  }
  else if (!v81)
  {
    goto LABEL_153;
  }
  if (v84)
  {
    int v86 = v85;
    goto LABEL_220;
  }
LABEL_153:
  v188 = v85;
  if (v81)
  {
    if (v81 != 1)
    {
      char v101 = (void *)(v193 + 24);
      do
      {
        while (1)
        {
          char v101 = (void *)*v101;
          if (!v101)
          {
            std::string::size_type v107 = 0;
            goto LABEL_195;
          }
          uint64_t v102 = v101[12];
          if (*(char *)(v102 + 31) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v295, *(const std::string::value_type **)(v102 + 8), *(void *)(v102 + 16));
          }
          else
          {
            long long v103 = *(_OWORD *)(v102 + 8);
            *(void *)&v295[16] = *(void *)(v102 + 24);
            *(_OWORD *)v295 = v103;
          }
          *(void *)&v295[24] = *(void *)(v102 + 32);
          *(_DWORD *)&v295[32] = *(_DWORD *)(v102 + 40);
          *(void *)v287 = v295;
          *(void *)&v287[8] = &v295[24];
          *(void *)&v287[16] = &v295[32];
          *(void *)v292 = &v223;
          *(void *)&v292[8] = &v224;
          *(void *)&v292[16] = &v225;
          BOOL v104 = std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)v287, (unsigned __int8 ***)v292);
          BOOL v105 = v104;
          if ((v295[23] & 0x80000000) != 0) {
            break;
          }
          if (v104) {
            goto LABEL_192;
          }
        }
        operator delete(*(void **)v295);
      }
      while (!v105);
LABEL_192:
      uint64_t v106 = v101[12];
      std::string::size_type v107 = *(void *)(v106 + 304);
      uint64_t v89 = *(std::__shared_weak_count **)(v106 + 312);
      if (v89)
      {
        atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
        v293.__r_.__value_.__r.__words[0] = v107;
        v293.__r_.__value_.__l.__size_ = (std::string::size_type)v89;
        BOOL v100 = 0;
        goto LABEL_182;
      }
LABEL_195:
      uint64_t v89 = 0;
      *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v107;
      BOOL v100 = 1;
      goto LABEL_196;
    }
    char v87 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v79, (unsigned __int8 *)&v226);
    if (!v87)
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v295, "com.apple.coreaudio", "AMCP");
      v180 = **(NSObject ***)v295;
      if (*(void *)&v295[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v295[8]);
      }
      if (os_log_type_enabled(v180, OS_LOG_TYPE_ERROR))
      {
        v181 = pthread_self();
        mach_port_t v182 = pthread_mach_thread_np(v181);
        if (v227 >= 0) {
          v183 = &v226;
        }
        else {
          v183 = (long long *)v226;
        }
        *(_DWORD *)v295 = 67110146;
        *(_DWORD *)&v295[4] = v182;
        *(_WORD *)&v295[8] = 2080;
        *(void *)&v295[10] = "Manifest_Inventory.cpp";
        *(_WORD *)&v295[18] = 1024;
        *(_DWORD *)&v295[20] = 435;
        *(_WORD *)&v295[24] = 2080;
        *(void *)&v295[26] = "not (found_node != nodes.end())";
        *(_WORD *)&v295[34] = 2080;
        *(void *)&v295[36] = v183;
        _os_log_error_impl(&dword_1BAA78000, v180, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Missing node for connection in when building manifest: %s", v295, 0x2Cu);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v291);
      __cxa_allocate_exception(0x40uLL);
      if (v227 >= 0) {
        v184 = &v226;
      }
      else {
        v184 = (long long *)v226;
      }
      caulk::make_string((caulk *)"Missing node for connection in when building manifest: %s", (uint64_t)&v293, v184);
      std::logic_error::logic_error(&v284, &v293);
      v284.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error((std::logic_error *)v287, &v284);
      uint64_t v288 = 0;
      *(void *)&v287[24] = 0;
      uint64_t v289 = 0;
      int v290 = -1;
      *(void *)v287 = &unk_1F1489CC8;
      *(void *)&v287[16] = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v295, (uint64_t)v287);
      *(void *)&v295[32] = "std::shared_ptr<Manifest_Buffer> AMCP::Graph::Manifest_Inventory::request_buffer_for_termin"
                             "al(const std::shared_ptr<Manifest_Inventory> &, Wire_Identifier, const Node_Map &, const CA"
                             "::StreamDescription &, Manifest_Buffer::Buffer_Style, Timebase_Ref, Drift_Correction_Status"
                             ", Node_Buffer_Ownership, Buffer_Alignment, int32_t)";
      *(void *)&v295[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Inventory.cpp";
      *(_DWORD *)&v295[48] = 435;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v286.__r_.__value_.__l.__data_);
      *(std::string *)&v292[8] = v286;
      *(void *)v292 = &unk_1F148AA90;
      memset(&v286, 0, sizeof(v286));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    nth_wire_ref = (AMCP::Log::Scope_Registry *)AMCP::Graph::Node::get_nth_wire_ref((AMCP::Log::Scope_Registry *)v295, *((void *)v87 + 5), v228, 1u);
    uint64_t v89 = *(std::__shared_weak_count **)&v295[8];
    std::string::size_type v90 = *(void *)v295;
    if (!*(void *)v295)
    {
      AMCP::Log::Scope_Registry::get(nth_wire_ref);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v295, "com.apple.coreaudio", "AMCP");
      v185 = **(NSObject ***)v295;
      if (*(void *)&v295[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v295[8]);
      }
      if (os_log_type_enabled(v185, OS_LOG_TYPE_ERROR))
      {
        v186 = pthread_self();
        mach_port_t v187 = pthread_mach_thread_np(v186);
        *(_DWORD *)v295 = 67109890;
        *(_DWORD *)&v295[4] = v187;
        *(_WORD *)&v295[8] = 2080;
        *(void *)&v295[10] = "Manifest_Inventory.cpp";
        *(_WORD *)&v295[18] = 1024;
        *(_DWORD *)&v295[20] = 438;
        *(_WORD *)&v295[24] = 2080;
        *(void *)&v295[26] = "not ((wire_buffer) != nullptr)";
        _os_log_error_impl(&dword_1BAA78000, v185, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", v295, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v291);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v293);
      std::logic_error::logic_error(&v284, &v293);
      v284.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error((std::logic_error *)v287, &v284);
      uint64_t v288 = 0;
      *(void *)&v287[24] = 0;
      uint64_t v289 = 0;
      int v290 = -1;
      *(void *)v287 = &unk_1F1489CC8;
      *(void *)&v287[16] = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v295, (uint64_t)v287);
      *(void *)&v295[32] = "std::shared_ptr<Manifest_Buffer> AMCP::Graph::Manifest_Inventory::request_buffer_for_termin"
                             "al(const std::shared_ptr<Manifest_Inventory> &, Wire_Identifier, const Node_Map &, const CA"
                             "::StreamDescription &, Manifest_Buffer::Buffer_Style, Timebase_Ref, Drift_Correction_Status"
                             ", Node_Buffer_Ownership, Buffer_Alignment, int32_t)";
      *(void *)&v295[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Inventory.cpp";
      *(_DWORD *)&v295[48] = 438;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v286.__r_.__value_.__l.__data_);
      *(std::string *)&v292[8] = v286;
      *(void *)v292 = &unk_1F148AA90;
      memset(&v286, 0, sizeof(v286));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    uint64_t v91 = (AMCP::Log::Scope_Registry *)(*(void *(**)(unsigned char *__return_ptr, void))(**(void **)v295 + 80))(v295, *(void *)v295);
    if (*(double *)&v236.__vftable != *(double *)v295
      || LODWORD(v236.__imp_.__imp_) != *(_DWORD *)&v295[8]
      || *(void *)v237 != *(void *)&v295[16]
      || *(void *)&v237[12] != *(void *)&v295[28]
      || (uint64_t v91 = (AMCP::Log::Scope_Registry *)CA::Implementation::EquivalentFormatFlags((CA::Implementation *)&v236, (const AudioStreamBasicDescription *)v295, 0, 0), (v91 & 1) == 0))
    {
      AMCP::Log::Scope_Registry::get(v91);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v295, "com.apple.coreaudio", "AMCP");
      int v92 = **(NSObject ***)v295;
      if (*(void *)&v295[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v295[8]);
      }
      if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
      {
        uint64_t v93 = pthread_self();
        mach_port_t v94 = pthread_mach_thread_np(v93);
        AMCP::Terminal_Identifier_to_string((std::string *)v287, (const void **)&v226);
        std::string::size_type v95 = v287[23] >= 0 ? v287 : *(unsigned char **)v287;
        *(_DWORD *)v295 = 67110146;
        *(_DWORD *)&v295[4] = v94;
        *(_WORD *)&v295[8] = 2080;
        *(void *)&v295[10] = "Manifest_Inventory.cpp";
        *(_WORD *)&v295[18] = 1024;
        *(_DWORD *)&v295[20] = 441;
        *(_WORD *)&v295[24] = 2080;
        *(void *)&v295[26] = "not (CA::StreamDescription::IsEquivalent(buffer_format, wire_buffer->get_format()))";
        *(_WORD *)&v295[34] = 2080;
        *(void *)&v295[36] = v95;
        _os_log_error_impl(&dword_1BAA78000, v92, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Container format doesnt match terminal format when building manifest: %s", v295, 0x2Cu);
        if ((v287[23] & 0x80000000) != 0) {
          operator delete(*(void **)v287);
        }
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v216);
      __cxa_allocate_exception(0x40uLL);
      AMCP::Terminal_Identifier_to_string(&v286, (const void **)&v226);
      if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v96 = &v286;
      }
      else {
        __int16 v96 = (std::string *)v286.__r_.__value_.__r.__words[0];
      }
      caulk::make_string((caulk *)"Container format doesnt match terminal format when building manifest: %s", (uint64_t)&v293, v96);
      std::logic_error::logic_error(&v291, &v293);
      v291.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error((std::logic_error *)v287, &v291);
      uint64_t v288 = 0;
      *(void *)&v287[24] = 0;
      uint64_t v289 = 0;
      int v290 = -1;
      *(void *)v287 = &unk_1F1489CC8;
      *(void *)&v287[16] = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v295, (uint64_t)v287);
      *(void *)&v295[32] = "std::shared_ptr<Manifest_Buffer> AMCP::Graph::Manifest_Inventory::request_buffer_for_termin"
                             "al(const std::shared_ptr<Manifest_Inventory> &, Wire_Identifier, const Node_Map &, const CA"
                             "::StreamDescription &, Manifest_Buffer::Buffer_Style, Timebase_Ref, Drift_Correction_Status"
                             ", Node_Buffer_Ownership, Buffer_Alignment, int32_t)";
      *(void *)&v295[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Inventory.cpp";
      *(_DWORD *)&v295[48] = 441;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v284);
      *(std::logic_error *)&v292[8] = v284;
      *(void *)v292 = &unk_1F148AA90;
      *(void *)&v292[24] = v285;
      v284.__vftable = 0;
      v284.__imp_.__imp_ = 0;
      uint64_t v285 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
  }
  else
  {
    int v97 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v79, (unsigned __int8 *)&v223);
    if (!v97)
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v295, "com.apple.coreaudio", "AMCP");
      long long v172 = **(NSObject ***)v295;
      if (*(void *)&v295[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v295[8]);
      }
      if (os_log_type_enabled(v172, OS_LOG_TYPE_ERROR))
      {
        long long v173 = pthread_self();
        mach_port_t v174 = pthread_mach_thread_np(v173);
        uint64_t v175 = &v223;
        if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v175 = (std::string *)v223.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)v295 = 67110146;
        *(_DWORD *)&v295[4] = v174;
        *(_WORD *)&v295[8] = 2080;
        *(void *)&v295[10] = "Manifest_Inventory.cpp";
        *(_WORD *)&v295[18] = 1024;
        *(_DWORD *)&v295[20] = 424;
        *(_WORD *)&v295[24] = 2080;
        *(void *)&v295[26] = "not (found_node != nodes.end())";
        *(_WORD *)&v295[34] = 2080;
        *(void *)&v295[36] = v175;
        _os_log_error_impl(&dword_1BAA78000, v172, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Missing node for connection in when building manifest: %s", v295, 0x2Cu);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v291);
      __cxa_allocate_exception(0x40uLL);
      v176 = &v223;
      if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        v176 = (std::string *)v223.__r_.__value_.__r.__words[0];
      }
      caulk::make_string((caulk *)"Missing node for connection in when building manifest: %s", (uint64_t)&v293, v176);
      std::logic_error::logic_error(&v284, &v293);
      v284.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error((std::logic_error *)v287, &v284);
      uint64_t v288 = 0;
      *(void *)&v287[24] = 0;
      uint64_t v289 = 0;
      int v290 = -1;
      *(void *)v287 = &unk_1F1489CC8;
      *(void *)&v287[16] = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v295, (uint64_t)v287);
      *(void *)&v295[32] = "std::shared_ptr<Manifest_Buffer> AMCP::Graph::Manifest_Inventory::request_buffer_for_termin"
                             "al(const std::shared_ptr<Manifest_Inventory> &, Wire_Identifier, const Node_Map &, const CA"
                             "::StreamDescription &, Manifest_Buffer::Buffer_Style, Timebase_Ref, Drift_Correction_Status"
                             ", Node_Buffer_Ownership, Buffer_Alignment, int32_t)";
      *(void *)&v295[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Inventory.cpp";
      *(_DWORD *)&v295[48] = 424;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v286.__r_.__value_.__l.__data_);
      *(std::string *)&v292[8] = v286;
      *(void *)v292 = &unk_1F148AA90;
      memset(&v286, 0, sizeof(v286));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    uint64_t v98 = (AMCP::Log::Scope_Registry *)AMCP::Graph::Node::get_nth_wire_ref((AMCP::Log::Scope_Registry *)v295, *((void *)v97 + 5), v224, 0);
    uint64_t v89 = *(std::__shared_weak_count **)&v295[8];
    std::string::size_type v90 = *(void *)v295;
    if (!*(void *)v295)
    {
      AMCP::Log::Scope_Registry::get(v98);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v295, "com.apple.coreaudio", "AMCP");
      uint64_t v177 = **(NSObject ***)v295;
      if (*(void *)&v295[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v295[8]);
      }
      if (os_log_type_enabled(v177, OS_LOG_TYPE_ERROR))
      {
        uint64_t v178 = pthread_self();
        mach_port_t v179 = pthread_mach_thread_np(v178);
        *(_DWORD *)v295 = 67109890;
        *(_DWORD *)&v295[4] = v179;
        *(_WORD *)&v295[8] = 2080;
        *(void *)&v295[10] = "Manifest_Inventory.cpp";
        *(_WORD *)&v295[18] = 1024;
        *(_DWORD *)&v295[20] = 427;
        *(_WORD *)&v295[24] = 2080;
        *(void *)&v295[26] = "not ((wire_buffer) != nullptr)";
        _os_log_error_impl(&dword_1BAA78000, v177, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", v295, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v291);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v293);
      std::logic_error::logic_error(&v284, &v293);
      v284.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error((std::logic_error *)v287, &v284);
      uint64_t v288 = 0;
      *(void *)&v287[24] = 0;
      uint64_t v289 = 0;
      int v290 = -1;
      *(void *)v287 = &unk_1F1489CC8;
      *(void *)&v287[16] = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v295, (uint64_t)v287);
      *(void *)&v295[32] = "std::shared_ptr<Manifest_Buffer> AMCP::Graph::Manifest_Inventory::request_buffer_for_termin"
                             "al(const std::shared_ptr<Manifest_Inventory> &, Wire_Identifier, const Node_Map &, const CA"
                             "::StreamDescription &, Manifest_Buffer::Buffer_Style, Timebase_Ref, Drift_Correction_Status"
                             ", Node_Buffer_Ownership, Buffer_Alignment, int32_t)";
      *(void *)&v295[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Inventory.cpp";
      *(_DWORD *)&v295[48] = 427;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v286.__r_.__value_.__l.__data_);
      *(std::string *)&v292[8] = v286;
      *(void *)v292 = &unk_1F148AA90;
      memset(&v286, 0, sizeof(v286));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    std::string::size_type v99 = (AMCP::Log::Scope_Registry *)(*(void *(**)(unsigned char *__return_ptr, void))(**(void **)v295 + 80))(v295, *(void *)v295);
    if (*(double *)&v236.__vftable != *(double *)v295
      || LODWORD(v236.__imp_.__imp_) != *(_DWORD *)&v295[8]
      || *(void *)v237 != *(void *)&v295[16]
      || *(void *)&v237[12] != *(void *)&v295[28]
      || (std::string::size_type v99 = (AMCP::Log::Scope_Registry *)CA::Implementation::EquivalentFormatFlags((CA::Implementation *)&v236, (const AudioStreamBasicDescription *)v295, 0, 0), (v99 & 1) == 0))
    {
      AMCP::Log::Scope_Registry::get(v99);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v295, "com.apple.coreaudio", "AMCP");
      long long v139 = **(NSObject ***)v295;
      if (*(void *)&v295[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v295[8]);
      }
      if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
      {
        long long v140 = pthread_self();
        mach_port_t v141 = pthread_mach_thread_np(v140);
        AMCP::Terminal_Identifier_to_string((std::string *)v287, (const void **)&v223.__r_.__value_.__l.__data_);
        v142 = v287[23] >= 0 ? v287 : *(unsigned char **)v287;
        *(_DWORD *)v295 = 67110146;
        *(_DWORD *)&v295[4] = v141;
        *(_WORD *)&v295[8] = 2080;
        *(void *)&v295[10] = "Manifest_Inventory.cpp";
        *(_WORD *)&v295[18] = 1024;
        *(_DWORD *)&v295[20] = 430;
        *(_WORD *)&v295[24] = 2080;
        *(void *)&v295[26] = "not (CA::StreamDescription::IsEquivalent(buffer_format, wire_buffer->get_format()))";
        *(_WORD *)&v295[34] = 2080;
        *(void *)&v295[36] = v142;
        _os_log_error_impl(&dword_1BAA78000, v139, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Container format doesnt match terminal format when building manifest: %s", v295, 0x2Cu);
        if ((v287[23] & 0x80000000) != 0) {
          operator delete(*(void **)v287);
        }
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v216);
      __cxa_allocate_exception(0x40uLL);
      AMCP::Terminal_Identifier_to_string(&v286, (const void **)&v223.__r_.__value_.__l.__data_);
      if ((v286.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v143 = &v286;
      }
      else {
        uint64_t v143 = (std::string *)v286.__r_.__value_.__r.__words[0];
      }
      caulk::make_string((caulk *)"Container format doesnt match terminal format when building manifest: %s", (uint64_t)&v293, v143);
      std::logic_error::logic_error(&v291, &v293);
      v291.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error((std::logic_error *)v287, &v291);
      uint64_t v288 = 0;
      *(void *)&v287[24] = 0;
      uint64_t v289 = 0;
      int v290 = -1;
      *(void *)v287 = &unk_1F1489CC8;
      *(void *)&v287[16] = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v295, (uint64_t)v287);
      *(void *)&v295[32] = "std::shared_ptr<Manifest_Buffer> AMCP::Graph::Manifest_Inventory::request_buffer_for_termin"
                             "al(const std::shared_ptr<Manifest_Inventory> &, Wire_Identifier, const Node_Map &, const CA"
                             "::StreamDescription &, Manifest_Buffer::Buffer_Style, Timebase_Ref, Drift_Correction_Status"
                             ", Node_Buffer_Ownership, Buffer_Alignment, int32_t)";
      *(void *)&v295[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Inventory.cpp";
      *(_DWORD *)&v295[48] = 430;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v284);
      *(std::logic_error *)&v292[8] = v284;
      *(void *)v292 = &unk_1F148AA90;
      *(void *)&v292[24] = v285;
      v284.__vftable = 0;
      v284.__imp_.__imp_ = 0;
      uint64_t v285 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
  }
  v293.__r_.__value_.__r.__words[0] = v90;
  v293.__r_.__value_.__l.__size_ = (std::string::size_type)v89;
  BOOL v100 = v89 == 0;
  if (v89) {
LABEL_182:
  }
    atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_196:
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)v295, v223.__r_.__value_.__l.__data_, v223.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)v295 = v223;
  }
  *(void *)&v295[24] = v224;
  *(_DWORD *)&v295[32] = v225;
  if (SHIBYTE(v227) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v295[40], (const std::string::value_type *)v226, *((std::string::size_type *)&v226 + 1));
  }
  else
  {
    *(_OWORD *)&v295[40] = v226;
    uint64_t v296 = v227;
  }
  unint64_t v297 = v228;
  int v298 = v229;
  *(std::logic_error *)v287 = v236;
  *(_OWORD *)&v287[16] = *(_OWORD *)v237;
  uint64_t v288 = *(void *)&v237[16];
  *(_OWORD *)&v286.__r_.__value_.__l.__data_ = v70;
  if (*((void *)&v70 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v70 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  AMCP::Graph::Manifest_Inventory::request_shared_buffer_for_connection(v292, v193, (long long *)&v293, (uint64_t)v295, (uint64_t)v287, v191, &v286, v82, v189, v81, v190);
  int v86 = *(std::__shared_weak_count **)&v292[8];
  uint64_t v84 = *(void *)v292;
  if (v188) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v188);
  }
  if (v286.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v286.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(v296) < 0) {
    operator delete(*(void **)&v295[40]);
  }
  if ((v295[23] & 0x80000000) != 0) {
    operator delete(*(void **)v295);
  }
  if (v293.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v293.__r_.__value_.__l.__size_);
  }
  *(void *)v295 = v84;
  *(void *)&v295[8] = v86;
  if (v86) {
    atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::Graph::Manifest_Inventory::add_buffer(v193, (uint64_t *)v295);
  if (v86) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v86);
  }
  if (!v100) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v89);
  }
LABEL_220:
  if (*((void *)&v70 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v70 + 1));
  }
  if (SHIBYTE(v227) < 0) {
    operator delete((void *)v226);
  }
  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v223.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v217.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v220.__r_.__value_.__l.__data_);
    if (v86) {
      goto LABEL_230;
    }
  }
  else if (v86)
  {
LABEL_230:
    atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v108 = *(void *)&v255[24];
    unint64_t v109 = *((void *)&v258 + 1);
    uint64_t v214 = v84;
    v215 = v86;
    atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_233;
  }
  unint64_t v108 = *(void *)&v255[24];
  unint64_t v109 = *((void *)&v258 + 1);
  uint64_t v214 = v84;
  v215 = v86;
LABEL_233:
  AMCP::Graph::connect(*a6, v108, &v271, v109, &v214);
  if (v86)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v86);
    long long v110 = v86;
  }
  else
  {
    long long v110 = 0;
  }
  if (*(unsigned char *)(a4 + 96))
  {
    std::string::size_type v111 = (std::string::size_type *)(a5 + 24);
    if (!*(void *)(a5 + 24))
    {
      v195 = v110;
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v211, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string v211 = *(std::string *)a5;
      }
      std::string::size_type v212 = *v111;
      int v213 = *(_DWORD *)(a5 + 32);
      int v112 = SHIBYTE(v211.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external((std::string *)v292, v211.__r_.__value_.__l.__data_, v211.__r_.__value_.__l.__size_);
      }
      else {
        *(std::string *)v292 = v211;
      }
      std::string::size_type v113 = v212;
      std::string::size_type size = *(void *)&v292[8];
      char v114 = *(std::string::value_type **)v292;
      LODWORD(v291.__vftable) = *(_DWORD *)&v292[16];
      *(_DWORD *)((char *)&v291.__vftable + 3) = *(_DWORD *)&v292[19];
      int v116 = v292[23];
      memset(v292, 0, 24);
      long long v117 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)v287 = *(_OWORD *)a4;
      *(_OWORD *)&v287[16] = v117;
      uint64_t v288 = *(void *)(a4 + 32);
      if (v116 < 0)
      {
        std::string::__init_copy_ctor_external(&v299, v114, size);
        std::string::size_type size = v299.__r_.__value_.__l.__size_;
        std::logic_error v118 = (std::string::value_type *)v299.__r_.__value_.__r.__words[0];
        char v200 = HIBYTE(v299.__r_.__value_.__r.__words[2]);
      }
      else
      {
        *(_OWORD *)&v299.__r_.__value_.__l.__data_ = __PAIR128__(size, (unint64_t)v114);
        LODWORD(v299.__r_.__value_.__r.__words[2]) = v291.__vftable;
        *(_DWORD *)((char *)&v299.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&v291.__vftable + 3);
        char v200 = v116;
        std::logic_error v118 = v114;
      }
      *(_OWORD *)&v300[16] = *(_OWORD *)v287;
      *(_OWORD *)&v300[32] = *(_OWORD *)&v287[16];
      uint64_t v301 = v288;
      LODWORD(v284.__vftable) = v299.__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)&v284.__vftable + 3) = *(_DWORD *)((char *)&v299.__r_.__value_.__r.__words[2] + 3);
      *(_DWORD *)&v300[8] = 0;
      *(void *)v300 = v113;
      memset(&v299, 0, sizeof(v299));
      LODWORD(v286.__r_.__value_.__r.__words[1]) = 0;
      v286.__r_.__value_.__r.__words[0] = v113;
      *(void *)&v295[36] = v288;
      *(_OWORD *)&v295[20] = *(_OWORD *)&v287[16];
      *(_OWORD *)&v295[4] = *(_OWORD *)v287;
      if (v116 < 0) {
        operator delete(v114);
      }
      std::logic_error v119 = (char *)operator new(0x80uLL);
      *((void *)v119 + 1) = 0;
      *((void *)v119 + 2) = 0;
      *(void *)std::logic_error v119 = &unk_1F1481148;
      if (v200 < 0)
      {
        std::string::__init_copy_ctor_external(&v299, v118, size);
      }
      else
      {
        v299.__r_.__value_.__r.__words[0] = (std::string::size_type)v118;
        v299.__r_.__value_.__l.__size_ = size;
        LODWORD(v299.__r_.__value_.__r.__words[2]) = v284.__vftable;
        *(_DWORD *)((char *)&v299.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)&v284.__vftable + 3);
        *((unsigned char *)&v299.__r_.__value_.__s + 23) = v200;
      }
      std::string::size_type v120 = v286.__r_.__value_.__r.__words[0];
      *(void *)v300 = v286.__r_.__value_.__r.__words[0];
      int v121 = v286.__r_.__value_.__r.__words[1];
      *(_DWORD *)&v300[8] = v286.__r_.__value_.__r.__words[1];
      long long v122 = *(_OWORD *)&v295[20];
      *((_OWORD *)v119 + 5) = *(_OWORD *)&v295[4];
      *((_OWORD *)v119 + 6) = v122;
      *((void *)v119 + 14) = *(void *)&v295[36];
      *((void *)v119 + 3) = &unk_1F1481118;
      *((void *)v119 + 4) = 0;
      *(std::string *)(v119 + 40) = v299;
      *((void *)v119 + 8) = v120;
      *((_DWORD *)v119 + 18) = v121;
      *((_DWORD *)v119 + 30) = 0;
      _ZNSt3__115allocate_sharedB8ne180100IN4AMCP5Graph9Node_ProcENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v287);
      atomic_fetch_add_explicit((atomic_ullong *volatile)v119 + 1, 1uLL, memory_order_relaxed);
      uint64_t v123 = *(void *)v287;
      v299.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F14811E8;
      v299.__r_.__value_.__l.__size_ = (std::string::size_type)(v119 + 24);
      v299.__r_.__value_.__r.__words[2] = (std::string::size_type)v119;
      *(void *)v300 = &v299;
      std::__function::__value_func<void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::swap[abi:ne180100](&v299, *(void **)v287);
      std::__function::__value_func<void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::~__value_func[abi:ne180100](&v299);
      atomic_fetch_add_explicit((atomic_ullong *volatile)v119 + 1, 1uLL, memory_order_relaxed);
      v299.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1481278;
      v299.__r_.__value_.__l.__size_ = (std::string::size_type)(v119 + 24);
      v299.__r_.__value_.__r.__words[2] = (std::string::size_type)v119;
      *(void *)v300 = &v299;
      std::__function::__value_func<void ()>::swap[abi:ne180100](&v299, (void *)(v123 + 160));
      std::__function::__value_func<void ()>::~__value_func[abi:ne180100](&v299);
      atomic_fetch_add_explicit((atomic_ullong *volatile)v119 + 1, 1uLL, memory_order_relaxed);
      v299.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F14812F8;
      v299.__r_.__value_.__l.__size_ = (std::string::size_type)(v119 + 24);
      v299.__r_.__value_.__r.__words[2] = (std::string::size_type)v119;
      *(void *)v300 = &v299;
      std::__function::__value_func<void ()>::swap[abi:ne180100](&v299, (void *)(v123 + 288));
      std::__function::__value_func<void ()>::~__value_func[abi:ne180100](&v299);
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v119);
      char v124 = (std::__shared_weak_count *)operator new(0x90uLL);
      v124->__shared_owners_ = 0;
      v124->__shared_weak_owners_ = 0;
      v124->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1472100;
      std::string::basic_string[abi:ne180100]<0>(&v299, "file writer");
      AMCP::Graph::Manifest_Task::Manifest_Task((uint64_t)&v124[1], v287, 1, 1uLL, 0, (long long *)&v299, 0.0);
      if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v299.__r_.__value_.__l.__data_);
      }
      v293.__r_.__value_.__r.__words[0] = (std::string::size_type)&v124[1];
      v293.__r_.__value_.__l.__size_ = (std::string::size_type)v124;
      if (*(void *)&v287[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v287[8]);
      }
      if (v200 < 0) {
        operator delete(v118);
      }
      if (v112 < 0) {
        operator delete(v211.__r_.__value_.__l.__data_);
      }
      std::vector<std::shared_ptr<AMCP::Graph::Manifest_Task>>::push_back[abi:ne180100](a7, (long long *)&v293);
      uint64_t v125 = *(void *)(v198 + 72);
      long long v210 = 0uLL;
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v207, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string v207 = *(std::string *)a5;
      }
      std::string::size_type v208 = *v111;
      int v209 = *(_DWORD *)(a5 + 32);
      std::string::basic_string[abi:ne180100]<0>(&v205, "File Writer");
      long long v126 = v205;
      v294[0] = v206;
      *(void *)((char *)v294 + 7) = *(void *)((char *)&v206 + 7);
      char v127 = HIBYTE(v206);
      long long v206 = 0uLL;
      v205 = 0;
      *(_OWORD *)&v299.__r_.__value_.__l.__data_ = *(_OWORD *)&v207.__r_.__value_.__l.__data_;
      *(_DWORD *)&v300[8] = v209;
      std::string::size_type v128 = v207.__r_.__value_.__r.__words[2];
      memset(&v207, 0, sizeof(v207));
      v299.__r_.__value_.__r.__words[2] = v128;
      *(void *)v300 = v208;
      *(void *)&v300[31] = *(void *)((char *)v294 + 7);
      *(void *)&v300[16] = v126;
      *(void *)&v300[24] = v294[0];
      v300[39] = v127;
      v294[0] = 0;
      *(void *)((char *)v294 + 7) = 0;
      *(void *)&v300[40] = 0;
      LODWORD(v301) = 0;
      long long v129 = *(_OWORD *)(v84 + 88);
      long long v130 = *(_OWORD *)(v84 + 104);
      uint64_t v131 = *(void *)(v84 + 128);
      uint64_t v204 = *(void *)(v84 + 120);
      v203[0] = v129;
      v203[1] = v130;
      char v132 = *(std::__shared_weak_count **)(v84 + 136);
      v202[0] = v131;
      v202[1] = v132;
      if (v132) {
        atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      AMCP::Graph::Manifest_Inventory::request_shared_buffer_for_connection(v295, v125, &v210, (uint64_t)&v299, (uint64_t)v203, 0, v202, *(_DWORD *)(v84 + 156), 0, 2, 0);
      if (v132) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v132);
      }
      if ((v300[39] & 0x80000000) != 0) {
        operator delete(*(void **)&v300[16]);
      }
      if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v299.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v206) < 0) {
        operator delete(v205);
      }
      unint64_t v133 = *(void *)&v255[24];
      long long v134 = *(std::__shared_weak_count **)&v295[8];
      long long v201 = *(_OWORD *)v295;
      if (*(void *)&v295[8]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v295[8] + 8), 1uLL, memory_order_relaxed);
      }
      AMCP::Graph::connect(*a6, v133, &v293.__r_.__value_.__l.__data_, 0, &v201);
      if (v134)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v134);
        std::__shared_weak_count::__release_shared[abi:ne180100](v134);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v124);
      long long v110 = v195;
    }
  }
  if (v110) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v110);
  }
  if (v86) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v86);
  }
  if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v230.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v233.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v70 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v70 + 1));
  }
  if (v254) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v254);
  }
  if (v252) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v252);
  }
  if (v250) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v250);
  }
  if (*((void *)&v246 + 1))
  {
    *(void *)&long long v247 = *((void *)&v246 + 1);
    operator delete(*((void **)&v246 + 1));
  }
  if ((void)v245)
  {
    *((void *)&v245 + 1) = v245;
    operator delete((void *)v245);
  }
  if (*((void *)&v261 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v261 + 1));
  }
  if (*((void *)&v260 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v260 + 1));
  }
  if (SBYTE7(v258) < 0) {
    operator delete((void *)v257);
  }
  if ((v255[23] & 0x80000000) != 0) {
    operator delete(*(void **)v255);
  }
  for (uint64_t i = 64; i != 16; i -= 24)
  {
    v299.__r_.__value_.__r.__words[0] = (std::string::size_type)&v269[i];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v299);
  }
  if (v272) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v272);
  }
  if (*(void *)&v283[3])
  {
    *(void *)&v283[5] = *(void *)&v283[3];
    operator delete(*(void **)&v283[3]);
  }
  if (v281) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v281);
  }
  if (__src[1])
  {
    *(void **)&long long v277 = __src[1];
    operator delete(__src[1]);
  }
  if (SHIBYTE(__src[0]) < 0) {
    operator delete(v275[0]);
  }
  if ((__str[63] & 0x80000000) != 0) {
    operator delete(*(void **)&__str[40]);
  }
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
}

void sub_1BAD92F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  if (v30)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    if (!v31)
    {
LABEL_3:
      if (!a30) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v31)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  if (!a30)
  {
LABEL_5:
    AMCP::Wire_Identifier::~Wire_Identifier((void **)&STACK[0x3E0]);
    if (SLOBYTE(STACK[0x397]) < 0) {
      operator delete((void *)STACK[0x380]);
    }
    if (SLOBYTE(STACK[0x3C7]) < 0) {
      operator delete((void *)STACK[0x3B0]);
    }
    if (SLOBYTE(STACK[0x487]) < 0) {
      operator delete((void *)STACK[0x470]);
    }
    if (SLOBYTE(STACK[0x4B7]) < 0) {
      operator delete((void *)STACK[0x4A0]);
    }
    if (a30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a30);
    }
    if (STACK[0x5B8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x5B8]);
    }
    if (STACK[0x5A8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x5A8]);
    }
    if (STACK[0x598]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x598]);
    }
    char v33 = (void *)STACK[0x570];
    if (STACK[0x570])
    {
      STACK[0x578] = (unint64_t)v33;
      operator delete(v33);
    }
    uint64_t v34 = (void *)STACK[0x558];
    if (STACK[0x558])
    {
      STACK[0x560] = (unint64_t)v34;
      operator delete(v34);
    }
    if (STACK[0x628]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x628]);
    }
    if (STACK[0x618]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x618]);
    }
    if (SLOBYTE(STACK[0x5FF]) < 0) {
      operator delete((void *)STACK[0x5E8]);
    }
    if (SLOBYTE(STACK[0x5D7]) < 0) {
      operator delete((void *)STACK[0x5C0]);
    }
    for (uint64_t i = 64; i != 16; i -= 24)
    {
      STACK[0x5C0] = (unint64_t)&STACK[0x698] + i;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x5C0]);
    }
    if (STACK[0x708]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x708]);
    }
    unint64_t v36 = (void *)STACK[0x7D0];
    if (STACK[0x7D0])
    {
      STACK[0x7D8] = (unint64_t)v36;
      operator delete(v36);
    }
    if (STACK[0x7B8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x7B8]);
    }
    uint64_t v37 = (void *)STACK[0x778];
    if (STACK[0x778])
    {
      STACK[0x780] = (unint64_t)v37;
      operator delete(v37);
    }
    if (SLOBYTE(STACK[0x777]) < 0) {
      operator delete((void *)STACK[0x760]);
    }
    if (SLOBYTE(STACK[0x74F]) < 0) {
      operator delete((void *)STACK[0x738]);
    }
    if (SLOBYTE(STACK[0x727]) < 0) {
      operator delete((void *)STACK[0x710]);
    }
    _Unwind_Resume(a1);
  }
LABEL_4:
  std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  goto LABEL_5;
}

uint64_t *std::vector<std::shared_ptr<AMCP::Graph::Manifest_Task>>::push_back[abi:ne180100](uint64_t *result, long long *a2)
{
  unint64_t v3 = result;
  uint64_t v5 = (uint64_t)(result + 2);
  unint64_t v4 = result[2];
  int v6 = (void *)result[1];
  if ((unint64_t)v6 >= v4)
  {
    uint64_t v9 = ((uint64_t)v6 - *result) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - *result;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    uint64_t v25 = v5;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v12);
    unint64_t v14 = &v13[16 * v9];
    unint64_t v16 = &v13[16 * v15];
    *(void *)&long long v23 = v14;
    float v24 = v16;
    long long v17 = *a2;
    *(_OWORD *)unint64_t v14 = *a2;
    if (*((void *)&v17 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
      uint64_t v18 = v23;
      unint64_t v16 = v24;
    }
    else
    {
      uint64_t v18 = (uint64_t)v14;
    }
    unint64_t v8 = v14 + 16;
    uint64_t v19 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<AMCP::IOAudio2::Stream>>,std::reverse_iterator<std::shared_ptr<AMCP::IOAudio2::Stream>*>,std::reverse_iterator<std::shared_ptr<AMCP::IOAudio2::Stream>*>,std::reverse_iterator<std::shared_ptr<AMCP::IOAudio2::Stream>*>>(v5, v3[1], (void *)v3[1], *v3, (void *)*v3, v18, v18);
    long long v20 = *(_OWORD *)v3;
    uint64_t *v3 = v19;
    v3[1] = (uint64_t)v8;
    long long v23 = v20;
    uint64_t v21 = v3[2];
    v3[2] = (uint64_t)v16;
    float v24 = (char *)v21;
    uint64_t v22 = v20;
    BOOL result = (uint64_t *)std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    *int v6 = *(void *)a2;
    uint64_t v7 = *((void *)a2 + 1);
    v6[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v8 = v6 + 2;
  }
  v3[1] = (uint64_t)v8;
  return result;
}

void AMCP::Graph::connect(char *a1, unint64_t a2, char **a3, unint64_t a4, void *a5)
{
  unint64_t v8 = (std::__shared_weak_count *)a5[1];
  v12[0] = *a5;
  v12[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::Graph::Manifest_Task::add_connection(a1, 1, a2, v12);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = *a3;
  unint64_t v10 = (std::__shared_weak_count *)a5[1];
  v11[0] = *a5;
  v11[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::Graph::Manifest_Task::add_connection(v9, 0, a4, v11);
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1BAD93DB4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Task>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = 48;
  do
  {
    uint64_t v5 = (void **)(a1 + v4);
    std::vector<AMCP::Graph::Manifest_Task::Terminal_Connections>::__destroy_vector::operator()[abi:ne180100](&v5);
    v4 -= 24;
  }
  while (v4);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Task>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1472100;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Task>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1472100;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AMCP::Graph::Manifest::get_converter_buffer(uint64_t *a1, uint64_t a2, int *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(a2 + 72);
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v36 = *(std::string *)a5;
  }
  uint64_t v37 = *(void *)(a5 + 24);
  int v38 = *(_DWORD *)(a5 + 32);
  unint64_t v14 = (_OWORD *)(a5 + 40);
  uint64_t v30 = (void *)a7;
  uint64_t v28 = v13;
  if (*(char *)(a5 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a5 + 40), *(void *)(a5 + 48));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v14;
    __p.__r_.__value_.__r.__words[2] = *(void *)(a5 + 56);
  }
  size_t v29 = a3;
  uint64_t v40 = *(void *)(a5 + 64);
  int v41 = *(_DWORD *)(a5 + 72);
  uint64_t v15 = *a4;
  if (!*a4
    || (double v16 = *(double *)a6,
        int32x4_t v27 = *(int32x4_t *)(a6 + 8),
        int v17 = *(_DWORD *)(a6 + 24),
        int v18 = *(_DWORD *)(a6 + 28),
        int v19 = *(_DWORD *)(a6 + 32),
        (long long v20 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::find<AMCP::Wire_Identifier>((void *)(v15 + 8), (unsigned __int8 **)&v36)) == 0))
  {
LABEL_22:
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    *a1 = 0;
    a1[1] = 0;
    goto LABEL_23;
  }
  int v21 = v19;
  uint64_t v23 = v20[12];
  uint64_t v22 = (std::__shared_weak_count *)v20[13];
  *a1 = v23;
  a1[1] = (uint64_t)v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v16 != *(double *)(v23 + 88)
    || (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(v27, *(int32x4_t *)(v23 + 96))), 0xFuLL))) & 1) == 0
    || v17 != *(_DWORD *)(v23 + 112)
    || v18 != *(_DWORD *)(v23 + 116)
    || v21 != *(_DWORD *)(v23 + 120))
  {
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    goto LABEL_22;
  }
  v42[0] = v23;
  v42[1] = (uint64_t)v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::Graph::Manifest_Inventory::add_buffer(v28, v42);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
LABEL_23:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v36.__r_.__value_.__l.__data_);
    if (v23) {
      return;
    }
  }
  else if (v23)
  {
    return;
  }
  uint64_t v24 = *(void *)(a2 + 72);
  long long v35 = 0uLL;
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string v36 = *(std::string *)a5;
  }
  uint64_t v37 = *(void *)(a5 + 24);
  int v38 = *(_DWORD *)(a5 + 32);
  if (*(char *)(a5 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a5 + 40), *(void *)(a5 + 48));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v14;
    __p.__r_.__value_.__r.__words[2] = *(void *)(a5 + 56);
  }
  uint64_t v40 = *(void *)(a5 + 64);
  int v41 = *(_DWORD *)(a5 + 72);
  long long v25 = *(_OWORD *)(a6 + 16);
  v33[0] = *(_OWORD *)a6;
  v33[1] = v25;
  uint64_t v34 = *(void *)(a6 + 32);
  BOOL v26 = *(std::__shared_weak_count **)(a7 + 8);
  v32[0] = *v30;
  v32[1] = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::Graph::Manifest_Inventory::request_shared_buffer_for_connection(v42, v24, &v35, (uint64_t)&v36, (uint64_t)v33, 0, v32, v29[50], v29[48], 2, v29[51]);
  *(_OWORD *)a1 = *(_OWORD *)v42;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
}

void sub_1BAD9420C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (v32)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  AMCP::Wire_Identifier::~Wire_Identifier(&__p);
  _Unwind_Resume(a1);
}

uint64_t std::tuple<std::shared_ptr<AMCP::Graph::Node_Proc>,std::string>::~tuple(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

std::string *std::pair<std::string const,std::shared_ptr<AMCP::Graph::Node>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::string::size_type v5 = *((void *)a2 + 4);
  this[1].__r_.__value_.__r.__words[0] = *((void *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Log>::__on_zero_shared(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 72));
  if (*(void *)(a1 + 56))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v2 = *(void *)(a1 + 48);
    long long v4 = *(void **)v2;
    v4[1] = *(void *)(v3 + 8);
    **(void **)(v3 + 8) = v4;
    *(void *)(a1 + 56) = 0;
    while (v2 != a1 + 40)
    {
      uint64_t v5 = *(void *)(v2 + 8);
      std::__list_imp<std::pair<AMCP::Graph::Manifest_Message_Type,std::string>>::__delete_node[abi:ne180100]<>((void **)v2);
      uint64_t v2 = v5;
    }
  }
  int v6 = *(std::__shared_weak_count **)(a1 + 32);
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Log>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14720B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Log>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14720B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<AMCP::Graph::Manifest_Inventory>::__on_zero_shared(void *a1)
{
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](a1 + 24);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100](a1 + 20);
  if (a1[17])
  {
    std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100](a1 + 17);
    operator delete((void *)a1[17]);
  }
  uint64_t v2 = (std::__shared_weak_count *)a1[16];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[14];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = a1[11];
  a1[11] = 0;
  if (v4) {
    std::default_delete<AMCP::Graph::Manifest_Counter>::operator()[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[10];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }

  return std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::~__hash_table((uint64_t)(a1 + 4));
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Inventory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1472060;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Inventory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1472060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AMCP::Graph::Manifest::calculate_anchor_time(uint64_t a1, uint64_t a2, float *a3, int a4, unint64_t a5, int a6)
{
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)&v135, *(void *)(a2 + 72), *(std::__shared_weak_count **)(a2 + 80));
  *(_DWORD *)a1 = 2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  unint64_t v12 = (std::__shared_weak_count *)*((void *)&v135 + 1);
  *(_OWORD *)(a1 + 24) = v135;
  long long v135 = 0uLL;
  if (a4 != 2)
  {
    uint64_t v13 = v12;
    if (a4 == 1)
    {
      AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)&v133, *(void *)(a2 + 72), *(std::__shared_weak_count **)(a2 + 80));
      uint64_t v32 = *(void *)(a2 + 72);
      char v33 = *(std::__shared_weak_count **)(a2 + 80);
      if (v33) {
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v35 = *(void *)(v32 + 80);
      uint64_t v34 = *(std::__shared_weak_count **)(v32 + 88);
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v36 = v133;
      uint64_t v37 = (std::__shared_weak_count *)*((void *)&v133 + 1);
      long long v127 = v133;
      if (*((void *)&v133 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v133 + 1) + 8), 1uLL, memory_order_relaxed);
        *(_DWORD *)std::string buf = 2;
        *(void *)&uint8_t buf[8] = 0;
        *(void *)&buf[16] = 0;
        *(_OWORD *)uint64_t v163 = v36;
        atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        *(_DWORD *)std::string buf = 2;
        *(void *)&uint8_t buf[8] = 0;
        *(void *)&buf[16] = 0;
        *(_OWORD *)uint64_t v163 = (unint64_t)v133;
      }
      long long v160 = 0;
      uint64_t v83 = operator new(0x20uLL);
      void *v83 = &unk_1F1471FE0;
      v83[1] = buf;
      *((_OWORD *)v83 + 1) = v127;
      long long v160 = v83;
      AMCP::Graph::Timebase_Set::for_each(*(void **)(v35 + 16), (uint64_t)&v159);
      std::__function::__value_func<void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::~__value_func[abi:ne180100](&v159);
      uint64_t v84 = mach_absolute_time();
      if (v37) {
        atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      LODWORD(v154.__vftable) = 1;
      v154.__imp_.__imp_ = 0;
      uint64_t v155 = (void *)v84;
      long long v156 = v127;
      boost::operators_impl::operator-((AMCP::DAL::DAL_Time *)&v147, (uint64_t)&v154, (AMCP::DAL::DAL_Time_Delta *)buf);
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      if (*(void *)&v163[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v163[8]);
      }
      if (v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      if (a6 != 1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      unint64_t host_time = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)&v147);
      if (a5 <= host_time) {
        a5 = host_time;
      }
      AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)&v132, *(void *)(a2 + 72), *(std::__shared_weak_count **)(a2 + 80));
      long long v86 = v132;
      long long v132 = 0uLL;
      *(_DWORD *)a1 = 1;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = a5;
      *(_OWORD *)(a1 + 24) = v86;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a1);
      AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)a1);
      kdebug_trace();
      if (v149.__imp_.__imp_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v149.__imp_.__imp_);
      }
    }
    else if (!a4)
    {
      if (a6) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)&v134, *(void *)(a2 + 72), *(std::__shared_weak_count **)(a2 + 80));
      long long v14 = v134;
      long long v134 = 0uLL;
      *(_DWORD *)a1 = 2;
      *(void *)(a1 + 8) = a5;
      *(void *)(a1 + 16) = 0;
      *(_OWORD *)(a1 + 24) = v14;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a1);
      uint64_t v16 = *(void *)(a1 + 24);
      int v17 = *(std::__shared_weak_count **)(a1 + 32);
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v18 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 136))(v16);
      BOOL v20 = round(sample_time) >= round(*(double *)&v18) || v19 == 0;
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      if (!v20)
      {
        AMCP::Log::Scope_Registry::get(v18);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        int v21 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          uint64_t v22 = pthread_self();
          mach_port_t v23 = pthread_mach_thread_np(v22);
          double v24 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a1);
          uint64_t v25 = *(void *)(a1 + 24);
          BOOL v26 = *(std::__shared_weak_count **)(a1 + 32);
          if (v26) {
            atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          double v27 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(void *)v25 + 136))(v25));
          *(_DWORD *)std::string buf = 67110402;
          *(_DWORD *)&uint8_t buf[4] = v23;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "Manifest.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 418;
          *(_WORD *)uint64_t v163 = 2080;
          *(void *)&v163[2] = "not (anchor_time.get_sample_time() >= anchor_time.get_clock()->get_anchor_time())";
          *(_WORD *)&v163[10] = 2048;
          *(void *)&v163[12] = vcvtmd_s64_f64(v24);
          *(_WORD *)&v163[20] = 2048;
          *(void *)&v163[22] = vcvtmd_s64_f64(v27);
          _os_log_error_impl(&dword_1BAA78000, v21, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Manifest anchor time should not represent a time before the timebase's anchor time: time(%lld) anchor(%lld)", buf, 0x36u);
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v139);
        __cxa_allocate_exception(0x40uLL);
        double v28 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a1);
        uint64_t v29 = *(void *)(a1 + 24);
        uint64_t v30 = *(void *)(a1 + 32);
        if (v30) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
        }
        double v31 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(void *)v29 + 136))(v29));
        caulk::make_string((caulk *)"Manifest anchor time should not represent a time before the timebase's anchor time: time(%lld) anchor(%lld)", (uint64_t)&v159, vcvtmd_s64_f64(v28), vcvtmd_s64_f64(v31));
        std::logic_error::logic_error(&v142, &v159);
        v142.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error(&v154, &v142);
        long long v156 = 0uLL;
        uint64_t v157 = 0;
        int v158 = -1;
        v154.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        uint64_t v155 = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v154);
        *(void *)&v163[8] = "DAL::DAL_Time AMCP::Graph::Manifest::calculate_anchor_time(const Manifest_Execution_Contex"
                              "t &, Anchor_Policy, std::variant<Sample_Time, uint64_t>) const";
        *(void *)&v163[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
        *(_DWORD *)&v163[24] = 418;
        applesauce::backtrace::snapshot_N<64>::snapshot_N(&v145.__r_.__value_.__l.__data_);
        long long v148 = *(_OWORD *)&v145.__r_.__value_.__l.__data_;
        int v147 = &unk_1F148AA90;
        v149.__vftable = (std::logic_error_vtbl *)v145.__r_.__value_.__r.__words[2];
        memset(&v145, 0, sizeof(v145));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
    }
    goto LABEL_171;
  }
  AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)&v152, *(void *)(a2 + 72), *(std::__shared_weak_count **)(a2 + 80));
  uint64_t v38 = *(void *)(a2 + 72);
  uint64_t v39 = *(std::__shared_weak_count **)(a2 + 80);
  if (v39) {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v40 = *(void *)(v38 + 48);
  int v41 = *(std::__shared_weak_count **)(v38 + 56);
  if (v41) {
    atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::Graph::Synchronized_Mixer_Manager::get_anchor_time((uint64_t)&v129, v40, &v152);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  double v42 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v129);
  long long v43 = v131;
  if (*((void *)&v131 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v131 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  long long v44 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void))(*(void *)v43 + 136))(v43);
  BOOL v46 = round(v42) >= round(*(double *)&v44) || v45 == 0;
  if (*((void *)&v43 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v43 + 1));
  }
  if (!v46)
  {
    AMCP::Log::Scope_Registry::get(v44);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v103 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
    {
      BOOL v104 = pthread_self();
      mach_port_t v105 = pthread_mach_thread_np(v104);
      double v106 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v129);
      long long v107 = v131;
      if (*((void *)&v131 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v131 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      double v108 = COERCE_DOUBLE((*(uint64_t (**)(void))(*(void *)v107 + 136))(v107));
      *(_DWORD *)std::string buf = 67110402;
      *(_DWORD *)&uint8_t buf[4] = v105;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Manifest.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 448;
      *(_WORD *)uint64_t v163 = 2080;
      *(void *)&v163[2] = "not (anchor_time.get_sample_time() >= anchor_time.get_clock()->get_anchor_time())";
      *(_WORD *)&v163[10] = 2048;
      *(void *)&v163[12] = vcvtmd_s64_f64(v106);
      *(_WORD *)&v163[20] = 2048;
      *(void *)&v163[22] = vcvtmd_s64_f64(v108);
      _os_log_error_impl(&dword_1BAA78000, v103, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Manifest anchor time should not represent a time before the timebase's anchor time: time(%lld) anchor(%lld)", buf, 0x36u);
      if (*((void *)&v107 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v107 + 1));
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v139);
    __cxa_allocate_exception(0x40uLL);
    double v109 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v129);
    uint64_t v110 = v131;
    if (*((void *)&v131 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v131 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    double v111 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(void *)v110 + 136))(v110));
    caulk::make_string((caulk *)"Manifest anchor time should not represent a time before the timebase's anchor time: time(%lld) anchor(%lld)", (uint64_t)&v159, vcvtmd_s64_f64(v109), vcvtmd_s64_f64(v111));
    std::logic_error::logic_error(&v142, &v159);
    v142.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v154, &v142);
    long long v156 = 0uLL;
    uint64_t v157 = 0;
    int v158 = -1;
    v154.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v155 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v154);
    *(void *)&v163[8] = "DAL::DAL_Time AMCP::Graph::Manifest::calculate_anchor_time_from_current_time(const Manifest_Ex"
                          "ecution_Context &) const";
    *(void *)&v163[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
    *(_DWORD *)&v163[24] = 448;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v145.__r_.__value_.__l.__data_);
    long long v148 = *(_OWORD *)&v145.__r_.__value_.__l.__data_;
    int v147 = &unk_1F148AA90;
    v149.__vftable = (std::logic_error_vtbl *)v145.__r_.__value_.__r.__words[2];
    memset(&v145, 0, sizeof(v145));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (((uint64_t)v129.__vftable & 0xFFFFFFFE) == 2) {
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v129);
  }
  uint64_t v47 = *(void *)(a2 + 72);
  uint64_t v48 = *(std::__shared_weak_count **)(a2 + 80);
  if (v48) {
    atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  buffer_alignments = AMCP::Graph::Manifest_Inventory::get_buffer_alignments(&v150, *(void **)(v47 + 24));
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  double v50 = v151[0];
  if (v151[0])
  {
    double v51 = v151;
    do
    {
      uint64_t v52 = v50;
      uint64_t v53 = v51;
      int v54 = *((_DWORD *)v50 + 7);
      double v55 = v50 + 1;
      if (v54 >= 1)
      {
        double v55 = v52;
        double v51 = (void **)v52;
      }
      double v50 = (void *)*v55;
    }
    while (v50);
    if (v51 != v151)
    {
      uint64_t v56 = (int *)(v54 >= 1 ? v52 : v53);
      if (v56[7] <= 1)
      {
        uint64_t v57 = *(void *)(a2 + 72);
        int v58 = *(std::__shared_weak_count **)(a2 + 80);
        if (v58) {
          atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v59 = *(void **)(v57 + 24);
        if (v59)
        {
          long long v126 = v58;
          std::string::size_type v128 = 0;
          unint64_t v60 = 0;
          uint64_t v61 = 0;
          do
          {
            uint64_t v62 = v59[12];
            if (*(_DWORD *)(v62 + 156) == 1)
            {
              uint64_t v63 = *(void *)(v62 + 128);
              uint64_t v64 = *(std::__shared_weak_count **)(v62 + 136);
              if (v64) {
                atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v65 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v63 + 144))(v63, 1);
              if (v64) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v64);
              }
              uint64_t v66 = v59[12];
              uint64_t v67 = *(void *)(v66 + 128);
              int v68 = *(std::__shared_weak_count **)(v66 + 136);
              if (v68) {
                atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v69 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t))(*(void *)v67 + 136))(v67);
              char v71 = v70;
              if (v68) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v68);
              }
              if (!v71)
              {
                AMCP::Log::Scope_Registry::get(v69);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
                BOOL v100 = **(NSObject ***)buf;
                if (*(void *)&buf[8]) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
                }
                if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
                {
                  char v101 = pthread_self();
                  mach_port_t v102 = pthread_mach_thread_np(v101);
                  *(_DWORD *)std::string buf = 67109890;
                  *(_DWORD *)&uint8_t buf[4] = v102;
                  *(_WORD *)&uint8_t buf[8] = 2080;
                  *(void *)&buf[10] = "Manifest_Inventory.cpp";
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = 582;
                  *(_WORD *)uint64_t v163 = 2080;
                  *(void *)&v163[2] = "not (b.second->get_timebase()->get_anchor_time().has_value())";
                  _os_log_error_impl(&dword_1BAA78000, v100, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Input timebase has been started but does not have an anchor time.", buf, 0x22u);
                }
                AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v136);
                __cxa_allocate_exception(0x40uLL);
                caulk::make_string((caulk *)"Input timebase has been started but does not have an anchor time.", (uint64_t)&v145);
                std::logic_error::logic_error(&v139, &v145);
                v139.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
                std::logic_error::logic_error(&v154, &v139);
                long long v156 = 0uLL;
                uint64_t v157 = 0;
                int v158 = -1;
                v154.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
                uint64_t v155 = &unk_1F1489CF0;
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v154);
                *(void *)&v163[8] = "DAL::DAL_Time AMCP::Graph::Manifest_Inventory::get_latest_input_anchor_time() const";
                *(void *)&v163[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Inventory.cpp";
                *(_DWORD *)&v163[24] = 582;
                applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v142);
                *(std::logic_error *)&v159.__r_.__value_.__r.__words[1] = v142;
                v159.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
                long long v160 = v143;
                v142.__vftable = 0;
                v142.__imp_.__imp_ = 0;
                uint64_t v143 = 0;
                boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
              }
              uint64_t v72 = v59[12];
              uint64_t v73 = *(void *)(v72 + 128);
              int v74 = *(std::__shared_weak_count **)(v72 + 136);
              if (v74) {
                atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              double v75 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(void *)v73 + 136))(v73));
              if (!v76) {
                std::__throw_bad_optional_access[abi:ne180100]();
              }
              long long v77 = *(_OWORD *)(v59[12] + 128);
              uint64_t v78 = *(void *)(v59[12] + 136);
              if (v78) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v78 + 8), 1uLL, memory_order_relaxed);
              }
              *(_DWORD *)std::string buf = 2;
              *(double *)&uint8_t buf[8] = (double)(HIDWORD(v65) + v65) + v75;
              *(void *)&buf[16] = 0;
              *(_OWORD *)uint64_t v163 = v77;
              if (v74) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v74);
              }
              if (v60 <= AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)buf))
              {
                unint64_t v60 = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)buf);
                uint64_t v79 = v59[12];
                uint64_t v61 = *(void *)(v79 + 128);
                int v80 = *(std::__shared_weak_count **)(v79 + 136);
                if (v80) {
                  atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                if (v128) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v128);
                }
                std::string::size_type v128 = v80;
              }
              buffer_alignments = *(uint64_t **)&v163[8];
              if (*(void *)&v163[8]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v163[8]);
              }
            }
            uint64_t v59 = (void *)*v59;
          }
          while (v59);
          if (!v61 && v60)
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)buffer_alignments);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            uint64_t v123 = **(NSObject ***)buf;
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (os_log_type_enabled(v123, OS_LOG_TYPE_ERROR))
            {
              char v124 = pthread_self();
              mach_port_t v125 = pthread_mach_thread_np(v124);
              *(_DWORD *)std::string buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v125;
              *(_WORD *)&uint8_t buf[8] = 2080;
              *(void *)&buf[10] = "Manifest_Inventory.cpp";
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 595;
              *(_WORD *)uint64_t v163 = 2080;
              *(void *)&v163[2] = "not (timebase != nullptr || latest_anchor == 0)";
              _os_log_error_impl(&dword_1BAA78000, v123, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Did not find an input aligned timebase", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v136);
            __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"Did not find an input aligned timebase", (uint64_t)&v145);
            std::logic_error::logic_error(&v139, &v145);
            v139.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
            std::logic_error::logic_error(&v154, &v139);
            long long v156 = 0uLL;
            uint64_t v157 = 0;
            int v158 = -1;
            v154.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
            uint64_t v155 = &unk_1F1489CF0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v154);
            *(void *)&v163[8] = "DAL::DAL_Time AMCP::Graph::Manifest_Inventory::get_latest_input_anchor_time() const";
            *(void *)&v163[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Inventory.cpp";
            *(_DWORD *)&v163[24] = 595;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v142);
            *(std::logic_error *)&v159.__r_.__value_.__r.__words[1] = v142;
            v159.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
            long long v160 = v143;
            v142.__vftable = 0;
            v142.__imp_.__imp_ = 0;
            uint64_t v143 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
          }
          int v81 = v128;
          *(void *)std::string buf = v61;
          *(void *)&uint8_t buf[8] = v128;
          if (v128)
          {
            char v82 = 0;
            atomic_fetch_add_explicit(&v128->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            char v82 = 1;
          }
          int v58 = v126;
        }
        else
        {
          int v81 = 0;
          unint64_t v60 = 0;
          *(void *)std::string buf = 0;
          *(void *)&uint8_t buf[8] = 0;
          char v82 = 1;
        }
        LODWORD(v147) = 1;
        *(void *)&long long v148 = 0;
        *((void *)&v148 + 1) = v60;
        std::logic_error v149 = *(std::logic_error *)buf;
        *(void *)std::string buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        if ((v82 & 1) == 0) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v81);
        }
        if (v58) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v58);
        }
        AMCP::DAL::DAL_Time::translate_time((uint64_t)&v154, (AMCP::DAL::DAL_Time *)&v147, &v152);
        uint64_t v88 = v152;
        char v87 = v153;
        if (v153) {
          atomic_fetch_add_explicit(&v153->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        buf[0] = 0;
        *(void *)&uint8_t buf[8] = 0;
        *(void *)&buf[16] = 0;
        *(void *)uint64_t v163 = v88;
        *(void *)&v163[8] = v87;
        *(_DWORD *)&v163[16] = 0;
        AMCP::Graph::Manifest_Counter::start((uint64_t)buf, (AMCP::DAL::DAL_Time *)&v129);
        std::logic_error v89 = v149;
        *(std::logic_error *)&v145.__r_.__value_.__l.__data_ = v149;
        if (v149.__imp_.__imp_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v149.__imp_.__imp_ + 1, 1uLL, memory_order_relaxed);
        }
        AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)&v159, (AMCP::DAL::DAL_Time_Delta *)a3, (uint64_t *)&v145);
        if (v89.__imp_.__imp_)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v89.__imp_.__imp_);
          std::logic_error v142 = v89;
          atomic_fetch_add_explicit((atomic_ullong *volatile)v89.__imp_.__imp_ + 1, 1uLL, memory_order_relaxed);
        }
        else
        {
          v142.__vftable = v89.__vftable;
          v142.__imp_.__imp_ = 0;
        }
        AMCP::Graph::Manifest_Counter::calculate_buffer_start((AMCP::DAL::DAL_Time *)&v145, (uint64_t)buf, (uint64_t *)&v142, 1, (AMCP::DAL::DAL_Time_Delta *)&v159, a3[10]);
        if (v89.__imp_.__imp_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v89.__imp_.__imp_);
        }
        AMCP::DAL::DAL_Time::translate_time((uint64_t)&v142, (AMCP::DAL::DAL_Time *)&v145, &v152);
        if (!AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v142, (AMCP::DAL::DAL_Time *)&v154)) {
          goto LABEL_145;
        }
        AMCP::DAL::DAL_Time::operator-((uint64_t)&v136, (AMCP::DAL::DAL_Time *)&v142, (AMCP::DAL::DAL_Time *)&v154);
        std::logic_error v139 = v136;
        uint64_t v140 = v137;
        std::string::size_type v90 = (std::__shared_weak_count *)*((void *)&v138 + 1);
        long long v141 = v138;
        if (*((void *)&v138 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v138 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        if ((uint64_t)v139.__vftable)
        {
          uint64_t v140 = (uint64_t)((double)v140 * 1.10000002);
          if (((uint64_t)v139.__vftable & 2) == 0)
          {
LABEL_138:
            if (!v90) {
              goto LABEL_140;
            }
            goto LABEL_139;
          }
        }
        else if (((uint64_t)v139.__vftable & 2) == 0)
        {
          goto LABEL_138;
        }
        *(double *)&v139.__imp_.__imp_ = *(double *)&v139.__imp_.__imp_ * 1.10000002;
        if (!v90)
        {
LABEL_140:
          boost::operators_impl::operator-((AMCP::DAL::DAL_Time *)&v136, (uint64_t)&v129, (AMCP::DAL::DAL_Time_Delta *)&v139);
          std::logic_error v129 = v136;
          uint64_t v130 = v137;
          long long v91 = v138;
          long long v138 = 0uLL;
          int v92 = (std::__shared_weak_count *)*((void *)&v131 + 1);
          long long v131 = v91;
          if (v92)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v92);
            if (*((void *)&v138 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v138 + 1));
            }
          }
          if (*((void *)&v141 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v141 + 1));
          }
LABEL_145:
          if (v144) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v144);
          }
          if (v146) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v146);
          }
          if (v161) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v161);
          }
          if (*(void *)&v163[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v163[8]);
          }
          if (*((void *)&v156 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v156 + 1));
          }
          if (v89.__imp_.__imp_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v89.__imp_.__imp_);
          }
          goto LABEL_157;
        }
LABEL_139:
        std::__shared_weak_count::__release_shared[abi:ne180100](v90);
        goto LABEL_140;
      }
    }
  }
LABEL_157:
  if (((uint64_t)v129.__vftable & 0xFFFFFFFE) == 2) {
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v129);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v151[0]);
  if (v153) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v153);
  }
  *(std::logic_error *)a1 = v129;
  *(void *)(a1 + 16) = v130;
  uint64_t v93 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v131;
  if (v93) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v93);
  }
  double v94 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a1);
  uint64_t v95 = *(void *)(a1 + 24);
  __int16 v96 = *(std::__shared_weak_count **)(a1 + 32);
  if (v96) {
    atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v97 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t))(*(void *)v95 + 136))(v95);
  BOOL v99 = round(v94) >= round(*(double *)&v97) || v98 == 0;
  if (v96) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v96);
  }
  if (!v99)
  {
    AMCP::Log::Scope_Registry::get(v97);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v112 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v113 = pthread_self();
      mach_port_t v114 = pthread_mach_thread_np(v113);
      double v115 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a1);
      uint64_t v116 = *(void *)(a1 + 24);
      long long v117 = *(std::__shared_weak_count **)(a1 + 32);
      if (v117) {
        atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      double v118 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(void *)v116 + 136))(v116));
      *(_DWORD *)std::string buf = 67110402;
      *(_DWORD *)&uint8_t buf[4] = v114;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Manifest.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 434;
      *(_WORD *)uint64_t v163 = 2080;
      *(void *)&v163[2] = "not (anchor_time.get_sample_time() >= anchor_time.get_clock()->get_anchor_time())";
      *(_WORD *)&v163[10] = 2048;
      *(void *)&v163[12] = vcvtmd_s64_f64(v115);
      *(_WORD *)&v163[20] = 2048;
      *(void *)&v163[22] = vcvtmd_s64_f64(v118);
      _os_log_error_impl(&dword_1BAA78000, v112, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Manifest anchor time should not represent a time before the timebase's anchor time: time(%lld) anchor(%lld)", buf, 0x36u);
      if (v117) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v117);
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v139);
    __cxa_allocate_exception(0x40uLL);
    double v119 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a1);
    uint64_t v120 = *(void *)(a1 + 24);
    uint64_t v121 = *(void *)(a1 + 32);
    if (v121) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v121 + 8), 1uLL, memory_order_relaxed);
    }
    double v122 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t))(*(void *)v120 + 136))(v120));
    caulk::make_string((caulk *)"Manifest anchor time should not represent a time before the timebase's anchor time: time(%lld) anchor(%lld)", (uint64_t)&v159, vcvtmd_s64_f64(v119), vcvtmd_s64_f64(v122));
    std::logic_error::logic_error(&v142, &v159);
    v142.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v154, &v142);
    long long v156 = 0uLL;
    uint64_t v157 = 0;
    int v158 = -1;
    v154.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v155 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v154);
    *(void *)&v163[8] = "DAL::DAL_Time AMCP::Graph::Manifest::calculate_anchor_time(const Manifest_Execution_Context &,"
                          " Anchor_Policy, std::variant<Sample_Time, uint64_t>) const";
    *(void *)&v163[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
    *(_DWORD *)&v163[24] = 434;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v145.__r_.__value_.__l.__data_);
    long long v148 = *(_OWORD *)&v145.__r_.__value_.__l.__data_;
    int v147 = &unk_1F148AA90;
    v149.__vftable = (std::logic_error_vtbl *)v145.__r_.__value_.__r.__words[2];
    memset(&v145, 0, sizeof(v145));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
LABEL_171:
  if ((*(_DWORD *)a1 & 0xFFFFFFFE) == 2) {
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a1);
  }
}

void sub_1BAD96200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,std::__shared_weak_count *a62)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a59);
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a62);
  }
  uint64_t v64 = *(std::__shared_weak_count **)(v62 + 32);
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest::get_master_timebase(AMCP::Graph::Manifest *this, uint64_t a2, std::__shared_weak_count *a3)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = *(void *)(a2 + 104);
  *(void *)this = *(void *)(a2 + 96);
  *((void *)this + 1) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
}

void *std::__function::__func<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP5GraphL38get_earliest_start_time_across_devicesENSt3__110shared_ptrINS0_8TimebaseEEERKNS2_INS0_12Timebase_SetEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::operator()(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)&v3 + 1);
  if (*((void *)&v3 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v3 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  long long v12 = v3;
  unsigned int v5 = (*(uint64_t (**)(void))(*(void *)v3 + 184))();
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    int v15 = 2;
    double v16 = (double)v5;
    uint64_t v17 = 0;
    long long v18 = v12;
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    int v15 = 2;
    double v16 = (double)v5;
    uint64_t v17 = 0;
    long long v18 = v12;
  }
  AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)v13, (AMCP::DAL::DAL_Time_Delta *)&v15, (uint64_t *)(a1 + 16));
  int v6 = *(AMCP::DAL::DAL_Time_Delta **)(a1 + 8);
  if (AMCP::DAL::DAL_Time_Delta::operator<(v6, (uint64_t)v13)) {
    uint64_t v7 = (AMCP::DAL::DAL_Time_Delta *)v13;
  }
  else {
    uint64_t v7 = v6;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  *(_DWORD *)uint64_t v8 = *(_DWORD *)v7;
  *(void *)(v8 + 8) = *((void *)v7 + 1);
  *(void *)(v8 + 16) = *((void *)v7 + 2);
  uint64_t v10 = *((void *)v7 + 3);
  uint64_t v9 = *((void *)v7 + 4);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(v8 + 32);
  *(void *)(v8 + 24) = v10;
  *(void *)(v8 + 32) = v9;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (*((void *)&v18 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
  }
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1BAD969D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void *std::__function::__func<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::__clone(void *result, void *a2)
{
  uint64_t v2 = result[1];
  *a2 = &unk_1F1471FE0;
  a2[1] = v2;
  uint64_t v3 = result[3];
  a2[2] = result[2];
  a2[3] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

char *std::__function::__func<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::__clone(uint64_t a1)
{
  BOOL result = (char *)operator new(0x20uLL);
  *(void *)BOOL result = &unk_1F1471FE0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::~__func(void *a1)
{
  *a1 = &unk_1F1471FE0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::Graph::get_earliest_start_time_across_devices(std::shared_ptr<AMCP::Graph::Timebase>,std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::~__func(void *a1)
{
  *a1 = &unk_1F1471FE0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

std::string *AMCP::Graph::Manifest::setup_processing(AMCP::Log::Scope_Registry *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v193 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v147 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
    {
      long long v148 = pthread_self();
      mach_port_t v149 = pthread_mach_thread_np(v148);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v149;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Manifest.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 490;
      LOWORD(v190) = 2080;
      *(void *)((char *)&v190 + 2) = "not (m_processing_state == Processing_State::Idle)";
      _os_log_error_impl(&dword_1BAA78000, v147, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v173);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v174);
    std::logic_error::logic_error(&v176, &v174);
    v176.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v180, &v176);
    uint64_t v182 = 0;
    uint64_t v183 = 0;
    uint64_t v184 = 0;
    int v185 = -1;
    v180.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    v181 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v180);
    *((void *)&v190 + 1) = "Start_Stop_Result AMCP::Graph::Manifest::setup_processing(const Manifest_Execution_Context "
                             "&, const Manifest_Start_State &, const std::atomic_uint32_t &)";
    int v191 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
    int v192 = 490;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v179.__r_.__value_.__l.__data_);
    long long v187 = *(_OWORD *)&v179.__r_.__value_.__l.__data_;
    v186 = &unk_1F148AA90;
    *(void *)&long long v188 = *((void *)&v179.__r_.__value_.__l + 2);
    memset(&v179, 0, sizeof(v179));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  unint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(std::__shared_weak_count **)(a2 + 32);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  mach_port_t v168 = a1;
  uint64_t v9 = *((void *)a1 + 9);
  uint64_t v11 = *(void *)(v9 + 96);
  uint64_t v10 = *(std::__shared_weak_count **)(v9 + 104);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v12 = (v7 | v11) == 0;
  if (!v7 || !v11)
  {
LABEL_29:
    if (!v10) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v13 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(void *)v7 + 16))(v7);
  unint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
  uint64_t v14 = v13[23];
  if ((v14 & 0x80u) == 0) {
    uint64_t v15 = v13[23];
  }
  else {
    uint64_t v15 = *((void *)v13 + 1);
  }
  uint64_t v16 = *(unsigned __int8 *)(v7 + 23);
  int v17 = (char)v16;
  if ((v16 & 0x80u) != 0) {
    uint64_t v16 = *(void *)(v7 + 8);
  }
  if (v15 != v16)
  {
    BOOL v12 = 0;
    if (!v10) {
      goto LABEL_31;
    }
LABEL_30:
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    goto LABEL_31;
  }
  if (v17 >= 0) {
    long long v18 = (unsigned __int8 *)v7;
  }
  else {
    long long v18 = *(unsigned __int8 **)v7;
  }
  if ((v14 & 0x80) != 0)
  {
    unint64_t v7 = memcmp(*(const void **)v13, v18, *((void *)v13 + 1));
    BOOL v12 = v7 == 0;
    goto LABEL_29;
  }
  if (v13[23])
  {
    uint64_t v19 = v14 - 1;
    do
    {
      int v21 = *v13++;
      int v20 = v21;
      int v23 = *v18++;
      int v22 = v23;
      BOOL v25 = v19-- != 0;
      BOOL v12 = v20 == v22;
    }
    while (v20 == v22 && v25);
    goto LABEL_29;
  }
  BOOL v12 = 1;
  if (v10) {
    goto LABEL_30;
  }
LABEL_31:
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  BOOL v26 = v168;
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v150 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v150, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v151 = pthread_self();
      mach_port_t v152 = pthread_mach_thread_np(v151);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v152;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Manifest.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 494;
      LOWORD(v190) = 2080;
      *(void *)((char *)&v190 + 2) = "not (is_same_timebase(execution_context.m_time_interval.get_clock(), m_inventory-"
                                       ">get_master_timebase()))";
      _os_log_error_impl(&dword_1BAA78000, v150, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Execution context is not using master timebase", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v173);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Execution context is not using master timebase", (uint64_t)&v174);
    std::logic_error::logic_error(&v176, &v174);
    v176.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v180, &v176);
    uint64_t v182 = 0;
    uint64_t v183 = 0;
    uint64_t v184 = 0;
    int v185 = -1;
    v180.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    v181 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v180);
    *((void *)&v190 + 1) = "Start_Stop_Result AMCP::Graph::Manifest::setup_processing(const Manifest_Execution_Context "
                             "&, const Manifest_Start_State &, const std::atomic_uint32_t &)";
    int v191 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
    int v192 = 494;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v179.__r_.__value_.__l.__data_);
    long long v187 = *(_OWORD *)&v179.__r_.__value_.__l.__data_;
    v186 = &unk_1F148AA90;
    *(void *)&long long v188 = *((void *)&v179.__r_.__value_.__l + 2);
    memset(&v179, 0, sizeof(v179));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v27 = *((void *)v168 + 9);
  uint64_t v28 = *(void *)(v27 + 80);
  uint64_t v29 = *(std::__shared_weak_count **)(v27 + 88);
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v30 = *(char **)(a3 + 8);
  uint64_t v31 = *(void *)(a3 + 16);
  if (v30 == (char *)v31)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v153 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
    {
      std::logic_error v154 = pthread_self();
      mach_port_t v155 = pthread_mach_thread_np(v154);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v155;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Timebase_Set.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 51;
      LOWORD(v190) = 2080;
      *(void *)((char *)&v190 + 2) = "not (not state_snapshot.empty())";
      _os_log_error_impl(&dword_1BAA78000, v153, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to adopt an empty state", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v173);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to adopt an empty state", (uint64_t)&v174);
    std::logic_error::logic_error(&v176, &v174);
    v176.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v180, &v176);
    uint64_t v182 = 0;
    uint64_t v183 = 0;
    uint64_t v184 = 0;
    int v185 = -1;
    v180.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    v181 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v180);
    *((void *)&v190 + 1) = "void AMCP::Graph::Timebase_Set::adopt_state(const Play_State_Manager::State_Snapshot &)";
    int v191 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Timebase_Set.cpp";
    int v192 = 51;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v179.__r_.__value_.__l.__data_);
    long long v187 = *(_OWORD *)&v179.__r_.__value_.__l.__data_;
    v186 = &unk_1F148AA90;
    *(void *)&long long v188 = *((void *)&v179.__r_.__value_.__l + 2);
    memset(&v179, 0, sizeof(v179));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v32 = (char *)(v28 + 40);
  if (v28 + 40 != a3 + 8) {
    uint64_t v32 = std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v32, v30, v31, (v31 - (uint64_t)v30) >> 2);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  uint64_t v169 = (AMCP::DAL::DAL_Time_Delta *)a2;
  uint64_t v166 = a4;
  char v33 = (AMCP::Graph::Manifest_Inventory *)*((void *)v168 + 9);
  uint64_t v34 = (void *)*((void *)v33 + 3);
  if (v34)
  {
    double v35 = *(double *)(a3 + 40);
    do
    {
      uint64_t v36 = v34[12];
      if (*(_DWORD *)(v36 + 148) == 2 && !*(void *)(v36 + 304))
      {
        uint64_t v37 = *(void *)(v36 + 128);
        uint64_t v38 = *(std::__shared_weak_count **)(v36 + 136);
        if (v38)
        {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
          int v39 = *(_DWORD *)(v36 + 320);
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v40 = v38;
        }
        else
        {
          uint64_t v40 = 0;
          int v39 = *(_DWORD *)(v36 + 320);
        }
        *(void *)&long long v41 = v37;
        *((void *)&v41 + 1) = v40;
        LODWORD(v186) = 2;
        *(double *)&long long v187 = v35 + (double)v39 + v35 + (double)v39;
        *((void *)&v187 + 1) = 0;
        long long v188 = v41;
        BOOL v26 = (AMCP::Log::Scope_Registry *)(v36 + 304);
        switch(*(_DWORD *)(v36 + 152))
        {
          case 1:
            operator new();
          case 2:
            operator new();
          case 3:
            operator new();
          case 4:
            uint64_t v42 = *((void *)v33 + 6);
            if (!v42)
            {
              AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v32);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
              mach_port_t v162 = **(NSObject ***)buf;
              if (*(void *)&buf[8]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
              }
              if (os_log_type_enabled(v162, OS_LOG_TYPE_ERROR))
              {
                uint64_t v163 = pthread_self();
                mach_port_t v164 = pthread_mach_thread_np(v163);
                *(_DWORD *)std::string buf = 67109890;
                *(_DWORD *)&uint8_t buf[4] = v164;
                *(_WORD *)&uint8_t buf[8] = 2080;
                *(void *)&buf[10] = "Manifest_Buffer.cpp";
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = 90;
                LOWORD(v190) = 2080;
                *(void *)((char *)&v190 + 2) = "not (msm.operator BOOL())";
                _os_log_error_impl(&dword_1BAA78000, v162, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to create a synchronized mixer without a manager", buf, 0x22u);
              }
              AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)v178);
              __cxa_allocate_exception(0x40uLL);
              caulk::make_string((caulk *)"Attempt to create a synchronized mixer without a manager", (uint64_t)&v179);
              std::logic_error::logic_error(&v173, &v179);
              v173.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
              std::logic_error::logic_error(&v180, &v173);
              uint64_t v182 = 0;
              uint64_t v183 = 0;
              uint64_t v184 = 0;
              int v185 = -1;
              v180.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
              v181 = &unk_1F1489CF0;
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v180);
              *((void *)&v190 + 1) = "void AMCP::Graph::Manifest_Buffer::allocate(const std::shared_ptr<Synchronized_Mi"
                                       "xer_Manager> &, DAL::Sample_Time)";
              int v191 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
              int v192 = 90;
              std::vector<void *>::vector(&v176);
              int v165 = backtrace((void **)&v176.~logic_error, (unint64_t)(v176.__imp_.__imp_ - (const char *)v176.__vftable) >> 3);
              std::vector<void *>::resize((char **)&v176, v165);
              v174.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
              *(std::logic_error *)&v174.__r_.__value_.__r.__words[1] = v176;
              uint64_t v175 = v177;
              v176.__vftable = 0;
              v176.__imp_.__imp_ = 0;
              uint64_t v177 = 0;
              boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
            }
            AMCP::Graph::Synchronized_Mixer_Manager::get_mixer((unint64_t)buf, v42, (unsigned __int8 **)(v36 + 8), v36 + 88, (const AMCP::DAL::DAL_Time_Delta *)&v186);
            long long v43 = *(std::__shared_weak_count **)(v36 + 312);
            *(_OWORD *)(v36 + 304) = *(_OWORD *)buf;
            BOOL v26 = v168;
            if (v43) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v43);
            }
            break;
          default:
            break;
        }
        if (*((void *)&v188 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v188 + 1));
        }
        if (v38) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v38);
        }
      }
      uint64_t v44 = v34[12];
      uint64_t v46 = *((void *)v26 + 12);
      uint64_t v45 = *((void *)v26 + 13);
      if (v45) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v45 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v32 = *(char **)(v44 + 336);
      *(void *)(v44 + 328) = v46;
      *(void *)(v44 + 336) = v45;
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v32);
      }
      uint64_t v34 = (void *)*v34;
    }
    while (v34);
  }
  uint64_t v47 = (uint64_t **)*((void *)v33 + 14);
  for (uint64_t i = (uint64_t **)*((void *)v33 + 15); v47 != i; v47 += 2)
  {
    uint64_t v48 = *v47;
    uint64_t v49 = (std::__shared_weak_count *)(*v47)[1];
    if (v49)
    {
      double v50 = std::__shared_weak_count::lock(v49);
      if (v50)
      {
        if (*v48)
        {
          double v51 = (unsigned int *)(*v48 + 128);
          unsigned int v52 = atomic_load(v51);
          if ((v52 & 0x80000000) != 0)
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v50);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            uint64_t v143 = **(NSObject ***)buf;
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (os_log_type_enabled(v143, OS_LOG_TYPE_ERROR))
            {
              uint64_t v144 = pthread_self();
              mach_port_t v145 = pthread_mach_thread_np(v144);
              *(_DWORD *)std::string buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v145;
              *(_WORD *)&uint8_t buf[8] = 2080;
              *(void *)&buf[10] = "Device.h";
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 80;
              LOWORD(v190) = 2080;
              *(void *)((char *)&v190 + 2) = "not (m_refcount >= 0)";
              _os_log_error_impl(&dword_1BAA78000, v143, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v173);
            __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"", (uint64_t)&v174);
            std::logic_error::logic_error(&v176, &v174);
            v176.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
            std::logic_error::logic_error(&v180, &v176);
            uint64_t v182 = 0;
            uint64_t v183 = 0;
            uint64_t v184 = 0;
            int v185 = -1;
            v180.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
            v181 = &unk_1F1489CF0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v180);
            *((void *)&v190 + 1) = "void AMCP::IO_Core::Device_Node_State::add_reference()";
            int v191 = "Source/AMCP/IO/IO_Core/Device.h";
            int v192 = 80;
            std::vector<void *>::vector(&v179);
            int v146 = backtrace((void **)v179.__r_.__value_.__l.__data_, (v179.__r_.__value_.__l.__size_ - v179.__r_.__value_.__r.__words[0]) >> 3);
            std::vector<void *>::resize(&v179.__r_.__value_.__l.__data_, v146);
            long long v187 = *(_OWORD *)&v179.__r_.__value_.__l.__data_;
            v186 = &unk_1F148AA90;
            *(void *)&long long v188 = *((void *)&v179.__r_.__value_.__l + 2);
            memset(&v179, 0, sizeof(v179));
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
          }
          atomic_fetch_add((atomic_uint *volatile)v51, 1u);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v50);
      }
    }
    uint64_t v53 = *v47;
    int v54 = (std::__shared_weak_count *)(*v47)[1];
    if (!v54 || (v54 = std::__shared_weak_count::lock(v54), (v55 = v54) == 0) || (uint64_t v56 = *v53) == 0)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v54);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      long long v127 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
      {
        std::string::size_type v128 = pthread_self();
        mach_port_t v129 = pthread_mach_thread_np(v128);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v129;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Device_Connection.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 42;
        LOWORD(v190) = 2080;
        *(void *)((char *)&v190 + 2) = "not (device_state.operator BOOL())";
        _os_log_error_impl(&dword_1BAA78000, v127, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v173);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v174);
      std::logic_error::logic_error(&v176, &v174);
      v176.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v180, &v176);
      uint64_t v182 = 0;
      uint64_t v183 = 0;
      uint64_t v184 = 0;
      int v185 = -1;
      v180.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      v181 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v180);
      *((void *)&v190 + 1) = "void AMCP::IO_Core::Device_Connection::setup_processing()";
      int v191 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
      int v192 = 42;
      std::vector<void *>::vector(&v179);
      int v130 = backtrace((void **)v179.__r_.__value_.__l.__data_, (v179.__r_.__value_.__l.__size_ - v179.__r_.__value_.__r.__words[0]) >> 3);
      std::vector<void *>::resize(&v179.__r_.__value_.__l.__data_, v130);
      long long v187 = *(_OWORD *)&v179.__r_.__value_.__l.__data_;
      v186 = &unk_1F148AA90;
      *(void *)&long long v188 = *((void *)&v179.__r_.__value_.__l + 2);
      memset(&v179, 0, sizeof(v179));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    uint64_t v58 = *(void *)(v56 + 96);
    uint64_t v57 = *(std::__shared_weak_count **)(v56 + 104);
    if (v57)
    {
      atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
    if (!v58)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v57);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      long long v135 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
      {
        std::logic_error v136 = pthread_self();
        mach_port_t v137 = pthread_mach_thread_np(v136);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v137;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Device_Connection.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 43;
        LOWORD(v190) = 2080;
        *(void *)((char *)&v190 + 2) = "not (device_state->get_engine())";
        _os_log_error_impl(&dword_1BAA78000, v135, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v173);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v174);
      std::logic_error::logic_error(&v176, &v174);
      v176.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v180, &v176);
      uint64_t v182 = 0;
      uint64_t v183 = 0;
      uint64_t v184 = 0;
      int v185 = -1;
      v180.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      v181 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v180);
      *((void *)&v190 + 1) = "void AMCP::IO_Core::Device_Connection::setup_processing()";
      int v191 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
      int v192 = 43;
      std::vector<void *>::vector(&v179);
      int v138 = backtrace((void **)v179.__r_.__value_.__l.__data_, (v179.__r_.__value_.__l.__size_ - v179.__r_.__value_.__r.__words[0]) >> 3);
      std::vector<void *>::resize(&v179.__r_.__value_.__l.__data_, v138);
      long long v187 = *(_OWORD *)&v179.__r_.__value_.__l.__data_;
      v186 = &unk_1F148AA90;
      *(void *)&long long v188 = *((void *)&v179.__r_.__value_.__l + 2);
      memset(&v179, 0, sizeof(v179));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    unsigned int v59 = atomic_load((unsigned int *)(v56 + 128));
    if (v59 == 1)
    {
      uint64_t v61 = *(void *)(v56 + 96);
      uint64_t v60 = *(void *)(v56 + 104);
      if (v60) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)std::string buf = &unk_1F1481D40;
      *(void *)&uint8_t buf[8] = v61;
      *(void *)&buf[16] = v60;
      *(void *)&long long v190 = buf;
      AMCP::IO_Core::Device_Node_State::for_each_stream_connection(v56, (uint64_t)buf);
      std::__function::__value_func<void ()(AMCP::IO_Core::Stream_Connection &)>::~__value_func[abi:ne180100](buf);
    }
    char v62 = 0;
    uint64_t v63 = 0;
    *(void *)std::string buf = 1;
    do
    {
      char v64 = v62;
      unsigned int v65 = *(_DWORD *)&buf[4 * v63];
      uint64_t v66 = *(void **)(v56 + 8 + 40 * v65 + 16);
      if (v66)
      {
        uint64_t v67 = *(void *)(v56 + 136 + 24 * v65);
        do
        {
          *(void *)(v67 + ((v66[5] >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v66[5];
          uint64_t v66 = (void *)*v66;
        }
        while (v66);
      }
      char v62 = 1;
      uint64_t v63 = 1;
    }
    while ((v64 & 1) == 0);
    if (*(void *)(v56 + 168)) {
      (*(void (**)(void, uint64_t))(**(void **)(v56 + 96) + 160))(*(void *)(v56 + 96), v56 + 160);
    }
    if (*(void *)(v56 + 144)) {
      (*(void (**)(void, uint64_t))(**(void **)(v56 + 96) + 176))(*(void *)(v56 + 96), v56 + 136);
    }
    *(void *)std::string buf = &unk_1F1481BB0;
    *(void *)&long long v190 = buf;
    AMCP::IO_Core::Device_Node_State::for_each_stream_connection(v56, (uint64_t)buf);
    std::__function::__value_func<void ()(AMCP::IO_Core::Stream_Connection &)>::~__value_func[abi:ne180100](buf);
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
    int v68 = *v47;
    uint64_t v69 = (std::__shared_weak_count *)(*v47)[1];
    if (!v69
      || (uint64_t v70 = *(unsigned int *)(*((void *)v33 + 8) + 40),
          uint64_t v69 = std::__shared_weak_count::lock(v69),
          (char v71 = v69) == 0)
      || (uint64_t v72 = *v68) == 0)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v69);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      long long v131 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
      {
        long long v132 = pthread_self();
        mach_port_t v133 = pthread_mach_thread_np(v132);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v133;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Device_Connection.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 54;
        LOWORD(v190) = 2080;
        *(void *)((char *)&v190 + 2) = "not (device_state.operator BOOL())";
        _os_log_error_impl(&dword_1BAA78000, v131, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v173);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v174);
      std::logic_error::logic_error(&v176, &v174);
      v176.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v180, &v176);
      uint64_t v182 = 0;
      uint64_t v183 = 0;
      uint64_t v184 = 0;
      int v185 = -1;
      v180.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      v181 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v180);
      *((void *)&v190 + 1) = "void AMCP::IO_Core::Device_Connection::begin_processing(uint32_t, const DAL::DAL_Time_Delta &)";
      int v191 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
      int v192 = 54;
      std::vector<void *>::vector(&v179);
      int v134 = backtrace((void **)v179.__r_.__value_.__l.__data_, (v179.__r_.__value_.__l.__size_ - v179.__r_.__value_.__r.__words[0]) >> 3);
      std::vector<void *>::resize(&v179.__r_.__value_.__l.__data_, v134);
      long long v187 = *(_OWORD *)&v179.__r_.__value_.__l.__data_;
      v186 = &unk_1F148AA90;
      *(void *)&long long v188 = *((void *)&v179.__r_.__value_.__l + 2);
      memset(&v179, 0, sizeof(v179));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    uint64_t v74 = *(void *)(v72 + 96);
    uint64_t v73 = *(std::__shared_weak_count **)(v72 + 104);
    if (v73)
    {
      atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v73);
    }
    if (!v74)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v73);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      std::logic_error v139 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
      {
        uint64_t v140 = pthread_self();
        mach_port_t v141 = pthread_mach_thread_np(v140);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v141;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Device_Connection.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 55;
        LOWORD(v190) = 2080;
        *(void *)((char *)&v190 + 2) = "not (device_state->get_engine())";
        _os_log_error_impl(&dword_1BAA78000, v139, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v173);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v174);
      std::logic_error::logic_error(&v176, &v174);
      v176.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v180, &v176);
      uint64_t v182 = 0;
      uint64_t v183 = 0;
      uint64_t v184 = 0;
      int v185 = -1;
      v180.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      v181 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v180);
      *((void *)&v190 + 1) = "void AMCP::IO_Core::Device_Connection::begin_processing(uint32_t, const DAL::DAL_Time_Delta &)";
      int v191 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
      int v192 = 55;
      std::vector<void *>::vector(&v179);
      int v142 = backtrace((void **)v179.__r_.__value_.__l.__data_, (v179.__r_.__value_.__l.__size_ - v179.__r_.__value_.__r.__words[0]) >> 3);
      std::vector<void *>::resize(&v179.__r_.__value_.__l.__data_, v142);
      long long v187 = *(_OWORD *)&v179.__r_.__value_.__l.__data_;
      v186 = &unk_1F148AA90;
      *(void *)&long long v188 = *((void *)&v179.__r_.__value_.__l + 2);
      memset(&v179, 0, sizeof(v179));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    unsigned int v75 = atomic_load((unsigned int *)(v72 + 128));
    if (v75 == 1)
    {
      v170 = v71;
      char v76 = v33;
      uint64_t v78 = *(void *)(v72 + 96);
      long long v77 = *(std::__shared_weak_count **)(v72 + 104);
      if (v77) {
        atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v79 = *(std::logic_error_vtbl **)(v72 + 112);
      uint64_t v80 = *(void *)(v72 + 120);
      v180.__vftable = v79;
      v180.__imp_.__imp_ = (const char *)v80;
      if (v80) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v80 + 8), 1uLL, memory_order_relaxed);
      }
      AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)buf, v169, (uint64_t *)&v180);
      if ((buf[0] & 2) == 0) {
        AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)buf);
      }
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v78 + 224))(v78, v70, vcvtmd_s64_f64(*(double *)&buf[8]));
      if (*((void *)&v190 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v190 + 1));
      }
      char v33 = v76;
      if (v80) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v80);
      }
      char v71 = v170;
      if (v77) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v77);
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  AMCP::Graph::Manifest_Inventory::take_power_assertions(v33);
  uint64_t v82 = *((void *)v168 + 9);
  uint64_t v83 = *(void **)(v82 + 80);
  uint64_t v84 = *(std::__shared_weak_count **)(v82 + 88);
  if (v84) {
    atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v83[5] == v83[6])
  {
    AMCP::Log::Scope_Registry::get(v81);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v156 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
    {
      uint64_t v157 = pthread_self();
      mach_port_t v158 = pthread_mach_thread_np(v157);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v158;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Timebase_Set.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 59;
      LOWORD(v190) = 2080;
      *(void *)((char *)&v190 + 2) = "not (not m_state.empty())";
      _os_log_error_impl(&dword_1BAA78000, v156, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to start a Timebase_Set with no start state", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v173);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to start a Timebase_Set with no start state", (uint64_t)&v174);
    std::logic_error::logic_error(&v176, &v174);
    v176.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v180, &v176);
    uint64_t v182 = 0;
    uint64_t v183 = 0;
    uint64_t v184 = 0;
    int v185 = -1;
    v180.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    v181 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v180);
    *((void *)&v190 + 1) = "Start_Stop_Result AMCP::Graph::Timebase_Set::start() const";
    int v191 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Timebase_Set.cpp";
    int v192 = 59;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v179.__r_.__value_.__l.__data_);
    long long v187 = *(_OWORD *)&v179.__r_.__value_.__l.__data_;
    v186 = &unk_1F148AA90;
    *(void *)&long long v188 = *((void *)&v179.__r_.__value_.__l + 2);
    memset(&v179, 0, sizeof(v179));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  unint64_t v85 = v83[3];
  if (!v85)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    std::string v159 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
    {
      long long v160 = pthread_self();
      mach_port_t v161 = pthread_mach_thread_np(v160);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v161;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Timebase_Set.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 60;
      LOWORD(v190) = 2080;
      *(void *)((char *)&v190 + 2) = "not (not m_timebases.empty())";
      _os_log_error_impl(&dword_1BAA78000, v159, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to run an manifest with no timebases", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v173);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to run an manifest with no timebases", (uint64_t)&v174);
    std::logic_error::logic_error(&v176, &v174);
    v176.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v180, &v176);
    uint64_t v182 = 0;
    uint64_t v183 = 0;
    uint64_t v184 = 0;
    int v185 = -1;
    v180.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    v181 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v180);
    *((void *)&v190 + 1) = "Start_Stop_Result AMCP::Graph::Timebase_Set::start() const";
    int v191 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Timebase_Set.cpp";
    int v192 = 60;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v179.__r_.__value_.__l.__data_);
    long long v187 = *(_OWORD *)&v179.__r_.__value_.__l.__data_;
    v186 = &unk_1F148AA90;
    *(void *)&long long v188 = *((void *)&v179.__r_.__value_.__l + 2);
    memset(&v179, 0, sizeof(v179));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  memset(&v179, 0, sizeof(v179));
  long long v172 = v84;
  if (v85 >> 60) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  *((void *)&v190 + 1) = (char *)&v179.__r_.__value_.__l + 16;
  *(void *)std::string buf = std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v85);
  *(void *)&uint8_t buf[8] = *(void *)buf;
  *(void *)&buf[16] = *(void *)buf;
  *(void *)&long long v190 = *(void *)buf + 16 * v86;
  std::vector<std::shared_ptr<AMCP::Graph::Timebase>>::__swap_out_circular_buffer((uint64_t *)&v179, buf);
  std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)buf);
  char v87 = (unsigned int *)v83[5];
  uint64_t v88 = (unsigned int *)v83[6];
  if (v87 == v88)
  {
    mach_port_t v102 = v168;
    char v101 = v169;
    long long v103 = v172;
  }
  else
  {
    do
    {
      std::logic_error v89 = v83 + 2;
      while (1)
      {
        std::logic_error v89 = (void *)*v89;
        if (!v89) {
          break;
        }
        (*(void (**)(void, void))(*(void *)v89[2] + 80))(v89[2], *v87);
        std::string::size_type size = v179.__r_.__value_.__l.__size_;
        if (v179.__r_.__value_.__l.__size_ >= v179.__r_.__value_.__r.__words[2])
        {
          uint64_t v93 = (uint64_t)(v179.__r_.__value_.__l.__size_ - v179.__r_.__value_.__r.__words[0]) >> 4;
          unint64_t v94 = v93 + 1;
          if ((unint64_t)(v93 + 1) >> 60) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          int64_t v95 = v179.__r_.__value_.__r.__words[2] - v179.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v179.__r_.__value_.__r.__words[2] - v179.__r_.__value_.__r.__words[0]) >> 3 > v94) {
            unint64_t v94 = v95 >> 3;
          }
          if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v96 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v96 = v94;
          }
          *((void *)&v188 + 1) = (char *)&v179.__r_.__value_.__l + 16;
          int v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v96);
          char v98 = &v97[16 * v93];
          v186 = v97;
          *(void *)&long long v187 = v98;
          *(void *)&long long v188 = &v97[16 * v99];
          long long v100 = *((_OWORD *)v89 + 1);
          *(_OWORD *)char v98 = v100;
          if (*((void *)&v100 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v100 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          *((void *)&v187 + 1) = v98 + 16;
          std::vector<std::shared_ptr<AMCP::Graph::Timebase>>::__swap_out_circular_buffer((uint64_t *)&v179, &v186);
          std::string::size_type v92 = v179.__r_.__value_.__l.__size_;
          std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v186);
        }
        else
        {
          *(void *)v179.__r_.__value_.__l.__size_ = v89[2];
          uint64_t v91 = v89[3];
          *(void *)(size + 8) = v91;
          if (v91) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v91 + 8), 1uLL, memory_order_relaxed);
          }
          std::string::size_type v92 = size + 16;
        }
        v179.__r_.__value_.__l.__size_ = v92;
      }
      ++v87;
    }
    while (v87 != v88);
    mach_port_t v102 = v168;
    char v101 = v169;
    long long v103 = v172;
  }
  *(void *)std::string buf = &v179;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v103) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v103);
  }
  uint64_t v104 = *((void *)v102 + 12);
  if (v104)
  {
    AMCP::Graph::Manifest::get_iocontext_uid((AMCP::Graph::Manifest *)buf, v102);
    if (buf[23] >= 0) {
      uint64_t v110 = buf;
    }
    else {
      LOBYTE(v110) = buf[0];
    }
    AMCP::Graph::Manifest_Log::add_message(v104, 0, "Manifest: %s Hardware Start: %p", v105, v106, v107, v108, v109, (char)v110);
  }
  if (*(_DWORD *)(a3 + 4) == 2)
  {
    for (uint64_t j = *((void *)v102 + 2); j != *((void *)v102 + 1); j -= 16)
    {
      uint64_t v112 = *(void *)(j - 16);
      AMCP::Graph::Manifest_Task::maybe_create_data_flow_calculator(v112);
      (*(void (**)(void, AMCP::DAL::DAL_Time_Delta *))(**(void **)(v112 + 104) + 40))(*(void *)(v112 + 104), v101);
    }
    uint64_t v116 = *((void *)v102 + 9);
    mach_port_t v114 = *(AMCP::Log::Scope_Registry **)(v116 + 80);
    double v115 = *(std::__shared_weak_count **)(v116 + 88);
    if (v115) {
      atomic_fetch_add_explicit(&v115->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v113 = *((void *)v102 + 9);
    mach_port_t v114 = *(AMCP::Log::Scope_Registry **)(v113 + 80);
    double v115 = *(std::__shared_weak_count **)(v113 + 88);
    if (v115) {
      atomic_fetch_add_explicit(&v115->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  long long v117 = AMCP::Graph::Timebase_Set::wait_for_time_to_start(v114, v166);
  if (v115) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v115);
  }
  if (v117 == 1)
  {
    uint64_t v118 = *((void *)v102 + 9);
    double v119 = *(AMCP::Graph::Timebase_Set **)(v118 + 80);
    uint64_t v120 = *(std::__shared_weak_count **)(v118 + 88);
    if (v120) {
      atomic_fetch_add_explicit(&v120->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v121 = (AMCP::Log::Scope_Registry *)AMCP::Graph::Timebase_Set::stop(v119);
    int v122 = (int)v121;
    if (v120) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v120);
    }
    if (v122)
    {
      AMCP::Log::Scope_Registry::get(v121);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v123 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v123, OS_LOG_TYPE_DEBUG))
      {
        char v124 = pthread_self();
        mach_port_t v125 = pthread_mach_thread_np(v124);
        *(_DWORD *)std::string buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v125;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Manifest.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 517;
        _os_log_debug_impl(&dword_1BAA78000, v123, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Error stopping timebases after start failure", buf, 0x18u);
      }
    }
  }
  else
  {
    *(_DWORD *)mach_port_t v102 = 1;
  }
  return v117;
}

void sub_1BAD99468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  long long v43 = *(std::__shared_weak_count **)(v41 - 200);
  if (v43)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
    if (!v40) {
LABEL_5:
    }
      _Unwind_Resume(a1);
  }
  else if (!v40)
  {
    goto LABEL_5;
  }
  JUMPOUT(0x1BAD99E24);
}

void sub_1BAD9990C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17, uint64_t a18, uint64_t a19, void *a20,long long a21,uint64_t a22,std::string *a23,std::logic_error a24,std::logic_error a25,uint64_t a26,void *a27,uint64_t a28,std::logic_error a29,std::logic_error a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35)
{
  if (a2 == 2)
  {
    uint64_t v37 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(a1);
    uint64_t v38 = *(unsigned int **)(v35 + 40);
    int v39 = *(unsigned int **)(v35 + 48);
    if (v38 != v39)
    {
      do
      {
        uint64_t v40 = a27;
        uint64_t v41 = a28;
        while (v40 != (void *)v41)
        {
          (*(void (**)(void, void))(*(void *)*v40 + 112))(*v40, *v38);
          v40 += 2;
        }
        ++v38;
      }
      while (v38 != v39);
      __cxa_end_catch();
      JUMPOUT(0x1BAD974F0);
    }
    AMCP::Log::Scope_Registry::get(v37);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)(v36 - 192), "com.apple.coreaudio", "AMCP");
    uint64_t v42 = *(std::__shared_weak_count **)(v36 - 184);
    long long v43 = **(NSObject ***)(v36 - 192);
    if (v42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v42);
    }
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      uint64_t v44 = pthread_self();
      mach_port_t v45 = pthread_mach_thread_np(v44);
      *(_DWORD *)(v36 - 192) = 67109890;
      *(_DWORD *)(v36 - 188) = v45;
      *(_WORD *)(v36 - 184) = 2080;
      uint64_t v46 = v36 - 232;
      *(void *)(v46 + 50) = "Timebase_Set.cpp";
      *(_WORD *)(v36 - 174) = 1024;
      *(_DWORD *)(v36 - 172) = 82;
      *(_WORD *)(v36 - 168) = 2080;
      *(void *)(v46 + 66) = "not (not m_state.empty())";
      _os_log_error_impl(&dword_1BAA78000, v43, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)(v36 - 192), 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)((char *)&a26 + 7));
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&a23);
    std::logic_error::logic_error(&a25, (const std::string *)&a23);
    a25.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&a30, &a25);
    a32 = 0;
    a33 = 0;
    a34 = 0;
    a35 = -1;
    a30.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    a31 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl(v36 - 192, (uint64_t)&a30);
    *(void *)(v36 - 160) = "Start_Stop_Result AMCP::Graph::Timebase_Set::start() const";
    *(void *)(v36 - 152) = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Timebase_Set.cpp";
    *(_DWORD *)(v36 - 144) = 82;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&a17);
    a20 = &unk_1F148AA90;
    a21 = a17;
    a22 = a18;
    a17 = 0uLL;
    a18 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  JUMPOUT(0x1BAD99574);
}

void sub_1BAD9992C(_Unwind_Exception *a1)
{
}

void sub_1BAD99934()
{
}

void sub_1BAD99BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAD999ACLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BAD99C84()
{
}

void sub_1BAD99C9C()
{
}

void sub_1BAD99D08()
{
}

void sub_1BAD99D4C()
{
}

void sub_1BAD99D80()
{
}

void sub_1BAD99D8C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAD99D9C()
{
}

void sub_1BAD99DE0()
{
}

void sub_1BAD99E1C(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest::get_iocontext_uid(AMCP::Graph::Manifest *this, void *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = a2[11];
  uint64_t v3 = a2[1];
  if (v2 >= (a2[2] - v3) >> 4)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v9 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      uint64_t v12 = (uint64_t)(a2[2] - a2[1]) >> 4;
      *(_DWORD *)std::string buf = 67110402;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)uint64_t v28 = 2080;
      *(void *)&void v28[2] = "Manifest.cpp";
      __int16 v29 = 1024;
      int v30 = 815;
      __int16 v31 = 2080;
      *(void *)uint64_t v32 = "not (index < m_tasks.size())";
      *(_WORD *)&v32[8] = 2048;
      *(void *)&v32[10] = v2;
      *(_WORD *)&v32[18] = 2048;
      *(void *)&v32[20] = v12;
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Index out of bounds - index: %ld  size: %ld", buf, 0x36u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Index out of bounds - index: %ld  size: %ld", (uint64_t)&v18, v2, (uint64_t)(a2[2] - a2[1]) >> 4);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v21 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(void *)&v32[6] = "std::shared_ptr<Manifest_Task> AMCP::Graph::Manifest::get_nth(size_t) const";
    *(void *)&unsigned char v32[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
    *(_DWORD *)&v32[22] = 815;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    uint64_t v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  long long v4 = *(_OWORD *)(v3 + 16 * v2);
  unsigned int v5 = *(std::__shared_weak_count **)(v3 + 16 * v2 + 8);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = v4;
  if (*(char *)(v4 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this, *(const std::string::value_type **)(v4 + 64), *(void *)(v4 + 72));
  }
  else
  {
    long long v7 = *(_OWORD *)(v4 + 64);
    *((void *)this + 2) = *(void *)(v6 + 80);
    *(_OWORD *)this = v7;
  }
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1BAD9A180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,char a28)
{
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Manifest::calculate_all_required_input_samples(AMCP::Graph::Manifest *this, const AMCP::Graph::Manifest_Execution_Context *a2)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 2);
  if (v2 == *((void *)this + 1)) {
    return;
  }
  do
  {
    uint64_t v5 = *(void *)(v2 - 16);
    v2 -= 16;
    AMCP::Graph::Manifest_Task::maybe_create_data_flow_calculator(v5);
    (*(void (**)(void, const AMCP::Graph::Manifest_Execution_Context *))(**(void **)(v5 + 104) + 40))(*(void *)(v5 + 104), a2);
  }
  while (v2 != *((void *)this + 1));
  uint64_t v6 = *((void *)this + 2);
  if (v6 == v2) {
    return;
  }
  double v115 = this;
  do
  {
    long long v7 = *(AMCP::Log::Scope_Registry **)(v6 - 16);
    v6 -= 16;
    uint64_t v118 = v7;
    uint64_t v8 = *((void *)v7 + 1) - *(void *)v7;
    if (!v8) {
      continue;
    }
    unint64_t v9 = 0;
    unint64_t v10 = v8 / 40;
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    uint64_t v116 = v6;
    unint64_t v117 = v10;
    do
    {
      unint64_t v119 = v9;
      nth_connection_list = (uint64_t **)AMCP::Graph::Manifest_Task::get_nth_connection_list(v118, v9, 0);
      long long v13 = *nth_connection_list;
      uint64_t v12 = nth_connection_list[1];
      uint64_t v120 = v12;
      while (v13 != v12)
      {
        uint64_t v14 = *v13;
        unint64_t v15 = *(void *)(*v13 + 160);
        long long v16 = *(_OWORD *)(*v13 + 192);
        uint64_t v17 = *(void *)(*v13 + 200);
        if (v17) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 2;
        *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = v15;
        *(_OWORD *)std::logic_error v139 = v16;
        boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)&v134, v14 + 168, (uint64_t)&buf);
        if (*(void *)&v139[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v139[8]);
        }
        uint64_t v18 = *(void *)(v14 + 328);
        if (v18)
        {
          std::logic_error v19 = pthread_self();
          char v20 = pthread_mach_thread_np(v19);
          AMCP::Graph::Manifest_Buffer::get_buffer_id(&buf, v14);
          AMCP::Wire_Identifier_to_string(&__p, (const void **)&buf.__r_.__value_.__l.__data_);
          AMCP::Graph::Manifest_Log::add_message(v18, 4, "%u\tManifest_Buffer(%ld)::update_producer_target_samples:  source: %s", v21, v22, v23, v24, v25, v20);
        }
        if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(v14 + 248), (AMCP::DAL::DAL_Time *)&v134))
        {
          *(_DWORD *)(v14 + 248) = v134;
          *(_OWORD *)(v14 + 256) = v135;
          uint64_t v27 = v136;
          char v26 = v137;
          if (v137) {
            atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v28 = *(std::__shared_weak_count **)(v14 + 280);
          *(void *)(v14 + 272) = v27;
          *(void *)(v14 + 280) = v26;
          if (v28) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          }
        }
        double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v14 + 248));
        if (AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v14 + 248)) != (double)(uint64_t)floor(sample_time))
        {
          AMCP::Log::Scope_Registry::get(v30);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
          uint64_t v91 = *(NSObject **)buf.__r_.__value_.__l.__data_;
          if (buf.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
          }
          if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
          {
            std::string::size_type v92 = pthread_self();
            mach_port_t v93 = pthread_mach_thread_np(v92);
            double v94 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v14 + 248));
            double v95 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v14 + 248));
            LODWORD(buf.__r_.__value_.__l.__data_) = 67110402;
            HIDWORD(buf.__r_.__value_.__r.__words[0]) = v93;
            LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
            WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf.__r_.__value_.__r.__words[2]) = 456;
            *(_WORD *)std::logic_error v139 = 2080;
            *(void *)&v139[2] = "not (m_producer_target_position.get_sample_time().floor().get() == m_producer_target_p"
                                  "osition.get_sample_time().get_double())";
            *(_WORD *)&v139[10] = 2048;
            *(void *)&v139[12] = vcvtmd_s64_f64(v94);
            *(_WORD *)&v139[20] = 2048;
            *(double *)&v139[22] = v95;
            _os_log_error_impl(&dword_1BAA78000, v91, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s %lld != %f", (uint8_t *)&buf, 0x36u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v133);
          __cxa_allocate_exception(0x40uLL);
          double v96 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v14 + 248));
          double v97 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v14 + 248));
          caulk::make_string((caulk *)"%lld != %f", (uint64_t)&v126, vcvtmd_s64_f64(v96), *(void *)&v97);
          std::logic_error::logic_error(&v127, &v126);
          v127.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)&__p, &v127);
          uint64_t v129 = 0;
          uint64_t v130 = 0;
          uint64_t v131 = 0;
          int v132 = -1;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&__p);
          *(void *)&v139[8] = "void AMCP::Graph::Manifest_Buffer::update_producer_target_samples()";
          *(void *)&v139[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
          *(_DWORD *)&v139[24] = 456;
          std::vector<void *>::vector(&v121);
          int v98 = backtrace((void **)v121, (*((void *)&v121 + 1) - (void)v121) >> 3);
          std::vector<void *>::resize((char **)&v121, v98);
          uint64_t v123 = &unk_1F148AA90;
          long long v124 = v121;
          uint64_t v125 = v122;
          long long v121 = 0uLL;
          uint64_t v122 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        unint64_t v31 = *(void *)(v14 + 272);
        uint64_t v32 = *(std::__shared_weak_count **)(v14 + 280);
        if (v32) {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v33 = *(void *)(v14 + 128);
        uint64_t v34 = *(std::__shared_weak_count **)(v14 + 136);
        if (v34) {
          atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL v35 = (v31 | v33) == 0;
        if (!v31 || !v33) {
          goto LABEL_50;
        }
        uint64_t v36 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(void *)v31 + 16))(v31);
        unint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 16))(v33);
        uint64_t v37 = v36[23];
        if ((v37 & 0x80u) == 0) {
          uint64_t v38 = v36[23];
        }
        else {
          uint64_t v38 = *((void *)v36 + 1);
        }
        uint64_t v39 = *(unsigned __int8 *)(v31 + 23);
        int v40 = (char)v39;
        if ((v39 & 0x80u) != 0) {
          uint64_t v39 = *(void *)(v31 + 8);
        }
        if (v38 == v39)
        {
          if (v40 >= 0) {
            uint64_t v41 = (unsigned __int8 *)v31;
          }
          else {
            uint64_t v41 = *(unsigned __int8 **)v31;
          }
          if ((v37 & 0x80) != 0)
          {
            unint64_t v31 = memcmp(*(const void **)v36, v41, *((void *)v36 + 1));
            BOOL v35 = v31 == 0;
            goto LABEL_50;
          }
          if (v36[23])
          {
            uint64_t v42 = v37 - 1;
            do
            {
              int v44 = *v36++;
              int v43 = v44;
              int v46 = *v41++;
              int v45 = v46;
              BOOL v47 = v42-- != 0;
              char v48 = v47;
              BOOL v35 = v43 == v45;
            }
            while (v43 == v45 && (v48 & 1) != 0);
LABEL_50:
            if (!v34) {
              goto LABEL_52;
            }
LABEL_51:
            std::__shared_weak_count::__release_shared[abi:ne180100](v34);
            goto LABEL_52;
          }
          BOOL v35 = 1;
          if (v34) {
            goto LABEL_51;
          }
        }
        else
        {
          BOOL v35 = 0;
          if (v34) {
            goto LABEL_51;
          }
        }
LABEL_52:
        if (v32) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v32);
        }
        if (!v35)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v31);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
          uint64_t v99 = *(NSObject **)buf.__r_.__value_.__l.__data_;
          if (buf.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
          }
          if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
          {
            long long v100 = pthread_self();
            mach_port_t v101 = pthread_mach_thread_np(v100);
            LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
            HIDWORD(buf.__r_.__value_.__r.__words[0]) = v101;
            LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
            WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf.__r_.__value_.__r.__words[2]) = 457;
            *(_WORD *)std::logic_error v139 = 2080;
            *(void *)&v139[2] = "not (is_same_timebase(m_producer_target_position.get_clock(), get_timebase()))";
            _os_log_error_impl(&dword_1BAA78000, v99, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v133);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v126);
          std::logic_error::logic_error(&v127, &v126);
          v127.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)&__p, &v127);
          uint64_t v129 = 0;
          uint64_t v130 = 0;
          uint64_t v131 = 0;
          int v132 = -1;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&__p);
          *(void *)&v139[8] = "void AMCP::Graph::Manifest_Buffer::update_producer_target_samples()";
          *(void *)&v139[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
          *(_DWORD *)&v139[24] = 457;
          std::vector<void *>::vector(&v121);
          int v102 = backtrace((void **)v121, (*((void *)&v121 + 1) - (void)v121) >> 3);
          std::vector<void *>::resize((char **)&v121, v102);
          uint64_t v123 = &unk_1F148AA90;
          long long v124 = v121;
          uint64_t v125 = v122;
          long long v121 = 0uLL;
          uint64_t v122 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        unint64_t v49 = *(void *)(v14 + 232);
        double v50 = *(std::__shared_weak_count **)(v14 + 240);
        if (v50) {
          atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v51 = *(void *)(v14 + 128);
        unsigned int v52 = *(std::__shared_weak_count **)(v14 + 136);
        if (v52) {
          atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL v53 = (v49 | v51) == 0;
        if (!v49 || !v51) {
          goto LABEL_82;
        }
        int v54 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(void *)v49 + 16))(v49);
        unint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 16))(v51);
        uint64_t v55 = v54[23];
        if ((v55 & 0x80u) == 0) {
          uint64_t v56 = v54[23];
        }
        else {
          uint64_t v56 = *((void *)v54 + 1);
        }
        uint64_t v57 = *(unsigned __int8 *)(v49 + 23);
        int v58 = (char)v57;
        if ((v57 & 0x80u) != 0) {
          uint64_t v57 = *(void *)(v49 + 8);
        }
        if (v56 == v57)
        {
          if (v58 >= 0) {
            unsigned int v59 = (unsigned __int8 *)v49;
          }
          else {
            unsigned int v59 = *(unsigned __int8 **)v49;
          }
          if ((v55 & 0x80) != 0)
          {
            unint64_t v49 = memcmp(*(const void **)v54, v59, *((void *)v54 + 1));
            BOOL v53 = v49 == 0;
            goto LABEL_82;
          }
          if (v54[23])
          {
            uint64_t v60 = v55 - 1;
            do
            {
              int v62 = *v54++;
              int v61 = v62;
              int v64 = *v59++;
              int v63 = v64;
              BOOL v47 = v60-- != 0;
              char v65 = v47;
              BOOL v53 = v61 == v63;
            }
            while (v61 == v63 && (v65 & 1) != 0);
LABEL_82:
            if (!v52) {
              goto LABEL_84;
            }
LABEL_83:
            std::__shared_weak_count::__release_shared[abi:ne180100](v52);
            goto LABEL_84;
          }
          BOOL v53 = 1;
          if (v52) {
            goto LABEL_83;
          }
        }
        else
        {
          BOOL v53 = 0;
          if (v52) {
            goto LABEL_83;
          }
        }
LABEL_84:
        if (v50) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v50);
        }
        if (!v53)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v49);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
          long long v103 = *(NSObject **)buf.__r_.__value_.__l.__data_;
          if (buf.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
          }
          if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
          {
            uint64_t v104 = pthread_self();
            mach_port_t v105 = pthread_mach_thread_np(v104);
            LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
            HIDWORD(buf.__r_.__value_.__r.__words[0]) = v105;
            LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
            WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf.__r_.__value_.__r.__words[2]) = 458;
            *(_WORD *)std::logic_error v139 = 2080;
            *(void *)&v139[2] = "not (is_same_timebase(m_producer_write_position.get_clock(), get_timebase()))";
            _os_log_error_impl(&dword_1BAA78000, v103, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v133);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v126);
          std::logic_error::logic_error(&v127, &v126);
          v127.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)&__p, &v127);
          uint64_t v129 = 0;
          uint64_t v130 = 0;
          uint64_t v131 = 0;
          int v132 = -1;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&__p);
          *(void *)&v139[8] = "void AMCP::Graph::Manifest_Buffer::update_producer_target_samples()";
          *(void *)&v139[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
          *(_DWORD *)&v139[24] = 458;
          std::vector<void *>::vector(&v121);
          int v106 = backtrace((void **)v121, (*((void *)&v121 + 1) - (void)v121) >> 3);
          std::vector<void *>::resize((char **)&v121, v106);
          uint64_t v123 = &unk_1F148AA90;
          long long v124 = v121;
          uint64_t v125 = v122;
          long long v121 = 0uLL;
          uint64_t v122 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        unint64_t v66 = *(void *)(v14 + 192);
        uint64_t v67 = *(std::__shared_weak_count **)(v14 + 200);
        if (v67) {
          atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v68 = *(void *)(v14 + 128);
        uint64_t v69 = *(std::__shared_weak_count **)(v14 + 136);
        if (v69) {
          atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL v70 = (v66 | v68) == 0;
        if (!v66 || !v68) {
          goto LABEL_114;
        }
        char v71 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(void *)v66 + 16))(v66);
        unint64_t v66 = (*(uint64_t (**)(uint64_t))(*(void *)v68 + 16))(v68);
        uint64_t v72 = v71[23];
        if ((v72 & 0x80u) == 0) {
          uint64_t v73 = v71[23];
        }
        else {
          uint64_t v73 = *((void *)v71 + 1);
        }
        uint64_t v74 = *(unsigned __int8 *)(v66 + 23);
        int v75 = (char)v74;
        if ((v74 & 0x80u) != 0) {
          uint64_t v74 = *(void *)(v66 + 8);
        }
        if (v73 == v74)
        {
          if (v75 >= 0) {
            char v76 = (unsigned __int8 *)v66;
          }
          else {
            char v76 = *(unsigned __int8 **)v66;
          }
          if ((v72 & 0x80) != 0)
          {
            unint64_t v66 = memcmp(*(const void **)v71, v76, *((void *)v71 + 1));
            BOOL v70 = v66 == 0;
            goto LABEL_114;
          }
          if (v71[23])
          {
            uint64_t v77 = v72 - 1;
            do
            {
              int v79 = *v71++;
              int v78 = v79;
              int v81 = *v76++;
              int v80 = v81;
              BOOL v47 = v77-- != 0;
              char v82 = v47;
              BOOL v70 = v78 == v80;
            }
            while (v78 == v80 && (v82 & 1) != 0);
LABEL_114:
            if (!v69) {
              goto LABEL_116;
            }
LABEL_115:
            std::__shared_weak_count::__release_shared[abi:ne180100](v69);
            goto LABEL_116;
          }
          BOOL v70 = 1;
          if (v69) {
            goto LABEL_115;
          }
        }
        else
        {
          BOOL v70 = 0;
          if (v69) {
            goto LABEL_115;
          }
        }
LABEL_116:
        if (v67) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v67);
        }
        if (!v70)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v66);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
          uint64_t v107 = *(NSObject **)buf.__r_.__value_.__l.__data_;
          if (buf.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
          }
          if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
          {
            uint64_t v108 = pthread_self();
            mach_port_t v109 = pthread_mach_thread_np(v108);
            LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
            HIDWORD(buf.__r_.__value_.__r.__words[0]) = v109;
            LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
            WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf.__r_.__value_.__r.__words[2]) = 459;
            *(_WORD *)std::logic_error v139 = 2080;
            *(void *)&v139[2] = "not (is_same_timebase(m_consumer_read_position.get_clock(), get_timebase()))";
            _os_log_error_impl(&dword_1BAA78000, v107, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v133);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v126);
          std::logic_error::logic_error(&v127, &v126);
          v127.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)&__p, &v127);
          uint64_t v129 = 0;
          uint64_t v130 = 0;
          uint64_t v131 = 0;
          int v132 = -1;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&__p);
          *(void *)&v139[8] = "void AMCP::Graph::Manifest_Buffer::update_producer_target_samples()";
          *(void *)&v139[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
          *(_DWORD *)&v139[24] = 459;
          std::vector<void *>::vector(&v121);
          int v110 = backtrace((void **)v121, (*((void *)&v121 + 1) - (void)v121) >> 3);
          std::vector<void *>::resize((char **)&v121, v110);
          uint64_t v123 = &unk_1F148AA90;
          long long v124 = v121;
          uint64_t v125 = v122;
          long long v121 = 0uLL;
          uint64_t v122 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        BOOL v83 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(v14 + 248), (AMCP::DAL::DAL_Time *)(v14 + 168));
        if (v83)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v83);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
          double v111 = *(NSObject **)buf.__r_.__value_.__l.__data_;
          if (buf.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
          }
          if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
          {
            uint64_t v112 = pthread_self();
            mach_port_t v113 = pthread_mach_thread_np(v112);
            LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
            HIDWORD(buf.__r_.__value_.__r.__words[0]) = v113;
            LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
            WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(buf.__r_.__value_.__r.__words[2]) = 464;
            *(_WORD *)std::logic_error v139 = 2080;
            *(void *)&v139[2] = "not (m_producer_target_position >= m_consumer_read_position)";
            _os_log_error_impl(&dword_1BAA78000, v111, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v133);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v126);
          std::logic_error::logic_error(&v127, &v126);
          v127.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)&__p, &v127);
          uint64_t v129 = 0;
          uint64_t v130 = 0;
          uint64_t v131 = 0;
          int v132 = -1;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
          __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&__p);
          *(void *)&v139[8] = "void AMCP::Graph::Manifest_Buffer::update_producer_target_samples()";
          *(void *)&v139[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
          *(_DWORD *)&v139[24] = 464;
          std::vector<void *>::vector(&v121);
          int v114 = backtrace((void **)v121, (*((void *)&v121 + 1) - (void)v121) >> 3);
          std::vector<void *>::resize((char **)&v121, v114);
          uint64_t v123 = &unk_1F148AA90;
          long long v124 = v121;
          uint64_t v125 = v122;
          long long v121 = 0uLL;
          uint64_t v122 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        uint64_t v84 = *(void *)(v14 + 328);
        if (v84)
        {
          uint64_t v85 = *(void *)(v14 + 160);
          AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v14 + 248));
          AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v14 + 168));
          AMCP::Graph::Manifest_Log::add_message(v84, 4, "\t\tmin required: %lf  p target: %lf  c read: %lf", v86, v87, v88, v89, v90, v85);
        }
        if (v137) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v137);
        }
        v13 += 2;
        uint64_t v12 = v120;
      }
      unint64_t v9 = v119 + 1;
    }
    while (v119 + 1 != v117);
    uint64_t v6 = v116;
    uint64_t v2 = *((void *)v115 + 1);
  }
  while (v6 != v2);
}

void sub_1BAD9B910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50)
{
  if (a50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a50);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Graph::Manifest::write_to_dot_file(AMCP::Log::Scope_Registry *a1, uint64_t *a2)
{
  v181[19] = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  long long v4 = **(NSObject ***)buf;
  if (*(void *)v176) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v176);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    mach_port_t v141 = pthread_self();
    mach_port_t v142 = pthread_mach_thread_np(v141);
    uint64_t v143 = a2;
    if (*((char *)a2 + 23) < 0) {
      uint64_t v143 = (uint64_t *)*a2;
    }
    *(_DWORD *)std::string buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v142;
    *(_WORD *)std::logic_error v176 = 2080;
    *(void *)&v176[2] = "Manifest.cpp";
    __int16 v177 = 1024;
    int v178 = 984;
    __int16 v179 = 2080;
    v180[0] = v143;
    _os_log_debug_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Manifest::writing manifest dot file to %s", buf, 0x22u);
  }
  long long v157 = 0u;
  long long v158 = 0u;
  float v159 = 1.0;
  uint64_t v5 = MEMORY[0x1E4FBA468] + 64;
  v181[0] = MEMORY[0x1E4FBA468] + 64;
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA400] + 16);
  *(void *)std::string buf = *(void *)(MEMORY[0x1E4FBA400] + 8);
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = v6;
  long long v7 = (std::ios_base *)&buf[*(void *)(*(void *)buf - 24)];
  std::ios_base::init(v7, v176);
  uint64_t v8 = MEMORY[0x1E4FBA468] + 24;
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *(void *)std::string buf = v8;
  v181[0] = v5;
  MEMORY[0x1C18592A0](v176);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)&buf[*(void *)(*(void *)buf - 24)], *(_DWORD *)((char *)v180 + *(void *)(*(void *)buf - 24) + 6) | 4);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"// You can view this on http://www.webgraphviz.com\n", 51);
  std::ios_base::getloc((const std::ios_base *)&buf[*(void *)(*(void *)buf - 24)]);
  unint64_t v9 = std::locale::use_facet(v166, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
  std::locale::~locale(v166);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\tdigraph G {", 12);
  std::ios_base::getloc((const std::ios_base *)&buf[*(void *)(*(void *)buf - 24)]);
  unint64_t v10 = std::locale::use_facet(v166, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(v166);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\tsize =\"8,8\";", 13);
  std::ios_base::getloc((const std::ios_base *)&buf[*(void *)(*(void *)buf - 24)]);
  mach_port_t v11 = std::locale::use_facet(v166, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(v166);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\tnode [shape=plaintext fontcolor=white]", 39);
  std::ios_base::getloc((const std::ios_base *)&buf[*(void *)(*(void *)buf - 24)]);
  uint64_t v12 = std::locale::use_facet(v166, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(v166);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\n\t/* write the hidden positioning graph on the left */\n\t", 56);
  if (*((void *)a1 + 2) != *((void *)a1 + 1))
  {
    unint64_t v13 = 0;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"P", 1);
      std::ostream::operator<<();
      unint64_t v14 = (uint64_t)(*((void *)a1 + 2) - *((void *)a1 + 1)) >> 4;
      if (v13 < v14 - 1)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"->", 2);
        unint64_t v14 = (uint64_t)(*((void *)a1 + 2) - *((void *)a1 + 1)) >> 4;
      }
      ++v13;
    }
    while (v13 < v14);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)" [color=white]", 14);
  std::ios_base::getloc((const std::ios_base *)&buf[*(void *)(*(void *)buf - 24)]);
  unint64_t v15 = std::locale::use_facet(v166, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
  std::locale::~locale(v166);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\n\t/* write the nodes */", 23);
  std::ios_base::getloc((const std::ios_base *)&buf[*(void *)(*(void *)buf - 24)]);
  long long v16 = std::locale::use_facet(v166, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
  std::locale::~locale(v166);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\tnode [shape=record fontname=Helvetica fontsize=8 fontcolor=black];",
    67);
  std::ios_base::getloc((const std::ios_base *)&buf[*(void *)(*(void *)buf - 24)]);
  uint64_t v17 = std::locale::use_facet(v166, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(v166);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v18 = (AMCP::Log::Scope_Registry **)*((void *)a1 + 1);
  uint64_t v144 = (AMCP::Log::Scope_Registry **)*((void *)a1 + 2);
  if (v18 != v144)
  {
    uint64_t v19 = 0;
    while (1)
    {
      char v20 = (void *)std::ostream::operator<<();
      uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"[label=\"", 8);
      uint64_t v22 = *v18;
      int v146 = v21;
      if (*((char *)*v18 + 87) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v166, *((const std::string::value_type **)v22 + 8), *((void *)v22 + 9));
      }
      else
      {
        *(_OWORD *)&v166[0].__locale_ = *((_OWORD *)v22 + 4);
        *(void *)&long long v167 = *((void *)v22 + 10);
      }
      std::string::size_type v23 = BYTE7(v167);
      locale = v166[0].__locale_;
      uint64_t v24 = v166[1].__locale_;
      if ((SBYTE7(v167) & 0x80u) == 0) {
        uint64_t v26 = BYTE7(v167);
      }
      else {
        uint64_t v26 = (uint64_t)v166[1].__locale_;
      }
      if ((SBYTE7(v167) & 0x80u) == 0) {
        uint64_t v27 = v166;
      }
      else {
        uint64_t v27 = (std::locale *)v166[0].__locale_;
      }
      if (v26 >= 2)
      {
        uint64_t v28 = (char *)v27 + v26;
        __int16 v29 = v27;
        do
        {
          int v30 = (char *)memchr(v29, 45, v26 - 1);
          if (!v30) {
            break;
          }
          if (*(_WORD *)v30 == 15917)
          {
LABEL_134:
            if (v30 != v28 && v30 - (char *)v27 != -1)
            {
              std::string::replace((std::string *)v166, v30 - (char *)v27, 2uLL, "-\\>", 3uLL);
              std::string::size_type v23 = BYTE7(v167);
              locale = v166[0].__locale_;
              uint64_t v24 = v166[1].__locale_;
              int64_t v85 = (SBYTE7(v167) & 0x80u) == 0 ? BYTE7(v167) : (int64_t)v166[1].__locale_;
              uint64_t v27 = (SBYTE7(v167) & 0x80u) == 0 ? v166 : (std::locale *)v166[0].__locale_;
              if (v85 >= 2)
              {
                uint64_t v28 = (char *)v27 + v85;
                uint64_t v84 = v27;
                do
                {
                  int v30 = (char *)memchr(v84, 45, v85 - 1);
                  if (!v30) {
                    break;
                  }
                  if (*(_WORD *)v30 == 15917) {
                    goto LABEL_134;
                  }
                  uint64_t v84 = (std::locale *)(v30 + 1);
                  int64_t v85 = v28 - (char *)v84;
                }
                while (v28 - (char *)v84 >= 2);
              }
            }
            break;
          }
          __int16 v29 = (std::locale *)(v30 + 1);
          uint64_t v26 = v28 - (char *)v29;
        }
        while (v28 - (char *)v29 >= 2);
      }
      uint64_t v32 = *(void *)*v18;
      uint64_t v31 = *((void *)*v18 + 1);
      uint64_t v148 = *((void *)*v18 + 3);
      uint64_t v150 = *((void *)*v18 + 4);
      v174.__r_.__value_.__r.__words[2] = 0x200000000000000;
      *(_OWORD *)&v174.__r_.__value_.__l.__data_ = 0x207BuLL;
      uint64_t v33 = v31 - v32;
      if (v31 != v32)
      {
        std::string::append(&v174, "{ ", 2uLL);
        unint64_t v34 = 0;
        do
        {
          AMCP::Graph::get_connection_format_string((uint64_t)v154, *v18, 0, v34);
          std::to_string(&v160, v34);
          BOOL v35 = std::string::insert(&v160, 0, " <source", 8uLL);
          long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
          v161.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v36;
          v35->__r_.__value_.__l.__size_ = 0;
          v35->__r_.__value_.__r.__words[2] = 0;
          v35->__r_.__value_.__r.__words[0] = 0;
          uint64_t v37 = std::string::append(&v161, ">", 1uLL);
          long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
          v162.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v38;
          v37->__r_.__value_.__l.__size_ = 0;
          v37->__r_.__value_.__r.__words[2] = 0;
          v37->__r_.__value_.__r.__words[0] = 0;
          if ((SBYTE7(v155) & 0x80u) == 0) {
            uint64_t v39 = v154;
          }
          else {
            uint64_t v39 = (void **)v154[0];
          }
          if ((SBYTE7(v155) & 0x80u) == 0) {
            std::string::size_type v40 = BYTE7(v155);
          }
          else {
            std::string::size_type v40 = (std::string::size_type)v154[1];
          }
          uint64_t v41 = std::string::append(&v162, (const std::string::value_type *)v39, v40);
          long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          v163.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v42;
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          int v43 = std::string::append(&v163, " \\  ", 4uLL);
          long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
          int v165 = (char *)v43->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v44;
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v165) >= 0) {
            int v45 = __p;
          }
          else {
            int v45 = (void **)__p[0];
          }
          if (SHIBYTE(v165) >= 0) {
            std::string::size_type v46 = HIBYTE(v165);
          }
          else {
            std::string::size_type v46 = (std::string::size_type)__p[1];
          }
          std::string::append(&v174, (const std::string::value_type *)v45, v46);
          if (SHIBYTE(v165) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v163.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v162.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v161.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v160.__r_.__value_.__l.__data_);
          }
          if (v33 / 40 - 1 != v34) {
            std::string::append(&v174, " | ", 3uLL);
          }
          if (SBYTE7(v155) < 0) {
            operator delete(v154[0]);
          }
          ++v34;
        }
        while (v33 / 40 != v34);
        std::string::append(&v174, "} | ", 4uLL);
        std::string::size_type v23 = BYTE7(v167);
        locale = v166[0].__locale_;
        uint64_t v24 = v166[1].__locale_;
      }
      if ((v23 & 0x80u) == 0) {
        BOOL v47 = v166;
      }
      else {
        BOOL v47 = (std::locale *)locale;
      }
      if ((v23 & 0x80u) == 0) {
        std::string::size_type v48 = v23;
      }
      else {
        std::string::size_type v48 = (std::string::size_type)v24;
      }
      std::string::append(&v174, (const std::string::value_type *)v47, v48);
      if (v150 != v148)
      {
        std::string::append(&v174, " | { ", 5uLL);
        unint64_t v49 = 0;
        uint64_t v50 = (v150 - v148) / 40;
        do
        {
          AMCP::Graph::get_connection_format_string((uint64_t)v154, *v18, 1u, v49);
          std::to_string(&v160, v49);
          uint64_t v51 = std::string::insert(&v160, 0, " <dest", 6uLL);
          long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
          v161.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v52;
          v51->__r_.__value_.__l.__size_ = 0;
          v51->__r_.__value_.__r.__words[2] = 0;
          v51->__r_.__value_.__r.__words[0] = 0;
          BOOL v53 = std::string::append(&v161, ">", 1uLL);
          long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
          v162.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v54;
          v53->__r_.__value_.__l.__size_ = 0;
          v53->__r_.__value_.__r.__words[2] = 0;
          v53->__r_.__value_.__r.__words[0] = 0;
          if ((SBYTE7(v155) & 0x80u) == 0) {
            uint64_t v55 = v154;
          }
          else {
            uint64_t v55 = (void **)v154[0];
          }
          if ((SBYTE7(v155) & 0x80u) == 0) {
            std::string::size_type v56 = BYTE7(v155);
          }
          else {
            std::string::size_type v56 = (std::string::size_type)v154[1];
          }
          uint64_t v57 = std::string::append(&v162, (const std::string::value_type *)v55, v56);
          long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
          v163.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v58;
          v57->__r_.__value_.__l.__size_ = 0;
          v57->__r_.__value_.__r.__words[2] = 0;
          v57->__r_.__value_.__r.__words[0] = 0;
          unsigned int v59 = std::string::append(&v163, " \\  ", 4uLL);
          long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
          int v165 = (char *)v59->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v60;
          v59->__r_.__value_.__l.__size_ = 0;
          v59->__r_.__value_.__r.__words[2] = 0;
          v59->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v165) >= 0) {
            int v61 = __p;
          }
          else {
            int v61 = (void **)__p[0];
          }
          if (SHIBYTE(v165) >= 0) {
            std::string::size_type v62 = HIBYTE(v165);
          }
          else {
            std::string::size_type v62 = (std::string::size_type)__p[1];
          }
          std::string::append(&v174, (const std::string::value_type *)v61, v62);
          if (SHIBYTE(v165) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v163.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v162.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v161.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v160.__r_.__value_.__l.__data_);
          }
          if (v50 - 1 != v49) {
            std::string::append(&v174, " | ", 3uLL);
          }
          if (SBYTE7(v155) < 0) {
            operator delete(v154[0]);
          }
          ++v49;
        }
        while (v50 != v49);
      }
      std::string::append(&v174, "}}", 2uLL);
      if (SBYTE7(v167) < 0) {
        operator delete(v166[0].__locale_);
      }
      if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v63 = &v174;
      }
      else {
        int v63 = (std::string *)v174.__r_.__value_.__r.__words[0];
      }
      if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v174.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v174.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v146, (uint64_t)v63, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v146, (uint64_t)"\" ];", 4);
      std::ios_base::getloc((const std::ios_base *)((char *)v146 + *(void *)(*v146 - 24)));
      char v65 = std::locale::use_facet(v166, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
      std::locale::~locale(v166);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v174.__r_.__value_.__l.__data_);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\t\t{rank=same P", 14);
      unint64_t v66 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" ", 1);
      uint64_t v67 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"}; /* fix this node to the hidden node */",
        41);
      std::ios_base::getloc((const std::ios_base *)((char *)v67 + *(void *)(*v67 - 24)));
      uint64_t v68 = std::locale::use_facet(v166, MEMORY[0x1E4FBA258]);
      unint64_t v69 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v68->__vftable[2].~facet_0)(v68, 10);
      std::locale::~locale(v166);
      std::ostream::put();
      std::ostream::flush();
      BOOL v70 = *v18;
      unint64_t v71 = 0x9DDFEA08EB382D69 * ((8 * *v18 + 8) ^ ((unint64_t)*v18 >> 32));
      unint64_t v72 = 0x9DDFEA08EB382D69 * (((unint64_t)*v18 >> 32) ^ (v71 >> 47) ^ v71);
      unint64_t v73 = 0x9DDFEA08EB382D69 * (v72 ^ (v72 >> 47));
      unint64_t v74 = *((void *)&v157 + 1);
      if (*((void *)&v157 + 1))
      {
        uint8x8_t v75 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v157 + 8));
        v75.i16[0] = vaddlv_u8(v75);
        if (v75.u32[0] > 1uLL)
        {
          unint64_t v69 = 0x9DDFEA08EB382D69 * (v72 ^ (v72 >> 47));
          if (v73 >= *((void *)&v157 + 1)) {
            unint64_t v69 = v73 % *((void *)&v157 + 1);
          }
        }
        else
        {
          unint64_t v69 = v73 & (*((void *)&v157 + 1) - 1);
        }
        char v76 = *(void ***)(v157 + 8 * v69);
        if (v76)
        {
          for (uint64_t i = *v76; i; uint64_t i = (void *)*i)
          {
            unint64_t v78 = i[1];
            if (v78 == v73)
            {
              if ((AMCP::Log::Scope_Registry *)i[2] == v70) {
                goto LABEL_155;
              }
            }
            else
            {
              if (v75.u32[0] > 1uLL)
              {
                if (v78 >= *((void *)&v157 + 1)) {
                  v78 %= *((void *)&v157 + 1);
                }
              }
              else
              {
                v78 &= *((void *)&v157 + 1) - 1;
              }
              if (v78 != v69) {
                break;
              }
            }
          }
        }
      }
      uint64_t i = operator new(0x20uLL);
      *uint64_t i = 0;
      i[1] = v73;
      i[2] = v70;
      i[3] = 0;
      float v79 = (float)(unint64_t)(*((void *)&v158 + 1) + 1);
      if (!v74 || (float)(v159 * (float)v74) < v79)
      {
        BOOL v80 = (v74 & (v74 - 1)) != 0;
        if (v74 < 3) {
          BOOL v80 = 1;
        }
        unint64_t v81 = v80 | (2 * v74);
        unint64_t v82 = vcvtps_u32_f32(v79 / v159);
        if (v81 <= v82) {
          size_t v83 = v82;
        }
        else {
          size_t v83 = v81;
        }
        std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)&v157, v83);
        unint64_t v74 = *((void *)&v157 + 1);
        if ((*((void *)&v157 + 1) & (*((void *)&v157 + 1) - 1)) != 0)
        {
          if (v73 >= *((void *)&v157 + 1)) {
            unint64_t v69 = v73 % *((void *)&v157 + 1);
          }
          else {
            unint64_t v69 = v73;
          }
        }
        else
        {
          unint64_t v69 = (*((void *)&v157 + 1) - 1) & v73;
        }
      }
      uint64_t v86 = v157;
      uint64_t v87 = *(void **)(v157 + 8 * v69);
      if (v87)
      {
        *uint64_t i = *v87;
      }
      else
      {
        *uint64_t i = v158;
        *(void *)&long long v158 = i;
        *(void *)(v86 + 8 * v69) = &v158;
        if (!*i) {
          goto LABEL_154;
        }
        unint64_t v88 = *(void *)(*i + 8);
        if ((v74 & (v74 - 1)) != 0)
        {
          if (v88 >= v74) {
            v88 %= v74;
          }
        }
        else
        {
          v88 &= v74 - 1;
        }
        uint64_t v87 = (void *)(v157 + 8 * v88);
      }
      void *v87 = i;
LABEL_154:
      ++*((void *)&v158 + 1);
LABEL_155:
      i[3] = v19++;
      v18 += 2;
      if (v18 == v144) {
        goto LABEL_158;
      }
    }
  }
  uint64_t v19 = 0;
LABEL_158:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\tnode [shape=box,style=\"rounded,filled\",height=.1];",
    51);
  std::ios_base::getloc((const std::ios_base *)&buf[*(void *)(*(void *)buf - 24)]);
  uint64_t v89 = std::locale::use_facet(v166, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v89->__vftable[2].~facet_0)(v89, 10);
  std::locale::~locale(v166);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\n\t/* write the edges and buffers with clock coloring */", 55);
  std::ios_base::getloc((const std::ios_base *)&buf[*(void *)(*(void *)buf - 24)]);
  uint64_t v90 = std::locale::use_facet(v166, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v90->__vftable[2].~facet_0)(v90, 10);
  std::locale::~locale(v166);
  std::ostream::put();
  std::ostream::flush();
  std::string::basic_string[abi:ne180100]<0>(v166, "black");
  std::string::basic_string[abi:ne180100]<0>((void *)&v167 + 1, "purple");
  std::string::basic_string[abi:ne180100]<0>(v169, "blue");
  std::string::basic_string[abi:ne180100]<0>(v170, "red");
  std::string::basic_string[abi:ne180100]<0>(v171, "green");
  std::string::basic_string[abi:ne180100]<0>(v172, "gray");
  std::string::basic_string[abi:ne180100]<0>(v173, "orange");
  __p[0] = 0;
  __p[1] = 0;
  int v165 = 0;
  v154[0] = __p;
  LOBYTE(v154[1]) = 0;
  __p[0] = operator new(0xA8uLL);
  __p[1] = __p[0];
  int v165 = (char *)__p[0] + 168;
  uint64_t v91 = 0;
  __p[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v165, (long long *)v166, (long long *)&v174, (std::string *)__p[0]);
  do
  {
    if (SHIBYTE(v173[v91 + 2]) < 0) {
      operator delete((void *)v173[v91]);
    }
    v91 -= 3;
  }
  while (v91 != -21);
  *(_OWORD *)&v166[0].__locale_ = 0u;
  long long v167 = 0u;
  int v168 = 1065353216;
  *(_OWORD *)std::logic_error v154 = 0u;
  long long v155 = 0u;
  int v156 = 1065353216;
  mach_port_t v151 = (AMCP::Log::Scope_Registry **)*((void *)a1 + 1);
  mach_port_t v145 = (AMCP::Log::Scope_Registry **)*((void *)a1 + 2);
  if (v151 != v145)
  {
    unint64_t v92 = 0;
    do
    {
      char v93 = 0;
      uint64_t v94 = 0;
      v174.__r_.__value_.__r.__words[0] = 0x100000000;
      do
      {
        unsigned int v95 = *((_DWORD *)&v174.__r_.__value_.__l.__data_ + v94);
        char v147 = v93;
        uint64_t v96 = *((void *)*v151 + 3 * v95 + 1) - *((void *)*v151 + 3 * v95);
        if (!v96) {
          goto LABEL_254;
        }
        unint64_t v97 = 0;
        unint64_t v149 = 0xCCCCCCCCCCCCCCCDLL * (v96 >> 3);
        do
        {
          uint64_t nth_connection_list = AMCP::Graph::Manifest_Task::get_nth_connection_list(*v151, v97, v95);
          uint64_t v99 = *(unint64_t ***)nth_connection_list;
          long long v100 = *(unint64_t ***)(nth_connection_list + 8);
          while (v99 != v100)
          {
            unint64_t v101 = (*v99)[16];
            int v102 = (std::__shared_weak_count *)(*v99)[17];
            v161.__r_.__value_.__r.__words[0] = v101;
            v161.__r_.__value_.__l.__size_ = (std::string::size_type)v102;
            if (v102) {
              atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (!v154[1]) {
              goto LABEL_187;
            }
            unint64_t v103 = 0x9DDFEA08EB382D69 * (((8 * v101) + 8) ^ HIDWORD(v101));
            unint64_t v104 = 0x9DDFEA08EB382D69 * (HIDWORD(v101) ^ (v103 >> 47) ^ v103);
            unint64_t v105 = 0x9DDFEA08EB382D69 * (v104 ^ (v104 >> 47));
            uint8x8_t v106 = (uint8x8_t)vcnt_s8((int8x8_t)v154[1]);
            v106.i16[0] = vaddlv_u8(v106);
            if (v106.u32[0] > 1uLL)
            {
              unint64_t v107 = v105;
              if ((void *)v105 >= v154[1]) {
                unint64_t v107 = v105 % (unint64_t)v154[1];
              }
            }
            else
            {
              unint64_t v107 = v105 & ((unint64_t)v154[1] - 1);
            }
            uint64_t v108 = (void *)*((void *)v154[0] + v107);
            if (!v108 || (mach_port_t v109 = (void *)*v108) == 0)
            {
LABEL_187:
              unint64_t v131 = v92 + 1;
              std::__hash_table<std::__hash_value_type<std::shared_ptr<AMCP::Graph::Timebase>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<AMCP::Graph::Timebase>,std::__hash_value_type<std::shared_ptr<AMCP::Graph::Timebase>,unsigned long>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,true>,std::__unordered_map_equal<std::shared_ptr<AMCP::Graph::Timebase>,std::__hash_value_type<std::shared_ptr<AMCP::Graph::Timebase>,unsigned long>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<AMCP::Graph::Timebase>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<AMCP::Graph::Timebase>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<AMCP::Graph::Timebase> const&>,std::tuple<>>((uint64_t *)v154, v101, &v161)[4] = v92;
              goto LABEL_188;
            }
            while (1)
            {
              unint64_t v110 = v109[1];
              if (v110 == v105) {
                break;
              }
              if (v106.u32[0] > 1uLL)
              {
                if ((void *)v110 >= v154[1]) {
                  v110 %= (unint64_t)v154[1];
                }
              }
              else
              {
                v110 &= (unint64_t)v154[1] - 1;
              }
              if (v110 != v107) {
                goto LABEL_187;
              }
LABEL_186:
              mach_port_t v109 = (void *)*v109;
              if (!v109) {
                goto LABEL_187;
              }
            }
            if (v109[2] != v101) {
              goto LABEL_186;
            }
            unint64_t v131 = v92;
            unint64_t v92 = std::__hash_table<std::__hash_value_type<std::shared_ptr<AMCP::Graph::Timebase>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<AMCP::Graph::Timebase>,std::__hash_value_type<std::shared_ptr<AMCP::Graph::Timebase>,unsigned long>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,true>,std::__unordered_map_equal<std::shared_ptr<AMCP::Graph::Timebase>,std::__hash_value_type<std::shared_ptr<AMCP::Graph::Timebase>,unsigned long>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<AMCP::Graph::Timebase>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<AMCP::Graph::Timebase>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<AMCP::Graph::Timebase> const&>,std::tuple<>>((uint64_t *)v154, v101, &v161)[4];
LABEL_188:
            if (v92 >= 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3))
            {
              std::string::basic_string[abi:ne180100]<0>(&v163, "black");
            }
            else
            {
              double v111 = (char *)__p[0] + 24 * v92;
              if (v111[23] < 0)
              {
                std::string::__init_copy_ctor_external(&v163, *(const std::string::value_type **)v111, *((void *)v111 + 1));
              }
              else
              {
                long long v112 = *(_OWORD *)v111;
                v163.__r_.__value_.__r.__words[2] = *((void *)v111 + 2);
                *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v112;
              }
            }
            unint64_t v113 = **v99;
            unint64_t v153 = v113;
            if (v166[1].__locale_)
            {
              uint8x8_t v114 = (uint8x8_t)vcnt_s8((int8x8_t)v166[1].__locale_);
              v114.i16[0] = vaddlv_u8(v114);
              if (v114.u32[0] > 1uLL)
              {
                unint64_t v115 = v113;
                if ((std::locale::__imp *)v113 >= v166[1].__locale_) {
                  unint64_t v115 = v113 % (unint64_t)v166[1].__locale_;
                }
              }
              else
              {
                unint64_t v115 = ((unint64_t)v166[1].__locale_ - 1) & v113;
              }
              uint64_t v116 = (void *)*((void *)v166[0].__locale_ + v115);
              if (v116)
              {
                for (uint64_t j = (void *)*v116; j; uint64_t j = (void *)*j)
                {
                  uint64_t v118 = (std::locale::__imp *)j[1];
                  if (v118 == (std::locale::__imp *)v113)
                  {
                    if (j[2] == v113)
                    {
                      std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((float *)v166, v113, &v153);
                      uint64_t v123 = v19;
                      if (!v95) {
                        goto LABEL_232;
                      }
LABEL_218:
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\t", 1);
                      mach_port_t v152 = *v151;
                      std::__hash_table<std::__hash_value_type<AMCP::Graph::Manifest_Task *,unsigned long>,std::__unordered_map_hasher<AMCP::Graph::Manifest_Task *,std::__hash_value_type<AMCP::Graph::Manifest_Task *,unsigned long>,std::hash<AMCP::Graph::Manifest_Task *>,std::equal_to<AMCP::Graph::Manifest_Task *>,true>,std::__unordered_map_equal<AMCP::Graph::Manifest_Task *,std::__hash_value_type<AMCP::Graph::Manifest_Task *,unsigned long>,std::equal_to<AMCP::Graph::Manifest_Task *>,std::hash<AMCP::Graph::Manifest_Task *>,true>,std::allocator<std::__hash_value_type<AMCP::Graph::Manifest_Task *,unsigned long>>>::__emplace_unique_key_args<AMCP::Graph::Manifest_Task *,std::piecewise_construct_t const&,std::tuple<AMCP::Graph::Manifest_Task *&&>,std::tuple<>>((uint64_t)&v157, (unint64_t)v152, &v152);
                      long long v124 = (void *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)":dest", 5);
                      std::to_string(&v162, v97);
                      if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        uint64_t v125 = &v162;
                      }
                      else {
                        uint64_t v125 = (std::string *)v162.__r_.__value_.__r.__words[0];
                      }
                      if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v126 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v126 = v162.__r_.__value_.__l.__size_;
                      }
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)v125, v126);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)":s->", 4);
                      std::logic_error v127 = (void *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)":n[color=", 9);
                      if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v128 = &v163;
                      }
                      else {
                        std::string::size_type v128 = (std::string *)v163.__r_.__value_.__r.__words[0];
                      }
                      if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        std::string::size_type v129 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
                      }
                      else {
                        std::string::size_type v129 = v163.__r_.__value_.__l.__size_;
                      }
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)v128, v129);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)" arrowhead=none];",
                        17);
                      std::ios_base::getloc((const std::ios_base *)((char *)v127 + *(void *)(*v127 - 24)));
                      uint64_t v130 = std::locale::use_facet((const std::locale *)&v160, MEMORY[0x1E4FBA258]);
                      ((void (*)(const std::locale::facet *, uint64_t))v130->__vftable[2].~facet_0)(v130, 10);
                      std::locale::~locale((std::locale *)&v160);
                      std::ostream::put();
                      std::ostream::flush();
                      goto LABEL_245;
                    }
                  }
                  else
                  {
                    if (v114.u32[0] > 1uLL)
                    {
                      if (v118 >= v166[1].__locale_) {
                        uint64_t v118 = (std::locale::__imp *)((unint64_t)v118 % (unint64_t)v166[1].__locale_);
                      }
                    }
                    else
                    {
                      uint64_t v118 = (std::locale::__imp *)((unint64_t)v118 & ((unint64_t)v166[1].__locale_ - 1));
                    }
                    if (v118 != (std::locale::__imp *)v115) {
                      break;
                    }
                  }
                }
              }
            }
            std::to_string(&v162, v113);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\t", 1);
            unint64_t v119 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"[label=\"", 8);
            if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v120 = &v162;
            }
            else {
              uint64_t v120 = (std::string *)v162.__r_.__value_.__r.__words[0];
            }
            if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v121 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v121 = v162.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)v120, v121);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"\" ];", 4);
            std::ios_base::getloc((const std::ios_base *)((char *)v119 + *(void *)(*v119 - 24)));
            uint64_t v122 = std::locale::use_facet((const std::locale *)&v160, MEMORY[0x1E4FBA258]);
            ((void (*)(const std::locale::facet *, uint64_t))v122->__vftable[2].~facet_0)(v122, 10);
            std::locale::~locale((std::locale *)&v160);
            std::ostream::put();
            std::ostream::flush();
            std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((float *)v166, v113, &v153)[3] = v19;
            if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v162.__r_.__value_.__l.__data_);
            }
            uint64_t v123 = v19 + 1;
            if (v95) {
              goto LABEL_218;
            }
LABEL_232:
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\t", 1);
            int v132 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)":s->", 4);
            mach_port_t v152 = *v151;
            std::__hash_table<std::__hash_value_type<AMCP::Graph::Manifest_Task *,unsigned long>,std::__unordered_map_hasher<AMCP::Graph::Manifest_Task *,std::__hash_value_type<AMCP::Graph::Manifest_Task *,unsigned long>,std::hash<AMCP::Graph::Manifest_Task *>,std::equal_to<AMCP::Graph::Manifest_Task *>,true>,std::__unordered_map_equal<AMCP::Graph::Manifest_Task *,std::__hash_value_type<AMCP::Graph::Manifest_Task *,unsigned long>,std::equal_to<AMCP::Graph::Manifest_Task *>,std::hash<AMCP::Graph::Manifest_Task *>,true>,std::allocator<std::__hash_value_type<AMCP::Graph::Manifest_Task *,unsigned long>>>::__emplace_unique_key_args<AMCP::Graph::Manifest_Task *,std::piecewise_construct_t const&,std::tuple<AMCP::Graph::Manifest_Task *&&>,std::tuple<>>((uint64_t)&v157, (unint64_t)v152, &v152);
            char v133 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)":source", 7);
            std::to_string(&v162, v97);
            if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v134 = &v162;
            }
            else {
              int v134 = (std::string *)v162.__r_.__value_.__r.__words[0];
            }
            if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v135 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v135 = v162.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)v134, v135);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)":n[color=", 9);
            if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v136 = &v163;
            }
            else {
              uint64_t v136 = (std::string *)v163.__r_.__value_.__r.__words[0];
            }
            if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v137 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v137 = v163.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)v136, v137);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)"];", 2);
            std::ios_base::getloc((const std::ios_base *)((char *)v133 + *(void *)(*v133 - 24)));
            int v138 = std::locale::use_facet((const std::locale *)&v160, MEMORY[0x1E4FBA258]);
            ((void (*)(const std::locale::facet *, uint64_t))v138->__vftable[2].~facet_0)(v138, 10);
            std::locale::~locale((std::locale *)&v160);
            std::ostream::put();
            std::ostream::flush();
LABEL_245:
            if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v162.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v163.__r_.__value_.__l.__data_);
              if (v102) {
LABEL_249:
              }
                std::__shared_weak_count::__release_shared[abi:ne180100](v102);
            }
            else if (v102)
            {
              goto LABEL_249;
            }
            v99 += 2;
            unint64_t v92 = v131;
            uint64_t v19 = v123;
          }
          ++v97;
        }
        while (v97 != v149);
LABEL_254:
        char v93 = 1;
        uint64_t v94 = 1;
      }
      while ((v147 & 1) == 0);
      v151 += 2;
    }
    while (v151 != v145);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"}", 1);
  std::ios_base::getloc((const std::ios_base *)&buf[*(void *)(*(void *)buf - 24)]);
  std::logic_error v139 = std::locale::use_facet((const std::locale *)&v163, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v139->__vftable[2].~facet_0)(v139, 10);
  std::locale::~locale((std::locale *)&v163);
  std::ostream::put();
  std::ostream::flush();
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table((uint64_t)v154);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)v166);
  v166[0].__locale_ = (std::locale::__imp *)__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v166);
  *(void *)std::string buf = *MEMORY[0x1E4FBA400];
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x1E4FBA400] + 24);
  MEMORY[0x1C18592B0](v176);
  std::ostream::~ostream();
  MEMORY[0x1C1859700](v181);
  return std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)&v157);
}

void sub_1BAD9D74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::locale a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,std::locale a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,std::locale a49)
{
  std::locale::~locale(&a41);
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table((uint64_t)&a19);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)&a49);
  a49.__locale_ = (std::locale::__imp *)&a45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  uint64_t v50 = MEMORY[0x1E4FBA400];
  uint64_t v51 = *MEMORY[0x1E4FBA400];
  STACK[0x200] = *MEMORY[0x1E4FBA400];
  *(unint64_t *)((char *)&STACK[0x200] + *(void *)(v51 - 24)) = *(void *)(v50 + 24);
  MEMORY[0x1C18592B0](a10);
  std::ostream::~ostream();
  MEMORY[0x1C1859700](a11);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void AMCP::Graph::get_connection_format_string(uint64_t a1, AMCP::Log::Scope_Registry *a2, unsigned int a3, unint64_t a4)
{
  v49[2] = *MEMORY[0x1E4F143B8];
  uint64_t nth_connection_list = (void **)AMCP::Graph::Manifest_Task::get_nth_connection_list(a2, a4, a3);
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v37 = 0;
  std::vector<std::shared_ptr<AMCP::Graph::Manifest_Buffer>>::__init_with_size[abi:ne180100]<std::shared_ptr<AMCP::Graph::Manifest_Buffer>*,std::shared_ptr<AMCP::Graph::Manifest_Buffer>*>(&v37, *nth_connection_list, nth_connection_list[1], ((char *)nth_connection_list[1] - (char *)*nth_connection_list) >> 4);
  std::string::basic_string[abi:ne180100]<0>((void *)a1, "");
  if (v38 == v37) {
    goto LABEL_54;
  }
  unsigned int v6 = *(_DWORD *)(*(void *)v37 + 96);
  int v7 = *(_DWORD *)(*(void *)v37 + 100);
  unsigned int v9 = *(_DWORD *)(*(void *)v37 + 112);
  unsigned int v8 = *(_DWORD *)(*(void *)v37 + 116);
  std::to_string(&v42, *(double *)(*(void *)v37 + 88));
  unint64_t v10 = std::string::append(&v42, "-", 1uLL);
  int16x8_t v12 = *(int16x8_t *)&v10->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(int16x8_t *)&v43.__r_.__value_.__l.__data_ = v12;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v6 == 1819304813)
  {
    std::string::size_type v13 = 0;
    memset(&__s, 0, sizeof(__s));
    if (v7)
    {
      std::string::size_type v13 = 1;
      *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
      __s.__r_.__value_.__s.__data_[0] = 70;
    }
    if ((v7 & 5) == 4)
    {
      unsigned __int8 v14 = 83;
    }
    else
    {
      if ((v7 & 5) != 0) {
        goto LABEL_11;
      }
      unsigned __int8 v14 = 85;
    }
    std::string::size_type v13 = 1;
    *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
    LOWORD(__s.__r_.__value_.__l.__data_) = v14;
LABEL_11:
    if (v9)
    {
      if ((v7 & 0x20) != 0)
      {
        unsigned int v18 = 1;
      }
      else
      {
        unsigned int v18 = v8;
        if (!v8) {
          goto LABEL_14;
        }
      }
      unsigned int v19 = 8 * (v9 / v18);
      goto LABEL_17;
    }
LABEL_14:
    unsigned int v19 = 0;
LABEL_17:
    std::to_string(&v46, v19);
    char v20 = std::string::insert(&v46, 0, (const std::string::value_type *)&__s, v13);
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if ((v7 & 0x20) != 0) {
      uint64_t v22 = "";
    }
    else {
      uint64_t v22 = "I";
    }
    std::string::size_type v23 = std::string::append(&v47, v22, (v7 & 0x20) == 0);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    std::string::size_type v41 = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    unsigned int v17 = HIBYTE(v41);
    mach_port_t v11 = __p[1];
    goto LABEL_27;
  }
  v12.i32[0] = bswap32(v6);
  *(int8x8_t *)v12.i8 = vzip1_s8(*(int8x8_t *)v12.i8, *(int8x8_t *)v12.i8);
  v15.i64[0] = 0x1F0000001FLL;
  v15.i64[1] = 0x1F0000001FLL;
  v16.i64[0] = 0x5F0000005FLL;
  v16.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)v12.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v16, (uint32x4_t)vsraq_n_s32(v15, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v12.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v12.i8, (int8x8_t)0x2E002E002E002ELL);
  unsigned int v17 = 4;
  HIBYTE(v41) = 4;
  LODWORD(__p[0]) = vmovn_s16(v12).u32[0];
  BYTE4(__p[0]) = 0;
LABEL_27:
  if ((v17 & 0x80u) == 0) {
    uint64_t v25 = __p;
  }
  else {
    uint64_t v25 = (void **)__p[0];
  }
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v26 = v17;
  }
  else {
    std::string::size_type v26 = (std::string::size_type)v11;
  }
  uint64_t v27 = std::string::append(&v43, (const std::string::value_type *)v25, v26);
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  __int16 v29 = std::string::append(&v44, "-", 1uLL);
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__s, v8);
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_s = &__s;
  }
  else {
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __s.__r_.__value_.__l.__size_;
  }
  uint64_t v33 = std::string::append(&v45, (const std::string::value_type *)p_s, size);
  std::string::size_type v34 = v33->__r_.__value_.__r.__words[0];
  v49[0] = v33->__r_.__value_.__l.__size_;
  *(void *)((char *)v49 + 7) = *(std::string::size_type *)((char *)&v33->__r_.__value_.__r.__words[1] + 7);
  char v35 = HIBYTE(v33->__r_.__value_.__r.__words[2]);
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  uint64_t v36 = v49[0];
  *(void *)a1 = v34;
  *(void *)(a1 + 8) = v36;
  *(void *)(a1 + 15) = *(void *)((char *)v49 + 7);
  *(unsigned char *)(a1 + 23) = v35;
LABEL_54:
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
}

void sub_1BAD9DE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (*(char *)(v51 - 121) < 0) {
    operator delete(*(void **)(v51 - 144));
  }
  if (a50 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v51 - 89) < 0) {
    operator delete(*(void **)(v51 - 112));
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (*(char *)(v50 + 23) < 0) {
    operator delete(*(void **)v50);
  }
  *(void *)(v51 - 112) = &a10;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 112));
  _Unwind_Resume(a1);
}

void sub_1BAD9DF74()
{
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  long long v4 = this;
  mach_port_t v11 = this;
  int16x8_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  std::string v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    unsigned int v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        long long v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      unsigned int v6 = (long long *)((char *)v6 + 24);
      int16x8_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1BAD9E028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<AMCP::Graph::Timebase>,unsigned long>,std::__unordered_map_hasher<std::shared_ptr<AMCP::Graph::Timebase>,std::__hash_value_type<std::shared_ptr<AMCP::Graph::Timebase>,unsigned long>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,true>,std::__unordered_map_equal<std::shared_ptr<AMCP::Graph::Timebase>,std::__hash_value_type<std::shared_ptr<AMCP::Graph::Timebase>,unsigned long>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<AMCP::Graph::Timebase>,unsigned long>>>::__emplace_unique_key_args<std::shared_ptr<AMCP::Graph::Timebase>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<AMCP::Graph::Timebase> const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = a1[1];
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    mach_port_t v11 = *(void ***)(*a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  unsigned __int8 v14 = a1 + 2;
  int32x4_t v15 = operator new(0x28uLL);
  uint64_t i = v15;
  *int32x4_t v15 = 0;
  v15[1] = v8;
  uint64_t v16 = a3[1];
  v15[2] = *a3;
  v15[3] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  v15[4] = 0;
  float v17 = (float)(unint64_t)(a1[3] + 1);
  float v18 = *((float *)a1 + 8);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    else {
      int8x8_t prime = (int8x8_t)v20;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = a1[1];
    if (*(void *)&prime > v9) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v29 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (*(void *)&prime <= v29) {
        int8x8_t prime = (int8x8_t)v29;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          std::string::size_type v23 = operator new(8 * *(void *)&prime);
          long long v24 = (void *)*a1;
          *a1 = (uint64_t)v23;
          if (v24) {
            operator delete(v24);
          }
          uint64_t v25 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v25++) = 0;
          while (*(void *)&prime != v25);
          std::string::size_type v26 = (void *)*v14;
          if (*v14)
          {
            unint64_t v27 = v26[1];
            uint8x8_t v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(void *)&prime) {
                v27 %= *(void *)&prime;
              }
            }
            else
            {
              v27 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v27) = v14;
            uint64_t v32 = (void *)*v26;
            if (*v26)
            {
              do
              {
                unint64_t v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(void *)&prime) {
                    v33 %= *(void *)&prime;
                  }
                }
                else
                {
                  v33 &= *(void *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(void *)(*a1 + 8 * v33))
                  {
                    *(void *)(*a1 + 8 * v33) = v26;
                    goto LABEL_57;
                  }
                  *std::string::size_type v26 = *v32;
                  *uint64_t v32 = **(void **)(*a1 + 8 * v33);
                  **(void **)(*a1 + 8 * v33) = v32;
                  uint64_t v32 = v26;
                }
                unint64_t v33 = v27;
LABEL_57:
                std::string::size_type v26 = v32;
                uint64_t v32 = (void *)*v32;
                unint64_t v27 = v33;
              }
              while (v32);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_61;
        }
        uint64_t v38 = (void *)*a1;
        *a1 = 0;
        if (v38) {
          operator delete(v38);
        }
        unint64_t v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_61:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v34 = *a1;
  char v35 = *(void **)(*a1 + 8 * v3);
  if (v35)
  {
    *uint64_t i = *v35;
LABEL_74:
    *char v35 = i;
    goto LABEL_75;
  }
  *uint64_t i = *v14;
  *unsigned __int8 v14 = i;
  *(void *)(v34 + 8 * v3) = v14;
  if (*i)
  {
    unint64_t v36 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v36 >= v9) {
        v36 %= v9;
      }
    }
    else
    {
      v36 &= v9 - 1;
    }
    char v35 = (void *)(*a1 + 8 * v36);
    goto LABEL_74;
  }
LABEL_75:
  ++a1[3];
  return i;
}

void sub_1BAD9E460(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<AMCP::Graph::Timebase>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(float *a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v14 = 1;
  if (v7 >= 3) {
    BOOL v14 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v15 = v14 | (2 * v7);
  unint64_t v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16) {
    int8x8_t prime = (int8x8_t)v16;
  }
  else {
    int8x8_t prime = (int8x8_t)v15;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      unint64_t v24 = std::__next_prime(v24);
    }
    else
    {
      uint64_t v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2) {
        unint64_t v24 = v26;
      }
    }
    if (*(void *)&prime <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *((void *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      unint64_t v33 = *(void **)a1;
      *(void *)a1 = 0;
      if (v33) {
        operator delete(v33);
      }
      unint64_t v7 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  float v18 = operator new(8 * *(void *)&prime);
  BOOL v19 = *(void **)a1;
  *(void *)a1 = v18;
  if (v19) {
    operator delete(v19);
  }
  uint64_t v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v20++) = 0;
  while (*(void *)&prime != v20);
  unint64_t v21 = (void *)*((void *)a1 + 2);
  if (v21)
  {
    unint64_t v22 = v21[1];
    uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(void *)&prime) {
        v22 %= *(void *)&prime;
      }
    }
    else
    {
      v22 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
    unint64_t v27 = (void *)*v21;
    if (*v21)
    {
      do
      {
        unint64_t v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(void *)&prime) {
            v28 %= *(void *)&prime;
          }
        }
        else
        {
          v28 &= *(void *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(void *)(*(void *)a1 + 8 * v28))
          {
            *(void *)(*(void *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *unint64_t v21 = *v27;
          void *v27 = **(void **)(*(void *)a1 + 8 * v28);
          **(void **)(*(void *)a1 + 8 * v28) = v27;
          unint64_t v27 = v21;
        }
        unint64_t v28 = v22;
LABEL_56:
        unint64_t v21 = v27;
        unint64_t v27 = (void *)*v27;
        unint64_t v22 = v28;
      }
      while (v27);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  unint64_t v29 = *(void **)a1;
  uint8x8_t v30 = *(void **)(*(void *)a1 + 8 * v5);
  if (v30)
  {
    *uint64_t i = *v30;
LABEL_72:
    *uint8x8_t v30 = i;
    goto LABEL_73;
  }
  *uint64_t i = *((void *)a1 + 2);
  *((void *)a1 + 2) = i;
  v29[v5] = a1 + 4;
  if (*i)
  {
    unint64_t v31 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    uint8x8_t v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return i;
}

void sub_1BAD9E850(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<AMCP::Graph::Manifest_Task *,unsigned long>,std::__unordered_map_hasher<AMCP::Graph::Manifest_Task *,std::__hash_value_type<AMCP::Graph::Manifest_Task *,unsigned long>,std::hash<AMCP::Graph::Manifest_Task *>,std::equal_to<AMCP::Graph::Manifest_Task *>,true>,std::__unordered_map_equal<AMCP::Graph::Manifest_Task *,std::__hash_value_type<AMCP::Graph::Manifest_Task *,unsigned long>,std::equal_to<AMCP::Graph::Manifest_Task *>,std::hash<AMCP::Graph::Manifest_Task *>,true>,std::allocator<std::__hash_value_type<AMCP::Graph::Manifest_Task *,unsigned long>>>::__emplace_unique_key_args<AMCP::Graph::Manifest_Task *,std::piecewise_construct_t const&,std::tuple<AMCP::Graph::Manifest_Task *&&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    *unint64_t v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1BAD9EA94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Manifest::get_overload_time_in_host_time(AMCP::Graph::Manifest *this, const AMCP::Graph::Manifest_Execution_Context *a2)
{
  uint64_t v4 = *((void *)this + 9);
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::Graph::Manifest_Counter::get_current_cycle_anchor_time((uint64_t)v17, *(void *)(v4 + 64));
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  float v6 = *((float *)a2 + 10);
  if ((*(unsigned char *)a2 & 2) == 0) {
    AMCP::DAL::DAL_Time_Delta::validate(a2);
  }
  double v7 = (float)(v6 * (float)(uint64_t)vcvtmd_s64_f64(*((double *)a2 + 1)));
  AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)&v10, *((void *)this + 9), *((std::__shared_weak_count **)this + 10));
  int v11 = 2;
  double v12 = v7;
  uint64_t v13 = 0;
  long long v14 = v10;
  boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)v15, (uint64_t)v17, (uint64_t)&v11);
  if (*((void *)&v14 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14 + 1));
  }
  uint64_t host_time = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)v15);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  return host_time;
}

void sub_1BAD9EBA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (*(void *)(v21 - 56)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v21 - 56));
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAD9EBD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a16) {
    JUMPOUT(0x1BAD9EBB8);
  }
  JUMPOUT(0x1BAD9EBB4);
}

void sub_1BAD9EBE0()
{
  if (!v0) {
    JUMPOUT(0x1BAD9EBC8);
  }
  JUMPOUT(0x1BAD9EBC0);
}

void AMCP::Graph::Manifest::end_processing(uint64_t **this, int a2, const AMCP::Graph::Manifest_Execution_Context *a3)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)this & 0xFFFFFFFE) != 2) {
    return;
  }
  uint64_t v4 = (AMCP::Graph::Manifest *)this;
  unint64_t v5 = this[1];
  float v6 = this[2];
  while (v5 != v6)
  {
    uint64_t v7 = *v5;
    *(_DWORD *)(v7 + 88) = 0;
    uint64_t v8 = *(void *)(*(void *)(v7 + 48) + 312);
    if (v8) {
      std::function<void ()>::operator()(v8, a2);
    }
    v5 += 2;
  }
  char v65 = (AMCP::Graph::Manifest_Inventory *)*((void *)v4 + 9);
  unint64_t v9 = (void *)*((void *)v65 + 3);
  if (v9)
  {
    char v10 = 0;
    do
    {
      uint64_t v11 = v9[12];
      uint64_t v12 = *(void *)(v11 + 304);
      if (v12)
      {
        if (*(char *)(v11 + 31) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v84, *(const std::string::value_type **)(v11 + 8), *(void *)(v11 + 16));
        }
        else
        {
          unsigned long long v84 = *(_OWORD *)(v11 + 8);
          *(void *)&long long v85 = *(void *)(v11 + 24);
        }
        *((void *)&v85 + 1) = *(void *)(v11 + 32);
        LODWORD(v86) = *(_DWORD *)(v11 + 40);
        *(_DWORD *)std::string buf = a2;
        signed long long __p = v84;
        long long v77 = v85;
        unsigned long long v84 = 0uLL;
        *(void *)&long long v85 = 0;
        LODWORD(v78) = v86;
        LOBYTE(v12) = (*(uint64_t (**)(uint64_t, uint8_t *, void))(*(void *)v12 + 192))(v12, buf, *(unsigned int *)(v11 + 156));
        if (SBYTE7(v77) < 0) {
          operator delete((void *)__p);
        }
      }
      v10 |= v12;
      unint64_t v9 = (void *)*v9;
    }
    while (v9);
  }
  else
  {
    char v10 = 0;
  }
  uint64_t v13 = v65;
  long long v14 = (unsigned int *)*((void *)v65 + 8);
  if (*(unsigned char *)v14)
  {
    uint64_t v15 = *((void *)v65 + 12);
    BOOL v16 = (std::__shared_weak_count *)*((void *)v65 + 13);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 168))(v15);
    char v18 = v17;
    if (v16)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      if ((v18 & 1) == 0) {
        goto LABEL_65;
      }
LABEL_25:
      AMCP::Graph::create_cycle_info((AMCP::Graph *)buf, (const AMCP::Graph::Manifest_Counter *)v14, a3);
      uint64_t v20 = (uint64_t **)*((void *)v65 + 14);
      size_t v19 = (uint64_t **)*((void *)v65 + 15);
      if (v20 != v19)
      {
        int v63 = v4;
        do
        {
          if (v10) {
            AMCP::IO_Core::Device_Connection::end_cycle(*v20, (uint64_t)buf, a3);
          }
          uint64_t v21 = *v20;
          unint64_t v22 = (std::__shared_weak_count *)(*v20)[1];
          if (v22)
          {
            uint64_t v23 = v14[10];
            unint64_t v24 = std::__shared_weak_count::lock(v22);
            if (v24)
            {
              uint8x8_t v25 = v24;
              uint64_t v26 = *v21;
              if (*v21)
              {
                unsigned int v27 = atomic_load((unsigned int *)(v26 + 128));
                if (v27 == 1)
                {
                  uint64_t v29 = *(void *)(v26 + 96);
                  unint64_t v28 = *(std::__shared_weak_count **)(v26 + 104);
                  if (v28) {
                    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  int v64 = v28;
                  uint8x8_t v30 = *(std::__shared_weak_count **)(v26 + 120);
                  unint64_t v69 = *(void **)(v26 + 112);
                  *(void *)&long long v70 = v30;
                  if (v30) {
                    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)&v84, a3, (uint64_t *)&v69);
                  if ((v84 & 2) == 0) {
                    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v84);
                  }
                  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v29 + 232))(v29, v23, vcvtmd_s64_f64(*((double *)&v84 + 1)));
                  if (v86) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v86);
                  }
                  uint64_t v4 = v63;
                  if (v30) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
                  }
                  if (v64) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
                  }
                }
                unsigned int v31 = atomic_load((unsigned int *)(v26 + 128));
                if (v31 == 1)
                {
                  *(void *)&unsigned long long v84 = &unk_1F1481CC0;
                  *((void *)&v85 + 1) = &v84;
                  AMCP::IO_Core::Device_Node_State::for_each_stream_connection(v26, (uint64_t)&v84);
                  std::__function::__value_func<void ()(AMCP::IO_Core::Stream_Connection &)>::~__value_func[abi:ne180100](&v84);
                }
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v25);
            }
          }
          v20 += 2;
        }
        while (v20 != v19);
      }
      *(unsigned char *)long long v14 = 0;
      uint64_t v13 = v65;
      for (uint64_t i = (uint64_t **)*((void *)v65 + 3); i; uint64_t i = (uint64_t **)*i)
      {
        if (v10) {
          AMCP::Graph::Manifest_Buffer::advance((AMCP::Graph::Manifest_Buffer *)i[12]);
        }
        unint64_t v33 = i[12];
        uint64_t v34 = v33[37];
        if (v34) {
          v33[37] = v34 - 1;
        }
      }
      if (v83) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v83);
      }
      if (v82) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v82);
      }
      if (v81) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v81);
      }
      if (v80) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v80);
      }
      if (*((void *)&v77 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v77 + 1));
      }
      goto LABEL_65;
    }
    if (v17) {
      goto LABEL_25;
    }
  }
LABEL_65:
  char v35 = (uint64_t **)*((void *)v13 + 14);
  for (uint64_t j = (uint64_t **)*((void *)v13 + 15); v35 != j; v35 += 2)
  {
    uint64_t v37 = *v35;
    uint64_t v38 = (std::__shared_weak_count *)(*v35)[1];
    if (v38)
    {
      uint64_t v39 = std::__shared_weak_count::lock(v38);
      if (v39)
      {
        std::string::size_type v40 = v39;
        uint64_t v41 = *v37;
        if (v41)
        {
          uint64_t v43 = *(void *)(v41 + 96);
          std::string v42 = *(std::__shared_weak_count **)(v41 + 104);
          if (v42)
          {
            atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
            std::__shared_weak_count::__release_shared[abi:ne180100](v42);
            if (!v43) {
              goto LABEL_90;
            }
            uint64_t v43 = *(void *)(v41 + 96);
            uint64_t v44 = *(void *)(v41 + 104);
            if (v44) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            if (!v43)
            {
LABEL_90:
              AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v42);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
              uint64_t v57 = **(NSObject ***)buf;
              if ((void)__p) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p);
              }
              if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
              {
                long long v58 = pthread_self();
                mach_port_t v59 = pthread_mach_thread_np(v58);
                *(_DWORD *)std::string buf = 67109890;
                *(_DWORD *)&uint8_t buf[4] = v59;
                LOWORD(__p) = 2080;
                *(void *)((char *)&__p + 2) = "Device_Connection.cpp";
                WORD5(__p) = 1024;
                HIDWORD(__p) = 92;
                LOWORD(v77) = 2080;
                *(void *)((char *)&v77 + 2) = "not (device_state->get_engine())";
                _os_log_error_impl(&dword_1BAA78000, v57, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
              }
              AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v74);
              __cxa_allocate_exception(0x40uLL);
              caulk::make_string((caulk *)"", (uint64_t)&v72);
              std::logic_error::logic_error(&v73, &v72);
              v73.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
              std::logic_error::logic_error((std::logic_error *)&v84, &v73);
              *((void *)&v85 + 1) = 0;
              uint64_t v86 = 0;
              uint64_t v87 = 0;
              int v88 = -1;
              *(void *)&unsigned long long v84 = &unk_1F1489CC8;
              *(void *)&long long v85 = &unk_1F1489CF0;
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v84);
              *((void *)&v77 + 1) = "void AMCP::IO_Core::Device_Connection::cleanup_processing()";
              unint64_t v78 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
              int v79 = 92;
              applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v67);
              unint64_t v69 = &unk_1F148AA90;
              long long v70 = v67;
              uint64_t v71 = v68;
              long long v67 = 0uLL;
              uint64_t v68 = 0;
              boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
            }
            uint64_t v44 = 0;
          }
          *(void *)std::string buf = &unk_1F1481DC0;
          *(void *)&signed long long __p = v43;
          *((void *)&__p + 1) = v44;
          *(void *)&long long v77 = buf;
          AMCP::IO_Core::Device_Node_State::for_each_stream_connection(v41, (uint64_t)buf);
          std::__function::__value_func<void ()(AMCP::IO_Core::Stream_Connection &)>::~__value_func[abi:ne180100](buf);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
    }
    std::string v45 = *v35;
    std::string v46 = (std::__shared_weak_count *)(*v35)[1];
    if (v46)
    {
      std::string v47 = std::__shared_weak_count::lock(v46);
      if (v47)
      {
        if (*v45)
        {
          std::string::size_type v48 = (unsigned int *)(*v45 + 128);
          int v49 = atomic_load(v48);
          if (v49 <= 0)
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v47);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            long long v60 = **(NSObject ***)buf;
            if ((void)__p) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p);
            }
            if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
            {
              int v61 = pthread_self();
              mach_port_t v62 = pthread_mach_thread_np(v61);
              *(_DWORD *)std::string buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v62;
              LOWORD(__p) = 2080;
              *(void *)((char *)&__p + 2) = "Device.h";
              WORD5(__p) = 1024;
              HIDWORD(__p) = 81;
              LOWORD(v77) = 2080;
              *(void *)((char *)&v77 + 2) = "not (m_refcount > 0)";
              _os_log_error_impl(&dword_1BAA78000, v60, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v74);
            __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"", (uint64_t)&v72);
            std::logic_error::logic_error(&v73, &v72);
            v73.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
            std::logic_error::logic_error((std::logic_error *)&v84, &v73);
            *((void *)&v85 + 1) = 0;
            uint64_t v86 = 0;
            uint64_t v87 = 0;
            int v88 = -1;
            *(void *)&unsigned long long v84 = &unk_1F1489CC8;
            *(void *)&long long v85 = &unk_1F1489CF0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v84);
            *((void *)&v77 + 1) = "void AMCP::IO_Core::Device_Node_State::remove_reference()";
            unint64_t v78 = "Source/AMCP/IO/IO_Core/Device.h";
            int v79 = 81;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v67);
            unint64_t v69 = &unk_1F148AA90;
            long long v70 = v67;
            uint64_t v71 = v68;
            long long v67 = 0uLL;
            uint64_t v68 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
          }
          atomic_fetch_add((atomic_uint *volatile)v48, 0xFFFFFFFF);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
      }
    }
  }
  AMCP::Graph::Manifest_Inventory::release_power_assertions(v65);
  *(_DWORD *)uint64_t v4 = 1;
  uint64_t v50 = *((void *)v4 + 12);
  if (v50)
  {
    AMCP::Graph::Manifest::get_iocontext_uid((AMCP::Graph::Manifest *)buf, v4);
    if (__p >= 0) {
      std::string::size_type v56 = buf;
    }
    else {
      LOBYTE(v56) = buf[0];
    }
    AMCP::Graph::Manifest_Log::add_message(v50, 1, "Manifest: %s Hardware End: %p", v51, v52, v53, v54, v55, (char)v56);
  }
}

void sub_1BAD9F540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,int a41,__int16 a42,char a43,char a44)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest::teardown_processing(AMCP::Graph::Manifest *this)
{
  if (*(_DWORD *)this == 1)
  {
    uint64_t v2 = *((void *)this + 9);
    unint64_t v3 = *(AMCP::Graph::Timebase_Set **)(v2 + 80);
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 88);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::Graph::Timebase_Set::stop(v3);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    uint64_t v5 = *((void *)this + 12);
    if (v5)
    {
      AMCP::Graph::Manifest::get_iocontext_uid((AMCP::Graph::Manifest *)__p, this);
      if (v13 >= 0) {
        uint64_t v11 = (void **)__p;
      }
      else {
        LOBYTE(v11) = __p[0];
      }
      AMCP::Graph::Manifest_Log::add_message(v5, 1, "Manifest: %s Hardware Stop: %p", v6, v7, v8, v9, v10, (char)v11);
    }
    *(_DWORD *)this = 0;
  }
}

void sub_1BAD9F758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Manifest::dump_manifest_log(std::__shared_weak_count **this)
{
  if (this)
  {
    AMCP::Graph::Manifest_Log::get_queue((AMCP::Graph::Manifest_Log *)this);
    std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v3, (uint64_t)*this, this[1]);
    unsigned __int8 v2 = atomic_load((unsigned __int8 *)&unk_1E9F78DB8);
    if (v2) {
      atomic_store(1u, byte_1E9F78DB9);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZN10applesauce8dispatch2v19sync_implIRZN4AMCP5Graph12Manifest_Log4dumpEvE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke;
    block[3] = &__block_descriptor_tmp_4776;
    void block[4] = &v3;
    dispatch_sync((dispatch_queue_t)AMCP::Graph::Manifest_Log::get_queue(void)::s_instance, block);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

uint64_t AMCP::IO_Core::DSP::get_class_id(AMCP::IO_Core::DSP *this)
{
  return 1685287022;
}

void AMCP::IO_Core::DSP::~DSP(AMCP::IO_Core::DSP *this)
{
  AMCP::IO_Core::Node::~Node(this);

  JUMPOUT(0x1C1859840);
}

void HALS_MetaSubDevice::HandleGroupObjectPropertiesChanged(unsigned int *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, AudioObjectPropertyAddress *a8, char a9, uint64_t a10, NSObject **a11)
{
  uint64_t v20 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)a1[12]);
  if (v20)
  {
    unsigned int v32 = a3;
    uint64_t v21 = *a11;
    dispatch_object_t object = v21;
    if (v21) {
      dispatch_retain(v21);
    }
    (*(void (**)(HALS_ObjectMap *, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, char, uint64_t, dispatch_object_t *))(*(void *)v20 + 168))(v20, a2, a3, a4, a5, a6, a7, a8, a9, a10, &object);
    if (object) {
      dispatch_release(object);
    }
    if (HALS_MetaSubDevice::_GetObject((HALS_MetaSubDevice *)a1) && a4)
    {
      unint64_t v22 = 0;
      uint64_t v23 = a8;
      do
      {
        int v24 = *(_DWORD *)(a5 + 4 * v22);
        if (v24 == *(_DWORD *)(HALS_MetaSubDevice::_GetObject((HALS_MetaSubDevice *)a1) + 16))
        {
          unsigned int v25 = v22;
        }
        else
        {
          v23 += *(unsigned int *)(a6 + 4 * v22);
          unsigned int v25 = -1;
        }
        if (v25 != -1) {
          break;
        }
        ++v22;
      }
      while (v22 < a4);
      memset(v33, 0, sizeof(v33));
      if (v25 != -1)
      {
        unint64_t v26 = *(unsigned int *)(a6 + 4 * v25);
        if (v26)
        {
          unint64_t v27 = 0;
          uint64_t v28 = v25;
          do
          {
            AudioObjectPropertySelector mSelector = v23->mSelector;
            ++v23;
            if (HALS_MetaDevice::PassRealNotificationToClient((HALS_MetaDevice *)mSelector, (const AudioObjectPropertyAddress *)1))
            {
              CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v33, a8, v30);
              unint64_t v26 = *(unsigned int *)(a6 + 4 * v28);
            }
            ++v27;
            ++a8;
          }
          while (v27 < v26);
          unsigned int v31 = *(void **)&v33[0];
          if (*(void *)&v33[0] != *((void *)&v33[0] + 1)) {
            HALS_Object::PropertiesChanged((HALS_Object *)a1, (HALS_NotificationManager *)a1[4], v32, -1431655765 * ((*((void *)&v33[0] + 1) - *(void *)&v33[0]) >> 2), *(const AudioObjectPropertyAddress **)&v33[0]);
          }
          if (v31) {
            operator delete(v31);
          }
        }
      }
    }
  }
  HALS_ObjectMap::ReleaseObject(v20, v19);
}

void sub_1BAD9FA80(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, dispatch_object_t object)
{
  if (v19) {
    operator delete(v19);
  }
  HALS_ObjectMap::ReleaseObject(v18, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_MetaSubDevice::_GetObject(HALS_MetaSubDevice *this)
{
  if ((*((_DWORD *)this + 14) ^ (*((int *)this + 14) >> 31)) >= 2) {
    boost::detail::variant::forced_return<BOOL>();
  }
  return *((void *)this + 8);
}

void HALS_MetaSubDevice::HandleObjectPropertiesChanged(HALS_MetaSubDevice *this, const HALS_Object *a2, uint64_t a3, uint64_t a4, AudioObjectPropertyAddress *a5)
{
  uint64_t v10 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  uint64_t v12 = (HALS_ObjectMap *)v10;
  if (v10)
  {
    (*(void (**)(uint64_t, const HALS_Object *, uint64_t, uint64_t, AudioObjectPropertyAddress *))(*(void *)v10 + 160))(v10, a2, a3, a4, a5);
    if ((const HALS_Object *)HALS_MetaSubDevice::_GetObject(this) == a2)
    {
      memset(v15, 0, sizeof(v15));
      if (a4)
      {
        a4 = a4;
        do
        {
          if (HALS_MetaDevice::PassRealNotificationToClient((HALS_MetaDevice *)a5->mSelector, (const AudioObjectPropertyAddress *)1))CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v15, a5, v13); {
          ++a5;
          }
          --a4;
        }
        while (a4);
        long long v14 = *(void **)&v15[0];
        if (*(void *)&v15[0] != *((void *)&v15[0] + 1)) {
          HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), a3, -1431655765 * ((*((void *)&v15[0] + 1) - *(void *)&v15[0]) >> 2), *(const AudioObjectPropertyAddress **)&v15[0]);
        }
        if (v14) {
          operator delete(v14);
        }
      }
    }
  }
  HALS_ObjectMap::ReleaseObject(v12, v11);
}

void sub_1BAD9FC94(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (v10) {
    operator delete(v10);
  }
  HALS_ObjectMap::ReleaseObject(v9, a2);
  _Unwind_Resume(a1);
}

void HALS_MetaSubDevice::SetPropertyData(HALS_MetaSubDevice *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_MetaSubDevice *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    int v37 = 2003332927;
    goto LABEL_39;
  }
  BOOL v16 = boost::variant<HALS_Device *,HALS_ClockDevice *>::apply_visitor<boost::detail::variant::get_visitor<HALS_Device *>>((int *)this + 14);
  if (!v16)
  {
    *(void *)&buf.AudioObjectPropertySelector mSelector = &unk_1F1480698;
    boost::throw_exception<boost::bad_get>();
  }
  if (*(void *)v16 && HALB_Info::PropertyRequiresHogMode((HALB_Info *)a3->mSelector, v17))
  {
    char v18 = (HALS_Device **)boost::variant<HALS_Device *,HALS_ClockDevice *>::apply_visitor<boost::detail::variant::get_visitor<HALS_Device *>>((int *)this + 14);
    if (!v18)
    {
      *(void *)&buf.AudioObjectPropertySelector mSelector = &unk_1F1480698;
      boost::throw_exception<boost::bad_get>();
    }
    if (!HALS_Device::IsHogModeOwnerOrFree(*v18, a8))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      int v37 = 560492391;
LABEL_39:
      exception[2] = v37;
    }
  }
  size_t v19 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1685218931)
  {
    if (mSelector != 1685218913)
    {
      if (mSelector == 1685218929)
      {
        if (a4 > 3)
        {
          v42[0] = MEMORY[0x1E4F143A8];
          v42[1] = 0x40000000;
          uint64_t v42[2] = ___ZN18HALS_MetaSubDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_15;
          v42[3] = &__block_descriptor_tmp_16_9832;
          uint64_t v42[4] = this;
          v42[5] = a5;
          uint64_t v21 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v21, (uint64_t)v42);
          unint64_t v22 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
          if (a8) {
            uint64_t v23 = *((unsigned int *)a8 + 4);
          }
          else {
            uint64_t v23 = 0;
          }
          strcpy((char *)&buf, "qfrdbolg");
          BYTE1(buf.mElement) = 0;
          HIWORD(buf.mElement) = 0;
          HALS_Object::PropertiesChanged(this, v22, v23, 1u, &buf);
          goto LABEL_34;
        }
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_49;
        }
        buf.AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALS_MetaSubDevice.cpp";
        __int16 v47 = 1024;
        int v48 = 287;
        uint64_t v38 = MEMORY[0x1E4F14500];
        uint64_t v39 = "%25s:%-5d  HALS_MetaSubDevice::_SetPropertyData: bad property data size for kAudioSubDevicePropertyDriftCo"
              "mpensationQuality";
        goto LABEL_48;
      }
LABEL_18:
      if (HALS_MetaSubDevice::_GetObject(this))
      {
        uint64_t Object = HALS_MetaSubDevice::_GetObject(this);
        (*(void (**)(uint64_t, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *, HALS_Client *))(*(void *)Object + 120))(Object, a2, a3, a4, a5, a6, a7, a8);
        goto LABEL_34;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        buf.AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALS_MetaSubDevice.cpp";
        __int16 v47 = 1024;
        int v48 = 298;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaSubDevice::SetPropertyData: no real device", (uint8_t *)&buf, 0x12u);
      }
      int v40 = 1852797029;
LABEL_50:
      uint64_t v41 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v41 = off_1F148A5D8;
      v41[2] = v40;
    }
    if (a4 > 3)
    {
      v43[0] = MEMORY[0x1E4F143A8];
      v43[1] = 0x40000000;
      v43[2] = ___ZN18HALS_MetaSubDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_13;
      void v43[3] = &__block_descriptor_tmp_14_9830;
      unsigned int v43[4] = this;
      v43[5] = a5;
      uint64_t v29 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v29, (uint64_t)v43);
      uint8x8_t v30 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
      if (a8) {
        uint64_t v31 = *((unsigned int *)a8 + 4);
      }
      else {
        uint64_t v31 = 0;
      }
      strcpy((char *)&buf, "afrdbolg");
      BYTE1(buf.mElement) = 0;
      HIWORD(buf.mElement) = 0;
      HALS_Object::PropertiesChanged(this, v30, v31, 1u, &buf);
      goto LABEL_34;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      buf.AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALS_MetaSubDevice.cpp";
      __int16 v47 = 1024;
      int v48 = 274;
      uint64_t v38 = MEMORY[0x1E4F14500];
      uint64_t v39 = "%25s:%-5d  HALS_MetaSubDevice::_SetPropertyData: bad property data size for kAudioSubDevicePropertyDriftComp"
            "ensationAlgorithm";
      goto LABEL_48;
    }
    goto LABEL_49;
  }
  if (mSelector == 1685218932)
  {
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        buf.AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALS_MetaSubDevice.cpp";
        __int16 v47 = 1024;
        int v48 = 261;
        uint64_t v38 = MEMORY[0x1E4F14500];
        uint64_t v39 = "%25s:%-5d  HALS_MetaSubDevice::_SetPropertyData: bad property data size for kAudioSubDevicePropertyDriftCompensation";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    v44[0] = MEMORY[0x1E4F143A8];
    v44[1] = 0x40000000;
    v44[2] = ___ZN18HALS_MetaSubDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_11;
    v44[3] = &__block_descriptor_tmp_12_9828;
    v44[4] = this;
    v44[5] = a5;
    unsigned int v32 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v32, (uint64_t)v44);
    unint64_t v33 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    if (a8) {
      uint64_t v34 = *((unsigned int *)a8 + 4);
    }
    else {
      uint64_t v34 = 0;
    }
    strcpy((char *)&buf, "tfrdbolg");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    HALS_Object::PropertiesChanged(this, v33, v34, 1u, &buf);
  }
  else
  {
    if (mSelector != 2020373603) {
      goto LABEL_18;
    }
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        buf.AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALS_MetaSubDevice.cpp";
        __int16 v47 = 1024;
        int v48 = 248;
        uint64_t v38 = MEMORY[0x1E4F14500];
        uint64_t v39 = "%25s:%-5d  HALS_MetaSubDevice::_SetPropertyData: bad property data size for kAudioSubDevicePropertyExtraLatency";
LABEL_48:
        _os_log_impl(&dword_1BAA78000, v38, OS_LOG_TYPE_ERROR, v39, (uint8_t *)&buf, 0x12u);
      }
LABEL_49:
      int v40 = 561211770;
      goto LABEL_50;
    }
    v45[0] = MEMORY[0x1E4F143A8];
    v45[1] = 0x40000000;
    v45[2] = ___ZN18HALS_MetaSubDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
    v45[3] = &__block_descriptor_tmp_10_9826;
    v45[4] = this;
    v45[5] = a3;
    v45[6] = a5;
    int v24 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v24, (uint64_t)v45);
    unsigned int v25 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    if (a8) {
      uint64_t v26 = *((unsigned int *)a8 + 4);
    }
    else {
      uint64_t v26 = 0;
    }
    AudioObjectPropertyScope mScope = a3->mScope;
    buf.AudioObjectPropertySelector mSelector = 2020373603;
    *(void *)&buf.AudioObjectPropertyScope mScope = mScope;
    HALS_Object::PropertiesChanged(this, v25, v26, 1u, &buf);
  }
LABEL_34:
  HALS_ObjectMap::ReleaseObject(v19, v28);
}

void sub_1BADA046C(_Unwind_Exception *a1)
{
  std::exception::~exception((std::exception *)(v1 - 128));
  _Unwind_Resume(a1);
}

_DWORD *boost::variant<HALS_Device *,HALS_ClockDevice *>::apply_visitor<boost::detail::variant::get_visitor<HALS_Device *>>(int *a1)
{
  int v2 = *a1;
  BOOL result = a1 + 2;
  switch(v2 ^ (v2 >> 31))
  {
    case 0:
      return result;
    case 1:
      BOOL result = 0;
      break;
    default:
      boost::detail::variant::forced_return<BOOL>();
  }
  return result;
}

uint64_t ___ZN18HALS_MetaSubDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 4 * (**(_DWORD **)(result + 40) == 1768845428) + 88) = **(double **)(result + 48);
  return result;
}

uint64_t ___ZN18HALS_MetaSubDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_11(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 97) = **(_DWORD **)(result + 40) != 0;
  return result;
}

uint64_t ___ZN18HALS_MetaSubDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_13(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 100) = **(_DWORD **)(result + 40);
  return result;
}

uint64_t ___ZN18HALS_MetaSubDevice15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_15(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 104) = **(_DWORD **)(result + 40);
  return result;
}

void HALS_MetaSubDevice::GetPropertyData(HALS_MetaSubDevice *this, uint64_t a2, const AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, void *a6, unsigned int a7, const void *a8, HALS_Client *a9)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_MetaSubDevice *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a9) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    int v22 = 2003332927;
    goto LABEL_35;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1685218931)
  {
    if (mSelector == 1685218932)
    {
      if (a4 > 3)
      {
        v27[0] = MEMORY[0x1E4F143A8];
        v27[1] = 0x40000000;
        v27[2] = ___ZNK18HALS_MetaSubDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_4;
        v27[3] = &__block_descriptor_tmp_5_9838;
        v27[4] = this;
        void v27[5] = a6;
        uint64_t v15 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(void *)this + 56))(this);
        BOOL v16 = v27;
        goto LABEL_19;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_34;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint8x8_t v30 = "HALS_MetaSubDevice.cpp";
      __int16 v31 = 1024;
      int v32 = 203;
      uint64_t v23 = MEMORY[0x1E4F14500];
      int v24 = "%25s:%-5d  HALS_MetaSubDevice::_GetPropertyData: bad property data size for kAudioSubDevicePropertyDriftCompensation";
      goto LABEL_33;
    }
    if (mSelector != 2020373603) {
      goto LABEL_11;
    }
    if (a4 > 7)
    {
      v28[0] = MEMORY[0x1E4F143A8];
      v28[1] = 0x40000000;
      void v28[2] = ___ZNK18HALS_MetaSubDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
      v28[3] = &__block_descriptor_tmp_3_9836;
      v28[4] = this;
      v28[5] = a6;
      void v28[6] = a3;
      int v17 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v17, (uint64_t)v28);
      unsigned int v18 = 8;
LABEL_20:
      *a5 = v18;
      return;
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_34;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    uint8x8_t v30 = "HALS_MetaSubDevice.cpp";
    __int16 v31 = 1024;
    int v32 = 194;
    uint64_t v23 = MEMORY[0x1E4F14500];
    int v24 = "%25s:%-5d  HALS_MetaSubDevice::_GetPropertyData: bad property data size for kAudioSubDevicePropertyExtraLatency";
LABEL_33:
    _os_log_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_ERROR, v24, buf, 0x12u);
LABEL_34:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    int v22 = 561211770;
    goto LABEL_35;
  }
  if (mSelector == 1685218913)
  {
    if (a4 > 3)
    {
      v26[0] = MEMORY[0x1E4F143A8];
      v26[1] = 0x40000000;
      v26[2] = ___ZNK18HALS_MetaSubDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_6;
      v26[3] = &__block_descriptor_tmp_7_9840;
      v26[4] = this;
      v26[5] = a6;
      uint64_t v15 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(void *)this + 56))(this);
      BOOL v16 = v26;
      goto LABEL_19;
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_34;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    uint8x8_t v30 = "HALS_MetaSubDevice.cpp";
    __int16 v31 = 1024;
    int v32 = 212;
    uint64_t v23 = MEMORY[0x1E4F14500];
    int v24 = "%25s:%-5d  HALS_MetaSubDevice::_GetPropertyData: bad property data size for kAudioSubDevicePropertyDriftCompensationAlgorithm";
    goto LABEL_33;
  }
  if (mSelector == 1685218929)
  {
    if (a4 > 3)
    {
      v25[0] = MEMORY[0x1E4F143A8];
      v25[1] = 0x40000000;
      v25[2] = ___ZNK18HALS_MetaSubDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_8;
      v25[3] = &__block_descriptor_tmp_9_9842;
      v25[4] = this;
      v25[5] = a6;
      uint64_t v15 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(void *)this + 56))(this);
      BOOL v16 = v25;
LABEL_19:
      HALB_CommandGate::ExecuteCommand(v15, (uint64_t)v16);
      unsigned int v18 = 4;
      goto LABEL_20;
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_34;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    uint8x8_t v30 = "HALS_MetaSubDevice.cpp";
    __int16 v31 = 1024;
    int v32 = 221;
    uint64_t v23 = MEMORY[0x1E4F14500];
    int v24 = "%25s:%-5d  HALS_MetaSubDevice::_GetPropertyData: bad property data size for kAudioSubDevicePropertyDriftCompensationQuality";
    goto LABEL_33;
  }
LABEL_11:
  if (!HALS_MetaSubDevice::_GetObject(this))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint8x8_t v30 = "HALS_MetaSubDevice.cpp";
      __int16 v31 = 1024;
      int v32 = 228;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaSubDevice::GetPropertyData: no real device", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    int v22 = 1852797029;
LABEL_35:
    exception[2] = v22;
  }
  uint64_t Object = HALS_MetaSubDevice::_GetObject(this);
  uint64_t v20 = *(void (**)(uint64_t))(*(void *)Object + 112);

  v20(Object);
}

double ___ZNK18HALS_MetaSubDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1, double a2)
{
  LODWORD(a2) = *(_DWORD *)(*(void *)(a1 + 32) + 4 * (**(_DWORD **)(a1 + 48) == 1768845428) + 88);
  double result = (double)*(unint64_t *)&a2;
  **(double **)(a1 + 40) = result;
  return result;
}

uint64_t ___ZNK18HALS_MetaSubDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_4(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(unsigned __int8 *)(*(void *)(result + 32) + 97);
  return result;
}

uint64_t ___ZNK18HALS_MetaSubDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_6(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(_DWORD *)(*(void *)(result + 32) + 100);
  return result;
}

uint64_t ___ZNK18HALS_MetaSubDevice15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_8(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(_DWORD *)(*(void *)(result + 32) + 104);
  return result;
}

uint64_t HALS_MetaSubDevice::GetPropertyDataSize(HALS_MetaSubDevice *a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_MetaSubDevice *, uint64_t, int *, uint64_t))(*(void *)a1 + 88))(a1, a2, a3, a6) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    int v13 = 2003332927;
    goto LABEL_16;
  }
  int v8 = *a3;
  if (*a3 > 1685218931)
  {
    if (v8 == 2020373603) {
      return 8;
    }
    unsigned __int16 v9 = 26228;
  }
  else
  {
    if (v8 == 1685218913) {
      return 4;
    }
    unsigned __int16 v9 = 26225;
  }
  if (v8 == (v9 | 0x64720000)) {
    return 4;
  }
  if (!HALS_MetaSubDevice::_GetObject(a1))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      uint64_t v15 = "HALS_MetaSubDevice.cpp";
      __int16 v16 = 1024;
      int v17 = 177;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaSubDevice::GetPropertyDataSize: no real device", (uint8_t *)&v14, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    int v13 = 1852797029;
LABEL_16:
    exception[2] = v13;
  }
  uint64_t v11 = *(uint64_t (**)(void))(*(void *)HALS_MetaSubDevice::_GetObject(a1) + 104);

  return v11();
}

uint64_t HALS_MetaSubDevice::IsPropertySettable(HALS_MetaSubDevice *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_MetaSubDevice *))(*(void *)a1 + 88))(a1) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    int v10 = 2003332927;
    goto LABEL_16;
  }
  if ((*a3 - 1685218913) <= 0x13 && ((1 << (*a3 - 97)) & 0x90001) != 0 || *a3 == 2020373603) {
    return 1;
  }
  if (!HALS_MetaSubDevice::_GetObject(a1))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      uint64_t v12 = "HALS_MetaSubDevice.cpp";
      __int16 v13 = 1024;
      int v14 = 146;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaSubDevice::IsPropertySettable: no real device", (uint8_t *)&v11, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    int v10 = 1852797029;
LABEL_16:
    exception[2] = v10;
  }
  int v8 = *(uint64_t (**)(void))(*(void *)HALS_MetaSubDevice::_GetObject(a1) + 96);

  return v8();
}

uint64_t HALS_MetaSubDevice::HasProperty(HALS_MetaSubDevice *a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(HALS_MetaSubDevice *, int *, uint64_t))(*(void *)a1 + 176))(a1, a3, a4);
  if (!result) {
    return result;
  }
  uint64_t result = 0;
  int v7 = *a3;
  if (*a3 <= 1852012898)
  {
    if (v7 > 1685218912)
    {
      if (v7 <= 1685218931)
      {
        if (v7 != 1685218913 && v7 != 1685218929) {
          goto LABEL_38;
        }
        return 1;
      }
      if (v7 == 1685218932) {
        return 1;
      }
      int v8 = 1718843939;
LABEL_27:
      if (v7 == v8) {
        return result;
      }
      goto LABEL_38;
    }
    BOOL v9 = v7 == 1651730810 || v7 == 1651735075;
    int v10 = 1684434036;
LABEL_20:
    if (v9 || v7 == v10) {
      return result;
    }
    goto LABEL_38;
  }
  if (v7 <= 1919512166)
  {
    BOOL v9 = v7 == 1852012899 || v7 == 1869180523;
    int v10 = 1919055206;
    goto LABEL_20;
  }
  if (v7 <= 1986425721)
  {
    if (v7 == 1919512167) {
      return result;
    }
    int v8 = 1936092276;
    goto LABEL_27;
  }
  if (v7 == 1986425722) {
    return result;
  }
  if (v7 == 2020373603)
  {
    int v12 = a3[1];
    return v12 == 1768845428 || v12 == 1869968496;
  }
LABEL_38:
  uint64_t result = HALS_MetaSubDevice::_GetObject(a1);
  if (result)
  {
    int v14 = *(uint64_t (**)(void))(*(void *)HALS_MetaSubDevice::_GetObject(a1) + 88);
    return v14();
  }
  return result;
}

unsigned int *HALS_MetaSubDevice::_Deactivate(HALS_MetaSubDevice *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t result = (unsigned int *)HALS_MetaSubDevice::_GetObject(this);
  if (result)
  {
    int v3 = *(_DWORD *)(HALS_MetaSubDevice::_GetObject(this) + 16);
    int v4 = *((_DWORD *)this + 4);
    uint64_t v5 = *((void *)this + 14);
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 0x40000000;
    v8[2] = ___ZN18HALS_MetaSubDevice11_DeactivateEv_block_invoke;
    void v8[3] = &__block_descriptor_tmp_9846;
    int v9 = v4;
    int v10 = v3;
    LOBYTE(v3) = atomic_load((unsigned __int8 *)(v5 + 32));
    if (v3) {
      atomic_store(1u, (unsigned __int8 *)(v5 + 33));
    }
    dispatch_async(*(dispatch_queue_t *)v5, v8);
    uint64_t Object = (HALS_ObjectMap *)HALS_MetaSubDevice::_GetObject(this);
    HALS_ObjectMap::ReleaseObject_LongTerm(Object, v7);
    uint64_t result = (unsigned int *)((char *)this + 56);
    switch(*((_DWORD *)this + 14) ^ (*((int *)this + 14) >> 31))
    {
      case 0:
        *((void *)this + 8) = 0;
        break;
      case 1:
        uint64_t v12 = 0;
        int v11 = 0;
        boost::variant<HALS_Device *,HALS_ClockDevice *>::variant_assign(result, (uint64_t)&v11);
        uint64_t result = (unsigned int *)boost::variant<HALS_Device *,HALS_ClockDevice *>::destroy_content(0);
        break;
      case 2:
        boost::detail::variant::forced_return<BOOL>();
      case 3:
        boost::detail::variant::forced_return<BOOL>();
      case 4:
        boost::detail::variant::forced_return<BOOL>();
      case 5:
        boost::detail::variant::forced_return<BOOL>();
      case 6:
        boost::detail::variant::forced_return<BOOL>();
      case 7:
        boost::detail::variant::forced_return<BOOL>();
      case 8:
        boost::detail::variant::forced_return<BOOL>();
      case 9:
        boost::detail::variant::forced_return<BOOL>();
      case 0xA:
        boost::detail::variant::forced_return<BOOL>();
      case 0xB:
        boost::detail::variant::forced_return<BOOL>();
      case 0xC:
        boost::detail::variant::forced_return<BOOL>();
      case 0xD:
        boost::detail::variant::forced_return<BOOL>();
      case 0xE:
        boost::detail::variant::forced_return<BOOL>();
      case 0xF:
        boost::detail::variant::forced_return<BOOL>();
      case 0x10:
        boost::detail::variant::forced_return<BOOL>();
      case 0x11:
        boost::detail::variant::forced_return<BOOL>();
      case 0x12:
        boost::detail::variant::forced_return<BOOL>();
      case 0x13:
        boost::detail::variant::forced_return<BOOL>();
      default:
        boost::detail::variant::forced_return<BOOL>();
    }
  }
  *((_DWORD *)this + 2) = 0;
  return result;
}

void sub_1BADA14E0(_Unwind_Exception *a1)
{
}

void ___ZN18HALS_MetaSubDevice11_DeactivateEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const AudioObjectPropertyAddress *a5)
{
  int v6 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = (const HALS_Listener *)*(unsigned int *)(a1 + 36);
  v7[0] = 0;
  v7[1] = v6;
  long long v8 = 0u;
  long long v9 = 0u;
  HALS_NotificationManager::RemovePropertyListener((HALS_NotificationManager *)v7, v5, &qword_1BB036F74, a4, a5);
  HALS_Listener::~HALS_Listener((HALS_Listener *)v7);
}

void sub_1BADA1598(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HALS_Listener::~HALS_Listener((HALS_Listener *)va);
  _Unwind_Resume(a1);
}

uint64_t boost::variant<HALS_Device *,HALS_ClockDevice *>::variant_assign(unsigned int *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result == *(_DWORD *)a2)
  {
    switch(result ^ ((int)result >> 31))
    {
      case 0u:
      case 1u:
        *((void *)a1 + 1) = *(void *)(a2 + 8);
        return result;
      default:
        goto LABEL_8;
    }
  }
  switch(*(_DWORD *)a2 ^ (*(int *)a2 >> 31))
  {
    case 0:
      uint64_t result = boost::variant<HALS_Device *,HALS_ClockDevice *>::destroy_content(result);
      *((void *)a1 + 1) = *(void *)(a2 + 8);
      *a1 = 0;
      break;
    case 1:
      uint64_t result = boost::variant<HALS_Device *,HALS_ClockDevice *>::destroy_content(result);
      *((void *)a1 + 1) = *(void *)(a2 + 8);
      *a1 = 1;
      break;
    default:
LABEL_8:
      boost::detail::variant::forced_return<BOOL>();
  }
  return result;
}

uint64_t boost::variant<HALS_Device *,HALS_ClockDevice *>::destroy_content(uint64_t result)
{
  if ((result + 2) >= 4) {
    boost::detail::variant::forced_return<BOOL>();
  }
  return result;
}

void HALS_MetaSubDevice::~HALS_MetaSubDevice(AMCP::Utility::Dispatch_Queue **this)
{
  HALS_MetaSubDevice::~HALS_MetaSubDevice(this);

  JUMPOUT(0x1C1859840);
}

{
  unsigned __int8 v2;
  uint64_t vars8;

  *this = (AMCP::Utility::Dispatch_Queue *)&unk_1F14721A8;
  if (g_static_start_options == 1)
  {
    do
    {
      AMCP::Utility::Dispatch_Queue::flush_all_work(this[14]);
      int v2 = atomic_load((unsigned __int8 *)this[14] + 33);
    }
    while ((v2 & 1) != 0);
  }
  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100](this + 14, 0);
  CACFString::~CACFString((CACFString *)(this + 9));
  boost::variant<HALS_Device *,HALS_ClockDevice *>::destroy_content(*((unsigned int *)this + 14));

  HALS_Object::~HALS_Object((HALS_Object *)this);
}

void HALS_MetaSubDevice::_SetSubDeviceInfo(HALS_MetaSubDevice *this, CFDictionaryRef theDict)
{
  if (theDict) {
    CFRetain(theDict);
  }
  int v6 = &unk_1F14898A0;
  CFDictionaryRef theDicta = theDict;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v4, theDict, @"latency-out");
  *((_DWORD *)this + 22) = OS::CF::Number::GetValue<unsigned int>(v5, 0);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v4);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v4, theDicta, @"latency-in");
  *((_DWORD *)this + 23) = OS::CF::Number::GetValue<unsigned int>(v5, 0);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v4);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v4, theDicta, @"don't pad");
  *((unsigned char *)this + 96) = OS::CF::Number::GetValue<unsigned int>(v5, 0) == 0;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v4);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v4, theDicta, @"drift");
  *((unsigned char *)this + 97) = OS::CF::Number::GetValue<unsigned int>(v5, 0) != 0;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v4);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v4, theDicta, @"drift algorithm");
  *((_DWORD *)this + 25) = OS::CF::Number::GetValue<unsigned int>(v5, 0);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v4);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v4, theDicta, @"drift quality");
  *((_DWORD *)this + 26) = OS::CF::Number::GetValue<unsigned int>(v5, 64);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v4);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v6);
}

void HALS_MetaSubDevice::HALS_MetaSubDevice(HALS_MetaSubDevice *this, HALS_MetaDevice *a2, const __CFString *a3, const __CFDictionary *a4, HALS_Object *a5)
{
  v9[40] = *MEMORY[0x1E4F143B8];
  HALS_Object::HALS_Object(this, 1634956642, 1634956642, (uint64_t)a2, a5);
  *(void *)uint64_t v8 = &unk_1F14721A8;
  *(_DWORD *)(v8 + 48) = *((_DWORD *)a2 + 4);
  *(void *)(v8 + 64) = 0;
  *(_DWORD *)(v8 + 56) = 0;
  if (a3) {
    CFRetain(a3);
  }
  *((void *)this + 9) = a3;
  *((unsigned char *)this + 80) = 1;
  *((void *)this + 11) = 0;
  *((_WORD *)this + 48) = 1;
  *(void *)((char *)this + 100) = 0x4000000000;
  AMCP::Utility::Dispatch_Queue::create_concurrent_with_workloop((AMCP::Utility::Dispatch_Queue *)v9, "HALS_MetaSubDevice Concurrent Queue");
  operator new();
}

void sub_1BADA1AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18HALS_MetaSubDevice16SetSubDeviceInfoEP11HALS_DevicePK14__CFDictionary_block_invoke(void *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = a1[4];
  uint64_t v2 = a1[5];
  CFDictionaryRef v3 = (const __CFDictionary *)a1[6];
  uint64_t v22 = v2;
  if (!HALS_MetaSubDevice::_GetObject((HALS_MetaSubDevice *)v1)
    || HALS_MetaSubDevice::_GetObject((HALS_MetaSubDevice *)v1) == v2)
  {
    int v7 = 0;
  }
  else
  {
    int v4 = *(_DWORD *)(HALS_MetaSubDevice::_GetObject((HALS_MetaSubDevice *)v1) + 16);
    int v5 = *(_DWORD *)(v1 + 16);
    uint64_t v6 = *(void *)(v1 + 112);
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 0x40000000;
    v19[2] = ___ZN18HALS_MetaSubDevice17_SetSubDeviceInfoEP11HALS_DevicePK14__CFDictionary_block_invoke;
    v19[3] = &__block_descriptor_tmp_34_9868;
    int v20 = v5;
    int v21 = v4;
    LOBYTE(v4) = atomic_load((unsigned __int8 *)(v6 + 32));
    if (v4) {
      atomic_store(1u, (unsigned __int8 *)(v6 + 33));
    }
    dispatch_async(*(dispatch_queue_t *)v6, v19);
    int v7 = 1;
  }
  if (!HALS_MetaSubDevice::_GetObject<HALS_Device>(v1) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v23 = 136315394;
    int v24 = "HALS_MetaSubDevice.cpp";
    __int16 v25 = 1024;
    int v26 = 514;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MetaSubDevice::_SetSubDeviceInfo: Attempting to replace a clock device with a physical device", (uint8_t *)&v23, 0x12u);
  }
  if (HALS_MetaSubDevice::_GetObject((HALS_MetaSubDevice *)v1))
  {
    uint64_t Object = (HALS_ObjectMap *)HALS_MetaSubDevice::_GetObject((HALS_MetaSubDevice *)v1);
    HALS_ObjectMap::ReleaseObject_LongTerm(Object, v9);
  }
  boost::variant<HALS_Device *,HALS_ClockDevice *>::assign<HALS_Device *>(v1 + 56, &v22);
  if (v7)
  {
    uint64_t v17 = 0x2A2A2A2A2A2A2A2ALL;
    int v18 = -1;
    int v10 = *(_DWORD *)(v1 + 16);
    v14[0] = 0;
    v14[1] = v10;
    long long v15 = 0u;
    long long v16 = 0u;
    unsigned int v11 = *(_DWORD *)(HALS_MetaSubDevice::_GetObject((HALS_MetaSubDevice *)v1) + 16);
    LOBYTE(v23) = 0;
    char v27 = 0;
    HALS_NotificationManager::AddPropertyListener((uint64_t)v14, v11, (char *)&v17, (uint64_t)&v23);
    if (v27) {
      AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&v23);
    }
    HALS_Listener::~HALS_Listener((HALS_Listener *)v14);
  }
  uint64_t v12 = (HALS_ObjectMap *)HALS_MetaSubDevice::_GetObject((HALS_MetaSubDevice *)v1);
  HALS_ObjectMap::RetainObject(v12, v13);
  HALS_MetaSubDevice::_SetSubDeviceInfo((HALS_MetaSubDevice *)v1, v3);
}

void ___ZN18HALS_MetaSubDevice17_SetSubDeviceInfoEP11HALS_DevicePK14__CFDictionary_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const AudioObjectPropertyAddress *a5)
{
  int v6 = *(_DWORD *)(a1 + 32);
  int v5 = (const HALS_Listener *)*(unsigned int *)(a1 + 36);
  v7[0] = 0;
  v7[1] = v6;
  long long v8 = 0u;
  long long v9 = 0u;
  HALS_NotificationManager::RemovePropertyListener((HALS_NotificationManager *)v7, v5, &qword_1BB036F74, a4, a5);
  HALS_Listener::~HALS_Listener((HALS_Listener *)v7);
}

void sub_1BADA1DE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HALS_Listener::~HALS_Listener((HALS_Listener *)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_MetaSubDevice::_GetObject<HALS_Device>(uint64_t a1)
{
  uint64_t v1 = boost::variant<HALS_Device *,HALS_ClockDevice *>::apply_visitor<boost::detail::variant::get_visitor<HALS_Device * const>>((int *)(a1 + 56));
  if (!v1) {
    boost::throw_exception<boost::bad_get>();
  }
  return *(void *)v1;
}

void sub_1BADA1E54(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

uint64_t boost::variant<HALS_Device *,HALS_ClockDevice *>::assign<HALS_Device *>(uint64_t result, void *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  switch(*(_DWORD *)result ^ (*(int *)result >> 31))
  {
    case 0:
      *(void *)(result + 8) = *a2;
      break;
    case 1:
      uint64_t v3 = *a2;
      int v2 = 0;
      boost::variant<HALS_Device *,HALS_ClockDevice *>::variant_assign((unsigned int *)result, (uint64_t)&v2);
      uint64_t result = boost::variant<HALS_Device *,HALS_ClockDevice *>::destroy_content(0);
      break;
    default:
      boost::detail::variant::forced_return<BOOL>();
  }
  return result;
}

void sub_1BADA1F24(_Unwind_Exception *a1)
{
}

uint64_t HALS_MetaSubDevice::CopyRealIODevice(HALS_MetaSubDevice *this)
{
  uint64_t v5 = 0;
  int v6 = &v5;
  uint64_t v7 = 0x2000000000;
  uint64_t v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  _OWORD v4[2] = ___ZNK18HALS_MetaSubDevice16CopyRealIODeviceEv_block_invoke;
  v4[3] = &unk_1E6233BA0;
  v4[4] = &v5;
  v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BADA2050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZNK18HALS_MetaSubDevice16CopyRealIODeviceEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALS_MetaSubDevice::_CopyRealDevice<HALS_Device>(v2);
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v3 = (HALS_ObjectMap **)boost::variant<HALS_Device *,HALS_ClockDevice *>::apply_visitor<boost::detail::variant::get_visitor<HALS_ClockDevice * const>>((int *)(v2 + 56));
    if (!v3) {
      boost::throw_exception<boost::bad_get>();
    }
    uint64_t v5 = *v3;
    HALS_ObjectMap::RetainObject(*v3, v4);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v5;
  }
}

void sub_1BADA210C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void sub_1BADA2138(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

_DWORD *boost::variant<HALS_Device *,HALS_ClockDevice *>::apply_visitor<boost::detail::variant::get_visitor<HALS_ClockDevice * const>>(int *a1)
{
  uint64_t v1 = 0;
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      return v1;
    case 1:
      uint64_t v1 = a1 + 2;
      break;
    default:
      boost::detail::variant::forced_return<BOOL>();
  }
  return v1;
}

uint64_t HALS_MetaSubDevice::CopyRealDeviceUID(HALS_MetaSubDevice *this)
{
  uint64_t v5 = 0;
  int v6 = &v5;
  uint64_t v7 = 0x2000000000;
  uint64_t v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  _OWORD v4[2] = ___ZNK18HALS_MetaSubDevice17CopyRealDeviceUIDEv_block_invoke;
  v4[3] = &unk_1E6233BC8;
  v4[4] = &v5;
  v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BADA22CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFTypeRef ___ZNK18HALS_MetaSubDevice17CopyRealDeviceUIDEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  CFTypeRef result = *(CFTypeRef *)(v2 + 72);
  if (result)
  {
    CFTypeRef result = CFRetain(result);
    uint64_t v4 = *(void *)(v2 + 72);
  }
  else
  {
    uint64_t v4 = 0;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v4;
  return result;
}

void sub_1BADA232C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_MetaSubDevice::GetRealDeviceObjectID(HALS_MetaSubDevice *this)
{
  uint64_t v5 = 0;
  int v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  _OWORD v4[2] = ___ZNK18HALS_MetaSubDevice21GetRealDeviceObjectIDEv_block_invoke;
  v4[3] = &unk_1E6233BF0;
  v4[4] = &v5;
  v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BADA2414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK18HALS_MetaSubDevice21GetRealDeviceObjectIDEv_block_invoke(uint64_t a1)
{
  uint64_t result = HALS_MetaSubDevice::_GetObject(*(HALS_MetaSubDevice **)(a1 + 40));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(result + 16);
  return result;
}

void sub_1BADA2464(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_MetaSubDevice::GetExtraLatency(HALS_MetaSubDevice *this, char a2)
{
  uint64_t v7 = 0;
  int v8 = &v7;
  uint64_t v9 = 0x2000000000;
  int v10 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  uint64_t v5[2] = ___ZNK18HALS_MetaSubDevice15GetExtraLatencyEb_block_invoke;
  v5[3] = &unk_1E6233C18;
  v5[4] = &v7;
  void v5[5] = this;
  char v6 = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  uint64_t v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1BADA2550(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK18HALS_MetaSubDevice15GetExtraLatencyEb_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(*(void *)(result + 40)
                                                                              + 4 * *(unsigned __int8 *)(result + 48)
                                                                              + 88);
  return result;
}

uint64_t HALS_MetaSubDevice::IsSynchPaddingOn(HALS_MetaSubDevice *this)
{
  uint64_t v5 = 0;
  char v6 = &v5;
  uint64_t v7 = 0x2000000000;
  char v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  _OWORD v4[2] = ___ZNK18HALS_MetaSubDevice16IsSynchPaddingOnEv_block_invoke;
  v4[3] = &unk_1E6233C40;
  v4[4] = &v5;
  v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BADA264C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK18HALS_MetaSubDevice16IsSynchPaddingOnEv_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(*(void *)(result + 40) + 96);
  return result;
}

uint64_t HALS_MetaSubDevice::IsDriftCorrectionOn(HALS_MetaSubDevice *this)
{
  uint64_t v5 = 0;
  char v6 = &v5;
  uint64_t v7 = 0x2000000000;
  char v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  _OWORD v4[2] = ___ZNK18HALS_MetaSubDevice19IsDriftCorrectionOnEv_block_invoke;
  v4[3] = &unk_1E6233C68;
  v4[4] = &v5;
  v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BADA2740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK18HALS_MetaSubDevice19IsDriftCorrectionOnEv_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(*(void *)(result + 40) + 97);
  return result;
}

uint64_t HALS_MetaSubDevice::GetDriftCorrectionAlgorithm(HALS_MetaSubDevice *this)
{
  uint64_t v5 = 0;
  char v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  _OWORD v4[2] = ___ZNK18HALS_MetaSubDevice27GetDriftCorrectionAlgorithmEv_block_invoke;
  v4[3] = &unk_1E6233C90;
  v4[4] = &v5;
  v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BADA2834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK18HALS_MetaSubDevice27GetDriftCorrectionAlgorithmEv_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(*(void *)(result + 40) + 100);
  return result;
}

uint64_t HALS_MetaSubDevice::GetDriftCorrectionQuality(HALS_MetaSubDevice *this)
{
  uint64_t v5 = 0;
  char v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 64;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  _OWORD v4[2] = ___ZNK18HALS_MetaSubDevice25GetDriftCorrectionQualityEv_block_invoke;
  v4[3] = &unk_1E6233CB8;
  v4[4] = &v5;
  v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BADA292C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK18HALS_MetaSubDevice25GetDriftCorrectionQualityEv_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(*(void *)(result + 40) + 104);
  return result;
}

uint64_t HALS_MetaSubDevice::GetNumberStreams(HALS_MetaSubDevice *this, char a2)
{
  uint64_t v7 = 0;
  int v8 = &v7;
  uint64_t v9 = 0x2000000000;
  int v10 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  uint64_t v5[2] = ___ZNK18HALS_MetaSubDevice16GetNumberStreamsEb_block_invoke;
  v5[3] = &unk_1E6233CE0;
  v5[4] = &v7;
  void v5[5] = this;
  char v6 = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  uint64_t v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1BADA2A24(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK18HALS_MetaSubDevice16GetNumberStreamsEb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(unsigned __int8 *)(a1 + 48);
  uint64_t result = HALS_MetaSubDevice::_GetObject<HALS_Device>(v2);
  if (result)
  {
    uint64_t v5 = (HALS_IODevice *)HALS_MetaSubDevice::_GetObject<HALS_Device>(v2);
    uint64_t result = HALS_IODevice::GetNumberStreams(v5, v3 != 0);
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BADA2A98(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_MetaSubDevice::CopyStreamByIndex(HALS_MetaSubDevice *this, char a2, int a3)
{
  uint64_t v9 = 0;
  int v10 = &v9;
  uint64_t v11 = 0x2000000000;
  uint64_t v12 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  uint64_t v6[2] = ___ZNK18HALS_MetaSubDevice17CopyStreamByIndexEbj_block_invoke;
  v6[3] = &unk_1E6233D08;
  v6[4] = &v9;
  v6[5] = this;
  char v8 = a2;
  int v7 = a3;
  int v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  uint64_t v4 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1BADA2B8C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK18HALS_MetaSubDevice17CopyStreamByIndexEbj_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(unsigned __int8 *)(a1 + 52);
  int v4 = *(_DWORD *)(a1 + 48);
  uint64_t result = HALS_MetaSubDevice::_GetObject<HALS_Device>(v2);
  if (result)
  {
    char v6 = (HALS_IODevice *)HALS_MetaSubDevice::_GetObject<HALS_Device>(v2);
    uint64_t result = HALS_IODevice::CopyStreamByIndex(v6, v3 != 0, v4);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BADA2C08(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_MetaSubDevice::GetTotalNumberChannels(HALS_MetaSubDevice *this, char a2)
{
  uint64_t v7 = 0;
  char v8 = &v7;
  uint64_t v9 = 0x2000000000;
  int v10 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  uint64_t v5[2] = ___ZNK18HALS_MetaSubDevice22GetTotalNumberChannelsEb_block_invoke;
  v5[3] = &unk_1E6233D30;
  v5[4] = &v7;
  void v5[5] = this;
  char v6 = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  uint64_t v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1BADA2CF8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK18HALS_MetaSubDevice22GetTotalNumberChannelsEb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(unsigned __int8 *)(a1 + 48);
  uint64_t result = HALS_MetaSubDevice::_GetObject<HALS_Device>(v2);
  if (result)
  {
    uint64_t v5 = (HALS_Device *)HALS_MetaSubDevice::_GetObject<HALS_Device>(v2);
    uint64_t result = HALS_Device::GetTotalNumberChannels(v5, v3 != 0);
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BADA2D6C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_MetaSubDevice::GetClockDomain(HALS_MetaSubDevice *this)
{
  uint64_t v5 = 0;
  char v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  _OWORD v4[2] = ___ZNK18HALS_MetaSubDevice14GetClockDomainEv_block_invoke;
  v4[3] = &unk_1E6233D58;
  v4[4] = &v5;
  v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MetaSubDevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BADA2E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK18HALS_MetaSubDevice14GetClockDomainEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (HALS_MetaSubDevice::_GetObject<HALS_Device>(v2))
  {
    uint64_t v3 = HALS_MetaSubDevice::_GetObject<HALS_Device>(v2);
LABEL_5:
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 320))(v3);
    goto LABEL_6;
  }
  uint64_t result = HALS_MetaSubDevice::_GetObject<HALS_ClockDevice>(v2);
  if (result)
  {
    uint64_t v3 = HALS_MetaSubDevice::_GetObject<HALS_ClockDevice>(v2);
    goto LABEL_5;
  }
LABEL_6:
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BADA2EF8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_MetaSubDevice::_GetObject<HALS_ClockDevice>(uint64_t a1)
{
  uint64_t v1 = boost::variant<HALS_Device *,HALS_ClockDevice *>::apply_visitor<boost::detail::variant::get_visitor<HALS_ClockDevice * const>>((int *)(a1 + 56));
  if (!v1) {
    boost::throw_exception<boost::bad_get>();
  }
  return *(void *)v1;
}

void sub_1BADA2F74(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void AMCP::Box::~Box(AMCP::Box *this)
{
  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

AMCP::Box *AMCP::Box::Box(AMCP::Box *this, AMCP::System_Context *a2, unsigned int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v4 = (AMCP::Object *)AMCP::Object::Object((uint64_t)this, (uint64_t)a2, a3);
  *(void *)int v4 = &unk_1F1472298;
  uint64_t v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x61626F78);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    uint64_t v7 = *v10;
    if (*(void *)v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      *(_WORD *)uint64_t v11 = 2080;
      *(void *)&void v11[2] = "Box.cpp";
      __int16 v12 = 1024;
      int v13 = 26;
      __int16 v14 = 2080;
      long long v15 = "constructed_correct_class(k_class_id_box)";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return this;
}

void sub_1BADA318C(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1F145F4E8;
  uint64_t v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Box::Box(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(std::__shared_mutex_base **)(**(void **)a2 + 16);
  *(void *)AudioObjectPropertyAddress buf = &unk_1F14722D0;
  *(void *)uint64_t v16 = a3;
  v19[0] = buf;
  AMCP::Core::Broker::fetch_first_core_if (v14, v5, (uint64_t)buf);
  *(void *)a1 = &unk_1F145F4E8;
  uint64_t v6 = v14[0];
  if (v14[0]) {
    int v7 = *(_DWORD *)v14[0];
  }
  else {
    int v7 = 0;
  }
  *(_DWORD *)(a1 + 8) = v7;
  int v8 = (std::__shared_weak_count *)v14[1];
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v8;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 32) = a2;
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  else
  {
    *(void *)(a1 + 32) = a2;
  }
  std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](buf);
  *(void *)a1 = &unk_1F1472298;
  uint64_t v9 = AMCP::Object::constructed_correct_class((AMCP::Object *)a1, (AMCP *)0x61626F78);
  if ((v9 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v16);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      __int16 v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)uint64_t v16 = 2080;
      *(void *)&v16[2] = "Box.cpp";
      __int16 v17 = 1024;
      int v18 = 42;
      LOWORD(v19[0]) = 2080;
      *(void *)((char *)v19 + 2) = "constructed_correct_class(k_class_id_box)";
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", buf, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1BADA33B4(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  int v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMCP::Box::Box(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Box::Box(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Box::Box(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Box::Box(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3BoxC1ERNS_14System_ContextEN10applesauce2CF9StringRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMCP::Box::Box(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Box::Box(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  if (!AMCP::is_base_of((AMCP *)0x61626F78, simple_required)) {
    return 0;
  }
  AMCP::Core::Core::get_simple_required_property<1651861860u>(&cf, *a2);
  BOOL v5 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(**(const __CFString ***)(a1 + 8), (const __CFString **)&cf) == kCFCompareEqualTo;
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

uint64_t AMCP::Core::Core::get_simple_required_property<1651861860u>(void *a1, AMCP::Core::Core *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  strcpy(buf, "diubbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(&cf, a2, (const AMCP::Address *)buf);
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v6 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      char v10 = 4;
      strcpy((char *)__p, "buid");
      *(_DWORD *)AudioObjectPropertyAddress buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      __int16 v14 = 1024;
      int v15 = 391;
      __int16 v16 = 2080;
      __int16 v17 = "optional_value.operator BOOL() == true";
      __int16 v18 = 2080;
      size_t v19 = __p;
      __int16 v20 = 1024;
      int v21 = 1735159650;
      __int16 v22 = 1024;
      int v23 = 0;
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  CFTypeRef v4 = cf;
  if (cf) {
    CFRetain(cf);
  }
  *a1 = v4;
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

void sub_1BADA3638(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::Box::Box(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Box::Box(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14722D0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Box::Box(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Box::Box(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F14722D0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Box::Box(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Box::Box(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
}

void AMCP::Box::get_box_uid(AMCP::Box *this@<X0>, void *a2@<X8>)
{
  CFTypeRef v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    int v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7) {
      AMCP::Core::Core::get_simple_required_property<1651861860u>(a2, v7);
    }
    else {
      *a2 = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
  }
}

unint64_t AMCP::Box::get_transport_type(AMCP::Box *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  CFTypeRef v4 = v3;
  BOOL v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5) {
    unint64_t simple_required = AMCP::Core::Core::get_simple_required_property<1953653102u>(v5);
  }
  else {
    unint64_t simple_required = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return simple_required;
}

BOOL AMCP::Box::has_audio(AMCP::Box *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  CFTypeRef v4 = v3;
  BOOL v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5)
  {
    strcpy(buf, "uahbbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    uint64_t v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if ((unsigned __int16)v6 <= 0xFFu)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v9 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        char v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        char v13 = 4;
        strcpy((char *)__p, "bhau");
        *(_DWORD *)AudioObjectPropertyAddress buf = 67110658;
        *(_DWORD *)&uint8_t buf[4] = v11;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Core.h";
        __int16 v15 = 1024;
        int v16 = 391;
        __int16 v17 = 2080;
        __int16 v18 = "optional_value.operator BOOL() == true";
        __int16 v19 = 2080;
        __int16 v20 = __p;
        __int16 v21 = 1024;
        int v22 = 1735159650;
        __int16 v23 = 1024;
        int v24 = 0;
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }
      abort();
    }
    BOOL v7 = v6 != 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v7;
}

void sub_1BADA39BC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

BOOL AMCP::Box::has_video(AMCP::Box *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  CFTypeRef v4 = v3;
  BOOL v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5)
  {
    strcpy(buf, "ivhbbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    uint64_t v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if ((unsigned __int16)v6 <= 0xFFu)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v9 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        char v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        char v13 = 4;
        strcpy((char *)__p, "bhvi");
        *(_DWORD *)AudioObjectPropertyAddress buf = 67110658;
        *(_DWORD *)&uint8_t buf[4] = v11;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Core.h";
        __int16 v15 = 1024;
        int v16 = 391;
        __int16 v17 = 2080;
        __int16 v18 = "optional_value.operator BOOL() == true";
        __int16 v19 = 2080;
        __int16 v20 = __p;
        __int16 v21 = 1024;
        int v22 = 1735159650;
        __int16 v23 = 1024;
        int v24 = 0;
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }
      abort();
    }
    BOOL v7 = v6 != 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v7;
}

void sub_1BADA3B80(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

BOOL AMCP::Box::has_midi(AMCP::Box *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  CFTypeRef v4 = v3;
  BOOL v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5)
  {
    strcpy(buf, "imhbbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    uint64_t v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if ((unsigned __int16)v6 <= 0xFFu)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v9 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        char v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        char v13 = 4;
        strcpy((char *)__p, "bhmi");
        *(_DWORD *)AudioObjectPropertyAddress buf = 67110658;
        *(_DWORD *)&uint8_t buf[4] = v11;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Core.h";
        __int16 v15 = 1024;
        int v16 = 391;
        __int16 v17 = 2080;
        __int16 v18 = "optional_value.operator BOOL() == true";
        __int16 v19 = 2080;
        __int16 v20 = __p;
        __int16 v21 = 1024;
        int v22 = 1735159650;
        __int16 v23 = 1024;
        int v24 = 0;
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }
      abort();
    }
    BOOL v7 = v6 != 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v7;
}

void sub_1BADA3D44(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

BOOL AMCP::Box::is_protected(AMCP::Box *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  CFTypeRef v4 = v3;
  BOOL v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5)
  {
    strcpy(buf, "orpbbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    uint64_t v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if ((unsigned __int16)v6 <= 0xFFu)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v9 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        char v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        char v13 = 4;
        strcpy((char *)__p, "bpro");
        *(_DWORD *)AudioObjectPropertyAddress buf = 67110658;
        *(_DWORD *)&uint8_t buf[4] = v11;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Core.h";
        __int16 v15 = 1024;
        int v16 = 391;
        __int16 v17 = 2080;
        __int16 v18 = "optional_value.operator BOOL() == true";
        __int16 v19 = 2080;
        __int16 v20 = __p;
        __int16 v21 = 1024;
        int v22 = 1735159650;
        __int16 v23 = 1024;
        int v24 = 0;
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }
      abort();
    }
    BOOL v7 = v6 != 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v7;
}

void sub_1BADA3F08(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

BOOL AMCP::Box::acquired(AMCP::Box *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  CFTypeRef v4 = v3;
  BOOL v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5)
  {
    strcpy(buf, "noxbbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    uint64_t v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if ((unsigned __int16)v6 <= 0xFFu)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v9 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        char v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        char v13 = 4;
        strcpy((char *)__p, "bxon");
        *(_DWORD *)AudioObjectPropertyAddress buf = 67110658;
        *(_DWORD *)&uint8_t buf[4] = v11;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Core.h";
        __int16 v15 = 1024;
        int v16 = 391;
        __int16 v17 = 2080;
        __int16 v18 = "optional_value.operator BOOL() == true";
        __int16 v19 = 2080;
        __int16 v20 = __p;
        __int16 v21 = 1024;
        int v22 = 1735159650;
        __int16 v23 = 1024;
        int v24 = 0;
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }
      abort();
    }
    BOOL v7 = v6 != 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v7;
}

void sub_1BADA40CC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Box::set_acquired(AMCP::Box *this, char a2)
{
  char v16 = a2;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3)
  {
    BOOL v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      BOOL v7 = (int8x8_t *)*((void *)this + 2);
      if (!v7) {
        goto LABEL_17;
      }
      uint64_t v14 = 0x676C6F6262786F6ELL;
      int v15 = 0;
      if (!AMCP::Core::Core::is_property_settable(v7, (const AMCP::Address *)&v14)) {
        goto LABEL_17;
      }
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v19, v7, (unsigned int *)&v14);
      mach_port_t v8 = v19;
      if (v19)
      {
        unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
        {
          AMCP::Core::Operation::call_function<void,BOOL const&>(v8, (uint64_t)&v16);
LABEL_8:
          char v10 = 0;
          goto LABEL_14;
        }
        unint64_t v12 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v12))
        {
          memset(v17, 0, sizeof(v17));
          LOBYTE(v17[0]) = a2;
          __int16 v18 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
          AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v17);
          if (v18) {
            v18(0, (uint64_t)v17, 0, 0);
          }
          goto LABEL_8;
        }
      }
      char v10 = 1;
LABEL_14:
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      if ((v10 & 1) == 0)
      {
        uint64_t v11 = 1;
        goto LABEL_18;
      }
LABEL_17:
      uint64_t v11 = 0;
LABEL_18:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      return v11;
    }
  }
  return 0;
}

void sub_1BADA4220(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(void, char *, void, void))
{
  if (a15) {
    a15(0, &a11, 0, 0);
  }
  __int16 v17 = *(std::__shared_weak_count **)(v15 - 40);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BADA41F0);
}

unint64_t AMCP::Box::get_acquisition_error(AMCP::Box *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  CFTypeRef v4 = v3;
  BOOL v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5)
  {
    strcpy(buf, "foxbbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    unint64_t v6 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if (!HIDWORD(v6))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unint64_t v9 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        char v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        char v13 = 4;
        strcpy((char *)__p, "bxof");
        *(_DWORD *)AudioObjectPropertyAddress buf = 67110658;
        *(_DWORD *)&uint8_t buf[4] = v11;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Core.h";
        __int16 v15 = 1024;
        int v16 = 391;
        __int16 v17 = 2080;
        __int16 v18 = "optional_value.operator BOOL() == true";
        __int16 v19 = 2080;
        __int16 v20 = __p;
        __int16 v21 = 1024;
        int v22 = 1735159650;
        __int16 v23 = 1024;
        int v24 = 0;
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }
      abort();
    }
    unint64_t v7 = v6;
  }
  else
  {
    unint64_t v7 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v7;
}

void sub_1BADA4424(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AMCP::Box::get_device_list(AMCP::Box *this@<X0>, void *a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  CFTypeRef v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    unint64_t v6 = v5;
    unint64_t v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7)
    {
      strcpy(buf, "#vdbbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>((uint64_t)&v15, v7, (AMCP::Address *)buf);
      if (!v17)
      {
        AMCP::Log::Scope_Registry::get(v8);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        char v10 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          mach_port_t v11 = pthread_self();
          mach_port_t v12 = pthread_mach_thread_np(v11);
          char v14 = 4;
          strcpy((char *)__p, "bdv#");
          *(_DWORD *)AudioObjectPropertyAddress buf = 67110658;
          *(_DWORD *)&uint8_t buf[4] = v12;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "Core.h";
          __int16 v19 = 1024;
          int v20 = 391;
          __int16 v21 = 2080;
          int v22 = "optional_value.operator BOOL() == true";
          __int16 v23 = 2080;
          int v24 = __p;
          __int16 v25 = 1024;
          int v26 = 1735159650;
          __int16 v27 = 1024;
          int v28 = 0;
          _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
        abort();
      }
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      unint64_t v9 = v15;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, v15, v16, (v16 - (uint64_t)v15) >> 2);
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_1BADA4650(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AMCP::Box::get_clock_list(AMCP::Box *this@<X0>, void *a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  CFTypeRef v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    unint64_t v6 = v5;
    unint64_t v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7)
    {
      strcpy(buf, "#lcbbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>((uint64_t)&v15, v7, (AMCP::Address *)buf);
      if (!v17)
      {
        AMCP::Log::Scope_Registry::get(v8);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        char v10 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          mach_port_t v11 = pthread_self();
          mach_port_t v12 = pthread_mach_thread_np(v11);
          char v14 = 4;
          strcpy((char *)__p, "bcl#");
          *(_DWORD *)AudioObjectPropertyAddress buf = 67110658;
          *(_DWORD *)&uint8_t buf[4] = v12;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "Core.h";
          __int16 v19 = 1024;
          int v20 = 391;
          __int16 v21 = 2080;
          int v22 = "optional_value.operator BOOL() == true";
          __int16 v23 = 2080;
          int v24 = __p;
          __int16 v25 = 1024;
          int v26 = 1735159650;
          __int16 v27 = 1024;
          int v28 = 0;
          _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
        abort();
      }
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      unint64_t v9 = v15;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, v15, v16, (v16 - (uint64_t)v15) >> 2);
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_1BADA487C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AMCP::Graph::Graph::delete_node_proc(void *a1, unsigned __int8 *a2)
{
  uint64_t v3 = a1 + 2;
  CFTypeRef v4 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(a1 + 2, a2);
  if (v4)
  {
    int8x8_t v5 = (int8x8_t)a1[3];
    unint64_t v6 = *((void *)v4 + 1);
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v5) {
        v6 %= *(void *)&v5;
      }
    }
    else
    {
      v6 &= *(void *)&v5 - 1;
    }
    mach_port_t v8 = *(unsigned __int8 **)(*v3 + 8 * v6);
    do
    {
      unint64_t v9 = v8;
      mach_port_t v8 = *(unsigned __int8 **)v8;
    }
    while (v8 != v4);
    if (v9 == (unsigned __int8 *)(a1 + 4)) {
      goto LABEL_19;
    }
    unint64_t v10 = *((void *)v9 + 1);
    if (v7.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v5) {
        v10 %= *(void *)&v5;
      }
    }
    else
    {
      v10 &= *(void *)&v5 - 1;
    }
    if (v10 != v6)
    {
LABEL_19:
      if (!*(void *)v4) {
        goto LABEL_20;
      }
      unint64_t v11 = *(void *)(*(void *)v4 + 8);
      if (v7.u32[0] > 1uLL)
      {
        if (v11 >= *(void *)&v5) {
          v11 %= *(void *)&v5;
        }
      }
      else
      {
        v11 &= *(void *)&v5 - 1;
      }
      if (v11 != v6) {
LABEL_20:
      }
        *(void *)(*v3 + 8 * v6) = 0;
    }
    uint64_t v12 = *(void *)v4;
    if (*(void *)v4)
    {
      unint64_t v13 = *(void *)(v12 + 8);
      if (v7.u32[0] > 1uLL)
      {
        if (v13 >= *(void *)&v5) {
          v13 %= *(void *)&v5;
        }
      }
      else
      {
        v13 &= *(void *)&v5 - 1;
      }
      if (v13 != v6)
      {
        *(void *)(*v3 + 8 * v13) = v9;
        uint64_t v12 = *(void *)v4;
      }
    }
    *(void *)unint64_t v9 = v12;
    *(void *)CFTypeRef v4 = 0;
    --a1[5];
    v14[0] = v4;
    v14[1] = a1 + 4;
    char v15 = 1;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
  }
}

void AMCP::Graph::Graph::get_node_proc(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint8x8_t v7 = (uint64_t *)(a1 + 16);
  if (std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>((void *)(a1 + 16), (unsigned __int8 *)a2))
  {
    goto LABEL_46;
  }
  _ZNSt3__115allocate_sharedB8ne180100IN4AMCP5Graph9Node_ProcENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v48);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v49 = *(std::string *)a2;
  }
  long long v47 = v48;
  long long v50 = v48;
  long long v48 = 0uLL;
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v49);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 24);
  if (!v10) {
    goto LABEL_22;
  }
  uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
  v11.i16[0] = vaddlv_u8(v11);
  unint64_t v12 = v11.u32[0];
  if (v11.u32[0] > 1uLL)
  {
    unint64_t v3 = v8;
    if (v8 >= v10) {
      unint64_t v3 = v8 % v10;
    }
  }
  else
  {
    unint64_t v3 = (v10 - 1) & v8;
  }
  unint64_t v13 = *(unsigned __int8 ***)(*v7 + 8 * v3);
  if (!v13 || (char v14 = *v13) == 0)
  {
LABEL_22:
    uint64_t v16 = (char *)operator new(0x38uLL);
    char v17 = (void *)(a1 + 32);
    v51[0] = v16;
    v51[1] = a1 + 32;
    *(void *)uint64_t v16 = 0;
    *((void *)v16 + 1) = v9;
    *(std::string *)(v16 + 16) = v49;
    memset(&v49, 0, sizeof(v49));
    *(_OWORD *)(v16 + 40) = v47;
    long long v50 = 0uLL;
    char v52 = 1;
    float v18 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
    float v19 = *(float *)(a1 + 48);
    if (!v10 || (float)(v19 * (float)v10) < v18)
    {
      BOOL v20 = 1;
      if (v10 >= 3) {
        BOOL v20 = (v10 & (v10 - 1)) != 0;
      }
      unint64_t v21 = v20 | (2 * v10);
      unint64_t v22 = vcvtps_u32_f32(v18 / v19);
      if (v21 <= v22) {
        size_t v23 = v22;
      }
      else {
        size_t v23 = v21;
      }
      std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)v7, v23);
      unint64_t v10 = *(void *)(a1 + 24);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v9 >= v10) {
          unint64_t v3 = v9 % v10;
        }
        else {
          unint64_t v3 = v9;
        }
      }
      else
      {
        unint64_t v3 = (v10 - 1) & v9;
      }
    }
    uint64_t v24 = *v7;
    __int16 v25 = *(void **)(*v7 + 8 * v3);
    if (v25)
    {
      *(void *)uint64_t v16 = *v25;
    }
    else
    {
      *(void *)uint64_t v16 = *v17;
      *char v17 = v16;
      *(void *)(v24 + 8 * v3) = v17;
      if (!*(void *)v16)
      {
LABEL_43:
        v51[0] = 0;
        ++*(void *)(a1 + 40);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)v51);
        goto LABEL_44;
      }
      unint64_t v26 = *(void *)(*(void *)v16 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v26 >= v10) {
          v26 %= v10;
        }
      }
      else
      {
        v26 &= v10 - 1;
      }
      __int16 v25 = (void *)(*v7 + 8 * v26);
    }
    *__int16 v25 = v16;
    goto LABEL_43;
  }
  while (1)
  {
    unint64_t v15 = *((void *)v14 + 1);
    if (v15 == v9) {
      break;
    }
    if (v12 > 1)
    {
      if (v15 >= v10) {
        v15 %= v10;
      }
    }
    else
    {
      v15 &= v10 - 1;
    }
    if (v15 != v3) {
      goto LABEL_22;
    }
LABEL_21:
    char v14 = *(unsigned __int8 **)v14;
    if (!v14) {
      goto LABEL_22;
    }
  }
  if (!std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v14 + 16, (unsigned __int8 *)&v49)) {
    goto LABEL_21;
  }
  if (*((void *)&v47 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v47 + 1));
  }
LABEL_44:
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
LABEL_46:
  unint64_t v27 = std::__string_hash<char>::operator()[abi:ne180100](a2);
  unint64_t v28 = v27;
  unint64_t v29 = *(void *)(a1 + 24);
  if (v29)
  {
    uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v29);
    v30.i16[0] = vaddlv_u8(v30);
    unint64_t v31 = v30.u32[0];
    if (v30.u32[0] > 1uLL)
    {
      unint64_t v3 = v27;
      if (v27 >= v29) {
        unint64_t v3 = v27 % v29;
      }
    }
    else
    {
      unint64_t v3 = (v29 - 1) & v27;
    }
    int v32 = *(void ***)(*v7 + 8 * v3);
    if (v32)
    {
      uint64_t v33 = (char *)*v32;
      if (*v32)
      {
        do
        {
          unint64_t v34 = *((void *)v33 + 1);
          if (v34 == v28)
          {
            if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>((unsigned __int8 *)v33 + 16, (unsigned __int8 *)a2))
            {
              goto LABEL_88;
            }
          }
          else
          {
            if (v31 > 1)
            {
              if (v34 >= v29) {
                v34 %= v29;
              }
            }
            else
            {
              v34 &= v29 - 1;
            }
            if (v34 != v3) {
              break;
            }
          }
          uint64_t v33 = *(char **)v33;
        }
        while (v33);
      }
    }
  }
  char v35 = (void *)(a1 + 32);
  uint64_t v33 = (char *)operator new(0x38uLL);
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
  v49.__r_.__value_.__l.__size_ = a1 + 32;
  v49.__r_.__value_.__s.__data_[16] = 0;
  *(void *)uint64_t v33 = 0;
  *((void *)v33 + 1) = v28;
  unint64_t v36 = (std::string *)(v33 + 16);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v36, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v36->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v33 + 4) = *(void *)(a2 + 16);
  }
  *((void *)v33 + 5) = 0;
  *((void *)v33 + 6) = 0;
  v49.__r_.__value_.__s.__data_[16] = 1;
  float v37 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
  float v38 = *(float *)(a1 + 48);
  if (!v29 || (float)(v38 * (float)v29) < v37)
  {
    BOOL v39 = 1;
    if (v29 >= 3) {
      BOOL v39 = (v29 & (v29 - 1)) != 0;
    }
    unint64_t v40 = v39 | (2 * v29);
    unint64_t v41 = vcvtps_u32_f32(v37 / v38);
    if (v40 <= v41) {
      size_t v42 = v41;
    }
    else {
      size_t v42 = v40;
    }
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)v7, v42);
    unint64_t v29 = *(void *)(a1 + 24);
    if ((v29 & (v29 - 1)) != 0)
    {
      if (v28 >= v29) {
        unint64_t v3 = v28 % v29;
      }
      else {
        unint64_t v3 = v28;
      }
    }
    else
    {
      unint64_t v3 = (v29 - 1) & v28;
    }
  }
  uint64_t v43 = *v7;
  uint64_t v44 = *(void **)(*v7 + 8 * v3);
  if (v44)
  {
    *(void *)uint64_t v33 = *v44;
    goto LABEL_86;
  }
  *(void *)uint64_t v33 = *v35;
  *char v35 = v33;
  *(void *)(v43 + 8 * v3) = v35;
  if (*(void *)v33)
  {
    unint64_t v45 = *(void *)(*(void *)v33 + 8);
    if ((v29 & (v29 - 1)) != 0)
    {
      if (v45 >= v29) {
        v45 %= v29;
      }
    }
    else
    {
      v45 &= v29 - 1;
    }
    uint64_t v44 = (void *)(*v7 + 8 * v45);
LABEL_86:
    *uint64_t v44 = v33;
  }
  v49.__r_.__value_.__r.__words[0] = 0;
  ++*(void *)(a1 + 40);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v49);
LABEL_88:
  *a3 = *((void *)v33 + 5);
  uint64_t v46 = *((void *)v33 + 6);
  a3[1] = v46;
  if (v46) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_1BADA4F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Graph::~Graph(AMCP::Graph::Graph *this)
{
  AMCP::Graph::Graph::~Graph(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::string __p;
  uint64_t v8[3];

  *(void *)this = &unk_1F1472350;
  AMCP::Graph::Graph::get_nodes(v8, *((void **)this + 24));
  uint64_t v2 = v8[0];
  unint64_t v3 = v8[1];
  while (v2 != v3)
  {
    CFTypeRef v4 = *(void *)v2;
    if (*(char *)(*(void *)v2 + 47) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v4 + 24), *(void *)(v4 + 32));
    }
    else {
      signed long long __p = *(std::string *)(v4 + 24);
    }
    AMCP::Graph::Graph::delete_node(this, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    v2 += 16;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  int8x8_t v5 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 36);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::destroy(*((void **)this + 33));
  std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table((uint64_t)this + 216);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::~__hash_table((uint64_t)this + 176);
  std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::~__hash_table((uint64_t)this + 136);
  std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::~__hash_table((uint64_t)this + 96);
  std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::~__hash_table((uint64_t)this + 56);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>>>::~__hash_table((uint64_t)this + 16);
}

uint64_t *AMCP::Graph::Graph::get_nodes(uint64_t *result, void *a2)
{
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  if (a2)
  {
    uint64_t v2 = a2;
    unint64_t v3 = result;
    CFTypeRef v4 = 0;
    int8x8_t v5 = result + 2;
    do
    {
      uint64_t v6 = v2[5];
      if (!*(_DWORD *)(v6 + 16))
      {
        if ((unint64_t)v4 >= *v5)
        {
          uint64_t v8 = ((uint64_t)v4 - *v3) >> 4;
          if ((unint64_t)(v8 + 1) >> 60) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v9 = *v5 - *v3;
          uint64_t v10 = v9 >> 3;
          if (v9 >> 3 <= (unint64_t)(v8 + 1)) {
            uint64_t v10 = v8 + 1;
          }
          if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v10;
          }
          v16[4] = v5;
          unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v11);
          unint64_t v13 = &v12[16 * v8];
          v16[0] = v12;
          v16[1] = v13;
          void v16[3] = &v12[16 * v14];
          long long v15 = *(_OWORD *)(v2 + 5);
          *(_OWORD *)unint64_t v13 = v15;
          if (*((void *)&v15 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          v16[2] = v13 + 16;
          std::vector<std::shared_ptr<AMCP::Graph::Timebase>>::__swap_out_circular_buffer(v3, v16);
          CFTypeRef v4 = (void *)v3[1];
          uint64_t result = (uint64_t *)std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)v16);
        }
        else
        {
          *CFTypeRef v4 = v6;
          uint64_t v7 = v2[6];
          v4[1] = v7;
          if (v7) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
          }
          v4 += 2;
          v3[1] = (uint64_t)v4;
        }
        v3[1] = (uint64_t)v4;
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  return result;
}

void sub_1BADA51DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

unsigned __int8 *AMCP::Graph::Graph::delete_node(void *a1, unsigned __int8 *a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  CFTypeRef v4 = a1 + 22;
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(a1 + 22, a2);
  if (!result) {
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = *(void *)(*((void *)result + 5) + 176);
  if (v7) {
    unsigned int v8 = *(_DWORD *)(v7 + 8);
  }
  else {
    unsigned int v8 = 0;
  }
  unint64_t v9 = a1[28];
  if (!v9) {
    goto LABEL_22;
  }
  uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v11 = v8;
    if (v9 <= v8) {
      unint64_t v11 = v8 % v9;
    }
  }
  else
  {
    unint64_t v11 = (v9 - 1) & v8;
  }
  unint64_t v12 = *(void ****)(a1[27] + 8 * v11);
  if (!v12 || (unint64_t v13 = *v12) == 0)
  {
LABEL_22:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v15 = **(NSObject ***)buf;
    if (*(void *)v53) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v53);
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = pthread_self();
      mach_port_t v17 = pthread_mach_thread_np(v16);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v17;
      *(_WORD *)uint64_t v53 = 2080;
      *(void *)&uint64_t v53[2] = "Graph.cpp";
      __int16 v54 = 1024;
      int v55 = 156;
      __int16 v56 = 2080;
      *(void *)uint64_t v57 = "not (found != m_nodes_by_object_id.end())";
      _os_log_error_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Missing object ID for node in graph index", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v51);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Missing object ID for node in graph index", (uint64_t)&v43);
    std::logic_error::logic_error(&v44, &v43);
    v44.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v45, &v44);
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    int v50 = -1;
    v45.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v46 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v45);
    *(void *)&v57[6] = "BOOL AMCP::Graph::Graph::delete_node(const Graph_Node_UID &)";
    long long v58 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
    int v59 = 156;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v38);
    long long v41 = v38;
    uint64_t v42 = v39;
    long long v38 = 0uLL;
    uint64_t v39 = 0;
    unint64_t v40 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  while (1)
  {
    unint64_t v14 = (unint64_t)v13[1];
    if (v14 == v8) {
      break;
    }
    if (v10.u32[0] > 1uLL)
    {
      if (v14 >= v9) {
        v14 %= v9;
      }
    }
    else
    {
      v14 &= v9 - 1;
    }
    if (v14 != v11) {
      goto LABEL_22;
    }
LABEL_21:
    unint64_t v13 = (void **)*v13;
    if (!v13) {
      goto LABEL_22;
    }
  }
  if (*((_DWORD *)v13 + 4) != v8) {
    goto LABEL_21;
  }
  AMCP::Graph::Graph::disconnect_any_wires_connected_to_node(a1, a2);
  int8x8_t v18 = (int8x8_t)a1[28];
  unint64_t v19 = (unint64_t)v13[1];
  uint8x8_t v20 = (uint8x8_t)vcnt_s8(v18);
  v20.i16[0] = vaddlv_u8(v20);
  if (v20.u32[0] > 1uLL)
  {
    if (v19 >= *(void *)&v18) {
      v19 %= *(void *)&v18;
    }
  }
  else
  {
    v19 &= *(void *)&v18 - 1;
  }
  uint64_t v21 = a1[27];
  unint64_t v22 = *(void ***)(v21 + 8 * v19);
  do
  {
    size_t v23 = v22;
    unint64_t v22 = (void **)*v22;
  }
  while (v22 != v13);
  if (v23 == a1 + 29) {
    goto LABEL_44;
  }
  unint64_t v24 = (unint64_t)v23[1];
  if (v20.u32[0] > 1uLL)
  {
    if (v24 >= *(void *)&v18) {
      v24 %= *(void *)&v18;
    }
  }
  else
  {
    v24 &= *(void *)&v18 - 1;
  }
  if (v24 != v19)
  {
LABEL_44:
    if (!*v13) {
      goto LABEL_45;
    }
    unint64_t v25 = *((void *)*v13 + 1);
    if (v20.u32[0] > 1uLL)
    {
      if (v25 >= *(void *)&v18) {
        v25 %= *(void *)&v18;
      }
    }
    else
    {
      v25 &= *(void *)&v18 - 1;
    }
    if (v25 != v19) {
LABEL_45:
    }
      *(void *)(v21 + 8 * v19) = 0;
  }
  unint64_t v26 = *v13;
  if (*v13)
  {
    unint64_t v27 = v26[1];
    if (v20.u32[0] > 1uLL)
    {
      if (v27 >= *(void *)&v18) {
        v27 %= *(void *)&v18;
      }
    }
    else
    {
      v27 &= *(void *)&v18 - 1;
    }
    if (v27 != v19)
    {
      *(void *)(a1[27] + 8 * v27) = v23;
      unint64_t v26 = *v13;
    }
  }
  NSObject *v23 = v26;
  char *v13 = 0;
  --a1[30];
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *>>>::operator()[abi:ne180100](1, v13);
  int8x8_t v28 = (int8x8_t)a1[23];
  unint64_t v29 = *((void *)v6 + 1);
  uint8x8_t v30 = (uint8x8_t)vcnt_s8(v28);
  v30.i16[0] = vaddlv_u8(v30);
  if (v30.u32[0] > 1uLL)
  {
    if (v29 >= *(void *)&v28) {
      v29 %= *(void *)&v28;
    }
  }
  else
  {
    v29 &= *(void *)&v28 - 1;
  }
  unint64_t v31 = *(unsigned __int8 **)(*v4 + 8 * v29);
  do
  {
    int v32 = v31;
    unint64_t v31 = *(unsigned __int8 **)v31;
  }
  while (v31 != v6);
  if (v32 == (unsigned __int8 *)(a1 + 24)) {
    goto LABEL_70;
  }
  unint64_t v33 = *((void *)v32 + 1);
  if (v30.u32[0] > 1uLL)
  {
    if (v33 >= *(void *)&v28) {
      v33 %= *(void *)&v28;
    }
  }
  else
  {
    v33 &= *(void *)&v28 - 1;
  }
  if (v33 != v29)
  {
LABEL_70:
    if (!*(void *)v6) {
      goto LABEL_71;
    }
    unint64_t v34 = *(void *)(*(void *)v6 + 8);
    if (v30.u32[0] > 1uLL)
    {
      if (v34 >= *(void *)&v28) {
        v34 %= *(void *)&v28;
      }
    }
    else
    {
      v34 &= *(void *)&v28 - 1;
    }
    if (v34 != v29) {
LABEL_71:
    }
      *(void *)(*v4 + 8 * v29) = 0;
  }
  uint64_t v35 = *(void *)v6;
  if (*(void *)v6)
  {
    unint64_t v36 = *(void *)(v35 + 8);
    if (v30.u32[0] > 1uLL)
    {
      if (v36 >= *(void *)&v28) {
        v36 %= *(void *)&v28;
      }
    }
    else
    {
      v36 &= *(void *)&v28 - 1;
    }
    if (v36 != v29)
    {
      *(void *)(*v4 + 8 * v36) = v32;
      uint64_t v35 = *(void *)v6;
    }
  }
  *(void *)int v32 = v35;
  *(void *)uint64_t v6 = 0;
  --a1[25];
  *(void *)AudioObjectPropertyAddress buf = v6;
  *(void *)uint64_t v53 = a1 + 24;
  v53[8] = 1;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
  float v37 = *(uint64_t (**)(void *, unsigned __int8 *))(*a1 + 24);

  return (unsigned __int8 *)v37(a1, a2);
}

void sub_1BADA5818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v26 - 128);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a24);
  MEMORY[0x1C1859090](&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v25) {
    __cxa_free_exception(v24);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v26 - 129));
  _Unwind_Resume(a1);
}

void AMCP::Graph::Graph::disconnect_any_wires_connected_to_node(void *a1, unsigned __int8 *a2)
{
  unint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(a1 + 22, a2);
  if (v3)
  {
    CFTypeRef v4 = v3;
    uint64_t v16 = (AMCP::Wire_Identifier *)(a1 + 7);
    uint64_t v5 = *((void *)v3 + 5);
    if (*(char *)(v5 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v5 + 24), *(void *)(v5 + 32));
      uint64_t v5 = *((void *)v4 + 5);
    }
    else
    {
      std::string v30 = *(std::string *)(v5 + 24);
    }
    AMCP::Graph::Wire_Index::get_wires_for_node((uint64_t)&v28, v16, (uint64_t)&v30, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v5 + 88) - *(void *)(v5 + 80)) >> 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v5 + 64) - *(void *)(v5 + 56)) >> 4));
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v25 = &v26;
    for (uint64_t i = v29; i; uint64_t i = (void *)*i)
    {
      if (*((char *)i + 39) < 0) {
        std::string::__init_copy_ctor_external(&v22, (const std::string::value_type *)i[2], i[3]);
      }
      else {
        std::string v22 = *(std::string *)(i + 2);
      }
      uint64_t v23 = i[5];
      int v24 = *((_DWORD *)i + 12);
      if (*((char *)i + 79) < 0) {
        std::string::__init_copy_ctor_external(&v19, (const std::string::value_type *)i[7], i[8]);
      }
      else {
        std::string v19 = *(std::string *)(i + 7);
      }
      uint64_t v20 = i[10];
      int v21 = *((_DWORD *)i + 22);
      std::string v30 = v22;
      memset(&v22, 0, sizeof(v22));
      uint64_t v31 = v23;
      int v32 = v24;
      std::string v33 = v19;
      memset(&v19, 0, sizeof(v19));
      int v35 = *((_DWORD *)i + 22);
      uint64_t v34 = i[10];
      uint64_t v7 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>(a1 + 12, (unsigned __int8 **)&v30);
      if (v7 && *((unsigned char *)v7 + 504))
      {
        AMCP::Graph::Wire_Index::get_tgid_for_wire((AMCP::Graph::Wire_Index *)__p, v16, (unsigned __int8 **)&v30);
        unsigned int v8 = std::__tree<std::string>::__find_equal<std::string>((uint64_t)&v25, v44, __p);
        if (*v8)
        {
          if (SHIBYTE(v18) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          unint64_t v9 = v8;
          uint8x8_t v10 = operator new(0x38uLL);
          v10[2] = *(_OWORD *)__p;
          *((void *)v10 + 6) = v18;
          __p[1] = 0;
          uint64_t v18 = 0;
          __p[0] = 0;
          uint64_t v11 = v44[0];
          *(void *)uint8x8_t v10 = 0;
          *((void *)v10 + 1) = 0;
          *((void *)v10 + 2) = v11;
          *unint64_t v9 = v10;
          if (*v25)
          {
            int v25 = (uint64_t **)*v25;
            uint8x8_t v10 = (_OWORD *)*v9;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v26, (uint64_t *)v10);
          ++v27;
        }
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
    }
    for (uint64_t j = (uint64_t *)a1[14]; j; uint64_t j = (uint64_t *)*j)
    {
      if (*((unsigned char *)j + 504))
      {
        AMCP::Graph::Graph_Wire::Connection::Connection(&v30, (const AMCP::Graph::Graph_Wire::Connection *)(j + 36));
        unint64_t v13 = v41;
        unint64_t v14 = (uint64_t **)std::__tree<std::string>::find<std::string>((uint64_t)&v25, &v36);
        if (v13)
        {
          uint64_t v42 = v13;
          operator delete(v13);
        }
        if (v40) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
        }
        if (v38)
        {
          uint64_t v39 = v38;
          operator delete(v38);
        }
        if (v37 < 0) {
          operator delete(v36);
        }
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v30.__r_.__value_.__l.__data_);
        }
        if (&v26 != v14)
        {
          v30.__r_.__value_.__s.__data_[0] = 0;
          char v43 = 0;
          if (*((unsigned char *)j + 504)) {
            std::__optional_destruct_base<AMCP::Graph::Graph_Wire::Connection,false>::reset[abi:ne180100]((uint64_t)(j + 36));
          }
          std::__optional_destruct_base<AMCP::Graph::Graph_Wire::Connection,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v30);
        }
      }
    }
    std::__tree<std::string>::destroy((char *)v26);
    std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__deallocate_node(v29);
    long long v15 = v28;
    int8x8_t v28 = 0;
    if (v15) {
      operator delete(v15);
    }
  }
}

void sub_1BADA5C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 47) < 0) {
      operator delete(__p[3]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void std::__shared_ptr_emplace<AMCP::Graph::Meta_Timebase_Factory>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<double,std::string> const,std::shared_ptr<AMCP::Graph::Timebase>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  CFTypeRef v4 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v4)
  {
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<AMCP::Graph::Meta_Timebase_Factory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1472398;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Graph::Meta_Timebase_Factory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1472398;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Graph::Node>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 208);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  CFTypeRef v4 = *(std::__shared_weak_count **)(a1 + 176);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  for (uint64_t i = 104; i != 56; i -= 24)
  {
    uint64_t v7 = (void **)(a1 + i);
    std::vector<AMCP::Graph::Terminal>::__destroy_vector::operator()[abi:ne180100](&v7);
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 32);
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void std::__shared_ptr_emplace<AMCP::Graph::Node>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14723E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Graph::Node>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14723E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AMCP::Graph::Graph::connect_nodes(void *a1, uint64_t *a2, uint64_t *a3, const std::string::value_type *a4, void *a5)
{
  uint64_t v167 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(*a2 + 56);
  uint64_t v6 = *(void *)(*a2 + 64);
  uint64_t v8 = *a3;
  if (*(_DWORD *)(*a3 + 48) != 1 && *(_DWORD *)(v8 + 16) == 1)
  {
    *(void *)signed long long __p = &unk_1F1472438;
    *(void *)&__p[8] = a4;
    *(void *)&__p[24] = __p;
    AMCP::Graph::Node::for_each_connection(v8, a1 + 7, (uint64_t)__p);
    std::__function::__value_func<void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::~__value_func[abi:ne180100](__p);
  }
  if (v6 != v7)
  {
    unint64_t v9 = 0;
    uint64_t v97 = 0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 4);
    int v98 = a1 + 7;
    long long v100 = a1 + 22;
    unint64_t v101 = a1 + 17;
    while (1)
    {
      uint8x8_t v10 = a2;
      uint64_t nth_terminal = AMCP::Graph::Node::get_nth_terminal(*a2, v9, 0);
      uint64_t v11 = (std::string *)*a2;
      if (*(char *)(*a2 + 47) < 0) {
        std::string::__init_copy_ctor_external(&v135, v11[1].__r_.__value_.__l.__data_, v11[1].__r_.__value_.__l.__size_);
      }
      else {
        std::string v135 = v11[1];
      }
      *(_OWORD *)signed long long __p = *(_OWORD *)&v135.__r_.__value_.__l.__data_;
      std::string::size_type v12 = v135.__r_.__value_.__r.__words[2];
      memset(&v135, 0, sizeof(v135));
      *(void *)&__p[16] = v12;
      *(void *)&__p[24] = v9;
      *(_DWORD *)&unsigned char __p[32] = 0;
      AMCP::Graph::Wire_Index::get_wires_for_terminal((char **)&v136, v98, (unsigned __int8 **)__p);
      unint64_t v99 = v9;
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      unint64_t v14 = (char *)v136;
      uint8x8_t v106 = v137;
      if (v136 != v137) {
        break;
      }
LABEL_211:
      if (v14) {
        operator delete(v14);
      }
      unint64_t v9 = v99 + 1;
      if (v99 + 1 == v97) {
        return;
      }
    }
    while (1)
    {
      uint64_t v15 = *(void *)v14;
      uint64_t v16 = (std::string *)(*(void *)v14 + 40);
      if (*(char *)(*(void *)v14 + 63) < 0) {
        std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)(v15 + 40), *(void *)(v15 + 48));
      }
      else {
        std::string v132 = *v16;
      }
      uint64_t v18 = (uint64_t *)(v15 + 64);
      unint64_t v17 = *(void *)(v15 + 64);
      int v134 = *(_DWORD *)(v15 + 72);
      unint64_t v133 = v17;
      if (v134 != 1)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v13);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
        long long v85 = **(NSObject ***)__p;
        if (*(void *)&__p[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
        }
        if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
        {
          uint64_t v86 = pthread_self();
          mach_port_t v87 = pthread_mach_thread_np(v86);
          *(_DWORD *)signed long long __p = 67109890;
          *(_DWORD *)&__p[4] = v87;
          *(_WORD *)&__p[8] = 2080;
          *(void *)&__p[10] = "Graph.cpp";
          *(_WORD *)&__p[18] = 1024;
          *(_DWORD *)&__p[20] = 248;
          *(_WORD *)&__p[24] = 2080;
          *(void *)&__p[26] = "not (destination.m_wire_direction == Direction::input)";
          _os_log_error_impl(&dword_1BAA78000, v85, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Wire should connect to input terminal on destination node.", __p, 0x22u);
        }
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Wire should connect to input terminal on destination node.", (uint64_t)__s1);
        std::logic_error::logic_error((std::logic_error *)&v140, (const std::string *)__s1);
        v140.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
        std::logic_error::logic_error((std::logic_error *)buf, (const std::logic_error *)&v140);
        memset(&buf[24], 0, 24);
        *(_DWORD *)&buf[48] = -1;
        *(void *)AudioObjectPropertyAddress buf = &unk_1F1489CC8;
        *(void *)&buf[16] = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)buf);
        *(void *)&unsigned char __p[32] = "void AMCP::Graph::Graph::connect_nodes(const std::shared_ptr<Node> &, const std::shared_pt"
                              "r<Node> &, Thread_Group_ID, Graph::Resource_Counts &)";
        *(void *)&__p[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
        *(_DWORD *)&__p[48] = 248;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v131);
        *(_OWORD *)&v166[8] = *(_OWORD *)&v131.mSampleRate;
        *(void *)uint64_t v166 = &unk_1F148AA90;
        *(void *)&v166[24] = *(void *)&v131.mBytesPerPacket;
        memset(&v131, 0, 24);
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      if (*(_DWORD *)(*v10 + 48) != 1 && *(unsigned char *)(v15 + 408))
      {
        AMCP::Graph::Graph_Wire::Connection::Connection((std::string *)__p, (const AMCP::Graph::Graph_Wire::Connection *)(v15 + 192));
        *(_OWORD *)__s1 = v156;
        *(void *)&__s1[16] = v157;
        long long v156 = 0uLL;
        *(void *)&long long v157 = 0;
        if (*(void *)&v165[3])
        {
          *(void *)&v165[5] = *(void *)&v165[3];
          operator delete(*(void **)&v165[3]);
        }
        if (v163) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v163);
        }
        if (*((void *)&v157 + 1))
        {
          *(void *)&long long v158 = *((void *)&v157 + 1);
          operator delete(*((void **)&v157 + 1));
        }
        if (SBYTE7(v157) < 0) {
          operator delete((void *)v156);
        }
        if (SBYTE7(v154) < 0) {
          operator delete(*(void **)&__p[40]);
        }
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        unint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(v100, (unsigned __int8 *)&v132);
        if (!v13) {
          goto LABEL_245;
        }
        uint64_t v19 = *((void *)v13 + 5);
        if (*(_DWORD *)(v19 + 48) == 1)
        {
          char v20 = __s1[23];
          goto LABEL_75;
        }
        int v37 = *(_DWORD *)(v19 + 16);
        uint64_t v38 = __s1[23];
        char v20 = __s1[23];
        if (v37 == 1)
        {
          if (__s1[23] >= 0) {
            uint64_t v39 = __s1[23];
          }
          else {
            uint64_t v39 = *(void *)&__s1[8];
          }
          uint64_t v40 = *((unsigned __int8 *)a4 + 23);
          int v41 = (char)v40;
          if ((v40 & 0x80u) != 0) {
            uint64_t v40 = *((void *)a4 + 1);
          }
          if (v39 != v40) {
            goto LABEL_245;
          }
          if (v41 >= 0) {
            uint64_t v42 = a4;
          }
          else {
            uint64_t v42 = *(const std::string::value_type **)a4;
          }
          if ((__s1[23] & 0x80000000) == 0)
          {
            if (__s1[23])
            {
              char v43 = __s1;
              while (*v43 == *(unsigned __int8 *)v42)
              {
                ++v43;
                ++v42;
                if (!--v38) {
                  goto LABEL_75;
                }
              }
LABEL_245:
              AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v13);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
              long long v77 = **(NSObject ***)__p;
              if (*(void *)&__p[8]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
              }
              if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
              {
                unint64_t v78 = pthread_self();
                mach_port_t v79 = pthread_mach_thread_np(v78);
                BOOL v80 = __s1;
                if (__s1[23] < 0) {
                  BOOL v80 = *(unsigned char **)__s1;
                }
                unint64_t v81 = a4;
                if (a4[23] < 0) {
                  unint64_t v81 = *(const std::string::value_type **)a4;
                }
                *(_DWORD *)signed long long __p = 67110402;
                *(_DWORD *)&__p[4] = v79;
                *(_WORD *)&__p[8] = 2080;
                *(void *)&__p[10] = "Graph.cpp";
                *(_WORD *)&__p[18] = 1024;
                *(_DWORD *)&__p[20] = 255;
                *(_WORD *)&__p[24] = 2080;
                *(void *)&__p[26] = "not (node != m_nodes_by_uid.end() && (node->second->node_has_fixed_thread_group() "
                                      "|| old_group == group))";
                *(_WORD *)&__p[34] = 2080;
                *(void *)&__p[36] = v80;
                *(_WORD *)&__p[44] = 2080;
                *(void *)&__p[46] = v81;
                _os_log_error_impl(&dword_1BAA78000, v77, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Groups do not match: %s, %s", __p, 0x36u);
              }
              __cxa_allocate_exception(0x40uLL);
              unint64_t v82 = __s1;
              if (__s1[23] < 0) {
                unint64_t v82 = *(unsigned char **)__s1;
              }
              size_t v83 = (uint64_t *)a4;
              if (a4[23] < 0) {
                size_t v83 = *(uint64_t **)a4;
              }
              caulk::make_string((caulk *)"Groups do not match: %s, %s", (uint64_t)&v131, v82, v83);
              std::logic_error::logic_error((std::logic_error *)&v143, (const std::string *)&v131);
              v143.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
              std::logic_error::logic_error((std::logic_error *)buf, (const std::logic_error *)&v143);
              memset(&buf[24], 0, 24);
              *(_DWORD *)&buf[48] = -1;
              *(void *)AudioObjectPropertyAddress buf = &unk_1F1489CC8;
              *(void *)&buf[16] = &unk_1F1489CF0;
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)buf);
              *(void *)&unsigned char __p[32] = "void AMCP::Graph::Graph::connect_nodes(const std::shared_ptr<Node> &, const std::sha"
                                    "red_ptr<Node> &, Thread_Group_ID, Graph::Resource_Counts &)";
              *(void *)&__p[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
              *(_DWORD *)&__p[48] = 255;
              std::vector<void *>::vector(&v140);
              int v84 = backtrace((void **)v140.__r_.__value_.__l.__data_, (v140.__r_.__value_.__l.__size_ - v140.__r_.__value_.__r.__words[0]) >> 3);
              std::vector<void *>::resize(&v140.__r_.__value_.__l.__data_, v84);
              *(std::string *)&v166[8] = v140;
              *(void *)uint64_t v166 = &unk_1F148AA90;
              memset(&v140, 0, sizeof(v140));
              boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
            }
LABEL_209:
            if ((*((unsigned char *)&v132.__r_.__value_.__s + 23) & 0x80) == 0) {
              goto LABEL_201;
            }
LABEL_200:
            operator delete(v132.__r_.__value_.__l.__data_);
            goto LABEL_201;
          }
          std::logic_error v44 = *(void **)__s1;
          unint64_t v13 = (unsigned __int8 *)memcmp(*(const void **)__s1, v42, *(size_t *)&__s1[8]);
          if (v13) {
            goto LABEL_245;
          }
        }
        else
        {
LABEL_75:
          if ((v20 & 0x80) == 0) {
            goto LABEL_209;
          }
          std::logic_error v44 = *(void **)__s1;
        }
        operator delete(v44);
        goto LABEL_209;
      }
      uint64_t v21 = *a3;
      if (*(char *)(*a3 + 47) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v21 + 24), *(void *)(v21 + 32));
      }
      else
      {
        *(_OWORD *)signed long long __p = *(_OWORD *)(v21 + 24);
        *(void *)&__p[16] = *(void *)(v21 + 40);
      }
      char v22 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
      if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v132.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v132.__r_.__value_.__l.__size_;
      }
      uint64_t v24 = __p[23];
      int v25 = __p[23];
      if (__p[23] < 0) {
        uint64_t v24 = *(void *)&__p[8];
      }
      if (size == v24)
      {
        if (__p[23] >= 0) {
          uint64_t v26 = __p;
        }
        else {
          uint64_t v26 = *(unsigned __int8 **)__p;
        }
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
        {
          unint64_t v13 = (unsigned __int8 *)memcmp(v132.__r_.__value_.__l.__data_, v26, v132.__r_.__value_.__l.__size_);
          BOOL v35 = v13 == 0;
          if ((v25 & 0x80000000) == 0) {
            goto LABEL_54;
          }
        }
        else if (*((unsigned char *)&v132.__r_.__value_.__s + 23))
        {
          uint64_t v27 = HIBYTE(v132.__r_.__value_.__r.__words[2]) - 1;
          int8x8_t v28 = &v132;
          do
          {
            int v30 = v28->__r_.__value_.__s.__data_[0];
            int8x8_t v28 = (std::string *)((char *)v28 + 1);
            int v29 = v30;
            int v32 = *v26++;
            int v31 = v32;
            BOOL v34 = v27-- != 0;
            BOOL v35 = v29 == v31;
          }
          while (v29 == v31 && v34);
          if ((__p[23] & 0x80000000) == 0)
          {
LABEL_54:
            if (!v35) {
              goto LABEL_59;
            }
            goto LABEL_55;
          }
        }
        else
        {
          BOOL v35 = 1;
          if ((__p[23] & 0x80000000) == 0) {
            goto LABEL_54;
          }
        }
      }
      else
      {
        BOOL v35 = 0;
        if ((__p[23] & 0x80000000) == 0) {
          goto LABEL_54;
        }
      }
      operator delete(*(void **)__p);
      if (!v35)
      {
LABEL_59:
        uint8x8_t v10 = a2;
        goto LABEL_199;
      }
LABEL_55:
      AMCP::Graph::Node::get_nth_terminal(*a3, v133, 1u);
      BOOL v36 = *(_DWORD *)(*a2 + 16) == 2;
      if (a4[23] < 0) {
        std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)a4, *((void *)a4 + 1));
      }
      else {
        std::string v130 = *(std::string *)a4;
      }
      int v104 = *(_DWORD *)(nth_terminal + 100);
      if (*(char *)(v15 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v127, *(const std::string::value_type **)v15, *(void *)(v15 + 8));
      }
      else {
        std::string v127 = *(std::string *)v15;
      }
      std::logic_error v45 = (void *)(v15 + 24);
      uint64_t v128 = *(void *)(v15 + 24);
      int v129 = *(_DWORD *)(v15 + 32);
      if (*(char *)(v15 + 63) < 0) {
        std::string::__init_copy_ctor_external(&v124, *(const std::string::value_type **)(v15 + 40), *(void *)(v15 + 48));
      }
      else {
        std::string v124 = *v16;
      }
      BOOL v103 = v36;
      uint64_t v125 = *v18;
      int v126 = *(_DWORD *)(v15 + 72);
      *(std::string *)AudioObjectPropertyAddress buf = v127;
      memset(&v127, 0, sizeof(v127));
      *(void *)&unsigned char buf[24] = v128;
      *(_DWORD *)&buf[32] = v129;
      *(std::string *)&buf[40] = v124;
      memset(&v124, 0, sizeof(v124));
      uint64_t v46 = *v18;
      int v152 = *(_DWORD *)(v15 + 72);
      uint64_t v151 = v46;
      uint64_t v47 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>(v101, (unsigned __int8 **)buf);
      if (v47)
      {
        uint64_t v48 = v47[12];
        uint64_t v49 = (std::__shared_weak_count *)v47[13];
        if (v49) {
          atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v48 = 0;
        uint64_t v49 = 0;
      }
      if (*(char *)(v15 + 63) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v166, *(const std::string::value_type **)(v15 + 40), *(void *)(v15 + 48));
      }
      else
      {
        *(_OWORD *)uint64_t v166 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        *(void *)&v166[16] = *((void *)&v16->__r_.__value_.__l + 2);
      }
      *(void *)&v166[24] = *v18;
      *(_DWORD *)&v166[32] = *(_DWORD *)(v15 + 72);
      uint64_t terminal = get_terminal((AMCP::Log::Scope_Registry *)a3, v166);
      if ((v166[23] & 0x80000000) != 0) {
        operator delete(*(void **)v166);
      }
      long long v51 = *(_OWORD *)(terminal + 16);
      *(_OWORD *)&v131.double mSampleRate = *(_OWORD *)terminal;
      *(_OWORD *)&v131.mBytesPerPacket = v51;
      *(void *)&v131.mBitsPerChannel = *(void *)(terminal + 32);
      memset(__p, 0, 36);
      *(_OWORD *)&__p[40] = 0u;
      long long v154 = 0u;
      int v155 = 0;
      long long v156 = 0u;
      long long v157 = 0u;
      long long v158 = 0u;
      long long v159 = 0u;
      int v160 = 0;
      uint64_t v161 = 64;
      uint64_t v162 = 0;
      std::string v163 = 0;
      int v164 = 1;
      memset(v165, 0, 36);
      if (*(char *)(v15 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v166, *(const std::string::value_type **)v15, *(void *)(v15 + 8));
        *(void *)&v166[24] = *v45;
        *(_DWORD *)&v166[32] = *(_DWORD *)(v15 + 32);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      else
      {
        *(_OWORD *)uint64_t v166 = *(_OWORD *)v15;
        *(void *)&v166[16] = *(void *)(v15 + 16);
        *(void *)&v166[24] = *v45;
        *(_DWORD *)&v166[32] = *(_DWORD *)(v15 + 32);
      }
      *(_OWORD *)signed long long __p = *(_OWORD *)v166;
      *(void *)&__p[16] = *(void *)&v166[16];
      *(void *)&__p[24] = *(void *)&v166[24];
      *(_DWORD *)&unsigned char __p[32] = *(_DWORD *)&v166[32];
      uint8x8_t v10 = a2;
      if (*(char *)(v15 + 63) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v166, *(const std::string::value_type **)(v15 + 40), *(void *)(v15 + 48));
      }
      else
      {
        *(_OWORD *)uint64_t v166 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        *(void *)&v166[16] = *((void *)&v16->__r_.__value_.__l + 2);
      }
      *(void *)&v166[24] = *v18;
      *(_DWORD *)&v166[32] = *(_DWORD *)(v15 + 72);
      if (SBYTE7(v154) < 0) {
        operator delete(*(void **)&__p[40]);
      }
      *(_OWORD *)&__p[40] = *(_OWORD *)v166;
      long long v154 = *(_OWORD *)&v166[16];
      int v155 = *(_DWORD *)&v166[32];
      if (SBYTE7(v157) < 0) {
        operator delete((void *)v156);
      }
      long long v156 = *(_OWORD *)&v130.__r_.__value_.__l.__data_;
      *(void *)&long long v157 = *((void *)&v130.__r_.__value_.__l + 2);
      *((unsigned char *)&v130.__r_.__value_.__s + 23) = 0;
      v130.__r_.__value_.__s.__data_[0] = 0;
      if ((long long *)((char *)&v157 + 8) != (long long *)(v15 + 80)) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v157 + 8, *(char **)(v15 + 80), *(void *)(v15 + 88), (uint64_t)(*(void *)(v15 + 88) - *(void *)(v15 + 80)) >> 2);
      }
      if (&v165[3] != (_DWORD *)(v15 + 104)) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v165[3], *(char **)(v15 + 104), *(void *)(v15 + 112), (uint64_t)(*(void *)(v15 + 112) - *(void *)(v15 + 104)) >> 2);
      }
      uint64_t v52 = *a3;
      HIDWORD(v161) = *(_DWORD *)(*a3 + 48);
      int v164 = *(_DWORD *)(terminal + 88);
      v165[1] = *(_DWORD *)(terminal + 92);
      v165[2] = *(_DWORD *)(v52 + 160);
      if (v49) {
        atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v53 = v163;
      uint64_t v162 = v48;
      std::string v163 = v49;
      if (v53) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
      }
      v165[0] = v103;
      if (v104 != 1 && *(_DWORD *)(terminal + 100) != 1)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v53);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v166, "com.apple.coreaudio", "AMCP");
        int v88 = **(NSObject ***)v166;
        if (*(void *)&v166[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v166[8]);
        }
        if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
        {
          uint64_t v89 = pthread_self();
          mach_port_t v90 = pthread_mach_thread_np(v89);
          uint64_t v91 = *v18;
          uint64_t v92 = *a3;
          if (*(char *)(*a3 + 47) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__s1, *(const std::string::value_type **)(v92 + 24), *(void *)(v92 + 32));
          }
          else
          {
            *(_OWORD *)__s1 = *(_OWORD *)(v92 + 24);
            *(void *)&__s1[16] = *(void *)(v92 + 40);
          }
          char v93 = __s1;
          if (__s1[23] < 0) {
            char v93 = *(unsigned char **)__s1;
          }
          *(_DWORD *)uint64_t v166 = 67110402;
          *(_DWORD *)&v166[4] = v90;
          *(_WORD *)&v166[8] = 2080;
          *(void *)&v166[10] = "Graph_Wire.cpp";
          *(_WORD *)&v166[18] = 1024;
          *(_DWORD *)&v166[20] = 90;
          *(_WORD *)&v166[24] = 2080;
          *(void *)&v166[26] = "not (connection_works)";
          *(_WORD *)&v166[34] = 2048;
          *(void *)&v166[36] = v91;
          *(_WORD *)&v166[44] = 2080;
          *(void *)&v166[46] = v93;
          _os_log_error_impl(&dword_1BAA78000, v88, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to connect two terminals with owned buffers: terminal %zu of node '%s'", v166, 0x36u);
          if ((__s1[23] & 0x80000000) != 0) {
            operator delete(*(void **)__s1);
          }
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v149);
        __cxa_allocate_exception(0x40uLL);
        uint64_t v94 = *v18;
        unsigned int v95 = (std::string *)*a3;
        if (*(char *)(*a3 + 47) < 0) {
          std::string::__init_copy_ctor_external(&v142, v95[1].__r_.__value_.__l.__data_, v95[1].__r_.__value_.__l.__size_);
        }
        else {
          std::string v142 = v95[1];
        }
        uint64_t v96 = &v142;
        if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v96 = (std::string *)v142.__r_.__value_.__r.__words[0];
        }
        caulk::make_string((caulk *)"Attempt to connect two terminals with owned buffers: terminal %zu of node '%s'", (uint64_t)&v143, v94, v96);
        std::logic_error::logic_error(&v144, &v143);
        v144.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error((std::logic_error *)__s1, &v144);
        uint64_t v146 = 0;
        *(void *)&__s1[24] = 0;
        uint64_t v147 = 0;
        int v148 = -1;
        *(void *)__s1 = &unk_1F1489CC8;
        *(void *)&__s1[16] = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v166, (uint64_t)__s1);
        *(void *)&v166[32] = "Graph_Wire::Connection AMCP::Graph::Graph_Wire::create_connection(const std::shared_ptr<N"
                               "ode> &, Thread_Group_ID, CA::StreamDescription &, Terminal_Buffer_Ownership, Connection::"
                               "Terminal_Read_Policy, const std::shared_ptr<Wire_Volume_Connection> &) const";
        *(void *)&v166[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Wire.cpp";
        *(_DWORD *)&v166[48] = 90;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v138);
        *(_OWORD *)&v140.__r_.__value_.__r.__words[1] = v138;
        v140.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
        uint64_t v141 = v139;
        long long v138 = 0uLL;
        uint64_t v139 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
      if ((buf[63] & 0x80000000) != 0) {
        operator delete(*(void **)&buf[40]);
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      long long v54 = *(_OWORD *)(nth_terminal + 16);
      *(_OWORD *)__s1 = *(_OWORD *)nth_terminal;
      *(_OWORD *)&__s1[16] = v54;
      uint64_t v146 = *(void *)(nth_terminal + 32);
      long long v159 = 0uLL;
      double v55 = *(double *)__s1;
      double mSampleRate = v131.mSampleRate;
      if (*(double *)__s1 != v131.mSampleRate
        || *(_DWORD *)&__s1[8] != v131.mFormatID
        || *(void *)&__s1[16] != *(void *)&v131.mBytesPerPacket
        || *(_DWORD *)&__s1[28] != v131.mChannelsPerFrame
        || v146 != v131.mBitsPerChannel
        || (uint64_t v53 = (std::__shared_weak_count *)CA::Implementation::EquivalentFormatFlags((CA::Implementation *)__s1, &v131, 0, 0), v57 = 0, (v53 & 1) == 0))
      {
        *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)__s1;
        *(_OWORD *)&buf[16] = *(_OWORD *)&__s1[16];
        *(void *)&buf[32] = v146;
        *(AudioStreamBasicDescription *)uint64_t v166 = v131;
        if (*(double *)__s1 == v131.mSampleRate
          && *(_DWORD *)&__s1[8] == v131.mFormatID
          && *(void *)&buf[16] == *(void *)&v166[16]
          && *(void *)&buf[28] == *(void *)&v166[28])
        {
          uint64_t v53 = (std::__shared_weak_count *)CA::Implementation::EquivalentFormatFlags((CA::Implementation *)buf, (const AudioStreamBasicDescription *)v166, 0, 0);
          *(void *)AudioObjectPropertyAddress buf = 0;
          *(void *)uint64_t v166 = 0;
          if (v53) {
            goto LABEL_138;
          }
        }
        else
        {
          *(void *)AudioObjectPropertyAddress buf = 0;
          *(void *)uint64_t v166 = 0;
          if (*(_DWORD *)&__s1[8] != v131.mFormatID)
          {
LABEL_138:
            int v57 = 1;
            goto LABEL_139;
          }
        }
        if (*(void *)&buf[16] == *(void *)&v166[16] && *(void *)&buf[28] == *(void *)&v166[28])
        {
          uint64_t v53 = (std::__shared_weak_count *)CA::Implementation::EquivalentFormatFlags((CA::Implementation *)buf, (const AudioStreamBasicDescription *)v166, 0, 0);
          int v57 = v53 ^ 1;
          goto LABEL_139;
        }
        goto LABEL_138;
      }
LABEL_139:
      long long v58 = *(_DWORD **)(v15 + 80);
      int v59 = *(_DWORD **)(v15 + 88);
      uint64_t v60 = *(char **)(v15 + 104);
      uint64_t v61 = *(void *)(v15 + 112);
      if (v55 != mSampleRate)
      {
        if (*(_DWORD *)(v15 + 132) == 1) {
          goto LABEL_215;
        }
        LODWORD(v159) = 1;
      }
      if (v57)
      {
        if (!*(_DWORD *)(v15 + 136)) {
          goto LABEL_215;
        }
        DWORD2(v159) = 1;
      }
      if (*(_DWORD *)&__s1[28] != v131.mChannelsPerFrame || v58 != v59)
      {
        if (v131.mChannelsPerFrame < (unint64_t)(v59 - v58))
        {
LABEL_215:
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v53);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          unint64_t v66 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
          {
            long long v67 = pthread_self();
            mach_port_t v68 = pthread_mach_thread_np(v67);
            uint64_t v69 = *a2;
            if (*(char *)(*a2 + 47) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v166, *(const std::string::value_type **)(v69 + 24), *(void *)(v69 + 32));
            }
            else
            {
              *(_OWORD *)uint64_t v166 = *(_OWORD *)(v69 + 24);
              *(void *)&v166[16] = *(void *)(v69 + 40);
            }
            if (v166[23] >= 0) {
              long long v70 = v166;
            }
            else {
              long long v70 = *(unsigned char **)v166;
            }
            uint64_t v71 = *a3;
            if (*(char *)(*a3 + 47) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__s1, *(const std::string::value_type **)(v71 + 24), *(void *)(v71 + 32));
            }
            else
            {
              *(_OWORD *)__s1 = *(_OWORD *)(v71 + 24);
              *(void *)&__s1[16] = *(void *)(v71 + 40);
            }
            std::string v72 = __s1;
            if (__s1[23] < 0) {
              std::string v72 = *(unsigned char **)__s1;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 67110402;
            *(_DWORD *)&uint8_t buf[4] = v68;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "Graph.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 268;
            *(_WORD *)&unsigned char buf[24] = 2080;
            *(void *)&buf[26] = "not (did_connect)";
            *(_WORD *)&buf[34] = 2080;
            *(void *)&buf[36] = v70;
            *(_WORD *)&buf[44] = 2080;
            *(void *)&buf[46] = v72;
            _os_log_error_impl(&dword_1BAA78000, v66, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Connection failed: %s-->%s", buf, 0x36u);
            if ((__s1[23] & 0x80000000) != 0) {
              operator delete(*(void **)__s1);
            }
            uint8x8_t v10 = a2;
            if ((v166[23] & 0x80000000) != 0) {
              operator delete(*(void **)v166);
            }
          }
          __cxa_allocate_exception(0x40uLL);
          std::logic_error v73 = (std::string *)*v10;
          if (*(char *)(*v10 + 47) < 0) {
            std::string::__init_copy_ctor_external(&v143, v73[1].__r_.__value_.__l.__data_, v73[1].__r_.__value_.__l.__size_);
          }
          else {
            std::string v143 = v73[1];
          }
          if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v74 = &v143;
          }
          else {
            char v74 = (std::string *)v143.__r_.__value_.__r.__words[0];
          }
          uint8x8_t v75 = (std::string *)*a3;
          if (*(char *)(*a3 + 47) < 0) {
            std::string::__init_copy_ctor_external(&v142, v75[1].__r_.__value_.__l.__data_, v75[1].__r_.__value_.__l.__size_);
          }
          else {
            std::string v142 = v75[1];
          }
          char v76 = &v142;
          if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            char v76 = (std::string *)v142.__r_.__value_.__r.__words[0];
          }
          caulk::make_string((caulk *)"Connection failed: %s-->%s", (uint64_t)&v140, v74, v76);
          std::logic_error::logic_error(&v144, &v140);
          v144.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)v166, &v144);
          memset(&v166[24], 0, 24);
          *(_DWORD *)&v166[48] = -1;
          *(void *)uint64_t v166 = &unk_1F1489CC8;
          *(void *)&v166[16] = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v166);
          *(void *)&buf[32] = "void AMCP::Graph::Graph::connect_nodes(const std::shared_ptr<Node> &, const std::shared_"
                                "ptr<Node> &, Thread_Group_ID, Graph::Resource_Counts &)";
          *(void *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
          *(_DWORD *)&buf[48] = 268;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v138);
          *(_OWORD *)&__s1[8] = v138;
          *(void *)__s1 = &unk_1F148AA90;
          *(void *)&__s1[24] = v139;
          long long v138 = 0uLL;
          uint64_t v139 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        while (v58 != v59)
        {
          if (*v58 == -1) {
            int v63 = 3;
          }
          else {
            int v63 = *v58 >= (signed int)v131.mChannelsPerFrame;
          }
          if (v63 != 3 && v63 != 0) {
            goto LABEL_215;
          }
          ++v58;
        }
      }
      if (v60 != (char *)v61 && &v165[3] != (_DWORD *)(v15 + 104)) {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v165[3], v60, v61, (v61 - (uint64_t)v60) >> 2);
      }
      mach_port_t v62 = (std::string *)(v15 + 192);
      if (*(unsigned char *)(v15 + 408))
      {
        AMCP::Graph::Graph_Wire::Connection::operator=((uint64_t)v62, (uint64_t)__p);
      }
      else
      {
        AMCP::Graph::Graph_Wire::Connection::Connection(v62, (const AMCP::Graph::Graph_Wire::Connection *)__p);
        *(unsigned char *)(v15 + 408) = 1;
      }
      AMCP::Graph::Graph_Wire::Connection::Connection(&v110, (const AMCP::Graph::Graph_Wire::Connection *)__p);
      if (v117) {
        ++*a5;
      }
      if (v119) {
        ++a5[2];
      }
      if (v115 != v116) {
        ++a5[3];
      }
      if (v118) {
        ++a5[4];
      }
      if (v120) {
        ++a5[5];
      }
      char v65 = v122;
      if (v122 != v123) {
        ++a5[6];
      }
      if (v65)
      {
        uint64_t v123 = v65;
        operator delete(v65);
      }
      if (v121) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v121);
      }
      if (v115)
      {
        uint64_t v116 = v115;
        operator delete(v115);
      }
      if (v114 < 0) {
        operator delete(v113);
      }
      if (v112 < 0) {
        operator delete(v111);
      }
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v110.__r_.__value_.__l.__data_);
      }
      if (*(void *)&v165[3])
      {
        *(void *)&v165[5] = *(void *)&v165[3];
        operator delete(*(void **)&v165[3]);
      }
      if (v163) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v163);
      }
      unint64_t v13 = (unsigned __int8 *)*((void *)&v157 + 1);
      if (*((void *)&v157 + 1))
      {
        *(void *)&long long v158 = *((void *)&v157 + 1);
        operator delete(*((void **)&v157 + 1));
      }
      if (SBYTE7(v157) < 0) {
        operator delete((void *)v156);
      }
      if (SBYTE7(v154) < 0) {
        operator delete(*(void **)&__p[40]);
      }
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        if ((v22 & 0x80) == 0) {
          goto LABEL_201;
        }
        goto LABEL_200;
      }
LABEL_199:
      if (v22 < 0) {
        goto LABEL_200;
      }
LABEL_201:
      v14 += 8;
      if (v14 == v106)
      {
        unint64_t v14 = (char *)v136;
        goto LABEL_211;
      }
    }
  }
}

void sub_1BADA78D4(_Unwind_Exception *a1)
{
  unint64_t v3 = (void *)STACK[0x4B0];
  if (STACK[0x4B0])
  {
    STACK[0x4B8] = (unint64_t)v3;
    operator delete(v3);
  }
  if (STACK[0x498]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x498]);
  }
  CFTypeRef v4 = (void *)STACK[0x458];
  if (STACK[0x458])
  {
    STACK[0x460] = (unint64_t)v4;
    operator delete(v4);
  }
  if (SLOBYTE(STACK[0x457]) < 0) {
    operator delete((void *)STACK[0x440]);
  }
  if (SLOBYTE(STACK[0x42F]) < 0) {
    operator delete((void *)STACK[0x418]);
  }
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete((void *)STACK[0x3F0]);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  AMCP::Wire_Identifier::~Wire_Identifier((void **)&STACK[0x3A0]);
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  if (STACK[0x2B8]) {
    operator delete((void *)STACK[0x2B8]);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::Graph::Graph::connect_nodes(std::shared_ptr<AMCP::Graph::Node> const&,std::shared_ptr<AMCP::Graph::Node> const&,std::string,AMCP::Graph::Graph::Resource_Counts &)::$_0,std::allocator<AMCP::Graph::Graph::connect_nodes(std::shared_ptr<AMCP::Graph::Node> const&,std::shared_ptr<AMCP::Graph::Node> const&,std::string,AMCP::Graph::Graph::Resource_Counts &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Graph::Graph::connect_nodes(std::shared_ptr<AMCP::Graph::Node> const&,std::shared_ptr<AMCP::Graph::Node> const&,std::string,AMCP::Graph::Graph::Resource_Counts &)::$_0,std::allocator<AMCP::Graph::Graph::connect_nodes(std::shared_ptr<AMCP::Graph::Node> const&,std::shared_ptr<AMCP::Graph::Node> const&,std::string,AMCP::Graph::Graph::Resource_Counts &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP5Graph5Graph13connect_nodesERKNSt3__110shared_ptrINS0_4NodeEEES7_NS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERNS1_15Resource_CountsEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

AMCP::Log::Scope_Registry *std::__function::__func<AMCP::Graph::Graph::connect_nodes(std::shared_ptr<AMCP::Graph::Node> const&,std::shared_ptr<AMCP::Graph::Node> const&,std::string,AMCP::Graph::Graph::Resource_Counts &)::$_0,std::allocator<AMCP::Graph::Graph::connect_nodes(std::shared_ptr<AMCP::Graph::Node> const&,std::shared_ptr<AMCP::Graph::Node> const&,std::string,AMCP::Graph::Graph::Resource_Counts &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::operator()(AMCP::Log::Scope_Registry *result, uint64_t a2, uint64_t a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  CFTypeRef v4 = (unsigned __int8 **)*((void *)result + 1);
  size_t v5 = *(unsigned __int8 *)(a3 + 103);
  size_t v6 = *(void *)(a3 + 88);
  if ((v5 & 0x80u) == 0) {
    size_t v7 = v5;
  }
  else {
    size_t v7 = v6;
  }
  uint64_t v8 = (unsigned __int8 *)*((unsigned __int8 *)v4 + 23);
  int v9 = (char)v8;
  if ((char)v8 < 0) {
    uint64_t v8 = v4[1];
  }
  if ((unsigned __int8 *)v7 != v8) {
    goto LABEL_17;
  }
  uint8x8_t v10 = (const void **)(a3 + 80);
  if (v9 >= 0) {
    uint64_t v11 = (unsigned __int8 *)*((void *)result + 1);
  }
  else {
    uint64_t v11 = *v4;
  }
  if ((v5 & 0x80) != 0)
  {
    uint64_t result = (AMCP::Log::Scope_Registry *)memcmp(*v10, v11, v6);
    if (result) {
      goto LABEL_17;
    }
  }
  else if (v5)
  {
    while (*(unsigned __int8 *)v10 == *v11)
    {
      uint8x8_t v10 = (const void **)((char *)v10 + 1);
      ++v11;
      if (!--v5) {
        return result;
      }
    }
LABEL_17:
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    std::string::size_type v12 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      unint64_t v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)int v30 = 2080;
      *(void *)&v30[2] = "Graph.cpp";
      __int16 v31 = 1024;
      int v32 = 236;
      __int16 v33 = 2080;
      *(void *)BOOL v34 = "connection.m_thread_group != group";
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    std::logic_error::logic_error(&v21, "");
    v21.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v22, &v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v23 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    *(void *)&v34[6] = "auto AMCP::Graph::Graph::connect_nodes(const std::shared_ptr<Node> &, const std::shared_ptr<Nod"
                         "e> &, Thread_Group_ID, Graph::Resource_Counts &)::(anonymous class)::operator()(Direction, cons"
                         "t Graph_Wire::Connection &) const";
    BOOL v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
    int v36 = 236;
    std::vector<void *>::vector(&v16);
    int v15 = backtrace((void **)v16, (*((void *)&v16 + 1) - (void)v16) >> 3);
    std::vector<void *>::resize((char **)&v16, v15);
    uint64_t v18 = &unk_1F148AA90;
    long long v19 = v16;
    uint64_t v20 = v17;
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Graph::Graph::connect_nodes(std::shared_ptr<AMCP::Graph::Node> const&,std::shared_ptr<AMCP::Graph::Node> const&,std::string,AMCP::Graph::Graph::Resource_Counts &)::$_0,std::allocator<AMCP::Graph::Graph::connect_nodes(std::shared_ptr<AMCP::Graph::Node> const&,std::shared_ptr<AMCP::Graph::Node> const&,std::string,AMCP::Graph::Graph::Resource_Counts &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1472438;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Graph::Graph::connect_nodes(std::shared_ptr<AMCP::Graph::Node> const&,std::shared_ptr<AMCP::Graph::Node> const&,std::string,AMCP::Graph::Graph::Resource_Counts &)::$_0,std::allocator<AMCP::Graph::Graph::connect_nodes(std::shared_ptr<AMCP::Graph::Node> const&,std::shared_ptr<AMCP::Graph::Node> const&,std::string,AMCP::Graph::Graph::Resource_Counts &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F1472438;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Graph::Graph::connect_nodes(std::shared_ptr<AMCP::Graph::Node> const&,std::shared_ptr<AMCP::Graph::Node> const&,std::string,AMCP::Graph::Graph::Resource_Counts &)::$_0,std::allocator<AMCP::Graph::Graph::connect_nodes(std::shared_ptr<AMCP::Graph::Node> const&,std::shared_ptr<AMCP::Graph::Node> const&,std::string,AMCP::Graph::Graph::Resource_Counts &)::$_0>,void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::~__func()
{
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<AMCP::Wire_Identifier>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<AMCP::Wire_Identifier>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<AMCP::Wire_Identifier>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<AMCP::Wire_Identifier>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  CFTypeRef v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

std::string *std::vector<AMCP::Wire_Identifier>::__insert_with_size[abi:ne180100]<std::__wrap_iter<AMCP::Wire_Identifier*>,std::__wrap_iter<AMCP::Wire_Identifier*>>(std::string *result, uint64_t a2, std::string *a3, uint64_t a4, uint64_t a5)
{
  if (a5 >= 1)
  {
    size_t v6 = a3;
    size_t v7 = (std::string::__raw *)result;
    std::string::size_type v8 = result->__r_.__value_.__r.__words[0];
    uint64_t v9 = (int64_t)(a2 - result->__r_.__value_.__r.__words[0]) / 80;
    uint64_t v10 = result->__r_.__value_.__r.__words[0] + 80 * v9;
    uint64_t v11 = &result->__r_.__value_.__s.__data_[16];
    std::string::size_type v12 = result->__r_.__value_.__r.__words[2];
    unint64_t size = result->__r_.__value_.__l.__size_;
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - size) >> 4)) >= a5)
    {
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(size - v10) >> 4)) >= a5)
      {
        uint64_t v18 = (std::string *)((char *)a3 + 80 * a5);
        std::string::size_type v19 = result->__r_.__value_.__l.__size_;
      }
      else
      {
        uint64_t v18 = (std::string *)((char *)a3 + 16 * ((uint64_t)(size - v10) >> 4));
        uint64_t result = (std::string *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Wire_Identifier>,AMCP::Wire_Identifier*,AMCP::Wire_Identifier*,AMCP::Wire_Identifier*>((uint64_t)v18, a4, size);
        std::string::size_type v19 = (std::string::size_type)result;
        v7->__words[1] = (std::string::size_type)result;
        if ((uint64_t)(size - v10) < 1) {
          return result;
        }
      }
      uint64_t v20 = v10 + 80 * a5;
      unint64_t v21 = v19 - 80 * a5;
      std::string::size_type v22 = v19;
      if (v21 < size)
      {
        std::string::size_type v22 = v19;
        do
        {
          long long v23 = *(_OWORD *)v21;
          *(void *)(v22 + 16) = *(void *)(v21 + 16);
          *(_OWORD *)std::string::size_type v22 = v23;
          *(void *)(v21 + 8) = 0;
          *(void *)(v21 + 16) = 0;
          *(void *)unint64_t v21 = 0;
          uint64_t v24 = *(void *)(v21 + 24);
          *(_DWORD *)(v22 + 32) = *(_DWORD *)(v21 + 32);
          *(void *)(v22 + 24) = v24;
          long long v25 = *(_OWORD *)(v21 + 40);
          *(void *)(v22 + 56) = *(void *)(v21 + 56);
          *(_OWORD *)(v22 + 40) = v25;
          *(void *)(v21 + 48) = 0;
          *(void *)(v21 + 56) = 0;
          *(void *)(v21 + 40) = 0;
          uint64_t v26 = *(void *)(v21 + 64);
          *(_DWORD *)(v22 + 72) = *(_DWORD *)(v21 + 72);
          *(void *)(v22 + 64) = v26;
          v22 += 80;
          v21 += 80;
        }
        while (v21 < size);
      }
      v7->__words[1] = v22;
      if (v19 != v20)
      {
        uint64_t v27 = 0;
        unint64_t v28 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v20) >> 4);
        uint64_t v29 = -80 * v28;
        std::string::size_type v30 = v8 + 80 * v28 + 80 * v9;
        do
        {
          std::string::size_type v31 = v19 + v27;
          int v32 = (void **)(v19 + v27 - 80);
          if (*(char *)(v19 + v27 - 57) < 0) {
            operator delete(*v32);
          }
          __int16 v33 = (long long *)(v30 + v27 - 80);
          long long v34 = *v33;
          *(void *)(v19 + v27 - 64) = *(void *)(v30 + v27 - 64);
          *(_OWORD *)int v32 = v34;
          *(unsigned char *)(v30 + v27 - 57) = 0;
          *(unsigned char *)__int16 v33 = 0;
          LODWORD(v33) = *(_DWORD *)(v30 + v27 - 48);
          *(void *)(v31 - 56) = *(void *)(v30 + v27 - 56);
          *(_DWORD *)(v31 - 48) = v33;
          BOOL v35 = (void **)(v31 - 40);
          if (*(char *)(v31 - 17) < 0) {
            operator delete(*v35);
          }
          uint64_t v36 = v30 + v27;
          long long v37 = *(_OWORD *)(v30 + v27 - 40);
          *(void *)(v31 - 24) = *(void *)(v30 + v27 - 24);
          *(_OWORD *)BOOL v35 = v37;
          *(unsigned char *)(v36 - 17) = 0;
          *(unsigned char *)(v36 - 40) = 0;
          std::string::size_type v38 = v19 + v27;
          uint64_t v39 = *(void *)(v30 + v27 - 16);
          *(_DWORD *)(v38 - 8) = *(_DWORD *)(v30 + v27 - 8);
          *(void *)(v38 - 16) = v39;
          v27 -= 80;
        }
        while (v29 != v27);
      }
      return std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Wire_Identifier *,AMCP::Wire_Identifier *,AMCP::Wire_Identifier *>(v6, v18, (std::string *)v10);
    }
    else
    {
      unint64_t v14 = a5 - 0x3333333333333333 * ((uint64_t)(size - v8) >> 4);
      if (v14 > 0x333333333333333) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - v8) >> 4);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x199999999999999) {
        unint64_t v16 = 0x333333333333333;
      }
      else {
        unint64_t v16 = v14;
      }
      mach_port_t v62 = v11;
      if (v16) {
        unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Identifier>>(v16);
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v40 = (std::string *)(v16 + 80 * v9);
      unint64_t v58 = v16;
      int v59 = v40;
      uint64_t v60 = (uint64_t)v40;
      unint64_t v61 = v16 + 80 * v17;
      int v41 = (char *)v40 + 80 * a5;
      uint64_t v42 = 80 * a5;
      do
      {
        std::construct_at[abi:ne180100]<AMCP::Wire_Identifier,AMCP::Wire_Identifier&,AMCP::Wire_Identifier*>(v40, (long long *)v6);
        uint64_t v40 = (std::string *)((char *)v40 + 80);
        size_t v6 = (std::string *)((char *)v6 + 80);
        v42 -= 80;
      }
      while (v42);
      char v43 = v59;
      std::string::size_type v44 = v7->__words[0];
      if (v7->__words[0] == v10)
      {
        uint64_t v46 = v59;
      }
      else
      {
        uint64_t v45 = v10;
        do
        {
          uint64_t v46 = (std::string *)((char *)v43 - 80);
          long long v47 = *(_OWORD *)(v45 - 80);
          v43[-3].__r_.__value_.__l.__size_ = *(void *)(v45 - 64);
          *(_OWORD *)&v43[-4].__r_.__value_.__r.__words[2] = v47;
          *(void *)(v45 - 72) = 0;
          *(void *)(v45 - 64) = 0;
          *(void *)(v45 - 80) = 0;
          std::string::size_type v48 = *(void *)(v45 - 56);
          LODWORD(v43[-2].__r_.__value_.__l.__data_) = *(_DWORD *)(v45 - 48);
          v43[-3].__r_.__value_.__r.__words[2] = v48;
          long long v49 = *(_OWORD *)(v45 - 40);
          v43[-1].__r_.__value_.__r.__words[0] = *(void *)(v45 - 24);
          *(_OWORD *)&v43[-2].__r_.__value_.__r.__words[1] = v49;
          *(void *)(v45 - 32) = 0;
          *(void *)(v45 - 24) = 0;
          *(void *)(v45 - 40) = 0;
          std::string::size_type v50 = *(void *)(v45 - 16);
          LODWORD(v43[-1].__r_.__value_.__r.__words[2]) = *(_DWORD *)(v45 - 8);
          v43[-1].__r_.__value_.__l.__size_ = v50;
          v45 -= 80;
          char v43 = (std::string *)((char *)v43 - 80);
        }
        while (v45 != v44);
      }
      std::string::size_type v51 = v7->__words[1];
      if (v51 != v10)
      {
        do
        {
          long long v52 = *(_OWORD *)v10;
          *((void *)v41 + 2) = *(void *)(v10 + 16);
          *(_OWORD *)int v41 = v52;
          *(void *)(v10 + 8) = 0;
          *(void *)(v10 + 16) = 0;
          *(void *)uint64_t v10 = 0;
          uint64_t v53 = *(void *)(v10 + 24);
          *((_DWORD *)v41 + 8) = *(_DWORD *)(v10 + 32);
          *((void *)v41 + 3) = v53;
          long long v54 = *(_OWORD *)(v10 + 40);
          *((void *)v41 + 7) = *(void *)(v10 + 56);
          *(_OWORD *)(v41 + 40) = v54;
          *(void *)(v10 + 48) = 0;
          *(void *)(v10 + 56) = 0;
          *(void *)(v10 + 40) = 0;
          uint64_t v55 = *(void *)(v10 + 64);
          *((_DWORD *)v41 + 18) = *(_DWORD *)(v10 + 72);
          *((void *)v41 + 8) = v55;
          v41 += 80;
          v10 += 80;
        }
        while (v10 != v51);
        uint64_t v10 = v7->__words[1];
      }
      __int16 v56 = (std::string *)v7->__words[0];
      v7->__words[0] = (std::string::size_type)v46;
      v7->__words[1] = (std::string::size_type)v41;
      unint64_t v57 = v7->__words[2];
      v7->__words[2] = v61;
      uint64_t v60 = v10;
      unint64_t v61 = v57;
      unint64_t v58 = (unint64_t)v56;
      int v59 = v56;
      return (std::string *)std::__split_buffer<AMCP::Wire_Identifier>::~__split_buffer((uint64_t)&v58);
    }
  }
  return result;
}

void sub_1BADA8824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Wire_Identifier>,AMCP::Wire_Identifier*,AMCP::Wire_Identifier*,AMCP::Wire_Identifier*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      std::construct_at[abi:ne180100]<AMCP::Wire_Identifier,AMCP::Wire_Identifier&,AMCP::Wire_Identifier*>((std::string *)(a3 + v6), (long long *)(a1 + v6));
      v6 += 80;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Wire_Identifier *,AMCP::Wire_Identifier *,AMCP::Wire_Identifier *>(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    size_t v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      int v6 = v5[1].__r_.__value_.__r.__words[1];
      this[1].__r_.__value_.__r.__words[0] = v5[1].__r_.__value_.__r.__words[0];
      LODWORD(this[1].__r_.__value_.__r.__words[1]) = v6;
      std::string::operator=((std::string *)((char *)this + 40), (std::string *)((char *)v5 + 40));
      int data = (int)v5[3].__r_.__value_.__l.__data_;
      this[2].__r_.__value_.__r.__words[2] = v5[2].__r_.__value_.__r.__words[2];
      LODWORD(this[3].__r_.__value_.__l.__data_) = data;
      this = (std::string *)((char *)this + 80);
      size_t v5 = (std::string *)((char *)v5 + 80);
    }
    while (v5 != a2);
  }
  return this;
}

std::string *std::construct_at[abi:ne180100]<AMCP::Wire_Identifier,AMCP::Wire_Identifier&,AMCP::Wire_Identifier*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::string::size_type v5 = *((void *)a2 + 3);
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 8);
  this[1].__r_.__value_.__r.__words[0] = v5;
  int v6 = (std::string *)((char *)this + 40);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 40);
    this[2].__r_.__value_.__l.__size_ = *((void *)a2 + 7);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  std::string::size_type v8 = *((void *)a2 + 8);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  this[2].__r_.__value_.__r.__words[2] = v8;
  return this;
}

void sub_1BADA89FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<AMCP::Wire_Identifier>>,0>(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<AMCP::Wire_Identifier>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<AMCP::Wire_Identifier>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<AMCP::Wire_Identifier>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void AMCP::Graph::Graph::get_thread_group_id_from_upstream(std::string *a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  std::string::size_type v8 = a2 + 12;
  uint64_t v9 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>(a2 + 12, (unsigned __int8 **)a3);
  if (v9 && *((unsigned char *)v9 + 504))
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v99, "com.apple.coreaudio", "AMCP");
    mach_port_t v62 = *(NSObject **)v99.__r_.__value_.__l.__data_;
    if (v99.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v99.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      int v63 = pthread_self();
      mach_port_t v64 = pthread_mach_thread_np(v63);
      LODWORD(v99.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v99.__r_.__value_.__r.__words[0]) = v64;
      LOWORD(v99.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v99.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
      WORD1(v99.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v99.__r_.__value_.__r.__words[2]) = 409;
      LOWORD(v100) = 2080;
      *(void *)((char *)&v100 + 2) = "not (not m_wire_index.is_connected(current_wire))";
      _os_log_error_impl(&dword_1BAA78000, v62, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v99, 0x22u);
    }
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&__p);
    std::logic_error::logic_error((std::logic_error *)&v92, &__p);
    v92.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error((std::logic_error *)buf, (const std::logic_error *)&v92);
    long long v96 = 0uLL;
    uint64_t v97 = 0;
    int v98 = -1;
    *(void *)AudioObjectPropertyAddress buf = &unk_1F1489CC8;
    v95.i64[1] = (uint64_t)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v99, (uint64_t)buf);
    *((void *)&v100 + 1) = "std::optional<Thread_Group_ID> AMCP::Graph::Graph::get_thread_group_id_from_upstream(const "
                             "Wire_Identifier &, std::vector<std::shared_ptr<Node>> &) const";
    v101.__r_.__value_.__r.__words[0] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AM"
                                                                "CP/IO/Graph/Graph.cpp";
    LODWORD(v101.__r_.__value_.__r.__words[1]) = 409;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v73);
    long long v77 = &unk_1F148AA90;
    std::logic_error v78 = *(std::logic_error *)v73;
    uint64_t v79 = *(void *)&v73[16];
    memset(v73, 0, sizeof(v73));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2 + 22, (unsigned __int8 *)a3);
  if (!v10)
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  long long v11 = *(_OWORD *)(v10 + 40);
  uint64_t v12 = (std::__shared_weak_count *)*((void *)v10 + 6);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *a4;
  uint64_t v13 = (_OWORD *)a4[1];
  if ((_OWORD *)*a4 == v13)
  {
    unint64_t v15 = (void *)*a4;
  }
  else
  {
    unint64_t v15 = (void *)*a4;
    while (*v15 != (void)v11)
    {
      v15 += 2;
      if (v15 == (void *)v13)
      {
        unint64_t v15 = (void *)a4[1];
        break;
      }
    }
  }
  if (v15 != (void *)v13)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v99, "com.apple.coreaudio", "AMCP");
    char v65 = *(NSObject **)v99.__r_.__value_.__l.__data_;
    if (v99.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v99.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
    {
      unint64_t v66 = pthread_self();
      mach_port_t v67 = pthread_mach_thread_np(v66);
      LODWORD(v99.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v99.__r_.__value_.__r.__words[0]) = v67;
      LOWORD(v99.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v99.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
      WORD1(v99.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v99.__r_.__value_.__r.__words[2]) = 417;
      LOWORD(v100) = 2080;
      *(void *)((char *)&v100 + 2) = "not (std::find(path.begin(), path.end(), source_node) == path.end())";
      _os_log_error_impl(&dword_1BAA78000, v65, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Graph contains a cycle.", (uint8_t *)&v99, 0x22u);
    }
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Graph contains a cycle.", (uint64_t)&__p);
    std::logic_error::logic_error((std::logic_error *)&v92, &__p);
    v92.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error((std::logic_error *)buf, (const std::logic_error *)&v92);
    long long v96 = 0uLL;
    uint64_t v97 = 0;
    int v98 = -1;
    *(void *)AudioObjectPropertyAddress buf = &unk_1F1489CC8;
    v95.i64[1] = (uint64_t)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v99, (uint64_t)buf);
    *((void *)&v100 + 1) = "std::optional<Thread_Group_ID> AMCP::Graph::Graph::get_thread_group_id_from_upstream(const "
                             "Wire_Identifier &, std::vector<std::shared_ptr<Node>> &) const";
    v101.__r_.__value_.__r.__words[0] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AM"
                                                                "CP/IO/Graph/Graph.cpp";
    LODWORD(v101.__r_.__value_.__r.__words[1]) = 417;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v73);
    long long v77 = &unk_1F148AA90;
    std::logic_error v78 = *(std::logic_error *)v73;
    uint64_t v79 = *(void *)&v73[16];
    memset(v73, 0, sizeof(v73));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  unint64_t v16 = a4[2];
  if ((unint64_t)v13 >= v16)
  {
    *(_OWORD *)uint64_t v69 = v11;
    uint64_t v18 = ((uint64_t)v13 - v14) >> 4;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 60) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v20 = v16 - v14;
    if (v20 >> 3 > v19) {
      unint64_t v19 = v20 >> 3;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v19;
    }
    *((void *)&v100 + 1) = a4 + 2;
    std::string::size_type v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v21);
    long long v23 = &v22[16 * v18];
    v99.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
    v99.__r_.__value_.__l.__size_ = (std::string::size_type)v23;
    *(void *)&long long v100 = &v22[16 * v24];
    *(_OWORD *)long long v23 = *(_OWORD *)v69;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v99.__r_.__value_.__r.__words[2] = (std::string::size_type)(v23 + 16);
    std::vector<std::shared_ptr<AMCP::Graph::Timebase>>::__swap_out_circular_buffer(a4, &v99);
    uint64_t v17 = (_OWORD *)a4[1];
    std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v99);
    *(AMCP::Wire_Identifier **)&long long v11 = v69[0];
  }
  else
  {
    _OWORD *v13 = v11;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = v13 + 1;
    a4[1] = (uint64_t)(v13 + 1);
  }
  a4[1] = (uint64_t)v17;
  long long v25 = (void *)v11;
  if (*(_DWORD *)(v11 + 48) == 1)
  {
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[1].__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_119;
  }
  if (*(_DWORD *)(v11 + 16) != 1)
  {
    if (*(char *)(v11 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)(v11 + 24), *(void *)(v11 + 32));
    }
    else {
      std::string v99 = *(std::string *)(v11 + 24);
    }
    *a1 = v99;
    a1[1].__r_.__value_.__s.__data_[0] = 1;
    goto LABEL_119;
  }
  if (*(char *)(v11 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)(v11 + 24), *(void *)(v11 + 32));
  }
  else {
    std::string v99 = *(std::string *)(v11 + 24);
  }
  long long v70 = (const AMCP::Wire_Identifier *)(a2 + 7);
  AMCP::Graph::Wire_Index::get_wires_for_node((uint64_t)&__p, a2 + 7, (uint64_t)&v99, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v25[11] - v25[10]) >> 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v25[8] - v25[7]) >> 4));
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
  memset(&v92, 0, sizeof(v92));
  int64x2_t v90 = 0uLL;
  unint64_t v91 = 0;
  uint64_t v26 = (uint64_t *)__p.__r_.__value_.__r.__words[2];
  if (!__p.__r_.__value_.__r.__words[2]) {
    goto LABEL_113;
  }
  mach_port_t v68 = a2;
  char v27 = 0;
  do
  {
    if (*((char *)v26 + 39) < 0) {
      std::string::__init_copy_ctor_external(&v87, (const std::string::value_type *)v26[2], v26[3]);
    }
    else {
      std::string v87 = *(std::string *)(v26 + 2);
    }
    uint64_t v88 = v26[5];
    int v89 = *((_DWORD *)v26 + 12);
    unint64_t v28 = (const void **)(v26 + 7);
    if (*((char *)v26 + 79) < 0)
    {
      std::string::__init_copy_ctor_external(&v84, (const std::string::value_type *)v26[7], v26[8]);
    }
    else
    {
      *(_OWORD *)&v84.__r_.__value_.__l.__data_ = *(_OWORD *)v28;
      v84.__r_.__value_.__r.__words[2] = v26[9];
    }
    uint64_t v85 = v26[10];
    int v86 = *((_DWORD *)v26 + 22);
    std::string v99 = v87;
    memset(&v87, 0, sizeof(v87));
    *(void *)&long long v100 = v88;
    DWORD2(v100) = v89;
    std::string v101 = v84;
    memset(&v84, 0, sizeof(v84));
    int v103 = *((_DWORD *)v26 + 22);
    uint64_t v102 = v26[10];
    uint64_t v29 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>(v8, (unsigned __int8 **)&v99);
    if (v29 && *((unsigned char *)v29 + 504))
    {
      AMCP::Graph::Wire_Index::get_tgid_for_wire((AMCP::Graph::Wire_Index *)&__str, v70, (unsigned __int8 **)&v99);
      if (v27)
      {
        uint64_t v31 = HIBYTE(v92.__r_.__value_.__r.__words[2]);
        if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v92.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v92.__r_.__value_.__l.__size_;
        }
        std::string::size_type v33 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        char v34 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v33 = __str.__r_.__value_.__l.__size_;
        }
        if (size != v33) {
          goto LABEL_122;
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((*((unsigned char *)&v92.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          std::string::size_type v30 = (AMCP::Log::Scope_Registry *)memcmp(v92.__r_.__value_.__l.__data_, p_str, v92.__r_.__value_.__l.__size_);
          if (v30) {
            goto LABEL_122;
          }
        }
        else if (*((unsigned char *)&v92.__r_.__value_.__s + 23))
        {
          uint64_t v36 = &v92;
          while (v36->__r_.__value_.__s.__data_[0] == p_str->__r_.__value_.__s.__data_[0])
          {
            uint64_t v36 = (std::string *)((char *)v36 + 1);
            p_str = (std::string *)((char *)p_str + 1);
            if (!--v31) {
              goto LABEL_80;
            }
          }
LABEL_122:
          AMCP::Log::Scope_Registry::get(v30);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          int v59 = **(NSObject ***)buf;
          if (v95.i64[0]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v95.i64[0]);
          }
          if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
          {
            uint64_t v60 = pthread_self();
            mach_port_t v61 = pthread_mach_thread_np(v60);
            *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v61;
            v95.i16[0] = 2080;
            *(uint64_t *)((char *)v95.i64 + 2) = (uint64_t)"Graph.cpp";
            v95.i16[5] = 1024;
            v95.i32[3] = 449;
            LOWORD(v96) = 2080;
            *(void *)((char *)&v96 + 2) = "not (group == temp)";
            _os_log_error_impl(&dword_1BAA78000, v59, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Node with Single_Thread policy should not have connected wires with different TIDs.", buf, 0x22u);
          }
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Node with Single_Thread policy should not have connected wires with different TIDs.", (uint64_t)&v75);
          std::logic_error::logic_error(&v76, &v75);
          v76.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)&v77, &v76);
          uint64_t v79 = 0;
          uint64_t v80 = 0;
          uint64_t v81 = 0;
          int v82 = -1;
          long long v77 = &unk_1F1489CC8;
          v78.__imp_.__imp_ = (const char *)&unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v77);
          *((void *)&v96 + 1) = "std::optional<Thread_Group_ID> AMCP::Graph::Graph::get_thread_group_id_from_upstream(c"
                                  "onst Wire_Identifier &, std::vector<std::shared_ptr<Node>> &) const";
          uint64_t v97 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
          int v98 = 449;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v71);
          *(void *)std::logic_error v73 = &unk_1F148AA90;
          *(_OWORD *)&v73[8] = v71;
          uint64_t v74 = v72;
          long long v71 = 0uLL;
          uint64_t v72 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
      }
      else
      {
        std::string::operator=(&v92, &__str);
        char v34 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
LABEL_80:
      if (v34 < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
LABEL_82:
      char v27 = 1;
      goto LABEL_102;
    }
    if (v27) {
      goto LABEL_82;
    }
    uint64_t v37 = *((unsigned __int8 *)v26 + 79);
    if ((v37 & 0x80u) == 0) {
      uint64_t v38 = *((unsigned __int8 *)v26 + 79);
    }
    else {
      uint64_t v38 = v26[8];
    }
    uint64_t v39 = *(unsigned __int8 *)(a3 + 23);
    int v40 = (char)v39;
    if ((v39 & 0x80u) != 0) {
      uint64_t v39 = *(void *)(a3 + 8);
    }
    if (v38 != v39) {
      goto LABEL_84;
    }
    if (v40 >= 0) {
      int v41 = (unsigned __int8 *)a3;
    }
    else {
      int v41 = *(unsigned __int8 **)a3;
    }
    if ((v37 & 0x80) != 0)
    {
      if (memcmp(*v28, v41, v26[8])) {
        goto LABEL_84;
      }
    }
    else if (*((unsigned char *)v26 + 79))
    {
      while (*(unsigned __int8 *)v28 == *v41)
      {
        unint64_t v28 = (const void **)((char *)v28 + 1);
        ++v41;
        if (!--v37) {
          goto LABEL_85;
        }
      }
LABEL_84:
      char v27 = 0;
      goto LABEL_102;
    }
LABEL_85:
    uint64_t v42 = v90.i64[1];
    if (v90.i64[1] >= v91)
    {
      unint64_t v44 = 0xCCCCCCCCCCCCCCCDLL * ((v90.i64[1] - v90.i64[0]) >> 4);
      unint64_t v45 = v44 + 1;
      if (v44 + 1 > 0x333333333333333) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      if (0x999999999999999ALL * ((uint64_t)(v91 - v90.i64[0]) >> 4) > v45) {
        unint64_t v45 = 0x999999999999999ALL * ((uint64_t)(v91 - v90.i64[0]) >> 4);
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v91 - v90.i64[0]) >> 4) >= 0x199999999999999) {
        unint64_t v46 = 0x333333333333333;
      }
      else {
        unint64_t v46 = v45;
      }
      *((void *)&v96 + 1) = &v91;
      if (v46) {
        unint64_t v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Identifier>>(v46);
      }
      else {
        uint64_t v47 = 0;
      }
      *(void *)AudioObjectPropertyAddress buf = v46;
      v95.i64[0] = v46 + 80 * v44;
      v95.i64[1] = v95.i64[0];
      *(void *)&long long v96 = v46 + 80 * v47;
      std::construct_at[abi:ne180100]<AMCP::Wire_Identifier,AMCP::Wire_Identifier const&,AMCP::Wire_Identifier*>((std::string *)v95.i64[0], (long long *)&v99);
      uint64_t v48 = v95.i64[0];
      uint64_t v43 = v95.i64[1] + 80;
      v95.i64[1] += 80;
      uint64_t v49 = v90.i64[1];
      uint64_t v50 = v90.i64[0];
      if (v90.i64[1] == v90.i64[0])
      {
        int64x2_t v55 = vdupq_n_s64(v90.u64[1]);
      }
      else
      {
        do
        {
          long long v51 = *(_OWORD *)(v49 - 80);
          *(void *)(v48 - 64) = *(void *)(v49 - 64);
          *(_OWORD *)(v48 - 80) = v51;
          *(void *)(v49 - 72) = 0;
          *(void *)(v49 - 64) = 0;
          *(void *)(v49 - 80) = 0;
          uint64_t v52 = *(void *)(v49 - 56);
          *(_DWORD *)(v48 - 48) = *(_DWORD *)(v49 - 48);
          *(void *)(v48 - 56) = v52;
          long long v53 = *(_OWORD *)(v49 - 40);
          *(void *)(v48 - 24) = *(void *)(v49 - 24);
          *(_OWORD *)(v48 - 40) = v53;
          *(void *)(v49 - 32) = 0;
          *(void *)(v49 - 24) = 0;
          *(void *)(v49 - 40) = 0;
          uint64_t v54 = *(void *)(v49 - 16);
          *(_DWORD *)(v48 - 8) = *(_DWORD *)(v49 - 8);
          *(void *)(v48 - 16) = v54;
          v48 -= 80;
          v49 -= 80;
        }
        while (v49 != v50);
        int64x2_t v55 = v90;
        uint64_t v43 = v95.i64[1];
      }
      v90.i64[0] = v48;
      v90.i64[1] = v43;
      int64x2_t v95 = v55;
      unint64_t v56 = v91;
      unint64_t v91 = v96;
      *(void *)&long long v96 = v56;
      *(void *)AudioObjectPropertyAddress buf = v55.i64[0];
      std::__split_buffer<AMCP::Wire_Identifier>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      std::construct_at[abi:ne180100]<AMCP::Wire_Identifier,AMCP::Wire_Identifier const&,AMCP::Wire_Identifier*>((std::string *)v90.i64[1], (long long *)&v99);
      uint64_t v43 = v42 + 80;
    }
    char v27 = 0;
    v90.i64[1] = v43;
LABEL_102:
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v99.__r_.__value_.__l.__data_);
    }
    uint64_t v26 = (uint64_t *)*v26;
  }
  while (v26);
  if (v27)
  {
    *a1 = v92;
    memset(&v92, 0, sizeof(v92));
    char v57 = 1;
    goto LABEL_114;
  }
  if (v90.i64[0] != v90.i64[1])
  {
    AMCP::Graph::Graph::get_thread_group_id_from_upstream(a1, v68, v90.i64[0], a4);
    goto LABEL_115;
  }
LABEL_113:
  char v57 = 0;
  a1->__r_.__value_.__s.__data_[0] = 0;
LABEL_114:
  a1[1].__r_.__value_.__s.__data_[0] = v57;
LABEL_115:
  v99.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v92.__r_.__value_.__l.__data_);
  }
  std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__deallocate_node((void *)__p.__r_.__value_.__r.__words[2]);
  unint64_t v58 = (void *)__p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  if (v58) {
    operator delete(v58);
  }
LABEL_119:
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_1BADA9840(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void AMCP::Graph::Graph::get_thread_group_id_from_downstream(unsigned char *a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  __s2 = a2 + 12;
  uint64_t v10 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>(a2 + 12, (unsigned __int8 **)a3);
  if (v10 && *((unsigned char *)v10 + 504))
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v97, "com.apple.coreaudio", "AMCP");
    char v57 = *(NSObject **)v97.__r_.__value_.__l.__data_;
    if (v97.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v97.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      unint64_t v58 = pthread_self();
      mach_port_t v59 = pthread_mach_thread_np(v58);
      LODWORD(v97.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v97.__r_.__value_.__r.__words[0]) = v59;
      LOWORD(v97.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v97.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
      WORD1(v97.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v97.__r_.__value_.__r.__words[2]) = 477;
      LOWORD(v98) = 2080;
      *(void *)((char *)&v98 + 2) = "not (not m_wire_index.is_connected(current_wire))";
      _os_log_error_impl(&dword_1BAA78000, v57, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v97, 0x22u);
    }
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v84);
    std::logic_error::logic_error(&v88, &v84);
    v88.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v89, &v88);
    uint64_t v90 = 0;
    uint64_t v91 = 0;
    uint64_t v92 = 0;
    int v93 = -1;
    v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v89.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v97, (uint64_t)&v89);
    *((void *)&v98 + 1) = "std::optional<Thread_Group_ID> AMCP::Graph::Graph::get_thread_group_id_from_downstream(const"
                            " Wire_Identifier &, std::vector<std::shared_ptr<Node>> &, const std::set<Wire_Identifier> &) const";
    v99.__r_.__value_.__r.__words[0] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMC"
                                                               "P/IO/Graph/Graph.cpp";
    LODWORD(v99.__r_.__value_.__r.__words[1]) = 477;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v86);
    *(_OWORD *)&v94.__r_.__value_.__r.__words[1] = v86;
    v94.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    uint64_t v95 = v87;
    long long v86 = 0uLL;
    uint64_t v87 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  long long v11 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2 + 22, (unsigned __int8 *)(a3 + 40));
  if (!v11)
  {
    *a1 = 0;
    a1[24] = 0;
    return;
  }
  long long v12 = *(_OWORD *)(v11 + 40);
  uint64_t v13 = (std::__shared_weak_count *)*((void *)v11 + 6);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *a4;
  uint64_t v14 = (_OWORD *)a4[1];
  if ((_OWORD *)*a4 == v14)
  {
    unint64_t v16 = (void *)*a4;
  }
  else
  {
    unint64_t v16 = (void *)*a4;
    while (*v16 != (void)v12)
    {
      v16 += 2;
      if (v16 == (void *)v14)
      {
        unint64_t v16 = (void *)a4[1];
        break;
      }
    }
  }
  if (v16 != (void *)v14)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v97, "com.apple.coreaudio", "AMCP");
    uint64_t v60 = *(NSObject **)v97.__r_.__value_.__l.__data_;
    if (v97.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v97.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v61 = pthread_self();
      mach_port_t v62 = pthread_mach_thread_np(v61);
      LODWORD(v97.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v97.__r_.__value_.__r.__words[0]) = v62;
      LOWORD(v97.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v97.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
      WORD1(v97.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v97.__r_.__value_.__r.__words[2]) = 485;
      LOWORD(v98) = 2080;
      *(void *)((char *)&v98 + 2) = "not (std::find(path_to_context.begin(), path_to_context.end(), dest_node) == path_"
                                      "to_context.end())";
      _os_log_error_impl(&dword_1BAA78000, v60, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Graph contains a cycle.", (uint8_t *)&v97, 0x22u);
    }
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Graph contains a cycle.", (uint64_t)&v84);
    std::logic_error::logic_error(&v88, &v84);
    v88.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v89, &v88);
    uint64_t v90 = 0;
    uint64_t v91 = 0;
    uint64_t v92 = 0;
    int v93 = -1;
    v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v89.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v97, (uint64_t)&v89);
    *((void *)&v98 + 1) = "std::optional<Thread_Group_ID> AMCP::Graph::Graph::get_thread_group_id_from_downstream(const"
                            " Wire_Identifier &, std::vector<std::shared_ptr<Node>> &, const std::set<Wire_Identifier> &) const";
    v99.__r_.__value_.__r.__words[0] = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMC"
                                                               "P/IO/Graph/Graph.cpp";
    LODWORD(v99.__r_.__value_.__r.__words[1]) = 485;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v86);
    *(_OWORD *)&v94.__r_.__value_.__r.__words[1] = v86;
    v94.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    uint64_t v95 = v87;
    long long v86 = 0uLL;
    uint64_t v87 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  unint64_t v17 = a4[2];
  if ((unint64_t)v14 >= v17)
  {
    long long v70 = v12;
    uint64_t v19 = ((uint64_t)v14 - v15) >> 4;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 60) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v21 = v17 - v15;
    if (v21 >> 3 > v20) {
      unint64_t v20 = v21 >> 3;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    *((void *)&v98 + 1) = a4 + 2;
    long long v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v22);
    uint64_t v24 = &v23[16 * v19];
    v97.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    v97.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
    *(void *)&long long v98 = &v23[16 * v25];
    *(_OWORD *)uint64_t v24 = v70;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v97.__r_.__value_.__r.__words[2] = (std::string::size_type)(v24 + 16);
    std::vector<std::shared_ptr<AMCP::Graph::Timebase>>::__swap_out_circular_buffer(a4, &v97);
    uint64_t v18 = (_OWORD *)a4[1];
    std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v97);
    *(void *)&long long v12 = v70;
  }
  else
  {
    *uint64_t v14 = v12;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = v14 + 1;
    a4[1] = (uint64_t)(v14 + 1);
  }
  a4[1] = (uint64_t)v18;
  uint64_t v26 = (std::string *)v12;
  int v27 = *(_DWORD *)(v12 + 16);
  if (!v27)
  {
    if (*(char *)(v12 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)(v12 + 24), *(void *)(v12 + 32));
    }
    else {
      std::string v97 = *(std::string *)(v12 + 24);
    }
    *(std::string *)a1 = v97;
    a1[24] = 1;
    goto LABEL_141;
  }
  if (*(_DWORD *)(v12 + 48) == 1 || v27 != 1)
  {
    *a1 = 0;
    a1[24] = 0;
    goto LABEL_141;
  }
  if (*(char *)(v12 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)(v12 + 24), *(void *)(v12 + 32));
  }
  else {
    std::string v97 = *(std::string *)(v12 + 24);
  }
  AMCP::Graph::Wire_Index::get_wires_for_node((uint64_t)&v84, a2 + 7, (uint64_t)&v97, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v26[3].__r_.__value_.__r.__words[2] - v26[3].__r_.__value_.__l.__size_) >> 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v26[2].__r_.__value_.__r.__words[2] - v26[2].__r_.__value_.__l.__size_) >> 4));
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (!v85)
  {
    *a1 = 0;
    a1[24] = 0;
    goto LABEL_139;
  }
  mach_port_t v64 = v26 + 1;
  mach_port_t v67 = (std::string::__raw *)v26;
  mach_port_t v68 = a1;
  char v65 = a4;
  uint64_t v66 = a5;
  unint64_t v28 = (uint64_t *)v84.__r_.__value_.__r.__words[2];
  if (v84.__r_.__value_.__r.__words[2])
  {
    uint64_t v69 = v13;
    do
    {
      uint64_t v29 = v28 + 2;
      if (*((char *)v28 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(&v89, (const std::string::value_type *)v28[2], v28[3]);
      }
      else
      {
        *(_OWORD *)&v89.__r_.__value_.__l.__data_ = *v29;
        v89.__r_.__value_.__r.__words[2] = v28[4];
      }
      uint64_t v90 = v28[5];
      LODWORD(v91) = *((_DWORD *)v28 + 12);
      std::string::size_type v30 = v28 + 7;
      if (*((char *)v28 + 79) < 0)
      {
        std::string::__init_copy_ctor_external(&v94, (const std::string::value_type *)v28[7], v28[8]);
      }
      else
      {
        *(_OWORD *)&v94.__r_.__value_.__l.__data_ = *v30;
        v94.__r_.__value_.__r.__words[2] = v28[9];
      }
      uint64_t v95 = v28[10];
      int v96 = *((_DWORD *)v28 + 22);
      std::string v97 = v89;
      memset(&v89, 0, sizeof(v89));
      *(void *)&long long v98 = v90;
      DWORD2(v98) = v91;
      std::string v99 = v94;
      memset(&v94, 0, sizeof(v94));
      int v101 = *((_DWORD *)v28 + 22);
      uint64_t v100 = v28[10];
      uint64_t v31 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>(__s2, (unsigned __int8 **)&v97);
      if (v31) {
        BOOL v32 = *((unsigned char *)v31 + 504) != 0;
      }
      else {
        BOOL v32 = 0;
      }
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v97.__r_.__value_.__l.__data_);
      }
      if (v32)
      {
        if (*((char *)v28 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(&v81, (const std::string::value_type *)v28[2], v28[3]);
        }
        else
        {
          *(_OWORD *)&v81.__r_.__value_.__l.__data_ = *v29;
          v81.__r_.__value_.__r.__words[2] = v28[4];
        }
        uint64_t v82 = v28[5];
        int v83 = *((_DWORD *)v28 + 12);
        uint64_t v13 = v69;
        if (*((char *)v28 + 79) < 0)
        {
          std::string::__init_copy_ctor_external(&v80, (const std::string::value_type *)v28[7], v28[8]);
        }
        else
        {
          *(_OWORD *)&v80.__r_.__value_.__l.__data_ = *v30;
          v80.__r_.__value_.__r.__words[2] = v28[9];
        }
        *(_OWORD *)&v97.__r_.__value_.__l.__data_ = *(_OWORD *)&v81.__r_.__value_.__l.__data_;
        std::string::size_type v44 = v81.__r_.__value_.__r.__words[2];
        memset(&v81, 0, sizeof(v81));
        v97.__r_.__value_.__r.__words[2] = v44;
        *(void *)&long long v98 = v82;
        DWORD2(v98) = v83;
        *(_OWORD *)&v99.__r_.__value_.__l.__data_ = *(_OWORD *)&v80.__r_.__value_.__l.__data_;
        std::string::size_type v45 = v80.__r_.__value_.__r.__words[2];
        memset(&v80, 0, sizeof(v80));
        uint64_t v46 = v28[10];
        int v101 = *((_DWORD *)v28 + 22);
        v99.__r_.__value_.__r.__words[2] = v45;
        uint64_t v100 = v46;
        AMCP::Graph::Wire_Index::get_tgid_for_wire((AMCP::Graph::Wire_Index *)&v89, (const AMCP::Wire_Identifier *)(a2 + 7), (unsigned __int8 **)&v97);
        *(std::string *)a1 = v89;
        a1[24] = 1;
LABEL_134:
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v99.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v97.__r_.__value_.__l.__data_);
        }
        goto LABEL_139;
      }
      unint64_t v28 = (uint64_t *)*v28;
    }
    while (v28);
    unint64_t v28 = (uint64_t *)v84.__r_.__value_.__r.__words[2];
    uint64_t v13 = v69;
    a5 = v66;
  }
  uint64_t v78 = a5;
  if (SHIBYTE(v67[1].__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v67[1].__words[0], v67[1].__words[1]);
  }
  else {
    std::string __p = *v64;
  }
  if (!v28)
  {
    char v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    goto LABEL_94;
  }
  char v63 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  __s2a = p_p;
  while (1)
  {
    uint64_t v35 = *((unsigned __int8 *)v28 + 39);
    std::string::size_type v36 = v28[3];
    if ((v35 & 0x80u) == 0) {
      uint64_t v37 = *((unsigned __int8 *)v28 + 39);
    }
    else {
      uint64_t v37 = v28[3];
    }
    if (v37 != size) {
      goto LABEL_91;
    }
    uint64_t v38 = (const void **)(v28 + 2);
    if ((v35 & 0x80) == 0) {
      break;
    }
    int v41 = (const std::string::value_type *)*v38;
    if (!memcmp(*v38, __s2a, v28[3]))
    {
      std::string::__init_copy_ctor_external(&v89, v41, v36);
      goto LABEL_83;
    }
LABEL_91:
    unint64_t v28 = (uint64_t *)*v28;
    if (!v28) {
      goto LABEL_92;
    }
  }
  uint64_t v39 = __s2a;
  int v40 = (unsigned __int8 *)(v28 + 2);
  if (*((unsigned char *)v28 + 39))
  {
    while (*v40 == v39->__r_.__value_.__s.__data_[0])
    {
      ++v40;
      uint64_t v39 = (std::string *)((char *)v39 + 1);
      if (!--v35) {
        goto LABEL_80;
      }
    }
    goto LABEL_91;
  }
LABEL_80:
  *(_OWORD *)&v89.__r_.__value_.__l.__data_ = *(_OWORD *)v38;
  v89.__r_.__value_.__r.__words[2] = v28[4];
LABEL_83:
  uint64_t v90 = v28[5];
  LODWORD(v91) = *((_DWORD *)v28 + 12);
  if (*((char *)v28 + 79) < 0) {
    std::string::__init_copy_ctor_external(&v94, (const std::string::value_type *)v28[7], v28[8]);
  }
  else {
    std::string v94 = *(std::string *)(v28 + 7);
  }
  uint64_t v95 = v28[10];
  int v96 = *((_DWORD *)v28 + 22);
  std::string v97 = v89;
  memset(&v89, 0, sizeof(v89));
  *(void *)&long long v98 = v90;
  DWORD2(v98) = v91;
  std::string v99 = v94;
  memset(&v94, 0, sizeof(v94));
  int v101 = *((_DWORD *)v28 + 22);
  uint64_t v100 = v28[10];
  uint64_t v42 = std::__tree<AMCP::Wire_Identifier>::find<AMCP::Wire_Identifier>(v78, (uint64_t)&v97);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v99.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if ((void *)(v78 + 8) == v42) {
    goto LABEL_91;
  }
LABEL_92:
  char v43 = v63;
LABEL_94:
  if (v43 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v28) {
    goto LABEL_127;
  }
  unint64_t v28 = (uint64_t *)v84.__r_.__value_.__r.__words[2];
  if (SHIBYTE(v67[1].__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v77, (const std::string::value_type *)v67[1].__words[0], v67[1].__words[1]);
  }
  else {
    std::string v77 = *v64;
  }
  char v47 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
  if (v28)
  {
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v48 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v48 = v77.__r_.__value_.__l.__size_;
    }
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v49 = &v77;
    }
    else {
      uint64_t v49 = (std::string *)v77.__r_.__value_.__r.__words[0];
    }
    do
    {
      uint64_t v50 = *((unsigned __int8 *)v28 + 39);
      if ((v50 & 0x80u) == 0) {
        uint64_t v51 = *((unsigned __int8 *)v28 + 39);
      }
      else {
        uint64_t v51 = v28[3];
      }
      if (v51 == v48)
      {
        if ((v50 & 0x80) != 0)
        {
          if (!memcmp((const void *)v28[2], v49, v28[3])) {
            break;
          }
        }
        else
        {
          if (!*((unsigned char *)v28 + 39)) {
            break;
          }
          uint64_t v52 = 0;
          while (*((unsigned __int8 *)v28 + v52 + 16) == v49->__r_.__value_.__s.__data_[v52])
          {
            if (v50 == ++v52) {
              goto LABEL_124;
            }
          }
        }
      }
      unint64_t v28 = (uint64_t *)*v28;
    }
    while (v28);
  }
LABEL_124:
  if (v47 < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  if (v28)
  {
LABEL_127:
    if (*((char *)v28 + 39) < 0) {
      std::string::__init_copy_ctor_external(&v74, (const std::string::value_type *)v28[2], v28[3]);
    }
    else {
      std::string v74 = *(std::string *)(v28 + 2);
    }
    uint64_t v75 = v28[5];
    int v76 = *((_DWORD *)v28 + 12);
    if (*((char *)v28 + 79) < 0) {
      std::string::__init_copy_ctor_external(&v73, (const std::string::value_type *)v28[7], v28[8]);
    }
    else {
      std::string v73 = *(std::string *)(v28 + 7);
    }
    *(_OWORD *)&v97.__r_.__value_.__l.__data_ = *(_OWORD *)&v74.__r_.__value_.__l.__data_;
    std::string::size_type v53 = v74.__r_.__value_.__r.__words[2];
    memset(&v74, 0, sizeof(v74));
    v97.__r_.__value_.__r.__words[2] = v53;
    *(void *)&long long v98 = v75;
    DWORD2(v98) = v76;
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
    std::string::size_type v54 = v73.__r_.__value_.__r.__words[2];
    memset(&v73, 0, sizeof(v73));
    uint64_t v55 = v28[10];
    int v101 = *((_DWORD *)v28 + 22);
    v99.__r_.__value_.__r.__words[2] = v54;
    uint64_t v100 = v55;
    AMCP::Graph::Graph::get_thread_group_id_from_downstream(v68, a2, &v97, v65, v66);
    goto LABEL_134;
  }
  *mach_port_t v68 = 0;
  v68[24] = 0;
LABEL_139:
  std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__deallocate_node((void *)v84.__r_.__value_.__r.__words[2]);
  unint64_t v56 = (void *)v84.__r_.__value_.__r.__words[0];
  v84.__r_.__value_.__r.__words[0] = 0;
  if (v56) {
    operator delete(v56);
  }
LABEL_141:
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_1BADAA7F0(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void *std::__tree<AMCP::Wire_Identifier>::find<AMCP::Wire_Identifier>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a2 + 40;
  int v6 = (void *)(a1 + 8);
  do
  {
    char v7 = std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)(v3 + 4), (uint64_t)(v3 + 9), a2, v5);
    if (v7 >= 0) {
      std::string::size_type v8 = v3;
    }
    else {
      std::string::size_type v8 = v3 + 1;
    }
    if (v7 >= 0) {
      int v6 = v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v2 == v6
    || (std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(a2, v5, (uint64_t)(v6 + 4), (uint64_t)(v6 + 9)) & 0x80) != 0)
  {
    return v2;
  }
  return v6;
}

uint64_t std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = std::__synth_three_way[abi:ne180100]<AMCP::Terminal_Identifier,AMCP::Terminal_Identifier>(a1, a3);
  if (!(_BYTE)result)
  {
    return std::__synth_three_way[abi:ne180100]<AMCP::Terminal_Identifier,AMCP::Terminal_Identifier>(a2, a4);
  }
  return result;
}

uint64_t std::__synth_three_way[abi:ne180100]<AMCP::Terminal_Identifier,AMCP::Terminal_Identifier>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 24;
  uint64_t v12 = a1;
  uint64_t v13 = a1 + 24;
  uint64_t v5 = a1 + 32;
  uint64_t v14 = a1 + 32;
  uint64_t v6 = a2 + 24;
  uint64_t v7 = a2 + 32;
  uint64_t v9 = a2;
  uint64_t v10 = a2 + 24;
  uint64_t v11 = a2 + 32;
  if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,unsigned long const&,AMCP::Direction const&,std::string const&,unsigned long const&,AMCP::Direction const&,0ul,1ul,2ul>((uint64_t)&v12, (uint64_t)&v9) & 0x80) != 0)return 255; {
  uint64_t v12 = a2;
  }
  uint64_t v13 = v6;
  uint64_t v14 = v7;
  uint64_t v9 = a1;
  uint64_t v10 = v4;
  uint64_t v11 = v5;
  return (std::__tuple_compare_three_way[abi:ne180100]<std::string const&,unsigned long const&,AMCP::Direction const&,std::string const&,unsigned long const&,AMCP::Direction const&,0ul,1ul,2ul>((uint64_t)&v12, (uint64_t)&v9) >> 7) & 1;
}

uint64_t std::__tuple_compare_three_way[abi:ne180100]<std::string const&,unsigned long const&,AMCP::Direction const&,std::string const&,unsigned long const&,AMCP::Direction const&,0ul,1ul,2ul>(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*(void **)a1, *(void **)a2);
  if (!(_BYTE)result)
  {
    unint64_t v5 = **(void **)(a1 + 8);
    unint64_t v6 = **(void **)(a2 + 8);
    uint64_t result = v5 < v6 ? 0xFFFFFFFFLL : 1;
    if (v5 == v6)
    {
      unsigned int v7 = **(_DWORD **)(a1 + 16);
      unsigned int v8 = **(_DWORD **)(a2 + 16);
      if (v7 < v8) {
        unsigned int v9 = -1;
      }
      else {
        unsigned int v9 = 1;
      }
      if (v7 == v8) {
        return 0;
      }
      else {
        return v9;
      }
    }
  }
  return result;
}

void AMCP::Graph::Graph::connect_downstream_nodes(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, void *a5)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a3;
  if (*(_DWORD *)(*a3 + 48) == 1 || *(_DWORD *)(v5 + 16) != 1) {
    return;
  }
  if (*(char *)(v5 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)(v5 + 24), *(void *)(v5 + 32));
    uint64_t v5 = *a3;
  }
  else
  {
    std::string v55 = *(std::string *)(v5 + 24);
  }
  AMCP::Graph::Wire_Index::get_wires_for_node((uint64_t)&v61, a1 + 7, (uint64_t)&v55, 0, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v5 + 64) - *(void *)(v5 + 56)) >> 4));
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  unsigned int v8 = v62;
  if (!v62)
  {
    long long v23 = 0;
    goto LABEL_53;
  }
  uint64_t v28 = a2;
  do
  {
    if (*((char *)v8 + 39) < 0) {
      std::string::__init_copy_ctor_external(&v52, (const std::string::value_type *)v8[2], v8[3]);
    }
    else {
      std::string v52 = *(std::string *)(v8 + 2);
    }
    uint64_t v53 = v8[5];
    int v54 = *((_DWORD *)v8 + 12);
    if (*((char *)v8 + 79) < 0) {
      std::string::__init_copy_ctor_external(&v49, (const std::string::value_type *)v8[7], v8[8]);
    }
    else {
      std::string v49 = *(std::string *)(v8 + 7);
    }
    uint64_t v50 = v8[10];
    int v51 = *((_DWORD *)v8 + 22);
    std::string v55 = v52;
    memset(&v52, 0, sizeof(v52));
    uint64_t v56 = v53;
    int v57 = v54;
    std::string __p = v49;
    memset(&v49, 0, sizeof(v49));
    int v60 = *((_DWORD *)v8 + 22);
    uint64_t v59 = v8[10];
    unsigned int v9 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>(a1 + 12, (unsigned __int8 **)&v55);
    if (v9 && *((unsigned char *)v9 + 504))
    {
      AMCP::Graph::Wire_Index::get_tgid_for_wire((AMCP::Graph::Wire_Index *)&__s1, (const AMCP::Wire_Identifier *)(a1 + 7), (unsigned __int8 **)&v55);
      unsigned __int8 v11 = v48;
      if ((v48 & 0x80u) == 0) {
        size_t v12 = v48;
      }
      else {
        size_t v12 = __n;
      }
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
      int v14 = (char)v13;
      if ((v13 & 0x80u) != 0) {
        uint64_t v13 = *(void *)(a2 + 8);
      }
      if (v12 == v13)
      {
        if (v14 >= 0) {
          uint64_t v15 = (const std::string::value_type *)a2;
        }
        else {
          uint64_t v15 = *(const std::string::value_type **)a2;
        }
        if ((v48 & 0x80) != 0)
        {
          uint64_t v21 = __s1;
          unsigned __int8 v22 = v48;
          uint64_t v10 = (AMCP::Log::Scope_Registry *)memcmp(__s1, v15, __n);
          unsigned __int8 v11 = v22;
          a2 = v28;
          if (!v10) {
            goto LABEL_45;
          }
        }
        else
        {
          if (!v48) {
            goto LABEL_46;
          }
          p_s1 = &__s1;
          uint64_t v17 = v48;
          while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v15)
          {
            p_s1 = (void **)((char *)p_s1 + 1);
            ++v15;
            if (!--v17) {
              goto LABEL_43;
            }
          }
        }
      }
      if (*(_DWORD *)(*a3 + 48) != 1)
      {
        AMCP::Log::Scope_Registry::get(v10);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v25 = **(NSObject ***)buf;
        if (*(void *)v64) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v64);
        }
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          uint64_t v26 = pthread_self();
          mach_port_t v27 = pthread_mach_thread_np(v26);
          *(_DWORD *)AudioObjectPropertyAddress buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v27;
          *(_WORD *)mach_port_t v64 = 2080;
          *(void *)&v64[2] = "Graph.cpp";
          __int16 v65 = 1024;
          int v66 = 552;
          __int16 v67 = 2080;
          *(void *)mach_port_t v68 = "not (tgid == group || current_node->get_thread_policy() == Node_Thread_Policy::Node_Is_Shared"
                           "_Across_Threads)";
          _os_log_error_impl(&dword_1BAA78000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Conflicting TGIDs", buf, 0x22u);
        }
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Conflicting TGIDs", (uint64_t)&v38);
        std::logic_error::logic_error(&v39, &v38);
        v39.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error(&v40, &v39);
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        int v45 = -1;
        v40.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        int v41 = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v40);
        *(void *)&v68[6] = "void AMCP::Graph::Graph::connect_downstream_nodes(const Thread_Group_ID &, const std::share"
                             "d_ptr<Node> &, const std::set<Wire_Identifier> &, Resource_Counts &)";
        uint64_t v69 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
        int v70 = 552;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v33);
        long long v36 = v33;
        uint64_t v37 = v34;
        long long v33 = 0uLL;
        uint64_t v34 = 0;
        uint64_t v35 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
LABEL_43:
      if ((v11 & 0x80) != 0)
      {
        uint64_t v21 = __s1;
LABEL_45:
        operator delete(v21);
      }
    }
    else
    {
      uint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(a1 + 22, (unsigned __int8 *)v8 + 56);
      if (v18)
      {
        uint64_t v19 = v18;
        if ((void *)(a4 + 8) != std::__tree<AMCP::Wire_Identifier>::find<AMCP::Wire_Identifier>(a4, (uint64_t)&v55))
        {
          if (*(char *)(a2 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
          }
          else {
            std::string v32 = *(std::string *)a2;
          }
          unint64_t v20 = (uint64_t *)(v19 + 40);
          AMCP::Graph::Graph::connect_nodes(a1, a3, v20, (const std::string::value_type *)&v32, a5);
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v32.__r_.__value_.__l.__data_);
          }
          AMCP::Graph::Graph::connect_downstream_nodes(a1, a2, v20, a4, a5);
        }
      }
    }
LABEL_46:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    unsigned int v8 = (void *)*v8;
  }
  while (v8);
  long long v23 = v62;
LABEL_53:
  std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__deallocate_node(v23);
  uint64_t v24 = v61;
  mach_port_t v61 = 0;
  if (v24) {
    operator delete(v24);
  }
}

void sub_1BADAB1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55)
{
  if (v55 < 0) {
    operator delete(__p);
  }
  AMCP::Wire_Identifier::~Wire_Identifier(&a55);
  std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::~__hash_table(v56 - 216);
  _Unwind_Resume(a1);
}

void AMCP::Graph::Graph::calculate_tgid_and_connect(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::find<AMCP::Wire_Identifier>((void *)(a1 + 96), (unsigned __int8 **)a2);
  if (!v8 || !*((unsigned char *)v8 + 504))
  {
    unsigned int v9 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>((void *)(a1 + 176), (unsigned __int8 *)a2);
    uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>((void *)(a1 + 176), (unsigned __int8 *)(a2 + 40));
    if (!v9)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v10);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      uint64_t v53 = *(NSObject **)buf.__r_.__value_.__l.__data_;
      if (buf.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      {
        int v54 = pthread_self();
        mach_port_t v55 = pthread_mach_thread_np(v54);
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v55;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
        WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(buf.__r_.__value_.__r.__words[2]) = 607;
        __int16 v87 = 2080;
        *(void *)std::logic_error v88 = "not (has_src)";
        _os_log_error_impl(&dword_1BAA78000, v53, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Origins must have source nodes", (uint8_t *)&buf, 0x22u);
      }
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Origins must have source nodes", (uint64_t)&__s1);
      std::logic_error::logic_error((std::logic_error *)&v83, &__s1);
      v83.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
      std::logic_error::logic_error((std::logic_error *)&v100, (const std::logic_error *)&v83);
      uint64_t v101 = 0;
      uint64_t v102 = 0;
      uint64_t v103 = 0;
      int v104 = -1;
      v100.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
      v100.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v100);
      *(void *)&v88[6] = "void AMCP::Graph::Graph::calculate_tgid_and_connect(Wire_Identifier, const std::set<Wire_Iden"
                           "tifier> &, Resource_Counts &)";
      std::string v89 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
      int v90 = 607;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v66);
      long long v81 = *(_OWORD *)v66;
      std::string v80 = &unk_1F148AA90;
      uint64_t v82 = v67;
      v66[0] = 0;
      v66[1] = 0;
      uint64_t v67 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    if (v10
      && (unint64_t)(0x6DB6DB6DB6DB6DB7
                          * ((uint64_t)(*(void *)(*((void *)v9 + 5) + 64) - *(void *)(*((void *)v9 + 5) + 56)) >> 4)) > *(void *)(a2 + 24)
      && (unint64_t)(0x6DB6DB6DB6DB6DB7
                          * ((uint64_t)(*(void *)(*((void *)v10 + 5) + 88)
                                     - *(void *)(*((void *)v10 + 5) + 80)) >> 4)) > *(void *)(a2 + 64))
    {
      std::string::size_type v11 = *((void *)v10 + 6);
      v100.__r_.__value_.__r.__words[0] = *((void *)v10 + 5);
      v100.__r_.__value_.__l.__size_ = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      std::string v74 = 0;
      uint64_t v75 = 0;
      int v76 = 0;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
      buf.__r_.__value_.__s.__data_[8] = 0;
      std::string v74 = operator new(0x10uLL);
      uint64_t v75 = v74;
      int v76 = v74 + 2;
      uint64_t v75 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<AMCP::Graph::Node>>,std::shared_ptr<AMCP::Graph::Node> const*,std::shared_ptr<AMCP::Graph::Node> const*,std::shared_ptr<AMCP::Graph::Node>*>((uint64_t)&v76, &v100, &v100.__r_.__value_.__r.__words[2], v74);
      if (v100.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v100.__r_.__value_.__l.__size_);
      }
      AMCP::Graph::Graph::get_thread_group_id_from_upstream(&__s1, (void *)a1, a2, (uint64_t *)&v74);
      std::string::size_type v12 = *((void *)v9 + 6);
      v100.__r_.__value_.__r.__words[0] = *((void *)v9 + 5);
      v100.__r_.__value_.__l.__size_ = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v69 = 0;
      int v70 = 0;
      uint64_t v71 = 0;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
      buf.__r_.__value_.__s.__data_[8] = 0;
      uint64_t v69 = (uint64_t *)operator new(0x10uLL);
      int v70 = v69;
      uint64_t v71 = v69 + 2;
      int v70 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<AMCP::Graph::Node>>,std::shared_ptr<AMCP::Graph::Node> const*,std::shared_ptr<AMCP::Graph::Node> const*,std::shared_ptr<AMCP::Graph::Node>*>((uint64_t)&v71, &v100, &v100.__r_.__value_.__r.__words[2], v69);
      if (v100.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v100.__r_.__value_.__l.__size_);
      }
      AMCP::Graph::Graph::get_thread_group_id_from_downstream(v66, (void *)a1, a2, (uint64_t *)&v69, a3);
      int v13 = v73;
      int v14 = v68;
      if (v73)
      {
        if (v68)
        {
          uint64_t v15 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          int v16 = SHIBYTE(__s1.__r_.__value_.__r.__words[2]);
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __s1.__r_.__value_.__l.__size_;
          }
          uint64_t v18 = (void *)HIBYTE(v67);
          int v19 = SHIBYTE(v67);
          if (v67 < 0) {
            uint64_t v18 = v66[1];
          }
          if ((void *)size != v18) {
            goto LABEL_39;
          }
          if (v67 >= 0) {
            unint64_t v20 = v66;
          }
          else {
            unint64_t v20 = (void **)v66[0];
          }
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          {
            if (memcmp(__s1.__r_.__value_.__l.__data_, v20, __s1.__r_.__value_.__l.__size_)) {
              goto LABEL_39;
            }
          }
          else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
          {
            p_s1 = &__s1;
            while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v20)
            {
              p_s1 = (std::string *)((char *)p_s1 + 1);
              unint64_t v20 = (void **)((char *)v20 + 1);
              if (!--v15) {
                goto LABEL_48;
              }
            }
LABEL_39:
            uint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>((void *)(a1 + 176), (unsigned __int8 *)&__s1);
            uint64_t v26 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>((void *)(a1 + 176), (unsigned __int8 *)v66);
            if (v25)
            {
              if (*(_DWORD *)(*((void *)v25 + 5) + 16))
              {
                if (v26)
                {
                  if (*(_DWORD *)(*((void *)v26 + 5) + 16))
                  {
                    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v26);
                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
                    mach_port_t v27 = *(NSObject **)buf.__r_.__value_.__l.__data_;
                    if (buf.__r_.__value_.__l.__size_) {
                      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
                    }
                    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
                    {
                      uint64_t v28 = pthread_self();
                      mach_port_t v29 = pthread_mach_thread_np(v28);
                      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
                      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v29;
                      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
                      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
                      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
                      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 661;
                      __int16 v87 = 2080;
                      *(void *)std::logic_error v88 = "not (found_upstream_group_origin == m_nodes_by_uid.end() || found_downstream_grou"
                                       "p_origin == m_nodes_by_uid.end())";
                      _os_log_error_impl(&dword_1BAA78000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Unable to overwrite either upstream or downstream tgids", (uint8_t *)&buf, 0x22u);
                    }
                    __cxa_allocate_exception(0x40uLL);
                    caulk::make_string((caulk *)"Unable to overwrite either upstream or downstream tgids", (uint64_t)&v83);
                    std::logic_error::logic_error((std::logic_error *)&v77, &v83);
                    v77.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
                    std::logic_error::logic_error((std::logic_error *)&v100, (const std::logic_error *)&v77);
                    uint64_t v101 = 0;
                    uint64_t v102 = 0;
                    uint64_t v103 = 0;
                    int v104 = -1;
                    v100.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
                    v100.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
                    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v100);
                    *(void *)&v88[6] = "void AMCP::Graph::Graph::calculate_tgid_and_connect(Wire_Identifier, const std:"
                                         ":set<Wire_Identifier> &, Resource_Counts &)";
                    std::string v89 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
                    int v90 = 661;
                    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v78);
                    long long v81 = v78;
                    std::string v80 = &unk_1F148AA90;
                    uint64_t v82 = v79;
                    long long v78 = 0uLL;
                    uint64_t v79 = 0;
                    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
                  }
                  goto LABEL_50;
                }
              }
              else if (v26 && !*(_DWORD *)(*((void *)v26 + 5) + 16))
              {
                AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v26);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
                uint64_t v59 = *(NSObject **)buf.__r_.__value_.__l.__data_;
                if (buf.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
                }
                if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
                {
                  int v60 = pthread_self();
                  mach_port_t v61 = pthread_mach_thread_np(v60);
                  LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
                  HIDWORD(buf.__r_.__value_.__r.__words[0]) = v61;
                  LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
                  WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(buf.__r_.__value_.__r.__words[2]) = 653;
                  __int16 v87 = 2080;
                  *(void *)std::logic_error v88 = "not (found_downstream_group_origin == m_nodes_by_uid.end() || found_downstream_group_"
                                   "origin->second->get_node_type() != Node_Type::IOContext)";
                  _os_log_error_impl(&dword_1BAA78000, v59, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Cannot have two IOCs in group", (uint8_t *)&buf, 0x22u);
                }
                __cxa_allocate_exception(0x40uLL);
                caulk::make_string((caulk *)"Cannot have two IOCs in group", (uint64_t)&v83);
                std::logic_error::logic_error((std::logic_error *)&v77, &v83);
                v77.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
                std::logic_error::logic_error((std::logic_error *)&v100, (const std::logic_error *)&v77);
                uint64_t v101 = 0;
                uint64_t v102 = 0;
                uint64_t v103 = 0;
                int v104 = -1;
                v100.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
                v100.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v100);
                *(void *)&v88[6] = "void AMCP::Graph::Graph::calculate_tgid_and_connect(Wire_Identifier, const std::set"
                                     "<Wire_Identifier> &, Resource_Counts &)";
                std::string v89 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
                int v90 = 653;
                applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v78);
                long long v81 = v78;
                std::string v80 = &unk_1F148AA90;
                uint64_t v82 = v79;
                long long v78 = 0uLL;
                uint64_t v79 = 0;
                boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
              }
            }
            else if (v26)
            {
LABEL_50:
              int v30 = 0;
              uint64_t v31 = (std::string *)v66;
              int v32 = v19;
LABEL_54:
              int v62 = v14;
              if (v32 < 0) {
                std::string::__init_copy_ctor_external(&v65, v31->__r_.__value_.__l.__data_, v31->__r_.__value_.__l.__size_);
              }
              else {
                std::string v65 = *v31;
              }
              if (v30) {
                int v33 = v19;
              }
              else {
                int v33 = v16;
              }
              uint64_t v34 = &__s1;
              if (v30) {
                uint64_t v34 = (std::string *)v66;
              }
              if (v33 < 0) {
                std::string::__init_copy_ctor_external(&v64, v34->__r_.__value_.__l.__data_, v34->__r_.__value_.__l.__size_);
              }
              else {
                std::string v64 = *v34;
              }
              uint64_t v35 = *(uint64_t **)(a1 + 112);
              if (v35)
              {
                if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v36 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v36 = v64.__r_.__value_.__l.__size_;
                }
                if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v37 = &v64;
                }
                else {
                  uint64_t v37 = (std::string *)v64.__r_.__value_.__r.__words[0];
                }
                int v38 = SHIBYTE(v65.__r_.__value_.__r.__words[2]);
                std::string::size_type v39 = v65.__r_.__value_.__l.__size_;
                std::string __s = (std::string::value_type *)v65.__r_.__value_.__r.__words[0];
                do
                {
                  if (*((unsigned char *)v35 + 504))
                  {
                    AMCP::Graph::Graph_Wire::Connection::Connection(&buf, (const AMCP::Graph::Graph_Wire::Connection *)(v35 + 36));
                    if ((v94 & 0x80u) == 0) {
                      size_t v40 = v94;
                    }
                    else {
                      size_t v40 = v93;
                    }
                    if (v40 == v36)
                    {
                      if ((v94 & 0x80) != 0)
                      {
                        BOOL v50 = memcmp(v92, v37, v93) == 0;
                      }
                      else if (v94)
                      {
                        uint64_t v41 = v94 - 1;
                        uint64_t v42 = v37;
                        uint64_t v43 = &v92;
                        do
                        {
                          int v45 = *(unsigned __int8 *)v43;
                          uint64_t v43 = (void **)((char *)v43 + 1);
                          int v44 = v45;
                          int v47 = v42->__r_.__value_.__s.__data_[0];
                          uint64_t v42 = (std::string *)((char *)v42 + 1);
                          int v46 = v47;
                          BOOL v49 = v41-- != 0;
                          BOOL v50 = v44 == v46;
                        }
                        while (v44 == v46 && v49);
                      }
                      else
                      {
                        BOOL v50 = 1;
                      }
                    }
                    else
                    {
                      BOOL v50 = 0;
                    }
                    if (__p)
                    {
                      std::string v99 = __p;
                      operator delete(__p);
                    }
                    if (v97) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v97);
                    }
                    int v51 = (AMCP::Log::Scope_Registry *)v95;
                    if (v95)
                    {
                      int v96 = v95;
                      operator delete(v95);
                    }
                    if ((char)v94 < 0) {
                      operator delete(v92);
                    }
                    if (v91 < 0) {
                      operator delete(v89);
                    }
                    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(buf.__r_.__value_.__l.__data_);
                      if (v50)
                      {
LABEL_104:
                        if (v38 < 0) {
                          std::string::__init_copy_ctor_external(&v77, __s, v39);
                        }
                        else {
                          std::string v77 = v65;
                        }
                        if (!*((unsigned char *)v35 + 504))
                        {
                          AMCP::Log::Scope_Registry::get(v51);
                          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
                          uint64_t v56 = *(NSObject **)buf.__r_.__value_.__l.__data_;
                          if (buf.__r_.__value_.__l.__size_) {
                            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
                          }
                          if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
                          {
                            int v57 = pthread_self();
                            mach_port_t v58 = pthread_mach_thread_np(v57);
                            LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
                            HIDWORD(buf.__r_.__value_.__r.__words[0]) = v58;
                            LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
                            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Wire.cpp";
                            WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
                            HIDWORD(buf.__r_.__value_.__r.__words[2]) = 98;
                            __int16 v87 = 2080;
                            *(void *)std::logic_error v88 = "not (m_connection.has_value())";
                            _os_log_error_impl(&dword_1BAA78000, v56, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Cannot update a connection that does not exist", (uint8_t *)&buf, 0x22u);
                          }
                          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v85);
                          __cxa_allocate_exception(0x40uLL);
                          caulk::make_string((caulk *)"Cannot update a connection that does not exist", (uint64_t)&v83);
                          std::logic_error::logic_error(&v84, &v83);
                          v84.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
                          std::logic_error::logic_error((std::logic_error *)&v100, &v84);
                          uint64_t v101 = 0;
                          uint64_t v102 = 0;
                          uint64_t v103 = 0;
                          int v104 = -1;
                          v100.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
                          v100.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
                          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v100);
                          *(void *)&v88[6] = "void AMCP::Graph::Graph_Wire::update_tgid(Thread_Group_ID)";
                          std::string v89 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Wire.cpp";
                          int v90 = 98;
                          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v78);
                          long long v81 = v78;
                          std::string v80 = &unk_1F148AA90;
                          uint64_t v82 = v79;
                          long long v78 = 0uLL;
                          uint64_t v79 = 0;
                          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
                        }
                        std::string v52 = (void **)(v35 + 46);
                        if (*((char *)v35 + 391) < 0) {
                          operator delete(*v52);
                        }
                        *(_OWORD *)std::string v52 = *(_OWORD *)&v77.__r_.__value_.__l.__data_;
                        v35[48] = v77.__r_.__value_.__r.__words[2];
                        *((unsigned char *)&v77.__r_.__value_.__s + 23) = 0;
                        v77.__r_.__value_.__s.__data_[0] = 0;
                      }
                    }
                    else if (v50)
                    {
                      goto LABEL_104;
                    }
                  }
                  uint64_t v35 = (uint64_t *)*v35;
                }
                while (v35);
              }
              AMCP::Graph::Graph::connect_path<std::reverse_iterator<std::__wrap_iter<std::shared_ptr<AMCP::Graph::Node> *>>>((void *)a1, (uint64_t)&v65, (uint64_t)v75, (uint64_t)v75, (uint64_t)v74, (uint64_t)v74, a3, a4);
              int v14 = v62;
              if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v64.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v65.__r_.__value_.__l.__data_);
              }
              goto LABEL_116;
            }
            uint64_t v31 = &__s1;
            int v30 = 1;
            int v32 = v16;
            goto LABEL_54;
          }
        }
LABEL_48:
        AMCP::Graph::Graph::connect_path<std::reverse_iterator<std::__wrap_iter<std::shared_ptr<AMCP::Graph::Node> *>>>((void *)a1, (uint64_t)&__s1, (uint64_t)v75, (uint64_t)v75, (uint64_t)v74, (uint64_t)v74, a3, a4);
      }
      else
      {
        if (!v68)
        {
          int v22 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = v22 + 1;
          std::to_string(&v100, v22);
          long long v23 = std::string::insert(&v100, 0, "Arbitrary_TGID_", 0xFuLL);
          std::string buf = *v23;
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v100.__r_.__value_.__l.__data_);
          }
          AMCP::Graph::Graph::connect_path<std::reverse_iterator<std::__wrap_iter<std::shared_ptr<AMCP::Graph::Node> *>>>((void *)a1, (uint64_t)&buf, (uint64_t)v75, (uint64_t)v75, (uint64_t)v74, (uint64_t)v74, a3, a4);
          if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_120;
          }
          uint64_t v24 = (void *)buf.__r_.__value_.__r.__words[0];
          goto LABEL_119;
        }
        AMCP::Graph::Graph::connect_path<std::__wrap_iter<std::shared_ptr<AMCP::Graph::Node> *>>((void *)a1, (uint64_t)v66, v69, v70, a3, a4);
      }
LABEL_116:
      if (!v14 || (SHIBYTE(v67) & 0x80000000) == 0) {
        goto LABEL_120;
      }
      uint64_t v24 = v66[0];
LABEL_119:
      operator delete(v24);
LABEL_120:
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
      std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      if (v13)
      {
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s1.__r_.__value_.__l.__data_);
        }
      }
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
      std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    }
  }
}

void sub_1BADAC130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,int a38,__int16 a39)
{
  if (v39 && a26 < 0) {
    operator delete(__p);
  }
  *(void *)(v40 - 160) = &a28;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 160));
  if (a37)
  {
    if (a36 < 0) {
      operator delete(a31);
    }
  }
  *(void *)(v40 - 160) = &a39;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v40 - 160));
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<AMCP::Graph::Node>>,std::shared_ptr<AMCP::Graph::Node> const*,std::shared_ptr<AMCP::Graph::Node> const*,std::shared_ptr<AMCP::Graph::Node>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  unsigned int v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  _DWORD v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>,std::shared_ptr<AMCP::Graph::Timebase>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

void AMCP::Graph::Graph::connect_path<std::__wrap_iter<std::shared_ptr<AMCP::Graph::Node> *>>(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, void *a6)
{
  if (a3 + 2 != a4)
  {
    std::string::size_type v11 = a3;
    do
    {
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string __p = *(std::string *)a2;
      }
      AMCP::Graph::Graph::connect_nodes(a1, v11, v11 + 2, (const std::string::value_type *)&__p, a6);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      a3 = v11 + 2;
      std::string::size_type v12 = v11 + 4;
      v11 += 2;
    }
    while (v12 != a4);
  }
  AMCP::Graph::Graph::connect_downstream_nodes(a1, a2, a3, a5, a6);
}

void sub_1BADAC558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Graph::connect_path<std::reverse_iterator<std::__wrap_iter<std::shared_ptr<AMCP::Graph::Node> *>>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v10 = a4;
  if (a4 - 16 != a6)
  {
    uint64_t v14 = a4;
    do
    {
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string __p = *(std::string *)a2;
      }
      uint64_t v10 = v14 - 16;
      AMCP::Graph::Graph::connect_nodes(a1, (uint64_t *)(v14 - 16), (uint64_t *)(v14 - 32), (const std::string::value_type *)&__p, a8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v14 -= 16;
    }
    while (v10 - 16 != a6);
  }
  AMCP::Graph::Graph::connect_downstream_nodes(a1, a2, (uint64_t *)(v10 - 16), a7, a8);
}

void sub_1BADAC654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<AMCP::Wire_Identifier>::__emplace_unique_key_args<AMCP::Wire_Identifier,AMCP::Wire_Identifier>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<AMCP::Wire_Identifier>::__find_equal<AMCP::Wire_Identifier>(a1, &v18, a2);
  if (!*v5)
  {
    unint64_t v6 = v5;
    unsigned int v7 = operator new(0x70uLL);
    v16[1] = a1 + 8;
    _DWORD v7[2] = *(_OWORD *)a3;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    uint64_t v8 = *(void *)(a3 + 16);
    uint64_t v9 = *(void *)(a3 + 24);
    *(void *)(a3 + 16) = 0;
    *((void *)v7 + 6) = v8;
    *((void *)v7 + 7) = v9;
    *((_DWORD *)v7 + 16) = *(_DWORD *)(a3 + 32);
    long long v10 = *(_OWORD *)(a3 + 40);
    uint64_t v11 = *(void *)(a3 + 56);
    uint64_t v12 = *(void *)(a3 + 64);
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 40) = 0;
    *((_DWORD *)v7 + 26) = *(_DWORD *)(a3 + 72);
    *(_OWORD *)((char *)v7 + 72) = v10;
    *((void *)v7 + 11) = v11;
    *((void *)v7 + 12) = v12;
    char v17 = 1;
    uint64_t v13 = v18;
    *(void *)unsigned int v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v13;
    *unint64_t v6 = (uint64_t *)v7;
    uint64_t v14 = **(void **)a1;
    if (v14)
    {
      *(void *)a1 = v14;
      uint64_t v15 = *v6;
    }
    else
    {
      uint64_t v15 = (uint64_t *)v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v15);
    ++*(void *)(a1 + 16);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<AMCP::Wire_Identifier,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<AMCP::Wire_Identifier,void *>>>>::reset[abi:ne180100]((uint64_t)v16);
  }
}

void std::__tree<AMCP::Wire_Identifier>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<AMCP::Wire_Identifier>::destroy(*a1);
    std::__tree<AMCP::Wire_Identifier>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<AMCP::Wire_Identifier,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void *std::__tree<AMCP::Wire_Identifier>::__find_equal<AMCP::Wire_Identifier>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a3 + 40;
    do
    {
      while (1)
      {
        uint64_t v8 = v4;
        uint64_t v9 = (uint64_t)(v4 + 4);
        uint64_t v10 = (uint64_t)(v4 + 9);
        if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(a3, v7, (uint64_t)(v4 + 4), (uint64_t)(v4 + 9)) & 0x80) == 0)break; {
        uint64_t v4 = (void *)*v8;
        }
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v9, v10, a3, v7) & 0x80) == 0)break; {
      uint64_t v5 = v8 + 1;
      }
      uint64_t v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void std::unique_ptr<std::__tree_node<AMCP::Wire_Identifier,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<AMCP::Wire_Identifier,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<AMCP::Wire_Identifier,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::deque<std::shared_ptr<AMCP::Graph::Node>>::push_back(void *a1, long long *a2)
{
  uint64_t v4 = (char *)a1[2];
  uint64_t v5 = (char *)a1[1];
  uint64_t v6 = v4 - v5;
  if (v4 == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 32 * (v4 - v5) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x100)
    {
      a1[4] = v9 - 256;
      uint64_t v13 = *(void *)v5;
      uint64_t v11 = v5 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1) {
            unint64_t v42 = 1;
          }
          else {
            unint64_t v42 = (uint64_t)&v4[-*a1] >> 2;
          }
          uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v42);
          int v45 = &v43[8 * (v42 >> 2)];
          int v46 = (uint64_t *)a1[1];
          uint64_t v4 = v45;
          uint64_t v47 = a1[2] - (void)v46;
          if (v47)
          {
            uint64_t v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v48 = 8 * (v47 >> 3);
            BOOL v49 = &v43[8 * (v42 >> 2)];
            do
            {
              uint64_t v50 = *v46++;
              *(void *)BOOL v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          int v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            uint64_t v4 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          uint64_t v21 = &v11[-8 * v20];
          int64_t v22 = v4 - v11;
          if (v4 == v11)
          {
            long long v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            long long v23 = (char *)a1[1];
          }
          uint64_t v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(void *)uint64_t v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      uint64_t v5 = (char *)a1[1];
      uint64_t v8 = a1[5];
      unint64_t v10 = v8 + a1[4];
      goto LABEL_84;
    }
    uint64_t v24 = v6 >> 3;
    uint64_t v25 = (char *)a1[3];
    uint64_t v26 = (char *)*a1;
    uint64_t v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      uint64_t v28 = operator new(0x1000uLL);
      mach_port_t v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5) {
            unint64_t v52 = 1;
          }
          else {
            unint64_t v52 = v27 >> 2;
          }
          uint64_t v53 = 2 * v52;
          int v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v52);
          uint64_t v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v56 = (uint64_t *)a1[1];
          int v57 = v5;
          uint64_t v58 = a1[2] - (void)v56;
          if (v58)
          {
            int v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v59 = 8 * (v58 >> 3);
            int v60 = v5;
            do
            {
              uint64_t v61 = *v56++;
              *(void *)int v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          int v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            uint64_t v5 = (char *)a1[1];
          }
        }
        *((void *)v5 - 1) = v29;
        char v63 = (char *)a1[1];
        std::string v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        uint64_t v65 = *((void *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          uint64_t v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1) {
              unint64_t v98 = 1;
            }
            else {
              unint64_t v98 = (uint64_t)&v64[-*a1] >> 2;
            }
            std::string v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v98);
            uint64_t v101 = &v99[8 * (v98 >> 2)];
            uint64_t v102 = (uint64_t *)a1[1];
            std::string v64 = v101;
            uint64_t v103 = a1[2] - (void)v102;
            if (v103)
            {
              std::string v64 = &v101[v103 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v104 = 8 * (v103 >> 3);
              uint64_t v105 = &v99[8 * (v98 >> 2)];
              do
              {
                uint64_t v106 = *v102++;
                *(void *)uint64_t v105 = v106;
                v105 += 8;
                v104 -= 8;
              }
              while (v104);
            }
            unint64_t v107 = (char *)*a1;
            *a1 = v99;
            a1[1] = v101;
            a1[2] = v64;
            a1[3] = &v99[8 * v100];
            if (v107)
            {
              operator delete(v107);
              std::string v64 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v67 = v66 >> 3;
            BOOL v16 = v66 >> 3 < -1;
            uint64_t v68 = (v66 >> 3) + 2;
            if (v16) {
              uint64_t v69 = v68;
            }
            else {
              uint64_t v69 = v67 + 1;
            }
            uint64_t v70 = -(v69 >> 1);
            uint64_t v71 = v69 >> 1;
            uint64_t v72 = &v63[-8 * v71];
            int64_t v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              char v63 = (char *)a1[1];
            }
            std::string v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(void *)std::string v64 = v65;
      }
      else
      {
        *(void *)uint64_t v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26) {
      unint64_t v30 = 1;
    }
    else {
      unint64_t v30 = v27 >> 2;
    }
    uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v30);
    uint64_t v33 = v32;
    uint64_t v34 = &v31[8 * v24];
    *(void *)&long long v35 = v31;
    *((void *)&v35 + 1) = v34;
    long long v111 = v35;
    std::string::size_type v36 = operator new(0x1000uLL);
    *(void *)&long long v37 = v34;
    *((void *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      uint64_t v38 = 8 * v24;
      *(void *)&long long v39 = v111;
      if (v6 >= 1)
      {
        uint64_t v40 = v38 >> 3;
        if (v40 >= -1) {
          unint64_t v41 = v40 + 1;
        }
        else {
          unint64_t v41 = v40 + 2;
        }
        v34 -= 8 * (v41 >> 1);
        *(void *)&long long v37 = v34;
        *((void *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      uint64_t v74 = v38 >> 2;
      if (v4 == v5) {
        unint64_t v75 = 1;
      }
      else {
        unint64_t v75 = v74;
      }
      int v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v75);
      uint64_t v34 = &v76[8 * (v75 >> 2)];
      *(void *)&long long v39 = v76;
      *((void *)&v39 + 1) = v34;
      *(void *)&long long v37 = v34;
      *((void *)&v37 + 1) = &v76[8 * v77];
      if (!v31) {
        goto LABEL_56;
      }
      long long v108 = v37;
      long long v111 = v39;
      operator delete(v31);
      long long v37 = v108;
    }
    long long v39 = v111;
LABEL_56:
    *(void *)uint64_t v34 = v36;
    *(void *)&long long v37 = v37 + 8;
    for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
    {
      uint64_t v79 = (void *)*((void *)&v39 + 1);
      if (*((void *)&v39 + 1) == (void)v39)
      {
        long long v81 = (unsigned char *)v37;
        if ((unint64_t)v37 >= *((void *)&v37 + 1))
        {
          if (*((void *)&v37 + 1) == *((void *)&v39 + 1)) {
            unint64_t v86 = 1;
          }
          else {
            unint64_t v86 = (uint64_t)(*((void *)&v37 + 1) - *((void *)&v39 + 1)) >> 2;
          }
          __int16 v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v86);
          std::string v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          std::string v89 = v80;
          uint64_t v90 = v81 - (unsigned char *)v79;
          if (v81 != (unsigned char *)v79)
          {
            std::string v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v91 = 8 * (v90 >> 3);
            uint64_t v92 = v80;
            size_t v93 = v79;
            do
            {
              uint64_t v94 = *v93++;
              *(void *)uint64_t v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(void *)&long long v39 = v87;
          *((void *)&v39 + 1) = v80;
          *(void *)&long long v37 = v89;
          *((void *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            long long v109 = v37;
            long long v113 = v39;
            operator delete(v79);
            long long v37 = v109;
            long long v39 = v113;
          }
        }
        else
        {
          uint64_t v82 = (uint64_t)(*((void *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1) {
            uint64_t v83 = v82 + 1;
          }
          else {
            uint64_t v83 = v82 + 2;
          }
          uint64_t v84 = v83 >> 1;
          uint64_t v85 = v37 + 8 * (v83 >> 1);
          std::string v80 = (char *)(v85 - (v37 - *((void *)&v39 + 1)));
          if ((void)v37 == *((void *)&v39 + 1))
          {
            long long v81 = (unsigned char *)*((void *)&v39 + 1);
          }
          else
          {
            uint64_t v110 = *((void *)&v37 + 1);
            uint64_t v112 = v39;
            memmove((void *)(v85 - (v37 - *((void *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((void *)&v39 + 1));
            *((void *)&v37 + 1) = v110;
            *(void *)&long long v39 = v112;
          }
          *((void *)&v39 + 1) = v80;
          *(void *)&long long v37 = &v81[8 * v84];
        }
      }
      else
      {
        std::string v80 = (char *)*((void *)&v39 + 1);
      }
      uint64_t v95 = *(void *)(i - 8);
      *((void *)v80 - 1) = v95;
      *((void *)&v39 + 1) -= 8;
    }
    int v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96) {
      operator delete(v96);
    }
    goto LABEL_83;
  }
LABEL_84:
  long long v97 = *a2;
  *(_OWORD *)(*(void *)&v5[(v10 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v10) = *a2;
  if (*((void *)&v97 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v97 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v8 = a1[5];
  }
  a1[5] = v8 + 1;
}

void sub_1BADACE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11)
{
  operator delete(v11);
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

void std::__tree<std::shared_ptr<AMCP::Graph::Node>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::shared_ptr<AMCP::Graph::Node>>::destroy(*a1);
    std::__tree<std::shared_ptr<AMCP::Graph::Node>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[5];
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    operator delete(a1);
  }
}

uint64_t std::deque<std::shared_ptr<AMCP::Graph::Node>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 >> 8];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 16 * v5;
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(unsigned char *)(a1 + 40) + v5);
    if (v8 != v9)
    {
      do
      {
        unint64_t v10 = *(std::__shared_weak_count **)(v8 + 8);
        if (v10)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          uint64_t v11 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v11;
          uint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      uint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *uint64_t v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 128;
    goto LABEL_16;
  }
  if (v13 == 2)
  {
    uint64_t v14 = 256;
LABEL_16:
    *(void *)(a1 + 32) = v14;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v16 = *(void *)(a1 + 16);
    if (v16 != v17) {
      *(void *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void AMCP::Graph::Graph::find_nodes_connected_to_context(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v112 = *MEMORY[0x1E4F143B8];
  uint64_t v103 = 0;
  uint64_t v102 = 0;
  uint64_t v101 = &v102;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if ((char)a3[23] < 0) {
    std::string::__init_copy_ctor_external(&v108, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else {
    std::string v108 = *(std::string *)a3;
  }
  unint64_t v98 = &v98;
  std::string v99 = &v98;
  uint64_t v100 = 0;
  unint64_t v5 = std::__list_imp<std::string>::__create_node[abi:ne180100]<std::string const&>((uint64_t)&v108);
  uint64_t v6 = v98;
  void *v5 = v98;
  v5[1] = &v98;
  v6[1] = v5;
  uint64_t v7 = v100 + 1;
  unint64_t v98 = v5;
  ++v100;
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v108.__r_.__value_.__l.__data_);
    uint64_t v7 = v100;
  }
  uint64_t v61 = a2;
  if (!v7)
  {
    uint64_t v74 = 0;
    goto LABEL_121;
  }
  int64_t v73 = (void *)(a2 + 176);
  uint64_t v74 = 0;
  uint64_t v68 = (void *)(a2 + 56);
  do
  {
    uint64_t v8 = (void **)v99;
    if (*((char *)v99 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v104, *((const std::string::value_type **)v99 + 2), *((void *)v99 + 3));
      uint64_t v8 = (void **)v99;
      uint64_t v7 = v100;
    }
    else
    {
      std::string v104 = *(std::string *)((char *)v99 + 16);
    }
    uint64_t v9 = *v8;
    v9[1] = v8[1];
    *(void *)v8[1] = v9;
    uint64_t v100 = v7 - 1;
    std::__list_imp<std::string>::__delete_node[abi:ne180100]<>(v8);
    if (!std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v73, (unsigned __int8 *)&v104)|| std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>((void *)a1, (unsigned __int8 *)&v104))
    {
      goto LABEL_13;
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)&v104, (uint64_t)&v104);
    unint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v73, (unsigned __int8 *)&v104);
    if (!v10) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v12 = *((void *)v10 + 5);
    uint64_t v11 = (std::__shared_weak_count *)*((void *)v10 + 6);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v62 = v11;
    if (!v12)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v10);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v108, "com.apple.coreaudio", "AMCP");
      uint64_t v53 = *(NSObject **)v108.__r_.__value_.__l.__data_;
      if (v108.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v108.__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      {
        int v54 = pthread_self();
        mach_port_t v55 = pthread_mach_thread_np(v54);
        LODWORD(v108.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(v108.__r_.__value_.__r.__words[0]) = v55;
        LOWORD(v108.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v108.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
        WORD1(v108.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v108.__r_.__value_.__r.__words[2]) = 884;
        *(_WORD *)long long v109 = 2080;
        *(void *)&v109[2] = "not (n)";
        _os_log_error_impl(&dword_1BAA78000, v53, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v108, 0x22u);
      }
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v79);
      std::logic_error::logic_error((std::logic_error *)&__s1, &v79);
      __s1.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
      std::logic_error::logic_error((std::logic_error *)&v105, (const std::logic_error *)&__s1);
      memset(v106, 0, sizeof(v106));
      int v107 = -1;
      v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
      v105.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v108, (uint64_t)&v105);
      *(void *)&v109[8] = "std::unordered_set<Graph_Node_UID> AMCP::Graph::Graph::find_nodes_connected_to_context(const"
                            " Graph_Node_UID &) const";
      *(void *)&v109[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
      *(_DWORD *)&v109[24] = 884;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v96);
      uint64_t v83 = &unk_1F148AA90;
      *(std::logic_error *)&v84.__r_.__value_.__l.__data_ = v96;
      v84.__r_.__value_.__r.__words[2] = v97;
      v96.__vftable = 0;
      v96.__imp_.__imp_ = 0;
      std::string::size_type v97 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    unint64_t v13 = operator new(4uLL);
    _DWORD *v13 = 0;
    uint64_t v65 = v13 + 1;
    if (*(_DWORD *)(v12 + 16) <= 1u)
    {
      operator delete(v13);
      unint64_t v13 = operator new(8uLL);
      *(void *)unint64_t v13 = 0x100000000;
      uint64_t v65 = v13 + 2;
    }
    uint64_t v66 = v12 + 56;
    char v63 = v13;
    do
    {
      uint64_t v67 = v13;
      unsigned int v75 = *v13;
      uint64_t v14 = *(void *)(v66 + 24 * v75 + 8) - *(void *)(v66 + 24 * v75);
      if (v14)
      {
        uint64_t v15 = 0;
        uint64_t v69 = 0x6DB6DB6DB6DB6DB7 * (v14 >> 4);
        int v70 = SHIBYTE(v104.__r_.__value_.__r.__words[2]);
        while (1)
        {
          if (v70 < 0) {
            std::string::__init_copy_ctor_external(&v95, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
          }
          else {
            std::string v95 = v104;
          }
          *(_OWORD *)&v108.__r_.__value_.__l.__data_ = *(_OWORD *)&v95.__r_.__value_.__l.__data_;
          std::string::size_type v16 = v95.__r_.__value_.__r.__words[2];
          memset(&v95, 0, sizeof(v95));
          v108.__r_.__value_.__r.__words[2] = v16;
          *(void *)long long v109 = v15;
          *(_DWORD *)&v109[8] = v75;
          AMCP::Graph::Wire_Index::get_wires_for_terminal(&v96, v68, (unsigned __int8 **)&v108);
          uint64_t v71 = v15;
          if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v108.__r_.__value_.__l.__data_);
          }
          uint64_t v17 = v96.__vftable;
          std::string __p = v96.__vftable;
          imp = v96.__imp_.__imp_;
          if (v96.__vftable != (std::logic_error_vtbl *)v96.__imp_.__imp_) {
            break;
          }
LABEL_103:
          if (__p) {
            operator delete(__p);
          }
          uint64_t v15 = v71 + 1;
          if (v71 + 1 == v69) {
            goto LABEL_106;
          }
        }
        while (1)
        {
          uint64_t v18 = v17->~logic_error;
          if (*((char *)v17->~logic_error + 23) < 0) {
            std::string::__init_copy_ctor_external(&v92, *(const std::string::value_type **)v18, *((void *)v18 + 1));
          }
          else {
            std::string v92 = *(std::string *)v18;
          }
          uint64_t v93 = *((void *)v18 + 3);
          int v94 = *((_DWORD *)v18 + 8);
          uint64_t v19 = (_OWORD *)((char *)v18 + 40);
          if (*((char *)v18 + 63) < 0)
          {
            std::string::__init_copy_ctor_external(&v89, *((const std::string::value_type **)v18 + 5), *((void *)v18 + 6));
          }
          else
          {
            *(_OWORD *)&v89.__r_.__value_.__l.__data_ = *v19;
            v89.__r_.__value_.__r.__words[2] = *((void *)v18 + 7);
          }
          uint64_t v20 = v3;
          uint64_t v90 = *((void *)v18 + 8);
          int v91 = *((_DWORD *)v18 + 18);
          std::string v108 = v92;
          memset(&v92, 0, sizeof(v92));
          *(void *)long long v109 = v93;
          *(_DWORD *)&v109[8] = v94;
          *(std::string *)&v109[16] = v89;
          memset(&v89, 0, sizeof(v89));
          uint64_t v21 = *((void *)v18 + 8);
          int v111 = *((_DWORD *)v18 + 18);
          uint64_t v110 = v21;
          int64_t v22 = v102;
          if (v102)
          {
            long long v23 = &v102;
            do
            {
              char v24 = std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)(v22 + 4), (uint64_t)(v22 + 9), (uint64_t)&v108, (uint64_t)&v109[16]);
              if (v24 >= 0) {
                uint64_t v25 = v22;
              }
              else {
                uint64_t v25 = v22 + 1;
              }
              if (v24 >= 0) {
                long long v23 = (uint64_t **)v22;
              }
              int64_t v22 = (uint64_t *)*v25;
            }
            while (*v25);
            if (&v102 != v23
              && (std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)&v108, (uint64_t)&v109[16], (uint64_t)(v23 + 4), (uint64_t)(v23 + 9)) & 0x80) == 0)
            {
              uint64_t v3 = v20;
              goto LABEL_89;
            }
          }
          if (v75 == 1)
          {
            uint64_t v3 = v20;
            if (*((char *)v18 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v105, *(const std::string::value_type **)v18, *((void *)v18 + 1));
              goto LABEL_57;
            }
            *(_OWORD *)&v105.__r_.__value_.__l.__data_ = *(_OWORD *)v18;
            std::string::size_type v26 = *((void *)v18 + 2);
          }
          else
          {
            uint64_t v3 = v20;
            if (*((char *)v18 + 63) < 0)
            {
              std::string::__init_copy_ctor_external(&v105, *((const std::string::value_type **)v18 + 5), *((void *)v18 + 6));
              goto LABEL_57;
            }
            *(_OWORD *)&v105.__r_.__value_.__l.__data_ = *v19;
            std::string::size_type v26 = *((void *)v18 + 7);
          }
          v105.__r_.__value_.__r.__words[2] = v26;
LABEL_57:
          std::string __s1 = v105;
          uint64_t v27 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v73, (unsigned __int8 *)&__s1);
          uint64_t v28 = v27;
          if (v27 && *(_DWORD *)(*((void *)v27 + 5) + 16))
          {
            uint64_t v27 = (AMCP::Log::Scope_Registry *)std::__list_imp<std::string>::__create_node[abi:ne180100]<std::string const&>((uint64_t)&__s1);
            mach_port_t v29 = v98;
            *(void *)uint64_t v27 = v98;
            *((void *)v27 + 1) = &v98;
            v29[1] = v27;
            unint64_t v98 = v27;
            ++v100;
          }
          uint64_t v30 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          char v31 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __s1.__r_.__value_.__l.__size_;
          }
          uint64_t v33 = v3[23];
          int v34 = (char)v33;
          if ((v33 & 0x80u) != 0) {
            uint64_t v33 = *((void *)v3 + 1);
          }
          if (size != v33) {
            goto LABEL_75;
          }
          if (v34 >= 0) {
            long long v35 = v3;
          }
          else {
            long long v35 = *(unsigned __int8 **)v3;
          }
          if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
          {
            if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
              goto LABEL_80;
            }
            p_s1 = &__s1;
            while (p_s1->__r_.__value_.__s.__data_[0] == *v35)
            {
              p_s1 = (std::string *)((char *)p_s1 + 1);
              ++v35;
              if (!--v30) {
                goto LABEL_80;
              }
            }
LABEL_75:
            if (!v28) {
              goto LABEL_80;
            }
            goto LABEL_79;
          }
          uint64_t v27 = (AMCP::Log::Scope_Registry *)memcmp(__s1.__r_.__value_.__l.__data_, v35, __s1.__r_.__value_.__l.__size_);
          if (!v28 || !v27)
          {
LABEL_80:
            if (*((unsigned char *)v18 + 408))
            {
              ++v74;
            }
            else
            {
              if (!*((_DWORD *)v18 + 32))
              {
                AMCP::Log::Scope_Registry::get(v27);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v105, "com.apple.coreaudio", "AMCP");
                int v45 = *(NSObject **)v105.__r_.__value_.__l.__data_;
                if (v105.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v105.__r_.__value_.__l.__size_);
                }
                if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
                {
                  int v46 = pthread_self();
                  mach_port_t v47 = pthread_mach_thread_np(v46);
                  if ((v3[23] & 0x80u) == 0) {
                    uint64_t v48 = v3;
                  }
                  else {
                    uint64_t v48 = *(unsigned __int8 **)v3;
                  }
                  LODWORD(v105.__r_.__value_.__l.__data_) = 67110146;
                  HIDWORD(v105.__r_.__value_.__r.__words[0]) = v47;
                  LOWORD(v105.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&v105.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
                  WORD1(v105.__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(v105.__r_.__value_.__r.__words[2]) = 921;
                  LOWORD(v106[0]) = 2080;
                  *(void *)((char *)v106 + 2) = "not (wire.get_connection_policy() != Wire_Connection_Policy::Connection_Required)";
                  WORD1(v106[1]) = 2080;
                  *(void *)((char *)&v106[1] + 4) = v48;
                  _os_log_error_impl(&dword_1BAA78000, v45, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Required wire disconnected for context %s.", (uint8_t *)&v105, 0x2Cu);
                }
                __cxa_allocate_exception(0x40uLL);
                if ((v3[23] & 0x80u) == 0) {
                  BOOL v49 = v3;
                }
                else {
                  BOOL v49 = *(unsigned __int8 **)v3;
                }
                caulk::make_string((caulk *)"Required wire disconnected for context %s.", (uint64_t)&v81, v49);
                std::logic_error::logic_error(&v82, &v81);
                v82.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
                std::logic_error::logic_error((std::logic_error *)&v83, &v82);
                v84.__r_.__value_.__r.__words[2] = 0;
                uint64_t v85 = 0;
                uint64_t v86 = 0;
                int v87 = -1;
                uint64_t v83 = &unk_1F1489CC8;
                v84.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F1489CF0;
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v105, (uint64_t)&v83);
                v106[1] = "std::unordered_set<Graph_Node_UID> AMCP::Graph::Graph::find_nodes_connected_to_context(const G"
                          "raph_Node_UID &) const";
                void v106[2] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
                int v107 = 921;
                std::vector<void *>::vector(&v77);
                int v50 = backtrace((void **)v77, (*((void *)&v77 + 1) - (void)v77) >> 3);
                std::vector<void *>::resize((char **)&v77, v50);
                v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
                *(_OWORD *)&v79.__r_.__value_.__r.__words[1] = v77;
                uint64_t v80 = v78;
                long long v77 = 0uLL;
                uint64_t v78 = 0;
                boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
              }
              AMCP::Log::Scope_Registry::get(v27);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v105, "com.apple.coreaudio", "AMCP");
              long long v37 = *(NSObject **)v105.__r_.__value_.__l.__data_;
              if (v105.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v105.__r_.__value_.__l.__size_);
              }
              if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
              {
                unint64_t v42 = pthread_self();
                mach_port_t v43 = pthread_mach_thread_np(v42);
                if ((v3[23] & 0x80u) == 0) {
                  uint64_t v44 = v3;
                }
                else {
                  uint64_t v44 = *(unsigned __int8 **)v3;
                }
                LODWORD(v105.__r_.__value_.__l.__data_) = 67109890;
                HIDWORD(v105.__r_.__value_.__r.__words[0]) = v43;
                LOWORD(v105.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&v105.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
                WORD1(v105.__r_.__value_.__r.__words[2]) = 1024;
                HIDWORD(v105.__r_.__value_.__r.__words[2]) = 922;
                LOWORD(v106[0]) = 2080;
                *(void *)((char *)v106 + 2) = v44;
                _os_log_debug_impl(&dword_1BAA78000, v37, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Transient wire disconnected for IOContext %s.", (uint8_t *)&v105, 0x22u);
              }
            }
            uint64_t v38 = (char **)std::__tree<AMCP::Wire_Identifier>::__find_equal<AMCP::Wire_Identifier>((uint64_t)&v101, &v83, (uint64_t)&v108);
            if (!*v38)
            {
              long long v39 = v38;
              uint64_t v40 = (char *)operator new(0x70uLL);
              v105.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
              v105.__r_.__value_.__l.__size_ = (std::string::size_type)&v102;
              v105.__r_.__value_.__s.__data_[16] = 0;
              std::construct_at[abi:ne180100]<AMCP::Wire_Identifier,AMCP::Wire_Identifier const&,AMCP::Wire_Identifier*>((std::string *)(v40 + 32), (long long *)&v108);
              v105.__r_.__value_.__s.__data_[16] = 1;
              unint64_t v41 = v83;
              *(void *)uint64_t v40 = 0;
              *((void *)v40 + 1) = 0;
              *((void *)v40 + 2) = v41;
              std::string *v39 = v40;
              if (*v101)
              {
                uint64_t v101 = (uint64_t **)*v101;
                uint64_t v40 = *v39;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v102, (uint64_t *)v40);
              ++v103;
              v105.__r_.__value_.__r.__words[0] = 0;
              std::unique_ptr<std::__tree_node<AMCP::Wire_Identifier,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<AMCP::Wire_Identifier,void *>>>>::reset[abi:ne180100]((uint64_t)&v105);
              if ((v31 & 0x80) == 0) {
                goto LABEL_89;
              }
LABEL_88:
              operator delete(__s1.__r_.__value_.__l.__data_);
              goto LABEL_89;
            }
            goto LABEL_87;
          }
LABEL_79:
          if (*(_DWORD *)(*((void *)v28 + 5) + 16)) {
            goto LABEL_80;
          }
LABEL_87:
          if (v31 < 0) {
            goto LABEL_88;
          }
LABEL_89:
          if ((v109[39] & 0x80000000) != 0) {
            operator delete(*(void **)&v109[16]);
          }
          if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v108.__r_.__value_.__l.__data_);
          }
          uint64_t v17 = (std::logic_error_vtbl *)((char *)v17 + 8);
          if (v17 == (std::logic_error_vtbl *)imp) {
            goto LABEL_103;
          }
        }
      }
LABEL_106:
      unint64_t v13 = v67 + 1;
    }
    while (v67 + 1 != v65);
    operator delete(v63);
    if (v62) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v62);
    }
LABEL_13:
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v104.__r_.__value_.__l.__data_);
    }
    uint64_t v7 = v100;
  }
  while (v100);
LABEL_121:
  int v51 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>((void *)(v61 + 176), v3);
  if (v51)
  {
    uint64_t v52 = *((void *)v51 + 5);
    if (*(_DWORD *)(v52 + 16))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v51);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v108, "com.apple.coreaudio", "AMCP");
      uint64_t v56 = *(NSObject **)v108.__r_.__value_.__l.__data_;
      if (v108.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v108.__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        int v57 = pthread_self();
        mach_port_t v58 = pthread_mach_thread_np(v57);
        uint64_t v59 = (void *)(v52 + 24);
        if (*(char *)(v52 + 47) < 0) {
          uint64_t v59 = (void *)*v59;
        }
        LODWORD(v108.__r_.__value_.__l.__data_) = 67110146;
        HIDWORD(v108.__r_.__value_.__r.__words[0]) = v58;
        LOWORD(v108.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v108.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"GraphNode.cpp";
        WORD1(v108.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v108.__r_.__value_.__r.__words[2]) = 654;
        *(_WORD *)long long v109 = 2080;
        *(void *)&v109[2] = "not (m_node_type == AMCP::Node_Type::IOContext)";
        *(_WORD *)&v109[10] = 2080;
        *(void *)&v109[12] = v59;
        _os_log_error_impl(&dword_1BAA78000, v56, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s set_number_of_connections called on a node that is not an IOContextNode: %s", (uint8_t *)&v108, 0x2Cu);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&__s1);
      __cxa_allocate_exception(0x40uLL);
      int v60 = (void *)(v52 + 24);
      if (*(char *)(v52 + 47) < 0) {
        int v60 = (void *)*v60;
      }
      caulk::make_string((caulk *)"set_number_of_connections called on a node that is not an IOContextNode: %s", (uint64_t)&v79, v60);
      std::logic_error::logic_error(&v96, &v79);
      v96.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error((std::logic_error *)&v105, &v96);
      memset(v106, 0, sizeof(v106));
      int v107 = -1;
      v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
      v105.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v108, (uint64_t)&v105);
      *(void *)&v109[8] = "void AMCP::Graph::Node::set_number_of_connections(size_t)";
      *(void *)&v109[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
      *(_DWORD *)&v109[24] = 654;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v104.__r_.__value_.__l.__data_);
      uint64_t v83 = &unk_1F148AA90;
      std::string v84 = v104;
      memset(&v104, 0, sizeof(v104));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    *(void *)(v52 + 104) = v74;
  }
  std::__list_imp<std::string>::clear(&v98);
  std::__tree<AMCP::Wire_Identifier>::destroy(v102);
}

void sub_1BADADFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *a12, uint64_t a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  std::__list_imp<std::string>::clear(&STACK[0x210]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a13);
  std::__tree<AMCP::Wire_Identifier>::destroy((void *)STACK[0x230]);
  _Unwind_Resume(a1);
}

void std::__list_imp<std::string>::__delete_node[abi:ne180100]<>(void **__p)
{
  if (*((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }

  operator delete(__p);
}

void *std::__list_imp<std::string>::__create_node[abi:ne180100]<std::string const&>(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  uint64_t v3 = (std::string *)(v2 + 2);
  void *v2 = 0;
  v2[1] = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v2[4] = *(void *)(a1 + 16);
  }
  return v2;
}

void sub_1BADAE390(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__list_imp<std::string>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = (void *)*result;
    v3[1] = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    while (result != v1)
    {
      uint64_t v4 = (void *)result[1];
      std::__list_imp<std::string>::__delete_node[abi:ne180100]<>((void **)result);
      uint64_t result = v4;
    }
  }
  return result;
}

void AMCP::Graph::Graph::update_context(void *a1, unsigned __int8 *a2, void *a3, uint64_t a4)
{
  void (***v198)(std::string *__return_ptr);
  void *v199;
  std::__shared_weak_count *v200;
  std::string v201;
  unsigned char v202[30];
  uint64_t v203;

  v203 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a1 + 22;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(a1 + 22, a2);
  if (!v8)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v201, "com.apple.coreaudio", "AMCP");
    std::string v142 = *(NSObject **)v201.__r_.__value_.__l.__data_;
    if (v201.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v201.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
    {
      std::string v143 = pthread_self();
      mach_port_t v144 = pthread_mach_thread_np(v143);
      if ((a2[23] & 0x80u) == 0) {
        mach_port_t v145 = (uint64_t *)a2;
      }
      else {
        mach_port_t v145 = *(uint64_t **)a2;
      }
      LODWORD(v201.__r_.__value_.__l.__data_) = 67110146;
      HIDWORD(v201.__r_.__value_.__r.__words[0]) = v144;
      LOWORD(v201.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v201.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
      WORD1(v201.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v201.__r_.__value_.__r.__words[2]) = 1011;
      *(_WORD *)v202 = 2080;
      *(void *)&void v202[2] = "not (m_nodes_by_uid.find(root_node) != m_nodes_by_uid.end())";
      *(_WORD *)&v202[10] = 2080;
      *(void *)&v202[12] = v145;
      _os_log_error_impl(&dword_1BAA78000, v142, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Root node not found in graph: %s", (uint8_t *)&v201, 0x2Cu);
    }
    __cxa_allocate_exception(0x40uLL);
    if ((a2[23] & 0x80u) == 0) {
      uint64_t v146 = (uint64_t *)a2;
    }
    else {
      uint64_t v146 = *(uint64_t **)a2;
    }
    caulk::make_string((caulk *)"Root node not found in graph: %s", (uint64_t)&v177, v146);
    std::logic_error::logic_error((std::logic_error *)v186, &v177);
    *(void *)v186 = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error(&v194, (const std::logic_error *)v186);
    v196 = 0;
    uint64_t v197 = 0;
    uint64_t v198 = 0;
    LODWORD(v199) = -1;
    v194.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    v195 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v201, (uint64_t)&v194);
    *(void *)&v202[8] = "void AMCP::Graph::Graph::update_context(const Graph_Node_UID &, const std::function<Timebase_R"
                          "ef (const Graph_Node_UID &)> &, std::vector<std::string> &, Resource_Counts &)";
    *(void *)&v202[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
    *(_DWORD *)&v202[24] = 1011;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v175);
    *(_OWORD *)&__p[8] = *(_OWORD *)v175;
    *(void *)std::string __p = &unk_1F148AA90;
    *(void *)&__p[24] = *(void *)&v175[16];
    memset(v175, 0, 24);
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)v8 + 6);
  uint64_t v165 = *((void *)v8 + 5);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v161 = v9;
  if (*(_DWORD *)(v165 + 16))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v201, "com.apple.coreaudio", "AMCP");
    uint64_t v147 = *(NSObject **)v201.__r_.__value_.__l.__data_;
    if (v201.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v201.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
    {
      int v148 = pthread_self();
      mach_port_t v149 = pthread_mach_thread_np(v148);
      if ((a2[23] & 0x80u) == 0) {
        uint64_t v150 = (uint64_t *)a2;
      }
      else {
        uint64_t v150 = *(uint64_t **)a2;
      }
      LODWORD(v201.__r_.__value_.__l.__data_) = 67110146;
      HIDWORD(v201.__r_.__value_.__r.__words[0]) = v149;
      LOWORD(v201.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v201.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
      WORD1(v201.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v201.__r_.__value_.__r.__words[2]) = 1013;
      *(_WORD *)v202 = 2080;
      *(void *)&void v202[2] = "not (root->get_node_type() == AMCP::Node_Type::IOContext)";
      *(_WORD *)&v202[10] = 2080;
      *(void *)&v202[12] = v150;
      _os_log_error_impl(&dword_1BAA78000, v147, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Root node must be an IOContextNode: %s", (uint8_t *)&v201, 0x2Cu);
    }
    __cxa_allocate_exception(0x40uLL);
    if ((a2[23] & 0x80u) == 0) {
      uint64_t v151 = (uint64_t *)a2;
    }
    else {
      uint64_t v151 = *(uint64_t **)a2;
    }
    caulk::make_string((caulk *)"Root node must be an IOContextNode: %s", (uint64_t)&v177, v151);
    std::logic_error::logic_error((std::logic_error *)v186, &v177);
    *(void *)v186 = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error(&v194, (const std::logic_error *)v186);
    v196 = 0;
    uint64_t v197 = 0;
    uint64_t v198 = 0;
    LODWORD(v199) = -1;
    v194.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    v195 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v201, (uint64_t)&v194);
    *(void *)&v202[8] = "void AMCP::Graph::Graph::update_context(const Graph_Node_UID &, const std::function<Timebase_R"
                          "ef (const Graph_Node_UID &)> &, std::vector<std::string> &, Resource_Counts &)";
    *(void *)&v202[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
    *(_DWORD *)&v202[24] = 1013;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v175);
    *(_OWORD *)&__p[8] = *(_OWORD *)v175;
    *(void *)std::string __p = &unk_1F148AA90;
    *(void *)&__p[24] = *(void *)&v175[16];
    memset(v175, 0, 24);
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  AMCP::Graph::Graph::find_nodes_connected_to_context((uint64_t)&v177, (uint64_t)a1, a2);
  if (!*(void *)(v165 + 104))
  {
    uint64_t v104 = *(void *)(v165 + 144);
    uint64_t v103 = *(std::__shared_weak_count **)(v165 + 152);
    if (v103)
    {
      atomic_fetch_add_explicit(&v103->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v103);
    }
    if (v104)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v103);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v201, "com.apple.coreaudio", "AMCP");
      long long v157 = *(NSObject **)v201.__r_.__value_.__l.__data_;
      if (v201.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v201.__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
      {
        long long v158 = pthread_self();
        mach_port_t v159 = pthread_mach_thread_np(v158);
        LODWORD(v201.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(v201.__r_.__value_.__r.__words[0]) = v159;
        LOWORD(v201.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v201.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
        WORD1(v201.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v201.__r_.__value_.__r.__words[2]) = 1057;
        *(_WORD *)v202 = 2080;
        *(void *)&void v202[2] = "not (root->get_clock() == nullptr)";
        _os_log_error_impl(&dword_1BAA78000, v157, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Unsafe: we have an old clock because a new one was not calculated.", (uint8_t *)&v201, 0x22u);
      }
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Unsafe: we have an old clock because a new one was not calculated.", (uint64_t)v175);
      std::logic_error::logic_error((std::logic_error *)&v187, (const std::string *)v175);
      v187.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
      std::logic_error::logic_error(&v194, (const std::logic_error *)&v187);
      v196 = 0;
      uint64_t v197 = 0;
      uint64_t v198 = 0;
      LODWORD(v199) = -1;
      v194.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      v195 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v201, (uint64_t)&v194);
      *(void *)&v202[8] = "void AMCP::Graph::Graph::update_context(const Graph_Node_UID &, const std::function<Timebase"
                            "_Ref (const Graph_Node_UID &)> &, std::vector<std::string> &, Resource_Counts &)";
      *(void *)&v202[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
      *(_DWORD *)&v202[24] = 1057;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v186);
      *(_OWORD *)&__p[8] = *(_OWORD *)v186;
      *(void *)std::string __p = &unk_1F148AA90;
      *(void *)&__p[24] = *(void *)&v186[16];
      memset(v186, 0, 24);
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    goto LABEL_200;
  }
  uint64_t v160 = a4;
  std::string v163 = (uint64_t *)a2;
  memset(v175, 0, sizeof(v175));
  float v176 = 1.0;
  unint64_t v10 = (unsigned __int8 *)v177.__r_.__value_.__r.__words[2];
  if (!v177.__r_.__value_.__r.__words[2]) {
    goto LABEL_59;
  }
  v170 = v7;
  do
  {
    uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v7, v10 + 16);
    if (!v11) {
      goto LABEL_53;
    }
    uint64_t v12 = v11;
    unint64_t v13 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v10 + 16));
    unint64_t v14 = v13;
    unint64_t v15 = *(void *)&v175[8];
    if (!*(void *)&v175[8]) {
      goto LABEL_26;
    }
    uint8x8_t v16 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v175[8]);
    v16.i16[0] = vaddlv_u8(v16);
    unint64_t v17 = v16.u32[0];
    if (v16.u32[0] > 1uLL)
    {
      unint64_t v4 = v13;
      if (v13 >= *(void *)&v175[8]) {
        unint64_t v4 = v13 % *(void *)&v175[8];
      }
    }
    else
    {
      unint64_t v4 = (*(void *)&v175[8] - 1) & v13;
    }
    uint64_t v18 = *(unsigned __int8 ***)(*(void *)v175 + 8 * v4);
    if (!v18 || (uint64_t v19 = *v18) == 0)
    {
LABEL_26:
      uint64_t v21 = operator new(0x38uLL);
      v201.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      v201.__r_.__value_.__l.__size_ = (std::string::size_type)&v175[16];
      v201.__r_.__value_.__s.__data_[16] = 0;
      *uint64_t v21 = 0;
      v21[1] = v14;
      int64_t v22 = (std::string *)(v21 + 2);
      if ((char)v10[39] < 0)
      {
        std::string::__init_copy_ctor_external(v22, *((const std::string::value_type **)v10 + 2), *((void *)v10 + 3));
      }
      else
      {
        long long v23 = *((_OWORD *)v10 + 1);
        v21[4] = *((void *)v10 + 4);
        *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
      }
      v21[5] = *((void *)v12 + 5);
      uint64_t v24 = *((void *)v12 + 6);
      v21[6] = v24;
      if (v24) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
      }
      v201.__r_.__value_.__s.__data_[16] = 1;
      float v25 = (float)(unint64_t)(*(void *)&v175[24] + 1);
      if (!v15 || (float)(v176 * (float)v15) < v25)
      {
        BOOL v26 = (v15 & (v15 - 1)) != 0;
        if (v15 < 3) {
          BOOL v26 = 1;
        }
        unint64_t v27 = v26 | (2 * v15);
        unint64_t v28 = vcvtps_u32_f32(v25 / v176);
        if (v27 <= v28) {
          size_t v29 = v28;
        }
        else {
          size_t v29 = v27;
        }
        std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)v175, v29);
        unint64_t v15 = *(void *)&v175[8];
        if ((*(void *)&v175[8] & (*(void *)&v175[8] - 1)) != 0)
        {
          if (v14 >= *(void *)&v175[8]) {
            unint64_t v4 = v14 % *(void *)&v175[8];
          }
          else {
            unint64_t v4 = v14;
          }
        }
        else
        {
          unint64_t v4 = (*(void *)&v175[8] - 1) & v14;
        }
      }
      uint64_t v30 = *(void *)v175;
      char v31 = *(void **)(*(void *)v175 + 8 * v4);
      if (v31)
      {
        *uint64_t v21 = *v31;
      }
      else
      {
        *uint64_t v21 = *(void *)&v175[16];
        *(void *)&v175[16] = v21;
        *(void *)(v30 + 8 * v4) = &v175[16];
        if (!*v21)
        {
LABEL_52:
          v201.__r_.__value_.__r.__words[0] = 0;
          ++*(void *)&v175[24];
          std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v201);
          goto LABEL_53;
        }
        unint64_t v32 = *(void *)(*v21 + 8);
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v32 >= v15) {
            v32 %= v15;
          }
        }
        else
        {
          v32 &= v15 - 1;
        }
        char v31 = (void *)(*(void *)v175 + 8 * v32);
      }
      void *v31 = v21;
      goto LABEL_52;
    }
    while (1)
    {
      unint64_t v20 = *((void *)v19 + 1);
      if (v20 == v14) {
        break;
      }
      if (v17 > 1)
      {
        if (v20 >= v15) {
          v20 %= v15;
        }
      }
      else
      {
        v20 &= v15 - 1;
      }
      if (v20 != v4)
      {
LABEL_25:
        uint64_t v7 = v170;
        goto LABEL_26;
      }
LABEL_24:
      uint64_t v19 = *(unsigned __int8 **)v19;
      if (!v19) {
        goto LABEL_25;
      }
    }
    if (!std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v19 + 16, v10 + 16)) {
      goto LABEL_24;
    }
    uint64_t v34 = *((void *)v12 + 5);
    uint64_t v33 = *((void *)v12 + 6);
    if (v33) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
    }
    long long v35 = (std::__shared_weak_count *)*((void *)v19 + 6);
    *((void *)v19 + 5) = v34;
    *((void *)v19 + 6) = v33;
    uint64_t v7 = v170;
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
LABEL_53:
    unint64_t v10 = *(unsigned __int8 **)v10;
  }
  while (v10);
LABEL_59:
  *(_OWORD *)long long v172 = 0u;
  *(_OWORD *)std::logic_error v173 = 0u;
  int v174 = v179;
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)v172, v177.__r_.__value_.__l.__size_);
  std::string::size_type v36 = (unsigned __int8 *)v177.__r_.__value_.__r.__words[2];
  if (v177.__r_.__value_.__r.__words[2])
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v172, v36 + 16, (uint64_t)(v36 + 16));
      std::string::size_type v36 = *(unsigned __int8 **)v36;
    }
    while (v36);
  }
  long long v37 = (char *)(a1 + 7);
  int v38 = (int)v173[1];
  long long v39 = v163;
  if (v173[1])
  {
    while (1)
    {
      v194.__vftable = (std::logic_error_vtbl *)v175;
      v194.__imp_.__imp_ = v37;
      uint64_t v40 = a3[3];
      if (!v40) {
        goto LABEL_65;
      }
      if ((void *)v40 != a3) {
        break;
      }
      uint64_t v198 = (void (***)(std::string *__return_ptr))&v195;
      (*(void (**)(void *))(*a3 + 24))(a3);
LABEL_67:
      int v166 = v38;
      unint64_t v41 = (std::__shared_weak_count *)a1[36];
      v199 = (void *)a1[35];
      char v200 = v41;
      if (v41) {
        atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v42 = (unsigned __int8 *)v173[0];
      if (!v173[0]) {
        goto LABEL_158;
      }
      do
      {
LABEL_70:
        mach_port_t v43 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v175, v42 + 16);
        if (!v43) {
          goto LABEL_151;
        }
        uint64_t v44 = *((void *)v43 + 5);
        int v45 = (std::__shared_weak_count *)*((void *)v43 + 6);
        if (v45) {
          atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        mach_port_t v47 = v194.__vftable;
        imp = (char *)v194.__imp_.__imp_;
        long long v193 = 0uLL;
        char v192 = 0;
        int v48 = *(_DWORD *)(v44 + 136);
        if (v48 == 2)
        {
          AMCP::Graph::Node::get_get_clock_proc((AMCP::Graph::Node *)&v201, *(void *)(v44 + 192));
          uint64_t v53 = *(void *)v202;
          int v54 = (AMCP::Log::Scope_Registry *)std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__value_func[abi:ne180100](&v201);
          if (!v53)
          {
            AMCP::Log::Scope_Registry::get(v54);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v201, "com.apple.coreaudio", "AMCP");
            int v118 = *(NSObject **)v201.__r_.__value_.__l.__data_;
            if (v201.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v201.__r_.__value_.__l.__size_);
            }
            if (os_log_type_enabled(v118, OS_LOG_TYPE_ERROR))
            {
              int v119 = pthread_self();
              mach_port_t v120 = pthread_mach_thread_np(v119);
              std::string::size_type v121 = (void *)(v44 + 24);
              if (*(char *)(v44 + 47) < 0) {
                std::string::size_type v121 = (void *)*v121;
              }
              LODWORD(v201.__r_.__value_.__l.__data_) = 67110146;
              HIDWORD(v201.__r_.__value_.__r.__words[0]) = v120;
              LOWORD(v201.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&v201.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"GraphNode.cpp";
              WORD1(v201.__r_.__value_.__r.__words[2]) = 1024;
              HIDWORD(v201.__r_.__value_.__r.__words[2]) = 345;
              *(_WORD *)v202 = 2080;
              *(void *)&void v202[2] = "not (get_get_clock_proc() != nullptr)";
              *(_WORD *)&v202[10] = 2080;
              *(void *)&v202[12] = v121;
              _os_log_error_impl(&dword_1BAA78000, v118, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Node %s is its own clock source but doesn't provide a clock function in its proc", (uint8_t *)&v201, 0x2Cu);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v180);
            __cxa_allocate_exception(0x40uLL);
            uint64_t v122 = (void *)(v44 + 24);
            if (*(char *)(v44 + 47) < 0) {
              uint64_t v122 = (void *)*v122;
            }
            caulk::make_string((caulk *)"Node %s is its own clock source but doesn't provide a clock function in its proc", (uint64_t)&v187, v122);
            std::logic_error::logic_error((std::logic_error *)&v182, &v187);
            v182.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
            std::logic_error::logic_error((std::logic_error *)__p, (const std::logic_error *)&v182);
            uint64_t v189 = 0;
            *(void *)&__p[24] = 0;
            uint64_t v190 = 0;
            int v191 = -1;
            *(void *)std::string __p = &unk_1F1489CC8;
            *(void *)&__p[16] = &unk_1F1489CF0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v201, (uint64_t)__p);
            *(void *)&v202[8] = "BOOL AMCP::Graph::Node::calculate_clocks_from_wires(const Node_Map &, Wire_Index &, co"
                                  "nst std::function<Timebase_Ref (const Graph_Node_UID &)> &, const std::shared_ptr<Meta"
                                  "_Timebase_Factory> &)";
            *(void *)&v202[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
            *(_DWORD *)&v202[24] = 345;
            applesauce::backtrace::snapshot_N<64>::snapshot_N(&v185.__r_.__value_.__l.__data_);
            *(std::string *)&v186[8] = v185;
            *(void *)v186 = &unk_1F148AA90;
            memset(&v185, 0, sizeof(v185));
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
          }
          AMCP::Graph::Node::get_get_clock_proc(v54, *(void *)(v44 + 192));
          if (!*(void *)v202) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(std::string *__return_ptr))(**(void **)v202 + 48))(&v182);
          mach_port_t v55 = (AMCP::Log::Scope_Registry *)std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__value_func[abi:ne180100](&v201);
          std::string::size_type v56 = v182.__r_.__value_.__r.__words[0];
          if (!v182.__r_.__value_.__r.__words[0])
          {
            AMCP::Log::Scope_Registry::get(v55);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v201, "com.apple.coreaudio", "AMCP");
            std::string v124 = *(NSObject **)v201.__r_.__value_.__l.__data_;
            if (v201.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v201.__r_.__value_.__l.__size_);
            }
            if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
            {
              uint64_t v125 = pthread_self();
              mach_port_t v126 = pthread_mach_thread_np(v125);
              std::string v127 = (void *)(v44 + 24);
              if (*(char *)(v44 + 47) < 0) {
                std::string v127 = (void *)*v127;
              }
              LODWORD(v201.__r_.__value_.__l.__data_) = 67110146;
              HIDWORD(v201.__r_.__value_.__r.__words[0]) = v126;
              LOWORD(v201.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&v201.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"GraphNode.cpp";
              WORD1(v201.__r_.__value_.__r.__words[2]) = 1024;
              HIDWORD(v201.__r_.__value_.__r.__words[2]) = 347;
              *(_WORD *)v202 = 2080;
              *(void *)&void v202[2] = "not (clock_source != nullptr)";
              *(_WORD *)&v202[10] = 2080;
              *(void *)&v202[12] = v127;
              _os_log_error_impl(&dword_1BAA78000, v124, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Calculated clock is null for node %s", (uint8_t *)&v201, 0x2Cu);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v183);
            __cxa_allocate_exception(0x40uLL);
            uint64_t v128 = (void *)(v44 + 24);
            if (*(char *)(v44 + 47) < 0) {
              uint64_t v128 = (void *)*v128;
            }
            caulk::make_string((caulk *)"Calculated clock is null for node %s", (uint64_t)&v187, v128);
            std::logic_error::logic_error(&v180, &v187);
            v180.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
            std::logic_error::logic_error((std::logic_error *)__p, &v180);
            uint64_t v189 = 0;
            *(void *)&__p[24] = 0;
            uint64_t v190 = 0;
            int v191 = -1;
            *(void *)std::string __p = &unk_1F1489CC8;
            *(void *)&__p[16] = &unk_1F1489CF0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v201, (uint64_t)__p);
            *(void *)&v202[8] = "BOOL AMCP::Graph::Node::calculate_clocks_from_wires(const Node_Map &, Wire_Index &, co"
                                  "nst std::function<Timebase_Ref (const Graph_Node_UID &)> &, const std::shared_ptr<Meta"
                                  "_Timebase_Factory> &)";
            *(void *)&v202[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
            *(_DWORD *)&v202[24] = 347;
            applesauce::backtrace::snapshot_N<64>::snapshot_N(&v185.__r_.__value_.__l.__data_);
            *(std::string *)&v186[8] = v185;
            *(void *)v186 = &unk_1F148AA90;
            memset(&v185, 0, sizeof(v185));
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
          }
          std::string::size_type size = v182.__r_.__value_.__l.__size_;
          if (v182.__r_.__value_.__l.__size_) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v182.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
          }
          mach_port_t v58 = (std::__shared_weak_count *)*((void *)&v193 + 1);
          *(void *)&long long v193 = v56;
          *((void *)&v193 + 1) = size;
          if (v58) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v58);
          }
          uint64_t v59 = (std::__shared_weak_count *)v182.__r_.__value_.__l.__size_;
          if (!v182.__r_.__value_.__l.__size_) {
            goto LABEL_98;
          }
          goto LABEL_97;
        }
        if (v48 != 1)
        {
          if (!v48)
          {
            BOOL v49 = operator new(0x20uLL);
            *BOOL v49 = &unk_1F14700B8;
            v49[1] = v47;
            v49[2] = &v193;
            void v49[3] = &v192;
            *(void *)v202 = v49;
            AMCP::Graph::Node::for_each_connection(v44, imp, (uint64_t)&v201);
            std::__function::__value_func<void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::~__value_func[abi:ne180100](&v201);
          }
          goto LABEL_98;
        }
        if (!v198) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        int v50 = (void *)(v44 + 112);
        (*v198)[6](&v201);
        long long v51 = *(_OWORD *)&v201.__r_.__value_.__l.__data_;
        *(_OWORD *)&v201.__r_.__value_.__l.__data_ = 0uLL;
        uint64_t v52 = (std::__shared_weak_count *)*((void *)&v193 + 1);
        long long v193 = v51;
        if (v52)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v52);
          if (v201.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v201.__r_.__value_.__l.__size_);
          }
          if ((void)v193) {
            goto LABEL_98;
          }
LABEL_93:
          int v60 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v47, (unsigned __int8 *)(v44 + 112));
          if (!v60)
          {
            AMCP::Log::Scope_Registry::get(0);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v201, "com.apple.coreaudio", "AMCP");
            std::string v135 = *(NSObject **)v201.__r_.__value_.__l.__data_;
            if (v201.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v201.__r_.__value_.__l.__size_);
            }
            if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
            {
              uint64_t v136 = pthread_self();
              mach_port_t v137 = pthread_mach_thread_np(v136);
              long long v138 = (void *)(v44 + 24);
              if (*(char *)(v44 + 47) < 0) {
                long long v138 = (void *)*v138;
              }
              uint64_t v139 = (void *)(v44 + 112);
              if (*(char *)(v44 + 135) < 0) {
                uint64_t v139 = (void *)*v50;
              }
              LODWORD(v201.__r_.__value_.__l.__data_) = 67110402;
              HIDWORD(v201.__r_.__value_.__r.__words[0]) = v137;
              LOWORD(v201.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&v201.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"GraphNode.cpp";
              WORD1(v201.__r_.__value_.__r.__words[2]) = 1024;
              HIDWORD(v201.__r_.__value_.__r.__words[2]) = 338;
              *(_WORD *)v202 = 2080;
              *(void *)&void v202[2] = "not (nodes.find(m_clock_terminal) != nodes.end())";
              *(_WORD *)&v202[10] = 2080;
              *(void *)&v202[12] = v138;
              *(_WORD *)&v202[20] = 2080;
              *(void *)&v202[22] = v139;
              _os_log_error_impl(&dword_1BAA78000, v135, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s %s: clock node not found in graph: %s", (uint8_t *)&v201, 0x36u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v180);
            __cxa_allocate_exception(0x40uLL);
            std::string v140 = (void *)(v44 + 24);
            if (*(char *)(v44 + 47) < 0) {
              std::string v140 = (void *)*v140;
            }
            if (*(char *)(v44 + 135) < 0) {
              int v50 = (void *)*v50;
            }
            caulk::make_string((caulk *)"%s: clock node not found in graph: %s", (uint64_t)&v187, v140, v50);
            std::logic_error::logic_error((std::logic_error *)&v182, &v187);
            v182.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
            std::logic_error::logic_error((std::logic_error *)__p, (const std::logic_error *)&v182);
            uint64_t v189 = 0;
            *(void *)&__p[24] = 0;
            uint64_t v190 = 0;
            int v191 = -1;
            *(void *)std::string __p = &unk_1F1489CC8;
            *(void *)&__p[16] = &unk_1F1489CF0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v201, (uint64_t)__p);
            *(void *)&v202[8] = "BOOL AMCP::Graph::Node::calculate_clocks_from_wires(const Node_Map &, Wire_Index &, co"
                                  "nst std::function<Timebase_Ref (const Graph_Node_UID &)> &, const std::shared_ptr<Meta"
                                  "_Timebase_Factory> &)";
            *(void *)&v202[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
            *(_DWORD *)&v202[24] = 338;
            applesauce::backtrace::snapshot_N<64>::snapshot_N(&v185.__r_.__value_.__l.__data_);
            *(std::string *)&v186[8] = v185;
            *(void *)v186 = &unk_1F148AA90;
            memset(&v185, 0, sizeof(v185));
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
          }
          uint64_t v61 = *((void *)v60 + 5);
          uint64_t v63 = *(void *)(v61 + 144);
          uint64_t v62 = *(void *)(v61 + 152);
          if (v62) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v59 = (std::__shared_weak_count *)*((void *)&v193 + 1);
          *(void *)&long long v193 = v63;
          *((void *)&v193 + 1) = v62;
          if (!v59) {
            goto LABEL_98;
          }
LABEL_97:
          std::__shared_weak_count::__release_shared[abi:ne180100](v59);
          goto LABEL_98;
        }
        if (!(void)v51) {
          goto LABEL_93;
        }
LABEL_98:
        if ((void)v193) {
          BOOL v64 = v192 == 0;
        }
        else {
          BOOL v64 = 0;
        }
        char v65 = v64;
        if (!v64) {
          goto LABEL_146;
        }
        *(_OWORD *)&v187.__r_.__value_.__r.__words[1] = 0uLL;
        v187.__r_.__value_.__r.__words[0] = (std::string::size_type)&v187.__r_.__value_.__l.__size_;
        *(void *)std::string __p = &v187;
        std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&__p[8], *(void *)v44, *(std::__shared_weak_count **)(v44 + 8));
        *(void *)v202 = 0;
        uint64_t v66 = (char *)operator new(0x20uLL);
        *(void *)uint64_t v66 = &unk_1F1470138;
        *(std::string *)(v66 + 8) = *(std::string *)__p;
        *(_OWORD *)&__p[8] = 0uLL;
        *(void *)v202 = v66;
        AMCP::Graph::Node::for_each_connection(v44, imp, (uint64_t)&v201);
        std::__function::__value_func<void ()(AMCP::Direction,AMCP::Graph::Graph_Wire::Connection const&)>::~__value_func[abi:ne180100](&v201);
        uint64_t v67 = *(AMCP::Log::Scope_Registry **)&__p[16];
        if (*(void *)&__p[16]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[16]);
        }
        if (v187.__r_.__value_.__r.__words[2] != 1)
        {
          if (!v187.__r_.__value_.__r.__words[2])
          {
            AMCP::Log::Scope_Registry::get(v67);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v201, "com.apple.coreaudio", "AMCP");
            uint64_t v106 = *(NSObject **)v201.__r_.__value_.__l.__data_;
            if (v201.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v201.__r_.__value_.__l.__size_);
            }
            if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
            {
              int v107 = pthread_self();
              mach_port_t v108 = pthread_mach_thread_np(v107);
              if (*(char *)(v44 + 47) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v44 + 24), *(void *)(v44 + 32));
              }
              else
              {
                *(_OWORD *)std::string __p = *(_OWORD *)(v44 + 24);
                *(void *)&__p[16] = *(void *)(v44 + 40);
              }
              uint64_t v123 = __p;
              if (__p[23] < 0) {
                uint64_t v123 = *(unsigned char **)__p;
              }
              LODWORD(v201.__r_.__value_.__l.__data_) = 67110146;
              HIDWORD(v201.__r_.__value_.__r.__words[0]) = v108;
              LOWORD(v201.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&v201.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"GraphNode.cpp";
              WORD1(v201.__r_.__value_.__r.__words[2]) = 1024;
              HIDWORD(v201.__r_.__value_.__r.__words[2]) = 359;
              *(_WORD *)v202 = 2080;
              *(void *)&void v202[2] = "not (not terminal_sample_rates.empty())";
              *(_WORD *)&v202[10] = 2080;
              *(void *)&v202[12] = v123;
              _os_log_error_impl(&dword_1BAA78000, v106, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Node is missing terminals: %s", (uint8_t *)&v201, 0x2Cu);
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v184);
            __cxa_allocate_exception(0x40uLL);
            if (*(char *)(v44 + 47) < 0) {
              std::string::__init_copy_ctor_external(&v182, *(const std::string::value_type **)(v44 + 24), *(void *)(v44 + 32));
            }
            else {
              std::string v182 = *(std::string *)(v44 + 24);
            }
            unint64_t v133 = &v182;
            if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              unint64_t v133 = (std::string *)v182.__r_.__value_.__r.__words[0];
            }
            caulk::make_string((caulk *)"Node is missing terminals: %s", (uint64_t)&v185, v133);
            std::logic_error::logic_error(&v183, &v185);
            v183.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
            std::logic_error::logic_error((std::logic_error *)__p, &v183);
            uint64_t v189 = 0;
            *(void *)&__p[24] = 0;
            uint64_t v190 = 0;
            int v191 = -1;
            *(void *)std::string __p = &unk_1F1489CC8;
            *(void *)&__p[16] = &unk_1F1489CF0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v201, (uint64_t)__p);
            *(void *)&v202[8] = "BOOL AMCP::Graph::Node::calculate_clocks_from_wires(const Node_Map &, Wire_Index &, co"
                                  "nst std::function<Timebase_Ref (const Graph_Node_UID &)> &, const std::shared_ptr<Meta"
                                  "_Timebase_Factory> &)";
            *(void *)&v202[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
            *(_DWORD *)&v202[24] = 359;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v180);
            *(std::logic_error *)&v186[8] = v180;
            *(void *)v186 = &unk_1F148AA90;
            *(void *)&v186[24] = v181;
            v180.__vftable = 0;
            v180.__imp_.__imp_ = 0;
            uint64_t v181 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
          }
          AMCP::Log::Scope_Registry::get(v67);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v201, "com.apple.coreaudio", "AMCP");
          long long v109 = *(NSObject **)v201.__r_.__value_.__l.__data_;
          if (v201.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v201.__r_.__value_.__l.__size_);
          }
          if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
          {
            uint64_t v110 = pthread_self();
            mach_port_t v111 = pthread_mach_thread_np(v110);
            if (*(char *)(v44 + 47) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v44 + 24), *(void *)(v44 + 32));
            }
            else
            {
              *(_OWORD *)std::string __p = *(_OWORD *)(v44 + 24);
              *(void *)&__p[16] = *(void *)(v44 + 40);
            }
            int v129 = __p;
            if (__p[23] < 0) {
              int v129 = *(unsigned char **)__p;
            }
            uint64_t v130 = *(void *)(v187.__r_.__value_.__r.__words[0] + 32);
            LODWORD(v201.__r_.__value_.__l.__data_) = 67110402;
            HIDWORD(v201.__r_.__value_.__r.__words[0]) = v111;
            LOWORD(v201.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v201.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"GraphNode.cpp";
            WORD1(v201.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(v201.__r_.__value_.__r.__words[2]) = 360;
            *(_WORD *)v202 = 2080;
            *(void *)&void v202[2] = "not (terminal_sample_rates.size() == 1)";
            *(_WORD *)&v202[10] = 2080;
            *(void *)&v202[12] = v129;
            *(_WORD *)&v202[20] = 2048;
            *(void *)&v202[22] = v130;
            _os_log_error_impl(&dword_1BAA78000, v109, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s All terminals for node %s should have the same sample rate. (%0.0f)", (uint8_t *)&v201, 0x36u);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v184);
          __cxa_allocate_exception(0x40uLL);
          if (*(char *)(v44 + 47) < 0) {
            std::string::__init_copy_ctor_external(&v182, *(const std::string::value_type **)(v44 + 24), *(void *)(v44 + 32));
          }
          else {
            std::string v182 = *(std::string *)(v44 + 24);
          }
          int v134 = &v182;
          if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v134 = (std::string *)v182.__r_.__value_.__r.__words[0];
          }
          caulk::make_string((caulk *)"All terminals for node %s should have the same sample rate. (%0.0f)", (uint64_t)&v185, v134, *(void *)(v187.__r_.__value_.__r.__words[0] + 32));
          std::logic_error::logic_error(&v183, &v185);
          v183.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)__p, &v183);
          uint64_t v189 = 0;
          *(void *)&__p[24] = 0;
          uint64_t v190 = 0;
          int v191 = -1;
          *(void *)std::string __p = &unk_1F1489CC8;
          *(void *)&__p[16] = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v201, (uint64_t)__p);
          *(void *)&v202[8] = "BOOL AMCP::Graph::Node::calculate_clocks_from_wires(const Node_Map &, Wire_Index &, cons"
                                "t std::function<Timebase_Ref (const Graph_Node_UID &)> &, const std::shared_ptr<Meta_Tim"
                                "ebase_Factory> &)";
          *(void *)&v202[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
          *(_DWORD *)&v202[24] = 360;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v180);
          *(std::logic_error *)&v186[8] = v180;
          *(void *)v186 = &unk_1F148AA90;
          *(void *)&v186[24] = v181;
          v180.__vftable = 0;
          v180.__imp_.__imp_ = 0;
          uint64_t v181 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        double v68 = *(double *)(v187.__r_.__value_.__r.__words[0] + 32);
        if (v68 == (*(double (**)(void))(*(void *)v193 + 152))(v193)) {
          goto LABEL_141;
        }
        if (*(_DWORD *)(v44 + 136) == 2)
        {
          AMCP::Log::Scope_Registry::get(v69);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v201, "com.apple.coreaudio", "AMCP");
          unint64_t v115 = *(NSObject **)v201.__r_.__value_.__l.__data_;
          if (v201.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v201.__r_.__value_.__l.__size_);
          }
          if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
          {
            uint64_t v116 = pthread_self();
            mach_port_t v117 = pthread_mach_thread_np(v116);
            if (*(char *)(v44 + 47) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v44 + 24), *(void *)(v44 + 32));
            }
            else
            {
              *(_OWORD *)std::string __p = *(_OWORD *)(v44 + 24);
              *(void *)&__p[16] = *(void *)(v44 + 40);
            }
            AudioStreamBasicDescription v131 = __p;
            if (__p[23] < 0) {
              AudioStreamBasicDescription v131 = *(unsigned char **)__p;
            }
            uint64_t v132 = *(void *)(v187.__r_.__value_.__r.__words[0] + 32);
            LODWORD(v201.__r_.__value_.__l.__data_) = 67110402;
            HIDWORD(v201.__r_.__value_.__r.__words[0]) = v117;
            LOWORD(v201.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v201.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"GraphNode.cpp";
            WORD1(v201.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(v201.__r_.__value_.__r.__words[2]) = 365;
            *(_WORD *)v202 = 2080;
            *(void *)&void v202[2] = "not (can_use_meta_timebase())";
            *(_WORD *)&v202[10] = 2080;
            *(void *)&v202[12] = v131;
            *(_WORD *)&v202[20] = 2048;
            *(void *)&v202[22] = v132;
            _os_log_error_impl(&dword_1BAA78000, v115, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Terminals must match clock sample rate if a node provides its own clock: %s (%0.0f)", (uint8_t *)&v201, 0x36u);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v184);
          __cxa_allocate_exception(0x40uLL);
          if (*(char *)(v44 + 47) < 0) {
            std::string::__init_copy_ctor_external(&v182, *(const std::string::value_type **)(v44 + 24), *(void *)(v44 + 32));
          }
          else {
            std::string v182 = *(std::string *)(v44 + 24);
          }
          uint64_t v141 = &v182;
          if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v141 = (std::string *)v182.__r_.__value_.__r.__words[0];
          }
          caulk::make_string((caulk *)"Terminals must match clock sample rate if a node provides its own clock: %s (%0.0f)", (uint64_t)&v185, v141, *(void *)(v187.__r_.__value_.__r.__words[0] + 32));
          std::logic_error::logic_error(&v183, &v185);
          v183.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)__p, &v183);
          uint64_t v189 = 0;
          *(void *)&__p[24] = 0;
          uint64_t v190 = 0;
          int v191 = -1;
          *(void *)std::string __p = &unk_1F1489CC8;
          *(void *)&__p[16] = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v201, (uint64_t)__p);
          *(void *)&v202[8] = "BOOL AMCP::Graph::Node::calculate_clocks_from_wires(const Node_Map &, Wire_Index &, cons"
                                "t std::function<Timebase_Ref (const Graph_Node_UID &)> &, const std::shared_ptr<Meta_Tim"
                                "ebase_Factory> &)";
          *(void *)&v202[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphNode.cpp";
          *(_DWORD *)&v202[24] = 365;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v180);
          *(std::logic_error *)&v186[8] = v180;
          *(void *)v186 = &unk_1F148AA90;
          *(void *)&v186[24] = v181;
          v180.__vftable = 0;
          v180.__imp_.__imp_ = 0;
          uint64_t v181 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        int v70 = v199;
        long long v171 = v193;
        if (*((void *)&v193 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v193 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        if ((*(double (**)(void))(*(void *)v171 + 152))(v171) == v68)
        {
          long long v71 = v171;
          long long v171 = 0u;
          goto LABEL_137;
        }
        uint64_t v72 = (*(uint64_t (**)(void))(*(void *)v171 + 16))(v171);
        *(double *)std::string __p = v68;
        if (*(char *)(v72 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)v72, *(void *)(v72 + 8));
        }
        else
        {
          long long v73 = *(_OWORD *)v72;
          *(void *)&__p[24] = *(void *)(v72 + 16);
          *(_OWORD *)&__p[8] = v73;
        }
        char v167 = v65;
        int v168 = v45;
        unint64_t v74 = std::hash<std::pair<double,std::string>>::operator()((double *)__p);
        int8x8_t v75 = (int8x8_t)v70[1];
        if (!*(void *)&v75) {
          goto LABEL_134;
        }
        unint64_t v76 = v74;
        uint8x8_t v77 = (uint8x8_t)vcnt_s8(v75);
        v77.i16[0] = vaddlv_u8(v77);
        unint64_t v78 = v77.u32[0];
        if (v77.u32[0] > 1uLL)
        {
          unint64_t v79 = v74;
          if (v74 >= *(void *)&v75) {
            unint64_t v79 = v74 % *(void *)&v75;
          }
        }
        else
        {
          unint64_t v79 = (*(void *)&v75 - 1) & v74;
        }
        uint64_t v80 = *(uint64_t ***)(*v70 + 8 * v79);
        if (!v80 || (std::string v81 = *v80) == 0) {
LABEL_134:
        }
          operator new();
        while (1)
        {
          unint64_t v82 = v81[1];
          if (v82 == v76) {
            break;
          }
          if (v78 > 1)
          {
            if (v82 >= *(void *)&v75) {
              v82 %= *(void *)&v75;
            }
          }
          else
          {
            v82 &= *(void *)&v75 - 1;
          }
          if (v82 != v79) {
            goto LABEL_134;
          }
LABEL_133:
          std::string v81 = (uint64_t *)*v81;
          if (!v81) {
            goto LABEL_134;
          }
        }
        if ((std::equal_to<std::pair<double,std::string>>::operator()[abi:ne180100]((uint64_t)(v81 + 2), (uint64_t)__p) & 1) == 0) {
          goto LABEL_133;
        }
        long long v71 = *((_OWORD *)v81 + 3);
        uint64_t v86 = v81[7];
        if (v86) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v86 + 8), 1uLL, memory_order_relaxed);
        }
        int v45 = v168;
        long long v37 = (char *)(a1 + 7);
        char v65 = v167;
        if ((__p[31] & 0x80000000) != 0)
        {
          long long v169 = v71;
          operator delete(*(void **)&__p[8]);
          long long v71 = v169;
        }
LABEL_137:
        uint64_t v83 = (std::__shared_weak_count *)*((void *)&v193 + 1);
        long long v193 = v71;
        if (v83) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v83);
        }
        if (*((void *)&v171 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v171 + 1));
        }
LABEL_141:
        long long v84 = v193;
        if (*((void *)&v193 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v193 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v85 = *(std::__shared_weak_count **)(v44 + 152);
        *(_OWORD *)(v44 + 144) = v84;
        if (v85) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v85);
        }
        std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)v187.__r_.__value_.__l.__size_);
LABEL_146:
        if (*((void *)&v193 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v193 + 1));
        }
        if (v45) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v45);
        }
        if (v65)
        {
LABEL_151:
          unint64_t v42 = (unsigned __int8 *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::erase(v172, (void **)v42);
          if (!v42) {
            break;
          }
          goto LABEL_70;
        }
        unint64_t v42 = *(unsigned __int8 **)v42;
      }
      while (v42);
LABEL_158:
      if (v200) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v200);
      }
      int v87 = (AMCP::Log::Scope_Registry *)std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)>::~__value_func[abi:ne180100](&v195);
      long long v39 = v163;
      if (!v166)
      {
        AMCP::Log::Scope_Registry::get(v87);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v201, "com.apple.coreaudio", "AMCP");
        uint64_t v112 = *(NSObject **)v201.__r_.__value_.__l.__data_;
        if (v201.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v201.__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
        {
          long long v113 = pthread_self();
          mach_port_t v114 = pthread_mach_thread_np(v113);
          LODWORD(v201.__r_.__value_.__l.__data_) = 67109890;
          HIDWORD(v201.__r_.__value_.__r.__words[0]) = v114;
          LOWORD(v201.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v201.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
          WORD1(v201.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v201.__r_.__value_.__r.__words[2]) = 991;
          *(_WORD *)v202 = 2080;
          *(void *)&void v202[2] = "not (failsafe > 0)";
          _os_log_error_impl(&dword_1BAA78000, v112, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Error calculating clocks for graph", (uint8_t *)&v201, 0x22u);
        }
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Error calculating clocks for graph", (uint64_t)v186);
        std::logic_error::logic_error((std::logic_error *)&v185, (const std::string *)v186);
        v185.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
        std::logic_error::logic_error(&v194, (const std::logic_error *)&v185);
        v196 = 0;
        uint64_t v197 = 0;
        uint64_t v198 = 0;
        LODWORD(v199) = -1;
        v194.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        v195 = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v201, (uint64_t)&v194);
        *(void *)&v202[8] = "void AMCP::Graph::calculate_clocks(const std::shared_ptr<Meta_Timebase_Factory> &, const s"
                              "td::function<Timebase_Ref (const Graph_Node_UID &)> &, std::unordered_set<Graph_Node_UID>,"
                              " const Node_Map &, Wire_Index &)";
        *(void *)&v202[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
        *(_DWORD *)&v202[24] = 991;
        applesauce::backtrace::snapshot_N<64>::snapshot_N(&v187.__r_.__value_.__l.__data_);
        *(std::string *)&__p[8] = v187;
        *(void *)std::string __p = &unk_1F148AA90;
        memset(&v187, 0, sizeof(v187));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      int v38 = v166 - 1;
      if (!v173[1]) {
        goto LABEL_162;
      }
    }
    uint64_t v40 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 16))(v40);
LABEL_65:
    uint64_t v198 = (void (***)(std::string *__return_ptr))v40;
    goto LABEL_67;
  }
LABEL_162:
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v173[0]);
  uint64_t v88 = v172[0];
  v172[0] = 0;
  if (v88) {
    operator delete(v88);
  }
  uint64_t v90 = *(void *)(v165 + 144);
  std::string v89 = *(std::__shared_weak_count **)(v165 + 152);
  if (v89)
  {
    atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v89);
  }
  if (!v90)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v89);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v201, "com.apple.coreaudio", "AMCP");
    int v152 = *(NSObject **)v201.__r_.__value_.__l.__data_;
    if (v201.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v201.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR))
    {
      unint64_t v153 = pthread_self();
      mach_port_t v154 = pthread_mach_thread_np(v153);
      if (*((char *)v39 + 23) >= 0) {
        int v155 = v39;
      }
      else {
        int v155 = (uint64_t *)*v39;
      }
      LODWORD(v201.__r_.__value_.__l.__data_) = 67110146;
      HIDWORD(v201.__r_.__value_.__r.__words[0]) = v154;
      LOWORD(v201.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v201.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph.cpp";
      WORD1(v201.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v201.__r_.__value_.__r.__words[2]) = 1038;
      *(_WORD *)v202 = 2080;
      *(void *)&void v202[2] = "not (root->get_clock() != nullptr)";
      *(_WORD *)&v202[10] = 2080;
      *(void *)&v202[12] = v155;
      _os_log_error_impl(&dword_1BAA78000, v152, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Node %s: clock is missing", (uint8_t *)&v201, 0x2Cu);
    }
    __cxa_allocate_exception(0x40uLL);
    if (*((char *)v39 + 23) >= 0) {
      long long v156 = v39;
    }
    else {
      long long v156 = (uint64_t *)*v39;
    }
    caulk::make_string((caulk *)"Node %s: clock is missing", (uint64_t)v186, v156);
    std::logic_error::logic_error((std::logic_error *)&v185, (const std::string *)v186);
    v185.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error(&v194, (const std::logic_error *)&v185);
    v196 = 0;
    uint64_t v197 = 0;
    uint64_t v198 = 0;
    LODWORD(v199) = -1;
    v194.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    v195 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v201, (uint64_t)&v194);
    *(void *)&v202[8] = "void AMCP::Graph::Graph::update_context(const Graph_Node_UID &, const std::function<Timebase_R"
                          "ef (const Graph_Node_UID &)> &, std::vector<std::string> &, Resource_Counts &)";
    *(void *)&v202[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
    *(_DWORD *)&v202[24] = 1038;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v187.__r_.__value_.__l.__data_);
    *(std::string *)&__p[8] = v187;
    *(void *)std::string __p = &unk_1F148AA90;
    memset(&v187, 0, sizeof(v187));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (v178)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v177.__r_.__value_.__r.__words[2]);
    v177.__r_.__value_.__r.__words[2] = 0;
    std::string::size_type v91 = v177.__r_.__value_.__l.__size_;
    if (v177.__r_.__value_.__l.__size_)
    {
      uint64_t v92 = 0;
      do
        *(void *)(v177.__r_.__value_.__r.__words[0] + 8 * v92++) = 0;
      while (v91 != v92);
    }
    uint64_t v178 = 0;
  }
  AMCP::Graph::Node::calculate_latency(v165, (uint64_t)v175, v37, &v177);
  uint64_t v93 = *(void **)&v175[16];
  if (*(void *)&v175[16])
  {
    do
    {
      uint64_t v94 = v93[5];
      *(_DWORD *)v186 = *(_DWORD *)(v165 + 164);
      if (*(void *)(v94 + 64) != *(void *)(v94 + 56))
      {
        unint64_t v95 = 0;
        do
        {
          if (*(char *)(v94 + 47) < 0) {
            std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v94 + 24), *(void *)(v94 + 32));
          }
          else {
            *(std::string *)std::string __p = *(std::string *)(v94 + 24);
          }
          *(_OWORD *)&v201.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
          std::string::size_type v96 = *(void *)&__p[16];
          memset(__p, 0, 24);
          v201.__r_.__value_.__r.__words[2] = v96;
          *(void *)v202 = v95;
          *(_DWORD *)&v202[8] = 0;
          std::string::size_type v97 = std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::find<AMCP::Terminal_Identifier>(v37, (unsigned __int8 **)&v201);
          if (v97 && 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v97[8] - v97[7]) >> 4) >= 2)
          {
            v194.__vftable = (std::logic_error_vtbl *)&unk_1F1470348;
            v194.__imp_.__imp_ = v186;
            v195 = v175;
            v196 = &v194;
            AMCP::Graph::Node::edit_each_wire(v94, v37, (uint64_t)&v194);
            std::__function::__value_func<void ()(AMCP::Direction,AMCP::Graph::Graph_Wire &)>::~__value_func[abi:ne180100](&v194);
          }
          if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v201.__r_.__value_.__l.__data_);
          }
          ++v95;
        }
        while (v95 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v94 + 64) - *(void *)(v94 + 56)) >> 4));
      }
      uint64_t v93 = (void *)*v93;
    }
    while (v93);
  }
  if (v178)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v177.__r_.__value_.__r.__words[2]);
    v177.__r_.__value_.__r.__words[2] = 0;
    std::string::size_type v98 = v177.__r_.__value_.__l.__size_;
    if (v177.__r_.__value_.__l.__size_)
    {
      uint64_t v99 = 0;
      do
        *(void *)(v177.__r_.__value_.__r.__words[0] + 8 * v99++) = 0;
      while (v98 != v99);
    }
    uint64_t v178 = 0;
  }
  AMCP::Graph::Node::calculate_all_drift_correction(v165, (uint64_t)v175, v37, (uint64_t)&v177, v160 + 8);
  if (v178)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v177.__r_.__value_.__r.__words[2]);
    v177.__r_.__value_.__r.__words[2] = 0;
    std::string::size_type v100 = v177.__r_.__value_.__l.__size_;
    if (v177.__r_.__value_.__l.__size_)
    {
      uint64_t v101 = 0;
      do
        *(void *)(v177.__r_.__value_.__r.__words[0] + 8 * v101++) = 0;
      while (v100 != v101);
    }
    uint64_t v178 = 0;
  }
  AMCP::Graph::Node::set_all_wire_source_clocks(v165, (uint64_t)v175, v37, (uint64_t)&v177);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__deallocate_node(*(void **)&v175[16]);
  uint64_t v102 = *(void **)v175;
  *(void *)uint64_t v175 = 0;
  if (v102) {
    operator delete(v102);
  }
LABEL_200:
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v177.__r_.__value_.__r.__words[2]);
  std::string v105 = (void *)v177.__r_.__value_.__r.__words[0];
  v177.__r_.__value_.__r.__words[0] = 0;
  if (v105) {
    operator delete(v105);
  }
  if (v161) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v161);
  }
}

void sub_1BADB1118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,void **a46)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::calculate_clocks(std::shared_ptr<AMCP::Graph::Meta_Timebase_Factory> const&,std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)> const&,std::unordered_set<std::string>,AMCP::Graph::Node_Map const&,AMCP::Graph::Wire_Index &)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(a1 + 16));
  return a1;
}

uint64_t *std::vector<std::shared_ptr<AMCP::Graph::Node>>::reserve(uint64_t *result, unint64_t a2)
{
  if (a2 > (result[2] - *result) >> 4)
  {
    if (a2 >> 60) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(a2);
    v5[1] = v5[0] + v3;
    uint64_t v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 16 * v4;
    std::vector<std::shared_ptr<AMCP::Graph::Timebase>>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void AMCP::Graph::topological_sort(std::string **a1, uint64_t a2, void *a3, void *a4, uint64_t *a5, void *a6)
{
  uint64_t v11 = *a1;
  if (SHIBYTE((*a1)[1].__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v43, v11[1].__r_.__value_.__l.__data_, v11[1].__r_.__value_.__l.__size_);
  }
  else {
    std::string v43 = v11[1];
  }
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(a6, (unsigned __int8 *)&v43);
  unint64_t v13 = v12;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v43.__r_.__value_.__l.__data_);
    if (v13) {
      return;
    }
  }
  else if (v12)
  {
    return;
  }
  unint64_t v14 = *a1;
  uint64_t v15 = (*a1)[a2 + 2].__r_.__value_.__r.__words[2] - (*a1)[a2 + 2].__r_.__value_.__l.__size_;
  if (!v15) {
    goto LABEL_36;
  }
  uint8x8_t v16 = 0;
  uint64_t v37 = 0x6DB6DB6DB6DB6DB7 * (v15 >> 4);
  do
  {
    unint64_t v17 = *a1;
    if (SHIBYTE((*a1)[1].__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v40, v17[1].__r_.__value_.__l.__data_, v17[1].__r_.__value_.__l.__size_);
    }
    else {
      std::string v40 = v17[1];
    }
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v40.__r_.__value_.__l.__data_;
    std::string::size_type v18 = v40.__r_.__value_.__r.__words[2];
    memset(&v40, 0, sizeof(v40));
    v43.__r_.__value_.__r.__words[2] = v18;
    uint64_t v44 = v16;
    LODWORD(v45) = a2;
    AMCP::Graph::Wire_Index::get_wires_for_terminal(&v41, a4, (unsigned __int8 **)&v43);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    uint64_t v19 = v41;
    unint64_t v20 = v42;
    uint64_t v21 = v41;
    if (v41 != v42)
    {
      while (1)
      {
        uint64_t v22 = *(void *)v21;
        if (*(unsigned char *)(*(void *)v21 + 408)) {
          break;
        }
LABEL_31:
        v21 += 8;
        if (v21 == v20) {
          goto LABEL_32;
        }
      }
      if (a2 == 1)
      {
        if (*(char *)(v22 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)v22, *(void *)(v22 + 8));
LABEL_24:
          std::string __p = v43;
          long long v23 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
          if (v23)
          {
            uint64_t v24 = (std::__shared_weak_count *)*((void *)v23 + 6);
            v43.__r_.__value_.__r.__words[0] = *((void *)v23 + 5);
            v43.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
            if (v24) {
              atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            AMCP::Graph::topological_sort(&v43, a2, a3, a4, a5, a6);
            if (v24) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v24);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_31;
        }
      }
      else
      {
        if (*(char *)(v22 + 63) < 0)
        {
          std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)(v22 + 40), *(void *)(v22 + 48));
          goto LABEL_24;
        }
        v22 += 40;
      }
      std::string v43 = *(std::string *)v22;
      goto LABEL_24;
    }
LABEL_32:
    if (v19) {
      operator delete(v19);
    }
    ++v16;
  }
  while (v16 != (char *)v37);
  unint64_t v14 = *a1;
LABEL_36:
  if (SHIBYTE(v14[1].__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v43, v14[1].__r_.__value_.__l.__data_, v14[1].__r_.__value_.__l.__size_);
  }
  else {
    std::string v43 = v14[1];
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)a6, (unsigned __int8 *)&v43, (uint64_t)&v43);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  unint64_t v25 = a5[2];
  BOOL v26 = (std::string **)a5[1];
  if ((unint64_t)v26 >= v25)
  {
    uint64_t v29 = ((uint64_t)v26 - *a5) >> 4;
    unint64_t v30 = v29 + 1;
    if ((unint64_t)(v29 + 1) >> 60) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v31 = v25 - *a5;
    if (v31 >> 3 > v30) {
      unint64_t v30 = v31 >> 3;
    }
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v32 = v30;
    }
    int v45 = a5 + 2;
    uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v32);
    uint64_t v34 = &v33[16 * v29];
    v43.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
    v43.__r_.__value_.__l.__size_ = (std::string::size_type)v34;
    uint64_t v44 = &v33[16 * v35];
    long long v36 = *(_OWORD *)a1;
    *(_OWORD *)uint64_t v34 = *(_OWORD *)a1;
    if (*((void *)&v36 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v36 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v43.__r_.__value_.__r.__words[2] = (std::string::size_type)(v34 + 16);
    std::vector<std::shared_ptr<AMCP::Graph::Timebase>>::__swap_out_circular_buffer(a5, &v43);
    unint64_t v28 = (void *)a5[1];
    std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v43);
  }
  else
  {
    *BOOL v26 = *a1;
    unint64_t v27 = a1[1];
    v26[1] = v27;
    if (v27) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)&v27->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
    }
    unint64_t v28 = v26 + 2;
    a5[1] = (uint64_t)(v26 + 2);
  }
  a5[1] = (uint64_t)v28;
}

void sub_1BADB1C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest>::__on_zero_shared(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = pthread_self();
  BOOL is_thread_configured_for_realtime = AMCP::Utility::is_thread_configured_for_realtime(v2, v3);
  if (is_thread_configured_for_realtime)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_thread_configured_for_realtime);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v7 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)unint64_t v30 = 2080;
      *(void *)&v30[2] = "Manifest.cpp";
      __int16 v31 = 1024;
      int v32 = 135;
      __int16 v33 = 2080;
      *(void *)uint64_t v34 = "not (not AMCP::Utility::is_thread_configured_for_realtime(pthread_self()))";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v20);
    std::logic_error::logic_error(&v21, &v20);
    v21.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v22, &v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v23 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    *(void *)&v34[6] = "AMCP::Graph::Manifest::~Manifest()";
    uint64_t v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
    int v36 = 135;
    std::vector<void *>::vector(&v15);
    int v10 = backtrace((void **)v15, (*((void *)&v15 + 1) - (void)v15) >> 3);
    std::vector<void *>::resize((char **)&v15, v10);
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    unint64_t v17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (*(_DWORD *)(a1 + 24))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_thread_configured_for_realtime);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)unint64_t v30 = 2080;
      *(void *)&v30[2] = "Manifest.cpp";
      __int16 v31 = 1024;
      int v32 = 138;
      __int16 v33 = 2080;
      *(void *)uint64_t v34 = "not (m_processing_state == Processing_State::Idle)";
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to delete an active manifiest", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to delete an active manifiest", (uint64_t)&v20);
    std::logic_error::logic_error(&v21, &v20);
    v21.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v22, &v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v23 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    *(void *)&v34[6] = "AMCP::Graph::Manifest::~Manifest()";
    uint64_t v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest.cpp";
    int v36 = 138;
    std::vector<void *>::vector(&v15);
    int v14 = backtrace((void **)v15, (*((void *)&v15 + 1) - (void)v15) >> 3);
    std::vector<void *>::resize((char **)&v15, v14);
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    unint64_t v17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 128);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 104);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Manifest_Task>>>>::~__hash_table(a1 + 56);
  *(void *)std::string buf = a1 + 32;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1BADB22B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  MEMORY[0x1C18590A0](v10);
  __clang_call_terminate(a1);
}

void sub_1BADB22DC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14724C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14724C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,void *> *>>(void *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a1[1];
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v6 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v6) {
      BOOL v7 = a2 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      while (1)
      {
        std::string::operator=((std::string *)(v6 + 16), (const std::string *)(v2 + 2));
        uint64_t v9 = v2[5];
        *(_DWORD *)(v6 + 48) = *((_DWORD *)v2 + 12);
        *(void *)(v6 + 40) = v9;
        if ((uint64_t *)v6 != v2)
        {
          uint64_t v11 = v2[7];
          uint64_t v10 = v2[8];
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v11) >> 4);
          mach_port_t v13 = *(std::string **)(v6 + 56);
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v6 + 72) - (void)v13) >> 4) >= v12)
          {
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v6 + 64) - (void)v13) >> 4) >= v12)
            {
              long long v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Wire_Identifier *,AMCP::Wire_Identifier *,AMCP::Wire_Identifier *>((std::string *)v2[7], (std::string *)v2[8], v13);
              for (uint64_t j = *(void *)(v6 + 64);
                    (std::string *)j != v18;
                    std::__destroy_at[abi:ne180100]<AMCP::Wire_Identifier,0>(j))
              {
                j -= 80;
              }
              *(void *)(v6 + 64) = v18;
              goto LABEL_26;
            }
            unint64_t v17 = (std::string *)(v11 + 16 * ((uint64_t)(*(void *)(v6 + 64) - (void)v13) >> 4));
            std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<AMCP::Wire_Identifier *,AMCP::Wire_Identifier *,AMCP::Wire_Identifier *>((std::string *)v2[7], v17, v13);
            uint64_t v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Wire_Identifier>,AMCP::Wire_Identifier*,AMCP::Wire_Identifier*,AMCP::Wire_Identifier*>((uint64_t)v17, v10, *(void *)(v6 + 64));
          }
          else
          {
            std::vector<AMCP::Wire_Identifier>::__vdeallocate((void **)(v6 + 56));
            if (v12 > 0x333333333333333) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v14 = 0x999999999999999ALL * ((uint64_t)(*(void *)(v6 + 72) - *(void *)(v6 + 56)) >> 4);
            if (v14 <= v12) {
              unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v11) >> 4);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v6 + 72) - *(void *)(v6 + 56)) >> 4) >= 0x199999999999999) {
              unint64_t v15 = 0x333333333333333;
            }
            else {
              unint64_t v15 = v14;
            }
            std::vector<AMCP::Wire_Identifier>::__vallocate[abi:ne180100]((void *)(v6 + 56), v15);
            uint64_t v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Wire_Identifier>,AMCP::Wire_Identifier*,AMCP::Wire_Identifier*,AMCP::Wire_Identifier*>(v11, v10, *(void *)(v6 + 64));
          }
          *(void *)(v6 + 64) = v16;
        }
LABEL_26:
        uint64_t v8 = *(void **)v6;
        std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::__node_insert_multi((uint64_t)a1, v6);
        uint64_t v2 = (uint64_t *)*v2;
        if (v8)
        {
          uint64_t v6 = (uint64_t)v8;
          if (v2) {
            continue;
          }
        }
        goto LABEL_28;
      }
    }
    uint64_t v8 = (void *)v6;
LABEL_28:
    std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::__deallocate_node(v8);
  }
  for (; v2; uint64_t v2 = (uint64_t *)*v2)
  {
    std::string v20 = (char *)operator new(0x50uLL);
    uint64_t v21 = (uint64_t)v20;
    v26[0] = v20;
    v26[1] = a1 + 2;
    char v27 = 0;
    std::logic_error v22 = v20 + 16;
    *(void *)std::string v20 = 0;
    *((void *)v20 + 1) = 0;
    if (*((char *)v2 + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v20 + 16), (const std::string::value_type *)v2[2], v2[3]);
    }
    else
    {
      long long v23 = *((_OWORD *)v2 + 1);
      *((void *)v20 + 4) = v2[4];
      _OWORD *v22 = v23;
    }
    uint64_t v24 = v2[5];
    int v25 = *((_DWORD *)v2 + 12);
    *(void *)(v21 + 56) = 0;
    *(_DWORD *)(v21 + 48) = v25;
    *(void *)(v21 + 40) = v24;
    *(void *)(v21 + 64) = 0;
    *(void *)(v21 + 72) = 0;
    std::vector<AMCP::Wire_Identifier>::__init_with_size[abi:ne180100]<AMCP::Wire_Identifier*,AMCP::Wire_Identifier*>((void *)(v21 + 56), v2[7], v2[8], 0xCCCCCCCCCCCCCCCDLL * ((v2[8] - v2[7]) >> 4));
    char v27 = 1;
    *(void *)(v21 + 8) = std::hash<AMCP::Terminal_Identifier>::operator()((uint64_t)v22);
    std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::__node_insert_multi((uint64_t)a1, v21);
    v26[0] = 0;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26);
  }
}

void sub_1BADB2614()
{
}

void sub_1BADB2648()
{
  if (*(char *)(v0 + 39) < 0) {
    operator delete(*v1);
  }
  JUMPOUT(0x1BADB2664);
}

void sub_1BADB2670()
{
}

void std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,void *> *>>(void *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a1[1];
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v6 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v6) {
      BOOL v7 = a2 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      uint64_t v8 = (void *)v6;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v6 + 16), (const std::string *)(v2 + 2));
        uint64_t v9 = v2[5];
        *(_DWORD *)(v6 + 48) = *((_DWORD *)v2 + 12);
        *(void *)(v6 + 40) = v9;
        std::string::operator=((std::string *)(v6 + 56), (const std::string *)(v2 + 7));
        uint64_t v10 = v2[10];
        *(_DWORD *)(v6 + 88) = *((_DWORD *)v2 + 22);
        *(void *)(v6 + 80) = v10;
        std::string::operator=((std::string *)(v6 + 96), (const std::string *)v2 + 4);
        uint64_t v11 = v2[15];
        *(_DWORD *)(v6 + 128) = *((_DWORD *)v2 + 32);
        *(void *)(v6 + 120) = v11;
        std::string::operator=((std::string *)(v6 + 136), (const std::string *)(v2 + 17));
        uint64_t v12 = v2[20];
        *(_DWORD *)(v6 + 168) = *((_DWORD *)v2 + 42);
        *(void *)(v6 + 160) = v12;
        if ((uint64_t *)v6 == v2)
        {
          long long v15 = *((_OWORD *)v2 + 14);
          long long v16 = *((_OWORD *)v2 + 15);
          *(unsigned char *)(v6 + 256) = *((unsigned char *)v2 + 256);
          *(_OWORD *)(v6 + 224) = v15;
          *(_OWORD *)(v6 + 240) = v16;
        }
        else
        {
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v6 + 176), (char *)v2[22], v2[23], (v2[23] - v2[22]) >> 2);
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v6 + 200), (char *)v2[25], v2[26], (v2[26] - v2[25]) >> 2);
          long long v13 = *((_OWORD *)v2 + 14);
          long long v14 = *((_OWORD *)v2 + 15);
          *(unsigned char *)(v6 + 256) = *((unsigned char *)v2 + 256);
          *(_OWORD *)(v6 + 224) = v13;
          *(_OWORD *)(v6 + 240) = v14;
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v6 + 264), (std::string *)v2[33], (long long *)v2[34], 0xAAAAAAAAAAAAAAABLL * ((v2[34] - v2[33]) >> 3));
        }
        unint64_t v17 = (std::string *)(v6 + 288);
        long long v18 = (const AMCP::Graph::Graph_Wire::Connection *)(v2 + 36);
        if (*(unsigned __int8 *)(v6 + 504) == *((unsigned __int8 *)v2 + 504))
        {
          if (*(unsigned char *)(v6 + 504)) {
            AMCP::Graph::Graph_Wire::Connection::operator=((uint64_t)v17, (uint64_t)v18);
          }
        }
        else if (*(unsigned char *)(v6 + 504))
        {
          std::__optional_destruct_base<AMCP::Graph::Graph_Wire::Connection,false>::reset[abi:ne180100]((uint64_t)v17);
        }
        else
        {
          AMCP::Graph::Graph_Wire::Connection::Connection(v17, v18);
          *(unsigned char *)(v6 + 504) = 1;
        }
        uint64_t v19 = v2[64];
        uint64_t v20 = v2[65];
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)(v6 + 512) = v19;
        uint64_t v21 = *(std::__shared_weak_count **)(v6 + 520);
        *(void *)(v6 + 520) = v20;
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        uint64_t v22 = v2[66];
        uint64_t v23 = v2[67];
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)(v6 + 528) = v22;
        uint64_t v24 = *(std::__shared_weak_count **)(v6 + 536);
        *(void *)(v6 + 536) = v23;
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        uint64_t v8 = *(void **)v6;
        std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::__node_insert_multi((uint64_t)a1, v6);
        uint64_t v2 = (uint64_t *)*v2;
        if (!v8) {
          break;
        }
        uint64_t v6 = (uint64_t)v8;
      }
      while (v2);
    }
    std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::__deallocate_node(v8);
  }
  for (; v2; uint64_t v2 = (uint64_t *)*v2)
  {
    int v25 = (char *)operator new(0x220uLL);
    uint64_t v26 = (uint64_t)v25;
    v42[0] = v25;
    v42[1] = a1 + 2;
    char v43 = 0;
    char v27 = v25 + 16;
    *(void *)int v25 = 0;
    *((void *)v25 + 1) = 0;
    if (*((char *)v2 + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v25 + 16), (const std::string::value_type *)v2[2], v2[3]);
    }
    else
    {
      long long v28 = *((_OWORD *)v2 + 1);
      *((void *)v25 + 4) = v2[4];
      _OWORD *v27 = v28;
    }
    uint64_t v29 = v2[5];
    *(_DWORD *)(v26 + 48) = *((_DWORD *)v2 + 12);
    *(void *)(v26 + 40) = v29;
    unint64_t v30 = (std::string *)(v26 + 56);
    if (*((char *)v2 + 79) < 0)
    {
      std::string::__init_copy_ctor_external(v30, (const std::string::value_type *)v2[7], v2[8]);
    }
    else
    {
      long long v31 = *(_OWORD *)(v2 + 7);
      *(void *)(v26 + 72) = v2[9];
      *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
    }
    uint64_t v32 = v2[10];
    *(_DWORD *)(v26 + 88) = *((_DWORD *)v2 + 22);
    *(void *)(v26 + 80) = v32;
    if (*((char *)v2 + 119) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v26 + 96), (const std::string::value_type *)v2[12], v2[13]);
    }
    else
    {
      long long v33 = *((_OWORD *)v2 + 6);
      *(void *)(v26 + 112) = v2[14];
      *(_OWORD *)(v26 + 96) = v33;
    }
    uint64_t v34 = v2[15];
    *(_DWORD *)(v26 + 128) = *((_DWORD *)v2 + 32);
    *(void *)(v26 + 120) = v34;
    if (*((char *)v2 + 159) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v26 + 136), (const std::string::value_type *)v2[17], v2[18]);
    }
    else
    {
      long long v35 = *(_OWORD *)(v2 + 17);
      *(void *)(v26 + 152) = v2[19];
      *(_OWORD *)(v26 + 136) = v35;
    }
    uint64_t v36 = v2[20];
    int v37 = *((_DWORD *)v2 + 42);
    *(void *)(v26 + 176) = 0;
    *(_DWORD *)(v26 + 168) = v37;
    *(void *)(v26 + 160) = v36;
    *(void *)(v26 + 184) = 0;
    *(void *)(v26 + 192) = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(v26 + 176), (const void *)v2[22], v2[23], (v2[23] - v2[22]) >> 2);
    *(void *)(v26 + 200) = 0;
    *(void *)(v26 + 208) = 0;
    *(void *)(v26 + 216) = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(v26 + 200), (const void *)v2[25], v2[26], (v2[26] - v2[25]) >> 2);
    long long v38 = *((_OWORD *)v2 + 14);
    long long v39 = *((_OWORD *)v2 + 15);
    *(unsigned char *)(v26 + 256) = *((unsigned char *)v2 + 256);
    *(_OWORD *)(v26 + 224) = v38;
    *(_OWORD *)(v26 + 240) = v39;
    *(void *)(v26 + 272) = 0;
    *(void *)(v26 + 280) = 0;
    *(void *)(v26 + 264) = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v26 + 264), (long long *)v2[33], (long long *)v2[34], 0xAAAAAAAAAAAAAAABLL * ((v2[34] - v2[33]) >> 3));
    *(unsigned char *)(v26 + 288) = 0;
    *(unsigned char *)(v26 + 504) = 0;
    if (*((unsigned char *)v2 + 504))
    {
      AMCP::Graph::Graph_Wire::Connection::Connection((std::string *)(v26 + 288), (const AMCP::Graph::Graph_Wire::Connection *)(v2 + 36));
      *(unsigned char *)(v26 + 504) = 1;
    }
    *(void *)(v26 + 512) = v2[64];
    uint64_t v40 = v2[65];
    *(void *)(v26 + 520) = v40;
    if (v40) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)(v26 + 528) = v2[66];
    uint64_t v41 = v2[67];
    *(void *)(v26 + 536) = v41;
    if (v41) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
    }
    char v43 = 1;
    *(void *)(v26 + 8) = std::hash<AMCP::Wire_Identifier>::operator()((uint64_t)v27);
    std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::__node_insert_multi((uint64_t)a1, v26);
    v42[0] = 0;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,void *>>>>::reset[abi:ne180100]((uint64_t)v42);
  }
}

void sub_1BADB2AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (*(char *)(v4 + 119) < 0) {
    operator delete(*v5);
  }
  AMCP::Wire_Identifier::~Wire_Identifier(v3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *> *>>(void *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a1[1];
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v6 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v6) {
      BOOL v7 = a2 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      uint64_t v8 = (void *)v6;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v6 + 16), (const std::string *)(v2 + 2));
        uint64_t v9 = v2[5];
        *(_DWORD *)(v6 + 48) = *((_DWORD *)v2 + 12);
        *(void *)(v6 + 40) = v9;
        std::string::operator=((std::string *)(v6 + 56), (const std::string *)(v2 + 7));
        uint64_t v10 = v2[10];
        *(_DWORD *)(v6 + 88) = *((_DWORD *)v2 + 22);
        *(void *)(v6 + 80) = v10;
        uint64_t v12 = v2[12];
        uint64_t v11 = v2[13];
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
        long long v13 = *(std::__shared_weak_count **)(v6 + 104);
        *(void *)(v6 + 96) = v12;
        *(void *)(v6 + 104) = v11;
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        uint64_t v8 = *(void **)v6;
        std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::__node_insert_multi((uint64_t)a1, v6);
        uint64_t v2 = (uint64_t *)*v2;
        if (!v8) {
          break;
        }
        uint64_t v6 = (uint64_t)v8;
      }
      while (v2);
    }
    std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::__deallocate_node(v8);
  }
  for (; v2; uint64_t v2 = (uint64_t *)*v2)
  {
    long long v14 = (char *)operator new(0x70uLL);
    uint64_t v15 = (uint64_t)v14;
    v23[0] = v14;
    v23[1] = a1 + 2;
    char v24 = 0;
    long long v16 = v14 + 16;
    *(void *)long long v14 = 0;
    *((void *)v14 + 1) = 0;
    if (*((char *)v2 + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v14 + 16), (const std::string::value_type *)v2[2], v2[3]);
    }
    else
    {
      long long v17 = *((_OWORD *)v2 + 1);
      *((void *)v14 + 4) = v2[4];
      _OWORD *v16 = v17;
    }
    uint64_t v18 = v2[5];
    *(_DWORD *)(v15 + 48) = *((_DWORD *)v2 + 12);
    *(void *)(v15 + 40) = v18;
    uint64_t v19 = (std::string *)(v15 + 56);
    if (*((char *)v2 + 79) < 0)
    {
      std::string::__init_copy_ctor_external(v19, (const std::string::value_type *)v2[7], v2[8]);
    }
    else
    {
      long long v20 = *(_OWORD *)(v2 + 7);
      *(void *)(v15 + 72) = v2[9];
      *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
    }
    uint64_t v21 = v2[10];
    *(_DWORD *)(v15 + 88) = *((_DWORD *)v2 + 22);
    *(void *)(v15 + 80) = v21;
    *(void *)(v15 + 96) = v2[12];
    uint64_t v22 = v2[13];
    *(void *)(v15 + 104) = v22;
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    }
    char v24 = 1;
    *(void *)(v15 + 8) = std::hash<AMCP::Wire_Identifier>::operator()((uint64_t)v16);
    std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::__node_insert_multi((uint64_t)a1, v15);
    v23[0] = 0;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>>>>::reset[abi:ne180100]((uint64_t)v23);
  }
}

void sub_1BADB2DA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 39) < 0) {
    operator delete(*v3);
  }
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,void *> *>>(void *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a1[1];
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v6 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v6) {
      BOOL v7 = a2 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      uint64_t v8 = v6;
    }
    else
    {
      do
      {
        uint64_t v12 = v6 + 2;
        long long v13 = v6 + 5;
        std::pair<std::string &,std::shared_ptr<AMCP::Graph::Node> &>::operator=[abi:ne180100]<std::string const,std::shared_ptr<AMCP::Graph::Node>,(void *)0>((uint64_t)&v12, (const std::string *)(v2 + 2));
        uint64_t v8 = (void *)*v6;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi((uint64_t)a1, (uint64_t)v6);
        uint64_t v2 = (uint64_t *)*v2;
        if (v8) {
          BOOL v9 = v2 == 0;
        }
        else {
          BOOL v9 = 1;
        }
        uint64_t v6 = v8;
      }
      while (!v9);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__deallocate_node(v8);
  }
  for (; v2; uint64_t v2 = (uint64_t *)*v2)
  {
    uint64_t v10 = (char *)operator new(0x38uLL);
    uint64_t v12 = v10;
    long long v13 = a1 + 2;
    char v14 = 0;
    *(void *)uint64_t v10 = 0;
    *((void *)v10 + 1) = 0;
    uint64_t v11 = std::pair<std::string const,std::shared_ptr<AMCP::Graph::Node>>::pair[abi:ne180100]((std::string *)(v10 + 16), (long long *)v2 + 1);
    char v14 = 1;
    *((void *)v10 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v11);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi((uint64_t)a1, (uint64_t)v10);
    uint64_t v12 = 0;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v12);
  }
}

void sub_1BADB2F18(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__deallocate_node(v1);
  __cxa_rethrow();
}

void sub_1BADB2F30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *> *>>(void *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a1[1];
  if (v4)
  {
    for (uint64_t i = 0; i != v4; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v6 = (void **)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v6) {
      BOOL v7 = a2 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (v7)
    {
      uint64_t v8 = v6;
    }
    else
    {
      do
      {
        *((_DWORD *)v6 + 4) = *((_DWORD *)v2 + 4);
        std::string::operator=((std::string *)v6 + 1, (const std::string *)v2 + 1);
        uint64_t v8 = (void **)*v6;
        unint64_t v9 = *((unsigned int *)v6 + 4);
        v6[1] = (void *)v9;
        inserted = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_prepare((uint64_t)a1, v9, (_DWORD *)v6 + 4);
        std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_perform(a1, v6, inserted);
        uint64_t v2 = (uint64_t *)*v2;
        if (!v8) {
          break;
        }
        uint64_t v6 = v8;
      }
      while (v2);
    }
    std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__deallocate_node(v8);
  }
  for (; v2; uint64_t v2 = (uint64_t *)*v2)
  {
    uint64_t v11 = (std::string *)operator new(0x30uLL);
    v11->__r_.__value_.__r.__words[0] = 0;
    v11->__r_.__value_.__l.__size_ = 0;
    uint64_t v12 = v11 + 1;
    unint64_t v13 = *((unsigned int *)v2 + 4);
    LODWORD(v11->__r_.__value_.__r.__words[2]) = v13;
    if (*((char *)v2 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v2[3], v2[4]);
      unint64_t v13 = LODWORD(v11->__r_.__value_.__r.__words[2]);
    }
    else
    {
      long long v14 = *(_OWORD *)(v2 + 3);
      v11[1].__r_.__value_.__r.__words[2] = v2[5];
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v14;
    }
    v11->__r_.__value_.__l.__size_ = v13;
    uint64_t v15 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_prepare((uint64_t)a1, v13, &v11->__r_.__value_.__r.__words[2]);
    std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::__node_insert_multi_perform(a1, v11, v15);
  }
}

void sub_1BADB3094(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,void *> *,long>>(uint64_t a1, long long *a2, long long *a3)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v6 = *(uint64_t **)a1;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v19 = (char *)a1;
    long long v20 = v8;
    uint64_t v21 = v8;
    if (v8)
    {
      long long v20 = std::__tree<DSP_Host_Types::AudioProcessingType>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        unint64_t v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          std::pair<std::string &,std::shared_ptr<AMCP::Graph::Node> &>::operator=[abi:ne180100]<std::string const,std::shared_ptr<AMCP::Graph::Node>,(void *)0>((uint64_t)v18, (const std::string *)(v9 + 2));
          uint64_t v10 = v21;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__find_leaf_high(a1, v18, v21 + 4);
          std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at((uint64_t **)a1, v18[0], leaf_high, v10);
          uint64_t v21 = v20;
          if (v20) {
            long long v20 = std::__tree<DSP_Host_Types::AudioProcessingType>::_DetachedTreeCache::__detach_next((uint64_t)v20);
          }
          uint64_t v12 = (long long *)*((void *)v9 + 1);
          if (v12)
          {
            do
            {
              a2 = v12;
              uint64_t v12 = *(long long **)v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v13 = *(void *)a2 == (void)v9;
              unint64_t v9 = a2;
            }
            while (!v13);
          }
          uint64_t v8 = v21;
          if (v21) {
            BOOL v13 = a2 == a3;
          }
          else {
            BOOL v13 = 1;
          }
          unint64_t v9 = a2;
        }
        while (!v13);
      }
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v19);
  }
  if (a2 != a3)
  {
    do
    {
      long long v14 = (char *)operator new(0x48uLL);
      uint64_t v19 = v14;
      long long v20 = (uint64_t *)(a1 + 8);
      LOBYTE(v21) = 0;
      std::pair<std::string const,std::shared_ptr<AMCP::Graph::Node>>::pair[abi:ne180100]((std::string *)(v14 + 32), a2 + 2);
      LOBYTE(v21) = 1;
      uint64_t v15 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__find_leaf_high(a1, v18, (void *)v14 + 4);
      std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at((uint64_t **)a1, v18[0], v15, (uint64_t *)v14);
      uint64_t v19 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v19);
      long long v16 = (long long *)*((void *)a2 + 1);
      if (v16)
      {
        do
        {
          long long v17 = v16;
          long long v16 = *(long long **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          long long v17 = (long long *)*((void *)a2 + 2);
          BOOL v13 = *(void *)v17 == (void)a2;
          a2 = v17;
        }
        while (!v13);
      }
      a2 = v17;
    }
    while (v17 != a3);
  }
}

void sub_1BADB32BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,std::shared_ptr<AMCP::Graph::Node> &>::operator=[abi:ne180100]<std::string const,std::shared_ptr<AMCP::Graph::Node>,(void *)0>(uint64_t a1, const std::string *a2)
{
  std::string::operator=(*(std::string **)a1, a2);
  uint64_t v4 = *(std::string::pointer **)(a1 + 8);
  std::string::pointer data = a2[1].__r_.__value_.__l.__data_;
  std::string::size_type size = a2[1].__r_.__value_.__l.__size_;
  if (size) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(size + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = data;
  v4[1] = (std::string::pointer)size;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return a1;
}

void *std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__find_leaf_high(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v5 = v4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, v4 + 4) & 0x80) == 0) {
          break;
        }
        uint64_t v4 = (void *)*v5;
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (void *)v5[1];
    }
    while (v4);
    uint64_t result = v5 + 1;
  }
  else
  {
    uint64_t result = (void *)(a1 + 8);
  }
LABEL_8:
  *a2 = v5;
  return result;
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::destroy(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::destroy(v2);
  }
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<AMCP::Graph::Node>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  uint64_t v4 = (unsigned __int8 **)(a2 + 16);
  unint64_t v43 = std::hash<AMCP::Wire_Identifier>::operator()(a2 + 16);
  v2[1] = v43;
  unint64_t v5 = *(void *)(a1 + 8);
  float v6 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    BOOL v8 = 1;
    if (v5 >= 3) {
      BOOL v8 = (v5 & (v5 - 1)) != 0;
    }
    unint64_t v9 = v8 | (2 * v5);
    unint64_t v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10) {
      int8x8_t prime = (int8x8_t)v10;
    }
    else {
      int8x8_t prime = (int8x8_t)v9;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v5 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v5) {
      goto LABEL_99;
    }
    if (*(void *)&prime >= v5) {
      goto LABEL_60;
    }
    unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
    {
      unint64_t v19 = std::__next_prime(v19);
    }
    else
    {
      uint64_t v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2) {
        unint64_t v19 = v21;
      }
    }
    if (*(void *)&prime <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime >= v5)
    {
      unint64_t v5 = *(void *)(a1 + 8);
      goto LABEL_60;
    }
    if (prime)
    {
LABEL_99:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v12 = operator new(8 * *(void *)&prime);
      BOOL v13 = *(void **)a1;
      *(void *)a1 = v12;
      if (v13) {
        operator delete(v13);
      }
      uint64_t v41 = v4;
      uint64_t v14 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v14++) = 0;
      while (*(void *)&prime != v14);
      uint64_t v15 = *(void **)(a1 + 16);
      if (v15)
      {
        unint64_t v16 = v15[1];
        uint8x8_t v17 = (uint8x8_t)vcnt_s8(prime);
        v17.i16[0] = vaddlv_u8(v17);
        unint64_t v18 = v17.u32[0];
        uint64_t v40 = v2;
        if (v17.u32[0] > 1uLL)
        {
          if (v16 >= *(void *)&prime) {
            v16 %= *(void *)&prime;
          }
        }
        else
        {
          v16 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v16) = a1 + 16;
        uint64_t v22 = (void *)*v15;
        if (*v15)
        {
          unint64_t v42 = v17.u32[0];
          do
          {
            unint64_t v23 = v22[1];
            if (v18 > 1)
            {
              if (v23 >= *(void *)&prime) {
                v23 %= *(void *)&prime;
              }
            }
            else
            {
              v23 &= *(void *)&prime - 1;
            }
            if (v23 == v16)
            {
              uint64_t v15 = v22;
            }
            else if (*(void *)(*(void *)a1 + 8 * v23))
            {
              char v24 = (void *)*v22;
              if (*v22)
              {
                int v25 = v22;
                while (1)
                {
                  uint64_t v26 = v24;
                  if (!std::equal_to<AMCP::Wire_Identifier>::operator()[abi:ne180100]((uint64_t)(v22 + 2), (unsigned __int8 **)v24 + 2))break; {
                  char v24 = (void *)*v26;
                  }
                  int v25 = v26;
                  if (!*v26) {
                    goto LABEL_47;
                  }
                }
                char v24 = v26;
                uint64_t v26 = v25;
LABEL_47:
                unint64_t v18 = v42;
              }
              else
              {
                uint64_t v26 = v22;
              }
              *uint64_t v15 = v24;
              *uint64_t v26 = **(void **)(*(void *)a1 + 8 * v23);
              **(void **)(*(void *)a1 + 8 * v23) = v22;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v23) = v15;
              uint64_t v15 = v22;
              unint64_t v16 = v23;
            }
            uint64_t v22 = (void *)*v15;
          }
          while (*v15);
        }
        unint64_t v5 = (unint64_t)prime;
        uint64_t v2 = v40;
        uint64_t v4 = v41;
      }
      else
      {
        unint64_t v5 = (unint64_t)prime;
        uint64_t v4 = v41;
      }
    }
    else
    {
      char v27 = *(void **)a1;
      *(void *)a1 = 0;
      if (v27) {
        operator delete(v27);
      }
      unint64_t v5 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_60:
  uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v28.i16[0] = vaddlv_u8(v28);
  unint64_t v29 = v28.u32[0];
  if (v28.u32[0] > 1uLL)
  {
    unint64_t v30 = v43;
    if (v5 <= v43) {
      unint64_t v30 = v43 % v5;
    }
  }
  else
  {
    unint64_t v30 = (v5 - 1) & v43;
  }
  long long v31 = *(void **)(*(void *)a1 + 8 * v30);
  if (v31)
  {
    uint64_t v32 = (void *)*v31;
    if (*v31)
    {
      int v33 = 0;
      do
      {
        uint64_t v34 = v32;
        unint64_t v35 = v32[1];
        if (v29 > 1)
        {
          unint64_t v36 = v35;
          if (v35 >= v5) {
            unint64_t v36 = v35 % v5;
          }
        }
        else
        {
          unint64_t v36 = v35 & (v5 - 1);
        }
        if (v36 != v30) {
          break;
        }
        BOOL v37 = v35 == v43 && std::equal_to<AMCP::Wire_Identifier>::operator()[abi:ne180100]((uint64_t)(v34 + 2), v4);
        if (v33 & !v37) {
          break;
        }
        v33 |= v37;
        uint64_t v32 = (void *)*v34;
        long long v31 = v34;
      }
      while (*v34);
    }
  }
  unint64_t v38 = v2[1];
  if (v29 > 1)
  {
    if (v38 >= v5) {
      v38 %= v5;
    }
  }
  else
  {
    v38 &= v5 - 1;
  }
  if (!v31)
  {
    void *v2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v2;
    *(void *)(*(void *)a1 + 8 * v38) = a1 + 16;
    if (!*v2) {
      goto LABEL_95;
    }
    unint64_t v39 = *(void *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5) {
        v39 %= v5;
      }
    }
    else
    {
      v39 &= v5 - 1;
    }
LABEL_94:
    *(void *)(*(void *)a1 + 8 * v39) = v2;
    goto LABEL_95;
  }
  void *v2 = *v31;
  void *v31 = v2;
  if (*v2)
  {
    unint64_t v39 = *(void *)(*v2 + 8);
    if (v29 > 1)
    {
      if (v39 >= v5) {
        v39 %= v5;
      }
    }
    else
    {
      v39 &= v5 - 1;
    }
    if (v39 != v38) {
      goto LABEL_94;
    }
  }
LABEL_95:
  ++*(void *)(a1 + 24);
}

void std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  int v45 = (unsigned __int8 **)(a2 + 16);
  unint64_t v46 = std::hash<AMCP::Terminal_Identifier>::operator()(a2 + 16);
  *(void *)(a2 + 8) = v46;
  unint64_t v4 = *(void *)(a1 + 8);
  float v5 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v6 = *(float *)(a1 + 32);
  uint64_t v44 = (void *)a2;
  if (!v4 || (float)(v6 * (float)v4) < v5)
  {
    BOOL v7 = 1;
    if (v4 >= 3) {
      BOOL v7 = (v4 & (v4 - 1)) != 0;
    }
    unint64_t v8 = v7 | (2 * v4);
    unint64_t v9 = vcvtps_u32_f32(v5 / v6);
    if (v8 <= v9) {
      int8x8_t prime = (int8x8_t)v9;
    }
    else {
      int8x8_t prime = (int8x8_t)v8;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v4 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v4) {
      goto LABEL_99;
    }
    if (*(void *)&prime >= v4) {
      goto LABEL_60;
    }
    unint64_t v18 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v4 < 3 || (uint8x8_t v19 = (uint8x8_t)vcnt_s8((int8x8_t)v4), v19.i16[0] = vaddlv_u8(v19), v19.u32[0] > 1uLL))
    {
      unint64_t v18 = std::__next_prime(v18);
    }
    else
    {
      uint64_t v20 = 1 << -(char)__clz(v18 - 1);
      if (v18 >= 2) {
        unint64_t v18 = v20;
      }
    }
    if (*(void *)&prime <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime >= v4)
    {
      unint64_t v4 = *(void *)(a1 + 8);
      goto LABEL_60;
    }
    if (prime)
    {
LABEL_99:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v11 = operator new(8 * *(void *)&prime);
      uint64_t v12 = *(void **)a1;
      *(void *)a1 = v11;
      if (v12) {
        operator delete(v12);
      }
      uint64_t v13 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v13++) = 0;
      while (*(void *)&prime != v13);
      uint64_t v14 = *(void **)(a1 + 16);
      if (!v14) {
        goto LABEL_50;
      }
      unint64_t v15 = v14[1];
      uint8x8_t v16 = (uint8x8_t)vcnt_s8(prime);
      v16.i16[0] = vaddlv_u8(v16);
      unint64_t v17 = v16.u32[0];
      if (v16.u32[0] > 1uLL)
      {
        if (v15 >= *(void *)&prime) {
          v15 %= *(void *)&prime;
        }
      }
      else
      {
        v15 &= *(void *)&prime - 1;
      }
      *(void *)(*(void *)a1 + 8 * v15) = a1 + 16;
      uint64_t v21 = (void *)*v14;
      if (*v14)
      {
        uint64_t v22 = *(void *)&prime - 1;
        unint64_t v43 = v16.u32[0];
        do
        {
          unint64_t v23 = v21[1];
          if (v17 > 1)
          {
            if (v23 >= *(void *)&prime) {
              v23 %= *(void *)&prime;
            }
          }
          else
          {
            v23 &= v22;
          }
          if (v23 == v15)
          {
            uint64_t v14 = v21;
          }
          else if (*(void *)(*(void *)a1 + 8 * v23))
          {
            char v24 = (void *)*v21;
            if (*v21)
            {
              int v25 = v21;
              while (1)
              {
                int v50 = v21 + 2;
                long long v51 = v21 + 5;
                uint64_t v52 = v21 + 6;
                mach_port_t v47 = (unsigned __int8 **)(v24 + 2);
                int v48 = v24 + 5;
                BOOL v49 = v24 + 6;
                BOOL v26 = std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v50, &v47);
                char v27 = (void *)*v25;
                if (!v26) {
                  break;
                }
                char v24 = (void *)*v27;
                int v25 = (void *)*v25;
                if (!*v27) {
                  goto LABEL_46;
                }
              }
              char v24 = (void *)*v25;
              char v27 = v25;
LABEL_46:
              uint64_t v22 = *(void *)&prime - 1;
              unint64_t v17 = v43;
            }
            else
            {
              char v27 = v21;
            }
            *uint64_t v14 = v24;
            void *v27 = **(void **)(*(void *)a1 + 8 * v23);
            **(void **)(*(void *)a1 + 8 * v23) = v21;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v23) = v14;
            uint64_t v14 = v21;
            unint64_t v15 = v23;
          }
          uint64_t v21 = (void *)*v14;
        }
        while (*v14);
        unint64_t v4 = (unint64_t)prime;
      }
      else
      {
LABEL_50:
        unint64_t v4 = (unint64_t)prime;
      }
    }
    else
    {
      uint8x8_t v28 = *(void **)a1;
      *(void *)a1 = 0;
      if (v28) {
        operator delete(v28);
      }
      unint64_t v4 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_60:
  uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
  v29.i16[0] = vaddlv_u8(v29);
  unint64_t v30 = v29.u32[0];
  if (v29.u32[0] > 1uLL)
  {
    unint64_t v31 = v46;
    if (v4 <= v46) {
      unint64_t v31 = v46 % v4;
    }
  }
  else
  {
    unint64_t v31 = (v4 - 1) & v46;
  }
  uint64_t v32 = *(void **)(*(void *)a1 + 8 * v31);
  if (v32)
  {
    int v33 = (void *)*v32;
    if (*v32)
    {
      int v34 = 0;
      unint64_t v35 = (void *)(a2 + 40);
      unint64_t v36 = (void *)(a2 + 48);
      do
      {
        BOOL v37 = v33;
        unint64_t v38 = v33[1];
        if (v30 > 1)
        {
          unint64_t v39 = v38;
          if (v38 >= v4) {
            unint64_t v39 = v38 % v4;
          }
        }
        else
        {
          unint64_t v39 = v38 & (v4 - 1);
        }
        if (v39 != v31) {
          break;
        }
        if (v38 == v46)
        {
          int v50 = v37 + 2;
          long long v51 = v37 + 5;
          uint64_t v52 = v37 + 6;
          mach_port_t v47 = v45;
          int v48 = v35;
          BOOL v49 = v36;
          BOOL v40 = std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)&v50, &v47);
        }
        else
        {
          BOOL v40 = 0;
        }
        if (v34 & !v40) {
          break;
        }
        v34 |= v40;
        int v33 = (void *)*v37;
        uint64_t v32 = v37;
      }
      while (*v37);
    }
  }
  unint64_t v41 = v44[1];
  if (v30 > 1)
  {
    if (v41 >= v4) {
      v41 %= v4;
    }
  }
  else
  {
    v41 &= v4 - 1;
  }
  if (!v32)
  {
    *uint64_t v44 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v44;
    *(void *)(*(void *)a1 + 8 * v41) = a1 + 16;
    if (!*v44) {
      goto LABEL_95;
    }
    unint64_t v42 = *(void *)(*v44 + 8);
    if (v30 > 1)
    {
      if (v42 >= v4) {
        v42 %= v4;
      }
    }
    else
    {
      v42 &= v4 - 1;
    }
LABEL_94:
    *(void *)(*(void *)a1 + 8 * v42) = v44;
    goto LABEL_95;
  }
  *uint64_t v44 = *v32;
  *uint64_t v32 = v44;
  if (*v44)
  {
    unint64_t v42 = *(void *)(*v44 + 8);
    if (v30 > 1)
    {
      if (v42 >= v4) {
        v42 %= v4;
      }
    }
    else
    {
      v42 &= v4 - 1;
    }
    if (v42 != v41) {
      goto LABEL_94;
    }
  }
LABEL_95:
  ++*(void *)(a1 + 24);
}

void *std::vector<AMCP::Wire_Identifier>::__init_with_size[abi:ne180100]<AMCP::Wire_Identifier*,AMCP::Wire_Identifier*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float v6 = result;
    std::vector<AMCP::Wire_Identifier>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Wire_Identifier>,AMCP::Wire_Identifier*,AMCP::Wire_Identifier*,AMCP::Wire_Identifier*>(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BADB3E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<AMCP::Wire_Identifier>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Identifier>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

void AMCP::Graph::Graph::restore_graph_state_from_snapshot(uint64_t a1, uint64_t *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  if (!*a2)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    BOOL v7 = **(NSObject ***)buf;
    if (*(void *)v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v25);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      unint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)int v25 = 2080;
      *(void *)&v25[2] = "Graph.cpp";
      __int16 v26 = 1024;
      int v27 = 1221;
      __int16 v28 = 2080;
      *(void *)uint8x8_t v29 = "not (state)";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v23);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v15);
    std::logic_error::logic_error(&v16, &v15);
    v16.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v17, &v16);
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    int v22 = -1;
    v17.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unint64_t v18 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v17);
    *(void *)&v29[6] = "void AMCP::Graph::Graph::restore_graph_state_from_snapshot(const Graph_State &)";
    unint64_t v30 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph.cpp";
    int v31 = 1221;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v10);
    long long v13 = v10;
    uint64_t v14 = v11;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    uint64_t v12 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  float v5 = (void *)(a1 + 56);
  if (v5 != (void *)v2)
  {
    *(_DWORD *)(a1 + 88) = *(_DWORD *)(v2 + 32);
    std::__hash_table<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::__unordered_map_hasher<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::hash<AMCP::Terminal_Identifier>,std::equal_to<AMCP::Terminal_Identifier>,true>,std::__unordered_map_equal<AMCP::Terminal_Identifier,std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,std::equal_to<AMCP::Terminal_Identifier>,std::hash<AMCP::Terminal_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<AMCP::Terminal_Identifier,std::vector<AMCP::Wire_Identifier>>,void *> *>>(v5, *(uint64_t **)(v2 + 16));
    *(_DWORD *)(a1 + 128) = *(_DWORD *)(v2 + 72);
    std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,AMCP::Graph::Graph_Wire>,void *> *>>((void *)(a1 + 96), *(uint64_t **)(v2 + 56));
    *(_DWORD *)(a1 + 168) = *(_DWORD *)(v2 + 112);
    std::__hash_table<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::__unordered_map_hasher<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::hash<AMCP::Wire_Identifier>,std::equal_to<AMCP::Wire_Identifier>,true>,std::__unordered_map_equal<AMCP::Wire_Identifier,std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,std::equal_to<AMCP::Wire_Identifier>,std::hash<AMCP::Wire_Identifier>,true>,std::allocator<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<AMCP::Wire_Identifier,std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>,void *> *>>((void *)(a1 + 136), *(uint64_t **)(v2 + 96));
    uint64_t v2 = *a2;
  }
  if (a1 + 176 != v2 + 120)
  {
    *(_DWORD *)(a1 + 208) = *(_DWORD *)(v2 + 152);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,void *> *>>((void *)(a1 + 176), *(uint64_t **)(v2 + 136));
    uint64_t v2 = *a2;
  }
  if (a1 + 216 != v2 + 160)
  {
    *(_DWORD *)(a1 + 248) = *(_DWORD *)(v2 + 192);
    std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *> *>>((void *)(a1 + 216), *(uint64_t **)(v2 + 176));
    uint64_t v2 = *a2;
  }
  if (a1 + 256 != v2 + 224)
  {
    float v6 = *(long long **)(v2 + 224);
    std::__tree<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<AMCP::Graph::Node>>,void *> *,long>>(a1 + 256, v6, (long long *)(v2 + 232));
  }
}

void sub_1BADB4204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

BOOL HALS_PDPUCPlugIn::ObjectIsPropertySettable(HALS_PDPUCPlugIn *this, uint64_t a2, const AudioObjectPropertyAddress *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  char v17 = 0;
  int v4 = ((uint64_t (*)(uint64_t, const AudioObjectPropertyAddress *, char *))this)(a2, a3, &v17);
  if (v4)
  {
    v5.i32[0] = a3->mSelector;
    int16x8_t v7 = (int16x8_t)vmovl_u8(v5);
    *(int16x4_t *)v7.i8 = vrev64_s16(*(int16x4_t *)v7.i8);
    *(int8x8_t *)v7.i8 = vmovn_s16(v7);
    __int32 v15 = v7.i32[0];
    char v16 = 0;
    v7.i32[0] = a3->mScope;
    int16x8_t v8 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v7.i8);
    *(int16x4_t *)v8.i8 = vrev64_s16(*(int16x4_t *)v8.i8);
    unsigned __int32 v13 = vmovn_s16(v8).u32[0];
    char v14 = 0;
    v12[0] = HIBYTE(v4);
    v12[1] = BYTE2(v4);
    void v12[2] = BYTE1(v4);
    int v11 = v4;
    v12[3] = v4;
    v12[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t mElement = a3->mElement;
      *(_DWORD *)std::string buf = 136316674;
      uint64_t v19 = "HALS_PDPUCPlugIn.cpp";
      __int16 v20 = 1024;
      int v21 = 136;
      __int16 v22 = 2080;
      char v23 = &v15;
      __int16 v24 = 2080;
      int v25 = &v13;
      __int16 v26 = 2048;
      uint64_t v27 = mElement;
      __int16 v28 = 1024;
      int v29 = v11;
      __int16 v30 = 2080;
      int v31 = v12;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PDPUCPlugIn::ObjectIsPropertySettable: got an error from the plug-in for property [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v11;
  }
  return v17 != 0;
}

uint64_t HALS_PDPUCPlugIn::ObjectGetPropertyDataSize(HALS_PDPUCPlugIn *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unsigned int v19 = 0;
  int v6 = ((uint64_t (*)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, unsigned int *))this)(a2, a3, a4, a5, &v19);
  if (v6)
  {
    v7.i32[0] = a3->mSelector;
    int16x8_t v9 = (int16x8_t)vmovl_u8(v7);
    *(int16x4_t *)v9.i8 = vrev64_s16(*(int16x4_t *)v9.i8);
    *(int8x8_t *)v9.i8 = vmovn_s16(v9);
    __int32 v17 = v9.i32[0];
    char v18 = 0;
    v9.i32[0] = a3->mScope;
    int16x8_t v10 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v9.i8);
    *(int16x4_t *)v10.i8 = vrev64_s16(*(int16x4_t *)v10.i8);
    unsigned __int32 v15 = vmovn_s16(v10).u32[0];
    char v16 = 0;
    v14[0] = HIBYTE(v6);
    v14[1] = BYTE2(v6);
    void v14[2] = BYTE1(v6);
    int v13 = v6;
    v14[3] = v6;
    v14[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t mElement = a3->mElement;
      *(_DWORD *)std::string buf = 136316674;
      int v21 = "HALS_PDPUCPlugIn.cpp";
      __int16 v22 = 1024;
      int v23 = 144;
      __int16 v24 = 2080;
      int v25 = &v17;
      __int16 v26 = 2080;
      uint64_t v27 = &v15;
      __int16 v28 = 2048;
      uint64_t v29 = mElement;
      __int16 v30 = 1024;
      int v31 = v13;
      __int16 v32 = 2080;
      int v33 = v14;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PDPUCPlugIn::ObjectGetPropertyDataSize: got an error from the plug-in for property [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v13;
  }
  return v19;
}

uint64_t HALS_PDPUCPlugIn::ObjectGetPropertyData(HALS_PDPUCPlugIn *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, unsigned int *a6, void *a7)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t result = ((uint64_t (*)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, unsigned int *, void *))this)(a2, a3, a4, a5, a6, a7);
  if (result)
  {
    v9.i32[0] = a3->mSelector;
    int16x8_t v10 = (int16x8_t)vmovl_u8(v9);
    *(int16x4_t *)v10.i8 = vrev64_s16(*(int16x4_t *)v10.i8);
    *(int8x8_t *)v10.i8 = vmovn_s16(v10);
    __int32 v18 = v10.i32[0];
    char v19 = 0;
    v10.i32[0] = a3->mScope;
    int16x8_t v11 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v10.i8);
    *(int16x4_t *)v11.i8 = vrev64_s16(*(int16x4_t *)v11.i8);
    unsigned __int32 v16 = vmovn_s16(v11).u32[0];
    char v17 = 0;
    v15[0] = BYTE3(result);
    v15[1] = BYTE2(result);
    _OWORD v15[2] = BYTE1(result);
    int v14 = result;
    v15[3] = result;
    v15[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t mElement = a3->mElement;
      *(_DWORD *)std::string buf = 136316674;
      int v21 = "HALS_PDPUCPlugIn.cpp";
      __int16 v22 = 1024;
      int v23 = 151;
      __int16 v24 = 2080;
      int v25 = &v18;
      __int16 v26 = 2080;
      uint64_t v27 = &v16;
      __int16 v28 = 2048;
      uint64_t v29 = mElement;
      __int16 v30 = 1024;
      int v31 = v14;
      __int16 v32 = 2080;
      int v33 = v15;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PDPUCPlugIn::ObjectGetPropertyData: got an error from the plug-in for property [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v14;
  }
  return result;
}

uint64_t HALS_PDPUCPlugIn::ObjectSetPropertyData(HALS_PDPUCPlugIn *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t result = ((uint64_t (*)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *))this)(a2, a3, a4, a5, a6, a7);
  if (result)
  {
    v9.i32[0] = a3->mSelector;
    int16x8_t v10 = (int16x8_t)vmovl_u8(v9);
    *(int16x4_t *)v10.i8 = vrev64_s16(*(int16x4_t *)v10.i8);
    *(int8x8_t *)v10.i8 = vmovn_s16(v10);
    __int32 v18 = v10.i32[0];
    char v19 = 0;
    v10.i32[0] = a3->mScope;
    int16x8_t v11 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v10.i8);
    *(int16x4_t *)v11.i8 = vrev64_s16(*(int16x4_t *)v11.i8);
    unsigned __int32 v16 = vmovn_s16(v11).u32[0];
    char v17 = 0;
    v15[0] = BYTE3(result);
    v15[1] = BYTE2(result);
    _OWORD v15[2] = BYTE1(result);
    int v14 = result;
    v15[3] = result;
    v15[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t mElement = a3->mElement;
      *(_DWORD *)std::string buf = 136316674;
      int v21 = "HALS_PDPUCPlugIn.cpp";
      __int16 v22 = 1024;
      int v23 = 157;
      __int16 v24 = 2080;
      int v25 = &v18;
      __int16 v26 = 2080;
      uint64_t v27 = &v16;
      __int16 v28 = 2048;
      uint64_t v29 = mElement;
      __int16 v30 = 1024;
      int v31 = v14;
      __int16 v32 = 2080;
      int v33 = v15;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PDPUCPlugIn::ObjectSetPropertyData: got an error from the plug-in for property [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v14;
  }
  return result;
}

uint64_t get_terminal(AMCP::Log::Scope_Registry *a1, unsigned __int8 *a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  int v4 = *(std::string **)a1;
  if (*(char *)(*(void *)a1 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v51, v4[1].__r_.__value_.__l.__data_, v4[1].__r_.__value_.__l.__size_);
  }
  else {
    std::string v51 = v4[1];
  }
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v51.__r_.__value_.__l.__size_;
  }
  uint64_t v6 = a2[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a2 + 1);
  }
  if (size != v6)
  {
    if ((*((unsigned char *)&v51.__r_.__value_.__s + 23) & 0x80) != 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
LABEL_30:
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v51, "com.apple.coreaudio", "AMCP");
    char v19 = *(NSObject **)v51.__r_.__value_.__l.__data_;
    if (v51.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v51.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      __int16 v20 = pthread_self();
      mach_port_t v21 = pthread_mach_thread_np(v20);
      __int16 v22 = *(std::string **)a1;
      if (*(char *)(*(void *)a1 + 47) < 0) {
        std::string::__init_copy_ctor_external(&v45, v22[1].__r_.__value_.__l.__data_, v22[1].__r_.__value_.__l.__size_);
      }
      else {
        std::string v45 = v22[1];
      }
      int v23 = &v45;
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v23 = (std::string *)v45.__r_.__value_.__r.__words[0];
      }
      if ((a2[23] & 0x80u) == 0) {
        __int16 v24 = a2;
      }
      else {
        __int16 v24 = *(unsigned __int8 **)a2;
      }
      LODWORD(v51.__r_.__value_.__l.__data_) = 67110402;
      HIDWORD(v51.__r_.__value_.__r.__words[0]) = v21;
      LOWORD(v51.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v51.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"GraphCommon.cpp";
      WORD1(v51.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v51.__r_.__value_.__r.__words[2]) = 24;
      __int16 v52 = 2080;
      *(void *)uint64_t v53 = "not (node->get_uid() == key.m_node)";
      *(_WORD *)&v53[8] = 2080;
      *(void *)&unsigned char v53[10] = v23;
      *(_WORD *)&unsigned char v53[18] = 2080;
      *(void *)&v53[20] = v24;
      _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid connection: '%s' and '%s'", (uint8_t *)&v51, 0x36u);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v50);
    __cxa_allocate_exception(0x40uLL);
    int v25 = *(std::string **)a1;
    if (*(char *)(*(void *)a1 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v42, v25[1].__r_.__value_.__l.__data_, v25[1].__r_.__value_.__l.__size_);
    }
    else {
      std::string v42 = v25[1];
    }
    __int16 v26 = &v42;
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v26 = (std::string *)v42.__r_.__value_.__r.__words[0];
    }
    if ((a2[23] & 0x80u) == 0) {
      uint64_t v27 = a2;
    }
    else {
      uint64_t v27 = *(unsigned __int8 **)a2;
    }
    caulk::make_string((caulk *)"Invalid connection: '%s' and '%s'", (uint64_t)&v43, v26, v27);
    std::logic_error::logic_error(&v44, &v43);
    v44.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v45, &v44);
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    int v49 = -1;
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v45.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v51, (uint64_t)&v45);
    *(void *)&v53[6] = "Terminal &get_terminal(const std::shared_ptr<Node> &, const Terminal_Identifier &)";
    *(void *)&v53[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphCommon.cpp";
    *(_DWORD *)&v53[22] = 24;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v37);
    unint64_t v39 = &unk_1F148AA90;
    long long v40 = v37;
    uint64_t v41 = v38;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (v7 >= 0) {
    int16x8_t v8 = a2;
  }
  else {
    int16x8_t v8 = *(unsigned __int8 **)a2;
  }
  if ((*((unsigned char *)&v51.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    int v13 = (void *)v51.__r_.__value_.__r.__words[0];
    int v14 = memcmp(v51.__r_.__value_.__l.__data_, v8, v51.__r_.__value_.__l.__size_);
    operator delete(v13);
    if (v14) {
      goto LABEL_30;
    }
  }
  else if (*((unsigned char *)&v51.__r_.__value_.__s + 23))
  {
    uint64_t v9 = 0;
    do
    {
      int v10 = v51.__r_.__value_.__s.__data_[v9];
      int v11 = v8[v9];
    }
    while (v10 == v11 && HIBYTE(v51.__r_.__value_.__r.__words[2]) - 1 != v9++);
    if (v10 != v11) {
      goto LABEL_30;
    }
  }
  unsigned __int32 v15 = *(AMCP::Log::Scope_Registry **)a1;
  unsigned int v16 = *((_DWORD *)a2 + 8);
  unint64_t v17 = *((void *)a2 + 3);
  if (v17 >= 0x6DB6DB6DB6DB6DB7
            * ((uint64_t)(*(void *)(*(void *)a1 + 24 * v16 + 64) - *(void *)(*(void *)a1 + 24 * v16 + 56)) >> 4))
  {
    AMCP::Log::Scope_Registry::get(v15);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v51, "com.apple.coreaudio", "AMCP");
    __int16 v28 = *(NSObject **)v51.__r_.__value_.__l.__data_;
    if (v51.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v51.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = pthread_self();
      mach_port_t v30 = pthread_mach_thread_np(v29);
      uint64_t v31 = *((void *)a2 + 3);
      __int16 v32 = *(std::string **)a1;
      if (*(char *)(*(void *)a1 + 47) < 0) {
        std::string::__init_copy_ctor_external(&v45, v32[1].__r_.__value_.__l.__data_, v32[1].__r_.__value_.__l.__size_);
      }
      else {
        std::string v45 = v32[1];
      }
      int v33 = &v45;
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v33 = (std::string *)v45.__r_.__value_.__r.__words[0];
      }
      LODWORD(v51.__r_.__value_.__l.__data_) = 67110402;
      HIDWORD(v51.__r_.__value_.__r.__words[0]) = v30;
      LOWORD(v51.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v51.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"GraphCommon.cpp";
      WORD1(v51.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v51.__r_.__value_.__r.__words[2]) = 27;
      __int16 v52 = 2080;
      *(void *)uint64_t v53 = "not (key.m_terminal_index < size)";
      *(_WORD *)&v53[8] = 2048;
      *(void *)&unsigned char v53[10] = v31;
      *(_WORD *)&unsigned char v53[18] = 2080;
      *(void *)&v53[20] = v33;
      _os_log_error_impl(&dword_1BAA78000, v28, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid terminal index: terminal %zu of node '%s'", (uint8_t *)&v51, 0x36u);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v50);
    __cxa_allocate_exception(0x40uLL);
    uint64_t v34 = *((void *)a2 + 3);
    unint64_t v35 = *(std::string **)a1;
    if (*(char *)(*(void *)a1 + 47) < 0) {
      std::string::__init_copy_ctor_external(&v42, v35[1].__r_.__value_.__l.__data_, v35[1].__r_.__value_.__l.__size_);
    }
    else {
      std::string v42 = v35[1];
    }
    unint64_t v36 = &v42;
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v36 = (std::string *)v42.__r_.__value_.__r.__words[0];
    }
    caulk::make_string((caulk *)"Invalid terminal index: terminal %zu of node '%s'", (uint64_t)&v43, v34, v36);
    std::logic_error::logic_error(&v44, &v43);
    v44.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v45, &v44);
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    int v49 = -1;
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v45.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v51, (uint64_t)&v45);
    *(void *)&v53[6] = "Terminal &get_terminal(const std::shared_ptr<Node> &, const Terminal_Identifier &)";
    *(void *)&v53[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphCommon.cpp";
    *(_DWORD *)&v53[22] = 27;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v37);
    unint64_t v39 = &unk_1F148AA90;
    long long v40 = v37;
    uint64_t v41 = v38;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }

  return AMCP::Graph::Node::get_nth_terminal((uint64_t)v15, v17, v16);
}

void sub_1BADB50A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,char a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (a11) {
    operator delete(a11);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v35 - 144);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a33);
  MEMORY[0x1C1859090](&a31);
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v34 & 1) == 0)
    {
LABEL_12:
      AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v35 - 145));
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v33);
  goto LABEL_12;
}

uint64_t get_terminal_for_key(uint64_t a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)a1);
  if (!v3)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v12 = **(NSObject ***)buf;
    if (*(void *)v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v37);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      AMCP::Terminal_Identifier_to_string(&__p, (const void **)a1);
      unsigned __int32 v15 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)std::string buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)long long v37 = 2080;
      *(void *)&_OWORD v37[2] = "GraphCommon.cpp";
      __int16 v38 = 1024;
      int v39 = 37;
      __int16 v40 = 2080;
      *(void *)uint64_t v41 = "not (found != nodes.end())";
      *(_WORD *)&v41[8] = 2080;
      *(void *)&unsigned char v41[10] = v15;
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Missing node for connection in when building manifest: %s", buf, 0x2Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v35);
    __cxa_allocate_exception(0x40uLL);
    AMCP::Terminal_Identifier_to_string(&v27, (const void **)a1);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v16 = &v27;
    }
    else {
      unsigned int v16 = (std::string *)v27.__r_.__value_.__r.__words[0];
    }
    caulk::make_string((caulk *)"Missing node for connection in when building manifest: %s", (uint64_t)&v28, v16);
    std::logic_error::logic_error(&v29, &v28);
    v29.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&__p, &v29);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    int v34 = -1;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(void *)&v41[6] = "Terminal &get_terminal_for_key(const Terminal_Identifier &, const AMCP::Graph::Node_Map &)";
    *(void *)&unsigned char v41[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphCommon.cpp";
    *(_DWORD *)&v41[22] = 37;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v22);
    __int16 v24 = &unk_1F148AA90;
    long long v25 = v22;
    uint64_t v26 = v23;
    long long v22 = 0uLL;
    uint64_t v23 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  int v4 = v3;
  uint8x8_t v5 = (AMCP::Log::Scope_Registry *)*((void *)v3 + 5);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 + 6);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v7 = *(_DWORD *)(a1 + 32);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)v5 + 3 * v7 + 8) - *((void *)v5 + 3 * v7 + 7)) >> 4);
  unint64_t v9 = *(void *)(a1 + 24);
  if (v9 > v8)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v17 = **(NSObject ***)buf;
    if (*(void *)v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v37);
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      __int32 v18 = pthread_self();
      mach_port_t v19 = pthread_mach_thread_np(v18);
      AMCP::Terminal_Identifier_to_string(&__p, (const void **)a1);
      __int16 v20 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)std::string buf = 67110402;
      *(_DWORD *)&uint8_t buf[4] = v19;
      *(_WORD *)long long v37 = 2080;
      *(void *)&_OWORD v37[2] = "GraphCommon.cpp";
      __int16 v38 = 1024;
      int v39 = 41;
      __int16 v40 = 2080;
      *(void *)uint64_t v41 = "not (key.m_terminal_index <= num_other_terminals)";
      *(_WORD *)&v41[8] = 2080;
      *(void *)&unsigned char v41[10] = v20;
      *(_WORD *)&v41[18] = 2048;
      *(void *)&v41[20] = v8;
      _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Missing terminal for connection in when building manifest - index: %s  terminals: %ld", buf, 0x36u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v35);
    __cxa_allocate_exception(0x40uLL);
    AMCP::Terminal_Identifier_to_string(&v27, (const void **)a1);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      mach_port_t v21 = &v27;
    }
    else {
      mach_port_t v21 = (std::string *)v27.__r_.__value_.__r.__words[0];
    }
    caulk::make_string((caulk *)"Missing terminal for connection in when building manifest - index: %s  terminals: %ld", (uint64_t)&v28, v21, v8);
    std::logic_error::logic_error(&v29, &v28);
    v29.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&__p, &v29);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    int v34 = -1;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(void *)&v41[6] = "Terminal &get_terminal_for_key(const Terminal_Identifier &, const AMCP::Graph::Node_Map &)";
    *(void *)&unsigned char v41[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/GraphCommon.cpp";
    *(_DWORD *)&v41[22] = 41;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v22);
    __int16 v24 = &unk_1F148AA90;
    long long v25 = v22;
    uint64_t v26 = v23;
    long long v22 = 0uLL;
    uint64_t v23 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t nth_terminal = AMCP::Graph::Node::get_nth_terminal((uint64_t)v5, v9, v7);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return nth_terminal;
}

void sub_1BADB5728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,char a33)
{
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOPrewarmManager::Start(void *a1, int a2)
{
  if (a2 == 1)
  {
    uint64_t v2 = *a1;
    uint64_t v3 = a1;
  }
  else
  {
    if (a2) {
      goto LABEL_7;
    }
    uint64_t v3 = a1 + 1;
    uint64_t v2 = a1[1];
  }
  if (v2 != -1) {
    void *v3 = v2 + 1;
  }
LABEL_7:
  if (a1[1]) {
    return 2;
  }
  else {
    return *a1 != 0;
  }
}

void HALS_IOPrewarmManager::GetState(HALS_IOPrewarmManager *this, unint64_t *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (a2[1])
  {
    int v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      if ((unint64_t)v6 >= v5)
      {
        uint64_t v9 = v6 - v4;
        unint64_t v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v5 - (void)v4) >> 1 > v10) {
          unint64_t v10 = (uint64_t)(v5 - (void)v4) >> 1;
        }
        if (v5 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v11);
        }
        else {
          uint64_t v12 = 0;
        }
        int v13 = (_DWORD *)(v11 + 4 * v9);
        _DWORD *v13 = 0;
        unint64_t v8 = v13 + 1;
        while (v6 != v4)
        {
          int v14 = *--v6;
          *--int v13 = v14;
        }
        unint64_t v5 = v11 + 4 * v12;
        *(void *)this = v13;
        *((void *)this + 1) = v8;
        *((void *)this + 2) = v5;
        if (v4) {
          operator delete(v4);
        }
        int v4 = v13;
      }
      else
      {
        *uint64_t v6 = 0;
        unint64_t v8 = v6 + 1;
      }
      *((void *)this + 1) = v8;
      ++v7;
      uint64_t v6 = v8;
    }
    while (v7 < a2[1]);
  }
  else
  {
    int v4 = 0;
    unint64_t v8 = 0;
  }
  if (*a2)
  {
    unint64_t v15 = 0;
    unint64_t v16 = *((void *)this + 2);
    do
    {
      if ((unint64_t)v8 >= v16)
      {
        uint64_t v18 = v8 - v4;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v16 - (void)v4) >> 1 > v19) {
          unint64_t v19 = (uint64_t)(v16 - (void)v4) >> 1;
        }
        if (v16 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v19;
        }
        if (v20) {
          unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v20);
        }
        else {
          uint64_t v21 = 0;
        }
        long long v22 = (_DWORD *)(v20 + 4 * v18);
        _DWORD *v22 = 1;
        unint64_t v17 = v22 + 1;
        while (v8 != v4)
        {
          int v23 = *--v8;
          *--long long v22 = v23;
        }
        unint64_t v16 = v20 + 4 * v21;
        *(void *)this = v22;
        *((void *)this + 1) = v17;
        *((void *)this + 2) = v16;
        if (v4) {
          operator delete(v4);
        }
        int v4 = v22;
      }
      else
      {
        *unint64_t v8 = 1;
        unint64_t v17 = v8 + 1;
      }
      *((void *)this + 1) = v17;
      ++v15;
      unint64_t v8 = v17;
    }
    while (v15 < *a2);
  }
}

void sub_1BADB5AD0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void HALS_DeviceManager::ObjectPropertiesChanged()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v1 = 136315394;
    uint64_t v2 = "HALS_DeviceManager.cpp";
    __int16 v3 = 1024;
    int v4 = 1178;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DeviceManager::ObjectsPropertiesChanged: unimplemented", (uint8_t *)&v1, 0x12u);
  }
  exception = __cxa_allocate_exception(0x10uLL);
  *(void *)exception = off_1F148A5D8;
  exception[2] = 1970171760;
}

void HALS_DeviceManager::ObjectsPublishedAndDied()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v1 = 136315394;
    uint64_t v2 = "HALS_DeviceManager.cpp";
    __int16 v3 = 1024;
    int v4 = 1171;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DeviceManager::ObjectsPublishedAndDied: unimplemented", (uint8_t *)&v1, 0x12u);
  }
  exception = __cxa_allocate_exception(0x10uLL);
  *(void *)exception = off_1F148A5D8;
  exception[2] = 1970171760;
}

void HALS_DeviceManager::CreateObject()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v1 = 136315394;
    uint64_t v2 = "HALS_DeviceManager.cpp";
    __int16 v3 = 1024;
    int v4 = 1164;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DeviceManager::CreateObject: unimplemented", (uint8_t *)&v1, 0x12u);
  }
  exception = __cxa_allocate_exception(0x10uLL);
  *(void *)exception = off_1F148A5D8;
  exception[2] = 1970171760;
}

void HALS_DeviceManager::ClientDied(HALS_DeviceManager *this, HALS_Client *a2)
{
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  HALS_DeviceManager::CopyDeviceList(this, (HALS_DeviceManager::BasicDeviceList *)&v11, 1, 0);
  int v4 = (unsigned int **)v11;
  uint64_t v5 = (unsigned int **)v12;
  if (v11 != v12)
  {
    uint64_t v6 = MEMORY[0x1E4F143A8];
    do
    {
      unint64_t v7 = *v4;
      uint64_t v15 = 0;
      unint64_t v16 = &v15;
      uint64_t v17 = 0x2000000000;
      char v18 = 0;
      v14[0] = v6;
      v14[1] = 0x40000000;
      void v14[2] = ___ZN11HALS_Device10ClientDiedEP11HALS_Client_block_invoke;
      v14[3] = &unk_1E6235C88;
      v14[4] = &v15;
      unsigned char v14[5] = v7;
      v14[6] = a2;
      unint64_t v8 = (HALB_Mutex *)(*(uint64_t (**)(unsigned int *))(*(void *)v7 + 56))(v7);
      HALB_CommandGate::ExecuteCommand(v8, (uint64_t)v14);
      if (*((unsigned char *)v16 + 24))
      {
        if (a2) {
          uint64_t v9 = *((unsigned int *)a2 + 4);
        }
        else {
          uint64_t v9 = 0;
        }
        unint64_t v10 = (HALS_NotificationManager *)v7[4];
        *(void *)&v19.AudioObjectPropertySelector mSelector = 0x676C6F6263646573;
        v19.uint64_t mElement = 0;
        HALS_Object::PropertiesChanged((HALS_Object *)v7, v10, v9, 1u, &v19);
      }
      _Block_object_dispose(&v15, 8);
      ++v4;
    }
    while (v4 != v5);
  }
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v11, v3);
}

void sub_1BADB5F00(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HALS_ObjectMap **a9)
{
}

void HALS_DeviceManager::CopyDeviceList(HALS_DeviceManager *this, HALS_DeviceManager::BasicDeviceList *a2, char a3, HALS_Client *a4)
{
  uint64_t v26 = 0;
  std::string v27 = &v26;
  uint64_t v28 = 0x4002000000;
  std::logic_error v29 = __Block_byref_object_copy__10276;
  mach_port_t v30 = __Block_byref_object_dispose__10277;
  memset(v31, 0, sizeof(v31));
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 0x40000000;
  v25[2] = ___ZNK18HALS_DeviceManager14CopyDeviceListERNS_15BasicDeviceListEbP11HALS_Client_block_invoke;
  v25[3] = &unk_1E6233E00;
  v25[4] = &v26;
  v25[5] = this;
  unint64_t v7 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DeviceManager *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v7, (uint64_t)v25);
  uint64_t v9 = (HALS_Device **)v27[5];
  unint64_t v10 = (HALS_Device **)v27[6];
  while (v9 != v10)
  {
    if (a3)
    {
      BOOL IsHidden = 0;
      if (!a4) {
        goto LABEL_6;
      }
    }
    else
    {
      BOOL IsHidden = HALS_Device::IsHidden(*v9);
      if (!a4)
      {
LABEL_6:
        int v12 = 1;
        goto LABEL_7;
      }
    }
    int v12 = (*(uint64_t (**)(HALS_Device *, HALS_Client *))(*(void *)*v9 + 488))(*v9, a4);
LABEL_7:
    if (((IsHidden | v12 ^ 1) & 1) == 0)
    {
      HALS_ObjectMap::RetainObject(*v9, v8);
      int v14 = (HALS_Device **)*((void *)a2 + 1);
      unint64_t v13 = *((void *)a2 + 2);
      if ((unint64_t)v14 >= v13)
      {
        uint64_t v16 = ((uint64_t)v14 - *(void *)a2) >> 3;
        if ((unint64_t)(v16 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v13 - *(void *)a2;
        uint64_t v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
          uint64_t v18 = v16 + 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        if (v19) {
          unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v19);
        }
        else {
          unint64_t v8 = 0;
        }
        unint64_t v20 = (HALS_Device **)(v19 + 8 * v16);
        *unint64_t v20 = *v9;
        uint64_t v15 = v20 + 1;
        long long v22 = *(char **)a2;
        uint64_t v21 = (char *)*((void *)a2 + 1);
        if (v21 != *(char **)a2)
        {
          do
          {
            int v23 = (HALS_Device *)*((void *)v21 - 1);
            v21 -= 8;
            *--unint64_t v20 = v23;
          }
          while (v21 != v22);
          uint64_t v21 = *(char **)a2;
        }
        *(void *)a2 = v20;
        *((void *)a2 + 1) = v15;
        *((void *)a2 + 2) = v19 + 8 * (void)v8;
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *int v14 = *v9;
        uint64_t v15 = v14 + 1;
      }
      *((void *)a2 + 1) = v15;
    }
    ++v9;
  }
  _Block_object_dispose(&v26, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v31, v24);
}

void sub_1BADB6180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v7, v9);
  _Unwind_Resume(a1);
}

void HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(HALS_ObjectMap ***this, HALS_Object *a2)
{
  __int16 v3 = *this;
  if (*this != this[1])
  {
    do
      HALS_ObjectMap::ReleaseObject(*v3++, a2);
    while (v3 != this[1]);
    __int16 v3 = *this;
  }
  if (v3)
  {
    this[1] = v3;
    operator delete(v3);
  }
}

__n128 __Block_byref_object_copy__10276(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__10277(uint64_t a1, HALS_Object *a2)
{
}

uint64_t ___ZNK18HALS_DeviceManager14CopyDeviceListERNS_15BasicDeviceListEbP11HALS_Client_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 264))(*(void *)(a1 + 40), *(void *)(*(void *)(a1 + 32) + 8) + 40);
}

void sub_1BADB6288(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

unsigned int *HALS_DeviceManager::CopyNonMetaDeviceByIsolatedUseCaseID(HALS_DeviceManager *a1, int a2, HALS_Client *a3)
{
  int v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  HALS_DeviceManager::CopyDeviceList(a1, (HALS_DeviceManager::BasicDeviceList *)&v14, 1, a3);
  if (v14 == v15)
  {
    unint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = v14 + 1;
    do
    {
      unint64_t v7 = (unsigned int *)*(v6 - 1);
      uint64_t v12 = 0x676C6F6269756964;
      int v13 = 0;
      uint64_t v8 = v7[4];
      int v18 = 0;
      int v17 = 0;
      (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, int *, int *, void, void, HALS_Client *))(*(void *)v7 + 112))(v7, v8, &v12, 4, &v17, &v18, 0, 0, a3);
      if (v18 != a2) {
        unint64_t v7 = 0;
      }
      if (v7) {
        break;
      }
    }
    while (v6++ != v15);
  }
  HALS_ObjectMap::RetainObject((HALS_ObjectMap *)v7, v5);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v14, v10);
  return v7;
}

void sub_1BADB63C0(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

void HALS_DeviceManager::_CopyIODeviceList(uint64_t a1, void *a2)
{
  a2[1] = *a2;
}

void HALS_DeviceManager::_CopyClockDeviceList(uint64_t a1, void *a2)
{
  a2[1] = *a2;
}

void HALS_DeviceManager::_CopyBoxList(uint64_t a1, void *a2)
{
  a2[1] = *a2;
}

void HALS_DeviceManager::HandleOwnedObjectGroupPropertiesChanged(HALS_DeviceManager *this, HALS_ObjectMap *a2, uint64_t a3, unsigned int a4, const unsigned int *a5, const unsigned int *a6, unsigned int a7, const AudioObjectPropertyAddress *a8, BOOL a9)
{
  int v13 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(a2);
  uint64_t v15 = v13;
  if (v13)
  {
    int v16 = *((_DWORD *)v13 + 5);
    if (v16 <= 1701078389)
    {
      BOOL v17 = v16 == 1633773415;
      int v18 = 1633969526;
    }
    else
    {
      BOOL v17 = v16 == 1701078390 || v16 == 1701733488;
      int v18 = 1919182198;
    }
    if (!v17 && v16 != v18)
    {
      int v20 = *((_DWORD *)v13 + 6);
      if (v16 == v20) {
        goto LABEL_14;
      }
      if (v20 <= 1701078389)
      {
        if (v20 != 1633773415)
        {
          int v21 = 1633969526;
LABEL_22:
          if (v20 != v21) {
            goto LABEL_14;
          }
        }
      }
      else if (v20 != 1701078390 && v20 != 1919182198)
      {
        int v21 = 1701733488;
        goto LABEL_22;
      }
    }
    HALS_DeviceManager::HandleOwnedObjectPropertiesChanged(this, v13, a3, a7, a8, a9);
  }
LABEL_14:
  HALS_ObjectMap::ReleaseObject(v15, v14);
}

void sub_1BADB652C(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void HALS_DeviceManager::HandleOwnedObjectPropertiesChanged(HALS_DeviceManager *this, const HALS_Object *a2, uint64_t a3, unsigned int a4, const AudioObjectPropertyAddress *a5, int a6)
{
  int v10 = *((_DWORD *)a2 + 5);
  if (v10 <= 1701078389)
  {
    BOOL v11 = v10 == 1633773415;
    int v12 = 1633969526;
  }
  else
  {
    BOOL v11 = v10 == 1701078390 || v10 == 1701733488;
    int v12 = 1919182198;
  }
  if (!v11 && v10 != v12)
  {
    int v21 = *((_DWORD *)a2 + 6);
    if (v10 == v21) {
      return;
    }
    if (v21 <= 1701078389)
    {
      if (v21 != 1633773415)
      {
        int v22 = 1633969526;
LABEL_43:
        if (v21 != v22) {
          return;
        }
      }
    }
    else if (v21 != 1701078390 && v21 != 1919182198)
    {
      int v22 = 1701733488;
      goto LABEL_43;
    }
  }
  uint64_t i = a5;
  if (a4)
  {
    uint64_t v15 = 12 * a4;
    for (uint64_t i = a5; i->mSelector != 1751412337 && i->mSelector != 1751737454; ++i)
    {
      v15 -= 12;
      if (!v15) {
        return;
      }
    }
  }
  if (i != &a5[a4])
  {
    if (i->mSelector == 1751412337)
    {
      BOOL v17 = 0;
      int v18 = 0;
    }
    else
    {
      int v18 = (AudioObjectPropertyAddress *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(1uLL);
      *(void *)&v18->AudioObjectPropertySelector mSelector = 0x676C6F6264657623;
      v18->uint64_t mElement = 0;
      BOOL v17 = v18 + 1;
    }
    if (!HALS_Device::IsHidden(a2)) {
      HALS_Device::UpdateDeviceArrivalTime(a2);
    }
    HALS_Device::ClearDeviceArrivalTime((const __CFString **)a2);
    if (v18 != v17)
    {
      unint64_t v19 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
      unsigned int v20 = -1431655765 * ((unint64_t)((char *)v17 - (char *)v18) >> 2);
      if (a6) {
        HALS_Object::PropertiesChanged_Sync(this, v19, a3, v20, v18);
      }
      else {
        HALS_Object::PropertiesChanged(this, v19, a3, v20, v18);
      }
      BOOL v17 = v18;
    }
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void sub_1BADB6770(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_DeviceManager::GetPropertyData(HALS_DeviceManager *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, uint64_t *a6, unsigned int a7, const __CFString **a8, HALS_Client *a9)
{
  uint64_t v9 = a6;
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1870098019)
  {
    if (mSelector <= 1969841249)
    {
      if (mSelector == 1870098020)
      {
        memset(buf, 0, sizeof(buf));
        HALS_DeviceManager::CopyBoxList((uint64_t)this, (uint64_t)buf, (uint64_t)a9);
        long long v113 = 0;
        mach_port_t v114 = 0;
        uint64_t v115 = 0;
        HALS_DeviceManager::CopyDeviceList(this, (HALS_DeviceManager::BasicDeviceList *)&v113, 0, a9);
        uint64_t v110 = 0;
        mach_port_t v111 = 0;
        uint64_t v112 = 0;
        HALS_DeviceManager::CopyClockDeviceList((uint64_t)this, (uint64_t)&v110);
        unint64_t v108 = a4 >> 2;
        uint64_t v101 = a5;
        if (a7 < 4 || !a8)
        {
          uint64_t v54 = *(void *)buf;
          uint64_t v55 = *(void *)&buf[8];
          if (*(void *)buf == *(void *)&buf[8])
          {
            unsigned int v35 = 0;
          }
          else
          {
            uint64_t v56 = 0;
            uint64_t v57 = 0;
            if (v108 <= 1) {
              unsigned int v35 = 1;
            }
            else {
              unsigned int v35 = a4 >> 2;
            }
            do
            {
              *((_DWORD *)v9 + v57) = *(_DWORD *)(*(void *)(v54 + 8 * v57) + 16);
              if (v35 - 1 == v57) {
                goto LABEL_97;
              }
              ++v57;
              v56 += 8;
            }
            while (v54 + v56 != v55);
            unsigned int v35 = v57;
          }
LABEL_97:
          mach_port_t v58 = v113;
          uint64_t v59 = v114;
          if (v113 != v114)
          {
            unint64_t v60 = v35;
            if (v108 <= v35 + 1) {
              ++v35;
            }
            else {
              unsigned int v35 = a4 >> 2;
            }
            do
            {
              *((_DWORD *)v9 + v60++) = *((_DWORD *)*v58 + 4);
              if (v60 >= v108) {
                goto LABEL_104;
              }
              ++v58;
            }
            while (v58 != v59);
            unsigned int v35 = v60;
          }
LABEL_104:
          uint64_t v61 = v110;
          uint64_t v62 = v111;
          if (v110 != v111)
          {
            unint64_t v63 = v35;
            if (v108 <= v35 + 1) {
              ++v35;
            }
            else {
              unsigned int v35 = a4 >> 2;
            }
            do
            {
              *((_DWORD *)v9 + v63++) = *((_DWORD *)*v61 + 4);
              if (v63 >= v108) {
                goto LABEL_111;
              }
              ++v61;
            }
            while (v61 != v62);
            unsigned int v35 = v63;
          }
LABEL_111:
          *a5 = 4 * v35;
          goto LABEL_145;
        }
        uint64_t v106 = a7 >> 2;
        int v34 = *(uint64_t **)buf;
        uint64_t v103 = *(uint64_t **)&buf[8];
        if (*(void *)buf == *(void *)&buf[8])
        {
          unsigned int v35 = 0;
          goto LABEL_113;
        }
        unsigned int v35 = 0;
LABEL_41:
        uint64_t v36 = *v34;
        long long v37 = (HALB_Info *)*(unsigned int *)(*v34 + 20);
        __int16 v38 = (HALB_Info *)*(unsigned int *)(*v34 + 24);
        int v39 = (int *)a8;
        uint64_t v40 = v106;
        while (1)
        {
          int v42 = *v39++;
          int v41 = v42;
          BOOL IsSubClass = HALB_Info::IsSubClass(v37, v42);
          if (v37 == v38 || IsSubClass)
          {
            if (v37 != v38 || IsSubClass)
            {
LABEL_49:
              *((_DWORD *)v9 + v35++) = *(_DWORD *)(v36 + 16);
LABEL_50:
              if (v35 >= v108 || (++v34, v34 == v103))
              {
LABEL_113:
                BOOL v64 = v113;
                uint64_t v104 = v114;
                if (v113 == v114) {
                  goto LABEL_129;
                }
                if (v106 <= 1) {
                  uint64_t v65 = 1;
                }
                else {
                  uint64_t v65 = v106;
                }
                uint64_t v102 = v65;
LABEL_118:
                uint64_t v66 = *v64;
                uint64_t v67 = (HALB_Info *)*((unsigned int *)*v64 + 5);
                double v68 = (HALB_Info *)*((unsigned int *)*v64 + 6);
                uint64_t v69 = (int *)a8;
                uint64_t v70 = v102;
                while (1)
                {
                  int v72 = *v69++;
                  int v71 = v72;
                  BOOL v73 = HALB_Info::IsSubClass(v67, v72);
                  if (v67 == v68 || v73)
                  {
                    if (v67 != v68 || v73)
                    {
LABEL_126:
                      *((_DWORD *)v9 + v35++) = *((_DWORD *)v66 + 4);
LABEL_127:
                      if (v35 < v108 && ++v64 != v104) {
                        goto LABEL_118;
                      }
LABEL_129:
                      unint64_t v74 = v110;
                      std::string v105 = v111;
                      if (v110 == v111) {
                        goto LABEL_145;
                      }
                      if (v106 <= 1) {
                        uint64_t v75 = 1;
                      }
                      else {
                        uint64_t v75 = v106;
                      }
                      uint64_t v107 = v75;
LABEL_134:
                      unint64_t v76 = *v74;
                      uint8x8_t v77 = (HALB_Info *)*((unsigned int *)*v74 + 5);
                      unint64_t v78 = (HALB_Info *)*((unsigned int *)*v74 + 6);
                      unint64_t v79 = (int *)a8;
                      uint64_t v80 = v107;
                      while (1)
                      {
                        int v82 = *v79++;
                        int v81 = v82;
                        BOOL v83 = HALB_Info::IsSubClass(v77, v82);
                        if (v77 == v78 || v83)
                        {
                          if (v77 != v78 || v83)
                          {
LABEL_142:
                            *((_DWORD *)v9 + v35++) = *((_DWORD *)v76 + 4);
LABEL_143:
                            if (v35 >= v108 || (++v74, v74 == v105))
                            {
LABEL_145:
                              *uint64_t v101 = 4 * v35;
                              HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v110, v33);
                              HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v113, v84);
                              goto LABEL_146;
                            }
                            goto LABEL_134;
                          }
                        }
                        else if (HALB_Info::IsSubClass(v78, v81))
                        {
                          goto LABEL_142;
                        }
                        if (!--v80) {
                          goto LABEL_143;
                        }
                      }
                    }
                  }
                  else if (HALB_Info::IsSubClass(v68, v71))
                  {
                    goto LABEL_126;
                  }
                  if (!--v70) {
                    goto LABEL_127;
                  }
                }
              }
              goto LABEL_41;
            }
          }
          else if (HALB_Info::IsSubClass(v38, v41))
          {
            goto LABEL_49;
          }
          if (!--v40) {
            goto LABEL_50;
          }
        }
      }
      int v14 = 1885956452;
LABEL_26:
      if (mSelector == v14)
      {
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_DeviceManager.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 906;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::GetPropertyData: bad property data size for kAudioPlugInPropertyBundleID", buf, 0x12u);
          }
          exception = __cxa_allocate_exception(0x10uLL);
          *(void *)exception = off_1F148A5D8;
          exception[2] = 561211770;
        }
        long long v25 = (const void *)*((void *)this + 6);
        if (v25)
        {
          CFRetain(v25);
          uint64_t v26 = *((void *)this + 6);
        }
        else
        {
          uint64_t v26 = 0;
        }
        *uint64_t v9 = v26;
        *a5 = 8;
        return;
      }
      goto LABEL_78;
    }
    switch(mSelector)
    {
      case 1969841250:
        if (a7 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_DeviceManager.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1006;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: the qualifier is the wrong size for kAudioPlugInPropertyTranslateUIDToBox", buf, 0x12u);
          }
          int v87 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v87 = off_1F148A5D8;
          v87[2] = 1852797029;
        }
        if (!a8)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_DeviceManager.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1007;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: no qualifier data for kAudioPlugInPropertyTranslateUIDToBox", buf, 0x12u);
          }
          std::string::size_type v91 = __cxa_allocate_exception(0x10uLL);
          *(void *)std::string::size_type v91 = off_1F148A5D8;
          v91[2] = 1852797029;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_DeviceManager.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1012;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: bad property data size for kAudioPlugInPropertyTranslateUIDToBox", buf, 0x12u);
          }
          unint64_t v95 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v95 = off_1F148A5D8;
          v95[2] = 561211770;
        }
        int v16 = HALS_DeviceManager::CopyBoxByUID(this, *a8, a9);
        if (v16) {
          int v18 = *((_DWORD *)v16 + 4);
        }
        else {
          int v18 = 0;
        }
        break;
      case 1969841251:
        if (a7 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_DeviceManager.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1048;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: the qualifier is the wrong size for kAudioPlugInPropertyTranslateUIDToClockDevice", buf, 0x12u);
          }
          std::string v89 = __cxa_allocate_exception(0x10uLL);
          *(void *)std::string v89 = off_1F148A5D8;
          v89[2] = 1852797029;
        }
        if (!a8)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_DeviceManager.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1049;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: no qualifier data for kAudioPlugInPropertyTranslateUIDToClockDevice", buf, 0x12u);
          }
          uint64_t v93 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v93 = off_1F148A5D8;
          v93[2] = 1852797029;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_DeviceManager.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1054;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: bad property data size for kAudioPlugInPropertyTranslateUIDToClockDevice", buf, 0x12u);
          }
          std::string::size_type v97 = __cxa_allocate_exception(0x10uLL);
          *(void *)std::string::size_type v97 = off_1F148A5D8;
          uint64_t v97[2] = 561211770;
        }
        int v16 = HALS_DeviceManager::CopyClockDeviceByUID(this, *a8, (HALS_Client *)a3);
        if (v16) {
          int v18 = *((_DWORD *)v16 + 4);
        }
        else {
          int v18 = 0;
        }
        break;
      case 1969841252:
        if (a7 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_DeviceManager.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 964;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: the qualifier is the wrong size for kAudioHardwarePropertyTranslateUIDToDevice", buf, 0x12u);
          }
          uint64_t v86 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v86 = off_1F148A5D8;
          v86[2] = 1852797029;
        }
        if (!a8)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_DeviceManager.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 965;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: no qualifier data for kAudioHardwarePropertyTranslateUIDToDevice", buf, 0x12u);
          }
          uint64_t v90 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v90 = off_1F148A5D8;
          v90[2] = 1852797029;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_DeviceManager.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 970;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: bad property data size for kAudioHardwarePropertyTranslateUIDToDevice", buf, 0x12u);
          }
          uint64_t v94 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v94 = off_1F148A5D8;
          v94[2] = 561211770;
        }
        int v16 = HALS_DeviceManager::CopyDeviceByUID(this, *a8, a9);
        if (v16) {
          int v18 = *((_DWORD *)v16 + 4);
        }
        else {
          int v18 = 0;
        }
        break;
      default:
        goto LABEL_78;
    }
    *(_DWORD *)uint64_t v9 = v18;
    *a5 = 4;
    HALS_ObjectMap::ReleaseObject(v16, v17);
    return;
  }
  if (mSelector <= 1684370978)
  {
    if (mSelector == 1651472419)
    {
      memset(buf, 0, sizeof(buf));
      HALS_DeviceManager::CopyBoxList((uint64_t)this, (uint64_t)buf, (uint64_t)a9);
      uint64_t v28 = *(uint64_t **)buf;
      unint64_t v29 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3;
      unint64_t v30 = a4 >> 2;
      if (v29 < v30) {
        unint64_t v30 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3;
      }
      if (v30)
      {
        unint64_t v31 = v30;
        do
        {
          if (!v29) {
            std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v32 = *v28++;
          *(_DWORD *)uint64_t v9 = *(_DWORD *)(v32 + 16);
          uint64_t v9 = (uint64_t *)((char *)v9 + 4);
          --v29;
          --v31;
        }
        while (v31);
      }
      *a5 = 4 * v30;
LABEL_146:
      HALS_DeviceManager::BasicBoxList::~BasicBoxList((HALS_ObjectMap ***)buf, v27);
      return;
    }
    if (mSelector == 1668049699)
    {
      memset(buf, 0, sizeof(buf));
      HALS_DeviceManager::CopyClockDeviceList((uint64_t)this, (uint64_t)buf);
      unsigned int v20 = *(uint64_t **)buf;
      unint64_t v21 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3;
      unint64_t v22 = a4 >> 2;
      if (v21 < v22) {
        unint64_t v22 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3;
      }
      if (v22)
      {
        unint64_t v23 = v22;
        do
        {
          if (!v21) {
            std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v24 = *v20++;
          *(_DWORD *)uint64_t v9 = *(_DWORD *)(v24 + 16);
          uint64_t v9 = (uint64_t *)((char *)v9 + 4);
          --v21;
          --v23;
        }
        while (v23);
      }
      *a5 = 4 * v22;
      HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList((HALS_ObjectMap ***)buf, v19);
      return;
    }
LABEL_78:
    HALS_Object::GetPropertyData((uint64_t)this, a2, (int *)a3, a4, (int *)a5, a6);
    return;
  }
  if (mSelector == 1684370979)
  {
    memset(buf, 0, sizeof(buf));
    HALS_DeviceManager::CopyDeviceList(this, (HALS_DeviceManager::BasicDeviceList *)buf, 0, a9);
    std::string v45 = *(uint64_t **)buf;
    unint64_t v46 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3;
    unint64_t v47 = a4 >> 2;
    if (v46 < v47) {
      unint64_t v47 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3;
    }
    if (v47)
    {
      unint64_t v48 = v47;
      do
      {
        if (!v46) {
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v49 = *v45++;
        *(_DWORD *)uint64_t v9 = *(_DWORD *)(v49 + 16);
        uint64_t v9 = (uint64_t *)((char *)v9 + 4);
        --v46;
        --v48;
      }
      while (v48);
    }
    *a5 = 4 * v47;
    HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)buf, v44);
  }
  else
  {
    if (mSelector != 1685416292)
    {
      int v14 = 1819173229;
      goto LABEL_26;
    }
    if (a4 <= 0x1F)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_DeviceManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 929;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: wrong data size for kAudioHardwarePropertyDeviceForUID", buf, 0x12u);
      }
      uint64_t v88 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v88 = off_1F148A5D8;
      v88[2] = 561211770;
    }
    if (!a6)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_DeviceManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 930;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: translation data is NULL", buf, 0x12u);
      }
      uint64_t v92 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v92 = off_1F148A5D8;
      v92[2] = 1852797029;
    }
    if (*((_DWORD *)a6 + 2) != 8)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_DeviceManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 936;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: wrong data size for input to kAudioHardwarePropertyDeviceForUID", buf, 0x12u);
      }
      std::string::size_type v96 = __cxa_allocate_exception(0x10uLL);
      *(void *)std::string::size_type v96 = off_1F148A5D8;
      v96[2] = 561211770;
    }
    if (!*a6)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_DeviceManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 937;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: input to kAudioHardwarePropertyDeviceForUID is NULL", buf, 0x12u);
      }
      std::string::size_type v98 = __cxa_allocate_exception(0x10uLL);
      *(void *)std::string::size_type v98 = off_1F148A5D8;
      void v98[2] = 1852797029;
    }
    if (*((_DWORD *)a6 + 6) != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_DeviceManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 941;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: wrong data size for output to kAudioHardwarePropertyDeviceForUID", buf, 0x12u);
      }
      uint64_t v99 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v99 = off_1F148A5D8;
      v99[2] = 561211770;
    }
    char v50 = (_DWORD *)a6[2];
    if (!v50)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_DeviceManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 942;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::GetPropertyData: output to kAudioHardwarePropertyDeviceForUID is NULL", buf, 0x12u);
      }
      std::string::size_type v100 = __cxa_allocate_exception(0x10uLL);
      *(void *)std::string::size_type v100 = off_1F148A5D8;
      v100[2] = 1852797029;
    }
    std::string v51 = HALS_DeviceManager::CopyDeviceByUID(this, *(const __CFString **)*a6, a9);
    if (v51) {
      int v53 = *((_DWORD *)v51 + 4);
    }
    else {
      int v53 = 0;
    }
    _DWORD *v50 = v53;
    *a5 = a4;
    HALS_ObjectMap::ReleaseObject(v51, v52);
  }
}

void sub_1BADB7ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void HALS_DeviceManager::CopyBoxList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  _OWORD v4[2] = ___ZNK18HALS_DeviceManager11CopyBoxListERNS_12BasicBoxListEP11HALS_Client_block_invoke;
  v4[3] = &__block_descriptor_tmp_10322;
  v4[4] = a1;
  v4[5] = a2;
  void v4[6] = a3;
  __int16 v3 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v4);
}

void HALS_DeviceManager::CopyClockDeviceList(uint64_t a1, uint64_t a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZNK18HALS_DeviceManager19CopyClockDeviceListERNS_20BasicClockDeviceListEP11HALS_Client_block_invoke;
  _OWORD v3[3] = &__block_descriptor_tmp_7_10321;
  v3[4] = a1;
  v3[5] = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

void HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(HALS_ObjectMap ***this, HALS_Object *a2)
{
  __int16 v3 = *this;
  if (*this != this[1])
  {
    do
      HALS_ObjectMap::ReleaseObject(*v3++, a2);
    while (v3 != this[1]);
    __int16 v3 = *this;
  }
  if (v3)
  {
    this[1] = v3;
    operator delete(v3);
  }
}

void HALS_DeviceManager::BasicBoxList::~BasicBoxList(HALS_ObjectMap ***this, HALS_Object *a2)
{
  __int16 v3 = *this;
  if (*this != this[1])
  {
    do
      HALS_ObjectMap::ReleaseObject(*v3++, a2);
    while (v3 != this[1]);
    __int16 v3 = *this;
  }
  if (v3)
  {
    this[1] = v3;
    operator delete(v3);
  }
}

HALS_ObjectMap *HALS_DeviceManager::CopyDeviceByUID(HALS_DeviceManager *this, const __CFString *a2, HALS_Client *a3)
{
  if (!a2) {
    return 0;
  }
  BOOL v11 = 0;
  int v12 = 0;
  uint64_t v13 = 0;
  HALS_DeviceManager::CopyDeviceList(this, (HALS_DeviceManager::BasicDeviceList *)&v11, 1, a3);
  if (v11 != v12)
  {
    uint64_t v5 = v11 + 1;
    while (1)
    {
      uint64_t v6 = *(v5 - 1);
      CFStringRef v7 = (const __CFString *)(*(uint64_t (**)(HALS_ObjectMap *))(*(void *)v6 + 200))(v6);
      if (v7)
      {
        if (CFStringCompare(v7, a2, 0)) {
          uint64_t v6 = 0;
        }
        if (v6) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      if (v5++ == v12) {
        goto LABEL_15;
      }
    }
  }
  uint64_t v6 = 0;
LABEL_15:
  HALS_ObjectMap::RetainObject(v6, v4);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v11, v9);
  return v6;
}

void sub_1BADB7E10(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

HALS_ObjectMap *HALS_DeviceManager::CopyBoxByUID(HALS_DeviceManager *this, const __CFString *a2, HALS_Client *a3)
{
  if (!a2) {
    return 0;
  }
  int v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  HALS_DeviceManager::CopyBoxList((uint64_t)this, (uint64_t)&v12, (uint64_t)a3);
  uint64_t v5 = v13;
  if (v12 != v13)
  {
    uint64_t v6 = v12 + 1;
    while (1)
    {
      CFStringRef v7 = *(v6 - 1);
      CFStringRef v8 = (const __CFString *)*((void *)v7 + 8);
      if (v8)
      {
        if (CFStringCompare(v8, a2, 0)) {
          CFStringRef v7 = 0;
        }
        uint64_t v5 = v13;
        if (v7) {
          goto LABEL_15;
        }
      }
      else
      {
        CFStringRef v7 = 0;
      }
      if (v6++ == v5) {
        goto LABEL_15;
      }
    }
  }
  CFStringRef v7 = 0;
LABEL_15:
  HALS_ObjectMap::RetainObject(v7, v4);
  HALS_DeviceManager::BasicBoxList::~BasicBoxList(&v12, v10);
  return v7;
}

void sub_1BADB7EE4(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  HALS_DeviceManager::BasicBoxList::~BasicBoxList((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

HALS_ObjectMap *HALS_DeviceManager::CopyClockDeviceByUID(HALS_DeviceManager *this, const __CFString *a2, HALS_Client *a3)
{
  if (!a2) {
    return 0;
  }
  int v10 = 0;
  BOOL v11 = 0;
  uint64_t v12 = 0;
  HALS_DeviceManager::CopyClockDeviceList((uint64_t)this, (uint64_t)&v10);
  for (uint64_t i = v10; i != v11; ++i)
  {
    uint64_t v6 = *i;
    CFStringRef v7 = (const __CFString *)(*(uint64_t (**)(HALS_ObjectMap *))(*(void *)*i + 200))(*i);
    if (v7 && CFEqual(v7, a2)) {
      goto LABEL_8;
    }
  }
  uint64_t v6 = 0;
LABEL_8:
  HALS_ObjectMap::RetainObject(v6, v4);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v10, v8);
  return v6;
}

void sub_1BADB7FB8(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK18HALS_DeviceManager19CopyClockDeviceListERNS_20BasicClockDeviceListEP11HALS_Client_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 232))(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t ___ZNK18HALS_DeviceManager11CopyBoxListERNS_12BasicBoxListEP11HALS_Client_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 224))(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t HALS_DeviceManager::GetPropertyDataSize(HALS_DeviceManager *this, HALS_Client *a2, AudioObjectPropertyAddress *a3, unsigned int a4, _DWORD *a5, HALS_Client *a6)
{
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1870098019)
  {
    if (mSelector <= 1969841249)
    {
      if (mSelector == 1870098020)
      {
        mach_port_t v58 = 0;
        uint64_t v59 = 0;
        uint64_t v60 = 0;
        HALS_DeviceManager::CopyBoxList((uint64_t)this, (uint64_t)&v58, (uint64_t)a6);
        uint64_t v14 = v58;
        uint64_t v13 = v59;
        uint64_t v55 = 0;
        uint64_t v56 = 0;
        uint64_t v57 = 0;
        HALS_DeviceManager::CopyDeviceList(this, (HALS_DeviceManager::BasicDeviceList *)&v55, 0, a6);
        int v16 = v55;
        uint64_t v15 = v56;
        __int16 v52 = 0;
        int v53 = 0;
        uint64_t v54 = 0;
        HALS_DeviceManager::CopyClockDeviceList((uint64_t)this, (uint64_t)&v52);
        unint64_t v18 = (unint64_t)((char *)v15 - (char *)v16) >> 3;
        unint64_t v19 = v52;
        int v20 = v18
            + ((unint64_t)((char *)v13 - (char *)v14) >> 3)
            + ((unint64_t)((char *)v53 - (char *)v52) >> 3);
        if (a4 >= 4 && a5)
        {
          unint64_t v21 = a4 >> 2;
          unint64_t v22 = v58;
          uint64_t v49 = v53;
          for (uint64_t i = v59; v22 != i; ++v22)
          {
            unint64_t v23 = 0;
            uint64_t v24 = (HALB_Info *)*((unsigned int *)*v22 + 5);
            long long v25 = (HALB_Info *)*((unsigned int *)*v22 + 6);
            do
            {
              int v26 = a5[v23];
              BOOL IsSubClass = HALB_Info::IsSubClass(v24, v26);
              BOOL v28 = IsSubClass;
              int v29 = v24 != v25 || IsSubClass;
              if (v24 != v25 && !v28) {
                int v29 = HALB_Info::IsSubClass(v25, v26);
              }
              if (v29) {
                break;
              }
              ++v23;
            }
            while (v23 < v21);
            v20 -= v29 ^ 1;
          }
          unint64_t v31 = v55;
          unint64_t v30 = v56;
          std::string v51 = v56;
          while (v31 != v30)
          {
            unint64_t v32 = 0;
            uint64_t v33 = (HALB_Info *)*((unsigned int *)*v31 + 5);
            int v34 = (HALB_Info *)*((unsigned int *)*v31 + 6);
            do
            {
              int v35 = a5[v32];
              BOOL v36 = HALB_Info::IsSubClass(v33, v35);
              BOOL v37 = v36;
              int v38 = v33 != v34 || v36;
              if (v33 != v34 && !v37) {
                int v38 = HALB_Info::IsSubClass(v34, v35);
              }
              if (v38) {
                break;
              }
              ++v32;
            }
            while (v32 < v21);
            v20 -= v38 ^ 1;
            ++v31;
            unint64_t v30 = v51;
          }
          while (v19 != v49)
          {
            unint64_t v40 = 0;
            int v41 = (HALB_Info *)*((unsigned int *)*v19 + 5);
            int v42 = (HALB_Info *)*((unsigned int *)*v19 + 6);
            do
            {
              int v43 = a5[v40];
              BOOL v44 = HALB_Info::IsSubClass(v41, v43);
              BOOL v45 = v44;
              int v46 = v41 != v42 || v44;
              if (v41 != v42 && !v45) {
                int v46 = HALB_Info::IsSubClass(v42, v43);
              }
              if (v46) {
                break;
              }
              ++v40;
            }
            while (v40 < v21);
            v20 -= v46 ^ 1;
            ++v19;
          }
        }
        uint64_t v9 = (4 * v20);
        HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v52, v17);
        HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v55, v47);
        HALS_DeviceManager::BasicBoxList::~BasicBoxList(&v58, v48);
        return v9;
      }
      if (mSelector == 1885956452) {
        return 8;
      }
    }
    else if (mSelector == 1969841250 || mSelector == 1969841251 || mSelector == 1969841252)
    {
      return 4;
    }
    goto LABEL_39;
  }
  if (mSelector <= 1684370978)
  {
    if (mSelector == 1651472419)
    {
      int NumberBoxes = HALS_DeviceManager::GetNumberBoxes(this, a6);
    }
    else
    {
      if (mSelector != 1668049699) {
        goto LABEL_39;
      }
      int NumberBoxes = HALS_DeviceManager::GetNumberClockDevices(this, a2);
    }
    return (4 * NumberBoxes);
  }
  if (mSelector == 1684370979)
  {
    int NumberBoxes = HALS_DeviceManager::GetNumberDevices(this, a6, (HALS_Client *)a3);
    return (4 * NumberBoxes);
  }
  if (mSelector == 1685416292) {
    return 32;
  }
LABEL_39:

  return HALS_Object::GetPropertyDataSize((uint64_t)this, (uint64_t)a2, (int *)a3);
}

void sub_1BADB83C0(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  CFStringRef v8 = va_arg(va1, HALS_ObjectMap **);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, HALS_ObjectMap **);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList((HALS_ObjectMap ***)va, a2);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)va1, v6);
  HALS_DeviceManager::BasicBoxList::~BasicBoxList((HALS_ObjectMap ***)va2, v7);
  _Unwind_Resume(a1);
}

unint64_t HALS_DeviceManager::GetNumberDevices(HALS_DeviceManager *this, HALS_Client *a2, HALS_Client *a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  HALS_DeviceManager::CopyDeviceList(this, (HALS_DeviceManager::BasicDeviceList *)&v6, 0, a2);
  unint64_t v3 = (unint64_t)(v7 - (void)v6) >> 3;
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v6, v4);
  return v3;
}

void sub_1BADB8448(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

unint64_t HALS_DeviceManager::GetNumberBoxes(HALS_DeviceManager *this, HALS_Client *a2)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  HALS_DeviceManager::CopyBoxList((uint64_t)this, (uint64_t)&v5, (uint64_t)a2);
  unint64_t v2 = (unint64_t)(v6 - (void)v5) >> 3;
  HALS_DeviceManager::BasicBoxList::~BasicBoxList(&v5, v3);
  return v2;
}

void sub_1BADB84AC(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  HALS_DeviceManager::BasicBoxList::~BasicBoxList((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

unint64_t HALS_DeviceManager::GetNumberClockDevices(HALS_DeviceManager *this, HALS_Client *a2)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  HALS_DeviceManager::CopyClockDeviceList((uint64_t)this, (uint64_t)&v5);
  unint64_t v2 = (unint64_t)(v6 - (void)v5) >> 3;
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v5, v3);
  return v2;
}

void sub_1BADB850C(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_DeviceManager::IsPropertySettable(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = *a3;
  if (*a3 > 1685416291)
  {
    BOOL v4 = (v3 - 1969841250) < 3 || v3 == 1685416292;
    int v5 = 1885956452;
  }
  else
  {
    BOOL v4 = v3 == 1651472419 || v3 == 1668049699;
    int v5 = 1684370979;
  }
  if (v4 || v3 == v5) {
    return 0;
  }
  else {
    return HALS_Object::IsPropertySettable(a1, a2, a3);
  }
}

BOOL HALS_DeviceManager::HasProperty(HALS_DeviceManager *this, HALS_Client *a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  signed int mSelector = a3->mSelector;
  BOOL result = 1;
  if ((int)a3->mSelector <= 1869638758)
  {
    if (mSelector > 1668049698)
    {
      if (mSelector <= 1685416291)
      {
        if (mSelector != 1668049699)
        {
          int v7 = 1684370979;
          goto LABEL_26;
        }
        goto LABEL_29;
      }
      if (mSelector == 1685416292) {
        return result;
      }
      int v7 = 1819173229;
      goto LABEL_26;
    }
    if (mSelector == 1650682995) {
      return result;
    }
    if (mSelector != 1651472419)
    {
      int v7 = 1668047219;
      goto LABEL_26;
    }
    goto LABEL_28;
  }
  if (mSelector > 1937007733)
  {
    if (mSelector > 1969841250)
    {
      if (mSelector == 1969841251)
      {
LABEL_29:
        int NumberClockDevices = HALS_DeviceManager::GetNumberClockDevices(this, a2);
        return NumberClockDevices != 0;
      }
      int v7 = 1969841252;
LABEL_26:
      if (mSelector == v7) {
        return result;
      }
      return 0;
    }
    if (mSelector == 1937007734) {
      return result;
    }
    if (mSelector == 1969841250)
    {
LABEL_28:
      int NumberClockDevices = HALS_DeviceManager::GetNumberBoxes(this, a4);
      return NumberClockDevices != 0;
    }
    return 0;
  }
  if (mSelector != 1869638759 && mSelector != 1870098020 && mSelector != 1885956452) {
    return 0;
  }
  return result;
}

void HALS_DeviceManager::BasicIODeviceList::~BasicIODeviceList(HALS_ObjectMap ***this, HALS_Object *a2)
{
  int v3 = *this;
  if (*this != this[1])
  {
    do
      HALS_ObjectMap::ReleaseObject(*v3++, a2);
    while (v3 != this[1]);
    int v3 = *this;
  }
  if (v3)
  {
    this[1] = v3;
    operator delete(v3);
  }
}

void HALS_DeviceManager::HALS_DeviceManager(HALS_DeviceManager *this, HALS_System *a2, const __CFString *a3, uint64_t a4, HALS_Object *a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  HALS_Object::HALS_Object(this, 1634757735, 0, (uint64_t)a2, a5);
  *(void *)uint64_t v9 = &unk_1F14725F8;
  *(void *)(v9 + 48) = a3;
  *(unsigned char *)(v9 + 56) = 1;
  *(void *)(v9 + 320) = a2;
  if (!a3)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      uint64_t v12 = "HALS_DeviceManager.cpp";
      __int16 v13 = 1024;
      int v14 = 73;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceManager::HALS_DeviceManager: all device managers have to have a bundle ID", (uint8_t *)&v11, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  int v11 = 256;
  CACFString::GetCString(a3, (__CFString *)this + 2, (char *)&v11, v8);
}

void sub_1BADB88E0(_Unwind_Exception *a1)
{
  CACFString::~CACFString(v2);
  HALS_Object::~HALS_Object(v1);
  _Unwind_Resume(a1);
}

void HALS_DeviceManager::~HALS_DeviceManager(HALS_DeviceManager *this)
{
  *(void *)this = &unk_1F14725F8;
  CACFString::~CACFString((HALS_DeviceManager *)((char *)this + 48));

  HALS_Object::~HALS_Object(this);
}

void HALS_DeviceManager::LogState(const __CFString **a1, uint64_t a2)
{
  uint64_t v168 = *MEMORY[0x1E4F143B8];
  BOOL v4 = (void *)(a2 + 16);
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a2 + 16), (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Device Manager ", 15);
  uint64_t v6 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)));
  int v7 = std::locale::use_facet(&v166, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v166);
  std::ostream::put();
  std::ostream::flush();
  *(_DWORD *)mach_port_t v111 = 128;
  CACFString::GetCString(a1[6], __s, v111, v8);
  int v9 = 2;
  do
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
    --v9;
  }
  while (v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Bundle ID:               ", 25);
  size_t v10 = strlen((const char *)__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)__s, v10);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  int v11 = std::locale::use_facet(&v166, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v166);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v108 = 0;
  long long v109 = 0;
  uint64_t v110 = 0;
  HALS_DeviceManager::CopyBoxList((uint64_t)a1, (uint64_t)&v108, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Number of Boxes:         ", 25);
  uint64_t v12 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __int16 v13 = std::locale::use_facet(&v166, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale(&v166);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v106 = a2;
  int v14 = (unsigned int **)v108;
  uint64_t v107 = (unsigned int **)v109;
  if (v108 != v109)
  {
    uint64_t v15 = (std::locale::id *)MEMORY[0x1E4FBA258];
    do
    {
      int v16 = *v14;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Box ", 4);
      BOOL v17 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
      unint64_t v18 = std::locale::use_facet(&v116, v15);
      ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
      std::locale::~locale(&v116);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v19 = v16[4];
      uint64_t v129 = 0x676C6F626C6E616DLL;
      uint64_t v130 = 0;
      uint64_t v131 = 0;
      (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, char *, uint64_t *, void, void, void))(*(void *)v16 + 112))(v16, v19, &v129, 8, (char *)&v130 + 4, &v131, 0, 0, 0);
      mach_port_t v149 = &unk_1F1489A20;
      uint64_t v150 = v131;
      OS::CF::String::AsCString((CFIndex)&v149, (UInt8 *)&v166, 128);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Name:                 ", 22);
      size_t v20 = strlen((const char *)&v166);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v166, v20);
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
      unint64_t v21 = std::locale::use_facet(&v117, v15);
      ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
      std::locale::~locale(&v117);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"UID:                  ", 22);
      size_t v22 = strlen((const char *)v16 + 80);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)(v16 + 20), v22);
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
      unint64_t v23 = std::locale::use_facet(&v118, v15);
      ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
      std::locale::~locale(&v118);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v24 = v16[4];
      strcpy((char *)v132, "nartbolg");
      HIBYTE(v132[4]) = 0;
      v132[5] = 0;
      uint64_t v133 = 0;
      (*(void (**)(unsigned int *, uint64_t, _WORD *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)v16 + 112))(v16, v24, v132, 4, &v133, (char *)&v133 + 4, 0, 0, 0);
      LOBYTE(v132[0]) = HIBYTE(v133);
      HIBYTE(v132[0]) = BYTE6(v133);
      LOBYTE(v132[1]) = BYTE5(v133);
      HIBYTE(v132[1]) = BYTE4(v133);
      LOBYTE(v132[2]) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Transport Type:       ", 22);
      size_t v25 = strlen((const char *)v132);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v132, v25);
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
      int v26 = std::locale::use_facet(&v119, v15);
      ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
      std::locale::~locale(&v119);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v27 = v16[4];
      uint64_t v134 = 0x676C6F6262686175;
      int v135 = 0;
      uint64_t v136 = 0;
      (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)v16 + 112))(v16, v27, &v134, 4, &v136, (char *)&v136 + 4, 0, 0, 0);
      int v28 = HIDWORD(v136);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Has Audio:            ", 22);
      if (v28) {
        int v29 = "yes";
      }
      else {
        int v29 = "no";
      }
      if (v28) {
        uint64_t v30 = 3;
      }
      else {
        uint64_t v30 = 2;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v29, v30);
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
      unint64_t v31 = std::locale::use_facet(&v120, v15);
      ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
      std::locale::~locale(&v120);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v32 = v16[4];
      uint64_t v137 = 0x676C6F6262687669;
      int v138 = 0;
      uint64_t v139 = 0;
      (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)v16 + 112))(v16, v32, &v137, 4, &v139, (char *)&v139 + 4, 0, 0, 0);
      int v33 = HIDWORD(v139);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Has Video:            ", 22);
      if (v33) {
        int v34 = "yes";
      }
      else {
        int v34 = "no";
      }
      if (v33) {
        uint64_t v35 = 3;
      }
      else {
        uint64_t v35 = 2;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v34, v35);
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
      BOOL v36 = std::locale::use_facet(&v121, v15);
      ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
      std::locale::~locale(&v121);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v37 = v16[4];
      uint64_t v140 = 0x676C6F6262686D69;
      int v141 = 0;
      uint64_t v142 = 0;
      (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)v16 + 112))(v16, v37, &v140, 4, &v142, (char *)&v142 + 4, 0, 0, 0);
      int v38 = HIDWORD(v142);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Has MIDI:             ", 22);
      if (v38) {
        int v39 = "yes";
      }
      else {
        int v39 = "no";
      }
      if (v38) {
        uint64_t v40 = 3;
      }
      else {
        uint64_t v40 = 2;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v39, v40);
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
      int v41 = std::locale::use_facet(&v122, v15);
      ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
      std::locale::~locale(&v122);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v42 = v16[4];
      uint64_t v143 = 0x676C6F626270726FLL;
      int v144 = 0;
      uint64_t v145 = 0;
      (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)v16 + 112))(v16, v42, &v143, 4, &v145, (char *)&v145 + 4, 0, 0, 0);
      int v43 = HIDWORD(v145);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Is Protected:         ", 22);
      if (v43) {
        BOOL v44 = "yes";
      }
      else {
        BOOL v44 = "no";
      }
      if (v43) {
        uint64_t v45 = 3;
      }
      else {
        uint64_t v45 = 2;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v44, v45);
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
      int v46 = std::locale::use_facet(&v123, v15);
      ((void (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10);
      std::locale::~locale(&v123);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v47 = v16[4];
      uint64_t v146 = 0x676C6F6262786F6ELL;
      int v147 = 0;
      uint64_t v148 = 0;
      (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)v16 + 112))(v16, v47, &v146, 4, &v148, (char *)&v148 + 4, 0, 0, 0);
      int v48 = HIDWORD(v148);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Is Acquired:          ", 22);
      if (v48) {
        uint64_t v49 = "yes";
      }
      else {
        uint64_t v49 = "no";
      }
      if (v48) {
        uint64_t v50 = 3;
      }
      else {
        uint64_t v50 = 2;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v49, v50);
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
      std::string v51 = std::locale::use_facet(&v124, v15);
      ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
      std::locale::~locale(&v124);
      std::ostream::put();
      std::ostream::flush();
      if (v48)
      {
        uint64_t v52 = v16[4];
        v113.__begin_ = (std::vector<unsigned int>::pointer)0x676C6F6262647623;
        LODWORD(v113.__end_) = 0;
        unsigned int v53 = (*(uint64_t (**)(unsigned int *, uint64_t, std::vector<unsigned int> *, void, void, void))(*(void *)v16 + 104))(v16, v52, &v113, 0, 0, 0);
        LODWORD(__x.__begin_) = 0;
        std::vector<unsigned int>::vector(&v113, v53 >> 2, (const std::vector<unsigned int>::value_type *)&__x);
        uint64_t v54 = v16[4];
        __x.__begin_ = (std::vector<unsigned int>::pointer)0x676C6F6262647623;
        LODWORD(__x.__end_) = 0;
        int v114 = 0;
        (*(void (**)(unsigned int *, uint64_t, std::vector<unsigned int> *, void, int *, std::vector<unsigned int>::pointer, void, void, void))(*(void *)v16 + 112))(v16, v54, &__x, v53 & 0xFFFFFFFC, &v114, v113.__begin_, 0, 0, 0);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Number Devices:       ", 22);
        uint64_t v55 = (void *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v55 + *(void *)(*v55 - 24)));
        uint64_t v56 = std::locale::use_facet(&v125, v15);
        ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
        std::locale::~locale(&v125);
        std::ostream::put();
        std::ostream::flush();
        std::vector<unsigned int>::pointer begin = v113.__begin_;
        std::vector<unsigned int>::pointer end = v113.__end_;
        while (begin != end)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Device: ", 8);
          uint64_t v59 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v59 + *(void *)(*v59 - 24)));
          uint64_t v60 = std::locale::use_facet(&v126, v15);
          ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
          std::locale::~locale(&v126);
          std::ostream::put();
          std::ostream::flush();
          ++begin;
        }
        uint64_t v61 = v16[4];
        __x.__begin_ = (std::vector<unsigned int>::pointer)0x676C6F6262636C23;
        LODWORD(__x.__end_) = 0;
        unsigned int v62 = (*(uint64_t (**)(unsigned int *, uint64_t, std::vector<unsigned int> *, void, void, void))(*(void *)v16 + 104))(v16, v61, &__x, 0, 0, 0);
        v162[0] = 0;
        std::vector<unsigned int>::vector(&__x, v62 >> 2, v162);
        uint64_t v63 = v16[4];
        *(void *)uint64_t v162 = 0x676C6F6262636C23;
        int v163 = 0;
        int v115 = 0;
        (*(void (**)(unsigned int *, uint64_t, std::vector<unsigned int>::value_type *, void, int *, std::vector<unsigned int>::pointer, void, void, void))(*(void *)v16 + 112))(v16, v63, v162, v62 & 0xFFFFFFFC, &v115, __x.__begin_, 0, 0, 0);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Number Clock Devices: ", 22);
        BOOL v64 = (void *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v64 + *(void *)(*v64 - 24)));
        uint64_t v65 = std::locale::use_facet(&v127, v15);
        ((void (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
        std::locale::~locale(&v127);
        std::ostream::put();
        std::ostream::flush();
        uint64_t v67 = __x.__begin_;
        std::vector<unsigned int>::pointer v66 = __x.__end_;
        if (__x.__begin_ != __x.__end_)
        {
          do
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Device: ", 8);
            double v68 = (void *)std::ostream::operator<<();
            std::ios_base::getloc((const std::ios_base *)((char *)v68 + *(void *)(*v68 - 24)));
            uint64_t v69 = std::locale::use_facet(&v128, v15);
            ((void (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 10);
            std::locale::~locale(&v128);
            std::ostream::put();
            std::ostream::flush();
            ++v67;
          }
          while (v67 != v66);
          uint64_t v67 = __x.__begin_;
        }
        if (v67)
        {
          __x.__end_ = v67;
          operator delete(v67);
        }
        if (v113.__begin_)
        {
          v113.__end_ = v113.__begin_;
          operator delete(v113.__begin_);
        }
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v149);
      ++v14;
    }
    while (v14 != v107);
  }
  memset(&v113, 0, sizeof(v113));
  HALS_DeviceManager::CopyDeviceList((HALS_DeviceManager *)a1, (HALS_DeviceManager::BasicDeviceList *)&v113, 1, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Number of Devices:       ", 25);
  uint64_t v70 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v70 + *(void *)(*v70 - 24)));
  int v71 = std::locale::use_facet(&v166, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v71->__vftable[2].~facet_0)(v71, 10);
  std::locale::~locale(&v166);
  std::ostream::put();
  std::ostream::flush();
  int v72 = (char **)v113.__begin_;
  std::vector<unsigned int>::pointer v73 = v113.__end_;
  while (v72 != (char **)v73)
    HALS_Device::LogState(*v72++, v106);
  memset(&__x, 0, sizeof(__x));
  HALS_DeviceManager::CopyClockDeviceList((uint64_t)a1, (uint64_t)&__x);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Number of Clock Devices: ", 25);
  unint64_t v74 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v74 + *(void *)(*v74 - 24)));
  uint64_t v75 = std::locale::use_facet(&v166, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v75->__vftable[2].~facet_0)(v75, 10);
  std::locale::~locale(&v166);
  std::ostream::put();
  std::ostream::flush();
  std::vector<unsigned int>::pointer v77 = __x.__begin_;
  std::vector<unsigned int>::pointer v78 = __x.__end_;
  if (__x.__begin_ != __x.__end_)
  {
    unint64_t v79 = (std::locale::id *)MEMORY[0x1E4FBA258];
    do
    {
      uint64_t v80 = *(unsigned int **)v77;
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
      int v81 = std::locale::use_facet(&v151, v79);
      ((void (*)(const std::locale::facet *, uint64_t))v81->__vftable[2].~facet_0)(v81, 10);
      std::locale::~locale(&v151);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Clock Device ", 13);
      int v82 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v82 + *(void *)(*v82 - 24)));
      BOOL v83 = std::locale::use_facet(&v152, v79);
      ((void (*)(const std::locale::facet *, uint64_t))v83->__vftable[2].~facet_0)(v83, 10);
      std::locale::~locale(&v152);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v84 = v80[4];
      v166.__locale_ = (std::locale::__imp *)0x676C6F626C6E616DLL;
      int v167 = 0;
      *(void *)uint64_t v161 = 0;
      int v160 = 0;
      (*(void (**)(unsigned int *, uint64_t, std::locale *, uint64_t, int *, char *, void, void, void))(*(void *)v80 + 112))(v80, v84, &v166, 8, &v160, v161, 0, 0, 0);
      mach_port_t v149 = &unk_1F1489A20;
      uint64_t v150 = *(void *)v161;
      OS::CF::String::AsCString((CFIndex)&v149, (UInt8 *)&v166, 128);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Name:                ", 21);
      size_t v85 = strlen((const char *)&v166);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v166, v85);
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
      uint64_t v86 = std::locale::use_facet(&v153, v79);
      ((void (*)(const std::locale::facet *, uint64_t))v86->__vftable[2].~facet_0)(v86, 10);
      std::locale::~locale(&v153);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"UID:                 ", 21);
      size_t v87 = strlen((const char *)v80 + 112);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)(v80 + 28), v87);
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
      uint64_t v88 = std::locale::use_facet(&v154, v79);
      ((void (*)(const std::locale::facet *, uint64_t))v88->__vftable[2].~facet_0)(v88, 10);
      std::locale::~locale(&v154);
      std::ostream::put();
      std::ostream::flush();
      int TransportType = HALS_IODevice::GetTransportType((HALS_IODevice *)v80);
      v161[0] = HIBYTE(TransportType);
      v161[1] = BYTE2(TransportType);
      v161[2] = BYTE1(TransportType);
      v161[3] = TransportType;
      v161[4] = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Transport Type:      ", 21);
      size_t v90 = strlen(v161);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v161, v90);
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
      std::string::size_type v91 = std::locale::use_facet(&v155, v79);
      ((void (*)(const std::locale::facet *, uint64_t))v91->__vftable[2].~facet_0)(v91, 10);
      std::locale::~locale(&v155);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v92 = v80[4];
      *(void *)uint64_t v162 = 0x676C6F626869646ELL;
      int v163 = 0;
      uint64_t v164 = 0;
      (*(void (**)(unsigned int *, uint64_t, std::vector<unsigned int>::value_type *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)v80 + 112))(v80, v92, v162, 4, &v164, (char *)&v164 + 4, 0, 0, 0);
      int v93 = HIDWORD(v164);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Is Hidden:           ", 21);
      if (v93) {
        uint64_t v94 = "yes";
      }
      else {
        uint64_t v94 = "no";
      }
      if (v93) {
        uint64_t v95 = 3;
      }
      else {
        uint64_t v95 = 2;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v94, v95);
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
      std::string::size_type v96 = std::locale::use_facet(&v156, v79);
      ((void (*)(const std::locale::facet *, uint64_t))v96->__vftable[2].~facet_0)(v96, 10);
      std::locale::~locale(&v156);
      std::ostream::put();
      std::ostream::flush();
      (*(void (**)(unsigned int *))(*(void *)v80 + 320))(v80);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Clock Domain:        ", 21);
      std::string::size_type v97 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v97 + *(void *)(*v97 - 24)));
      std::string::size_type v98 = std::locale::use_facet(&v157, v79);
      ((void (*)(const std::locale::facet *, uint64_t))v98->__vftable[2].~facet_0)(v98, 10);
      std::locale::~locale(&v157);
      std::ostream::put();
      std::ostream::flush();
      (*(void (**)(unsigned int *, uint64_t))(*(void *)v80 + 304))(v80, 1);
      (*(void (**)(unsigned int *, void))(*(void *)v80 + 304))(v80, 0);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Latency              In: ", 25);
      uint64_t v99 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)" Out: ", 6);
      std::string::size_type v100 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v100 + *(void *)(*v100 - 24)));
      uint64_t v101 = std::locale::use_facet(&v158, v79);
      ((void (*)(const std::locale::facet *, uint64_t))v101->__vftable[2].~facet_0)(v101, 10);
      std::locale::~locale(&v158);
      std::ostream::put();
      std::ostream::flush();
      (*(void (**)(unsigned int *))(*(void *)v80 + 264))(v80);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Nominal Sample Rate: ", 21);
      uint64_t v102 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v102 + *(void *)(*v102 - 24)));
      uint64_t v103 = std::locale::use_facet(&v159, v79);
      ((void (*)(const std::locale::facet *, uint64_t))v103->__vftable[2].~facet_0)(v103, 10);
      std::locale::~locale(&v159);
      std::ostream::put();
      std::ostream::flush();
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v149);
      v77 += 2;
    }
    while (v77 != v78);
  }
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList((HALS_ObjectMap ***)&__x, v76);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)&v113, v104);
  HALS_DeviceManager::BasicBoxList::~BasicBoxList(&v108, v105);
}

void sub_1BADBAB94(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  int v9 = va_arg(va1, HALS_ObjectMap **);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)va1, a2);
  HALS_DeviceManager::BasicBoxList::~BasicBoxList((HALS_ObjectMap ***)va, v8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK18HALS_DeviceManager16CopyIODeviceListERNS_17BasicIODeviceListEP11HALS_Client_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 240))(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

void HALS_DeviceManager::CopyRawDeviceList(HALS_DeviceManager *this, HALS_DeviceManager::BasicDeviceList *a2)
{
  uint64_t v20 = 0;
  unint64_t v21 = &v20;
  uint64_t v22 = 0x4002000000;
  unint64_t v23 = __Block_byref_object_copy__10276;
  uint64_t v24 = __Block_byref_object_dispose__10277;
  memset(v25, 0, sizeof(v25));
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 0x40000000;
  v19[2] = ___ZNK18HALS_DeviceManager17CopyRawDeviceListERNS_15BasicDeviceListE_block_invoke;
  void v19[3] = &unk_1E6233E28;
  void v19[4] = &v20;
  v19[5] = this;
  int v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_DeviceManager *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v19);
  int v5 = (HALS_ObjectMap **)v21[5];
  for (uint64_t i = (HALS_ObjectMap **)v21[6]; v5 != i; ++v5)
  {
    HALS_ObjectMap::RetainObject(*v5, v4);
    uint64_t v8 = (HALS_ObjectMap **)*((void *)a2 + 1);
    unint64_t v7 = *((void *)a2 + 2);
    if ((unint64_t)v8 >= v7)
    {
      uint64_t v10 = ((uint64_t)v8 - *(void *)a2) >> 3;
      if ((unint64_t)(v10 + 1) >> 61) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = v7 - *(void *)a2;
      uint64_t v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
        uint64_t v12 = v10 + 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13) {
        unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v13);
      }
      else {
        BOOL v4 = 0;
      }
      uint64_t v14 = (HALS_ObjectMap **)(v13 + 8 * v10);
      *uint64_t v14 = *v5;
      int v9 = v14 + 1;
      uint64_t v16 = *(char **)a2;
      uint64_t v15 = (char *)*((void *)a2 + 1);
      if (v15 != *(char **)a2)
      {
        do
        {
          BOOL v17 = (HALS_ObjectMap *)*((void *)v15 - 1);
          v15 -= 8;
          *--uint64_t v14 = v17;
        }
        while (v15 != v16);
        uint64_t v15 = *(char **)a2;
      }
      *(void *)a2 = v14;
      *((void *)a2 + 1) = v9;
      *((void *)a2 + 2) = v13 + 8 * (void)v4;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *uint64_t v8 = *v5;
      int v9 = v8 + 1;
    }
    *((void *)a2 + 1) = v9;
  }
  _Block_object_dispose(&v20, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v25, v18);
}

void sub_1BADBAE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v7, v9);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK18HALS_DeviceManager17CopyRawDeviceListERNS_15BasicDeviceListE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 264))(*(void *)(a1 + 40), *(void *)(*(void *)(a1 + 32) + 8) + 40);
}

void sub_1BADBAEB4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

HALS_ObjectMap *HALS_DeviceManager::CopyDeviceByObjectID(HALS_DeviceManager *this, int a2, HALS_Client *a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  HALS_DeviceManager::CopyDeviceList(this, (HALS_DeviceManager::BasicDeviceList *)&v10, 1, a3);
  if (v10 == v11)
  {
    uint64_t v6 = 0;
  }
  else
  {
    int v5 = v10 + 1;
    do
    {
      if (*((_DWORD *)*(v5 - 1) + 4) == a2) {
        uint64_t v6 = *(v5 - 1);
      }
      else {
        uint64_t v6 = 0;
      }
      if (v6) {
        BOOL v7 = 1;
      }
      else {
        BOOL v7 = v5 == v11;
      }
      ++v5;
    }
    while (!v7);
  }
  HALS_ObjectMap::RetainObject(v6, v4);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v10, v8);
  return v6;
}

void sub_1BADBAF5C(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

void AMCP::DAL::PCM_Data_Handler::get_data(uint64_t *a1@<X1>, unint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = (AMCP::DAL::PCM_Data_Handler *)AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>(*a1);
  double length_in_frames = AMCP::DAL::PCM_Data_Handler::get_length_in_frames(v8);
  double v10 = round(length_in_frames);
  double v11 = round(a3);
  double v12 = round(a4);
  if (v10 <= 0.0 || v11 >= v12) {
    goto LABEL_5;
  }
  BOOL v14 = v11 <= 0.0;
  double v15 = 0.0;
  if (!v14) {
    double v15 = a3;
  }
  if (v12 < v10) {
    double length_in_frames = a4;
  }
  if (round(v15) < round(length_in_frames))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t v16 = *(void **)(v7 + 56);
    BOOL v17 = *(void **)(v7 + 64);
    if (v16 != v17)
    {
      unint64_t v18 = 0;
      int v19 = vcvtmd_s64_f64(v15);
      unint64_t v20 = vcvtmd_s64_f64(length_in_frames - v15);
      unint64_t v21 = a2 + 2;
      do
      {
        if ((*(unsigned char *)(v7 + 20) & 0x20) != 0) {
          uint64_t v22 = 1;
        }
        else {
          uint64_t v22 = *(unsigned int *)(v7 + 36);
        }
        uint64_t v23 = *v16 + (*(_DWORD *)(v7 + 32) * v19);
        unint64_t v24 = v22 * v20;
        if ((unint64_t)v18 >= *v21)
        {
          uint64_t v25 = (uint64_t)((uint64_t)v18 - *a2) >> 4;
          if ((unint64_t)(v25 + 1) >> 60) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v26 = *v21 - *a2;
          uint64_t v27 = v26 >> 3;
          if (v26 >> 3 <= (unint64_t)(v25 + 1)) {
            uint64_t v27 = v25 + 1;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v27;
          }
          int v39 = a2 + 2;
          if (v28) {
            unint64_t v28 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>(v28);
          }
          else {
            uint64_t v29 = 0;
          }
          uint64_t v30 = (void *)(v28 + 16 * v25);
          *uint64_t v30 = v23;
          v30[1] = v24;
          unint64_t v31 = *a2;
          unint64_t v32 = a2[1];
          if (v32 == *a2)
          {
            int64x2_t v34 = vdupq_n_s64(v32);
            unint64_t v33 = v28 + 16 * v25;
          }
          else
          {
            unint64_t v33 = v28 + 16 * v25;
            do
            {
              *(_OWORD *)(v33 - 16) = *(_OWORD *)(v32 - 16);
              v33 -= 16;
              v32 -= 16;
            }
            while (v32 != v31);
            int64x2_t v34 = *(int64x2_t *)a2;
          }
          unint64_t v18 = v30 + 2;
          *a2 = v33;
          a2[1] = (unint64_t)(v30 + 2);
          int64x2_t v37 = v34;
          unint64_t v35 = a2[2];
          a2[2] = v28 + 16 * v29;
          unint64_t v38 = v35;
          uint64_t v36 = v34.i64[0];
          std::__split_buffer<AMCP::DAL::Audio_Samples<unsigned char>,caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>> &>::~__split_buffer((uint64_t)&v36);
        }
        else
        {
          *unint64_t v18 = v23;
          v18[1] = v24;
          v18 += 2;
        }
        a2[1] = (unint64_t)v18;
        v16 += 3;
      }
      while (v16 != v17);
    }
  }
  else
  {
LABEL_5:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_1BADBB154(_Unwind_Exception *exception_object)
{
  int v3 = *(caulk::rt_safe_memory_resource **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>::deallocate[abi:ne180100](v3, (uint64_t)(*(void *)(v1 + 16) - (void)v3) >> 4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>(uint64_t result)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!result)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v1 = **(NSObject ***)buf;
    if (*(void *)v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v19);
    }
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      unint64_t v2 = pthread_self();
      mach_port_t v3 = pthread_mach_thread_np(v2);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v3;
      *(_WORD *)int v19 = 2080;
      *(void *)&v19[2] = "Container.h";
      __int16 v20 = 1024;
      int v21 = 121;
      __int16 v22 = 2080;
      *(void *)uint64_t v23 = "not ((m_impl.get()) != nullptr)";
      _os_log_error_impl(&dword_1BAA78000, v1, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to call Container::GetContainerData on a null Container", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v17);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to call Container::GetContainerData on a null Container", (uint64_t)&v9);
    std::logic_error::logic_error(&v10, &v9);
    v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v11, &v10);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    int v16 = -1;
    v11.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    double v12 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v11);
    *(void *)&v23[6] = "T *AMCP::DAL::Container::get_container_data_ptr() const [T = AMCP::DAL::PCM_Data_Handler]";
    unint64_t v24 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Container.h";
    int v25 = 121;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v4);
    long long v7 = v4;
    uint64_t v8 = v5;
    long long v4 = 0uLL;
    uint64_t v5 = 0;
    uint64_t v6 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return result;
}

void sub_1BADBB3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

double AMCP::DAL::PCM_Data_Handler::get_length_in_frames(AMCP::DAL::PCM_Data_Handler *this)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 7);
  if (v1 == *((void *)this + 8))
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v3 = **(NSObject ***)buf;
    if (*(void *)v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v21);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      long long v4 = pthread_self();
      mach_port_t v5 = pthread_mach_thread_np(v4);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v5;
      *(_WORD *)int v21 = 2080;
      *(void *)&uint64_t v21[2] = "PCM_Data_Handler.cpp";
      __int16 v22 = 1024;
      int v23 = 111;
      __int16 v24 = 2080;
      *(void *)int v25 = "not (not m_samples.empty())";
      _os_log_error_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Bad format for PCM data", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v19);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Bad format for PCM data", (uint64_t)&v11);
    std::logic_error::logic_error(&v12, &v11);
    v12.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v13, &v12);
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = -1;
    v13.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v14 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v13);
    *(void *)&void v25[6] = "virtual Sample_Time AMCP::DAL::PCM_Data_Handler::get_length_in_frames() const";
    uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Data_Handler.cpp";
    int v27 = 111;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v6);
    long long v9 = v6;
    uint64_t v10 = v7;
    long long v6 = 0uLL;
    uint64_t v7 = 0;
    uint64_t v8 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return (double)(*(_DWORD *)(v1 + 8) / *((_DWORD *)this + 8));
}

void sub_1BADBB708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

void *AMCP::DAL::PCM_Data_Handler::dal_operation_get_property(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "expected output samples for input samples");
  mach_port_t v5 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  long long v6 = v5;
  if (v20 < 0)
  {
    operator delete(__p[0]);
    if (v6) {
      goto LABEL_3;
    }
  }
  else if (v5)
  {
LABEL_3:
    std::string::basic_string[abi:ne180100]<0>(__p, "expected output samples for input samples");
    uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    if (v7) {
      uint64_t v8 = AMCP::Thing::convert_to<unsigned long long>((uint64_t)(v7 + 40));
    }
    else {
      uint64_t v8 = 0;
    }
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    __p[0] = 0;
    BOOL result = *(void **)(v4 + 32);
    if (result) {
      return (void *)(*(uint64_t (**)(void *, uint64_t, void **))(*(void *)result + 32))(result, v8, __p);
    }
    return result;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "actual input samples consumed");
  long long v9 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  uint64_t v10 = v9;
  if (v20 < 0)
  {
    operator delete(__p[0]);
    if (v10) {
      goto LABEL_8;
    }
  }
  else if (v9)
  {
LABEL_8:
    std::string::basic_string[abi:ne180100]<0>(__p, "actual input samples consumed");
    std::string v11 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    if (v11) {
      uint64_t v12 = AMCP::Thing::convert_to<unsigned long long>((uint64_t)(v11 + 40));
    }
    else {
      uint64_t v12 = 0;
    }
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    __p[0] = 0;
    BOOL result = *(void **)(v4 + 32);
    if (result)
    {
      (*(void (**)(void *, uint64_t, void **))(*(void *)result + 32))(result, v12, __p);
      return __p[0];
    }
    return result;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "required input samples for output samples");
  uint64_t v14 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  uint64_t v15 = v14;
  if (v20 < 0)
  {
    operator delete(__p[0]);
    if (v15) {
      goto LABEL_18;
    }
  }
  else if (v14)
  {
LABEL_18:
    std::string::basic_string[abi:ne180100]<0>(__p, "required input samples for output samples");
    uint64_t v16 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
    if (v16) {
      uint64_t v17 = AMCP::Thing::convert_to<unsigned long long>((uint64_t)(v16 + 40));
    }
    else {
      uint64_t v17 = 0;
    }
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    BOOL result = *(void **)(v4 + 32);
    if (result) {
      return (void *)(*(uint64_t (**)(void *, uint64_t))(*(void *)result + 24))(result, v17);
    }
    return result;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "get latency");
  int v18 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  if (!v18) {
    return 0;
  }
  BOOL result = *(void **)(v4 + 32);
  if (result) {
    return (void *)(*(uint64_t (**)(void *))(*(void *)result + 40))(result);
  }
  return result;
}

void sub_1BADBBA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double AMCP::DAL::PCM_Data_Handler::dal_operation_apply(AMCP::DAL::PCM_Data_Handler *a1, double *a2, uint64_t *a3, uint64_t a4, uint64_t *a5, double a6, double a7)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  double v15 = round(AMCP::DAL::PCM_Data_Handler::get_length_in_frames(a1));
  if (v15 <= 0.0
    || (v16 = a2[1], v17 = round(*a2), v18 = round(v16), v17 < v18) && (v17 >= 0.0 ? (BOOL v19 = v15 < v18) : (BOOL v19 = 1), v19))
  {
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v25 = **(NSObject ***)buf;
    if ((void)v44) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v44);
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = pthread_self();
      mach_port_t v27 = pthread_mach_thread_np(v26);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v27;
      LOWORD(v44) = 2080;
      *(void *)((char *)&v44 + 2) = "PCM_Data_Handler.cpp";
      WORD5(v44) = 1024;
      HIDWORD(v44) = 258;
      __int16 v45 = 2080;
      *(void *)int v46 = "not (Sample_Time_Range(0_S, get_length_in_frames()).encompasses(source_range))";
      _os_log_error_impl(&dword_1BAA78000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v42);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v34);
    std::logic_error::logic_error(&v35, &v34);
    v35.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v36, &v35);
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    int v41 = -1;
    v36.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int64x2_t v37 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
    *(void *)&v46[6] = "virtual Sample_Time_Range AMCP::DAL::PCM_Data_Handler::dal_operation_apply(const Sample_Time_Ra"
                         "nge &, Container, Sample_Time_Range, const DAL_Settings &, DAL_Operation_Context_Ref) const";
    uint64_t v47 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Data_Handler.cpp";
    int v48 = 258;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v29);
    long long v32 = v29;
    uint64_t v33 = v30;
    long long v29 = 0uLL;
    uint64_t v30 = 0;
    unint64_t v31 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v20 = *a5;
  AMCP::DAL::PCM_Data_Handler::get_container_data((unint64_t *)buf, a1, *a2, v16);
  uint64_t v21 = *a3;
  __int16 v22 = (std::__shared_weak_count *)a3[1];
  v28[0] = v21;
  v28[1] = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v23 = AMCP::DAL::PCM_Operation_Context::apply(v20, (uint64_t *)buf, a2, (uint64_t)v28, a4, a6, a7);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (*(void *)buf)
  {
    *(void *)&long long v44 = *(void *)buf;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](*(caulk::rt_safe_memory_resource **)buf, (uint64_t)(*((void *)&v44 + 1) - *(void *)buf) >> 4);
  }
  return v23;
}

void sub_1BADBBDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  long long v29 = *(caulk::rt_safe_memory_resource **)(v27 - 144);
  if (v29)
  {
    *(void *)(v27 - 136) = v29;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](v29, (uint64_t)(*(void *)(v27 - 128) - (void)v29) >> 4);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::PCM_Data_Handler::get_container_data(unint64_t *a1, AMCP::DAL::PCM_Data_Handler *this, double a3, double a4)
{
  double length_in_frames = AMCP::DAL::PCM_Data_Handler::get_length_in_frames(this);
  double v9 = round(length_in_frames);
  double v10 = round(a3);
  double v11 = round(a4);
  if (v9 <= 0.0 || v10 >= v11) {
    goto LABEL_5;
  }
  BOOL v13 = v10 <= 0.0;
  double v14 = 0.0;
  if (!v13) {
    double v14 = a3;
  }
  if (v11 < v9) {
    double length_in_frames = a4;
  }
  if (round(v14) < round(length_in_frames))
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    double v15 = (void *)*((void *)this + 7);
    double v16 = (void *)*((void *)this + 8);
    if (v15 != v16)
    {
      double v17 = 0;
      int v18 = vcvtmd_s64_f64(v14);
      int v19 = vcvtmd_s64_f64(length_in_frames - v14);
      uint64_t v20 = a1 + 2;
      do
      {
        if ((*((unsigned char *)this + 20) & 0x20) != 0) {
          int v21 = 1;
        }
        else {
          int v21 = *((_DWORD *)this + 9);
        }
        uint64_t v22 = *v15 + (*((_DWORD *)this + 8) * v18);
        uint64_t v23 = (v21 * v19);
        if ((unint64_t)v17 >= *v20)
        {
          uint64_t v24 = (uint64_t)((uint64_t)v17 - *a1) >> 4;
          if ((unint64_t)(v24 + 1) >> 60) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = *v20 - *a1;
          uint64_t v26 = v25 >> 3;
          if (v25 >> 3 <= (unint64_t)(v24 + 1)) {
            uint64_t v26 = v24 + 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v26;
          }
          uint64_t v38 = a1 + 2;
          if (v27) {
            unint64_t v27 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>(v27);
          }
          else {
            uint64_t v28 = 0;
          }
          long long v29 = (void *)(v27 + 16 * v24);
          *long long v29 = v22;
          v29[1] = v23;
          unint64_t v30 = *a1;
          unint64_t v31 = a1[1];
          if (v31 == *a1)
          {
            int64x2_t v33 = vdupq_n_s64(v31);
            unint64_t v32 = v27 + 16 * v24;
          }
          else
          {
            unint64_t v32 = v27 + 16 * v24;
            do
            {
              *(_OWORD *)(v32 - 16) = *(_OWORD *)(v31 - 16);
              v32 -= 16;
              v31 -= 16;
            }
            while (v31 != v30);
            int64x2_t v33 = *(int64x2_t *)a1;
          }
          double v17 = v29 + 2;
          *a1 = v32;
          a1[1] = (unint64_t)(v29 + 2);
          int64x2_t v36 = v33;
          unint64_t v34 = a1[2];
          a1[2] = v27 + 16 * v28;
          unint64_t v37 = v34;
          uint64_t v35 = v33.i64[0];
          std::__split_buffer<AMCP::DAL::Audio_Samples<float>,caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>> &>::~__split_buffer((uint64_t)&v35);
        }
        else
        {
          *double v17 = v22;
          v17[1] = v23;
          v17 += 2;
        }
        a1[1] = (unint64_t)v17;
        v15 += 3;
      }
      while (v15 != v16);
    }
  }
  else
  {
LABEL_5:
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1BADBC054(_Unwind_Exception *exception_object)
{
  mach_port_t v3 = *(caulk::rt_safe_memory_resource **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](v3, (uint64_t)(*(void *)(v1 + 16) - (void)v3) >> 4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<AMCP::DAL::Audio_Samples<float>,caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  }
  uint64_t v4 = *(caulk::rt_safe_memory_resource **)a1;
  if (*(void *)a1) {
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](v4, (uint64_t)(*(void *)(a1 + 24) - (void)v4) >> 4);
  }
  return a1;
}

void AMCP::DAL::PCM_Data_Handler::dal_operation_context_create()
{
}

void sub_1BADBC17C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<AMCP::DAL::PCM_Operation_Context>::reset[abi:ne180100]((AMCP::DAL::PCM_Operation_Context **)va);
  _Unwind_Resume(a1);
}

AMCP::DAL::PCM_Operation_Context *std::unique_ptr<AMCP::DAL::PCM_Operation_Context>::reset[abi:ne180100](AMCP::DAL::PCM_Operation_Context **a1)
{
  BOOL result = *a1;
  *a1 = 0;
  if (result)
  {
    AMCP::DAL::PCM_Operation_Context::~PCM_Operation_Context(result);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::PCM_Operation_Context *,std::shared_ptr<AMCP::DAL::DAL_Operation_Context>::__shared_ptr_default_delete<AMCP::DAL::DAL_Operation_Context,AMCP::DAL::PCM_Operation_Context>,std::allocator<AMCP::DAL::PCM_Operation_Context>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4AMCP3DAL21DAL_Operation_ContextEE27__shared_ptr_default_deleteIS3_NS2_21PCM_Operation_ContextEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

AMCP::DAL::PCM_Operation_Context *std::__shared_ptr_pointer<AMCP::DAL::PCM_Operation_Context *,std::shared_ptr<AMCP::DAL::DAL_Operation_Context>::__shared_ptr_default_delete<AMCP::DAL::DAL_Operation_Context,AMCP::DAL::PCM_Operation_Context>,std::allocator<AMCP::DAL::PCM_Operation_Context>>::__on_zero_shared(uint64_t a1)
{
  BOOL result = *(AMCP::DAL::PCM_Operation_Context **)(a1 + 24);
  if (result)
  {
    AMCP::DAL::PCM_Operation_Context::~PCM_Operation_Context(result);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

void std::__shared_ptr_pointer<AMCP::DAL::PCM_Operation_Context *,std::shared_ptr<AMCP::DAL::DAL_Operation_Context>::__shared_ptr_default_delete<AMCP::DAL::DAL_Operation_Context,AMCP::DAL::PCM_Operation_Context>,std::allocator<AMCP::DAL::PCM_Operation_Context>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t *AMCP::DAL::PCM_Data_Handler::get_ring_buffer_time_translator(AMCP::DAL::PCM_Data_Handler *this)
{
  {
    AMCP::DAL::PCM_Data_Handler::get_ring_buffer_time_translator(void)const::s_translator = (uint64_t)&unk_1F1472808;
  }
  return &AMCP::DAL::PCM_Data_Handler::get_ring_buffer_time_translator(void)const::s_translator;
}

void AMCP::DAL::PCM_Buffer_Time_Translator::translate_range(const AMCP::DAL::DAL_Time_Range *a1@<X1>, const AMCP::DAL::DAL_Time_Range *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (const AMCP::DAL::DAL_Time_Range *)((char *)a2 + 40);
  AMCP::DAL::DAL_Time::operator-((uint64_t)buf, (const AMCP::DAL::DAL_Time_Range *)((char *)a2 + 40), a2);
  AMCP::DAL::DAL_Time::operator-((uint64_t)&v82, (const AMCP::DAL::DAL_Time_Range *)((char *)a1 + 40), a1);
  BOOL v8 = AMCP::DAL::DAL_Time_Delta::operator<((AMCP::DAL::DAL_Time_Delta *)&v82, (uint64_t)buf);
  if (v85) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v85);
  }
  double v9 = *(AMCP::Log::Scope_Registry **)&buf[32];
  if (*(void *)&buf[32]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[32]);
  }
  if (v8)
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v72 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
    {
      std::vector<unsigned int>::pointer v73 = pthread_self();
      mach_port_t v74 = pthread_mach_thread_np(v73);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v74;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "PCM_Data_Handler.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 445;
      *(_WORD *)&uint8_t buf[24] = 2080;
      *(void *)&buf[26] = "not (range.length() <= ref_range.length())";
      _os_log_error_impl(&dword_1BAA78000, v72, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v88);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v80);
    std::logic_error::logic_error(&v81, &v80);
    v81.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v82, &v81);
    uint64_t v84 = 0;
    size_t v85 = 0;
    uint64_t v86 = 0;
    int v87 = -1;
    v82.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    BOOL v83 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v82);
    *(void *)&buf[32] = "virtual rt_safe_vector<Buffer_Time_Translator::Translation_Range> AMCP::DAL::PCM_Buffer_Time_T"
                          "ranslator::translate_range(const DAL_Time_Range &, const DAL_Time_Range &) const";
    *(void *)&long long v90 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Data_Handler.cpp";
    DWORD2(v90) = 445;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v78);
    uint64_t v75 = &unk_1F148AA90;
    long long v76 = v78;
    *(void *)&long long v77 = v79;
    long long v78 = 0uLL;
    uint64_t v79 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  double sample_time = AMCP::DAL::DAL_Time::get_sample_time(a2);
  AMCP::DAL::DAL_Time::operator-((uint64_t)buf, (const AMCP::DAL::DAL_Time_Range *)((char *)a1 + 40), a1);
  if ((buf[0] & 2) == 0) {
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)buf);
  }
  double v11 = *(double *)&buf[8];
  double v12 = fmod(round(sample_time), *(long double *)&buf[8]);
  if (round(v12) >= 0.0) {
    double v13 = -0.0;
  }
  else {
    double v13 = v11;
  }
  if (*(void *)&buf[32]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[32]);
  }
  double v14 = AMCP::DAL::DAL_Time::get_sample_time(v7);
  AMCP::DAL::DAL_Time::operator-((uint64_t)buf, (const AMCP::DAL::DAL_Time_Range *)((char *)a1 + 40), a1);
  if ((buf[0] & 2) == 0) {
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)buf);
  }
  double v15 = v12 + v13;
  double v16 = *(double *)&buf[8];
  double v17 = fmod(round(v14), *(long double *)&buf[8]);
  double v18 = -0.0;
  if (round(v17) < 0.0) {
    double v18 = v16;
  }
  double v19 = v17 + v18;
  if (*(void *)&buf[32]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[32]);
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  double v20 = round(v19);
  if (round(v15) >= v20)
  {
    AMCP::DAL::DAL_Time::operator-((uint64_t)buf, (const AMCP::DAL::DAL_Time_Range *)((char *)a1 + 40), a1);
    if ((buf[0] & 2) == 0) {
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)buf);
    }
    double v30 = *(double *)&buf[8];
    if (*(void *)&buf[32]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[32]);
    }
    double v31 = v30 - v15 + round(AMCP::DAL::DAL_Time::get_sample_time(a2));
    long long v32 = *(_OWORD *)((char *)a2 + 24);
    int64x2_t v33 = (std::__shared_weak_count *)*((void *)a2 + 4);
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(v75) = 2;
    long long v76 = *(unint64_t *)&v31;
    long long v77 = v32;
    *(double *)std::string buf = v15;
    *(double *)&uint8_t buf[8] = v30;
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&buf[16], a2, (const AMCP::DAL::DAL_Time *)&v75);
    unint64_t v34 = *(void *)(a3 + 16);
    unint64_t v35 = *(void *)(a3 + 8);
    if (v35 >= v34)
    {
      unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *(void *)a3) >> 5);
      unint64_t v47 = v46 + 1;
      if (v46 + 1 > 0x2AAAAAAAAAAAAAALL) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *(void *)a3) >> 5);
      if (2 * v48 > v47) {
        unint64_t v47 = 2 * v48;
      }
      if (v48 >= 0x155555555555555) {
        uint64_t v49 = 0x2AAAAAAAAAAAAAALL;
      }
      else {
        uint64_t v49 = v47;
      }
      size_t v85 = (std::__shared_weak_count *)(a3 + 16);
      uint64_t v50 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>((caulk::rt_safe_memory_resource *)v49);
      std::string v51 = (char *)v50 + 96 * v46;
      v82.__vftable = (std::logic_error_vtbl *)v50;
      v82.__imp_.__imp_ = v51;
      uint64_t v84 = (char *)v50 + 96 * v52;
      *(_OWORD *)std::string v51 = *(_OWORD *)buf;
      long long v53 = *(_OWORD *)&buf[16];
      *((void *)v51 + 4) = *(void *)&buf[32];
      *((_OWORD *)v51 + 1) = v53;
      *(_OWORD *)(v51 + 40) = v90;
      long long v90 = 0uLL;
      long long v54 = v91;
      *((void *)v51 + 9) = v92;
      *(_OWORD *)(v51 + 56) = v54;
      *((_OWORD *)v51 + 5) = v93;
      long long v93 = 0uLL;
      BOOL v83 = v51 + 96;
      std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__swap_out_circular_buffer((uint64_t *)a3, &v82);
      uint64_t v55 = *(void *)(a3 + 8);
      std::__split_buffer<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range> &>::~__split_buffer((uint64_t)&v82);
      uint64_t v56 = (std::__shared_weak_count *)*((void *)&v93 + 1);
      *(void *)(a3 + 8) = v55;
      if (v56) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v56);
      }
    }
    else
    {
      *(_OWORD *)unint64_t v35 = *(_OWORD *)buf;
      long long v36 = *(_OWORD *)&buf[16];
      *(void *)(v35 + 32) = *(void *)&buf[32];
      *(_OWORD *)(v35 + 16) = v36;
      *(_OWORD *)(v35 + 40) = v90;
      long long v90 = 0uLL;
      uint64_t v37 = v92;
      *(_OWORD *)(v35 + 56) = v91;
      *(void *)(v35 + 72) = v37;
      *(_OWORD *)(v35 + 80) = v93;
      long long v93 = 0uLL;
      *(void *)(a3 + 8) = v35 + 96;
    }
    if (*((void *)&v90 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v90 + 1));
    }
    if (v20 > 0.0)
    {
      *(void *)std::string buf = 0;
      *(double *)&uint8_t buf[8] = v19;
      AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&buf[16], (const AMCP::DAL::DAL_Time *)&v75, v7);
      unint64_t v57 = *(void *)(a3 + 8);
      unint64_t v58 = *(void *)(a3 + 16);
      if (v57 >= v58)
      {
        unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - *(void *)a3) >> 5);
        unint64_t v62 = v61 + 1;
        if (v61 + 1 > 0x2AAAAAAAAAAAAAALL) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - *(void *)a3) >> 5);
        if (2 * v63 > v62) {
          unint64_t v62 = 2 * v63;
        }
        if (v63 >= 0x155555555555555) {
          uint64_t v64 = 0x2AAAAAAAAAAAAAALL;
        }
        else {
          uint64_t v64 = v62;
        }
        size_t v85 = (std::__shared_weak_count *)(a3 + 16);
        uint64_t v65 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>((caulk::rt_safe_memory_resource *)v64);
        std::vector<unsigned int>::pointer v66 = (char *)v65 + 96 * v61;
        v82.__vftable = (std::logic_error_vtbl *)v65;
        v82.__imp_.__imp_ = v66;
        uint64_t v84 = (char *)v65 + 96 * v67;
        *(_OWORD *)std::vector<unsigned int>::pointer v66 = *(_OWORD *)buf;
        long long v68 = *(_OWORD *)&buf[16];
        *((void *)v66 + 4) = *(void *)&buf[32];
        *((_OWORD *)v66 + 1) = v68;
        *(_OWORD *)(v66 + 40) = v90;
        long long v90 = 0uLL;
        long long v69 = v91;
        *((void *)v66 + 9) = v92;
        *(_OWORD *)(v66 + 56) = v69;
        *((_OWORD *)v66 + 5) = v93;
        long long v93 = 0uLL;
        BOOL v83 = v66 + 96;
        std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__swap_out_circular_buffer((uint64_t *)a3, &v82);
        uint64_t v70 = *(void *)(a3 + 8);
        std::__split_buffer<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range> &>::~__split_buffer((uint64_t)&v82);
        int v71 = (std::__shared_weak_count *)*((void *)&v93 + 1);
        *(void *)(a3 + 8) = v70;
        if (v71) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v71);
        }
      }
      else
      {
        *(_OWORD *)unint64_t v57 = *(_OWORD *)buf;
        long long v59 = *(_OWORD *)&buf[16];
        *(void *)(v57 + 32) = *(void *)&buf[32];
        *(_OWORD *)(v57 + 16) = v59;
        *(_OWORD *)(v57 + 40) = v90;
        long long v90 = 0uLL;
        uint64_t v60 = v92;
        *(_OWORD *)(v57 + 56) = v91;
        *(void *)(v57 + 72) = v60;
        *(_OWORD *)(v57 + 80) = v93;
        long long v93 = 0uLL;
        *(void *)(a3 + 8) = v57 + 96;
      }
      if (*((void *)&v90 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v90 + 1));
      }
    }
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
  }
  else
  {
    *(double *)std::string buf = v15;
    *(double *)&uint8_t buf[8] = v19;
    *(_OWORD *)&buf[16] = *(_OWORD *)a2;
    uint64_t v21 = *((void *)a2 + 3);
    *(void *)&buf[32] = *((void *)a2 + 2);
    *(void *)&long long v90 = v21;
    uint64_t v22 = *((void *)a2 + 4);
    *((void *)&v90 + 1) = v22;
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    }
    long long v91 = *(_OWORD *)v7;
    uint64_t v23 = *((void *)a2 + 8);
    uint64_t v24 = *((void *)a2 + 9);
    uint64_t v92 = *((void *)v7 + 2);
    *(void *)&long long v93 = v23;
    *((void *)&v93 + 1) = v24;
    if (v24) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v25 = *(void *)(a3 + 16);
    unint64_t v26 = *(void *)(a3 + 8);
    if (v26 >= v25)
    {
      unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *(void *)a3) >> 5);
      unint64_t v39 = v38 + 1;
      if (v38 + 1 > 0x2AAAAAAAAAAAAAALL) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(v25 - *(void *)a3) >> 5) > v39) {
        unint64_t v39 = 0x5555555555555556 * ((uint64_t)(v25 - *(void *)a3) >> 5);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *(void *)a3) >> 5) >= 0x155555555555555) {
        uint64_t v40 = 0x2AAAAAAAAAAAAAALL;
      }
      else {
        uint64_t v40 = v39;
      }
      size_t v85 = (std::__shared_weak_count *)(a3 + 16);
      int v41 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>((caulk::rt_safe_memory_resource *)v40);
      char v42 = (char *)v41 + 96 * v38;
      v82.__vftable = (std::logic_error_vtbl *)v41;
      v82.__imp_.__imp_ = v42;
      uint64_t v84 = (char *)v41 + 96 * v43;
      *(_OWORD *)char v42 = *(_OWORD *)buf;
      long long v44 = *(_OWORD *)&buf[16];
      *((void *)v42 + 4) = *(void *)&buf[32];
      *((_OWORD *)v42 + 1) = v44;
      *(_OWORD *)(v42 + 40) = v90;
      long long v45 = v91;
      *((void *)v42 + 9) = v92;
      *(_OWORD *)(v42 + 56) = v45;
      *((_OWORD *)v42 + 5) = v93;
      BOOL v83 = v42 + 96;
      std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__swap_out_circular_buffer((uint64_t *)a3, &v82);
      unint64_t v29 = *(void *)(a3 + 8);
      std::__split_buffer<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range> &>::~__split_buffer((uint64_t)&v82);
    }
    else
    {
      *(_OWORD *)unint64_t v26 = *(_OWORD *)buf;
      uint64_t v27 = *(void *)&buf[32];
      *(_OWORD *)(v26 + 16) = *(_OWORD *)&buf[16];
      *(void *)(v26 + 32) = v27;
      *(void *)(v26 + 40) = v21;
      *(void *)(v26 + 48) = v22;
      uint64_t v28 = v92;
      *(_OWORD *)(v26 + 56) = v91;
      *(void *)(v26 + 72) = v28;
      *(void *)(v26 + 80) = v23;
      *(void *)(v26 + 88) = v24;
      unint64_t v29 = v26 + 96;
    }
    *(void *)(a3 + 8) = v29;
  }
}

void sub_1BADBCBD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  AMCP::DAL::Buffer_Time_Translator::Translation_Range::~Translation_Range((AMCP::DAL::Buffer_Time_Translator::Translation_Range *)&a37);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&a37);
  _Unwind_Resume(a1);
}

void AMCP::DAL::PCM_Buffer_Time_Translator::~PCM_Buffer_Time_Translator(AMCP::DAL::PCM_Buffer_Time_Translator *this)
{
}

AMCP::DAL::PCM_Data_Handler *AMCP::DAL::PCM_Data_Handler::erase_range(AMCP::DAL::PCM_Data_Handler *this, double a2, double a3)
{
  double v3 = a3 - a2;
  if (round(a3 - a2) > 0.0)
  {
    uint64_t v4 = this;
    AMCP::DAL::PCM_Data_Handler::get_container_data((unint64_t *)&v8, this, a2, a3);
    this = v9;
    if (v9 != v8)
    {
      uint64_t v5 = 0;
      size_t v6 = *((_DWORD *)v4 + 8) * vcvtmd_s64_f64(v3);
      if ((unint64_t)((v9 - (AMCP::DAL::PCM_Data_Handler *)v8) >> 4) <= 1) {
        uint64_t v7 = 1;
      }
      else {
        uint64_t v7 = (v9 - (AMCP::DAL::PCM_Data_Handler *)v8) >> 4;
      }
      do
      {
        bzero(*(void **)((char *)v8 + v5), v6);
        v5 += 16;
        --v7;
      }
      while (v7);
      this = (AMCP::DAL::PCM_Data_Handler *)v8;
    }
    if (this)
    {
      double v9 = this;
      return std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](this, (v10 - (uint64_t)this) >> 4);
    }
  }
  return this;
}

void AMCP::DAL::PCM_Data_Handler::mix(AMCP::Log::Scope_Registry *a1, AMCP::DAL::PCM_Data_Handler **a2, double a3, double a4, double a5)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)a1 + 4) != 1819304813 || (int v6 = *((_DWORD *)a1 + 5), (v6 & 0x40) != 0))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v26 = **(NSObject ***)buf;
    if (*(void *)v53) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v53);
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = pthread_self();
      mach_port_t v28 = pthread_mach_thread_np(v27);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v28;
      *(_WORD *)long long v53 = 2080;
      *(void *)&uint64_t v53[2] = "PCM_Data_Handler.cpp";
      __int16 v54 = 1024;
      int v55 = 385;
      __int16 v56 = 2080;
      *(void *)unint64_t v57 = "not (get_format().IsMixable())";
      _os_log_error_impl(&dword_1BAA78000, v26, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Format is not mixable", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v35);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Format is not mixable", (uint64_t)&v45);
    std::logic_error::logic_error((std::logic_error *)&v37, &v45);
    v37.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error(&v46, (const std::logic_error *)&v37);
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    int v51 = -1;
    v46.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unint64_t v47 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v46);
    *(void *)&v57[6] = "virtual void AMCP::DAL::PCM_Data_Handler::mix(Sample_Time_Range, Container, Sample_Time, DAL_Op"
                         "eration_Context_Ref) const";
    unint64_t v58 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Data_Handler.cpp";
    int v59 = 385;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v40);
    char v42 = &unk_1F148AA90;
    long long v43 = *(_OWORD *)v40;
    uint64_t v44 = v41;
    v40[0] = 0;
    v40[1] = 0;
    uint64_t v41 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  BOOL v8 = *a2;
  if (!*a2 || (*((_DWORD *)v8 + 4) == 1819304813 ? (BOOL v9 = (*((_DWORD *)v8 + 5) & 0x40) == 0) : (BOOL v9 = 0), !v9))
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v32 = **(NSObject ***)buf;
    if (*(void *)v53) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v53);
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      int64x2_t v33 = pthread_self();
      mach_port_t v34 = pthread_mach_thread_np(v33);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v34;
      *(_WORD *)long long v53 = 2080;
      *(void *)&uint64_t v53[2] = "PCM_Data_Handler.cpp";
      __int16 v54 = 1024;
      int v55 = 386;
      __int16 v56 = 2080;
      *(void *)unint64_t v57 = "not (dest_container.get_format().IsMixable())";
      _os_log_error_impl(&dword_1BAA78000, v32, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Format is not mixable", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v35);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Format is not mixable", (uint64_t)&v45);
    std::logic_error::logic_error((std::logic_error *)&v37, &v45);
    v37.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error(&v46, (const std::logic_error *)&v37);
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    int v51 = -1;
    v46.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unint64_t v47 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v46);
    *(void *)&v57[6] = "virtual void AMCP::DAL::PCM_Data_Handler::mix(Sample_Time_Range, Container, Sample_Time, DAL_Op"
                         "eration_Context_Ref) const";
    unint64_t v58 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Data_Handler.cpp";
    int v59 = 386;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v40);
    char v42 = &unk_1F148AA90;
    long long v43 = *(_OWORD *)v40;
    uint64_t v44 = v41;
    v40[0] = 0;
    v40[1] = 0;
    uint64_t v41 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if ((~v6 & 9) != 0)
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v10 = **(NSObject ***)buf;
    if (*(void *)v53) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v53);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      double v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)long long v53 = 2080;
      *(void *)&uint64_t v53[2] = "PCM_Data_Handler.cpp";
      __int16 v54 = 1024;
      int v55 = 387;
      __int16 v56 = 2080;
      *(void *)unint64_t v57 = "not ((get_format().mFormatFlags & kAudioFormatFlagIsFloat) and (get_format().mFormatFlags & kAudi"
                       "oFormatFlagIsPacked))";
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We only support mixing 32bit float format samples", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v35);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"We only support mixing 32bit float format samples", (uint64_t)&v45);
    std::logic_error::logic_error((std::logic_error *)&v37, &v45);
    v37.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error(&v46, (const std::logic_error *)&v37);
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    int v51 = -1;
    v46.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unint64_t v47 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v46);
    *(void *)&v57[6] = "virtual void AMCP::DAL::PCM_Data_Handler::mix(Sample_Time_Range, Container, Sample_Time, DAL_Op"
                         "eration_Context_Ref) const";
    unint64_t v58 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Data_Handler.cpp";
    int v59 = 387;
    std::vector<void *>::vector(v40);
    int v13 = backtrace((void **)v40[0], (unint64_t)((char *)v40[1] - (char *)v40[0]) >> 3);
    std::vector<void *>::resize((char **)v40, v13);
    char v42 = &unk_1F148AA90;
    long long v43 = *(_OWORD *)v40;
    uint64_t v44 = v41;
    v40[0] = 0;
    v40[1] = 0;
    uint64_t v41 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  double v17 = (AMCP::DAL::PCM_Data_Handler *)AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>((uint64_t)v8);
  double length_in_frames = AMCP::DAL::PCM_Data_Handler::get_length_in_frames(v17);
  if (round(a3 + length_in_frames - a5) < round(a4)) {
    a4 = a3 + length_in_frames - a5;
  }
  if (round(a3) < round(a4))
  {
    AMCP::DAL::PCM_Data_Handler::get_container_data((unint64_t *)&v45, a1, a3, a4);
    double v19 = *a2;
    AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>((uint64_t)v19);
    AMCP::DAL::PCM_Data_Handler::get_other_data<float>((unint64_t *)v40, v19, a5, length_in_frames);
    if ((*((unsigned char *)a1 + 20) & 0x20) != 0) {
      unsigned int v20 = 1;
    }
    else {
      unsigned int v20 = *((_DWORD *)a1 + 9);
    }
    unint64_t v21 = (uint64_t)(v45.__r_.__value_.__l.__size_ - v45.__r_.__value_.__r.__words[0]) >> 4;
    uint64_t v22 = v40[0];
    if (v21 != ((char *)v40[1] - (char *)v40[0]) >> 4)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v40[0]);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unint64_t v29 = **(NSObject ***)buf;
      if (*(void *)v53) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v53);
      }
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        double v30 = pthread_self();
        mach_port_t v31 = pthread_mach_thread_np(v30);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v31;
        *(_WORD *)long long v53 = 2080;
        *(void *)&uint64_t v53[2] = "PCM_Data_Handler.cpp";
        __int16 v54 = 1024;
        int v55 = 399;
        __int16 v56 = 2080;
        *(void *)unint64_t v57 = "not (source.size() == dest.size())";
        _os_log_error_impl(&dword_1BAA78000, v29, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v39);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v37);
      std::logic_error::logic_error(&v38, &v37);
      v38.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v46, &v38);
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      int v51 = -1;
      v46.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      unint64_t v47 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v46);
      *(void *)&v57[6] = "virtual void AMCP::DAL::PCM_Data_Handler::mix(Sample_Time_Range, Container, Sample_Time, DAL_"
                           "Operation_Context_Ref) const";
      unint64_t v58 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Data_Handler.cpp";
      int v59 = 399;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v35);
      char v42 = &unk_1F148AA90;
      long long v43 = v35;
      uint64_t v44 = v36;
      long long v35 = 0uLL;
      uint64_t v36 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    if (v45.__r_.__value_.__l.__size_ != v45.__r_.__value_.__r.__words[0])
    {
      uint64_t v23 = 0;
      vDSP_Length v24 = v20 * vcvtmd_s64_f64(a4 - a3);
      if (v21 <= 1) {
        uint64_t v25 = 1;
      }
      else {
        uint64_t v25 = (uint64_t)(v45.__r_.__value_.__l.__size_ - v45.__r_.__value_.__r.__words[0]) >> 4;
      }
      do
      {
        vDSP_vadd(*(const float **)((char *)v40[0] + v23), 1, *(const float **)(v45.__r_.__value_.__r.__words[0] + v23), 1, *(float **)((char *)v40[0] + v23), 1, v24);
        v23 += 16;
        --v25;
      }
      while (v25);
      uint64_t v22 = v40[0];
    }
    if (v22)
    {
      v40[1] = v22;
      std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v22, (v41 - (uint64_t)v22) >> 4);
    }
    if (v45.__r_.__value_.__r.__words[0])
    {
      v45.__r_.__value_.__l.__size_ = v45.__r_.__value_.__r.__words[0];
      std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v45.__r_.__value_.__l.__data_, (uint64_t)(v45.__r_.__value_.__r.__words[2] - v45.__r_.__value_.__r.__words[0]) >> 4);
    }
  }
}

void sub_1BADBD8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,caulk::rt_safe_memory_resource *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,caulk::rt_safe_memory_resource *a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38)
{
  if (a25) {
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](a25, (a27 - (uint64_t)a25) >> 4);
  }
  if (a33) {
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](a33, (a35 - (uint64_t)a33) >> 4);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::PCM_Data_Handler::get_other_data<float>(unint64_t *a1, AMCP::DAL::PCM_Data_Handler *this, double a3, double a4)
{
  double length_in_frames = AMCP::DAL::PCM_Data_Handler::get_length_in_frames(this);
  double v9 = round(length_in_frames);
  double v10 = round(a3);
  double v11 = round(a4);
  if (v9 <= 0.0 || v10 >= v11) {
    goto LABEL_5;
  }
  BOOL v13 = v10 <= 0.0;
  double v14 = 0.0;
  if (!v13) {
    double v14 = a3;
  }
  if (v11 < v9) {
    double length_in_frames = a4;
  }
  if (round(v14) < round(length_in_frames))
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    double v15 = (void *)*((void *)this + 7);
    double v16 = (void *)*((void *)this + 8);
    if (v15 != v16)
    {
      double v17 = 0;
      int v18 = vcvtmd_s64_f64(v14);
      unint64_t v19 = vcvtmd_s64_f64(length_in_frames - v14);
      unsigned int v20 = a1 + 2;
      do
      {
        if ((*((unsigned char *)this + 20) & 0x20) != 0) {
          uint64_t v21 = 1;
        }
        else {
          uint64_t v21 = *((unsigned int *)this + 9);
        }
        uint64_t v22 = *v15 + (*((_DWORD *)this + 8) * v18);
        unint64_t v23 = v21 * v19;
        if ((unint64_t)v17 >= *v20)
        {
          uint64_t v24 = (uint64_t)((uint64_t)v17 - *a1) >> 4;
          if ((unint64_t)(v24 + 1) >> 60) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = *v20 - *a1;
          uint64_t v26 = v25 >> 3;
          if (v25 >> 3 <= (unint64_t)(v24 + 1)) {
            uint64_t v26 = v24 + 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v26;
          }
          std::logic_error v38 = a1 + 2;
          if (v27) {
            unint64_t v27 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>(v27);
          }
          else {
            uint64_t v28 = 0;
          }
          unint64_t v29 = (void *)(v27 + 16 * v24);
          *unint64_t v29 = v22;
          v29[1] = v23;
          unint64_t v30 = *a1;
          unint64_t v31 = a1[1];
          if (v31 == *a1)
          {
            int64x2_t v33 = vdupq_n_s64(v31);
            unint64_t v32 = v27 + 16 * v24;
          }
          else
          {
            unint64_t v32 = v27 + 16 * v24;
            do
            {
              *(_OWORD *)(v32 - 16) = *(_OWORD *)(v31 - 16);
              v32 -= 16;
              v31 -= 16;
            }
            while (v31 != v30);
            int64x2_t v33 = *(int64x2_t *)a1;
          }
          double v17 = v29 + 2;
          *a1 = v32;
          a1[1] = (unint64_t)(v29 + 2);
          int64x2_t v36 = v33;
          unint64_t v34 = a1[2];
          a1[2] = v27 + 16 * v28;
          unint64_t v37 = v34;
          uint64_t v35 = v33.i64[0];
          std::__split_buffer<AMCP::DAL::Audio_Samples<float>,caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>> &>::~__split_buffer((uint64_t)&v35);
        }
        else
        {
          *double v17 = v22;
          v17[1] = v23;
          v17 += 2;
        }
        a1[1] = (unint64_t)v17;
        v15 += 3;
      }
      while (v15 != v16);
    }
  }
  else
  {
LABEL_5:
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1BADBDD1C(_Unwind_Exception *exception_object)
{
  double v3 = *(caulk::rt_safe_memory_resource **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](v3, (uint64_t)(*(void *)(v1 + 16) - (void)v3) >> 4);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::PCM_Data_Handler::copy(AMCP::DAL::PCM_Data_Handler *a1, double *a2, uint64_t *a3, uint64_t a4, double a5)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  double v9 = (AMCP::DAL::PCM_Data_Handler *)*a3;
  AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>(*a3);
  double v10 = *(std::__shared_weak_count **)(a4 + 8);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (round(AMCP::DAL::PCM_Data_Handler::get_length_in_frames(v9)) <= 0.0)
  {
    AMCP::Log::Scope_Registry::get(v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v22 = **(NSObject ***)buf;
    if (*(void *)v50) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v50);
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      unint64_t v23 = pthread_self();
      mach_port_t v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v24;
      *(_WORD *)uint64_t v50 = 2080;
      *(void *)&v50[2] = "PCM_Data_Handler.cpp";
      __int16 v51 = 1024;
      int v52 = 307;
      __int16 v53 = 2080;
      *(void *)__int16 v54 = "not (dest_handler->get_length_in_frames() > 0_S)";
      _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v31);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v40);
    std::logic_error::logic_error(&v33, &v40);
    v33.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v42, &v33);
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    int v47 = -1;
    v42.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v43 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v42);
    *(void *)&v54[6] = "void AMCP::DAL::PCM_Data_Handler::copy_data(const Sample_Time_Range &, PCM_Data_Handler *, Samp"
                         "le_Time, DAL_Operation_Context_Ref) const";
    *(void *)&v54[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Data_Handler.cpp";
    *(_DWORD *)&v54[22] = 307;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v35);
    long long v38 = v35;
    uint64_t v39 = v36;
    long long v35 = 0uLL;
    uint64_t v36 = 0;
    unint64_t v37 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  double length_in_frames = AMCP::DAL::PCM_Data_Handler::get_length_in_frames(v9);
  AMCP::DAL::PCM_Data_Handler::get_container_data((unint64_t *)&v33, a1, *a2, a2[1]);
  if (v33.__vftable == (std::logic_error_vtbl *)v33.__imp_.__imp_)
  {
    AMCP::Log::Scope_Registry::get(v13);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v25 = **(NSObject ***)buf;
    if (*(void *)v50) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v50);
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = pthread_self();
      mach_port_t v27 = pthread_mach_thread_np(v26);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v27;
      *(_WORD *)uint64_t v50 = 2080;
      *(void *)&v50[2] = "PCM_Data_Handler.cpp";
      __int16 v51 = 1024;
      int v52 = 311;
      __int16 v53 = 2080;
      *(void *)__int16 v54 = "not (not source.empty())";
      _os_log_error_impl(&dword_1BAA78000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v40);
    std::logic_error::logic_error(&v31, &v40);
    v31.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v42, &v31);
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    int v47 = -1;
    v42.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v43 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v42);
    *(void *)&v54[6] = "void AMCP::DAL::PCM_Data_Handler::copy_data(const Sample_Time_Range &, PCM_Data_Handler *, Samp"
                         "le_Time, DAL_Operation_Context_Ref) const";
    *(void *)&v54[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Data_Handler.cpp";
    *(_DWORD *)&v54[22] = 311;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v35);
    long long v38 = v35;
    uint64_t v39 = v36;
    long long v35 = 0uLL;
    uint64_t v36 = 0;
    unint64_t v37 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  AMCP::DAL::PCM_Data_Handler::get_other_data<float>((unint64_t *)&v31, v9, a5, length_in_frames);
  imp = v33.__imp_.__imp_;
  double v15 = v31.__vftable;
  double v16 = v31.__imp_.__imp_;
  if (v33.__imp_.__imp_ - (const char *)v33.__vftable != v31.__imp_.__imp_ - (const char *)v31.__vftable)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v31.__vftable);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v28 = **(NSObject ***)buf;
    if (*(void *)v50) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v50);
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      unint64_t v29 = pthread_self();
      mach_port_t v30 = pthread_mach_thread_np(v29);
      *(_DWORD *)std::string buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v30;
      *(_WORD *)uint64_t v50 = 2080;
      *(void *)&v50[2] = "PCM_Data_Handler.cpp";
      __int16 v51 = 1024;
      int v52 = 324;
      __int16 v53 = 2080;
      *(void *)__int16 v54 = "not (source.size() == destination.size())";
      *(_WORD *)&v54[8] = 2080;
      *(void *)&unsigned char v54[10] = "static void AMCP::DAL::PCM_Data_Handler::copy_samples(const Sample_Group<T> &, Sample_Group<"
                            "T> &, const CA::StreamDescription &) [T = float]";
      *(_WORD *)&v54[18] = 2048;
      *(void *)&v54[20] = (v33.__imp_.__imp_ - (const char *)v33.__vftable) >> 4;
      __int16 v55 = 2048;
      int64_t v56 = (v31.__imp_.__imp_ - (const char *)v31.__vftable) >> 4;
      _os_log_error_impl(&dword_1BAA78000, v28, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s %s: sample layout does not match (source=%zu streams, dest=%zu streams)!", buf, 0x40u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v48);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"%s: sample layout does not match (source=%zu streams, dest=%zu streams)!", (uint64_t)&v40, "static void AMCP::DAL::PCM_Data_Handler::copy_samples(const Sample_Group<T> &, Sample_Group<T> &, const CA::StreamDescription &) [T = float]", (v33.__imp_.__imp_ - (const char *)v33.__vftable) >> 4, (v31.__imp_.__imp_ - (const char *)v31.__vftable) >> 4);
    std::logic_error::logic_error(&v41, &v40);
    v41.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v42, &v41);
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    int v47 = -1;
    v42.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v43 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v42);
    *(void *)&v54[6] = "static void AMCP::DAL::PCM_Data_Handler::copy_samples(const Sample_Group<T> &, Sample_Group<T> "
                         "&, const CA::StreamDescription &) [T = float]";
    *(void *)&v54[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Data_Handler.cpp";
    *(_DWORD *)&v54[22] = 324;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v35);
    long long v38 = v35;
    uint64_t v39 = v36;
    long long v35 = 0uLL;
    uint64_t v36 = 0;
    unint64_t v37 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (v33.__vftable != (std::logic_error_vtbl *)v33.__imp_.__imp_
    && v31.__vftable != (std::logic_error_vtbl *)v31.__imp_.__imp_)
  {
    p_what = &v33.what;
    int v18 = &v31.what;
    do
    {
      unint64_t v19 = (unint64_t)*(v18 - 1);
      if (v19 >= (unint64_t)*(p_what - 1)) {
        unint64_t v19 = (unint64_t)*(p_what - 1);
      }
      if (v19)
      {
        unsigned int v20 = *((_DWORD *)a1 + 9);
        if ((*((_DWORD *)a1 + 5) & 0x20) != 0) {
          unsigned int v20 = 1;
        }
        memcpy(*(v18 - 2), *(p_what - 2), *((_DWORD *)a1 + 8) * (int)v19 / v20);
        imp = v33.__imp_.__imp_;
        double v16 = v31.__imp_.__imp_;
      }
      if (p_what == (const char *(__cdecl **)(const std::logic_error *__hidden))imp) {
        break;
      }
      p_what += 2;
      BOOL v21 = v18 == (const char *(__cdecl **)(const std::logic_error *__hidden))v16;
      v18 += 2;
    }
    while (!v21);
    double v15 = v31.__vftable;
  }
  if (v15)
  {
    v31.__imp_.__imp_ = (const char *)v15;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v15, (v32 - (uint64_t)v15) >> 4);
  }
  if (v33.__vftable)
  {
    v33.__imp_.__imp_ = (const char *)v33.__vftable;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v33.__vftable, (int64_t)(v34 - (unint64_t)v33.__vftable) >> 4);
  }
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1BADBE5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, caulk::rt_safe_memory_resource *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34)
{
  if (a16) {
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](a16, (a18 - (uint64_t)a16) >> 4);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  _Unwind_Resume(exception_object);
}

caulk::rt_safe_memory_resource *AMCP::DAL::PCM_Data_Handler::get_audio_buffer_list@<X0>(uint64_t *a1@<X1>, caulk::rt_safe_memory_resource **a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  BOOL v8 = (AMCP::DAL::PCM_Data_Handler *)*a1;
  AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>(*a1);
  AMCP::DAL::PCM_Data_Handler::get_other_data<float>((unint64_t *)v15, v8, a3, a4);
  uint64_t v9 = *a1;
  if (*a1)
  {
    long long v10 = *(_OWORD *)(v9 + 24);
    long long v12 = *(_OWORD *)(v9 + 8);
    long long v13 = v10;
    uint64_t v14 = *(void *)(v9 + 40);
  }
  else
  {
    uint64_t v14 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
  }
  AMCP::DAL::create_abl(a2, (uint64_t *)v15, (uint64_t)&v12);
  BOOL result = (caulk::rt_safe_memory_resource *)v15[0];
  if (v15[0])
  {
    v15[1] = v15[0];
    return std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v15[0], ((char *)v15[2] - (char *)v15[0]) >> 4);
  }
  return result;
}

void sub_1BADBE84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, caulk::rt_safe_memory_resource *a14, uint64_t a15, uint64_t a16)
{
  if (a14) {
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](a14, (a16 - (uint64_t)a14) >> 4);
  }
  _Unwind_Resume(exception_object);
}

void *AMCP::DAL::create_abl(caulk::rt_safe_memory_resource **a1, uint64_t *a2, uint64_t a3)
{
  v16[4] = *MEMORY[0x1E4F143B8];
  int v6 = AMCP::Utility::AudioBufferList_Create((AMCP::Utility *)((unint64_t)(a2[1] - *a2) >> 4));
  v16[0] = &unk_1F1489E50;
  void v16[3] = v16;
  *a1 = v6;
  std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), (uint64_t)v16);
  BOOL result = std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](v16);
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  uint64_t v10 = v9 - *a2;
  if (v9 != *a2)
  {
    uint64_t v11 = 0;
    unint64_t v12 = v10 >> 4;
    int v13 = *(_DWORD *)(a3 + 24);
    LODWORD(v14) = *(_DWORD *)(a3 + 28);
    if (v12 <= 1) {
      unint64_t v12 = 1;
    }
    if ((*(unsigned char *)(a3 + 12) & 0x20) != 0) {
      unint64_t v14 = 1;
    }
    else {
      unint64_t v14 = v14;
    }
    do
    {
      double v15 = (char *)*a1 + v11;
      *((_DWORD *)v15 + 2) = v14;
      *((_DWORD *)v15 + 3) = v13 * (*(void *)(v8 + v11 + 8) / v14);
      *((void *)v15 + 2) = *(void *)(v8 + v11);
      v11 += 16;
      --v12;
    }
    while (v12);
  }
  return result;
}

caulk::rt_safe_memory_resource *AMCP::DAL::PCM_Data_Handler::get_audio_buffer_list@<X0>(uint64_t *a1@<X1>, caulk::rt_safe_memory_resource **a2@<X8>)
{
  uint64_t v4 = AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>(*a1);
  AMCP::DAL::sample_group_from_samples<float>((unint64_t *)v11, (uint64_t **)(v4 + 56));
  uint64_t v5 = *a1;
  if (*a1)
  {
    long long v6 = *(_OWORD *)(v5 + 24);
    long long v8 = *(_OWORD *)(v5 + 8);
    long long v9 = v6;
    uint64_t v10 = *(void *)(v5 + 40);
  }
  else
  {
    uint64_t v10 = 0;
    long long v8 = 0u;
    long long v9 = 0u;
  }
  AMCP::DAL::create_abl(a2, (uint64_t *)v11, (uint64_t)&v8);
  BOOL result = (caulk::rt_safe_memory_resource *)v11[0];
  if (v11[0])
  {
    v11[1] = v11[0];
    return std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v11[0], ((char *)v11[2] - (char *)v11[0]) >> 4);
  }
  return result;
}

void sub_1BADBEA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, caulk::rt_safe_memory_resource *a14, uint64_t a15, uint64_t a16)
{
  if (a14) {
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](a14, (a16 - (uint64_t)a14) >> 4);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *AMCP::DAL::sample_group_from_samples<float>(unint64_t *result, uint64_t **a2)
{
  uint64_t v2 = result;
  *BOOL result = 0;
  result[1] = 0;
  result[2] = 0;
  double v3 = result + 2;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (v5 != *a2)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (v5 - *a2);
    if (v6 >> 60) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v32 = v3;
    unint64_t v8 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>(v6);
    unint64_t v11 = *v2;
    unint64_t v10 = v2[1];
    if (v10 == *v2)
    {
      int64x2_t v13 = vdupq_n_s64(v10);
      unint64_t v12 = v8;
    }
    else
    {
      unint64_t v12 = v8;
      do
      {
        *(_OWORD *)(v12 - 16) = *(_OWORD *)(v10 - 16);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      int64x2_t v13 = *(int64x2_t *)v2;
    }
    unint64_t *v2 = v12;
    v2[1] = v8;
    int64x2_t v30 = v13;
    unint64_t v14 = v2[2];
    uint64_t v2[2] = v8 + 16 * v9;
    unint64_t v31 = v14;
    uint64_t v29 = v13.i64[0];
    BOOL result = (unint64_t *)std::__split_buffer<AMCP::DAL::Audio_Samples<float>,caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>> &>::~__split_buffer((uint64_t)&v29);
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
  }
  if (v4 != v5)
  {
    double v15 = (void *)v2[1];
    do
    {
      uint64_t v16 = *v4;
      unint64_t v17 = (unint64_t)v4[1] >> 2;
      if ((unint64_t)v15 >= *v3)
      {
        uint64_t v18 = (uint64_t)((uint64_t)v15 - *v2) >> 4;
        if ((unint64_t)(v18 + 1) >> 60) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = *v3 - *v2;
        uint64_t v20 = v19 >> 3;
        if (v19 >> 3 <= (unint64_t)(v18 + 1)) {
          uint64_t v20 = v18 + 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        uint64_t v32 = v3;
        if (v21) {
          unint64_t v21 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>(v21);
        }
        else {
          uint64_t v22 = 0;
        }
        unint64_t v23 = (void *)(v21 + 16 * v18);
        void *v23 = v16;
        v23[1] = v17;
        unint64_t v24 = *v2;
        unint64_t v25 = v2[1];
        if (v25 == *v2)
        {
          int64x2_t v27 = vdupq_n_s64(v25);
          unint64_t v26 = v21 + 16 * v18;
        }
        else
        {
          unint64_t v26 = v21 + 16 * v18;
          do
          {
            *(_OWORD *)(v26 - 16) = *(_OWORD *)(v25 - 16);
            v26 -= 16;
            v25 -= 16;
          }
          while (v25 != v24);
          int64x2_t v27 = *(int64x2_t *)v2;
        }
        double v15 = v23 + 2;
        unint64_t *v2 = v26;
        v2[1] = (unint64_t)(v23 + 2);
        int64x2_t v30 = v27;
        unint64_t v28 = v2[2];
        uint64_t v2[2] = v21 + 16 * v22;
        unint64_t v31 = v28;
        uint64_t v29 = v27.i64[0];
        BOOL result = (unint64_t *)std::__split_buffer<AMCP::DAL::Audio_Samples<float>,caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>> &>::~__split_buffer((uint64_t)&v29);
      }
      else
      {
        *double v15 = v16;
        v15[1] = v17;
        v15 += 2;
      }
      v2[1] = (unint64_t)v15;
      v4 += 3;
    }
    while (v4 != v5);
  }
  return result;
}

void sub_1BADBEC30(_Unwind_Exception *exception_object)
{
  double v3 = *(caulk::rt_safe_memory_resource **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](v3, (uint64_t)(*(void *)(v1 + 16) - (void)v3) >> 4);
  }
  _Unwind_Resume(exception_object);
}

unint64_t AMCP::DAL::PCM_Data_Handler::get_allocation_size(AMCP::DAL::PCM_Data_Handler *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 3);
}

uint64_t AMCP::DAL::PCM_Data_Handler::adopt(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[8];
  unint64_t v5 = a1[7];
  while (v4 != v5)
    AMCP::DAL::Audio_Samples_Data::~Audio_Samples_Data((AMCP::DAL::Audio_Samples_Data *)(v4 - 24));
  a1[8] = v5;
  v26[0] = a2;
  v26[1] = 0;
  uint64_t v6 = *a2;
  if (*a2 < 0) {
    std::terminate();
  }
  v25[0] = a2;
  v25[1] = v6;
  unint64_t v7 = a1[9];
  if (v5 >= v7)
  {
    uint64_t v10 = a1[7];
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v10) >> 3);
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v10) >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= v11 + 1) {
      uint64_t v13 = v11 + 1;
    }
    if (v12 >= 0x555555555555555) {
      uint64_t v14 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      uint64_t v14 = v13;
    }
    int64x2_t v30 = a1 + 9;
    if (v14)
    {
      double v15 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>((caulk::rt_safe_memory_resource *)v14);
      uint64_t v17 = v16;
    }
    else
    {
      double v15 = 0;
      uint64_t v17 = 0;
    }
    uint64_t v18 = AMCP::DAL::Audio_Samples_Data::Audio_Samples_Data<gsl::details::span_iterator<gsl::span<std::byte,-1l>,false>>((uint64_t)v15 + 24 * v11, (uint64_t)v26, v25);
    uint64_t v20 = a1[7];
    unint64_t v19 = a1[8];
    if (v19 == v20)
    {
      int64x2_t v23 = vdupq_n_s64(v19);
      uint64_t v21 = v18;
    }
    else
    {
      uint64_t v21 = v18;
      do
      {
        long long v22 = *(_OWORD *)(v19 - 24);
        *(void *)(v21 - 8) = *(void *)(v19 - 8);
        *(_OWORD *)(v21 - 24) = v22;
        v21 -= 24;
        v19 -= 24;
      }
      while (v19 != v20);
      int64x2_t v23 = *(int64x2_t *)(a1 + 7);
    }
    uint64_t v9 = v18 + 24;
    a1[7] = v21;
    a1[8] = v18 + 24;
    int64x2_t v28 = v23;
    uint64_t v24 = a1[9];
    a1[9] = (char *)v15 + 24 * v17;
    uint64_t v29 = v24;
    uint64_t v27 = v23.i64[0];
    uint64_t result = std::__split_buffer<AMCP::DAL::Audio_Samples_Data,caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data> &>::~__split_buffer((uint64_t)&v27);
  }
  else
  {
    uint64_t result = AMCP::DAL::Audio_Samples_Data::Audio_Samples_Data<gsl::details::span_iterator<gsl::span<std::byte,-1l>,false>>(v5, (uint64_t)v26, v25);
    uint64_t v9 = v5 + 24;
  }
  a1[8] = v9;
  return result;
}

BOOL AMCP::DAL::PCM_Data_Handler::dal_operation_is_supported(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2 != 3) {
    return 1;
  }
  uint64_t v4 = v3 >= 0 ? (unsigned __int16 *)a2 : *(unsigned __int16 **)a2;
  int v5 = *v4;
  int v6 = *((unsigned __int8 *)v4 + 2);
  if (v5 != 26989 || v6 != 120) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 16) == 1819304813) {
    return (*(unsigned char *)(a1 + 20) & 0x40) == 0;
  }
  return 0;
}

void AMCP::DAL::PCM_Data_Handler::~PCM_Data_Handler(AMCP::DAL::PCM_Data_Handler *this)
{
  *(void *)this = &unk_1F1472738;
  uint64_t v1 = (char *)this + 56;
  std::vector<AMCP::DAL::Audio_Samples_Data,caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v1);

  JUMPOUT(0x1C1859840);
}

{
  char *v1;

  *(void *)this = &unk_1F1472738;
  uint64_t v1 = (char *)this + 56;
  std::vector<AMCP::DAL::Audio_Samples_Data,caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v1);
}

uint64_t AMCP::DAL::PCM_Data_Handler::get_other_data_bytes(AMCP::Log::Scope_Registry *a1, double a2, double a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (round(a2) >= round(a3))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v9 = **(NSObject ***)buf;
    if ((void)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v27);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v11;
      LOWORD(v27) = 2080;
      *(void *)((char *)&v27 + 2) = "PCM_Data_Handler.cpp";
      WORD5(v27) = 1024;
      HIDWORD(v27) = 178;
      __int16 v28 = 2080;
      *(void *)uint64_t v29 = "not (range.end() > range.start())";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v17);
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v20 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&v29[6] = "static gsl::span<std::byte> AMCP::DAL::PCM_Data_Handler::get_other_data_bytes(const Container &"
                         ", Sample_Time_Range)";
    int64x2_t v30 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_Data_Handler.cpp";
    int v31 = 178;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    uint64_t v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>((uint64_t)a1);
  AMCP::DAL::PCM_Data_Handler::get_other_data<float>((unint64_t *)buf, a1, a2, a3);
  uint64_t v6 = *((_DWORD *)a1 + 8) * vcvtmd_s64_f64(a3 - a2);
  if (v6) {
    BOOL v7 = **(void **)buf == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7) {
    std::terminate();
  }
  *(void *)&long long v27 = *(void *)buf;
  std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](*(caulk::rt_safe_memory_resource **)buf, (uint64_t)(*((void *)&v27 + 1) - *(void *)buf) >> 4);
  return v6;
}

void sub_1BADBF244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 128);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 129));
  _Unwind_Resume(a1);
}

void non-virtual thunk to'AMCP::ASP::Driver::~Driver(AMCP::ASP::Driver *this)
{
  AMCP::ASP::Driver::~Driver((AMCP::ASP::Driver *)((char *)this - 24));

  JUMPOUT(0x1C1859840);
}

{
  AMCP::ASP::Driver::~Driver((AMCP::ASP::Driver *)((char *)this - 24));
}

void AMCP::ASP::Driver::~Driver(AMCP::ASP::Driver *this)
{
  *(void *)this = &unk_1F14728A8;
  *((void *)this + 3) = &unk_1F14728D0;
  uint64_t v2 = (const void *)*((void *)this + 34);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v3) {
    MEMORY[0x1C1859840](v3, 0xA0C40CE99C112);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 200));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 152));
  std::mutex::~mutex((std::mutex *)((char *)this + 88));
  boost::container::vector<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>,void>::~vector((void *)this + 8);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *((void *)this + 3) = &unk_1F146D188;
  int v5 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

{
  uint64_t vars8;

  AMCP::ASP::Driver::~Driver(this);

  JUMPOUT(0x1C1859840);
}

void *boost::container::vector<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>,void>::~vector(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count **)(*a1 + 16);
    do
    {
      if (*v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*v3);
      }
      v3 += 3;
      --v2;
    }
    while (v2);
  }
  if (a1[2]) {
    operator delete((void *)*a1);
  }
  return a1;
}

void AMCP::ASP::Driver::shutdown(__CFBundle ***this)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v23, "com.apple.coreaudio", "AMCP");
  int v3 = *(_DWORD *)(v23 + 16);
  if (v3 == 3)
  {
    AMCP::Log::Scope_Registry::get(v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v14 = **(NSObject ***)buf;
    if (*(void *)v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v26);
    }
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO)) {
      goto LABEL_39;
    }
    long long v15 = pthread_self();
    mach_port_t v16 = pthread_mach_thread_np(v15);
    mcp_applesauce::CF::PlugInRef_proxy::get_bundle(&v19, *this[6]);
    mcp_applesauce::CF::BundleRef_proxy::get_bundle_id((applesauce::CF::StringRef *)&cf, (__CFBundle *)v19);
    if (cf)
    {
      applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
      if (v22 >= 0) {
        std::string v17 = __p;
      }
      else {
        std::string v17 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v16;
      *(_WORD *)unint64_t v26 = 2080;
      *(void *)&void v26[2] = "ASP_Driver.cpp";
      __int16 v27 = 1024;
      int v28 = 128;
      __int16 v29 = 2080;
      int64x2_t v30 = v17;
      _os_log_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_INFO, "%6u %32s:%-5d Tearing down plug-in %s", buf, 0x22u);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      if (cf) {
        CFRelease(cf);
      }
      CFTypeRef v8 = v19;
      if (v19) {
        goto LABEL_38;
      }
      goto LABEL_39;
    }
LABEL_42:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v3 == 2)
  {
    AMCP::Log::Scope_Registry::get(v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v9 = **(NSObject ***)buf;
    if (*(void *)v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v26);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      mcp_applesauce::CF::PlugInRef_proxy::get_bundle(&v19, *this[6]);
      mcp_applesauce::CF::BundleRef_proxy::get_bundle_id((applesauce::CF::StringRef *)&cf, (__CFBundle *)v19);
      long long v12 = (const __CFString **)applesauce::CF::StringRef::operator->(&cf);
      applesauce::CF::convert_to<std::string,0>((uint64_t)__p, *v12);
      if (v22 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)unint64_t v26 = 2080;
      *(void *)&void v26[2] = "ASP_Driver.cpp";
      __int16 v27 = 1024;
      int v28 = 128;
      __int16 v29 = 2080;
      int64x2_t v30 = v13;
      _os_log_debug_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Tearing down plug-in %s", buf, 0x22u);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      applesauce::CF::StringRef::~StringRef(&cf);
      mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::BundleRef_Traits>::~BasicRef(&v19);
    }
    goto LABEL_39;
  }
  if (v3 != 1) {
    goto LABEL_39;
  }
  AMCP::Log::Scope_Registry::get(v2);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  uint64_t v4 = **(NSObject ***)buf;
  if (*(void *)v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v26);
  }
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_39;
  }
  int v5 = pthread_self();
  mach_port_t v6 = pthread_mach_thread_np(v5);
  mcp_applesauce::CF::PlugInRef_proxy::get_bundle(&v19, *this[6]);
  mcp_applesauce::CF::BundleRef_proxy::get_bundle_id((applesauce::CF::StringRef *)&cf, (__CFBundle *)v19);
  if (!cf) {
    goto LABEL_42;
  }
  applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
  if (v22 >= 0) {
    BOOL v7 = __p;
  }
  else {
    BOOL v7 = (void **)__p[0];
  }
  *(_DWORD *)std::string buf = 67109890;
  *(_DWORD *)&uint8_t buf[4] = v6;
  *(_WORD *)unint64_t v26 = 2080;
  *(void *)&void v26[2] = "ASP_Driver.cpp";
  __int16 v27 = 1024;
  int v28 = 128;
  __int16 v29 = 2080;
  int64x2_t v30 = v7;
  _os_log_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d Tearing down plug-in %s", buf, 0x22u);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef v8 = v19;
  if (v19) {
LABEL_38:
  }
    CFRelease(v8);
LABEL_39:
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
}

void sub_1BADBF8A8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v2);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::ASP::Host_Interface::request_device_configuration_change(AMCP::ASP::Host_Interface *this, const AudioServerPlugInHostInterface *a2, uint64_t a3, uint64_t a4, void *a5)
{
  int v7 = (int)a2;
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = 560227702;
  uint64_t v9 = *((void *)this + 5);
  AMCP::ASP::Driver::get_plugin_object_for_driver_id((AMCP::ASP::Driver *)&v24, v9, a2);
  uint64_t v10 = v24;
  if (v24 && AMCP::is_base_of((AMCP *)0x61636C6B, *(_DWORD *)(v24 + 68)))
  {
    unsigned int v11 = *(_DWORD *)(v10 + 60);
    AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v22, *(std::__shared_mutex_base **)(*(void *)(v9 + 32) + 16), v11);
    if (v22)
    {
      std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&lpsrc, *(void *)(v9 + 8), *(std::__shared_weak_count **)(v9 + 16));
      if (lpsrc
      {
        uint64_t v20 = v12;
        uint64_t v21 = v27;
        p_lpsrc = &lpsrc;
      }
      else
      {
        p_lpsrc = &v20;
      }
      *p_lpsrc = 0;
      p_lpsrc[1] = 0;
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      uint64_t v14 = *(void *)(*(void *)(v9 + 32) + 32);
      unsigned int v15 = *(_DWORD *)(v9 + 280);
      std::string v17 = v20;
      mach_port_t v16 = v21;
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v28 = 0;
      std::logic_error v18 = operator new(0x30uLL);
      *std::logic_error v18 = &unk_1F1472BC8;
      v18[1] = v17;
      uint64_t v18[2] = v16;
      *((_DWORD *)v18 + 6) = v7;
      void v18[4] = a3;
      v18[5] = a4;
      int v28 = v18;
      AMCP::Core::Conductor::enqueue_config_change(v14, v15, v11, 1, (uint64_t)&lpsrc);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&lpsrc);
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      uint64_t v8 = 0;
    }
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  return v8;
}

void sub_1BADBFB10(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::ASP::Driver::get_plugin_object_for_driver_id(AMCP::ASP::Driver *this, uint64_t a2, unsigned int a3)
{
  unsigned int v12 = a3;
  uint64_t v10 = a2 + 88;
  char v11 = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a2 + 88));
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>>::find(&v13, (uint64_t *)(a2 + 64), &v12);
  uint64_t v5 = *(void *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 72);
  if (v5) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v6 == 0;
  }
  if (!v7) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v13 == v5 + 24 * v6)
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(v13 + 16);
    *(void *)this = *(void *)(v13 + 8);
    *((void *)this + 1) = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v10);
}

void *std::__function::__func<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0,std::allocator<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0,std::allocator<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP6Driver35request_device_configuration_changeEjyPvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0,std::allocator<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  AMCP::ASP::Driver::get_plugin_object_for_driver_id((AMCP::ASP::Driver *)&v6, *(void *)(a1 + 8), *(_DWORD *)(a1 + 24));
  uint64_t v2 = (AMCP::ASP::PlugIn_Object *)v6;
  if (v6 && AMCP::is_base_of((AMCP *)0x61636C6B, v6[17]))
  {
    kdebug_trace();
    int v3 = (AMCP::ASP::PlugIn *)*((void *)v2 + 3);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)v2 + 4);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      AMCP::ASP::PlugIn::PerformDeviceConfigChange(v3, *(unsigned int *)(a1 + 24), *(void *)(a1 + 32), *(void **)(a1 + 40));
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    else
    {
      AMCP::ASP::PlugIn::PerformDeviceConfigChange(v3, *(unsigned int *)(a1 + 24), *(void *)(a1 + 32), *(void **)(a1 + 40));
    }
    kdebug_trace();
    AMCP::ASP::PlugIn_Object::update_core(v2);
    AMCP::ASP::Driver::update_owned_objects(*(void *)(a1 + 8), (uint64_t)&v6);
  }
  uint64_t v5 = v7;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1BADBFD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::ASP::Driver::update_owned_objects(uint64_t a1, uint64_t a2)
{
  if (AMCP::is_base_of((AMCP *)0x61646576, *(_DWORD *)(*(void *)a2 + 68)))
  {
    AMCP::ASP::Driver::compute_new_dead_objects_kind((uint64_t)v7, a1, a2, (AMCP *)0x61737472, 0x73746D23u);
    AMCP::ASP::Driver::update_owned_object_kind(a1, a2, 0x61737472u, (uint64_t)v7);
    if (__p) {
      operator delete(__p);
    }
    if (v7[0]) {
      operator delete(v7[0]);
    }
    goto LABEL_8;
  }
  if (AMCP::is_base_of((AMCP *)0x61636C6B, *(_DWORD *)(*(void *)a2 + 68))
    || AMCP::is_base_of((AMCP *)0x61626F78, *(_DWORD *)(*(void *)a2 + 68)))
  {
LABEL_8:
    AMCP::ASP::Driver::compute_new_dead_objects_kind((uint64_t)v7, a1, a2, (AMCP *)0x6163746C, 0x6374726Cu);
    uint64_t v4 = a1;
    uint64_t v5 = a2;
    unsigned int v6 = 1633907820;
    goto LABEL_9;
  }
  if (!AMCP::is_base_of((AMCP *)0x61706C67, *(_DWORD *)(*(void *)a2 + 68))) {
    return;
  }
  AMCP::ASP::Driver::compute_new_dead_objects_kind((uint64_t)v7, a1, a2, (AMCP *)0x61626F78, 0x626F7823u);
  AMCP::ASP::Driver::update_owned_object_kind(a1, a2, 0x61626F78u, (uint64_t)v7);
  if (__p) {
    operator delete(__p);
  }
  if (v7[0]) {
    operator delete(v7[0]);
  }
  AMCP::ASP::Driver::compute_new_dead_objects_kind((uint64_t)v7, a1, a2, (AMCP *)0x61636C6B, 0x636C6B23u);
  AMCP::ASP::Driver::update_owned_object_kind(a1, a2, 0x61636C6Bu, (uint64_t)v7);
  if (__p) {
    operator delete(__p);
  }
  if (v7[0]) {
    operator delete(v7[0]);
  }
  AMCP::ASP::Driver::compute_new_dead_objects_kind((uint64_t)v7, a1, a2, (AMCP *)0x61646576, 0x64657623u);
  uint64_t v4 = a1;
  uint64_t v5 = a2;
  unsigned int v6 = 1633969526;
LABEL_9:
  AMCP::ASP::Driver::update_owned_object_kind(v4, v5, v6, (uint64_t)v7);
  if (__p) {
    operator delete(__p);
  }
  if (v7[0]) {
    operator delete(v7[0]);
  }
}

void AMCP::ASP::Driver::compute_new_dead_objects_kind(uint64_t a1, uint64_t a2, uint64_t a3, AMCP *a4, AudioObjectPropertySelector a5)
{
  uint64_t v7 = a3;
  int v10 = *(_DWORD *)(*(void *)a3 + 60);
  std::logic_error v41 = 0;
  unint64_t v42 = 0;
  std::string v40 = 0;
  std::string __p = (void *)(a2 + 88);
  LOBYTE(v33) = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a2 + 88));
  uint64_t v12 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a2 + 72);
  if (!v12 && v11) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v11)
  {
    AudioObjectPropertySelector v29 = a5;
    uint64_t v30 = v7;
    uint64_t v31 = a1;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    unsigned int v15 = 0;
    uint64_t v16 = v12 + 24 * v11;
    do
    {
      if (!v12) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      uint64_t v17 = *(void *)(v12 + 8);
      if (*(_DWORD *)(v17 + 56) == v10 && AMCP::is_base_of(a4, *(_DWORD *)(v17 + 68)))
      {
        if ((unint64_t)v15 >= v14)
        {
          uint64_t v18 = (v15 - v13) >> 2;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v14 - (void)v13) >> 1 > v19) {
            unint64_t v19 = (uint64_t)(v14 - (void)v13) >> 1;
          }
          if (v14 - (unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v19;
          }
          if (v20) {
            unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v20);
          }
          else {
            uint64_t v21 = 0;
          }
          uint64_t v22 = (char *)(v20 + 4 * v18);
          *(_DWORD *)uint64_t v22 = *(_DWORD *)v12;
          uint64_t v23 = v22 + 4;
          while (v15 != v13)
          {
            int v24 = *((_DWORD *)v15 - 1);
            v15 -= 4;
            *((_DWORD *)v22 - 1) = v24;
            v22 -= 4;
          }
          unint64_t v14 = v20 + 4 * v21;
          if (v13) {
            operator delete(v13);
          }
          uint64_t v13 = v22;
          unsigned int v15 = v23;
        }
        else
        {
          *(_DWORD *)unsigned int v15 = *(_DWORD *)v12;
          v15 += 4;
        }
      }
      v12 += 24;
    }
    while (v12 != v16);
    std::logic_error v41 = v15;
    unint64_t v42 = v14;
    std::string v40 = v13;
    uint64_t v7 = v30;
    a1 = v31;
    a5 = v29;
  }
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&__p);
  memset(&__dst, 0, sizeof(__dst));
  if (a5 == 1937009955)
  {
    strcpy((char *)&v38, "#mtstpni");
    BYTE1(v38.mElement) = 0;
    HIWORD(v38.mElement) = 0;
    AMCP::ASP::PlugIn::object_get_property_data<unsigned int [],unsigned int>((uint64_t)&__p, *(AMCP::ASP::PlugIn **)(a2 + 48), *(unsigned int *)(*(void *)v7 + 44), &v38);
    long long v25 = v33;
    uint64_t v26 = *(unsigned int *)(*(void *)v7 + 44);
    __int16 v27 = *(AMCP::ASP::PlugIn **)(a2 + 48);
    v38.AudioObjectPropertyScope mScope = 1869968496;
    AMCP::ASP::PlugIn::object_get_property_data<unsigned int [],unsigned int>((uint64_t)&__p, v27, v26, &v38);
    long long v28 = v33;
    std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(&__dst, 0, (char *)v25, *((char **)&v25 + 1), (uint64_t)(*((void *)&v25 + 1) - v25) >> 2);
    std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(&__dst, __dst.__end_, (char *)v28, *((char **)&v28 + 1), (uint64_t)(*((void *)&v28 + 1) - v28) >> 2);
    if ((void)v28) {
      operator delete((void *)v28);
    }
    if ((void)v25) {
      operator delete((void *)v25);
    }
  }
  else
  {
    v38.signed int mSelector = a5;
    *(void *)&v38.AudioObjectPropertyScope mScope = 1735159650;
    AMCP::ASP::PlugIn::object_get_property_data<unsigned int [],unsigned int>((uint64_t)&__p, *(AMCP::ASP::PlugIn **)(a2 + 48), *(unsigned int *)(*(void *)v7 + 44), &v38);
    *(_OWORD *)&__dst.__begin_ = v33;
    __dst.__end_cap_.__value_ = (unsigned int *)v34;
  }
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  AMCP::Utility::compute_differences_sorted<unsigned int>((uint64_t)&__p, (unsigned int **)&v40, &__dst.__begin_);
  *(_OWORD *)a1 = v36;
  *(void *)(a1 + 16) = v37;
  *((void *)&v36 + 1) = 0;
  uint64_t v37 = 0;
  *(_OWORD *)(a1 + 24) = v34;
  *(void *)(a1 + 40) = v35;
  uint64_t v35 = 0;
  *(void *)&long long v36 = 0;
  long long v34 = 0uLL;
  if (__p)
  {
    *(void *)&long long v33 = __p;
    operator delete(__p);
  }
  if (__dst.__begin_)
  {
    __dst.__end_ = __dst.__begin_;
    operator delete(__dst.__begin_);
  }
  if (v40) {
    operator delete(v40);
  }
}

void AMCP::ASP::Driver::update_owned_object_kind(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = *(unsigned int **)(a4 + 24);
  char v48 = *(unsigned int **)(a4 + 32);
  if (v6 != v48)
  {
    long long v7 = 0uLL;
    do
    {
      unsigned int v8 = *v6;
      long long v58 = v7;
      long long v59 = v7;
      int v60 = 1065353216;
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&v58, v8, v8);
      uint64_t v56 = a1 + 88;
      LOBYTE(v57) = 1;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 88));
      do
      {
        uint64_t v10 = *(void *)(a1 + 64);
        uint64_t v9 = *(void *)(a1 + 72);
        if (v10) {
          BOOL v11 = 1;
        }
        else {
          BOOL v11 = v9 == 0;
        }
        if (!v11) {
          __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
        }
        if (!v9) {
          break;
        }
        char v12 = 0;
        uint64_t v13 = 24 * v9;
        do
        {
          if (!v10) {
            __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
          }
          unsigned int v14 = *(_DWORD *)v10;
          if (!std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(&v58, *(_DWORD *)v10)&& std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(&v58, *(_DWORD *)(*(void *)(v10 + 8) + 40)))
          {
            std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&v58, v14, v14);
            char v12 = 1;
          }
          v10 += 24;
          v13 -= 24;
        }
        while (v13);
      }
      while ((v12 & 1) != 0);
      uint64_t v55 = 0;
      long long v54 = 0uLL;
      unint64_t v15 = 0;
      if ((void)v59)
      {
        uint64_t v16 = (void *)v59;
        do
        {
          ++v15;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>,std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>>((char *)&v54, (uint64_t *)v59, v15);
      std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v56);
      std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)&v58);
      *(void *)&long long v58 = a1 + 88;
      BYTE8(v58) = 1;
      std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 88));
      long long v17 = v54;
      if ((void)v54 != *((void *)&v54 + 1))
      {
        uint64_t v18 = *(void *)(a1 + 72);
        unint64_t v19 = (unsigned int *)v54;
        do
        {
          unint64_t v20 = *(void *)(a1 + 64);
          if (v20) {
            BOOL v21 = 1;
          }
          else {
            BOOL v21 = v18 == 0;
          }
          if (!v21) {
            __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
          }
          if (v18)
          {
            uint64_t v22 = *(unsigned int **)(a1 + 64);
            unint64_t v23 = v18;
            do
            {
              if (v23 != 1 && !v22) {
                __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
              }
              if (!v22) {
                __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
              }
              unint64_t v24 = v23 >> 1;
              long long v25 = &v22[6 * (v23 >> 1)];
              unsigned int v27 = *v25;
              uint64_t v26 = v25 + 6;
              v23 += ~(v23 >> 1);
              if (v27 >= *v19) {
                unint64_t v23 = v24;
              }
              else {
                uint64_t v22 = v26;
              }
            }
            while (v23);
          }
          else
          {
            uint64_t v22 = *(unsigned int **)(a1 + 64);
          }
          long long v28 = (unsigned int *)(v20 + 24 * v18);
          if (v22 != v28)
          {
            if (!v22) {
              __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
            }
            if (*v19 < *v22) {
              uint64_t v22 = (unsigned int *)(v20 + 24 * v18);
            }
            if (v22 != v28)
            {
              if (v20 > (unint64_t)v22 || v22 >= v28) {
                __assert_rtn("erase", "vector.hpp", 2092, "this->priv_in_range(position)");
              }
              if (v22 + 6 != v28)
              {
                uint64_t v30 = v22 + 8;
                do
                {
                  *(v30 - 8) = *(v30 - 2);
                  long long v31 = *(_OWORD *)v30;
                  *(void *)uint64_t v30 = 0;
                  *((void *)v30 + 1) = 0;
                  uint64_t v32 = (std::__shared_weak_count *)*((void *)v30 - 2);
                  *(_OWORD *)(v30 - 6) = v31;
                  if (v32) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
                  }
                  long long v33 = v30 + 4;
                  v30 += 6;
                }
                while (v33 != v28);
              }
              long long v34 = (std::__shared_weak_count *)*((void *)v28 - 1);
              if (v34) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v34);
              }
              uint64_t v18 = *(void *)(a1 + 72) - 1;
              *(void *)(a1 + 72) = v18;
            }
          }
          ++v19;
        }
        while (v19 != *((unsigned int **)&v17 + 1));
      }
      std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v58);
      if ((void)v17) {
        operator delete((void *)v17);
      }
      ++v6;
      long long v7 = 0uLL;
    }
    while (v6 != v48);
  }
  long long v36 = *(_DWORD **)a4;
  uint64_t v35 = *(_DWORD **)(a4 + 8);
  if (*(_DWORD **)a4 != v35)
  {
    do
    {
      long long v52 = 0uLL;
      long long v37 = *(_OWORD *)(a1 + 32);
      long long v49 = v37;
      if (*((void *)&v37 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      int v38 = *(_DWORD *)(*(void *)a2 + 60);
      int v39 = *(_DWORD *)(*(void *)a2 + 44);
      std::string v40 = operator new(0x1A0uLL);
      std::logic_error v41 = v40;
      v40[1] = 0;
      v40[2] = 0;
      *std::string v40 = &unk_1F1472978;
      long long v54 = v49;
      unint64_t v42 = *(std::__shared_weak_count **)(a1 + 56);
      uint64_t v56 = *(void *)(a1 + 48);
      uint64_t v57 = v42;
      if (v42) {
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v43 = (AMCP::ASP::PlugIn_Object *)(v40 + 3);
      AMCP::ASP::PlugIn_Object::PlugIn_Object((uint64_t)(v40 + 3), &v54, (uint64_t)&v56, v38, v39, *v36, a3);
      if (v57) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v57);
      }
      if (*((void *)&v54 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v54 + 1));
      }
      *(void *)&long long v44 = v41 + 3;
      *((void *)&v44 + 1) = v41;
      long long v52 = v44;
      uint64_t v50 = a1 + 88;
      char v51 = 1;
      std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 88));
      LODWORD(v58) = *v36;
      uint64_t v45 = (std::__shared_weak_count *)*((void *)&v52 + 1);
      *((void *)&v58 + 1) = v43;
      *(void *)&long long v59 = *((void *)&v52 + 1);
      if (*((void *)&v52 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v52 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>>::insert_unique((uint64_t)v53, (char *)(a1 + 64), (uint64_t)&v58);
      if ((void)v59) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v59);
      }
      std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v50);
      AMCP::ASP::PlugIn_Object::build_core(v43);
      AMCP::ASP::Driver::update_owned_objects(a1, &v52);
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
      ++v36;
    }
    while (v36 != v35);
  }
}

void sub_1BADC085C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>>::insert_unique(uint64_t a1, char *a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  uint64_t v3 = *((void *)a2 + 1);
  if (*(void *)a2) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v3 == 0;
  }
  if (!v4) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  unsigned int v8 = (_DWORD *)(*(void *)a2 + 24 * v3);
  uint64_t v22 = *(void *)a2;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>*,true>,unsigned int>(&v23, &v22, v8, *(_DWORD *)a3);
  uint64_t v9 = v23;
  if (v23 == v8)
  {
    *(unsigned char *)(a1 + 8) = 1;
LABEL_13:
    uint64_t v11 = *(void *)a2;
    if (*(void *)a2 > (unint64_t)v9) {
      goto LABEL_29;
    }
    unint64_t v12 = *((void *)a2 + 1);
    if (!v11 && v12) {
      __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
    }
    uint64_t v13 = (_DWORD *)(v11 + 24 * v12);
    if (v9 > v13) {
LABEL_29:
    }
      __assert_rtn("emplace", "vector.hpp", 1862, "this->priv_in_range_or_end(position)");
    unint64_t v14 = *((void *)a2 + 2);
    if (v14 < v12) {
      __assert_rtn("priv_insert_forward_range", "vector.hpp", 2821, "this->m_holder.capacity() >= this->m_holder.m_size");
    }
    if (v14 == v12)
    {
      boost::container::vector<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>,boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>*,boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>>(&v23, a2, (char *)v9, a3);
      uint64_t v9 = v23;
    }
    else if (v13 == v9)
    {
      *uint64_t v9 = *(_DWORD *)a3;
      *(_OWORD *)(v11 + 24 * v12 + 8) = *(_OWORD *)(a3 + 8);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      ++*((void *)a2 + 1);
    }
    else
    {
      unint64_t v15 = v13 - 6;
      _DWORD *v13 = *(v13 - 6);
      *(_OWORD *)(v11 + 24 * v12 + 8) = *((_OWORD *)v13 - 1);
      *((void *)v13 - 2) = 0;
      *((void *)v13 - 1) = 0;
      ++*((void *)a2 + 1);
      if (v13 - 6 != v9)
      {
        uint64_t v16 = v13 - 6;
        do
        {
          int v17 = *(v16 - 6);
          v16 -= 6;
          *unint64_t v15 = v17;
          long long v18 = *((_OWORD *)v15 - 1);
          *((void *)v15 - 2) = 0;
          *((void *)v15 - 1) = 0;
          unint64_t v19 = (std::__shared_weak_count *)*((void *)v15 + 2);
          *(_OWORD *)(v15 + 2) = v18;
          if (v19) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v19);
          }
          unint64_t v15 = v16;
        }
        while (v16 != v9);
      }
      *uint64_t v9 = *(_DWORD *)a3;
      long long v20 = *(_OWORD *)(a3 + 8);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      BOOL v21 = (std::__shared_weak_count *)*((void *)v9 + 2);
      *(_OWORD *)(v9 + 2) = v20;
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
    }
    goto LABEL_28;
  }
  if (!v23) {
    __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
  }
  BOOL v10 = *(_DWORD *)a3 >= *v23;
  *(unsigned char *)(a1 + 8) = *(_DWORD *)a3 < *v23;
  if (!v10) {
    goto LABEL_13;
  }
  if (!*(void *)a2) {
    __assert_rtn("operator+", "vector.hpp", 188, "x.m_ptr || !off");
  }
LABEL_28:
  *(void *)a1 = v9;
}

void boost::container::vector<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>,void>::priv_insert_forward_range_no_capacity<boost::container::dtl::insert_emplace_proxy<boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>,boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>*,boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>>(void *a1, char *a2, char *a3, uint64_t a4)
{
  unint64_t v4 = *((void *)a2 + 2);
  if (v4 != *((void *)a2 + 1)) {
    __assert_rtn("next_capacity", "vector.hpp", 473, "additional_objects > size_type(this->m_capacity - this->m_size)");
  }
  if (v4 == 0x555555555555555) {
    goto LABEL_30;
  }
  if (v4 >> 61 > 4) {
    uint64_t v5 = -1;
  }
  else {
    uint64_t v5 = 8 * v4;
  }
  if (v4 >> 61) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = 8 * v4 / 5;
  }
  if (v6 >= 0x555555555555555) {
    unint64_t v6 = 0x555555555555555;
  }
  unint64_t v7 = v4 + 1 > v6 ? v4 + 1 : v6;
  if (v7 > 0x555555555555555) {
LABEL_30:
  }
    boost::container::throw_length_error((boost::container *)"get_next_capacity, allocator's max size reached", a2);
  unint64_t v12 = *(char **)a2;
  uint64_t v13 = (char *)operator new(24 * v7);
  unint64_t v14 = v13;
  unint64_t v15 = *(char **)a2;
  uint64_t v16 = *(void *)a2 + 24 * *((void *)a2 + 1);
  int v17 = v13;
  if (*(char **)a2 != a3)
  {
    long long v18 = *(char **)a2;
    int v17 = v13;
    do
    {
      *(_DWORD *)int v17 = *(_DWORD *)v18;
      *(_OWORD *)(v17 + 8) = *(_OWORD *)(v18 + 8);
      *((void *)v18 + 1) = 0;
      *((void *)v18 + 2) = 0;
      v17 += 24;
      v18 += 24;
    }
    while (v18 != a3);
  }
  *(_DWORD *)int v17 = *(_DWORD *)a4;
  *(_OWORD *)(v17 + 8) = *(_OWORD *)(a4 + 8);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if ((char *)v16 != a3)
  {
    unint64_t v19 = v17 + 32;
    long long v20 = a3;
    do
    {
      *((_DWORD *)v19 - 2) = *(_DWORD *)v20;
      *unint64_t v19 = *(_OWORD *)(v20 + 8);
      unint64_t v19 = (_OWORD *)((char *)v19 + 24);
      *((void *)v20 + 1) = 0;
      *((void *)v20 + 2) = 0;
      v20 += 24;
    }
    while (v20 != (char *)v16);
  }
  if (v15)
  {
    uint64_t v21 = *((void *)a2 + 1);
    if (v21)
    {
      uint64_t v22 = (std::__shared_weak_count **)(v15 + 16);
      do
      {
        if (*v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*v22);
        }
        v22 += 3;
        --v21;
      }
      while (v21);
    }
    operator delete(*(void **)a2);
  }
  uint64_t v23 = *((void *)a2 + 1) + 1;
  *(void *)a2 = v14;
  *((void *)a2 + 1) = v23;
  *((void *)a2 + 2) = v7;
  *a1 = &v14[a3 - v12];
}

void *boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>*,true>,unsigned int>(void *result, void *a2, _DWORD *a3, unsigned int a4)
{
  if ((_DWORD *)*a2 != a3)
  {
    unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a3 - *a2) >> 3);
    a3 = (_DWORD *)*a2;
    do
    {
      if (v4 != 1 && !a3) {
        __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
      }
      if (!a3) {
        __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
      }
      unint64_t v5 = v4 >> 1;
      unint64_t v6 = &a3[6 * (v4 >> 1)];
      if (*v6 < a4)
      {
        a3 = v6 + 6;
        *a2 = v6 + 6;
        unint64_t v5 = v4 + ~v5;
      }
      unint64_t v4 = v5;
    }
    while (v5);
  }
  *uint64_t result = a3;
  return result;
}

uint64_t std::__shared_ptr_emplace<AMCP::ASP::PlugIn_Object>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::ASP::PlugIn_Object>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1472978;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::ASP::PlugIn_Object>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1472978;
  std::__shared_weak_count::~__shared_weak_count(this);
}

char *std::vector<unsigned int>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>,std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>>(char *result, uint64_t *a2, unint64_t a3)
{
  if (a3)
  {
    unint64_t v4 = result;
    uint64_t result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a3);
    for (uint64_t i = (_DWORD *)*((void *)v4 + 1); a2; a2 = (uint64_t *)*a2)
      *i++ = *((_DWORD *)a2 + 4);
    *((void *)v4 + 1) = i;
  }
  return result;
}

void sub_1BADC0EE8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::ASP::PlugIn::object_get_property_data<unsigned int [],unsigned int>(uint64_t a1, AMCP::ASP::PlugIn *this, uint64_t a3, const AudioObjectPropertyAddress *a4)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(this, a3, 0, a4, 0, 0);
  if (!(PropertyDataSize >> 34) || PropertyDataSize)
  {
    *(_DWORD *)a1 = PropertyDataSize;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    std::vector<unsigned int>::vector(&v9, PropertyDataSize >> 34);
    *(_DWORD *)a1 = AMCP::ASP::PlugIn::ObjectGetPropertyData(this, a3, 0, a4, 0, 0, (LODWORD(v9.__end_) - LODWORD(v9.__begin_)) & 0xFFFFFFFC, v9.__begin_);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 8) = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(a1 + 8), v9.__begin_, (uint64_t)v9.__end_, v9.__end_ - v9.__begin_);
    if (v9.__begin_)
    {
      v9.__end_ = v9.__begin_;
      operator delete(v9.__begin_);
    }
  }
}

void std::__function::__func<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0,std::allocator<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0,std::allocator<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 std::__function::__func<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0,std::allocator<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1472BC8;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0,std::allocator<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1472BC8;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0,std::allocator<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1472BC8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0,std::allocator<AMCP::ASP::Driver::request_device_configuration_change(unsigned int,unsigned long long,void *)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1472BC8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>>::find(uint64_t *a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v14 = v3;
  if (v3) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  __n128 result = boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>>::priv_lower_bound<boost::container::vec_iterator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>*,true>,unsigned int>(a1, &v14, (_DWORD *)(v3 + 24 * v4), *a3);
  uint64_t v10 = a2[1];
  if (*a2) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v10 == 0;
  }
  if (!v11) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  uint64_t v12 = *a2 + 24 * v10;
  uint64_t v13 = (unsigned int *)*a1;
  if (*a1 != v12)
  {
    if (!v13) {
      __assert_rtn("operator*", "vector.hpp", 156, "!!m_ptr");
    }
    if (*a3 < *v13) {
      *a1 = v12;
    }
  }
  return result;
}

uint64_t AMCP::ASP::Host_Interface::delete_from_storage(AMCP::ASP::Host_Interface *this, CFTypeRef cf, const __CFString *a3)
{
  uint64_t v4 = *((void *)this + 5);
  if (cf) {
    CFRetain(cf);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, cf);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 264));
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, *(CFDictionaryRef *)(v4 + 272));
  CFDictionaryRef v6 = MutableCopy;
  if (MutableCopy) {
    CFDictionaryRemoveValue(MutableCopy, key);
  }
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&v10, v6);
  unint64_t v7 = *(const void **)(v4 + 272);
  *(void *)(v4 + 272) = v10;
  uint64_t v10 = v7;
  if (v7) {
    CFRelease(v7);
  }
  if (v6) {
    CFRelease(v6);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 264));
  if (key) {
    CFRelease(key);
  }
  return 0;
}

uint64_t AMCP::ASP::Host_Interface::write_to_storage(AMCP::ASP::Host_Interface *this, CFTypeRef cf, const __CFString *a3, const void *a4)
{
  uint64_t v6 = *((void *)this + 5);
  if (cf) {
    CFRetain(cf);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cfa, cf);
  if (a3) {
    CFRetain(a3);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 264));
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, *(CFDictionaryRef *)(v6 + 272));
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(MutableCopy, cfa, a3);
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&v11, MutableCopy);
  unsigned int v8 = *(const void **)(v6 + 272);
  *(void *)(v6 + 272) = v11;
  BOOL v11 = v8;
  if (v8) {
    CFRelease(v8);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 264));
  if (a3) {
    CFRelease(a3);
  }
  if (cfa) {
    CFRelease(cfa);
  }
  return 0;
}

uint64_t AMCP::ASP::Host_Interface::copy_from_storage(AMCP::ASP::Host_Interface *this, CFTypeRef cf, const __CFString *a3, const void **a4)
{
  uint64_t v6 = *((void *)this + 5);
  if (cf) {
    CFRetain(cf);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cfa, cf);
  unint64_t v7 = (os_unfair_lock_s *)(v6 + 264);
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 264));
  CFDictionaryRef v8 = *(const __CFDictionary **)(v6 + 272);
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::vector<unsigned int> v9 = (void *)applesauce::CF::details::at_key<applesauce::CF::StringRef const&>(v8, cfa);
  uint64_t v10 = v9;
  if (v9)
  {
    CFRetain(v9);
    uint64_t v14 = v10;
    char v15 = 1;
    CFRetain(v10);
  }
  else
  {
    LOBYTE(v14) = 0;
    char v15 = 0;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v14);
  os_unfair_lock_unlock(v7);
  if (cfa) {
    CFRelease(cfa);
  }
  if (a3)
  {
    a3->Class isa = v10;
  }
  else if (v10)
  {
    CFRelease(v10);
  }
  return 0;
}

void sub_1BADC159C(void *a1)
{
}

uint64_t AMCP::ASP::Host_Interface::properties_changed(AMCP::ASP::Host_Interface *this, const AudioServerPlugInHostInterface *a2, unsigned int a3, uint64_t a4, const AudioObjectPropertyAddress *a5)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)this + 5);
  if (a3 && !a4) {
    goto LABEL_134;
  }
  uint64_t v6 = 560947818;
  v94[0] = a3;
  v94[1] = a4;
  AMCP::ASP::Driver::get_plugin_object_for_driver_id((AMCP::ASP::Driver *)&v103, v5, a2);
  unint64_t v7 = v103;
  if (v103)
  {
    unsigned int v8 = v103[15];
    unsigned int v101 = v103[17];
    unsigned int v102 = v8;
    AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v99, *(std::__shared_mutex_base **)(*(void *)(v5 + 32) + 16), v8);
    if (!v99) {
      goto LABEL_102;
    }
    kdebug_trace();
    v98[0] = v5;
    v98[1] = (uint64_t)&v102;
    void v98[2] = (uint64_t)&v101;
    v98[3] = (uint64_t)&v99;
    if (AMCP::is_base_of((AMCP *)0x61706C67, v101))
    {
      std::string __p = 0;
      std::string::size_type v96 = 0;
      unint64_t v97 = 0;
      uint64_t v9 = v94[0];
      if (v94[0])
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        int v93 = 0;
        DWORD1(v92) = 0;
        *((void *)&v92 + 1) = 0;
        while (1)
        {
          uint64_t v12 = (_DWORD *)gsl::details::span_iterator<gsl::span<AudioObjectPropertyAddress,-1l>,false>::operator*(v94, v11);
          int v13 = *v12;
          if (*v12 == 1684370979)
          {
            AMCP::ASP::Driver::compute_new_dead_objects_kind((uint64_t)&v105, v5, (uint64_t)&v103, (AMCP *)0x61646576, 0x64657623u);
            unint64_t v24 = v108;
            long long v25 = v109;
            uint64_t v26 = v105;
            unsigned int v27 = v106;
            if (v108) {
              operator delete(v108);
            }
            if (v26) {
              operator delete(v26);
            }
            int v28 = v26 != v27;
            if (v24 != v25) {
              int v28 = 2;
            }
            DWORD1(v92) = v28;
          }
          else if (v13 == 1668049699)
          {
            AMCP::ASP::Driver::compute_new_dead_objects_kind((uint64_t)&v105, v5, (uint64_t)&v103, (AMCP *)0x61636C6B, 0x636C6B23u);
            unint64_t v19 = v108;
            long long v20 = v109;
            uint64_t v21 = v105;
            uint64_t v22 = v106;
            if (v108) {
              operator delete(v108);
            }
            if (v21) {
              operator delete(v21);
            }
            uint64_t v23 = v19 == v20 ? v21 != v22 : 2;
            *((void *)&v92 + 1) = v23;
          }
          else if (v13 == 1651472419)
          {
            AMCP::ASP::Driver::compute_new_dead_objects_kind((uint64_t)&v105, v5, (uint64_t)&v103, (AMCP *)0x61626F78, 0x626F7823u);
            uint64_t v14 = v108;
            char v15 = v109;
            uint64_t v16 = v105;
            int v17 = v106;
            if (v108) {
              operator delete(v108);
            }
            if (v16) {
              operator delete(v16);
            }
            int v18 = v16 != v17;
            if (v14 != v15) {
              int v18 = 2;
            }
            int v93 = v18;
          }
          else
          {
            AudioObjectPropertySelector v29 = v12;
            if ((unint64_t)v10 >= v97)
            {
              uint64_t v32 = (char *)__p;
              unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (unsigned char *)__p) >> 2);
              unint64_t v34 = v33 + 1;
              if (v33 + 1 > 0x1555555555555555) {
                goto LABEL_135;
              }
              if (0x5555555555555556 * ((uint64_t)(v97 - (void)__p) >> 2) > v34) {
                unint64_t v34 = 0x5555555555555556 * ((uint64_t)(v97 - (void)__p) >> 2);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - (void)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v35 = 0x1555555555555555;
              }
              else {
                unint64_t v35 = v34;
              }
              if (v35) {
                unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v35);
              }
              else {
                uint64_t v36 = 0;
              }
              uint64_t v37 = *(void *)v29;
              int v38 = (_DWORD *)(v35 + 12 * v33);
              v38[2] = v29[2];
              *(void *)int v38 = v37;
              int v39 = v38;
              if (v10 != v32)
              {
                do
                {
                  uint64_t v40 = *(void *)(v10 - 12);
                  v10 -= 12;
                  int v41 = *((_DWORD *)v10 + 2);
                  *(void *)(v39 - 3) = v40;
                  v39 -= 3;
                  double v39[2] = v41;
                }
                while (v10 != v32);
                uint64_t v10 = (char *)__p;
              }
              long long v31 = (char *)(v38 + 3);
              std::string __p = v39;
              std::string::size_type v96 = (char *)(v38 + 3);
              unint64_t v97 = v35 + 12 * v36;
              if (v10) {
                operator delete(v10);
              }
            }
            else
            {
              uint64_t v30 = *(void *)v12;
              *((_DWORD *)v10 + 2) = v12[2];
              *(void *)uint64_t v10 = v30;
              long long v31 = v10 + 12;
            }
            std::string::size_type v96 = v31;
            uint64_t v10 = v31;
          }
          if (v11 >= v94[0]) {
            goto LABEL_134;
          }
          if (++v11 == v9) {
            goto LABEL_81;
          }
        }
      }
      *((void *)&v92 + 1) = 0;
      DWORD1(v92) = 0;
      int v93 = 0;
LABEL_81:
      if (*(void *)((char *)&v92 + 4))
      {
        uint64_t v63 = *(void *)(*(void *)(v5 + 32) + 32);
        unsigned int v64 = *(_DWORD *)(v5 + 280);
        std::vector<unsigned int>::pointer v66 = *(void **)(v5 + 8);
        uint64_t v65 = *(atomic_ullong **)(v5 + 16);
        if (v65) {
          atomic_fetch_add_explicit(v65 + 2, 1uLL, memory_order_relaxed);
        }
        long long v68 = v103;
        uint64_t v67 = v104;
        if (v104) {
          atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v108 = 0;
        long long v69 = (void **)operator new(0x30uLL);
        const std::locale::facet *v69 = &unk_1F1472A48;
        v69[1] = v66;
        v69[2] = v65;
        v69[3] = (void *)(v92 >> 32);
        v69[4] = v68;
        v69[5] = v67;
        unint64_t v108 = v69;
        BOOL v71 = DWORD1(v92) == 2 || DWORD2(v92) == 2;
        AMCP::Core::Conductor::enqueue_config_change(v63, v64, v64, v71, (uint64_t)&v105);
        std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v105);
      }
      if (v93)
      {
        uint64_t v72 = *(void *)(*(void *)(v5 + 32) + 32);
        unsigned int v73 = *(_DWORD *)(v5 + 280);
        uint64_t v75 = *(void **)(v5 + 8);
        mach_port_t v74 = *(atomic_ullong **)(v5 + 16);
        if (v74) {
          atomic_fetch_add_explicit(v74 + 2, 1uLL, memory_order_relaxed);
        }
        long long v77 = v103;
        long long v76 = v104;
        if (v104) {
          atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v108 = 0;
        long long v78 = (void **)operator new(0x28uLL);
        HALB_Info *v78 = &unk_1F1472AC8;
        v78[1] = v75;
        v78[2] = v74;
        v78[3] = v77;
        v78[4] = v76;
        unint64_t v108 = v78;
        AMCP::Core::Conductor::enqueue_config_change(v72, v73, v73, v93 == 2, (uint64_t)&v105);
        std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v105);
      }
      AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_0::operator()<std::vector<AudioObjectPropertyAddress>>(v98, (uint64_t)&__p);
      unint64_t v62 = __p;
      if (!__p) {
        goto LABEL_101;
      }
    }
    else
    {
      if (AMCP::is_base_of((AMCP *)0x6163746C, v101))
      {
        unsigned int v42 = v101;
        if (AMCP::is_base_of((AMCP *)0x736C6472, v101))
        {
          int v43 = 0;
          int v44 = 0;
          int v45 = 1935962742;
        }
        else if (AMCP::is_base_of((AMCP *)0x6C65766C, v42))
        {
          int v44 = 1818453110;
          int v45 = 1818456950;
          int v43 = 1;
        }
        else if (AMCP::is_base_of((AMCP *)0x746F676C, v42))
        {
          int v43 = 0;
          int v44 = 0;
          int v45 = 1650685548;
        }
        else if (AMCP::is_base_of((AMCP *)0x736C6374, v42))
        {
          int v43 = 0;
          int v44 = 0;
          int v45 = 1935893353;
        }
        else
        {
          int v43 = 0;
          int v44 = 0;
          if (AMCP::is_base_of((AMCP *)0x7370616E, v42)) {
            int v45 = 1936745334;
          }
          else {
            int v45 = 0;
          }
        }
        uint64_t v80 = v94[0];
        if (v94[0])
        {
          uint64_t v81 = 0;
          int v82 = 0;
          int v83 = 0;
          do
          {
            int v84 = *(_DWORD *)gsl::details::span_iterator<gsl::span<AudioObjectPropertyAddress,-1l>,false>::operator*(v94, v81);
            if (v84 == v44) {
              int v85 = v43;
            }
            else {
              int v85 = 0;
            }
            int v86 = v85 | v83;
            int v87 = v85 ^ 1 | v82;
            if (v84 == v45) {
              int v83 = 1;
            }
            else {
              int v83 = v86;
            }
            if (v84 != v45) {
              int v82 = v87;
            }
            if (v81 >= v94[0]) {
              goto LABEL_134;
            }
            ++v81;
          }
          while (v80 != v81);
          if (v83) {
            AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*(void *)(v5 + 32) + 32), v102);
          }
          if (v82)
          {
            uint64_t v88 = *(void *)(*(void *)(v5 + 32) + 32);
            unsigned int v89 = *(_DWORD *)(v5 + 280);
            unsigned int v90 = v102;
            long long v91 = v104;
            if (v104) {
              atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string v105 = (char *)&unk_1F1472B48;
            uint64_t v106 = (char *)v7;
            uint64_t v107 = v91;
            unint64_t v108 = (void **)&v105;
            AMCP::Core::Conductor::enqueue_config_change(v88, v89, v90, 0, (uint64_t)&v105);
            std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v105);
          }
        }
        goto LABEL_101;
      }
      std::string v105 = 0;
      uint64_t v106 = 0;
      uint64_t v107 = 0;
      uint64_t v46 = v94[0];
      if (v94[0])
      {
        int v47 = 0;
        uint64_t v48 = 0;
        while (1)
        {
          long long v49 = (unsigned int *)gsl::details::span_iterator<gsl::span<AudioObjectPropertyAddress,-1l>,false>::operator*(v94, v48);
          if ((AMCP::HAL::is_config_change_property((AMCP::HAL *)*v49) & 1) == 0)
          {
            if (v47 >= (char *)v107)
            {
              long long v52 = v105;
              unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((v47 - v105) >> 2);
              unint64_t v54 = v53 + 1;
              if (v53 + 1 > 0x1555555555555555) {
LABEL_135:
              }
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v107 - v105) >> 2) > v54) {
                unint64_t v54 = 0x5555555555555556 * (((char *)v107 - v105) >> 2);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v107 - v105) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v55 = 0x1555555555555555;
              }
              else {
                unint64_t v55 = v54;
              }
              if (v55) {
                unint64_t v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v55);
              }
              else {
                uint64_t v56 = 0;
              }
              uint64_t v57 = *(void *)v49;
              unint64_t v58 = v55 + 12 * v53;
              *(_DWORD *)(v58 + 8) = v49[2];
              *(void *)unint64_t v58 = v57;
              long long v59 = (char *)v58;
              if (v47 != v52)
              {
                do
                {
                  uint64_t v60 = *(void *)(v47 - 12);
                  v47 -= 12;
                  int v61 = *((_DWORD *)v47 + 2);
                  *(void *)(v59 - 12) = v60;
                  v59 -= 12;
                  *((_DWORD *)v59 + 2) = v61;
                }
                while (v47 != v52);
                int v47 = v105;
              }
              char v51 = (char *)(v58 + 12);
              std::string v105 = v59;
              uint64_t v106 = (char *)(v58 + 12);
              uint64_t v107 = (std::__shared_weak_count *)(v55 + 12 * v56);
              if (v47) {
                operator delete(v47);
              }
            }
            else
            {
              uint64_t v50 = *(void *)v49;
              *((_DWORD *)v47 + 2) = v49[2];
              *(void *)int v47 = v50;
              char v51 = v47 + 12;
            }
            uint64_t v106 = v51;
            int v47 = v51;
          }
          if (v48 >= v94[0]) {
            break;
          }
          if (++v48 == v46) {
            goto LABEL_78;
          }
        }
LABEL_134:
        std::terminate();
      }
LABEL_78:
      AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_0::operator()<std::vector<AudioObjectPropertyAddress>>(v98, (uint64_t)&v105);
      unint64_t v62 = v105;
      if (!v105) {
        goto LABEL_101;
      }
    }
    operator delete(v62);
LABEL_101:
    kdebug_trace();
    uint64_t v6 = 0;
LABEL_102:
    if (v100) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v100);
    }
  }
  if (v104) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v104);
  }
  return v6;
}

void sub_1BADC1E34(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t gsl::details::span_iterator<gsl::span<AudioObjectPropertyAddress,-1l>,false>::operator*(void *a1, uint64_t a2)
{
  if (!a1 || a2 < 0 || *a1 <= a2) {
    std::terminate();
  }
  return a1[1] + 12 * a2;
}

uint64_t *AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_0::operator()<std::vector<AudioObjectPropertyAddress>>(uint64_t *result, uint64_t a2)
{
  v17[40] = *MEMORY[0x1E4F143B8];
  if (*(void *)a2 != *(void *)(a2 + 8))
  {
    uint64_t v3 = result;
    uint64_t v4 = *result;
    uint64_t v5 = *(void *)(*result + 32);
    uint64_t v6 = *(void *)(*result + 40);
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v17, *(dispatch_object_t *)(*(void *)(v5 + 32) + 352));
    uint64_t v7 = *(void *)(v4 + 40);
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    memset(v12, 0, sizeof(v12));
    std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(v12, *(const void **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
    int v8 = *(_DWORD *)v3[2];
    int v13 = *(_DWORD *)v3[1];
    int v14 = v8;
    uint64_t v9 = (uint64_t *)v3[3];
    uint64_t v11 = *v9;
    uint64_t v10 = v9[1];
    uint64_t v15 = v11;
    uint64_t v16 = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    operator new();
  }
  return result;
}

void sub_1BADC204C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
  {
    long long v20 = *(std::__shared_weak_count **)(v18 + 8);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::HAL::is_config_change_property(AMCP::HAL *this)
{
  int v1 = (int)this;
  uint64_t result = 1;
  if (v1 > 1870030193)
  {
    if (v1 > 1936092478)
    {
      if (v1 > 1937010787)
      {
        if (v1 <= 1952542819)
        {
          if (v1 == 1937010788) {
            return result;
          }
          int v3 = 1937077093;
          goto LABEL_57;
        }
        if (v1 == 1952542820 || v1 == 1986425722) {
          return result;
        }
        int v3 = 2003136116;
      }
      else
      {
        if ((v1 - 1936092479) <= 0x35 && ((1 << (v1 - 63)) & 0x20400400000001) != 0
          || v1 == 1936482681)
        {
          return result;
        }
        int v3 = 1937009955;
      }
    }
    else if (v1 <= 1885762668)
    {
      if ((v1 - 1885762592) <= 0x1F && ((1 << (v1 - 32)) & 0x80000009) != 0 || v1 == 1870030194) {
        return result;
      }
      int v3 = 1885762657;
    }
    else if (v1 > 1935763059)
    {
      if (v1 == 1935763060 || v1 == 1935894638) {
        return result;
      }
      int v3 = 1936092451;
    }
    else
    {
      if (v1 == 1885762669 || v1 == 1902539642) {
        return result;
      }
      int v3 = 1919055206;
    }
    goto LABEL_57;
  }
  if (v1 <= 1684629093)
  {
    if (v1 <= 1651730809)
    {
      if (v1 <= 1634562931)
      {
        if (v1 == 1633906541) {
          return result;
        }
        int v3 = 1634169456;
        goto LABEL_57;
      }
      if (v1 == 1634562932 || v1 == 1634755428) {
        return result;
      }
      int v3 = 1634955892;
    }
    else if (v1 > 1668049763)
    {
      if (v1 == 1668049764 || v1 == 1668575852) {
        return result;
      }
      int v3 = 1684108387;
    }
    else
    {
      if (v1 == 1651730810 || v1 == 1651735075) {
        return result;
      }
      int v3 = 1667658618;
    }
LABEL_57:
    if (v1 != v3) {
      return 0;
    }
    return result;
  }
  if (v1 > 1819569762)
  {
    if (v1 > 1853059618)
    {
      if (v1 == 1853059619 || v1 == 1853059700) {
        return result;
      }
      int v3 = 1869180523;
    }
    else
    {
      if (v1 == 1819569763 || v1 == 1835628607) {
        return result;
      }
      int v3 = 1852012899;
    }
    goto LABEL_57;
  }
  if (v1 > 1735354733)
  {
    if (v1 == 1735354734 || v1 == 1735356005) {
      return result;
    }
    int v3 = 1735554416;
    goto LABEL_57;
  }
  if (v1 != 1684629094 && v1 != 1718839674)
  {
    int v3 = 1718843939;
    goto LABEL_57;
  }
  return result;
}

void *std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP6Driver25driver_properties_changedEjRKN3gsl4spanI26AudioObjectPropertyAddressLln1EEEE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4>,void ()(void)>::operator()(uint64_t a1)
{
}

void std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4>,void ()(void)>::destroy(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1472B48;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F1472B48;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1472B48;
  int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_4>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1472B48;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNSt3__110unique_ptrIZZN4AMCP3ASP6Driver25driver_properties_changedEjRKN3gsl4spanI26AudioObjectPropertyAddressLln1EEEENK3__0clINS_6vectorIS6_NS_9allocatorIS6_EEEEEEDaRKT_EUlvE_NS_14default_deleteISK_EEED1B8ne180100Ev(void *a1)
{
  uint64_t v2 = (void *)*a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[7];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = (void *)v2[2];
    if (v4)
    {
      v2[3] = v4;
      operator delete(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)v2[1];
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    MEMORY[0x1C1859840](v2, 0x1020C407BC62F60);
  }
  return a1;
}

void _ZZN10applesauce8dispatch2v15asyncIZZN4AMCP3ASP6Driver25driver_properties_changedEjRKN3gsl4spanI26AudioObjectPropertyAddressLln1EEEENK3__0clINSt3__16vectorIS8_NSE_9allocatorIS8_EEEEEEDaRKT_EUlvE_EEvP16dispatch_queue_sOSK_ENUlPvE_8__invokeESR_(uint64_t a1)
{
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)AudioObjectPropertySelector v29 = 0u;
  float v30 = 1.0;
  uint64_t v3 = *(unsigned int **)(a1 + 16);
  uint64_t v4 = *(unsigned int **)(a1 + 24);
  if (v3 == v4) {
    goto LABEL_58;
  }
LABEL_2:
  LODWORD(v5) = *v3;
  if (*v3 == 1870098020) {
    goto LABEL_57;
  }
  if (v5 == 1819569763)
  {
    if (AMCP::is_base_of((AMCP *)0x61737472, *(_DWORD *)(a1 + 44))) {
      uint64_t v5 = 1936487523;
    }
    else {
      uint64_t v5 = 1819569763;
    }
  }
  else
  {
    AMCP::get_property_traits_for_hal_selector((AMCP *)*v3, (uint64_t)&v31);
    int v6 = HIDWORD(v33);
    unint64_t v1 = v31;
    if (v32) {
      operator delete(v32);
    }
    if (v6) {
      uint64_t v5 = v1;
    }
    else {
      uint64_t v5 = v5;
    }
  }
  LODWORD(v27[0]) = v5;
  uint64_t v24 = *(void *)(v3 + 1);
  *(void *)((char *)v27 + 4) = v24;
  uint64_t v7 = *(const AMCP::Address **)(a1 + 48);
  uint64_t v26 = 0;
  memset(v25, 0, sizeof(v25));
  AMCP::Core::Core::get_property_value((AMCP::Core::Core *)&v31, v7, (const AMCP::Thing *)v27, (uint64_t)v25);
  if (v26) {
    v26(0, v25, 0, 0);
  }
  unint64_t v9 = v24 & 0xFF000000 | (unint64_t)(v5 << 32) | HIDWORD(v24) & 0xFFFFFF;
  unint64_t v10 = (unint64_t)__p[1];
  if (!__p[1]) {
    goto LABEL_31;
  }
  uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    unint64_t v1 = v24 & 0xFF000000 | (unint64_t)(v5 << 32) | HIDWORD(v24) & 0xFFFFFF;
    if ((void *)v9 >= __p[1]) {
      unint64_t v1 = v9 % (unint64_t)__p[1];
    }
  }
  else
  {
    unint64_t v1 = v9 & ((unint64_t)__p[1] - 1);
  }
  uint64_t v12 = (uint64_t **)*((void *)__p[0] + v1);
  if (!v12 || (int v13 = *v12) == 0)
  {
LABEL_31:
    uint64_t v15 = operator new(0x48uLL);
    *uint64_t v15 = 0;
    v15[1] = v9;
    _OWORD v15[2] = v27[0];
    *((_DWORD *)v15 + 6) = HIDWORD(v24);
    *((_OWORD *)v15 + 2) = 0u;
    *((_OWORD *)v15 + 3) = 0u;
    v15[8] = 0;
    if (v33) {
      v33(1, &v31, v15 + 4, 0);
    }
    float v16 = (float)((unint64_t)v29[1] + 1);
    if (!v10 || (float)(v30 * (float)v10) < v16)
    {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
      if (v10 < 3) {
        BOOL v17 = 1;
      }
      unint64_t v18 = v17 | (2 * v10);
      unint64_t v19 = vcvtps_u32_f32(v16 / v30);
      if (v18 <= v19) {
        size_t v20 = v19;
      }
      else {
        size_t v20 = v18;
      }
      std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)__p, v20);
      unint64_t v10 = (unint64_t)__p[1];
      if (((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0)
      {
        if ((void *)v9 >= __p[1]) {
          unint64_t v1 = v9 % (unint64_t)__p[1];
        }
        else {
          unint64_t v1 = v9;
        }
      }
      else
      {
        unint64_t v1 = ((unint64_t)__p[1] - 1) & v9;
      }
    }
    uint64_t v21 = __p[0];
    uint64_t v22 = (void *)*((void *)__p[0] + v1);
    if (v22)
    {
      *uint64_t v15 = *v22;
      goto LABEL_53;
    }
    *uint64_t v15 = v29[0];
    v29[0] = v15;
    v21[v1] = v29;
    if (*v15)
    {
      unint64_t v23 = *(void *)(*v15 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      uint64_t v22 = (char *)__p[0] + 8 * v23;
LABEL_53:
      void *v22 = v15;
    }
    ++v29[1];
    goto LABEL_55;
  }
  while (1)
  {
    unint64_t v14 = v13[1];
    if (v14 == v9)
    {
      if (*((_DWORD *)v13 + 4) == v5 && *(uint64_t *)((char *)v13 + 20) == v24)
      {
        AMCP::Thing::operator=((AMCP::Thing *)(v13 + 4), (uint64_t)&v31, v8);
LABEL_55:
        if (v33) {
          v33(0, &v31, 0, 0);
        }
LABEL_57:
        v3 += 3;
        if (v3 == v4) {
LABEL_58:
        }
          AMCP::Core::Conductor::properties_changed_async(*(void *)(*(void *)a1 + 32), *(unsigned int *)(a1 + 40), (uint64_t)__p);
        goto LABEL_2;
      }
    }
    else
    {
      if (v11.u32[0] > 1uLL)
      {
        if ((void *)v14 >= __p[1]) {
          v14 %= (unint64_t)__p[1];
        }
      }
      else
      {
        v14 &= (unint64_t)__p[1] - 1;
      }
      if (v14 != v1) {
        goto LABEL_31;
      }
    }
    int v13 = (uint64_t *)*v13;
    if (!v13) {
      goto LABEL_31;
    }
  }
}

void sub_1BADC2A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Address,AMCP::Thing>,void *>>>::operator()[abi:ne180100](1, v23);
  uint64_t v26 = *(void (**)(void, uint64_t, void, void))(v24 - 104);
  if (v26) {
    v26(0, v24 - 136, 0, 0);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table((uint64_t)&a23);
  _ZNSt3__110unique_ptrIZZN4AMCP3ASP6Driver25driver_properties_changedEjRKN3gsl4spanI26AudioObjectPropertyAddressLln1EEEENK3__0clINS_6vectorIS6_NS_9allocatorIS6_EEEEEEDaRKT_EUlvE_NS_14default_deleteISK_EEED1B8ne180100Ev(&a14);
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP6Driver25driver_properties_changedEjRKN3gsl4spanI26AudioObjectPropertyAddressLln1EEEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::operator()(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = a1[1];
      if (v5)
      {
        uint64_t v7 = (AMCP::ASP::PlugIn_Object *)a1[3];
        uint64_t v6 = (uint64_t)(a1 + 3);
        AMCP::ASP::PlugIn_Object::update_core(v7);
        AMCP::ASP::Driver::compute_new_dead_objects_kind((uint64_t)v8, v5, v6, (AMCP *)0x61626F78, 0x626F7823u);
        AMCP::ASP::Driver::update_owned_object_kind(v5, v6, 0x61626F78u, (uint64_t)v8);
        if (__p) {
          operator delete(__p);
        }
        if (v8[0]) {
          operator delete(v8[0]);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1BADC2BA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::destroy(uint64_t a1)
{
}

void *std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_1F1472AC8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = result[4];
  a2[3] = result[3];
  a2[4] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::__clone(void *a1)
{
  uint64_t result = operator new(0x28uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  *uint64_t result = &unk_1F1472AC8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1[4];
  result[3] = a1[3];
  result[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1472AC8;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1472AC8;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP6Driver25driver_properties_changedEjRKN3gsl4spanI26AudioObjectPropertyAddressLln1EEEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 8);
      if (v5)
      {
        AMCP::ASP::PlugIn_Object::update_core(*(AMCP::ASP::PlugIn_Object **)(a1 + 32));
        if (*(_DWORD *)(a1 + 24))
        {
          AMCP::ASP::Driver::compute_new_dead_objects_kind((uint64_t)v6, v5, a1 + 32, (AMCP *)0x61646576, 0x64657623u);
          AMCP::ASP::Driver::update_owned_object_kind(v5, a1 + 32, 0x61646576u, (uint64_t)v6);
          if (__p) {
            operator delete(__p);
          }
          if (v6[0]) {
            operator delete(v6[0]);
          }
        }
        if (*(_DWORD *)(a1 + 28))
        {
          AMCP::ASP::Driver::compute_new_dead_objects_kind((uint64_t)v6, v5, a1 + 32, (AMCP *)0x61636C6B, 0x636C6B23u);
          AMCP::ASP::Driver::update_owned_object_kind(v5, a1 + 32, 0x61636C6Bu, (uint64_t)v6);
          if (__p) {
            operator delete(__p);
          }
          if (v6[0]) {
            operator delete(v6[0]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1BADC2F54(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2>,void ()(void)>::destroy(uint64_t a1)
{
}

void *std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2>,void ()(void)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_1F1472A48;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  a2[3] = result[3];
  uint64_t v4 = result[5];
  a2[4] = result[4];
  a2[5] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2>,void ()(void)>::__clone(void *a1)
{
  uint64_t result = operator new(0x30uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  *uint64_t result = &unk_1F1472A48;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1[4];
  result[3] = a1[3];
  result[4] = v5;
  uint64_t v6 = a1[5];
  result[5] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1472A48;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_2>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1472A48;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t AMCP::ASP::Driver::start(AMCP::ASP::Driver *this, const applesauce::CF::URLRef *a2)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = operator new(0x30uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  *uint64_t v4 = &unk_1F1472928;
  CFPlugInRef v5 = CFPlugInCreate(0, a2);
  uint64_t v6 = (const __CFUUID **)(v4 + 3);
  uint64_t v7 = (AMCP::Log::Scope_Registry *)mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::PlugInRef_Traits>::BasicRef(v4 + 3, v5);
  v4[5] = 0;
  v4[4] = this;
  if (!v4[3])
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v35 = **(NSObject ***)buf;
    if ((void)v85) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v85);
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      uint64_t v36 = pthread_self();
      mach_port_t v37 = pthread_mach_thread_np(v36);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v37;
      LOWORD(v85) = 2080;
      *(void *)((char *)&v85 + 2) = "ASP_PlugIn.cpp";
      WORD5(v85) = 1024;
      HIDWORD(v85) = 27;
      LOWORD(v86) = 2080;
      *(void *)((char *)&v86 + 2) = "!m_plugin.is_valid()";
      _os_log_error_impl(&dword_1BAA78000, v35, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No plug-in", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&theArray);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v77, "No plug-in");
    std::runtime_error::runtime_error(&v78, &v77);
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    int v83 = -1;
    v78.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v79 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v78);
    *((void *)&v86 + 1) = "AMCP::ASP::PlugIn::PlugIn(const CF::URL &, Driver &)";
    int v87 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_PlugIn.cpp";
    int v88 = 27;
    std::vector<void *>::vector(&v72);
    int v38 = backtrace((void **)v72, (*((void *)&v72 + 1) - (void)v72) >> 3);
    std::vector<void *>::resize((char **)&v72, v38);
    long long v75 = v72;
    uint64_t v76 = v73;
    long long v72 = 0uLL;
    uint64_t v73 = 0;
    mach_port_t v74 = (char *)&unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  CFUUIDRef v8 = CFUUIDGetConstantUUIDWithBytes(0, 0x44u, 0x3Au, 0xBAu, 0xB8u, 0xE7u, 0xB3u, 0x49u, 0x1Au, 0xB9u, 0x85u, 0xBEu, 0xB9u, 0x18u, 0x70u, 0x30u, 0xDBu);
  mcp_applesauce::CF::PlugInRef_proxy::find_factories_for_type((applesauce::CF::ArrayRef *)&theArray, *v6, v8);
  if (!theArray)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v39 = **(NSObject ***)buf;
    if ((void)v85) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v85);
    }
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = pthread_self();
      mach_port_t v41 = pthread_mach_thread_np(v40);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v41;
      LOWORD(v85) = 2080;
      *(void *)((char *)&v85 + 2) = "ASP_PlugIn.cpp";
      WORD5(v85) = 1024;
      HIDWORD(v85) = 29;
      LOWORD(v86) = 2080;
      *(void *)((char *)&v86 + 2) = "!factory_array.is_valid()";
      _os_log_error_impl(&dword_1BAA78000, v39, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No factories array", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v70);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v77, "No factories array");
    std::runtime_error::runtime_error(&v78, &v77);
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    int v83 = -1;
    v78.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v79 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v78);
    *((void *)&v86 + 1) = "AMCP::ASP::PlugIn::PlugIn(const CF::URL &, Driver &)";
    int v87 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_PlugIn.cpp";
    int v88 = 29;
    std::vector<void *>::vector(&v72);
    int v42 = backtrace((void **)v72, (*((void *)&v72 + 1) - (void)v72) >> 3);
    std::vector<void *>::resize((char **)&v72, v42);
    long long v75 = v72;
    uint64_t v76 = v73;
    long long v72 = 0uLL;
    uint64_t v73 = 0;
    mach_port_t v74 = (char *)&unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  if (!CFArrayGetCount(theArray))
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v43 = **(NSObject ***)buf;
    if ((void)v85) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v85);
    }
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      int v44 = pthread_self();
      mach_port_t v45 = pthread_mach_thread_np(v44);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v45;
      LOWORD(v85) = 2080;
      *(void *)((char *)&v85 + 2) = "ASP_PlugIn.cpp";
      WORD5(v85) = 1024;
      HIDWORD(v85) = 30;
      LOWORD(v86) = 2080;
      *(void *)((char *)&v86 + 2) = "factory_array->get_size() == 0";
      _os_log_error_impl(&dword_1BAA78000, v43, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No factories", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v70);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v77, "No factories");
    std::runtime_error::runtime_error(&v78, &v77);
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    int v83 = -1;
    v78.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v79 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v78);
    *((void *)&v86 + 1) = "AMCP::ASP::PlugIn::PlugIn(const CF::URL &, Driver &)";
    int v87 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_PlugIn.cpp";
    int v88 = 30;
    std::vector<void *>::vector(&v72);
    int v46 = backtrace((void **)v72, (*((void *)&v72 + 1) - (void)v72) >> 3);
    std::vector<void *>::resize((char **)&v72, v46);
    long long v75 = v72;
    uint64_t v76 = v73;
    long long v72 = 0uLL;
    uint64_t v73 = 0;
    mach_port_t v74 = (char *)&unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  if (!theArray)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v9 = (AMCP::Log::Scope_Registry *)applesauce::CF::details::at_to<applesauce::CF::TypeRef>(&v70, theArray, 0);
  CFUUIDRef v10 = v70;
  if (!v70)
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v47 = **(NSObject ***)buf;
    if ((void)v85) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v85);
    }
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      uint64_t v48 = pthread_self();
      mach_port_t v49 = pthread_mach_thread_np(v48);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v49;
      LOWORD(v85) = 2080;
      *(void *)((char *)&v85 + 2) = "ASP_PlugIn.cpp";
      WORD5(v85) = 1024;
      HIDWORD(v85) = 33;
      LOWORD(v86) = 2080;
      *(void *)((char *)&v86 + 2) = "!factory_uuid.is_valid()";
      _os_log_error_impl(&dword_1BAA78000, v47, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Couldn't get the factory uuid", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v69);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v77, "Couldn't get the factory uuid");
    std::runtime_error::runtime_error(&v78, &v77);
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    int v83 = -1;
    v78.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v79 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v78);
    *((void *)&v86 + 1) = "AMCP::ASP::PlugIn::PlugIn(const CF::URL &, Driver &)";
    int v87 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_PlugIn.cpp";
    int v88 = 33;
    std::vector<void *>::vector(&v72);
    int v50 = backtrace((void **)v72, (*((void *)&v72 + 1) - (void)v72) >> 3);
    std::vector<void *>::resize((char **)&v72, v50);
    long long v75 = v72;
    uint64_t v76 = v73;
    long long v72 = 0uLL;
    uint64_t v73 = 0;
    mach_port_t v74 = (char *)&unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  CFUUIDRef v11 = CFUUIDGetConstantUUIDWithBytes(0, 0x44u, 0x3Au, 0xBAu, 0xB8u, 0xE7u, 0xB3u, 0x49u, 0x1Au, 0xB9u, 0x85u, 0xBEu, 0xB9u, 0x18u, 0x70u, 0x30u, 0xDBu);
  uint64_t v12 = CFPlugInInstanceCreate(0, v10, v11);
  int v13 = v12;
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    char v51 = **(NSObject ***)buf;
    if ((void)v85) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v85);
    }
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      long long v52 = pthread_self();
      mach_port_t v53 = pthread_mach_thread_np(v52);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v53;
      LOWORD(v85) = 2080;
      *(void *)((char *)&v85 + 2) = "ASP_PlugIn.cpp";
      WORD5(v85) = 1024;
      HIDWORD(v85) = 36;
      LOWORD(v86) = 2080;
      *(void *)((char *)&v86 + 2) = "(iunknown_interface) == nullptr";
      _os_log_error_impl(&dword_1BAA78000, v51, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Couldn't get the factory uuid", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v69);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v77, "Couldn't get the factory uuid");
    std::runtime_error::runtime_error(&v78, &v77);
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    int v83 = -1;
    v78.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v79 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v78);
    *((void *)&v86 + 1) = "AMCP::ASP::PlugIn::PlugIn(const CF::URL &, Driver &)";
    int v87 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_PlugIn.cpp";
    int v88 = 36;
    std::vector<void *>::vector(&v72);
    int v54 = backtrace((void **)v72, (*((void *)&v72 + 1) - (void)v72) >> 3);
    std::vector<void *>::resize((char **)&v72, v54);
    long long v75 = v72;
    uint64_t v76 = v73;
    long long v72 = 0uLL;
    uint64_t v73 = 0;
    mach_port_t v74 = (char *)&unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v14 = *(uint64_t (**)(void *, void, void, void *))(*(void *)v12 + 8);
  CFUUIDRef v15 = CFUUIDGetConstantUUIDWithBytes(0, 0xEEu, 0xA5u, 0x77u, 0x3Du, 0xCCu, 0x43u, 0x49u, 0xF1u, 0x8Eu, 0, 0x8Fu, 0x96u, 0xE7u, 0xD2u, 0x3Bu, 0x17u);
  CFUUIDBytes v16 = CFUUIDGetUUIDBytes(v15);
  BOOL v17 = (AMCP::Log::Scope_Registry *)v14(v13, *(void *)&v16.byte0, *(void *)&v16.byte8, v4 + 5);
  if (!v4[5])
  {
    AMCP::Log::Scope_Registry::get(v17);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v55 = **(NSObject ***)buf;
    if ((void)v85) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v85);
    }
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      uint64_t v56 = pthread_self();
      mach_port_t v57 = pthread_mach_thread_np(v56);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v57;
      LOWORD(v85) = 2080;
      *(void *)((char *)&v85 + 2) = "ASP_PlugIn.cpp";
      WORD5(v85) = 1024;
      HIDWORD(v85) = 40;
      LOWORD(v86) = 2080;
      *(void *)((char *)&v86 + 2) = "(m_interface) == nullptr";
      _os_log_error_impl(&dword_1BAA78000, v55, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Couldn't find the interface", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v69);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v77, "Couldn't find the interface");
    std::runtime_error::runtime_error(&v78, &v77);
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    int v83 = -1;
    v78.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v79 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v78);
    *((void *)&v86 + 1) = "AMCP::ASP::PlugIn::PlugIn(const CF::URL &, Driver &)";
    int v87 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_PlugIn.cpp";
    int v88 = 40;
    std::vector<void *>::vector(&v72);
    int v58 = backtrace((void **)v72, (*((void *)&v72 + 1) - (void)v72) >> 3);
    std::vector<void *>::resize((char **)&v72, v58);
    long long v75 = v72;
    uint64_t v76 = v73;
    long long v72 = 0uLL;
    uint64_t v73 = 0;
    mach_port_t v74 = (char *)&unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  (*(void (**)(void *))(*(void *)v13 + 24))(v13);
  CFRelease(v10);
  if (theArray) {
    CFRelease(theArray);
  }
  *(void *)&long long v18 = v4 + 3;
  *((void *)&v18 + 1) = v4;
  unint64_t v19 = (std::__shared_weak_count *)*((void *)this + 7);
  *((_OWORD *)this + 3) = v18;
  if (v19)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    uint64_t v6 = (const __CFUUID **)*((void *)this + 6);
    if (!v6)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v19);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      long long v59 = **(NSObject ***)buf;
      if ((void)v85) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v85);
      }
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        uint64_t v60 = pthread_self();
        mach_port_t v61 = pthread_mach_thread_np(v60);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v61;
        LOWORD(v85) = 2080;
        *(void *)((char *)&v85 + 2) = "ASP_Driver.cpp";
        WORD5(v85) = 1024;
        HIDWORD(v85) = 104;
        LOWORD(v86) = 2080;
        *(void *)((char *)&v86 + 2) = "(m_plugin_ptr.operator BOOL()) == false";
        _os_log_error_impl(&dword_1BAA78000, v59, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s couldn't create the plug-in", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&theArray);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v77, "couldn't create the plug-in");
      std::runtime_error::runtime_error(&v78, &v77);
      uint64_t v80 = 0;
      uint64_t v81 = 0;
      uint64_t v82 = 0;
      int v83 = -1;
      v78.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      uint64_t v79 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v78);
      *((void *)&v86 + 1) = "void AMCP::ASP::Driver::start(const CF::URL &)";
      int v87 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Driver.cpp";
      int v88 = 104;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v72);
      long long v75 = v72;
      uint64_t v76 = v73;
      long long v72 = 0uLL;
      uint64_t v73 = 0;
      mach_port_t v74 = (char *)&unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
  }
  if (!*v6 || (unint64_t v19 = (std::__shared_weak_count *)v6[2]) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v19);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v62 = **(NSObject ***)buf;
    if ((void)v85) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v85);
    }
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      uint64_t v63 = pthread_self();
      mach_port_t v64 = pthread_mach_thread_np(v63);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v64;
      LOWORD(v85) = 2080;
      *(void *)((char *)&v85 + 2) = "ASP_Driver.cpp";
      WORD5(v85) = 1024;
      HIDWORD(v85) = 105;
      LOWORD(v86) = 2080;
      *(void *)((char *)&v86 + 2) = "(m_plugin_ptr->is_valid()) == false";
      _os_log_error_impl(&dword_1BAA78000, v62, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s couldn't open the plug-in", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&theArray);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v77, "couldn't open the plug-in");
    std::runtime_error::runtime_error(&v78, &v77);
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    int v83 = -1;
    v78.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v79 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v78);
    *((void *)&v86 + 1) = "void AMCP::ASP::Driver::start(const CF::URL &)";
    int v87 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Driver.cpp";
    int v88 = 105;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v72);
    long long v75 = v72;
    uint64_t v76 = v73;
    long long v72 = 0uLL;
    uint64_t v73 = 0;
    mach_port_t v74 = (char *)&unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  size_t v20 = (AMCP::Log::Scope_Registry *)((uint64_t (*)(std::__shared_weak_count *, void))v19->__on_zero_shared_weak)(v19, *((void *)this + 32));
  if (v20)
  {
    AMCP::Log::Scope_Registry::get(v20);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    std::vector<unsigned int>::pointer v66 = **(NSObject ***)buf;
    if ((void)v85) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v85);
    }
    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      uint64_t v67 = pthread_self();
      mach_port_t v68 = pthread_mach_thread_np(v67);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v68;
      LOWORD(v85) = 2080;
      *(void *)((char *)&v85 + 2) = "ASP_Driver.cpp";
      WORD5(v85) = 1024;
      HIDWORD(v85) = 108;
      LOWORD(v86) = 2080;
      *(void *)((char *)&v86 + 2) = "(initialize_error) != 0";
      _os_log_error_impl(&dword_1BAA78000, v66, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s couldn't initialize the plug-in", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&theArray);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v77, "couldn't initialize the plug-in");
    std::runtime_error::runtime_error(&v78, &v77);
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    int v83 = -1;
    v78.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v79 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v78);
    *((void *)&v86 + 1) = "void AMCP::ASP::Driver::start(const CF::URL &)";
    int v87 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Driver.cpp";
    int v88 = 108;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v72);
    long long v75 = v72;
    uint64_t v76 = v73;
    long long v72 = 0uLL;
    uint64_t v73 = 0;
    mach_port_t v74 = (char *)&unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  mach_port_t v74 = (char *)this + 88;
  LOBYTE(v75) = 1;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)((char *)this + 88));
  uint64_t v22 = *((void *)this + 4);
  uint64_t v21 = *((void *)this + 5);
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v23 = operator new(0x1A0uLL);
  uint64_t v24 = v23;
  v23[1] = 0;
  void v23[2] = 0;
  void *v23 = &unk_1F1472978;
  long long v25 = v23 + 3;
  *(void *)std::string buf = v22;
  *(void *)&long long v85 = v21;
  uint64_t v26 = *((void *)this + 7);
  v78.__vftable = (std::runtime_error_vtbl *)*((void *)this + 6);
  v78.__imp_.__imp_ = (const char *)v26;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  AMCP::ASP::PlugIn_Object::PlugIn_Object((uint64_t)(v23 + 3), (long long *)buf, (uint64_t)&v78, 1, 0, 1, 1634757735);
  if (v78.__imp_.__imp_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v78.__imp_.__imp_);
  }
  if ((void)v85) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v85);
  }
  *(_DWORD *)std::string buf = 1;
  *(void *)&long long v85 = v25;
  *((void *)&v85 + 1) = v24;
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>>::insert_unique((uint64_t)&v78, (char *)this + 64, (uint64_t)buf);
  if (*((void *)&v85 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v85 + 1));
  }
  int v28 = v78.~runtime_error_0;
  what = (std::__shared_weak_count *)v78.what;
  if (what) {
    atomic_fetch_add_explicit(&what->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::ASP::PlugIn_Object::build_core((AMCP::ASP::PlugIn_Object *)v28);
  unsigned int v29 = *((_DWORD *)v28 + 15);
  *((_DWORD *)this + 70) = v29;
  uint64_t v30 = *(void *)(*((void *)this + 4) + 32);
  uint64_t v32 = *((void *)this + 1);
  uint64_t v31 = *((void *)this + 2);
  if (v31) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 16), 1uLL, memory_order_relaxed);
  }
  if (what) {
    atomic_fetch_add_explicit(&what->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)&long long v86 = 0;
  unint64_t v33 = operator new(0x28uLL);
  *unint64_t v33 = &unk_1F14729C8;
  v33[1] = v32;
  _OWORD v33[2] = v31;
  v33[3] = v28;
  v33[4] = what;
  *(void *)&long long v86 = v33;
  AMCP::Core::Conductor::enqueue_config_change(v30, v29, v29, 1, (uint64_t)buf);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](buf);
  if (what) {
    std::__shared_weak_count::__release_shared[abi:ne180100](what);
  }
  return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v74);
}

void sub_1BADC4D78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,std::runtime_error a32,std::runtime_error a33,void *a34,uint64_t a35)
{
  std::runtime_error::~runtime_error(v37);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a25)
  {
    a26 = (uint64_t)a25;
    operator delete(a25);
  }
  *(void *)(v38 - 160) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v38 - 152));
  std::runtime_error::~runtime_error((std::runtime_error *)(v38 - 176));
  a34 = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a35);
  std::runtime_error::~runtime_error(&a33);
  std::runtime_error::~runtime_error(&a32);
  __cxa_free_exception(v37);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a19);
  (*(void (**)(uint64_t))(*(void *)v36 + 24))(v36);
  CFRelease(v35);
  JUMPOUT(0x1BADC5280);
}

void sub_1BADC5214()
{
}

void sub_1BADC527C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  JUMPOUT(0x1BADC5294);
}

void sub_1BADC5290(_Unwind_Exception *a1)
{
  if (*v1) {
    CFRelease(*v1);
  }
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void sub_1BADC52B8(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *std::__function::__func<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0,std::allocator<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0,std::allocator<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP6Driver5startERKN10applesauce2CF6URLRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0,std::allocator<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 8);
      if (v5) {
        AMCP::ASP::Driver::update_owned_objects(v5, a1 + 24);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void std::__function::__func<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0,std::allocator<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3,std::allocator<AMCP::ASP::Driver::driver_properties_changed(unsigned int,gsl::span<AudioObjectPropertyAddress,-1l> const&)::$_3>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0,std::allocator<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

void *std::__function::__func<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0,std::allocator<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0>,void ()(void)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_1F14729C8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = result[4];
  a2[3] = result[3];
  a2[4] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0,std::allocator<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0>,void ()(void)>::__clone(void *a1)
{
  uint64_t result = operator new(0x28uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  *uint64_t result = &unk_1F14729C8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1[4];
  result[3] = a1[3];
  result[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0,std::allocator<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14729C8;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0,std::allocator<AMCP::ASP::Driver::start(applesauce::CF::URLRef const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14729C8;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void std::__shared_ptr_emplace<AMCP::ASP::PlugIn>::__on_zero_shared(uint64_t a1)
{
  unint64_t v1 = (CFTypeRef *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  if (*v1) {
    CFRelease(*v1);
  }
}

void sub_1BADC55E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Release");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BADC55C4);
}

void std::__shared_ptr_emplace<AMCP::ASP::PlugIn>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1472928;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::ASP::PlugIn>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1472928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMCP::ASP::Driver::get_core_id_for_driver_id(AMCP::ASP::Driver *this, unsigned int a2)
{
  unsigned int v10 = a2;
  CFUUIDRef v8 = (char *)this + 88;
  char v9 = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 88));
  boost::container::dtl::flat_tree<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::dtl::select1st<unsigned int>,std::less<unsigned int>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>>::find(&v11, (uint64_t *)this + 8, &v10);
  uint64_t v3 = *((void *)this + 8);
  uint64_t v4 = *((void *)this + 9);
  if (v3) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == 0;
  }
  if (!v5) {
    __assert_rtn("operator+=", "vector.hpp", 181, "m_ptr || !off");
  }
  if (v11 == v3 + 24 * v4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *(unsigned int *)(*(void *)(v11 + 8) + 60);
  }
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v8);
  return v6;
}

void *ca::mach::error_category::message@<X0>(mach_error_t error_value@<W1>, void *a2@<X8>)
{
  uint64_t v4 = mach_error_string(error_value);

  return std::string::basic_string[abi:ne180100]<0>(a2, v4);
}

const char *ca::mach::error_category::name(ca::mach::error_category *this)
{
  return "Mach";
}

void ca::mach::error_category::~error_category(std::error_category *this)
{
  std::error_category::~error_category(this);

  JUMPOUT(0x1C1859840);
}

uint64_t ca::mach::semaphore::wait(ca::mach::semaphore *this)
{
  do
    uint64_t v2 = (const char *)MEMORY[0x1C185A860](*(unsigned int *)this);
  while (v2 == 14);

  return ca::mach::throw_if_mach_error((uint64_t)"semaphore_wait failed", v2);
}

void AMCP::ASP::PlugIn_Object::~PlugIn_Object(AMCP::ASP::PlugIn_Object *this)
{
  AMCP::ASP::PlugIn_Object::~PlugIn_Object(this);

  JUMPOUT(0x1C1859840);
}

{
  AMCP::Log::Scope_Registry *is_base_of;
  AMCP::Log::Scope_Registry *v3;
  int v4;
  NSObject *v5;
  _opaque_pthread_t *v6;
  mach_port_t v7;
  int16x8_t *v8;
  int v9;
  int v10;
  NSObject *v11;
  os_log_type_t v12;
  NSObject *v13;
  _opaque_pthread_t *v14;
  mach_port_t v15;
  int16x8_t *p_p;
  int v17;
  int v18;
  NSObject *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  _opaque_pthread_t *v22;
  mach_port_t v23;
  int16x8_t *v24;
  int v25;
  int v26;
  int16x8_t __p;
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint8_t buf[8];
  unsigned char v32[10];
  __int16 v33;
  int v34;
  __int16 v35;
  int16x8_t *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  uint64_t v41;

  mach_port_t v41 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F1472C48;
  is_base_of = (AMCP::Log::Scope_Registry *)AMCP::is_base_of((AMCP *)0x61636C6B, *((_DWORD *)this + 17));
  if (!is_base_of) {
    goto LABEL_27;
  }
  AMCP::Log::Scope_Registry::get(is_base_of);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v29, "com.apple.coreaudio", "AMCP");
  uint64_t v4 = *(_DWORD *)(v29 + 16);
  switch(v4)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v3);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v13 = **(NSObject ***)buf;
      if (*(void *)v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v32);
      }
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_INFO)) {
        goto LABEL_25;
      }
      unint64_t v14 = pthread_self();
      CFUUIDRef v15 = pthread_mach_thread_np(v14);
      AMCP::make_string_for_class_id((AMCP *)*((unsigned int *)this + 16), &__p);
      if (v28 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = (int16x8_t *)__p.i64[0];
      }
      BOOL v17 = *((_DWORD *)this + 15);
      long long v18 = *((_DWORD *)this + 11);
      *(_DWORD *)std::string buf = 67110402;
      *(_DWORD *)&uint8_t buf[4] = v15;
      *(_WORD *)uint64_t v32 = 2080;
      *(void *)&void v32[2] = "ASP_Object.cpp";
      unint64_t v33 = 1024;
      unint64_t v34 = 1421;
      unint64_t v35 = 2080;
      uint64_t v36 = p_p;
      mach_port_t v37 = 1024;
      uint64_t v38 = v17;
      int v39 = 1024;
      uint64_t v40 = v18;
      uint64_t v11 = v13;
      uint64_t v12 = OS_LOG_TYPE_INFO;
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v3);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unint64_t v19 = **(NSObject ***)buf;
      if (*(void *)v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v32);
      }
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_25;
      }
      uint64_t v22 = pthread_self();
      unint64_t v23 = pthread_mach_thread_np(v22);
      AMCP::make_string_for_class_id((AMCP *)*((unsigned int *)this + 16), &__p);
      if (v28 >= 0) {
        uint64_t v24 = &__p;
      }
      else {
        uint64_t v24 = (int16x8_t *)__p.i64[0];
      }
      long long v25 = *((_DWORD *)this + 15);
      uint64_t v26 = *((_DWORD *)this + 11);
      *(_DWORD *)std::string buf = 67110402;
      *(_DWORD *)&uint8_t buf[4] = v23;
      *(_WORD *)uint64_t v32 = 2080;
      *(void *)&void v32[2] = "ASP_Object.cpp";
      unint64_t v33 = 1024;
      unint64_t v34 = 1421;
      unint64_t v35 = 2080;
      uint64_t v36 = v24;
      mach_port_t v37 = 1024;
      uint64_t v38 = v25;
      int v39 = 1024;
      uint64_t v40 = v26;
      _os_log_debug_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Tearing down %s with object id %u driver id: %u", buf, 0x2Eu);
      goto LABEL_20;
    case 1:
      AMCP::Log::Scope_Registry::get(v3);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      BOOL v5 = **(NSObject ***)buf;
      if (*(void *)v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v32);
      }
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_25;
      }
      uint64_t v6 = pthread_self();
      uint64_t v7 = pthread_mach_thread_np(v6);
      AMCP::make_string_for_class_id((AMCP *)*((unsigned int *)this + 16), &__p);
      if (v28 >= 0) {
        CFUUIDRef v8 = &__p;
      }
      else {
        CFUUIDRef v8 = (int16x8_t *)__p.i64[0];
      }
      char v9 = *((_DWORD *)this + 15);
      unsigned int v10 = *((_DWORD *)this + 11);
      *(_DWORD *)std::string buf = 67110402;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)uint64_t v32 = 2080;
      *(void *)&void v32[2] = "ASP_Object.cpp";
      unint64_t v33 = 1024;
      unint64_t v34 = 1421;
      unint64_t v35 = 2080;
      uint64_t v36 = v8;
      mach_port_t v37 = 1024;
      uint64_t v38 = v9;
      int v39 = 1024;
      uint64_t v40 = v10;
      uint64_t v11 = v5;
      uint64_t v12 = OS_LOG_TYPE_DEFAULT;
      break;
    default:
      goto LABEL_25;
  }
  _os_log_impl(&dword_1BAA78000, v11, v12, "%6u %32s:%-5d Tearing down %s with object id %u driver id: %u", buf, 0x2Eu);
LABEL_20:
  if (v28 < 0) {
    operator delete((void *)__p.i64[0]);
  }
LABEL_25:
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
LABEL_27:
  AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*((void *)this + 1) + 16), *((_DWORD *)this + 15));
  *((_DWORD *)this + 15) = 0;
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::ASP::PlugIn_Object *)((char *)this + 72));
  size_t v20 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  *(void *)this = &unk_1F146D188;
  uint64_t v21 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
}

void sub_1BADC5C38(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::HAL::is_stock_hal_class(AMCP::HAL *this)
{
  int v1 = (int)this;
  uint64_t result = 1;
  if (v1 <= 1751740517)
  {
    if (v1 > 1651273578)
    {
      if (v1 > 1685287522)
      {
        if (v1 > 1701734253)
        {
          if (v1 != 1701734254 && v1 != 1702259059)
          {
            int v3 = 1718432370;
            goto LABEL_66;
          }
        }
        else if (v1 != 1685287523 && v1 != 1701078390)
        {
          int v3 = 1701733488;
          goto LABEL_66;
        }
      }
      else if (v1 > 1668050547)
      {
        if (v1 != 1668050548 && v1 != 1684370292)
        {
          int v3 = 1684895092;
          goto LABEL_66;
        }
      }
      else if (v1 != 1651273579 && v1 != 1668047723)
      {
        int v3 = 1668049264;
        goto LABEL_66;
      }
    }
    else if (v1 > 1634757734)
    {
      if (v1 > 1634957682)
      {
        if (v1 != 1634957683 && v1 != 1635017576)
        {
          int v3 = 1650602615;
          goto LABEL_66;
        }
      }
      else if (v1 != 1634757735 && v1 != 1634956402)
      {
        int v3 = 1634956642;
        goto LABEL_66;
      }
    }
    else if (v1 > 1633907819)
    {
      if (v1 != 1633907820 && v1 != 1633969526)
      {
        int v3 = 1634689642;
        goto LABEL_66;
      }
    }
    else if (v1 != 1633773415 && v1 != 1633841016)
    {
      int v3 = 1633905771;
      goto LABEL_66;
    }
    return result;
  }
  if (v1 <= 1936028001)
  {
    if (v1 > 1836414052)
    {
      if (v1 <= 1885893480)
      {
        if (v1 != 1836414053 && v1 != 1852601964)
        {
          int v3 = 1885888878;
          goto LABEL_66;
        }
        return result;
      }
      if (v1 == 1885893481 || v1 == 1886544237) {
        return result;
      }
      int v3 = 1919182198;
    }
    else
    {
      if (v1 <= 1815241313)
      {
        if (v1 != 1751740518 && v1 != 1768907636)
        {
          int v3 = 1784767339;
          goto LABEL_66;
        }
        return result;
      }
      if (v1 == 1815241314 || v1 == 1818588780) {
        return result;
      }
      int v3 = 1819504226;
    }
LABEL_66:
    if (v1 != v3) {
      return 0;
    }
    return result;
  }
  if (v1 <= 1937072748)
  {
    if (v1 <= 1936483441)
    {
      if (v1 != 1936028002 && v1 != 1936028007)
      {
        int v3 = 1936483188;
        goto LABEL_66;
      }
      return result;
    }
    if (v1 == 1936483442 || v1 == 1936682095) {
      return result;
    }
    int v3 = 1936744814;
    goto LABEL_66;
  }
  if (v1 > 1953458027)
  {
    if (v1 > 1986817380)
    {
      if (v1 == 1986817381) {
        return result;
      }
      int v3 = 1999790690;
    }
    else
    {
      if (v1 == 1953458028) {
        return result;
      }
      int v3 = 1953656941;
    }
    goto LABEL_66;
  }
  if (v1 != 1937072749 && v1 != 1937072758)
  {
    int v3 = 1952541794;
    goto LABEL_66;
  }
  return result;
}

uint64_t AMCP::ASP::PlugIn_Object::PlugIn_Object(uint64_t a1, long long *a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  long long v10 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  *(_OWORD *)(a1 + 8) = v10;
  *(void *)a1 = &unk_1F1472C48;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 44) = a6;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = a4;
  uint64_t v11 = (NSObject **)(a1 + 72);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 90) = 0u;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 850045863;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 224) = 850045863;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(void *)(a1 + 312) = 850045863;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 384) = dispatch_semaphore_create(0);
  uint64_t v12 = *(AMCP::ASP::PlugIn **)(a1 + 24);
  strcpy(buf, "salcbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  LODWORD(v67.__vftable) = 0;
  PropertyCFDataRef Data = (AMCP::Log::Scope_Registry *)AMCP::ASP::PlugIn::ObjectGetPropertyData(v12, a6, 0, (const AudioObjectPropertyAddress *)buf, 0, 0, 4, &v67);
  *(_DWORD *)(a1 + 48) = v67.__vftable;
  if (PropertyData)
  {
    AMCP::Log::Scope_Registry::get(PropertyData);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v43 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      int v44 = pthread_self();
      mach_port_t v45 = pthread_mach_thread_np(v44);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v45;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "ASP_Object.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 1249;
      *(_WORD *)long long v75 = 2080;
      *(void *)&v75[2] = "error != 0";
      _os_log_error_impl(&dword_1BAA78000, v43, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s all driver objects are supposed to have a class", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v73);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v66, "all driver objects are supposed to have a class");
    std::runtime_error::runtime_error(&v67, &v66);
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    int v72 = -1;
    v67.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    mach_port_t v68 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v67);
    *(void *)&v75[8] = "AMCP::ASP::PlugIn_Object::PlugIn_Object(Core::System_Core_Ptr, PlugIn_Ptr, Object_ID, AudioObje"
                         "ctID, AudioObjectID, AudioClassID)";
    *(void *)&v75[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Object.cpp";
    *(_DWORD *)&v75[24] = 1249;
    std::vector<void *>::vector(&v61);
    int v46 = backtrace((void **)v61, (*((void *)&v61 + 1) - (void)v61) >> 3);
    std::vector<void *>::resize((char **)&v61, v46);
    std::string __p = &unk_1F148AA90;
    long long v64 = v61;
    uint64_t v65 = v62;
    long long v61 = 0uLL;
    uint64_t v62 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v14 = *(AMCP::ASP::PlugIn **)(a1 + 24);
  strcpy(buf, "slcbbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  LODWORD(v67.__vftable) = 0;
  int v15 = AMCP::ASP::PlugIn::ObjectGetPropertyData(v14, a6, 0, (const AudioObjectPropertyAddress *)buf, 0, 0, 4, &v67);
  LODWORD(v16) = v67.__vftable;
  *(_DWORD *)(a1 + 52) = v67.__vftable;
  uint64_t v17 = *(unsigned int *)(a1 + 48);
  if (v15)
  {
    is_stock_hal_class = (AMCP::Log::Scope_Registry *)AMCP::HAL::is_stock_hal_class((AMCP::HAL *)*(unsigned int *)(a1 + 48));
    if (!is_stock_hal_class)
    {
      AMCP::Log::Scope_Registry::get(is_stock_hal_class);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v39 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        uint64_t v40 = pthread_self();
        mach_port_t v41 = pthread_mach_thread_np(v40);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v41;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "ASP_Object.cpp";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = 1256;
        *(_WORD *)long long v75 = 2080;
        *(void *)&v75[2] = "error != 0";
        _os_log_error_impl(&dword_1BAA78000, v39, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s all driver objects are supposed to have a base class", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v73);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v66, "all driver objects are supposed to have a base class");
      std::runtime_error::runtime_error(&v67, &v66);
      uint64_t v69 = 0;
      uint64_t v70 = 0;
      uint64_t v71 = 0;
      int v72 = -1;
      v67.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      mach_port_t v68 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v67);
      *(void *)&v75[8] = "AMCP::ASP::PlugIn_Object::PlugIn_Object(Core::System_Core_Ptr, PlugIn_Ptr, Object_ID, AudioOb"
                           "jectID, AudioObjectID, AudioClassID)";
      *(void *)&v75[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Object.cpp";
      *(_DWORD *)&v75[24] = 1256;
      std::vector<void *>::vector(&v61);
      int v42 = backtrace((void **)v61, (*((void *)&v61 + 1) - (void)v61) >> 3);
      std::vector<void *>::resize((char **)&v61, v42);
      std::string __p = &unk_1F148AA90;
      long long v64 = v61;
      uint64_t v65 = v62;
      long long v61 = 0uLL;
      uint64_t v62 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    *(_DWORD *)(a1 + 52) = v17;
    LODWORD(v16) = v17;
  }
  if (v17 == 1634689642)
  {
    uint64_t v17 = 1634689642;
    if (v16 != 1634689642) {
      goto LABEL_11;
    }
    *(_DWORD *)(a1 + 48) = a7;
    *(_DWORD *)(a1 + 52) = a7;
    LODWORD(v16) = a7;
    uint64_t v17 = a7;
  }
  if (a7 == 1633905771 && v17 == 1633969526)
  {
    *(_DWORD *)(a1 + 48) = 1633905771;
    uint64_t v17 = 1633905771;
  }
LABEL_11:
  if (AMCP::HAL::is_stock_hal_class((AMCP::HAL *)v17)) {
    unint64_t v16 = v17;
  }
  else {
    unint64_t v16 = v16;
  }
  uint64_t v19 = AMCP::HAL::is_stock_hal_class((AMCP::HAL *)v16);
  if ((v19 & 1) == 0)
  {
    *(void *)(a1 + 64) = 0;
    goto LABEL_52;
  }
  unsigned int v20 = 0;
  if ((int)v16 <= 1815241313)
  {
    if ((int)v16 > 1668047722)
    {
      if ((int)v16 <= 1685287522)
      {
        if ((int)v16 > 1684370291)
        {
          if (v16 == 1684370292) {
            goto LABEL_77;
          }
          int v21 = 1684895092;
        }
        else
        {
          if (v16 == 1668047723) {
            goto LABEL_77;
          }
          int v21 = 1668049264;
        }
      }
      else if ((int)v16 <= 1718432369)
      {
        if (v16 == 1685287523) {
          goto LABEL_77;
        }
        int v21 = 1702259059;
      }
      else
      {
        if (v16 == 1718432370 || v16 == 1751740518) {
          goto LABEL_77;
        }
        int v21 = 1784767339;
      }
    }
    else if ((int)v16 <= 1634689641)
    {
      if ((int)v16 > 1633907819)
      {
        if (v16 == 1633907820) {
          goto LABEL_77;
        }
        int v21 = 1633969526;
      }
      else
      {
        if (v16 == 1633841016) {
          goto LABEL_77;
        }
        int v21 = 1633905771;
      }
    }
    else if ((int)v16 <= 1634956401)
    {
      if (v16 == 1634689642) {
        goto LABEL_77;
      }
      int v21 = 1634757735;
    }
    else
    {
      if (v16 == 1634956402 || v16 == 1650602615) {
        goto LABEL_77;
      }
      int v21 = 1651273579;
    }
    goto LABEL_76;
  }
  if ((int)v16 <= 1936483187)
  {
    if ((int)v16 <= 1852601963)
    {
      if ((int)v16 > 1819504225)
      {
        if (v16 == 1819504226) {
          goto LABEL_77;
        }
        int v21 = 1836414053;
      }
      else
      {
        if (v16 == 1815241314) {
          goto LABEL_77;
        }
        int v21 = 1818588780;
      }
    }
    else if ((int)v16 <= 1885893480)
    {
      if (v16 == 1852601964) {
        goto LABEL_77;
      }
      int v21 = 1885888878;
    }
    else
    {
      if (v16 == 1885893481 || v16 == 1936028002) {
        goto LABEL_77;
      }
      int v21 = 1936028007;
    }
LABEL_76:
    if (v16 != v21) {
      goto LABEL_78;
    }
    goto LABEL_77;
  }
  if ((int)v16 > 1937072757)
  {
    if ((int)v16 <= 1953458027)
    {
      if (v16 == 1937072758) {
        goto LABEL_77;
      }
      int v21 = 1952541794;
    }
    else
    {
      if (v16 == 1953458028 || v16 == 1999790690) {
        goto LABEL_77;
      }
      int v21 = 1986817381;
    }
    goto LABEL_76;
  }
  if ((int)v16 <= 1936682094)
  {
    if (v16 == 1936483188) {
      goto LABEL_77;
    }
    int v21 = 1936483442;
    goto LABEL_76;
  }
  if (v16 != 1936682095 && v16 != 1936744814)
  {
    int v21 = 1937072749;
    goto LABEL_76;
  }
LABEL_77:
  unsigned int v20 = v16;
LABEL_78:
  AMCP::get_class_traits((AMCP *)buf, v17);
  int v33 = buf[8];
  if (v76 < 0) {
    operator delete(*(void **)&v75[24]);
  }
  uint64_t v19 = *(void *)&buf[16];
  if (*(void *)&buf[16])
  {
    *(void *)long long v75 = *(void *)&buf[16];
    operator delete(*(void **)&buf[16]);
  }
  if (v33) {
    int v34 = v20;
  }
  else {
    int v34 = v17;
  }
  *(_DWORD *)(a1 + 64) = v34;
  *(_DWORD *)(a1 + 68) = v20;
  if (!v34)
  {
LABEL_52:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v19);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v22 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      unint64_t v23 = pthread_self();
      mach_port_t v24 = pthread_mach_thread_np(v23);
      unsigned int v25 = *(_DWORD *)(a1 + 52);
      v26.i32[0] = bswap32(*(_DWORD *)(a1 + 48));
      int8x8_t v27 = vzip1_s8(v26, v26);
      v28.i64[0] = 0x1F0000001FLL;
      v28.i64[1] = 0x1F0000001FLL;
      v29.i64[0] = 0x1F0000001FLL;
      v29.i64[1] = 0x1F0000001FLL;
      v30.i64[0] = 0x5F0000005FLL;
      v30.i64[1] = 0x5F0000005FLL;
      *(int8x8_t *)v31.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v30, (uint32x4_t)vsraq_n_s32(v29, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v27), 0x18uLL), 0x18uLL))), v27, (int8x8_t)0x2E002E002E002ELL);
      HIBYTE(v68) = 4;
      *(int8x8_t *)v31.i8 = vmovn_s16(v31);
      LODWORD(v67.__vftable) = v31.i32[0];
      BYTE4(v67.__vftable) = 0;
      v31.i32[0] = bswap32(v25);
      *(int8x8_t *)v31.i8 = vzip1_s8(*(int8x8_t *)v31.i8, *(int8x8_t *)v31.i8);
      HIBYTE(v64) = 4;
      *(int8x8_t *)v31.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v30, (uint32x4_t)vsraq_n_s32(v28, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v31.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v31.i8, (int8x8_t)0x2E002E002E002ELL);
      LODWORD(__p) = vmovn_s16(v31).u32[0];
      BYTE4(__p) = 0;
      *(_DWORD *)std::string buf = 67110402;
      *(_DWORD *)&uint8_t buf[4] = v24;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "ASP_Object.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 1271;
      *(_WORD *)long long v75 = 2080;
      *(void *)&v75[2] = "m_core_class_id == 0";
      *(_WORD *)&v75[10] = 2080;
      *(void *)&v75[12] = &v67;
      *(_WORD *)&v75[20] = 2080;
      *(void *)&v75[22] = &__p;
      _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s There has to be a core class for %s / %s", buf, 0x36u);
      if (SHIBYTE(v64) < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v68) < 0) {
        operator delete(v67.__vftable);
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v73);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v66, "There has to be a core class");
    std::runtime_error::runtime_error(&v67, &v66);
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    int v72 = -1;
    v67.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    mach_port_t v68 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v67);
    *(void *)&v75[8] = "AMCP::ASP::PlugIn_Object::PlugIn_Object(Core::System_Core_Ptr, PlugIn_Ptr, Object_ID, AudioObje"
                         "ctID, AudioObjectID, AudioClassID)";
    *(void *)&v75[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Object.cpp";
    *(_DWORD *)&v75[24] = 1271;
    std::vector<void *>::vector(&v61);
    int v32 = backtrace((void **)v61, (*((void *)&v61 + 1) - (void)v61) >> 3);
    std::vector<void *>::resize((char **)&v61, v32);
    std::string __p = &unk_1F148AA90;
    long long v64 = v61;
    uint64_t v65 = v62;
    long long v61 = 0uLL;
    uint64_t v62 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  if (!v20)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v19);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v47 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      uint64_t v48 = pthread_self();
      mach_port_t v49 = pthread_mach_thread_np(v48);
      unsigned int v50 = *(_DWORD *)(a1 + 52);
      v51.i32[0] = bswap32(*(_DWORD *)(a1 + 48));
      int8x8_t v52 = vzip1_s8(v51, v51);
      v53.i64[0] = 0x1F0000001FLL;
      v53.i64[1] = 0x1F0000001FLL;
      v54.i64[0] = 0x1F0000001FLL;
      v54.i64[1] = 0x1F0000001FLL;
      v55.i64[0] = 0x5F0000005FLL;
      v55.i64[1] = 0x5F0000005FLL;
      *(int8x8_t *)v56.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v55, (uint32x4_t)vsraq_n_s32(v54, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v52), 0x18uLL), 0x18uLL))), v52, (int8x8_t)0x2E002E002E002ELL);
      HIBYTE(v68) = 4;
      *(int8x8_t *)v56.i8 = vmovn_s16(v56);
      LODWORD(v67.__vftable) = v56.i32[0];
      BYTE4(v67.__vftable) = 0;
      v56.i32[0] = bswap32(v50);
      *(int8x8_t *)v56.i8 = vzip1_s8(*(int8x8_t *)v56.i8, *(int8x8_t *)v56.i8);
      HIBYTE(v64) = 4;
      *(int8x8_t *)v56.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v55, (uint32x4_t)vsraq_n_s32(v53, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v56.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v56.i8, (int8x8_t)0x2E002E002E002ELL);
      LODWORD(__p) = vmovn_s16(v56).u32[0];
      BYTE4(__p) = 0;
      *(_DWORD *)std::string buf = 67110402;
      *(_DWORD *)&uint8_t buf[4] = v49;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "ASP_Object.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 1272;
      *(_WORD *)long long v75 = 2080;
      *(void *)&v75[2] = "m_core_stock_class_id == 0";
      *(_WORD *)&v75[10] = 2080;
      *(void *)&v75[12] = &v67;
      *(_WORD *)&v75[20] = 2080;
      *(void *)&v75[22] = &__p;
      _os_log_error_impl(&dword_1BAA78000, v47, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s There has to be a core stock class for %s / %s", buf, 0x36u);
      if (SHIBYTE(v64) < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v68) < 0) {
        operator delete(v67.__vftable);
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v73);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v66, "There has to be a core stock class");
    std::runtime_error::runtime_error(&v67, &v66);
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    int v72 = -1;
    v67.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    mach_port_t v68 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v67);
    *(void *)&v75[8] = "AMCP::ASP::PlugIn_Object::PlugIn_Object(Core::System_Core_Ptr, PlugIn_Ptr, Object_ID, AudioObje"
                         "ctID, AudioObjectID, AudioClassID)";
    *(void *)&v75[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Object.cpp";
    *(_DWORD *)&v75[24] = 1272;
    std::vector<void *>::vector(&v61);
    int v57 = backtrace((void **)v61, (*((void *)&v61 + 1) - (void)v61) >> 3);
    std::vector<void *>::resize((char **)&v61, v57);
    std::string __p = &unk_1F148AA90;
    long long v64 = v61;
    uint64_t v65 = v62;
    long long v61 = 0uLL;
    uint64_t v62 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  if (AMCP::is_base_of((AMCP *)0x61636C6B, v20))
  {
    caulk::make_string((caulk *)"Object Work Queue: %u", (uint64_t)buf, a6);
    if (buf[23] >= 0) {
      unint64_t v35 = buf;
    }
    else {
      unint64_t v35 = *(const char **)buf;
    }
    uint64_t v36 = dispatch_queue_create(v35, 0);
    mach_port_t v37 = AMCP::Utility::Dispatch_Queue::operator=(v11, v36);
    if (v36) {
      dispatch_release(v36);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (!*v11)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v37);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v58 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
      {
        long long v59 = pthread_self();
        mach_port_t v60 = pthread_mach_thread_np(v59);
        *(_DWORD *)std::string buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v60;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "ASP_Object.cpp";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = 1277;
        *(_WORD *)long long v75 = 2080;
        *(void *)&v75[2] = "m_work_queue.operator BOOL() == true";
        *(_WORD *)&v75[10] = 1024;
        *(_DWORD *)&v75[12] = a6;
        _os_log_error_impl(&dword_1BAA78000, v58, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Failed to create work queue for object %u", buf, 0x28u);
      }
      abort();
    }
  }
  return a1;
}

void sub_1BADC73A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, std::runtime_error a19, std::runtime_error a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,std::runtime_error a30,uint64_t a31)
{
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v32);
  int v34 = (std::__shared_weak_count *)v31[4];
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  void *v31 = &unk_1F146D188;
  unint64_t v35 = (std::__shared_weak_count *)v31[2];
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  _Unwind_Resume(a1);
}

void AMCP::ASP::PlugIn_Object::build_core(AMCP::ASP::PlugIn_Object *this)
{
  uint64_t v326 = *MEMORY[0x1E4F143B8];
  *((_DWORD *)this + 15) = AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(*((void *)this + 1) + 16));
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)v312 = 0u;
  int v313 = 1065353216;
  uint64_t v2 = (__CFBundle ***)((char *)this + 24);
  unsigned int v3 = AMCP::ASP::calculate_max_element((AMCP::ASP::PlugIn **)this + 3, *((unsigned int *)this + 11), *((_DWORD *)this + 17));
  is_base_of = (AMCP::Log::Scope_Registry *)AMCP::is_base_of((AMCP *)0x61636C6B, *((_DWORD *)this + 17));
  if (!is_base_of) {
    goto LABEL_27;
  }
  AMCP::Log::Scope_Registry::get(is_base_of);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
  int v6 = *((_DWORD *)cf[0] + 4);
  switch(v6)
  {
    case 1:
      AMCP::Log::Scope_Registry::get(v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v15 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_25;
      }
      unint64_t v16 = pthread_self();
      mach_port_t v17 = pthread_mach_thread_np(v16);
      int v18 = *((_DWORD *)this + 15);
      AMCP::make_string_for_class_id((AMCP *)*((unsigned int *)this + 16), &v323);
      if (v324 >= 0) {
        uint64_t v19 = &v323;
      }
      else {
        uint64_t v19 = (int16x8_t *)v323.i64[0];
      }
      int v20 = *((_DWORD *)this + 11);
      *(_DWORD *)std::string buf = 67110402;
      *(_DWORD *)&uint8_t buf[4] = v17;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "ASP_Object.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 1294;
      *(_WORD *)&unsigned char buf[24] = 1024;
      *(_DWORD *)&buf[26] = v18;
      *(_WORD *)&buf[30] = 2080;
      *(void *)&buf[32] = v19;
      *(_WORD *)&unsigned char buf[40] = 1024;
      *(_DWORD *)&buf[42] = v20;
      int v13 = v15;
      os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v21 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_25;
      }
      v281 = pthread_self();
      mach_port_t v282 = pthread_mach_thread_np(v281);
      int v283 = *((_DWORD *)this + 15);
      AMCP::make_string_for_class_id((AMCP *)*((unsigned int *)this + 16), &v323);
      if (v324 >= 0) {
        std::logic_error v284 = &v323;
      }
      else {
        std::logic_error v284 = (int16x8_t *)v323.i64[0];
      }
      int v285 = *((_DWORD *)this + 11);
      *(_DWORD *)std::string buf = 67110402;
      *(_DWORD *)&uint8_t buf[4] = v282;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "ASP_Object.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 1294;
      *(_WORD *)&unsigned char buf[24] = 1024;
      *(_DWORD *)&buf[26] = v283;
      *(_WORD *)&buf[30] = 2080;
      *(void *)&buf[32] = v284;
      *(_WORD *)&unsigned char buf[40] = 1024;
      *(_DWORD *)&buf[42] = v285;
      _os_log_debug_impl(&dword_1BAA78000, v21, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Building Core %u for %s driver id: %u", buf, 0x2Eu);
      goto LABEL_20;
    case 3:
      AMCP::Log::Scope_Registry::get(v5);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v7 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO)) {
        goto LABEL_25;
      }
      CFUUIDRef v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      int v10 = *((_DWORD *)this + 15);
      AMCP::make_string_for_class_id((AMCP *)*((unsigned int *)this + 16), &v323);
      if (v324 >= 0) {
        uint64_t v11 = &v323;
      }
      else {
        uint64_t v11 = (int16x8_t *)v323.i64[0];
      }
      int v12 = *((_DWORD *)this + 11);
      *(_DWORD *)std::string buf = 67110402;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "ASP_Object.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 1294;
      *(_WORD *)&unsigned char buf[24] = 1024;
      *(_DWORD *)&buf[26] = v10;
      *(_WORD *)&buf[30] = 2080;
      *(void *)&buf[32] = v11;
      *(_WORD *)&unsigned char buf[40] = 1024;
      *(_DWORD *)&buf[42] = v12;
      int v13 = v7;
      os_log_type_t v14 = OS_LOG_TYPE_INFO;
      break;
    default:
      goto LABEL_25;
  }
  _os_log_impl(&dword_1BAA78000, v13, v14, "%6u %32s:%-5d Building Core %u for %s driver id: %u", buf, 0x2Eu);
LABEL_20:
  if (v324 < 0) {
    operator delete((void *)v323.i64[0]);
  }
LABEL_25:
  if (cf[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[1]);
  }
LABEL_27:
  if (AMCP::is_base_of((AMCP *)0x61706C67, *((_DWORD *)this + 17)))
  {
    AMCP::ASP::PlugIn_Object::populate_object_core((uint64_t)this, v3, (uint64_t)__p);
    mcp_applesauce::CF::PlugInRef_proxy::get_bundle(v320, **v2);
    mcp_applesauce::CF::BundleRef_proxy::get_bundle_id((applesauce::CF::StringRef *)cf, (__CFBundle *)v320[0]);
    v323.i64[0] = 0x676C6F6270696964;
    v323.i32[2] = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)buf, (uint64_t)&v323, cf[0]);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(void *)buf + 40), buf);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (v320[0]) {
      CFRelease(v320[0]);
    }
    int v22 = *((_DWORD *)this + 15);
    *(void *)std::string buf = *(void *)(*((void *)this + 1) + 16);
    *(_DWORD *)&uint8_t buf[8] = v22;
    *(_DWORD *)&unsigned char buf[12] = 1633841016;
    AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>(v323.i64, 0, (long long *)buf, 1.58366006e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v323.i64[0] + 40), &v323);
    if (v323.i64[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v323.i64[1]);
    }
    int v23 = *((_DWORD *)this + 15);
    *(void *)std::string buf = *(void *)(*((void *)this + 1) + 16);
    *(_DWORD *)&uint8_t buf[8] = v23;
    *(_DWORD *)&unsigned char buf[12] = 1633905771;
    AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>(v323.i64, 0, (long long *)buf, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v323.i64[0] + 40), &v323);
    if (v323.i64[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v323.i64[1]);
    }
    int v24 = *((_DWORD *)this + 15);
    *(void *)std::string buf = *(void *)(*((void *)this + 1) + 16);
    *(_DWORD *)&uint8_t buf[8] = v24;
    *(_DWORD *)&unsigned char buf[12] = 1633969526;
    AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>(v323.i64, 0, (long long *)buf, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v323.i64[0] + 40), &v323);
    unsigned int v25 = (std::__shared_weak_count *)v323.i64[1];
    if (!v323.i64[1]) {
      goto LABEL_685;
    }
LABEL_684:
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    goto LABEL_685;
  }
  if (AMCP::is_base_of((AMCP *)0x61626F78, *((_DWORD *)this + 17)))
  {
    AMCP::ASP::PlugIn_Object::populate_object_core((uint64_t)this, v3, (uint64_t)__p);
    uint64_t v26 = *((void *)this + 3);
    int8x8_t v27 = (std::__shared_weak_count *)*((void *)this + 4);
    if (v27)
    {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      int v28 = *((_DWORD *)this + 11);
      v320[0] = 0;
      v320[1] = 0;
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      int32x4_t v29 = v27;
    }
    else
    {
      int32x4_t v29 = 0;
      int v28 = *((_DWORD *)this + 11);
      v320[0] = 0;
      v320[1] = 0;
    }
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.58366006e190);
    CFTypeRef v54 = cf[0];
    unint64_t v55 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v325 = 0;
    int16x8_t v56 = operator new(0x28uLL);
    *int16x8_t v56 = &unk_1F14745F0;
    v56[1] = v26;
    CFArrayRef v56[2] = v29;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v56 + 6) = v28;
    *(void *)((char *)v56 + 28) = 0x676C6F6262756964;
    *((_DWORD *)v56 + 9) = 0;
    v325 = v56;
    memset(buf, 0, 40);
    std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v54, v55, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<applesauce::CF::StringRef ()(void)>::~__value_func[abi:ne180100](&v323);
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>((uint64_t)v54);
    CFTypeRef v57 = cf[0];
    *(_OWORD *)v320 = *(_OWORD *)cf;
    if (v29)
    {
      CFTypeRef v289 = cf[0];
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      CFTypeRef v57 = v289;
    }
    if (v27)
    {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v58 = (uint64_t)v57;
      unint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v58 = (uint64_t)v57;
      unint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    }
    v325 = 0;
    mach_port_t v60 = operator new(0x28uLL);
    *mach_port_t v60 = &unk_1F1474670;
    v60[1] = v26;
    v60[2] = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v60 + 6) = v28;
    *(void *)((char *)v60 + 28) = 0x676C6F6262756964;
    *((_DWORD *)v60 + 9) = 0;
    v325 = v60;
    memset(buf, 0, 40);
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v58, Has_Property, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v323);
    if (v27)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    if (v320[0]) {
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v320[0] + 10, v320);
    }
    if (v320[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v320[1]);
    }
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    long long v61 = (std::__shared_weak_count *)*((void *)this + 4);
    *(void *)&long long v319 = *((void *)this + 3);
    *((void *)&v319 + 1) = v61;
    if (v61)
    {
      atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
      AMCP::ASP::make_properties<1953653102u>((uint64_t *)&v319, *((_DWORD *)this + 11), (uint64_t)__p);
      std::__shared_weak_count::__release_shared[abi:ne180100](v61);
    }
    else
    {
      AMCP::ASP::make_properties<1953653102u>((uint64_t *)&v319, *((_DWORD *)this + 11), (uint64_t)__p);
    }
    uint64_t v62 = *((void *)this + 3);
    uint64_t v63 = (std::__shared_weak_count *)*((void *)this + 4);
    if (v63)
    {
      atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
      int v64 = *((_DWORD *)this + 11);
      v320[0] = 0;
      v320[1] = 0;
      atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v65 = v63;
    }
    else
    {
      uint64_t v65 = 0;
      int v64 = *((_DWORD *)this + 11);
      v320[0] = 0;
      v320[1] = 0;
    }
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.58366006e190);
    CFTypeRef v66 = cf[0];
    unint64_t v67 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
    if (v65) {
      atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v325 = 0;
    mach_port_t v68 = operator new(0x28uLL);
    *mach_port_t v68 = &unk_1F14747F0;
    v68[1] = v62;
    v68[2] = v65;
    if (v65) {
      atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v68 + 6) = v64;
    *(void *)((char *)v68 + 28) = 0x676C6F6262686175;
    *((_DWORD *)v68 + 9) = 0;
    v325 = v68;
    memset(buf, 0, 40);
    std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v66, v67, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](&v323);
    if (v65) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v65);
    }
    AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>((uint64_t)v66);
    CFTypeRef v69 = cf[0];
    *(_OWORD *)v320 = *(_OWORD *)cf;
    if (v65)
    {
      CFTypeRef v290 = cf[0];
      std::__shared_weak_count::__release_shared[abi:ne180100](v65);
      CFTypeRef v69 = v290;
    }
    if (v63)
    {
      atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v70 = (uint64_t)v69;
      unint64_t v71 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v70 = (uint64_t)v69;
      unint64_t v71 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    }
    v325 = 0;
    int v72 = operator new(0x28uLL);
    *int v72 = &unk_1F1474870;
    v72[1] = v62;
    v72[2] = v63;
    if (v63) {
      atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v72 + 6) = v64;
    *(void *)((char *)v72 + 28) = 0x676C6F6262686175;
    *((_DWORD *)v72 + 9) = 0;
    v325 = v72;
    memset(buf, 0, 40);
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v70, v71, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v323);
    if (v63)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v63);
      std::__shared_weak_count::__release_shared[abi:ne180100](v63);
    }
    if (v320[0]) {
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v320[0] + 10, v320);
    }
    if (v320[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v320[1]);
    }
    if (v63) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v63);
    }
    uint64_t v73 = *((void *)this + 3);
    mach_port_t v74 = (std::__shared_weak_count *)*((void *)this + 4);
    if (v74)
    {
      atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
      int v75 = *((_DWORD *)this + 11);
      v320[0] = 0;
      v320[1] = 0;
      atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
      char v76 = v74;
    }
    else
    {
      char v76 = 0;
      int v75 = *((_DWORD *)this + 11);
      v320[0] = 0;
      v320[1] = 0;
    }
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.58366006e190);
    CFTypeRef v77 = cf[0];
    unint64_t v78 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
    if (v76) {
      atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v325 = 0;
    uint64_t v79 = operator new(0x28uLL);
    void *v79 = &unk_1F14748F0;
    v79[1] = v73;
    v79[2] = v76;
    if (v76) {
      atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v79 + 6) = v75;
    *(void *)((char *)v79 + 28) = 0x676C6F6262687669;
    *((_DWORD *)v79 + 9) = 0;
    v325 = v79;
    memset(buf, 0, 40);
    std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v77, v78, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](&v323);
    if (v76) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v76);
    }
    AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>((uint64_t)v77);
    CFTypeRef v80 = cf[0];
    *(_OWORD *)v320 = *(_OWORD *)cf;
    if (v76)
    {
      CFTypeRef v291 = cf[0];
      std::__shared_weak_count::__release_shared[abi:ne180100](v76);
      CFTypeRef v80 = v291;
    }
    if (v74)
    {
      atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v81 = (uint64_t)v80;
      unint64_t v82 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v81 = (uint64_t)v80;
      unint64_t v82 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    }
    v325 = 0;
    int v83 = operator new(0x28uLL);
    void *v83 = &unk_1F1474970;
    v83[1] = v73;
    v83[2] = v74;
    if (v74) {
      atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v83 + 6) = v75;
    *(void *)((char *)v83 + 28) = 0x676C6F6262687669;
    *((_DWORD *)v83 + 9) = 0;
    v325 = v83;
    memset(buf, 0, 40);
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v81, v82, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v323);
    if (v74)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v74);
      std::__shared_weak_count::__release_shared[abi:ne180100](v74);
    }
    if (v320[0]) {
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v320[0] + 10, v320);
    }
    if (v320[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v320[1]);
    }
    if (v74) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v74);
    }
    uint64_t v84 = *((void *)this + 3);
    long long v85 = (std::__shared_weak_count *)*((void *)this + 4);
    if (v85)
    {
      atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
      int v86 = *((_DWORD *)this + 11);
      v320[0] = 0;
      v320[1] = 0;
      atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
      int v87 = v85;
    }
    else
    {
      int v87 = 0;
      int v86 = *((_DWORD *)this + 11);
      v320[0] = 0;
      v320[1] = 0;
    }
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.58366006e190);
    CFTypeRef v88 = cf[0];
    unint64_t v89 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
    if (v87) {
      atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v325 = 0;
    unsigned int v90 = operator new(0x28uLL);
    void *v90 = &unk_1F14749F0;
    v90[1] = v84;
    v90[2] = v87;
    if (v87) {
      atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v90 + 6) = v86;
    *(void *)((char *)v90 + 28) = 0x676C6F6262686D69;
    *((_DWORD *)v90 + 9) = 0;
    v325 = v90;
    memset(buf, 0, 40);
    std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v88, v89, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](&v323);
    if (v87) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v87);
    }
    AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>((uint64_t)v88);
    CFTypeRef v91 = cf[0];
    *(_OWORD *)v320 = *(_OWORD *)cf;
    if (v87)
    {
      CFTypeRef v292 = cf[0];
      std::__shared_weak_count::__release_shared[abi:ne180100](v87);
      CFTypeRef v91 = v292;
    }
    if (v85)
    {
      atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v92 = (uint64_t)v91;
      unint64_t v93 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v92 = (uint64_t)v91;
      unint64_t v93 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    }
    v325 = 0;
    uint64_t v94 = operator new(0x28uLL);
    *uint64_t v94 = &unk_1F1474A70;
    v94[1] = v84;
    void v94[2] = v85;
    if (v85) {
      atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v94 + 6) = v86;
    *(void *)((char *)v94 + 28) = 0x676C6F6262686D69;
    *((_DWORD *)v94 + 9) = 0;
    v325 = v94;
    memset(buf, 0, 40);
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v92, v93, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v323);
    if (v85)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v85);
      std::__shared_weak_count::__release_shared[abi:ne180100](v85);
    }
    if (v320[0]) {
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v320[0] + 10, v320);
    }
    if (v320[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v320[1]);
    }
    if (v85) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v85);
    }
    uint64_t v95 = *((void *)this + 3);
    std::string::size_type v96 = (std::__shared_weak_count *)*((void *)this + 4);
    if (v96)
    {
      atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
      int v97 = *((_DWORD *)this + 11);
      v320[0] = 0;
      v320[1] = 0;
      atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
      std::string::size_type v98 = v96;
    }
    else
    {
      std::string::size_type v98 = 0;
      int v97 = *((_DWORD *)this + 11);
      v320[0] = 0;
      v320[1] = 0;
    }
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.58366006e190);
    CFTypeRef v99 = cf[0];
    unint64_t v100 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
    if (v98) {
      atomic_fetch_add_explicit(&v98->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v325 = 0;
    unsigned int v101 = operator new(0x28uLL);
    *unsigned int v101 = &unk_1F1474AF0;
    v101[1] = v95;
    uint64_t v101[2] = v98;
    if (v98) {
      atomic_fetch_add_explicit(&v98->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v101 + 6) = v97;
    *(void *)((char *)v101 + 28) = 0x676C6F626270726FLL;
    *((_DWORD *)v101 + 9) = 0;
    v325 = v101;
    memset(buf, 0, 40);
    std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v99, v100, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](&v323);
    if (v98) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v98);
    }
    AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>((uint64_t)v99);
    CFTypeRef v102 = cf[0];
    *(_OWORD *)v320 = *(_OWORD *)cf;
    if (v98)
    {
      CFTypeRef v293 = cf[0];
      std::__shared_weak_count::__release_shared[abi:ne180100](v98);
      CFTypeRef v102 = v293;
    }
    if (v96)
    {
      atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v103 = (uint64_t)v102;
      unint64_t v104 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v103 = (uint64_t)v102;
      unint64_t v104 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    }
    v325 = 0;
    std::string v105 = operator new(0x28uLL);
    *std::string v105 = &unk_1F1474B70;
    v105[1] = v95;
    uint64_t v105[2] = v96;
    if (v96) {
      atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v105 + 6) = v97;
    *(void *)((char *)v105 + 28) = 0x676C6F626270726FLL;
    *((_DWORD *)v105 + 9) = 0;
    v325 = v105;
    memset(buf, 0, 40);
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v103, v104, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v323);
    if (v96)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v96);
      std::__shared_weak_count::__release_shared[abi:ne180100](v96);
    }
    if (v320[0]) {
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v320[0] + 10, v320);
    }
    if (v320[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v320[1]);
    }
    if (v96) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v96);
    }
    uint64_t v107 = *((void *)this + 3);
    uint64_t v106 = (std::__shared_weak_count *)*((void *)this + 4);
    if (v106)
    {
      atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
      int v108 = *((_DWORD *)this + 11);
      strcpy((char *)v318, "noxbbolg");
      BYTE1(v318[1]) = 0;
      WORD1(v318[1]) = 0;
      v320[0] = 0;
      v320[1] = 0;
      atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v109 = v106;
    }
    else
    {
      long long v109 = 0;
      int v108 = *((_DWORD *)this + 11);
      strcpy((char *)v318, "noxbbolg");
      BYTE1(v318[1]) = 0;
      WORD1(v318[1]) = 0;
      v320[0] = 0;
      v320[1] = 0;
    }
    strcpy((char *)&v315, "noxbbolg");
    BYTE9(v315) = 0;
    WORD5(v315) = 0;
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, *(double *)&v315);
    CFTypeRef v110 = cf[0];
    unint64_t v111 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
    if (v106) {
      atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v325 = 0;
    uint64_t v112 = operator new(0x28uLL);
    *uint64_t v112 = &unk_1F1474BF0;
    v112[1] = v107;
    v112[2] = v106;
    if (v106) {
      atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v112 + 6) = v108;
    *(void *)((char *)v112 + 28) = 0x676C6F6262786F6ELL;
    *((_DWORD *)v112 + 9) = 0;
    v325 = v112;
    memset(buf, 0, 40);
    std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v110, v111, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](&v323);
    if (v106) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v106);
    }
    AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>((uint64_t)v110);
    unint64_t v113 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
    if (v109) {
      atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v325 = 0;
    int v114 = operator new(0x28uLL);
    void *v114 = &unk_1F1474C70;
    v114[1] = v107;
    v114[2] = v109;
    if (v109) {
      atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v114 + 6) = v108;
    *(void *)((char *)v114 + 28) = 0x676C6F6262786F6ELL;
    *((_DWORD *)v114 + 9) = 0;
    v325 = v114;
    memset(buf, 0, 40);
    std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v110, v113, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:ne180100](&v323);
    if (v109) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v109);
    }
    AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>((uint64_t)v110);
    CFTypeRef v294 = cf[0];
    *(_OWORD *)v320 = *(_OWORD *)cf;
    if (v109) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v109);
    }
    if (v106)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v106);
      atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v115 = (uint64_t)v294;
      unint64_t Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
      atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v115 = (uint64_t)v294;
      unint64_t Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
    }
    v325 = 0;
    std::locale v117 = operator new(0x28uLL);
    *std::locale v117 = &unk_1F1474CF0;
    v117[1] = v107;
    v117[2] = v106;
    if (v106) {
      atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v117 + 6) = v108;
    *(void *)((char *)v117 + 28) = 0x676C6F6262786F6ELL;
    *((_DWORD *)v117 + 9) = 0;
    v325 = v117;
    memset(buf, 0, 40);
    std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v115, Is_Property_Settable, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::~__value_func[abi:ne180100](&v323);
    if (v106)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v106);
      std::__shared_weak_count::__release_shared[abi:ne180100](v106);
      atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v118 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      unint64_t v118 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    }
    v325 = 0;
    std::locale v119 = operator new(0x28uLL);
    *std::locale v119 = &unk_1F1474D70;
    v119[1] = v107;
    v119[2] = v106;
    if (v106) {
      atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v119 + 6) = v108;
    *(void *)((char *)v119 + 28) = 0x676C6F6262786F6ELL;
    *((_DWORD *)v119 + 9) = 0;
    v325 = v119;
    memset(buf, 0, 40);
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v115, v118, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v323);
    if (v106)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v106);
      std::__shared_weak_count::__release_shared[abi:ne180100](v106);
    }
    if (v320[0]) {
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v320[0] + 10, v320);
    }
    if (v320[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v320[1]);
    }
    if (v106) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v106);
    }
    uint64_t v120 = *((void *)this + 3);
    std::locale v121 = (std::__shared_weak_count *)*((void *)this + 4);
    if (v121)
    {
      atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
      int v122 = *((_DWORD *)this + 11);
      v320[0] = 0;
      v320[1] = 0;
      atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
      std::locale v123 = v121;
    }
    else
    {
      std::locale v123 = 0;
      int v122 = *((_DWORD *)this + 11);
      v320[0] = 0;
      v320[1] = 0;
    }
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.58366006e190);
    CFTypeRef v124 = cf[0];
    unint64_t v125 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
    if (v123) {
      atomic_fetch_add_explicit(&v123->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v325 = 0;
    std::locale v126 = operator new(0x28uLL);
    *std::locale v126 = &unk_1F1474DF0;
    v126[1] = v120;
    v126[2] = v123;
    if (v123) {
      atomic_fetch_add_explicit(&v123->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v126 + 6) = v122;
    *(void *)((char *)v126 + 28) = 0x676C6F6262786F66;
    *((_DWORD *)v126 + 9) = 0;
    v325 = v126;
    memset(buf, 0, 40);
    std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v124, v125, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](&v323);
    if (v123) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v123);
    }
    AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>((uint64_t)v124);
    CFTypeRef v127 = cf[0];
    *(_OWORD *)v320 = *(_OWORD *)cf;
    if (v123)
    {
      CFTypeRef v295 = cf[0];
      std::__shared_weak_count::__release_shared[abi:ne180100](v123);
      CFTypeRef v127 = v295;
    }
    if (v121)
    {
      atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v128 = (uint64_t)v127;
      unint64_t v129 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v128 = (uint64_t)v127;
      unint64_t v129 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    }
    v325 = 0;
    uint64_t v130 = operator new(0x28uLL);
    *uint64_t v130 = &unk_1F1474E70;
    v130[1] = v120;
    v130[2] = v121;
    if (v121) {
      atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v130 + 6) = v122;
    *(void *)((char *)v130 + 28) = 0x676C6F6262786F66;
    *((_DWORD *)v130 + 9) = 0;
    v325 = v130;
    memset(buf, 0, 40);
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v128, v129, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v323);
    if (v121)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v121);
      std::__shared_weak_count::__release_shared[abi:ne180100](v121);
    }
    if (v320[0]) {
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v320[0] + 10, v320);
    }
    if (v320[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v320[1]);
    }
    if (v121) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v121);
    }
    uint64_t v131 = *((void *)this + 3);
    uint64_t v132 = (std::__shared_weak_count *)*((void *)this + 4);
    if (v132)
    {
      atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
      int v133 = *((_DWORD *)this + 11);
      atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v134 = v132;
    }
    else
    {
      uint64_t v134 = 0;
      int v133 = *((_DWORD *)this + 11);
    }
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.58366006e190);
    int v135 = (unsigned int *)cf[0];
    unint64_t v136 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
    if (v134) {
      atomic_fetch_add_explicit(&v134->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v325 = 0;
    uint64_t v137 = operator new(0x20uLL);
    *uint64_t v137 = &unk_1F1474EF0;
    v137[1] = v131;
    v137[2] = v134;
    if (v134) {
      atomic_fetch_add_explicit(&v134->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v137 + 6) = v133;
    v325 = v137;
    memset(buf, 0, 40);
    std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v135, v136, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<std::vector<unsigned int> ()(void)>::~__value_func[abi:ne180100](&v323);
    if (v134) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v134);
    }
    AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>((uint64_t)v135);
    if (v134) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v134);
    }
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, v135 + 10, cf);
    if (cf[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[1]);
    }
    if (v132) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v132);
    }
    uint64_t v138 = *((void *)this + 3);
    uint64_t v139 = (std::__shared_weak_count *)*((void *)this + 4);
    if (v139)
    {
      atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
      int v140 = *((_DWORD *)this + 11);
      atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
      int v141 = v139;
    }
    else
    {
      int v141 = 0;
      int v140 = *((_DWORD *)this + 11);
    }
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.58366006e190);
    uint64_t v142 = (unsigned int *)cf[0];
    unint64_t v143 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
    if (v141) {
      atomic_fetch_add_explicit(&v141->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v325 = 0;
    int v144 = operator new(0x20uLL);
    *int v144 = &unk_1F1474F70;
    v144[1] = v138;
    v144[2] = v141;
    if (v141) {
      atomic_fetch_add_explicit(&v141->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v144 + 6) = v140;
    v325 = v144;
    memset(buf, 0, 40);
    std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v142, v143, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<std::vector<unsigned int> ()(void)>::~__value_func[abi:ne180100](&v323);
    if (v141) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v141);
    }
    AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>((uint64_t)v142);
    if (v141) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v141);
    }
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, v142 + 10, cf);
    uint64_t v145 = (std::__shared_weak_count *)cf[1];
    if (!cf[1]) {
      goto LABEL_682;
    }
    goto LABEL_681;
  }
  if (!AMCP::is_base_of((AMCP *)0x61646576, *((_DWORD *)this + 17)))
  {
    if (!AMCP::is_base_of((AMCP *)0x61737472, *((_DWORD *)this + 17)))
    {
      if (!AMCP::is_base_of((AMCP *)0x736C6472, *((_DWORD *)this + 17)))
      {
        if (AMCP::is_base_of((AMCP *)0x6C65766C, *((_DWORD *)this + 17)))
        {
          AMCP::ASP::PlugIn_Object::populate_volume_control_core((uint64_t)this, v3, (uint64_t)__p);
        }
        else if (AMCP::is_base_of((AMCP *)0x746F676C, *((_DWORD *)this + 17)))
        {
          AMCP::ASP::PlugIn_Object::populate_BOOLean_control_core((uint64_t)this, v3, (uint64_t)__p);
        }
        else if (AMCP::is_base_of((AMCP *)0x736C6374, *((_DWORD *)this + 17)))
        {
          AMCP::ASP::PlugIn_Object::populate_selector_control_core((uint64_t)this, v3, (uint64_t)__p);
        }
        else if (AMCP::is_base_of((AMCP *)0x7370616E, *((_DWORD *)this + 17)))
        {
          AMCP::ASP::PlugIn_Object::populate_stereo_pan_control_core((uint64_t)this, v3, (uint64_t)__p);
        }
        else if (AMCP::is_base_of((AMCP *)0x6163746C, *((_DWORD *)this + 17)))
        {
          AMCP::ASP::PlugIn_Object::populate_control_core((uint64_t)this, v3, (uint64_t)__p);
        }
        else if (AMCP::is_base_of((AMCP *)0x61636C6B, *((_DWORD *)this + 17)))
        {
          AMCP::ASP::PlugIn_Object::populate_clock_core((uint64_t)this, v3, (uint64_t)__p);
        }
        else if (AMCP::is_base_of((AMCP *)0x616F626A, *((_DWORD *)this + 17)))
        {
          AMCP::ASP::PlugIn_Object::populate_object_core((uint64_t)this, v3, (uint64_t)__p);
        }
        goto LABEL_685;
      }
      AMCP::ASP::PlugIn_Object::populate_control_core((uint64_t)this, v3, (uint64_t)__p);
      uint64_t v147 = *((void *)this + 3);
      uint64_t v146 = (std::__shared_weak_count *)*((void *)this + 4);
      if (v146)
      {
        atomic_fetch_add_explicit(&v146->__shared_owners_, 1uLL, memory_order_relaxed);
        int v148 = *((_DWORD *)this + 11);
        strcpy((char *)&v315, "vrdsbolg");
        BYTE9(v315) = 0;
        WORD5(v315) = 0;
        v320[0] = 0;
        v320[1] = 0;
        atomic_fetch_add_explicit(&v146->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v146->__shared_owners_, 1uLL, memory_order_relaxed);
        mach_port_t v149 = v146;
      }
      else
      {
        mach_port_t v149 = 0;
        int v148 = *((_DWORD *)this + 11);
        strcpy((char *)&v315, "vrdsbolg");
        BYTE9(v315) = 0;
        WORD5(v315) = 0;
        v320[0] = 0;
        v320[1] = 0;
      }
      strcpy((char *)&v319, "vrdsbolg");
      BYTE9(v319) = 0;
      WORD5(v319) = 0;
      std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, *(double *)&v319);
      CFTypeRef v263 = cf[0];
      unint64_t v264 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
      if (v146) {
        atomic_fetch_add_explicit(&v146->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v325 = 0;
      int v265 = operator new(0x28uLL);
      *int v265 = &unk_1F1476340;
      v265[1] = v147;
      v265[2] = v146;
      if (v146) {
        atomic_fetch_add_explicit(&v146->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v265 + 6) = v148;
      *(void *)((char *)v265 + 28) = 0x676C6F6273647276;
      *((_DWORD *)v265 + 9) = 0;
      v325 = v265;
      memset(buf, 0, 40);
      std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
      *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v263, v264, (AMCP *)buf);
      if (*(void *)&buf[32]) {
        (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
      }
      std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](&v323);
      if (v146) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v146);
      }
      AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>((uint64_t)v263);
      unint64_t v266 = AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int const&)>>();
      if (v149) {
        atomic_fetch_add_explicit(&v149->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v325 = 0;
      int v267 = operator new(0x28uLL);
      *int v267 = &unk_1F14763C0;
      v267[1] = v147;
      v267[2] = v149;
      if (v149) {
        atomic_fetch_add_explicit(&v149->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v267 + 6) = v148;
      *(void *)((char *)v267 + 28) = 0x676C6F6273647276;
      *((_DWORD *)v267 + 9) = 0;
      v325 = v267;
      memset(buf, 0, 40);
      std::__function::__value_func<void ()(unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
      *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(unsigned int const&)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v263, v266, (AMCP *)buf);
      if (*(void *)&buf[32]) {
        (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
      }
      std::__function::__value_func<void ()(unsigned int const&)>::~__value_func[abi:ne180100](&v323);
      if (v149) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v149);
      }
      AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>((uint64_t)v263);
      CFTypeRef v307 = cf[0];
      *(_OWORD *)v320 = *(_OWORD *)cf;
      if (v149) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v149);
      }
      if (v146)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v146);
        atomic_fetch_add_explicit(&v146->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v268 = (uint64_t)v307;
        unint64_t v269 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
        atomic_fetch_add_explicit(&v146->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v268 = (uint64_t)v307;
        unint64_t v269 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
      }
      v325 = 0;
      int v270 = operator new(0x28uLL);
      *int v270 = &unk_1F1476440;
      v270[1] = v147;
      v270[2] = v146;
      if (v146) {
        atomic_fetch_add_explicit(&v146->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v270 + 6) = v148;
      *(void *)((char *)v270 + 28) = 0x676C6F6273647276;
      *((_DWORD *)v270 + 9) = 0;
      v325 = v270;
      memset(buf, 0, 40);
      std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
      *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v268, v269, (AMCP *)buf);
      if (*(void *)&buf[32]) {
        (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
      }
      std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::~__value_func[abi:ne180100](&v323);
      if (v146)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v146);
        std::__shared_weak_count::__release_shared[abi:ne180100](v146);
        atomic_fetch_add_explicit(&v146->__shared_owners_, 1uLL, memory_order_relaxed);
        unint64_t v271 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
        atomic_fetch_add_explicit(&v146->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        unint64_t v271 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      }
      v325 = 0;
      v272 = operator new(0x28uLL);
      void *v272 = &unk_1F14764C0;
      v272[1] = v147;
      v272[2] = v146;
      if (v146) {
        atomic_fetch_add_explicit(&v146->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v272 + 6) = v148;
      *(void *)((char *)v272 + 28) = 0x676C6F6273647276;
      *((_DWORD *)v272 + 9) = 0;
      v325 = v272;
      memset(buf, 0, 40);
      std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
      *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v268, v271, (AMCP *)buf);
      if (*(void *)&buf[32]) {
        (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
      }
      std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v323);
      if (v146)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v146);
        std::__shared_weak_count::__release_shared[abi:ne180100](v146);
      }
      if (v320[0]) {
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v320[0] + 10, v320);
      }
      if (v320[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v320[1]);
      }
      if (v146) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v146);
      }
      uint64_t v273 = *((void *)this + 3);
      uint64_t v139 = (std::__shared_weak_count *)*((void *)this + 4);
      if (v139)
      {
        atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
        int v274 = *((_DWORD *)this + 11);
        v320[0] = 0;
        v320[1] = 0;
        atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
        v275 = v139;
      }
      else
      {
        v275 = 0;
        int v274 = *((_DWORD *)this + 11);
        v320[0] = 0;
        v320[1] = 0;
      }
      std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.58366012e190);
      long long v247 = (unsigned int *)cf[0];
      unint64_t v276 = AMCP::Implementation::get_type_marker<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>();
      if (v275) {
        atomic_fetch_add_explicit(&v275->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v325 = 0;
      long long v277 = operator new(0x28uLL);
      *long long v277 = &unk_1F1476540;
      v277[1] = v273;
      v277[2] = v275;
      if (v275) {
        atomic_fetch_add_explicit(&v275->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v277 + 6) = v274;
      *(void *)((char *)v277 + 28) = 0x676C6F6273647272;
      *((_DWORD *)v277 + 9) = 0;
      v325 = v277;
      memset(buf, 0, 40);
      std::__function::__value_func<std::tuple<unsigned int,unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
      *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v247, v276, (AMCP *)buf);
      if (*(void *)&buf[32]) {
        (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
      }
      std::__function::__value_func<std::tuple<unsigned int,unsigned int> ()(void)>::~__value_func[abi:ne180100](&v323);
      if (v275) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v275);
      }
      AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>((uint64_t)v247);
      v250 = (std::__shared_weak_count *)cf[1];
      v320[0] = v247;
      v320[1] = cf[1];
      if (v275) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v275);
      }
      if (v139)
      {
        atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
        unint64_t v278 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
        atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        unint64_t v278 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      }
      v325 = 0;
      v279 = operator new(0x28uLL);
      void *v279 = &unk_1F14765C0;
      v279[1] = v273;
      v279[2] = v139;
      if (v139) {
        atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v279 + 6) = v274;
      *(void *)((char *)v279 + 28) = 0x676C6F6273647272;
      *((_DWORD *)v279 + 9) = 0;
      v325 = v279;
      memset(buf, 0, 40);
      std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
      *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v247, v278, (AMCP *)buf);
      if (*(void *)&buf[32]) {
        (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
      }
      std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v323);
      if (v139)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v139);
        std::__shared_weak_count::__release_shared[abi:ne180100](v139);
      }
LABEL_679:
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, v247 + 10, v320);
      if (!v250)
      {
LABEL_682:
        if (!v139) {
          goto LABEL_685;
        }
        unsigned int v25 = v139;
        goto LABEL_684;
      }
      uint64_t v145 = v250;
LABEL_681:
      std::__shared_weak_count::__release_shared[abi:ne180100](v145);
      goto LABEL_682;
    }
    AMCP::ASP::PlugIn_Object::populate_object_core((uint64_t)this, v3, (uint64_t)__p);
    uint64_t v50 = *((void *)this + 3);
    int8x8_t v51 = (std::__shared_weak_count *)*((void *)this + 4);
    if (v51)
    {
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
      int v52 = *((_DWORD *)this + 11);
      v320[0] = 0;
      v320[1] = 0;
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
      int32x4_t v53 = v51;
    }
    else
    {
      int32x4_t v53 = 0;
      int v52 = *((_DWORD *)this + 11);
      v320[0] = 0;
      v320[1] = 0;
    }
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.58366012e190);
    CFTypeRef v185 = cf[0];
    unint64_t v186 = AMCP::Implementation::get_type_marker<std::function<AMCP::Direction ()(void)>>();
    if (v53) {
      atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v325 = 0;
    std::string v187 = operator new(0x28uLL);
    *std::string v187 = &unk_1F1475B40;
    v187[1] = v50;
    v187[2] = v53;
    if (v53) {
      atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v187 + 6) = v52;
    *(void *)((char *)v187 + 28) = 0x676C6F6273646972;
    *((_DWORD *)v187 + 9) = 0;
    v325 = v187;
    memset(buf, 0, 40);
    std::__function::__value_func<AMCP::Direction ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Direction ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v185, v186, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<AMCP::Direction ()(void)>::~__value_func[abi:ne180100](&v323);
    if (v53) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v53);
    }
    AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>((uint64_t)v185);
    CFTypeRef v188 = cf[0];
    *(_OWORD *)v320 = *(_OWORD *)cf;
    if (v53)
    {
      CFTypeRef v299 = cf[0];
      std::__shared_weak_count::__release_shared[abi:ne180100](v53);
      CFTypeRef v188 = v299;
    }
    if (v51)
    {
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v189 = (uint64_t)v188;
      unint64_t v190 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v189 = (uint64_t)v188;
      unint64_t v190 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    }
    v325 = 0;
    int v191 = operator new(0x28uLL);
    *int v191 = &unk_1F1475BC0;
    v191[1] = v50;
    v191[2] = v51;
    if (v51) {
      atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v191 + 6) = v52;
    *(void *)((char *)v191 + 28) = 0x676C6F6273646972;
    *((_DWORD *)v191 + 9) = 0;
    v325 = v191;
    memset(buf, 0, 40);
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v189, v190, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v323);
    if (v51)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
    }
    if (v320[0]) {
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v320[0] + 10, v320);
    }
    if (v320[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v320[1]);
    }
    if (v51) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
    }
    uint64_t v192 = *((void *)this + 3);
    long long v193 = (std::__shared_weak_count *)*((void *)this + 4);
    if (v193)
    {
      atomic_fetch_add_explicit(&v193->__shared_owners_, 1uLL, memory_order_relaxed);
      int v194 = *((_DWORD *)this + 11);
      v320[0] = 0;
      v320[1] = 0;
      atomic_fetch_add_explicit(&v193->__shared_owners_, 1uLL, memory_order_relaxed);
      v195 = v193;
    }
    else
    {
      v195 = 0;
      int v194 = *((_DWORD *)this + 11);
      v320[0] = 0;
      v320[1] = 0;
    }
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.58366012e190);
    CFTypeRef v196 = cf[0];
    unint64_t v197 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
    if (v195) {
      atomic_fetch_add_explicit(&v195->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v325 = 0;
    uint64_t v198 = operator new(0x28uLL);
    *uint64_t v198 = &unk_1F1475C40;
    v198[1] = v192;
    v198[2] = v195;
    if (v195) {
      atomic_fetch_add_explicit(&v195->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v198 + 6) = v194;
    *(void *)((char *)v198 + 28) = 0x676C6F627363686ELL;
    *((_DWORD *)v198 + 9) = 0;
    v325 = v198;
    memset(buf, 0, 40);
    std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v196, v197, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](&v323);
    if (v195) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v195);
    }
    AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>((uint64_t)v196);
    CFTypeRef v199 = cf[0];
    *(_OWORD *)v320 = *(_OWORD *)cf;
    if (v195)
    {
      CFTypeRef v300 = cf[0];
      std::__shared_weak_count::__release_shared[abi:ne180100](v195);
      CFTypeRef v199 = v300;
    }
    if (v193)
    {
      atomic_fetch_add_explicit(&v193->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v200 = (uint64_t)v199;
      unint64_t v201 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      atomic_fetch_add_explicit(&v193->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v200 = (uint64_t)v199;
      unint64_t v201 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    }
    v325 = 0;
    v202 = operator new(0x28uLL);
    void *v202 = &unk_1F1475CC0;
    v202[1] = v192;
    void v202[2] = v193;
    if (v193) {
      atomic_fetch_add_explicit(&v193->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v202 + 6) = v194;
    *(void *)((char *)v202 + 28) = 0x676C6F627363686ELL;
    *((_DWORD *)v202 + 9) = 0;
    v325 = v202;
    memset(buf, 0, 40);
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v200, v201, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v323);
    if (v193)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v193);
      std::__shared_weak_count::__release_shared[abi:ne180100](v193);
    }
    if (v320[0]) {
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v320[0] + 10, v320);
    }
    if (v320[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v320[1]);
    }
    if (v193) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v193);
    }
    uint64_t v203 = *((void *)this + 3);
    uint64_t v204 = (std::__shared_weak_count *)*((void *)this + 4);
    if (v204)
    {
      atomic_fetch_add_explicit(&v204->__shared_owners_, 1uLL, memory_order_relaxed);
      int v205 = *((_DWORD *)this + 11);
      v320[0] = 0;
      v320[1] = 0;
      atomic_fetch_add_explicit(&v204->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v206 = v204;
    }
    else
    {
      long long v206 = 0;
      int v205 = *((_DWORD *)this + 11);
      v320[0] = 0;
      v320[1] = 0;
    }
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.58366012e190);
    std::string v207 = (unsigned int *)cf[0];
    unint64_t v208 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
    if (v206) {
      atomic_fetch_add_explicit(&v206->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v325 = 0;
    int v209 = operator new(0x30uLL);
    *int v209 = &unk_1F1475D40;
    v209[1] = v203;
    v209[2] = v206;
    if (v206) {
      atomic_fetch_add_explicit(&v206->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v209 + 6) = v205;
    *(void *)((char *)v209 + 28) = 0x676C6F6274617073;
    *((_DWORD *)v209 + 9) = 0;
    *((_DWORD *)v209 + 10) = 0;
    v325 = v209;
    memset(buf, 0, 40);
    std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v207, v208, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](&v323);
    if (v206) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v206);
    }
    AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>((uint64_t)v207);
    long long v210 = (std::__shared_weak_count *)cf[1];
    v320[0] = v207;
    v320[1] = cf[1];
    if (v206) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v206);
    }
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, v207 + 10, v320);
    if (v210) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v210);
    }
    if (v204) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v204);
    }
    uint64_t v211 = *((void *)this + 3);
    std::string::size_type v212 = (std::__shared_weak_count *)*((void *)this + 4);
    if (v212)
    {
      atomic_fetch_add_explicit(&v212->__shared_owners_, 1uLL, memory_order_relaxed);
      int v213 = *((_DWORD *)this + 11);
      v320[0] = 0;
      v320[1] = 0;
      atomic_fetch_add_explicit(&v212->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v214 = v212;
    }
    else
    {
      uint64_t v214 = 0;
      int v213 = *((_DWORD *)this + 11);
      v320[0] = 0;
      v320[1] = 0;
    }
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.58366012e190);
    CFTypeRef v215 = cf[0];
    unint64_t v216 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
    if (v214) {
      atomic_fetch_add_explicit(&v214->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v325 = 0;
    std::string v217 = operator new(0x28uLL);
    *std::string v217 = &unk_1F1475DC0;
    v217[1] = v211;
    v217[2] = v214;
    if (v214) {
      atomic_fetch_add_explicit(&v214->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v217 + 6) = v213;
    *(void *)((char *)v217 + 28) = 0x676C6F627465726DLL;
    *((_DWORD *)v217 + 9) = 0;
    v325 = v217;
    memset(buf, 0, 40);
    std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v215, v216, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](&v323);
    if (v214) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v214);
    }
    AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>((uint64_t)v215);
    CFTypeRef v218 = cf[0];
    *(_OWORD *)v320 = *(_OWORD *)cf;
    if (v214)
    {
      CFTypeRef v301 = cf[0];
      std::__shared_weak_count::__release_shared[abi:ne180100](v214);
      CFTypeRef v218 = v301;
    }
    if (v212)
    {
      atomic_fetch_add_explicit(&v212->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v219 = (uint64_t)v218;
      unint64_t v220 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      atomic_fetch_add_explicit(&v212->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v219 = (uint64_t)v218;
      unint64_t v220 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    }
    v325 = 0;
    unint64_t v221 = operator new(0x28uLL);
    *unint64_t v221 = &unk_1F1475E40;
    v221[1] = v211;
    v221[2] = v212;
    if (v212) {
      atomic_fetch_add_explicit(&v212->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v221 + 6) = v213;
    *(void *)((char *)v221 + 28) = 0x676C6F627465726DLL;
    *((_DWORD *)v221 + 9) = 0;
    v325 = v221;
    memset(buf, 0, 40);
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v219, v220, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v323);
    if (v212)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v212);
      std::__shared_weak_count::__release_shared[abi:ne180100](v212);
    }
    if (v320[0]) {
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v320[0] + 10, v320);
    }
    if (v320[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v320[1]);
    }
    if (v212) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v212);
    }
    uint64_t v222 = *((void *)this + 3);
    std::string v223 = (std::__shared_weak_count *)*((void *)this + 4);
    if (v223)
    {
      atomic_fetch_add_explicit(&v223->__shared_owners_, 1uLL, memory_order_relaxed);
      int v224 = *((_DWORD *)this + 11);
      v320[0] = 0;
      v320[1] = 0;
      atomic_fetch_add_explicit(&v223->__shared_owners_, 1uLL, memory_order_relaxed);
      int v225 = v223;
    }
    else
    {
      int v225 = 0;
      int v224 = *((_DWORD *)this + 11);
      v320[0] = 0;
      v320[1] = 0;
    }
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.58366012e190);
    CFTypeRef v226 = cf[0];
    unint64_t v227 = AMCP::Implementation::get_type_marker<std::function<int ()(void)>>();
    if (v225) {
      atomic_fetch_add_explicit(&v225->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v325 = 0;
    unint64_t v228 = operator new(0x28uLL);
    *unint64_t v228 = &unk_1F1475EC0;
    v228[1] = v222;
    v228[2] = v225;
    if (v225) {
      atomic_fetch_add_explicit(&v225->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v228 + 6) = v224;
    *(void *)((char *)v228 + 28) = 0x676C6F626C746E63;
    *((_DWORD *)v228 + 9) = 0;
    v325 = v228;
    memset(buf, 0, 40);
    std::__function::__value_func<int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<int ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v226, v227, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](&v323);
    if (v225) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v225);
    }
    AMCP::Core::Operation_Utilities::add_generic_property_getter<int>((uint64_t)v226);
    CFTypeRef v229 = cf[0];
    *(_OWORD *)v320 = *(_OWORD *)cf;
    if (v225)
    {
      CFTypeRef v302 = cf[0];
      std::__shared_weak_count::__release_shared[abi:ne180100](v225);
      CFTypeRef v229 = v302;
    }
    if (v223)
    {
      atomic_fetch_add_explicit(&v223->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v230 = (uint64_t)v229;
      unint64_t v231 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      atomic_fetch_add_explicit(&v223->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v230 = (uint64_t)v229;
      unint64_t v231 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    }
    v325 = 0;
    int v232 = operator new(0x28uLL);
    *int v232 = &unk_1F1475F40;
    v232[1] = v222;
    v232[2] = v223;
    if (v223) {
      atomic_fetch_add_explicit(&v223->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v232 + 6) = v224;
    *(void *)((char *)v232 + 28) = 0x676C6F626C746E63;
    *((_DWORD *)v232 + 9) = 0;
    v325 = v232;
    memset(buf, 0, 40);
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v230, v231, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v323);
    if (v223)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v223);
      std::__shared_weak_count::__release_shared[abi:ne180100](v223);
    }
    if (v320[0]) {
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v320[0] + 10, v320);
    }
    if (v320[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v320[1]);
    }
    if (v223) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v223);
    }
    long long v303 = *(_OWORD *)v2;
    std::string v233 = (std::__shared_weak_count *)*((void *)this + 4);
    if (v233) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)this + 4) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v234 = *((unsigned int *)this + 11);
    uint64_t v235 = *((unsigned int *)this + 15);
    long long v236 = *(_OWORD *)((char *)this + 8);
    long long v287 = v236;
    v237 = (std::__shared_weak_count *)*((void *)this + 2);
    if (*((void *)&v236 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v236 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    cf[0] = 0;
    cf[1] = 0;
    if (v233)
    {
      atomic_fetch_add_explicit(&v233->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v319 = v303;
      atomic_fetch_add_explicit(&v233->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!v237)
      {
LABEL_538:
        std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v320, 0, 1.58366008e190);
        CFTypeRef v238 = v320[0];
        unint64_t v239 = AMCP::Implementation::get_type_marker<std::function<CA::StreamDescription ()(void)>>();
        v325 = 0;
        uint64_t v240 = (char *)operator new(0x20uLL);
        *(void *)uint64_t v240 = &unk_1F1473A70;
        *(_OWORD *)(v240 + 8) = v303;
        *((_DWORD *)v240 + 6) = v234;
        v325 = v240;
        memset(buf, 0, 40);
        std::__function::__value_func<CA::StreamDescription ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
        *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<CA::StreamDescription ()(void)>>::dispatch;
        std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v238, v239, (AMCP *)buf);
        if (*(void *)&buf[32]) {
          (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
        }
        std::__function::__value_func<CA::StreamDescription ()(void)>::~__value_func[abi:ne180100](&v323);
        AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>((uint64_t)v238);
        unint64_t v241 = AMCP::Implementation::get_type_marker<std::function<void ()(CA::StreamDescription const&)>>();
        long long v304 = v319;
        long long v319 = 0uLL;
        v325 = 0;
        long long v242 = (char *)operator new(0x30uLL);
        *(void *)long long v242 = &unk_1F1473AF0;
        *(_OWORD *)(v242 + 8) = v304;
        *((void *)v242 + 3) = v234 | (v235 << 32);
        *((_OWORD *)v242 + 2) = v287;
        v325 = v242;
        memset(buf, 0, 40);
        std::__function::__value_func<void ()(CA::StreamDescription const&)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
        *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(CA::StreamDescription const&)>>::dispatch;
        std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v238, v241, (AMCP *)buf);
        if (*(void *)&buf[32]) {
          (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
        }
        std::__function::__value_func<void ()(CA::StreamDescription const&)>::~__value_func[abi:ne180100](&v323);
        AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>((uint64_t)v238);
        uint64_t v243 = (unsigned int *)v320[0];
        *(_OWORD *)CFTypeRef cf = *(_OWORD *)v320;
        long long v305 = *(_OWORD *)v320;
        if (*((void *)&v319 + 1))
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v319 + 1));
          uint64_t v243 = (unsigned int *)v305;
        }
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, v243 + 10, cf);
        if (*((void *)&v305 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v305 + 1));
        }
        if (v237) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v237);
        }
        if (v233) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v233);
        }
        uint64_t v244 = *((void *)this + 3);
        uint64_t v139 = (std::__shared_weak_count *)*((void *)this + 4);
        if (v139)
        {
          atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
          int v245 = *((_DWORD *)this + 11);
          v320[0] = 0;
          v320[1] = 0;
          atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
          long long v246 = v139;
        }
        else
        {
          long long v246 = 0;
          int v245 = *((_DWORD *)this + 11);
          v320[0] = 0;
          v320[1] = 0;
        }
        std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.58366008e190);
        long long v247 = (unsigned int *)cf[0];
        unint64_t v248 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>();
        if (v246) {
          atomic_fetch_add_explicit(&v246->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v325 = 0;
        uint64_t v249 = operator new(0x28uLL);
        *uint64_t v249 = &unk_1F1475FC0;
        v249[1] = v244;
        v249[2] = v246;
        if (v246) {
          atomic_fetch_add_explicit(&v246->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *((_DWORD *)v249 + 6) = v245;
        *(void *)((char *)v249 + 28) = 0x676C6F6270667461;
        *((_DWORD *)v249 + 9) = 0;
        v325 = v249;
        memset(buf, 0, 40);
        std::__function::__value_func<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
        *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>::dispatch;
        std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v247, v248, (AMCP *)buf);
        if (*(void *)&buf[32]) {
          (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
        }
        std::__function::__value_func<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::~__value_func[abi:ne180100](&v323);
        if (v246) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v246);
        }
        AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>((uint64_t)v247);
        v250 = (std::__shared_weak_count *)cf[1];
        v320[0] = v247;
        v320[1] = cf[1];
        if (v246) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v246);
        }
        if (v139)
        {
          atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
          unint64_t v251 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
          atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        else
        {
          unint64_t v251 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
        }
        v325 = 0;
        v252 = operator new(0x28uLL);
        void *v252 = &unk_1F1476040;
        v252[1] = v244;
        v252[2] = v139;
        if (v139) {
          atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *((_DWORD *)v252 + 6) = v245;
        *(void *)((char *)v252 + 28) = 0x676C6F6270667461;
        *((_DWORD *)v252 + 9) = 0;
        v325 = v252;
        memset(buf, 0, 40);
        std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
        *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
        std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v247, v251, (AMCP *)buf);
        if (*(void *)&buf[32]) {
          (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
        }
        std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v323);
        if (v139)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v139);
          std::__shared_weak_count::__release_shared[abi:ne180100](v139);
        }
        goto LABEL_679;
      }
    }
    else
    {
      long long v319 = (unint64_t)v303;
      if (!v237) {
        goto LABEL_538;
      }
    }
    atomic_fetch_add_explicit(&v237->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_538;
  }
  AMCP::ASP::PlugIn_Object::populate_clock_core((uint64_t)this, v3, (uint64_t)__p);
  std::string v286 = (long long *)((char *)this + 24);
  uint64_t v32 = *((void *)this + 3);
  int16x8_t v31 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v33 = 0;
  int v34 = *((_DWORD *)this + 11);
  uint64_t v35 = 0x676C6F6273616674;
  char v36 = 1;
  do
  {
    char v37 = v36;
    LODWORD(v30) = AMCP::Property_Traits<1935763060u>::k_valid_scopes[v33];
    v320[0] = 0;
    v320[1] = 0;
    if (v36) {
      uint64_t v38 = 0x696E707473616674;
    }
    else {
      uint64_t v38 = v35;
    }
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(v319) = 1935763060;
    *(void *)((char *)&v319 + 4) = v30;
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, *(double *)&v319);
    CFTypeRef v39 = cf[0];
    unint64_t v40 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v325 = 0;
    mach_port_t v41 = operator new(0x28uLL);
    *mach_port_t v41 = &unk_1F1475740;
    v41[1] = v32;
    v41[2] = v31;
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v41 + 6) = v34;
    *(void *)((char *)v41 + 28) = v38;
    *((_DWORD *)v41 + 9) = 0;
    v325 = v41;
    memset(buf, 0, 40);
    std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v39, v40, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](&v323);
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>((uint64_t)v39);
    *(_OWORD *)v320 = *(_OWORD *)cf;
    if (v31)
    {
      CFTypeRef v288 = cf[0];
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      CFTypeRef v42 = v288;
      unint64_t v43 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      CFTypeRef v42 = cf[0];
      unint64_t v43 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    }
    v325 = 0;
    int v44 = operator new(0x28uLL);
    *int v44 = &unk_1F14757C0;
    v44[1] = v32;
    v44[2] = v31;
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v44 + 6) = v34;
    *(void *)((char *)v44 + 28) = v38;
    *((_DWORD *)v44 + 9) = 0;
    v325 = v44;
    memset(buf, 0, 40);
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v42, v43, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v323);
    if (v31)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    if (v320[0]) {
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v320[0] + 10, v320);
    }
    if (v320[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v320[1]);
    }
    char v36 = 0;
    uint64_t v35 = 0x6F75747073616674;
    uint64_t v33 = 1;
  }
  while ((v37 & 1) != 0);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  uint64_t v45 = *((void *)this + 3);
  int v46 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v46) {
    atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v47 = *((_DWORD *)this + 11);
  uint64_t v48 = *((unsigned int *)this + 15);
  mach_port_t v49 = (std::__shared_weak_count *)*((void *)this + 2);
  *(void *)&long long v319 = *((void *)this + 1);
  *((void *)&v319 + 1) = v49;
  if (v49)
  {
    atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
    AMCP::ASP::make_channel_layout_property(0x696E7074u, v45, (uint64_t)v46, v47, v48, &v319, (uint64_t)__p);
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  else
  {
    AMCP::ASP::make_channel_layout_property(0x696E7074u, v45, (uint64_t)v46, v47, v48, &v319, (uint64_t)__p);
  }
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  uint64_t v150 = *((void *)this + 3);
  std::locale v151 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v151) {
    atomic_fetch_add_explicit(&v151->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v152 = *((_DWORD *)this + 11);
  uint64_t v153 = *((unsigned int *)this + 15);
  std::locale v154 = (std::__shared_weak_count *)*((void *)this + 2);
  *(void *)&long long v315 = *((void *)this + 1);
  *((void *)&v315 + 1) = v154;
  if (v154)
  {
    atomic_fetch_add_explicit(&v154->__shared_owners_, 1uLL, memory_order_relaxed);
    AMCP::ASP::make_channel_layout_property(0x6F757470u, v150, (uint64_t)v151, v152, v153, &v315, (uint64_t)__p);
    std::__shared_weak_count::__release_shared[abi:ne180100](v154);
    if (!v151) {
      goto LABEL_338;
    }
    goto LABEL_337;
  }
  AMCP::ASP::make_channel_layout_property(0x6F757470u, v150, (uint64_t)v151, v152, v153, &v315, (uint64_t)__p);
  if (v151) {
LABEL_337:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v151);
LABEL_338:
  uint64_t v155 = *((void *)this + 3);
  std::locale v156 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v156)
  {
    atomic_fetch_add_explicit(&v156->__shared_owners_, 1uLL, memory_order_relaxed);
    int v157 = *((_DWORD *)this + 11);
    int16x8_t v323 = 0uLL;
    *(_DWORD *)std::string buf = 1768845428;
    *(void *)&uint8_t buf[8] = v155;
    *(void *)&buf[16] = v156;
    atomic_fetch_add_explicit(&v156->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    int v157 = *((_DWORD *)this + 11);
    int16x8_t v323 = 0uLL;
    *(_DWORD *)std::string buf = 1768845428;
    *(void *)&uint8_t buf[8] = v155;
    *(void *)&buf[16] = 0;
  }
  *(_DWORD *)&unsigned char buf[24] = v157;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>((uint64_t *)cf, 0, (int *)buf, 7.28117486e199);
  std::locale v158 = (unsigned int *)cf[0];
  int16x8_t v323 = *(int16x8_t *)cf;
  long long v296 = *(_OWORD *)cf;
  if (*(void *)&buf[16])
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[16]);
    std::locale v158 = (unsigned int *)v296;
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, v158 + 10, &v323);
  if (*((void *)&v296 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v296 + 1));
  }
  if (v156) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v156);
  }
  uint64_t v159 = *((void *)this + 3);
  int v160 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v160)
  {
    atomic_fetch_add_explicit(&v160->__shared_owners_, 1uLL, memory_order_relaxed);
    int v161 = *((_DWORD *)this + 11);
    int16x8_t v323 = 0uLL;
    *(_DWORD *)std::string buf = 1869968496;
    *(void *)&uint8_t buf[8] = v159;
    *(void *)&buf[16] = v160;
    atomic_fetch_add_explicit(&v160->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    int v161 = *((_DWORD *)this + 11);
    int16x8_t v323 = 0uLL;
    *(_DWORD *)std::string buf = 1869968496;
    *(void *)&uint8_t buf[8] = v159;
    *(void *)&buf[16] = 0;
  }
  *(_DWORD *)&unsigned char buf[24] = v161;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>((uint64_t *)cf, 0, (int *)buf, 8.13208672e228);
  uint64_t v162 = (unsigned int *)cf[0];
  int16x8_t v323 = *(int16x8_t *)cf;
  long long v297 = *(_OWORD *)cf;
  if (*(void *)&buf[16])
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[16]);
    uint64_t v162 = (unsigned int *)v297;
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, v162 + 10, &v323);
  if (*((void *)&v297 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v297 + 1));
  }
  if (v160) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v160);
  }
  long long v163 = *v286;
  long long v298 = *v286;
  uint64_t v164 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v164)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v163 + 1) + 8), 1uLL, memory_order_relaxed);
    int v165 = *((_DWORD *)this + 11);
    cf[0] = 0;
    cf[1] = 0;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v163 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  else
  {
    int v165 = *((_DWORD *)this + 11);
    cf[0] = 0;
    cf[1] = 0;
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v320, 0, 8.13208706e228);
  CFTypeRef v166 = v320[0];
  unint64_t v167 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  v325 = 0;
  uint64_t v168 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v168 = &unk_1F14739F0;
  *(_OWORD *)(v168 + 8) = v298;
  *((_DWORD *)v168 + 6) = v165;
  v325 = v168;
  memset(buf, 0, 40);
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
  *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v166, v167, (AMCP *)buf);
  if (*(void *)&buf[32]) {
    (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](&v323);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>((uint64_t)v166);
  *(_OWORD *)CFTypeRef cf = *(_OWORD *)v320;
  v308 = (std::__shared_weak_count *)v320[1];
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v320[0] + 10, cf);
  if (v308) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v308);
  }
  if (v164) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v164);
  }
  int v169 = *((_DWORD *)this + 15);
  *(void *)std::string buf = *(void *)(*((void *)this + 1) + 16);
  *(_DWORD *)&uint8_t buf[8] = v169;
  *(_DWORD *)&unsigned char buf[12] = 1634956402;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>(v323.i64, 0, (long long *)buf, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v323.i64[0] + 40), &v323);
  if (v323.i64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v323.i64[1]);
  }
  int v170 = *((_DWORD *)this + 15);
  *(void *)std::string buf = *(void *)(*((void *)this + 1) + 16);
  *(_DWORD *)&uint8_t buf[8] = v170;
  *(_OWORD *)&unsigned char buf[12] = xmmword_1BAFF9410;
  *(_OWORD *)&unsigned char buf[28] = xmmword_1BAFF9420;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>(v323.i64, 0, (uint64_t *)buf, 7.28117508e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v323.i64[0] + 40), &v323);
  if (v323.i64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v323.i64[1]);
  }
  int v171 = *((_DWORD *)this + 15);
  *(void *)std::string buf = *(void *)(*((void *)this + 1) + 16);
  *(_DWORD *)&uint8_t buf[8] = v171;
  *(_OWORD *)&unsigned char buf[12] = xmmword_1BAFF9410;
  *(_OWORD *)&unsigned char buf[28] = xmmword_1BAFF9430;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>(v323.i64, 0, (uint64_t *)buf, 8.13208706e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v323.i64[0] + 40), &v323);
  if (v323.i64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v323.i64[1]);
  }
  uint64_t v172 = *((void *)this + 3);
  std::logic_error v173 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v173)
  {
    atomic_fetch_add_explicit(&v173->__shared_owners_, 1uLL, memory_order_relaxed);
    int v174 = *((_DWORD *)this + 11);
    v320[0] = 0;
    v320[1] = 0;
    atomic_fetch_add_explicit(&v173->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v175 = v173;
  }
  else
  {
    uint64_t v175 = 0;
    int v174 = *((_DWORD *)this + 11);
    v320[0] = 0;
    v320[1] = 0;
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.58366007e190);
  float v176 = (unsigned int *)cf[0];
  unint64_t v177 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::DictionaryRef ()(void)>>();
  if (v175) {
    atomic_fetch_add_explicit(&v175->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v325 = 0;
  uint64_t v178 = operator new(0x28uLL);
  *uint64_t v178 = &unk_1F1475840;
  v178[1] = v172;
  v178[2] = v175;
  if (v175) {
    atomic_fetch_add_explicit(&v175->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v178 + 6) = v174;
  *(void *)((char *)v178 + 28) = 0x676C6F6264646573;
  *((_DWORD *)v178 + 9) = 0;
  v325 = v178;
  memset(buf, 0, 40);
  std::__function::__value_func<applesauce::CF::DictionaryRef ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
  *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::DictionaryRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v176, v177, (AMCP *)buf);
  if (*(void *)&buf[32]) {
    (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
  }
  std::__function::__value_func<applesauce::CF::DictionaryRef ()(void)>::~__value_func[abi:ne180100](&v323);
  if (v175) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v175);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>((uint64_t)v176);
  int v179 = (std::__shared_weak_count *)cf[1];
  v320[0] = v176;
  v320[1] = cf[1];
  if (v175) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v175);
  }
  if (v173)
  {
    atomic_fetch_add_explicit(&v173->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v180 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    atomic_fetch_add_explicit(&v173->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v180 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  v325 = 0;
  uint64_t v181 = operator new(0x28uLL);
  void *v181 = &unk_1F14758C0;
  v181[1] = v172;
  v181[2] = v173;
  if (v173) {
    atomic_fetch_add_explicit(&v173->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v181 + 6) = v174;
  *(void *)((char *)v181 + 28) = 0x676C6F6264646573;
  *((_DWORD *)v181 + 9) = 0;
  v325 = v181;
  memset(buf, 0, 40);
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
  *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v176, v180, (AMCP *)buf);
  if (*(void *)&buf[32]) {
    (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v323);
  if (v173)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v173);
    std::__shared_weak_count::__release_shared[abi:ne180100](v173);
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, v176 + 10, v320);
  if (v179) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v179);
  }
  if (v173) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v173);
  }
  *(void *)&v314.signed int mSelector = 0x676C6F6263646573;
  v314.uint64_t mElement = 0;
  if (AMCP::ASP::PlugIn::ObjectHasProperty(*((AMCP::ASP::PlugIn **)this + 3), *((unsigned int *)this + 11), 0, &v314))
  {
    uint64_t v182 = *((void *)this + 3);
    uint64_t v139 = (std::__shared_weak_count *)*((void *)this + 4);
    if (v139)
    {
      atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
      int v183 = *((_DWORD *)this + 11);
      uint64_t v316 = 0x676C6F6263646573;
      int v317 = 0;
      v320[0] = 0;
      v320[1] = 0;
      atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
      char v184 = v139;
    }
    else
    {
      char v184 = 0;
      int v183 = *((_DWORD *)this + 11);
      uint64_t v316 = 0x676C6F6263646573;
      int v317 = 0;
      v320[0] = 0;
      v320[1] = 0;
    }
    strcpy((char *)v318, "sedcbolg");
    BYTE1(v318[1]) = 0;
    WORD1(v318[1]) = 0;
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, v318[0]);
    CFTypeRef v253 = cf[0];
    unint64_t v254 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::DictionaryRef ()(void)>>();
    if (v139) {
      atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v325 = 0;
    v255 = operator new(0x28uLL);
    void *v255 = &unk_1F1475940;
    v255[1] = v182;
    v255[2] = v139;
    if (v139) {
      atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v255 + 6) = v183;
    *(void *)((char *)v255 + 28) = 0x676C6F6263646573;
    *((_DWORD *)v255 + 9) = 0;
    v325 = v255;
    memset(buf, 0, 40);
    std::__function::__value_func<applesauce::CF::DictionaryRef ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::DictionaryRef ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v253, v254, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<applesauce::CF::DictionaryRef ()(void)>::~__value_func[abi:ne180100](&v323);
    if (v139) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v139);
    }
    AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>((uint64_t)v253);
    unint64_t v256 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::DictionaryRef const&)>>();
    if (v184) {
      atomic_fetch_add_explicit(&v184->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v325 = 0;
    long long v257 = operator new(0x28uLL);
    *long long v257 = &unk_1F14759C0;
    v257[1] = v182;
    v257[2] = v184;
    if (v184) {
      atomic_fetch_add_explicit(&v184->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v257 + 6) = v183;
    *(void *)((char *)v257 + 28) = 0x676C6F6263646573;
    *((_DWORD *)v257 + 9) = 0;
    v325 = v257;
    memset(buf, 0, 40);
    std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::DictionaryRef const&)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v253, v256, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100](&v323);
    if (v184) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v184);
    }
    AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>((uint64_t)v253);
    CFTypeRef v306 = cf[0];
    *(_OWORD *)v320 = *(_OWORD *)cf;
    if (v184) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v184);
    }
    if (v139)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v139);
      atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v258 = (uint64_t)v306;
      unint64_t v259 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
      atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v258 = (uint64_t)v306;
      unint64_t v259 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
    }
    v325 = 0;
    long long v260 = operator new(0x28uLL);
    *long long v260 = &unk_1F1475A40;
    v260[1] = v182;
    v260[2] = v139;
    if (v139) {
      atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v260 + 6) = v183;
    *(void *)((char *)v260 + 28) = 0x676C6F6263646573;
    *((_DWORD *)v260 + 9) = 0;
    v325 = v260;
    memset(buf, 0, 40);
    std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v258, v259, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::~__value_func[abi:ne180100](&v323);
    if (v139)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v139);
      std::__shared_weak_count::__release_shared[abi:ne180100](v139);
      atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v261 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      unint64_t v261 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    }
    v325 = 0;
    std::logic_error v262 = operator new(0x28uLL);
    *std::logic_error v262 = &unk_1F1475AC0;
    v262[1] = v182;
    v262[2] = v139;
    if (v139) {
      atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v262 + 6) = v183;
    *(void *)((char *)v262 + 28) = 0x676C6F6263646573;
    *((_DWORD *)v262 + 9) = 0;
    v325 = v262;
    memset(buf, 0, 40);
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v323);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v258, v261, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v323);
    if (v139)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v139);
      std::__shared_weak_count::__release_shared[abi:ne180100](v139);
    }
    if (v320[0]) {
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)v320[0] + 10, v320);
    }
    uint64_t v145 = (std::__shared_weak_count *)v320[1];
    if (!v320[1]) {
      goto LABEL_682;
    }
    goto LABEL_681;
  }
LABEL_685:
  AMCP::Core::Broker::make_core(&v309, *(std::__shared_mutex_base **)(*((void *)this + 1) + 16), (uint64_t)__p, *((_DWORD *)this + 15));
  if (v310) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v310);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((void *)v312[0]);
  uint64_t v280 = __p[0];
  __p[0] = 0;
  if (v280) {
    operator delete(v280);
  }
}

void sub_1BADCB668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::ASP::calculate_max_element(AMCP::ASP::PlugIn **a1, uint64_t a2, unsigned int a3)
{
  uint64_t result = AMCP::is_base_of((AMCP *)0x61646576, a3);
  if (result)
  {
    unsigned int max_number_channels_for_scope = AMCP::ASP::get_max_number_channels_for_scope(1768845428, a1, a2);
    unsigned int v7 = AMCP::ASP::get_max_number_channels_for_scope(1869968496, a1, a2);
    CFUUIDRef v8 = *a1;
    if (max_number_channels_for_scope <= v7) {
      unsigned int max_number_channels_for_scope = v7;
    }
    *(void *)&v17.signed int mSelector = 0x676C6F626374726CLL;
    v17.uint64_t mElement = 0;
    AMCP::ASP::PlugIn::object_get_property_data<unsigned int [],unsigned int>((uint64_t)&v18, v8, a2, &v17);
    unsigned int v9 = 0;
    int v10 = __p;
    if (!v18)
    {
      uint64_t v11 = v20;
      if (__p == v20)
      {
        unsigned int v9 = 0;
        if (!__p)
        {
LABEL_14:
          if (max_number_channels_for_scope <= v9) {
            return v9;
          }
          else {
            return max_number_channels_for_scope;
          }
        }
LABEL_13:
        operator delete(v10);
        goto LABEL_14;
      }
      unsigned int v9 = 0;
      int v12 = (unsigned int *)__p;
      do
      {
        int v13 = *a1;
        unsigned int v14 = *v12++;
        *(void *)&v17.signed int mSelector = 0x676C6F6263656C6DLL;
        v17.uint64_t mElement = 0;
        unsigned int v21 = 0;
        PropertyCFDataRef Data = AMCP::ASP::PlugIn::ObjectGetPropertyData(v13, v14, 0, &v17, 0, 0, 4, &v21);
        unsigned int v16 = v21;
        if (v9 > v21) {
          unsigned int v16 = v9;
        }
        if (!PropertyData) {
          unsigned int v9 = v16;
        }
      }
      while (v12 != v11);
    }
    if (!v10) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  return result;
}

void AMCP::ASP::PlugIn_Object::populate_volume_control_core(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  AMCP::ASP::PlugIn_Object::populate_control_core(a1, a2, a3);
  uint64_t v6 = *(void *)(a1 + 24);
  BOOL v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    int v7 = *(_DWORD *)(a1 + 44);
    int16x8_t v56 = (int *)(a1 + 44);
    long long v57 = 0uLL;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    CFUUIDRef v8 = v5;
  }
  else
  {
    CFUUIDRef v8 = 0;
    int v7 = *(_DWORD *)(a1 + 44);
    int16x8_t v56 = (int *)(a1 + 44);
    long long v57 = 0uLL;
  }
  strcpy((char *)v59, "vsclbolg");
  BYTE1(v59[1]) = 0;
  WORD1(v59[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v58, 0, v59[0]);
  uint64_t v9 = v58;
  unint64_t v10 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v64 = 0;
  uint64_t v11 = operator new(0x28uLL);
  *uint64_t v11 = &unk_1F1476640;
  v11[1] = v6;
  void v11[2] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v11 + 6) = v7;
  *(void *)((char *)v11 + 28) = 0x676C6F626C637376;
  *((_DWORD *)v11 + 9) = 0;
  int v64 = v11;
  long long v60 = 0u;
  long long v61 = 0u;
  uint64_t v62 = 0;
  std::__function::__value_func<float ()(void)>::__value_func[abi:ne180100]((uint64_t)&v60, (uint64_t)v63);
  uint64_t v62 = AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v9, v10, (AMCP *)&v60);
  if (v62) {
    v62(0, (uint64_t)&v60, 0, 0);
  }
  std::__function::__value_func<float ()(void)>::~__value_func[abi:ne180100](v63);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(v9);
  unint64_t v12 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v64 = 0;
  int v13 = operator new(0x28uLL);
  void *v13 = &unk_1F14766C0;
  v13[1] = v6;
  v13[2] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v13 + 6) = v7;
  *(void *)((char *)v13 + 28) = 0x676C6F626C637376;
  *((_DWORD *)v13 + 9) = 0;
  int v64 = v13;
  long long v60 = 0u;
  long long v61 = 0u;
  uint64_t v62 = 0;
  std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)&v60, (uint64_t)v63);
  uint64_t v62 = AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v9, v12, (AMCP *)&v60);
  if (v62) {
    v62(0, (uint64_t)&v60, 0, 0);
  }
  std::__function::__value_func<void ()(float const&)>::~__value_func[abi:ne180100](v63);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(v9);
  uint64_t v53 = v58;
  long long v57 = v58;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v14 = v53;
    unint64_t Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v14 = v53;
    unint64_t Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
  }
  int v64 = 0;
  unsigned int v16 = operator new(0x28uLL);
  void *v16 = &unk_1F1476740;
  v16[1] = v6;
  void v16[2] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v16 + 6) = v7;
  *(void *)((char *)v16 + 28) = 0x676C6F626C637376;
  *((_DWORD *)v16 + 9) = 0;
  int v64 = v16;
  long long v60 = 0u;
  long long v61 = 0u;
  uint64_t v62 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)&v60, (uint64_t)v63);
  uint64_t v62 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v14, Is_Property_Settable, (AMCP *)&v60);
  if (v62) {
    v62(0, (uint64_t)&v60, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::~__value_func[abi:ne180100](v63);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  int v64 = 0;
  int v18 = operator new(0x28uLL);
  *int v18 = &unk_1F14767C0;
  v18[1] = v6;
  uint64_t v18[2] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v18 + 6) = v7;
  *(void *)((char *)v18 + 28) = 0x676C6F626C637376;
  *((_DWORD *)v18 + 9) = 0;
  int v64 = v18;
  long long v60 = 0u;
  long long v61 = 0u;
  uint64_t v62 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v60, (uint64_t)v63);
  uint64_t v62 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v14, Has_Property, (AMCP *)&v60);
  if (v62) {
    v62(0, (uint64_t)&v60, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](v63);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if ((void)v57) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v57 + 40), &v57);
  }
  if (*((void *)&v57 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v57 + 1));
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v20 = *(void *)(a1 + 24);
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 32);
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    int v21 = *v56;
    long long v57 = 0uLL;
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    int v22 = v19;
  }
  else
  {
    int v22 = 0;
    int v21 = *v56;
    long long v57 = 0uLL;
  }
  strcpy((char *)v59, "vdclbolg");
  BYTE1(v59[1]) = 0;
  WORD1(v59[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v58, 0, v59[0]);
  uint64_t v23 = v58;
  unint64_t v24 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v64 = 0;
  unsigned int v25 = operator new(0x28uLL);
  *unsigned int v25 = &unk_1F1476840;
  v25[1] = v20;
  _OWORD v25[2] = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v25 + 6) = v21;
  *(void *)((char *)v25 + 28) = 0x676C6F626C636476;
  *((_DWORD *)v25 + 9) = 0;
  int v64 = v25;
  long long v60 = 0u;
  long long v61 = 0u;
  uint64_t v62 = 0;
  std::__function::__value_func<float ()(void)>::__value_func[abi:ne180100]((uint64_t)&v60, (uint64_t)v63);
  uint64_t v62 = AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v23, v24, (AMCP *)&v60);
  if (v62) {
    v62(0, (uint64_t)&v60, 0, 0);
  }
  std::__function::__value_func<float ()(void)>::~__value_func[abi:ne180100](v63);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(v23);
  unint64_t v26 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v64 = 0;
  int8x8_t v27 = operator new(0x28uLL);
  void *v27 = &unk_1F14768C0;
  v27[1] = v20;
  void v27[2] = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v27 + 6) = v21;
  *(void *)((char *)v27 + 28) = 0x676C6F626C636476;
  *((_DWORD *)v27 + 9) = 0;
  int v64 = v27;
  long long v60 = 0u;
  long long v61 = 0u;
  uint64_t v62 = 0;
  std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)&v60, (uint64_t)v63);
  uint64_t v62 = AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v23, v26, (AMCP *)&v60);
  if (v62) {
    v62(0, (uint64_t)&v60, 0, 0);
  }
  std::__function::__value_func<void ()(float const&)>::~__value_func[abi:ne180100](v63);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(v23);
  uint64_t v54 = v58;
  long long v57 = v58;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v19)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v28 = v54;
    unint64_t v29 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v28 = v54;
    unint64_t v29 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
  }
  int v64 = 0;
  uint64_t v30 = operator new(0x28uLL);
  *uint64_t v30 = &unk_1F1476940;
  v30[1] = v20;
  v30[2] = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v30 + 6) = v21;
  *(void *)((char *)v30 + 28) = 0x676C6F626C636476;
  *((_DWORD *)v30 + 9) = 0;
  int v64 = v30;
  long long v60 = 0u;
  long long v61 = 0u;
  uint64_t v62 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)&v60, (uint64_t)v63);
  uint64_t v62 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v28, v29, (AMCP *)&v60);
  if (v62) {
    v62(0, (uint64_t)&v60, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::~__value_func[abi:ne180100](v63);
  if (v19)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v31 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v31 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  int v64 = 0;
  uint64_t v32 = operator new(0x28uLL);
  *uint64_t v32 = &unk_1F14769C0;
  v32[1] = v20;
  void v32[2] = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v32 + 6) = v21;
  *(void *)((char *)v32 + 28) = 0x676C6F626C636476;
  *((_DWORD *)v32 + 9) = 0;
  int v64 = v32;
  long long v60 = 0u;
  long long v61 = 0u;
  uint64_t v62 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v60, (uint64_t)v63);
  uint64_t v62 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v28, v31, (AMCP *)&v60);
  if (v62) {
    v62(0, (uint64_t)&v60, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](v63);
  if (v19)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if ((void)v57) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v57 + 40), &v57);
  }
  if (*((void *)&v57 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v57 + 1));
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t v34 = *(void *)(a1 + 24);
  uint64_t v33 = *(std::__shared_weak_count **)(a1 + 32);
  if (v33)
  {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    int v35 = *v56;
    long long v57 = 0uLL;
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    char v36 = v33;
  }
  else
  {
    char v36 = 0;
    int v35 = *v56;
    long long v57 = 0uLL;
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v58, 0, 1.5836601e190);
  uint64_t v37 = v58;
  unint64_t v38 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRange ()(void)>>();
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v64 = 0;
  CFTypeRef v39 = operator new(0x28uLL);
  void *v39 = &unk_1F1476A40;
  v39[1] = v34;
  double v39[2] = v36;
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v39 + 6) = v35;
  *(void *)((char *)v39 + 28) = 0x676C6F626C636472;
  *((_DWORD *)v39 + 9) = 0;
  int v64 = v39;
  long long v60 = 0u;
  long long v61 = 0u;
  uint64_t v62 = 0;
  std::__function::__value_func<CA::ValueRange ()(void)>::__value_func[abi:ne180100]((uint64_t)&v60, (uint64_t)v63);
  uint64_t v62 = AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRange ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v37, v38, (AMCP *)&v60);
  if (v62) {
    v62(0, (uint64_t)&v60, 0, 0);
  }
  std::__function::__value_func<CA::ValueRange ()(void)>::~__value_func[abi:ne180100](v63);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(v37);
  unint64_t v40 = (std::__shared_weak_count *)*((void *)&v58 + 1);
  *(void *)&long long v57 = v37;
  *((void *)&v57 + 1) = *((void *)&v58 + 1);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  if (v33)
  {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v55 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v55 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  int v64 = 0;
  mach_port_t v41 = operator new(0x28uLL);
  *mach_port_t v41 = &unk_1F1476AC0;
  v41[1] = v34;
  v41[2] = v33;
  if (v33) {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v41 + 6) = v35;
  *(void *)((char *)v41 + 28) = 0x676C6F626C636472;
  *((_DWORD *)v41 + 9) = 0;
  int v64 = v41;
  long long v60 = 0u;
  long long v61 = 0u;
  uint64_t v62 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v60, (uint64_t)v63);
  uint64_t v62 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v37, v55, (AMCP *)&v60);
  if (v62) {
    v62(0, (uint64_t)&v60, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](v63);
  if (v33)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v37 + 40), &v57);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v58, 0, 1.5836601e190);
  uint64_t v42 = v58;
  uint64_t v44 = *(void *)(a1 + 24);
  uint64_t v43 = *(void *)(a1 + 32);
  if (v43) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 8), 1uLL, memory_order_relaxed);
  }
  int v45 = *v56;
  unint64_t v46 = AMCP::Implementation::get_type_marker<std::function<float ()(float)>>();
  int v64 = 0;
  unsigned int v47 = operator new(0x20uLL);
  *unsigned int v47 = &unk_1F1476B40;
  v47[1] = v44;
  uint64_t v47[2] = v43;
  *((_DWORD *)v47 + 6) = v45;
  int v64 = v47;
  long long v60 = 0u;
  long long v61 = 0u;
  uint64_t v62 = 0;
  std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)&v60, (uint64_t)v63);
  uint64_t v62 = AMCP::Implementation::In_Place_Storage<std::function<float ()(float)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v42, v46, (AMCP *)&v60);
  if (v62) {
    v62(0, (uint64_t)&v60, 0, 0);
  }
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v63);
  uint64_t v49 = *(void *)(a1 + 24);
  uint64_t v48 = *(void *)(a1 + 32);
  if (v48) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v48 + 8), 1uLL, memory_order_relaxed);
  }
  int v50 = *v56;
  unint64_t v51 = AMCP::Implementation::get_type_marker<std::function<float ()(float,BOOL)>>();
  int v64 = 0;
  int v52 = operator new(0x20uLL);
  *int v52 = &unk_1F1476BC0;
  v52[1] = v49;
  v52[2] = v48;
  *((_DWORD *)v52 + 6) = v50;
  int v64 = v52;
  long long v60 = 0u;
  long long v61 = 0u;
  uint64_t v62 = 0;
  std::__function::__value_func<float ()(float,BOOL)>::__value_func[abi:ne180100]((uint64_t)&v60, (uint64_t)v63);
  uint64_t v62 = AMCP::Implementation::In_Place_Storage<std::function<float ()(float,BOOL)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v42, v51, (AMCP *)&v60);
  if (v62) {
    v62(0, (uint64_t)&v60, 0, 0);
  }
  std::__function::__value_func<float ()(float,BOOL)>::~__value_func[abi:ne180100](v63);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v42 + 40), &v58);
  if (*((void *)&v58 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v58 + 1));
  }
}

void sub_1BADCC820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMCP::ASP::PlugIn_Object::populate_BOOLean_control_core(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  AMCP::ASP::PlugIn_Object::populate_control_core(a1, a2, a3);
  uint64_t v6 = *(void *)(a1 + 24);
  BOOL v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    int v7 = *(_DWORD *)(a1 + 44);
    long long v20 = 0uLL;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    CFUUIDRef v8 = v5;
  }
  else
  {
    CFUUIDRef v8 = 0;
    int v7 = *(_DWORD *)(a1 + 44);
    long long v20 = 0uLL;
  }
  strcpy((char *)v22, "lvcbbolg");
  BYTE1(v22[1]) = 0;
  WORD1(v22[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v21, 0, v22[0]);
  uint64_t v9 = v21;
  unint64_t v10 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int8x8_t v27 = 0;
  uint64_t v11 = operator new(0x28uLL);
  *uint64_t v11 = &unk_1F1476C40;
  v11[1] = v6;
  void v11[2] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v11 + 6) = v7;
  *(void *)((char *)v11 + 28) = 0x676C6F626263766CLL;
  *((_DWORD *)v11 + 9) = 0;
  int8x8_t v27 = v11;
  long long v23 = 0u;
  long long v24 = 0u;
  unsigned int v25 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v23, (uint64_t)v26);
  unsigned int v25 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v9, v10, (AMCP *)&v23);
  if (v25) {
    v25(0, (uint64_t)&v23, 0, 0);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v26);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v9);
  unint64_t v12 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int8x8_t v27 = 0;
  int v13 = operator new(0x28uLL);
  void *v13 = &unk_1F1476CC0;
  v13[1] = v6;
  v13[2] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v13 + 6) = v7;
  *(void *)((char *)v13 + 28) = 0x676C6F626263766CLL;
  *((_DWORD *)v13 + 9) = 0;
  int8x8_t v27 = v13;
  long long v23 = 0u;
  long long v24 = 0u;
  unsigned int v25 = 0;
  std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)&v23, (uint64_t)v26);
  unsigned int v25 = AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v9, v12, (AMCP *)&v23);
  if (v25) {
    v25(0, (uint64_t)&v23, 0, 0);
  }
  std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:ne180100](v26);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(v9);
  uint64_t v19 = v21;
  long long v20 = v21;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v14 = v19;
    unint64_t Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v14 = v19;
    unint64_t Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
  }
  int8x8_t v27 = 0;
  unsigned int v16 = operator new(0x28uLL);
  void *v16 = &unk_1F1476D40;
  v16[1] = v6;
  void v16[2] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v16 + 6) = v7;
  *(void *)((char *)v16 + 28) = 0x676C6F626263766CLL;
  *((_DWORD *)v16 + 9) = 0;
  int8x8_t v27 = v16;
  long long v23 = 0u;
  long long v24 = 0u;
  unsigned int v25 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)&v23, (uint64_t)v26);
  unsigned int v25 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v14, Is_Property_Settable, (AMCP *)&v23);
  if (v25) {
    v25(0, (uint64_t)&v23, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::~__value_func[abi:ne180100](v26);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  int8x8_t v27 = 0;
  int v18 = operator new(0x28uLL);
  *int v18 = &unk_1F1476DC0;
  v18[1] = v6;
  uint64_t v18[2] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v18 + 6) = v7;
  *(void *)((char *)v18 + 28) = 0x676C6F626263766CLL;
  *((_DWORD *)v18 + 9) = 0;
  int8x8_t v27 = v18;
  long long v23 = 0u;
  long long v24 = 0u;
  unsigned int v25 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v23, (uint64_t)v26);
  unsigned int v25 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v14, Has_Property, (AMCP *)&v23);
  if (v25) {
    v25(0, (uint64_t)&v23, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](v26);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if ((void)v20) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v20 + 40), &v20);
  }
  if (*((void *)&v20 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1BADCCDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMCP::ASP::PlugIn_Object::populate_selector_control_core(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  AMCP::ASP::PlugIn_Object::populate_control_core(a1, a2, a3);
  uint64_t v6 = *(void *)(a1 + 24);
  BOOL v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    int v7 = (int *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 44);
    long long v28 = 0uLL;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v9 = v5;
  }
  else
  {
    uint64_t v9 = 0;
    int v7 = (int *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 44);
    long long v28 = 0uLL;
  }
  strcpy((char *)v30, "iccsbolg");
  BYTE1(v30[1]) = 0;
  WORD1(v30[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v29, 0, v30[0]);
  uint64_t v10 = v29;
  unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v35 = 0;
  unint64_t v12 = operator new(0x28uLL);
  *unint64_t v12 = &unk_1F1476E40;
  v12[1] = v6;
  void v12[2] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v12 + 6) = v8;
  *(void *)((char *)v12 + 28) = 0x676C6F6273636369;
  *((_DWORD *)v12 + 9) = 0;
  int v35 = v12;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v33 = 0;
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)&v31, (uint64_t)v34);
  uint64_t v33 = AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v10, v11, (AMCP *)&v31);
  if (v33) {
    v33(0, (uint64_t)&v31, 0, 0);
  }
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::~__value_func[abi:ne180100](v34);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(v10);
  unint64_t v13 = AMCP::Implementation::get_type_marker<std::function<void ()(std::vector<unsigned int> const&)>>();
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v35 = 0;
  uint64_t v14 = operator new(0x28uLL);
  *uint64_t v14 = &unk_1F1476EC0;
  v14[1] = v6;
  void v14[2] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v14 + 6) = v8;
  *(void *)((char *)v14 + 28) = 0x676C6F6273636369;
  *((_DWORD *)v14 + 9) = 0;
  int v35 = v14;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v33 = 0;
  std::__function::__value_func<void ()(std::vector<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)&v31, (uint64_t)v34);
  uint64_t v33 = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::vector<unsigned int> const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v10, v13, (AMCP *)&v31);
  if (v33) {
    v33(0, (uint64_t)&v31, 0, 0);
  }
  std::__function::__value_func<void ()(std::vector<unsigned int> const&)>::~__value_func[abi:ne180100](v34);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(v10);
  uint64_t v27 = v29;
  long long v28 = v29;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v15 = v27;
    unint64_t Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v15 = v27;
    unint64_t Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
  }
  int v35 = 0;
  AudioObjectPropertyAddress v17 = operator new(0x28uLL);
  *AudioObjectPropertyAddress v17 = &unk_1F1476F40;
  v17[1] = v6;
  _OWORD v17[2] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v17 + 6) = v8;
  *(void *)((char *)v17 + 28) = 0x676C6F6273636369;
  *((_DWORD *)v17 + 9) = 0;
  int v35 = v17;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v33 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)&v31, (uint64_t)v34);
  uint64_t v33 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v15, Is_Property_Settable, (AMCP *)&v31);
  if (v33) {
    v33(0, (uint64_t)&v31, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::~__value_func[abi:ne180100](v34);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  int v35 = 0;
  uint64_t v19 = operator new(0x28uLL);
  *uint64_t v19 = &unk_1F1476FC0;
  v19[1] = v6;
  v19[2] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v19 + 6) = v8;
  *(void *)((char *)v19 + 28) = 0x676C6F6273636369;
  *((_DWORD *)v19 + 9) = 0;
  int v35 = v19;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v33 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v31, (uint64_t)v34);
  uint64_t v33 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v15, Has_Property, (AMCP *)&v31);
  if (v33) {
    v33(0, (uint64_t)&v31, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](v34);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if ((void)v28) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v28 + 40), &v28);
  }
  if (*((void *)&v28 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  LOBYTE(v34[0]) = 0;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)&v31, 0, (char *)v34, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v31 + 40), &v31);
  if (*((void *)&v31 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
  }
  uint64_t v21 = *(void *)(a1 + 24);
  long long v20 = *(std::__shared_weak_count **)(a1 + 32);
  if (v20)
  {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    int v22 = *v7;
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v23 = v20;
  }
  else
  {
    long long v23 = 0;
    int v22 = *v7;
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v29, 0, 1.58366012e190);
  uint64_t v24 = v29;
  unint64_t v25 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>();
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v35 = 0;
  unint64_t v26 = operator new(0x20uLL);
  *unint64_t v26 = &unk_1F1477040;
  v26[1] = v21;
  void v26[2] = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v26 + 6) = v22;
  int v35 = v26;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v33 = 0;
  std::__function::__value_func<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::__value_func[abi:ne180100]((uint64_t)&v31, (uint64_t)v34);
  uint64_t v33 = AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v24, v25, (AMCP *)&v31);
  if (v33) {
    v33(0, (uint64_t)&v31, 0, 0);
  }
  std::__function::__value_func<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>> ()(void)>::~__value_func[abi:ne180100](v34);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(v24);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v24 + 40), &v29);
  if (*((void *)&v29 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
}

void sub_1BADCD4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMCP::ASP::PlugIn_Object::populate_stereo_pan_control_core(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  AMCP::ASP::PlugIn_Object::populate_control_core(a1, a2, a3);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 32);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = (int *)(a1 + 44);
    int v7 = *(_DWORD *)(a1 + 44);
    long long v31 = 0uLL;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    int v8 = v4;
  }
  else
  {
    int v8 = 0;
    uint64_t v6 = (int *)(a1 + 44);
    int v7 = *(_DWORD *)(a1 + 44);
    long long v31 = 0uLL;
  }
  strcpy((char *)v33, "vcpsbolg");
  BYTE1(v33[1]) = 0;
  WORD1(v33[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v32, 0, v33[0]);
  uint64_t v9 = v32;
  unint64_t v10 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v38 = 0;
  unint64_t v11 = operator new(0x28uLL);
  *unint64_t v11 = &unk_1F14770C0;
  v11[1] = v5;
  void v11[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v11 + 6) = v7;
  *(void *)((char *)v11 + 28) = 0x676C6F6273706376;
  *((_DWORD *)v11 + 9) = 0;
  unint64_t v38 = v11;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v36 = 0;
  std::__function::__value_func<float ()(void)>::__value_func[abi:ne180100]((uint64_t)&v34, (uint64_t)v37);
  uint64_t v36 = AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v9, v10, (AMCP *)&v34);
  if (v36) {
    v36(0, (uint64_t)&v34, 0, 0);
  }
  std::__function::__value_func<float ()(void)>::~__value_func[abi:ne180100](v37);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(v9);
  unint64_t v12 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v38 = 0;
  unint64_t v13 = operator new(0x28uLL);
  void *v13 = &unk_1F1477140;
  v13[1] = v5;
  v13[2] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v13 + 6) = v7;
  *(void *)((char *)v13 + 28) = 0x676C6F6273706376;
  *((_DWORD *)v13 + 9) = 0;
  unint64_t v38 = v13;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v36 = 0;
  std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)&v34, (uint64_t)v37);
  uint64_t v36 = AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v9, v12, (AMCP *)&v34);
  if (v36) {
    v36(0, (uint64_t)&v34, 0, 0);
  }
  std::__function::__value_func<void ()(float const&)>::~__value_func[abi:ne180100](v37);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(v9);
  uint64_t v29 = v32;
  long long v31 = v32;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v14 = v29;
    unint64_t Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v14 = v29;
    unint64_t Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
  }
  unint64_t v38 = 0;
  unsigned int v16 = operator new(0x28uLL);
  void *v16 = &unk_1F14771C0;
  v16[1] = v5;
  void v16[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v16 + 6) = v7;
  *(void *)((char *)v16 + 28) = 0x676C6F6273706376;
  *((_DWORD *)v16 + 9) = 0;
  unint64_t v38 = v16;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v36 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)&v34, (uint64_t)v37);
  uint64_t v36 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v14, Is_Property_Settable, (AMCP *)&v34);
  if (v36) {
    v36(0, (uint64_t)&v34, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::~__value_func[abi:ne180100](v37);
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  unint64_t v38 = 0;
  int v18 = operator new(0x28uLL);
  *int v18 = &unk_1F1477240;
  v18[1] = v5;
  uint64_t v18[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v18 + 6) = v7;
  *(void *)((char *)v18 + 28) = 0x676C6F6273706376;
  *((_DWORD *)v18 + 9) = 0;
  unint64_t v38 = v18;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v36 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v34, (uint64_t)v37);
  uint64_t v36 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v14, Has_Property, (AMCP *)&v34);
  if (v36) {
    v36(0, (uint64_t)&v34, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](v37);
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if ((void)v31) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v31 + 40), &v31);
  }
  if (*((void *)&v31 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v20 = *(void *)(a1 + 24);
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 32);
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    int v21 = *v6;
    long long v31 = 0uLL;
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    int v22 = v19;
  }
  else
  {
    int v22 = 0;
    int v21 = *v6;
    long long v31 = 0uLL;
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v32, 0, 1.58366012e190);
  uint64_t v23 = v32;
  unint64_t v24 = AMCP::Implementation::get_type_marker<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>();
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v38 = 0;
  unint64_t v25 = operator new(0x28uLL);
  *unint64_t v25 = &unk_1F14772C0;
  v25[1] = v20;
  _OWORD v25[2] = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v25 + 6) = v21;
  *(void *)((char *)v25 + 28) = 0x676C6F6273706363;
  *((_DWORD *)v25 + 9) = 0;
  unint64_t v38 = v25;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v36 = 0;
  std::__function::__value_func<std::tuple<unsigned int,unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)&v34, (uint64_t)v37);
  uint64_t v36 = AMCP::Implementation::In_Place_Storage<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v23, v24, (AMCP *)&v34);
  if (v36) {
    v36(0, (uint64_t)&v34, 0, 0);
  }
  std::__function::__value_func<std::tuple<unsigned int,unsigned int> ()(void)>::~__value_func[abi:ne180100](v37);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(v23);
  unint64_t v26 = (std::__shared_weak_count *)*((void *)&v32 + 1);
  *(void *)&long long v31 = v23;
  *((void *)&v31 + 1) = *((void *)&v32 + 1);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v27 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v27 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  unint64_t v38 = 0;
  long long v28 = operator new(0x28uLL);
  *long long v28 = &unk_1F1477340;
  v28[1] = v20;
  void v28[2] = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v28 + 6) = v21;
  *(void *)((char *)v28 + 28) = 0x676C6F6273706363;
  *((_DWORD *)v28 + 9) = 0;
  unint64_t v38 = v28;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v36 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v34, (uint64_t)v37);
  uint64_t v36 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v23, v27, (AMCP *)&v34);
  if (v36) {
    v36(0, (uint64_t)&v34, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](v37);
  if (v19)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v23 + 40), &v31);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
}

void sub_1BADCDC4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMCP::ASP::PlugIn_Object::populate_control_core(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  AMCP::ASP::PlugIn_Object::populate_object_core(a1, a2, a3);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    int v7 = (int *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 44);
    long long v38 = 0uLL;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v9 = v5;
  }
  else
  {
    uint64_t v9 = 0;
    int v7 = (int *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 44);
    long long v38 = 0uLL;
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v39, 0, 1.58366007e190);
  uint64_t v10 = v39;
  unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v44 = 0;
  unint64_t v12 = operator new(0x28uLL);
  *unint64_t v12 = &unk_1F14760C0;
  v12[1] = v6;
  void v12[2] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v12 + 6) = v8;
  *(void *)((char *)v12 + 28) = 0x676C6F6263736370;
  *((_DWORD *)v12 + 9) = 0;
  uint64_t v44 = v12;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v42 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)&v40, (uint64_t)v43);
  uint64_t v42 = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v10, v11, (AMCP *)&v40);
  if (v42) {
    v42(0, (uint64_t)&v40, 0, 0);
  }
  std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](v43);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v10);
  uint64_t v13 = v39;
  long long v38 = v39;
  if (v9)
  {
    uint64_t v37 = v39;
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    uint64_t v13 = v37;
  }
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v14 = v13;
    unint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v14 = v13;
    unint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  uint64_t v44 = 0;
  unsigned int v16 = operator new(0x28uLL);
  void *v16 = &unk_1F1476140;
  v16[1] = v6;
  void v16[2] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v16 + 6) = v8;
  *(void *)((char *)v16 + 28) = 0x676C6F6263736370;
  *((_DWORD *)v16 + 9) = 0;
  uint64_t v44 = v16;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v42 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v40, (uint64_t)v43);
  uint64_t v42 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v14, Has_Property, (AMCP *)&v40);
  if (v42) {
    v42(0, (uint64_t)&v40, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](v43);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if ((void)v38) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v38 + 40), &v38);
  }
  if (*((void *)&v38 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v38 + 1));
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v18 = *(void *)(a1 + 24);
  AudioObjectPropertyAddress v17 = *(std::__shared_weak_count **)(a1 + 32);
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    int v19 = *v7;
    long long v38 = 0uLL;
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v20 = v17;
  }
  else
  {
    uint64_t v20 = 0;
    int v19 = *v7;
    long long v38 = 0uLL;
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v39, 0, 1.58366007e190);
  uint64_t v21 = v39;
  unint64_t v22 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v44 = 0;
  uint64_t v23 = operator new(0x28uLL);
  void *v23 = &unk_1F14761C0;
  v23[1] = v18;
  void v23[2] = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v23 + 6) = v19;
  *(void *)((char *)v23 + 28) = 0x676C6F6263656C6DLL;
  *((_DWORD *)v23 + 9) = 0;
  uint64_t v44 = v23;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v42 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)&v40, (uint64_t)v43);
  uint64_t v42 = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v21, v22, (AMCP *)&v40);
  if (v42) {
    v42(0, (uint64_t)&v40, 0, 0);
  }
  std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](v43);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v21);
  uint64_t v24 = v39;
  long long v38 = v39;
  if (v20)
  {
    uint64_t v36 = v39;
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    uint64_t v24 = v36;
  }
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v25 = v24;
    unint64_t v26 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v25 = v24;
    unint64_t v26 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  uint64_t v44 = 0;
  unint64_t v27 = operator new(0x28uLL);
  void *v27 = &unk_1F1476240;
  v27[1] = v18;
  void v27[2] = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v27 + 6) = v19;
  *(void *)((char *)v27 + 28) = 0x676C6F6263656C6DLL;
  *((_DWORD *)v27 + 9) = 0;
  uint64_t v44 = v27;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v42 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v40, (uint64_t)v43);
  uint64_t v42 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v25, v26, (AMCP *)&v40);
  if (v42) {
    v42(0, (uint64_t)&v40, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](v43);
  if (v17)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if ((void)v38) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v38 + 40), &v38);
  }
  if (*((void *)&v38 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v38 + 1));
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  unsigned int v28 = *(_DWORD *)(a1 + 68);
  if (AMCP::is_base_of((AMCP *)0x736C6472, v28))
  {
    int v29 = 1935962742;
  }
  else if (AMCP::is_base_of((AMCP *)0x6C65766C, v28))
  {
    int v29 = 1818456950;
  }
  else if (AMCP::is_base_of((AMCP *)0x746F676C, v28))
  {
    int v29 = 1650685548;
  }
  else if (AMCP::is_base_of((AMCP *)0x736C6374, v28))
  {
    int v29 = 1935893353;
  }
  else if (AMCP::is_base_of((AMCP *)0x7370616E, v28))
  {
    int v29 = 1936745334;
  }
  else
  {
    int v29 = 0;
  }
  uint64_t v31 = *(void *)(a1 + 24);
  uint64_t v30 = *(void *)(a1 + 32);
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
  int v32 = *v7;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v39, 0, 1.58366007e190);
  uint64_t v33 = v39;
  unint64_t v34 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  uint64_t v44 = 0;
  long long v35 = operator new(0x28uLL);
  *long long v35 = &unk_1F14762C0;
  v35[1] = v31;
  v35[2] = v30;
  *((_DWORD *)v35 + 6) = v32;
  *((_DWORD *)v35 + 7) = v29;
  v35[4] = 1735159650;
  uint64_t v44 = v35;
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v42 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v40, (uint64_t)v43);
  uint64_t v42 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v33, v34, (AMCP *)&v40);
  if (v42) {
    v42(0, (uint64_t)&v40, 0, 0);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v43);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v33);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v33 + 40), &v39);
  if (*((void *)&v39 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v39 + 1));
  }
}

void sub_1BADCE3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMCP::ASP::PlugIn_Object::populate_clock_core(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  AMCP::ASP::PlugIn_Object::populate_object_core(a1, a2, a3);
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 24);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 32);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(unsigned int *)(a1 + 44);
  strcpy(buf, " diubolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  if (AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, (const AudioObjectPropertyAddress *)buf))
  {
    strcpy(buf, " diubolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    v108.__vftable = 0;
    PropertyCFDataRef Data = AMCP::ASP::PlugIn::ObjectGetPropertyData(v5, v6, 0, (const AudioObjectPropertyAddress *)buf, 0, 0, 8, &v108);
    if (!PropertyData)
    {
      int v8 = v108.__vftable;
      if (v108.__vftable) {
        goto LABEL_10;
      }
    }
LABEL_203:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)PropertyData);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    CFTypeRef v91 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
    {
      uint64_t v92 = pthread_self();
      mach_port_t v93 = pthread_mach_thread_np(v92);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v93;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "ASP_Object.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 871;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "!device_uid.is_valid()";
      _os_log_error_impl(&dword_1BAA78000, v91, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s devices and clocks have to have UIDs", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v101);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v107, "devices and clocks have to have UIDs");
    std::runtime_error::runtime_error(&v108, &v107);
    CFTypeRef v110 = 0;
    uint64_t v111 = 0;
    uint64_t v112 = 0;
    int v113 = -1;
    v108.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    long long v109 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v108);
    *(void *)&buf[32] = "Core::Operation_Ptr AMCP::ASP::make_property(const Address &, const PlugIn_Ptr &, AudioObjectID)";
    uint64_t v115 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Object.cpp";
    int v116 = 871;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v103);
    *(void *)std::string v105 = &unk_1F148AA90;
    *(_OWORD *)&v105[8] = v103;
    uint64_t v106 = v104;
    long long v103 = 0uLL;
    uint64_t v104 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  strcpy(buf, "diucbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  PropertyCFDataRef Data = AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, (const AudioObjectPropertyAddress *)buf);
  if (!PropertyData) {
    goto LABEL_203;
  }
  strcpy(buf, "diucbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  v108.__vftable = 0;
  PropertyCFDataRef Data = AMCP::ASP::PlugIn::ObjectGetPropertyData(v5, v6, 0, (const AudioObjectPropertyAddress *)buf, 0, 0, 8, &v108);
  if (PropertyData) {
    goto LABEL_203;
  }
  int v8 = v108.__vftable;
  if (!v108.__vftable) {
    goto LABEL_203;
  }
LABEL_10:
  PropertyCFDataRef Data = (unint64_t)applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, v8);
  uint64_t v9 = *(const void **)buf;
  if (!*(void *)buf) {
    goto LABEL_203;
  }
  v108.__vftable = (std::runtime_error_vtbl *)0x676C6F6275696420;
  LODWORD(v108.__imp_.__imp_) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)PropertyData, (uint64_t)&v108, *(CFTypeRef *)buf);
  CFRelease(v9);
  if (*(void *)buf) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(void *)buf + 40), buf);
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v10 = *(void *)(a1 + 24);
  unint64_t v11 = *(std::__shared_weak_count **)(a1 + 32);
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    int v12 = *(_DWORD *)(a1 + 44);
    long long v103 = 0uLL;
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v13 = v11;
  }
  else
  {
    uint64_t v13 = 0;
    int v12 = *(_DWORD *)(a1 + 44);
    long long v103 = 0uLL;
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v105, 0, 1.5836601e190);
  uint64_t v14 = *(void *)v105;
  unint64_t v15 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFTypeRef v110 = 0;
  unsigned int v16 = operator new(0x28uLL);
  void *v16 = &unk_1F1474FF0;
  v16[1] = v10;
  void v16[2] = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v16 + 6) = v12;
  *(void *)((char *)v16 + 28) = 0x676C6F626D756964;
  *((_DWORD *)v16 + 9) = 0;
  CFTypeRef v110 = v16;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v108);
  *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v14, v15, (AMCP *)buf);
  if (*(void *)&buf[32]) {
    (*(void (**)(void, unsigned char *, void, void))&buf[32])(0, buf, 0, 0);
  }
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::~__value_func[abi:ne180100](&v108);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(v14);
  uint64_t v17 = *(void *)v105;
  long long v103 = *(_OWORD *)v105;
  if (v13)
  {
    uint64_t v96 = *(void *)v105;
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    uint64_t v17 = v96;
  }
  uint64_t v94 = a1;
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v18 = v17;
    unint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v18 = v17;
    unint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  CFTypeRef v110 = 0;
  uint64_t v20 = operator new(0x28uLL);
  *uint64_t v20 = &unk_1F1475070;
  v20[1] = v10;
  v20[2] = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v20 + 6) = v12;
  *(void *)((char *)v20 + 28) = 0x676C6F626D756964;
  *((_DWORD *)v20 + 9) = 0;
  CFTypeRef v110 = v20;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v108);
  *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v18, Has_Property, (AMCP *)buf);
  if (*(void *)&buf[32]) {
    (*(void (**)(void, unsigned char *, void, void))&buf[32])(0, buf, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v108);
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if ((void)v103) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v103 + 40), &v103);
  }
  if (*((void *)&v103 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v103 + 1));
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(a1 + 32);
  v100[0] = *(void *)(a1 + 24);
  v100[1] = (uint64_t)v21;
  if (v21)
  {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    AMCP::ASP::make_properties<1953653102u>(v100, *(_DWORD *)(a1 + 44), a3);
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  else
  {
    AMCP::ASP::make_properties<1953653102u>(v100, *(_DWORD *)(a1 + 44), a3);
  }
  uint64_t v22 = *(void *)(a1 + 24);
  uint64_t v23 = *(std::__shared_weak_count **)(a1 + 32);
  if (v23)
  {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    int v24 = *(_DWORD *)(a1 + 44);
    long long v103 = 0uLL;
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v25 = v23;
  }
  else
  {
    uint64_t v25 = 0;
    int v24 = *(_DWORD *)(a1 + 44);
    long long v103 = 0uLL;
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v105, 0, 1.58366008e190);
  uint64_t v26 = *(void *)v105;
  unint64_t v27 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFTypeRef v110 = 0;
  unsigned int v28 = operator new(0x30uLL);
  *unsigned int v28 = &unk_1F14750F0;
  v28[1] = v22;
  void v28[2] = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v28 + 6) = v24;
  *(void *)((char *)v28 + 28) = 0x676C6F626869646ELL;
  *((_DWORD *)v28 + 9) = 0;
  *((unsigned char *)v28 + 40) = 0;
  CFTypeRef v110 = v28;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v108);
  *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v26, v27, (AMCP *)buf);
  if (*(void *)&buf[32]) {
    (*(void (**)(void, unsigned char *, void, void))&buf[32])(0, buf, 0, 0);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](&v108);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v26);
  int v29 = *(std::__shared_weak_count **)&v105[8];
  *(void *)&long long v103 = v26;
  *((void *)&v103 + 1) = *(void *)&v105[8];
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v26 + 40), &v103);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  uint64_t v30 = *(void *)(a1 + 24);
  uint64_t v31 = *(std::__shared_weak_count **)(a1 + 32);
  if (v31)
  {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    int v32 = *(_DWORD *)(a1 + 44);
    long long v103 = 0uLL;
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v33 = v31;
  }
  else
  {
    uint64_t v33 = 0;
    int v32 = *(_DWORD *)(a1 + 44);
    long long v103 = 0uLL;
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v105, 0, 1.58366007e190);
  uint64_t v34 = *(void *)v105;
  unint64_t v35 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  if (v33) {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFTypeRef v110 = 0;
  uint64_t v36 = operator new(0x28uLL);
  *uint64_t v36 = &unk_1F1475170;
  v36[1] = v30;
  uint64_t v36[2] = v33;
  if (v33) {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v36 + 6) = v32;
  *(void *)((char *)v36 + 28) = 0x676C6F62636C6B64;
  *((_DWORD *)v36 + 9) = 0;
  CFTypeRef v110 = v36;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v108);
  *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v34, v35, (AMCP *)buf);
  if (*(void *)&buf[32]) {
    (*(void (**)(void, unsigned char *, void, void))&buf[32])(0, buf, 0, 0);
  }
  std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](&v108);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v34);
  uint64_t v37 = *(void *)v105;
  long long v103 = *(_OWORD *)v105;
  if (v33)
  {
    uint64_t v97 = *(void *)v105;
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    uint64_t v37 = v97;
  }
  if (v31)
  {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v38 = v37;
    unint64_t v39 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v38 = v37;
    unint64_t v39 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  CFTypeRef v110 = 0;
  long long v40 = operator new(0x28uLL);
  *long long v40 = &unk_1F14751F0;
  v40[1] = v30;
  v40[2] = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v40 + 6) = v32;
  *(void *)((char *)v40 + 28) = 0x676C6F62636C6B64;
  *((_DWORD *)v40 + 9) = 0;
  CFTypeRef v110 = v40;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v108);
  *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v38, v39, (AMCP *)buf);
  if (*(void *)&buf[32]) {
    (*(void (**)(void, unsigned char *, void, void))&buf[32])(0, buf, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v108);
  if (v31)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if ((void)v103) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v103 + 40), &v103);
  }
  if (*((void *)&v103 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v103 + 1));
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  uint64_t v43 = *(void *)(a1 + 24);
  uint64_t v42 = *(std::__shared_weak_count **)(a1 + 32);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v44 = 0;
  int v45 = *(_DWORD *)(a1 + 44);
  uint64_t v46 = 0x676C6F626C746E63;
  char v47 = 1;
  do
  {
    char v48 = v47;
    LODWORD(v41) = AMCP::Property_Traits<1819569763u>::k_valid_scopes[v44];
    long long v103 = 0uLL;
    if (v47) {
      uint64_t v49 = 0x696E70746C746E63;
    }
    else {
      uint64_t v49 = v46;
    }
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(v107.__vftable) = 1819569763;
    *(std::runtime_error_vtbl **)((char *)&v107.__vftable + 4) = v41;
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v105, 0, *(double *)&v107.__vftable);
    uint64_t v50 = *(void *)v105;
    unint64_t v51 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CFTypeRef v110 = 0;
    int v52 = operator new(0x28uLL);
    *int v52 = &unk_1F1475270;
    v52[1] = v43;
    v52[2] = v42;
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v52 + 6) = v45;
    *(void *)((char *)v52 + 28) = v49;
    *((_DWORD *)v52 + 9) = 0;
    CFTypeRef v110 = v52;
    memset(buf, 0, sizeof(buf));
    std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v108);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v50, v51, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, unsigned char *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](&v108);
    if (v42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v42);
    }
    AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v50);
    long long v103 = *(_OWORD *)v105;
    if (v42)
    {
      uint64_t v98 = *(void *)v105;
      std::__shared_weak_count::__release_shared[abi:ne180100](v42);
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v53 = v98;
      unint64_t v54 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v53 = *(void *)v105;
      unint64_t v54 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    }
    CFTypeRef v110 = 0;
    unint64_t v55 = operator new(0x28uLL);
    void *v55 = &unk_1F14752F0;
    v55[1] = v43;
    v55[2] = v42;
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v55 + 6) = v45;
    *(void *)((char *)v55 + 28) = v49;
    *((_DWORD *)v55 + 9) = 0;
    CFTypeRef v110 = v55;
    memset(buf, 0, sizeof(buf));
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v108);
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v53, v54, (AMCP *)buf);
    if (*(void *)&buf[32]) {
      (*(void (**)(void, unsigned char *, void, void))&buf[32])(0, buf, 0, 0);
    }
    std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v108);
    if (v42)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v42);
      std::__shared_weak_count::__release_shared[abi:ne180100](v42);
    }
    if ((void)v103) {
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v103 + 40), &v103);
    }
    if (*((void *)&v103 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v103 + 1));
    }
    char v47 = 0;
    uint64_t v46 = 0x6F7574706C746E63;
    uint64_t v44 = 1;
  }
  while ((v48 & 1) != 0);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  uint64_t v57 = *(void *)(a1 + 24);
  int16x8_t v56 = *(std::__shared_weak_count **)(v94 + 32);
  if (v56)
  {
    atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
    int v58 = *(_DWORD *)(v94 + 44);
    uint64_t v101 = 0x676C6F626E737274;
    int v102 = 0;
    long long v103 = 0uLL;
    atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v59 = v56;
  }
  else
  {
    long long v59 = 0;
    int v58 = *(_DWORD *)(v94 + 44);
    uint64_t v101 = 0x676C6F626E737274;
    int v102 = 0;
    long long v103 = 0uLL;
  }
  strcpy((char *)&v107, "trsnbolg");
  BYTE1(v107.__imp_.__imp_) = 0;
  WORD1(v107.__imp_.__imp_) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v105, 0, *(double *)&v107.__vftable);
  uint64_t v60 = *(void *)v105;
  unint64_t v61 = AMCP::Implementation::get_type_marker<std::function<double ()(void)>>();
  if (v56) {
    atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFTypeRef v110 = 0;
  uint64_t v62 = operator new(0x28uLL);
  void *v62 = &unk_1F1475370;
  v62[1] = v57;
  v62[2] = v56;
  if (v56) {
    atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v62 + 6) = v58;
  *(void *)((char *)v62 + 28) = 0x676C6F626E737274;
  *((_DWORD *)v62 + 9) = 0;
  CFTypeRef v110 = v62;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<double ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v108);
  *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<double ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v60, v61, (AMCP *)buf);
  if (*(void *)&buf[32]) {
    (*(void (**)(void, unsigned char *, void, void))&buf[32])(0, buf, 0, 0);
  }
  std::__function::__value_func<double ()(void)>::~__value_func[abi:ne180100](&v108);
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(v60);
  unint64_t v63 = AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>();
  if (v59) {
    atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFTypeRef v110 = 0;
  int v64 = operator new(0x28uLL);
  *int v64 = &unk_1F14753F0;
  v64[1] = v57;
  v64[2] = v59;
  if (v59) {
    atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v64 + 6) = v58;
  *(void *)((char *)v64 + 28) = 0x676C6F626E737274;
  *((_DWORD *)v64 + 9) = 0;
  CFTypeRef v110 = v64;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<void ()(double const&)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v108);
  *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(double const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v60, v63, (AMCP *)buf);
  if (*(void *)&buf[32]) {
    (*(void (**)(void, unsigned char *, void, void))&buf[32])(0, buf, 0, 0);
  }
  std::__function::__value_func<void ()(double const&)>::~__value_func[abi:ne180100](&v108);
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(v60);
  uint64_t v99 = *(void *)v105;
  long long v103 = *(_OWORD *)v105;
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  if (v56)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
    atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v65 = v99;
    unint64_t Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
    atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v65 = v99;
    unint64_t Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
  }
  CFTypeRef v110 = 0;
  unint64_t v67 = operator new(0x28uLL);
  *unint64_t v67 = &unk_1F1475470;
  v67[1] = v57;
  v67[2] = v56;
  if (v56) {
    atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v67 + 6) = v58;
  *(void *)((char *)v67 + 28) = 0x676C6F626E737274;
  *((_DWORD *)v67 + 9) = 0;
  CFTypeRef v110 = v67;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v108);
  *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v65, Is_Property_Settable, (AMCP *)buf);
  if (*(void *)&buf[32]) {
    (*(void (**)(void, unsigned char *, void, void))&buf[32])(0, buf, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::~__value_func[abi:ne180100](&v108);
  if (v56)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
    atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v68 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t v68 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  CFTypeRef v110 = 0;
  CFTypeRef v69 = operator new(0x28uLL);
  void *v69 = &unk_1F14754F0;
  v69[1] = v57;
  v69[2] = v56;
  if (v56) {
    atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v69 + 6) = v58;
  *(void *)((char *)v69 + 28) = 0x676C6F626E737274;
  *((_DWORD *)v69 + 9) = 0;
  CFTypeRef v110 = v69;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v108);
  *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v65, v68, (AMCP *)buf);
  if (*(void *)&buf[32]) {
    (*(void (**)(void, unsigned char *, void, void))&buf[32])(0, buf, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v108);
  uint64_t v70 = v94;
  if (v56)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  if ((void)v103) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v103 + 40), &v103);
  }
  if (*((void *)&v103 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v103 + 1));
  }
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  uint64_t v71 = *(void *)(v94 + 24);
  int v72 = *(std::__shared_weak_count **)(v94 + 32);
  if (v72)
  {
    atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
    int v73 = *(_DWORD *)(v94 + 44);
    long long v103 = 0uLL;
    atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
    mach_port_t v74 = v72;
  }
  else
  {
    mach_port_t v74 = 0;
    int v73 = *(_DWORD *)(v94 + 44);
    long long v103 = 0uLL;
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v105, 0, 1.5836601e190);
  uint64_t v75 = *(void *)v105;
  unint64_t v76 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRangeList ()(void)>>();
  if (v74) {
    atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFTypeRef v110 = 0;
  CFTypeRef v77 = operator new(0x28uLL);
  *CFTypeRef v77 = &unk_1F1475570;
  v77[1] = v71;
  v77[2] = v74;
  if (v74) {
    atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v77 + 6) = v73;
  *(void *)((char *)v77 + 28) = 0x676C6F626E737223;
  *((_DWORD *)v77 + 9) = 0;
  CFTypeRef v110 = v77;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<CA::ValueRangeList ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v108);
  *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRangeList ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v75, v76, (AMCP *)buf);
  if (*(void *)&buf[32]) {
    (*(void (**)(void, unsigned char *, void, void))&buf[32])(0, buf, 0, 0);
  }
  std::__function::__value_func<CA::ValueRangeList ()(void)>::~__value_func[abi:ne180100](&v108);
  if (v74) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v74);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(v75);
  unint64_t v78 = *(std::__shared_weak_count **)&v105[8];
  *(void *)&long long v103 = v75;
  *((void *)&v103 + 1) = *(void *)&v105[8];
  if (v74) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v74);
  }
  if (v72)
  {
    atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v79 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v70 = v94;
  }
  else
  {
    unint64_t v79 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  CFTypeRef v110 = 0;
  CFTypeRef v80 = operator new(0x28uLL);
  *CFTypeRef v80 = &unk_1F14755F0;
  v80[1] = v71;
  v80[2] = v72;
  if (v72) {
    atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v80 + 6) = v73;
  *(void *)((char *)v80 + 28) = 0x676C6F626E737223;
  *((_DWORD *)v80 + 9) = 0;
  CFTypeRef v110 = v80;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v108);
  *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v75, v79, (AMCP *)buf);
  if (*(void *)&buf[32]) {
    (*(void (**)(void, unsigned char *, void, void))&buf[32])(0, buf, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v108);
  if (v72)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v75 + 40), &v103);
  if (v78) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v78);
  }
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v105, 0, 1.58366007e190);
  uint64_t v81 = *(void *)v105;
  uint64_t v83 = *(void *)(v70 + 24);
  uint64_t v82 = *(void *)(v70 + 32);
  if (v82) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v84 = *(unsigned int *)(v70 + 44);
  uint64_t v85 = v70;
  uint64_t v86 = *(unsigned int *)(v70 + 60);
  uint64_t v88 = *(void *)(v85 + 8);
  uint64_t v87 = *(void *)(v85 + 16);
  if (v87) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v87 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v89 = AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>();
  CFTypeRef v110 = 0;
  unsigned int v90 = operator new(0x30uLL);
  void *v90 = &unk_1F1475670;
  v90[1] = v83;
  v90[2] = v82;
  v90[3] = v84 | (v86 << 32);
  v90[4] = v88;
  v90[5] = v87;
  CFTypeRef v110 = v90;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<std::shared_ptr<AMCP::Core::Engine> ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v108);
  *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v81, v89, (AMCP *)buf);
  if (*(void *)&buf[32]) {
    (*(void (**)(void, unsigned char *, void, void))&buf[32])(0, buf, 0, 0);
  }
  std::__function::__value_func<std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__value_func[abi:ne180100](&v108);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v81 + 40), v105);
  if (*(void *)&v105[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v105[8]);
  }
}

void sub_1BADCF8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMCP::ASP::PlugIn_Object::populate_object_core(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  LODWORD(v107) = *(_DWORD *)(a1 + 60);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v104, 0, (int *)&v107, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(void *)&v104[0].mSelector + 40), v104);
  if (*(void *)&v104[0].mElement) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v104[0].mElement);
  }
  LODWORD(v107) = *(_DWORD *)(a1 + 44);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v104, 0, (int *)&v107, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(void *)&v104[0].mSelector + 40), v104);
  if (*(void *)&v104[0].mElement) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v104[0].mElement);
  }
  LODWORD(v107) = *(_DWORD *)(a1 + 68);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v104, 0, (int *)&v107, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(void *)&v104[0].mSelector + 40), v104);
  if (*(void *)&v104[0].mElement) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v104[0].mElement);
  }
  LODWORD(v107) = *(_DWORD *)(a1 + 64);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v104, 0, (int *)&v107, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(void *)&v104[0].mSelector + 40), v104);
  if (*(void *)&v104[0].mElement) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v104[0].mElement);
  }
  LODWORD(v107) = *(_DWORD *)(a1 + 56);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v104, 0, (int *)&v107, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(void *)&v104[0].mSelector + 40), v104);
  if (*(void *)&v104[0].mElement) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v104[0].mElement);
  }
  mcp_applesauce::CF::PlugInRef_proxy::get_bundle(v103, **(__CFBundle ***)(a1 + 24));
  mcp_applesauce::CF::BundleRef_proxy::get_bundle_id((applesauce::CF::StringRef *)cf, (__CFBundle *)v103[0]);
  CFTypeRef v107 = (CFTypeRef)0x676C6F626F706C67;
  LODWORD(v108) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v104, (uint64_t)&v107, cf[0]);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(void *)&v104[0].mSelector + 40), v104);
  if (*(void *)&v104[0].mElement) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v104[0].mElement);
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v103[0]) {
    CFRelease(v103[0]);
  }
  AudioObjectPropertyElement v6 = *(_DWORD *)(a1 + 60);
  *(void *)&v104[0].signed int mSelector = *(void *)(*(void *)(a1 + 8) + 16);
  v104[0].uint64_t mElement = v6;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>((uint64_t *)&v107, 0, (long long *)v104, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)v107 + 10, &v107);
  if (v108) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v108);
  }
  uint64_t v8 = *(void *)(a1 + 24);
  int v7 = *(std::__shared_weak_count **)(a1 + 32);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    int v9 = *(_DWORD *)(a1 + 44);
    v103[0] = 0;
    v103[1] = 0;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v10 = v7;
  }
  else
  {
    uint64_t v10 = 0;
    int v9 = *(_DWORD *)(a1 + 44);
    v103[0] = 0;
    v103[1] = 0;
  }
  strcpy((char *)v106, "manlbolg");
  BYTE1(v106[1]) = 0;
  WORD1(v106[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, v106[0]);
  CFTypeRef v11 = cf[0];
  unint64_t v12 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v109 = 0;
  uint64_t v13 = operator new(0x28uLL);
  void *v13 = &unk_1F1473B70;
  v13[1] = v8;
  v13[2] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v13 + 6) = v9;
  *(void *)((char *)v13 + 28) = 0x676C6F626C6E616DLL;
  *((_DWORD *)v13 + 9) = 0;
  long long v109 = v13;
  memset(v104, 0, 40);
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v104, (uint64_t)&v107);
  *(void *)&v104[2].uint64_t mElement = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v11, v12, (AMCP *)v104);
  if (*(void *)&v104[2].mElement) {
    (*(void (**)(void, AudioObjectPropertyAddress *, void, void))&v104[2].mElement)(0, v104, 0, 0);
  }
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::~__value_func[abi:ne180100](&v107);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>((uint64_t)v11);
  unint64_t v14 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::StringRef const&)>>();
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v109 = 0;
  unint64_t v15 = operator new(0x28uLL);
  *unint64_t v15 = &unk_1F1473BF0;
  v15[1] = v8;
  _OWORD v15[2] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v15 + 6) = v9;
  *(void *)((char *)v15 + 28) = 0x676C6F626C6E616DLL;
  *((_DWORD *)v15 + 9) = 0;
  long long v109 = v15;
  memset(v104, 0, 40);
  std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::__value_func[abi:ne180100]((uint64_t)v104, (uint64_t)&v107);
  *(void *)&v104[2].uint64_t mElement = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::StringRef const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v11, v14, (AMCP *)v104);
  if (*(void *)&v104[2].mElement) {
    (*(void (**)(void, AudioObjectPropertyAddress *, void, void))&v104[2].mElement)(0, v104, 0, 0);
  }
  std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::~__value_func[abi:ne180100](&v107);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>((uint64_t)v11);
  CFTypeRef v96 = cf[0];
  *(_OWORD *)long long v103 = *(_OWORD *)cf;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v16 = (uint64_t)v96;
    unint64_t Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v16 = (uint64_t)v96;
    unint64_t Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
  }
  long long v109 = 0;
  uint64_t v18 = operator new(0x28uLL);
  *uint64_t v18 = &unk_1F1473C70;
  v18[1] = v8;
  uint64_t v18[2] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v18 + 6) = v9;
  *(void *)((char *)v18 + 28) = 0x676C6F626C6E616DLL;
  *((_DWORD *)v18 + 9) = 0;
  long long v109 = v18;
  memset(v104, 0, 40);
  std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)v104, (uint64_t)&v107);
  *(void *)&v104[2].uint64_t mElement = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v16, Is_Property_Settable, (AMCP *)v104);
  if (*(void *)&v104[2].mElement) {
    (*(void (**)(void, AudioObjectPropertyAddress *, void, void))&v104[2].mElement)(0, v104, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::~__value_func[abi:ne180100](&v107);
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    unint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  long long v109 = 0;
  uint64_t v20 = operator new(0x28uLL);
  *uint64_t v20 = &unk_1F1473CF0;
  v20[1] = v8;
  v20[2] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v20 + 6) = v9;
  *(void *)((char *)v20 + 28) = 0x676C6F626C6E616DLL;
  *((_DWORD *)v20 + 9) = 0;
  long long v109 = v20;
  memset(v104, 0, 40);
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)v104, (uint64_t)&v107);
  *(void *)&v104[2].uint64_t mElement = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v16, Has_Property, (AMCP *)v104);
  if (*(void *)&v104[2].mElement) {
    (*(void (**)(void, AudioObjectPropertyAddress *, void, void))&v104[2].mElement)(0, v104, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v107);
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v103[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)v103[0] + 10, v103);
  }
  if (v103[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v103[1]);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v22 = *(void *)(a1 + 24);
  uint64_t v21 = *(std::__shared_weak_count **)(a1 + 32);
  if (v21)
  {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    int v23 = *(_DWORD *)(a1 + 44);
    v103[0] = 0;
    v103[1] = 0;
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    int v24 = v21;
  }
  else
  {
    int v24 = 0;
    int v23 = *(_DWORD *)(a1 + 44);
    v103[0] = 0;
    v103[1] = 0;
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.5836601e190);
  CFTypeRef v25 = cf[0];
  unint64_t v26 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v109 = 0;
  unint64_t v27 = operator new(0x28uLL);
  void *v27 = &unk_1F1473D70;
  v27[1] = v22;
  void v27[2] = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v27 + 6) = v23;
  *(void *)((char *)v27 + 28) = 0x676C6F626C6D6F64;
  *((_DWORD *)v27 + 9) = 0;
  long long v109 = v27;
  memset(v104, 0, 40);
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v104, (uint64_t)&v107);
  *(void *)&v104[2].uint64_t mElement = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v25, v26, (AMCP *)v104);
  if (*(void *)&v104[2].mElement) {
    (*(void (**)(void, AudioObjectPropertyAddress *, void, void))&v104[2].mElement)(0, v104, 0, 0);
  }
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::~__value_func[abi:ne180100](&v107);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>((uint64_t)v25);
  CFTypeRef v28 = cf[0];
  *(_OWORD *)long long v103 = *(_OWORD *)cf;
  if (v24)
  {
    CFTypeRef v97 = cf[0];
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    CFTypeRef v28 = v97;
  }
  if (v21)
  {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v29 = (uint64_t)v28;
    unint64_t v30 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v29 = (uint64_t)v28;
    unint64_t v30 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  long long v109 = 0;
  uint64_t v31 = operator new(0x28uLL);
  void *v31 = &unk_1F1473DF0;
  v31[1] = v22;
  v31[2] = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v31 + 6) = v23;
  *(void *)((char *)v31 + 28) = 0x676C6F626C6D6F64;
  *((_DWORD *)v31 + 9) = 0;
  long long v109 = v31;
  memset(v104, 0, 40);
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)v104, (uint64_t)&v107);
  *(void *)&v104[2].uint64_t mElement = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v29, v30, (AMCP *)v104);
  if (*(void *)&v104[2].mElement) {
    (*(void (**)(void, AudioObjectPropertyAddress *, void, void))&v104[2].mElement)(0, v104, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v107);
  if (v21)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v103[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)v103[0] + 10, v103);
  }
  if (v103[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v103[1]);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  uint64_t v33 = *(void *)(a1 + 24);
  int v32 = *(std::__shared_weak_count **)(a1 + 32);
  if (v32)
  {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    int v34 = *(_DWORD *)(a1 + 44);
    v103[0] = 0;
    v103[1] = 0;
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v35 = v32;
  }
  else
  {
    unint64_t v35 = 0;
    int v34 = *(_DWORD *)(a1 + 44);
    v103[0] = 0;
    v103[1] = 0;
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.5836601e190);
  CFTypeRef v36 = cf[0];
  unint64_t v37 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  if (v35) {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v109 = 0;
  uint64_t v38 = operator new(0x28uLL);
  *uint64_t v38 = &unk_1F1473E70;
  v38[1] = v33;
  v38[2] = v35;
  if (v35) {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v38 + 6) = v34;
  *(void *)((char *)v38 + 28) = 0x676C6F626C6D616BLL;
  *((_DWORD *)v38 + 9) = 0;
  long long v109 = v38;
  memset(v104, 0, 40);
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v104, (uint64_t)&v107);
  *(void *)&v104[2].uint64_t mElement = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v36, v37, (AMCP *)v104);
  if (*(void *)&v104[2].mElement) {
    (*(void (**)(void, AudioObjectPropertyAddress *, void, void))&v104[2].mElement)(0, v104, 0, 0);
  }
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::~__value_func[abi:ne180100](&v107);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>((uint64_t)v36);
  CFTypeRef v39 = cf[0];
  *(_OWORD *)long long v103 = *(_OWORD *)cf;
  if (v35)
  {
    CFTypeRef v98 = cf[0];
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    CFTypeRef v39 = v98;
  }
  if (v32)
  {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v40 = (uint64_t)v39;
    unint64_t v41 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v40 = (uint64_t)v39;
    unint64_t v41 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  long long v109 = 0;
  uint64_t v42 = operator new(0x28uLL);
  void *v42 = &unk_1F1473EF0;
  v42[1] = v33;
  void v42[2] = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v42 + 6) = v34;
  *(void *)((char *)v42 + 28) = 0x676C6F626C6D616BLL;
  *((_DWORD *)v42 + 9) = 0;
  long long v109 = v42;
  memset(v104, 0, 40);
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)v104, (uint64_t)&v107);
  *(void *)&v104[2].uint64_t mElement = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v40, v41, (AMCP *)v104);
  if (*(void *)&v104[2].mElement) {
    (*(void (**)(void, AudioObjectPropertyAddress *, void, void))&v104[2].mElement)(0, v104, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v107);
  if (v32)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (v103[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)v103[0] + 10, v103);
  }
  if (v103[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v103[1]);
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  uint64_t v44 = *(void *)(a1 + 24);
  uint64_t v43 = *(std::__shared_weak_count **)(a1 + 32);
  if (v43)
  {
    atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
    int v45 = *(_DWORD *)(a1 + 44);
    v103[0] = 0;
    v103[1] = 0;
    atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v46 = v43;
  }
  else
  {
    uint64_t v46 = 0;
    int v45 = *(_DWORD *)(a1 + 44);
    v103[0] = 0;
    v103[1] = 0;
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.58366009e190);
  CFTypeRef v47 = cf[0];
  unint64_t v48 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::URLRef ()(void)>>();
  if (v46) {
    atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v109 = 0;
  uint64_t v49 = operator new(0x28uLL);
  *uint64_t v49 = &unk_1F1473F70;
  v49[1] = v44;
  v49[2] = v46;
  if (v46) {
    atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v49 + 6) = v45;
  *(void *)((char *)v49 + 28) = 0x676C6F6269636F6ELL;
  *((_DWORD *)v49 + 9) = 0;
  long long v109 = v49;
  memset(v104, 0, 40);
  std::__function::__value_func<applesauce::CF::URLRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v104, (uint64_t)&v107);
  *(void *)&v104[2].uint64_t mElement = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::URLRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v47, v48, (AMCP *)v104);
  if (*(void *)&v104[2].mElement) {
    (*(void (**)(void, AudioObjectPropertyAddress *, void, void))&v104[2].mElement)(0, v104, 0, 0);
  }
  std::__function::__value_func<applesauce::CF::URLRef ()(void)>::~__value_func[abi:ne180100](&v107);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>((uint64_t)v47);
  CFTypeRef v50 = cf[0];
  *(_OWORD *)long long v103 = *(_OWORD *)cf;
  if (v46)
  {
    CFTypeRef v99 = cf[0];
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
    CFTypeRef v50 = v99;
  }
  if (v43)
  {
    atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v51 = (uint64_t)v50;
    unint64_t v52 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v51 = (uint64_t)v50;
    unint64_t v52 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  long long v109 = 0;
  uint64_t v53 = operator new(0x28uLL);
  *uint64_t v53 = &unk_1F1473FF0;
  v53[1] = v44;
  uint64_t v53[2] = v43;
  if (v43) {
    atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v53 + 6) = v45;
  *(void *)((char *)v53 + 28) = 0x676C6F6269636F6ELL;
  *((_DWORD *)v53 + 9) = 0;
  long long v109 = v53;
  memset(v104, 0, 40);
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)v104, (uint64_t)&v107);
  *(void *)&v104[2].uint64_t mElement = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v51, v52, (AMCP *)v104);
  if (*(void *)&v104[2].mElement) {
    (*(void (**)(void, AudioObjectPropertyAddress *, void, void))&v104[2].mElement)(0, v104, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v107);
  if (v43)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (v103[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)v103[0] + 10, v103);
  }
  if (v103[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v103[1]);
  }
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  uint64_t v55 = *(void *)(a1 + 24);
  unint64_t v54 = *(std::__shared_weak_count **)(a1 + 32);
  if (v54) {
    atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v56 = *(_DWORD *)(a1 + 44);
  CFStringRef v57 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.AudioMIDISetup", 30, 0x8000100u, 0);
  CFStringRef v58 = v57;
  if (!v57)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v103[0] = 0;
  v103[1] = 0;
  if (v54) {
    atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFRetain(v57);
  strcpy((char *)v106, "ppacbolg");
  BYTE1(v106[1]) = 0;
  WORD1(v106[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, v106[0]);
  CFTypeRef v59 = cf[0];
  unint64_t v60 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  if (v54) {
    atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFRetain(v58);
  long long v109 = 0;
  unint64_t v61 = operator new(0x30uLL);
  uint64_t v62 = v61;
  *unint64_t v61 = &unk_1F1474070;
  v61[1] = v55;
  v61[2] = v54;
  if (v54) {
    atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v61 + 6) = v56;
  *(void *)((char *)v61 + 28) = 0x676C6F6263617070;
  *((_DWORD *)v61 + 9) = 0;
  CFRetain(v58);
  v62[5] = v58;
  long long v109 = v62;
  memset(v104, 0, 40);
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v104, (uint64_t)&v107);
  *(void *)&v104[2].uint64_t mElement = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v59, v60, (AMCP *)v104);
  if (*(void *)&v104[2].mElement) {
    (*(void (**)(void, AudioObjectPropertyAddress *, void, void))&v104[2].mElement)(0, v104, 0, 0);
  }
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::~__value_func[abi:ne180100](&v107);
  CFRelease(v58);
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>((uint64_t)v59);
  long long v63 = *(_OWORD *)cf;
  cf[0] = 0;
  cf[1] = 0;
  long long v100 = v63;
  *(_OWORD *)long long v103 = v63;
  CFRelease(v58);
  int v64 = (std::__shared_weak_count *)*((void *)&v100 + 1);
  if (v54)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
    int v64 = (std::__shared_weak_count *)*((void *)&v100 + 1);
  }
  if ((void)v100)
  {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v100 + 40), v103);
    int v64 = (std::__shared_weak_count *)*((void *)&v100 + 1);
  }
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  CFRelease(v58);
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  uint64_t v66 = *(void *)(a1 + 24);
  uint64_t v65 = *(std::__shared_weak_count **)(a1 + 32);
  if (v65)
  {
    atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
    int v67 = *(_DWORD *)(a1 + 44);
    v103[0] = 0;
    v103[1] = 0;
    atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v68 = v65;
  }
  else
  {
    unint64_t v68 = 0;
    int v67 = *(_DWORD *)(a1 + 44);
    v103[0] = 0;
    v103[1] = 0;
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.58366012e190);
  CFTypeRef v69 = cf[0];
  unint64_t v70 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  if (v68) {
    atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v109 = 0;
  uint64_t v71 = operator new(0x28uLL);
  void *v71 = &unk_1F14740F0;
  v71[1] = v66;
  v71[2] = v68;
  if (v68) {
    atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v71 + 6) = v67;
  *(void *)((char *)v71 + 28) = 0x676C6F62736E756DLL;
  *((_DWORD *)v71 + 9) = 0;
  long long v109 = v71;
  memset(v104, 0, 40);
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v104, (uint64_t)&v107);
  *(void *)&v104[2].uint64_t mElement = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v69, v70, (AMCP *)v104);
  if (*(void *)&v104[2].mElement) {
    (*(void (**)(void, AudioObjectPropertyAddress *, void, void))&v104[2].mElement)(0, v104, 0, 0);
  }
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::~__value_func[abi:ne180100](&v107);
  if (v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v68);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>((uint64_t)v69);
  CFTypeRef v72 = cf[0];
  *(_OWORD *)long long v103 = *(_OWORD *)cf;
  if (v68)
  {
    CFTypeRef v101 = cf[0];
    std::__shared_weak_count::__release_shared[abi:ne180100](v68);
    CFTypeRef v72 = v101;
  }
  if (v65)
  {
    atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v73 = (uint64_t)v72;
    unint64_t v74 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v73 = (uint64_t)v72;
    unint64_t v74 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  long long v109 = 0;
  uint64_t v75 = operator new(0x28uLL);
  void *v75 = &unk_1F1474170;
  v75[1] = v66;
  v75[2] = v65;
  if (v65) {
    atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v75 + 6) = v67;
  *(void *)((char *)v75 + 28) = 0x676C6F62736E756DLL;
  *((_DWORD *)v75 + 9) = 0;
  long long v109 = v75;
  memset(v104, 0, 40);
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)v104, (uint64_t)&v107);
  *(void *)&v104[2].uint64_t mElement = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v73, v74, (AMCP *)v104);
  if (*(void *)&v104[2].mElement) {
    (*(void (**)(void, AudioObjectPropertyAddress *, void, void))&v104[2].mElement)(0, v104, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v107);
  if (v65)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  if (v103[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)v103[0] + 10, v103);
  }
  if (v103[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v103[1]);
  }
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  uint64_t v77 = *(void *)(a1 + 24);
  unint64_t v76 = *(std::__shared_weak_count **)(a1 + 32);
  if (v76)
  {
    atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
    int v78 = *(_DWORD *)(a1 + 44);
    v103[0] = 0;
    v103[1] = 0;
    atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v79 = v76;
  }
  else
  {
    unint64_t v79 = 0;
    int v78 = *(_DWORD *)(a1 + 44);
    v103[0] = 0;
    v103[1] = 0;
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)cf, 0, 1.58366008e190);
  CFTypeRef v80 = cf[0];
  unint64_t v81 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  if (v79) {
    atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v109 = 0;
  uint64_t v82 = operator new(0x28uLL);
  void *v82 = &unk_1F14741F0;
  v82[1] = v77;
  v82[2] = v79;
  if (v79) {
    atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v82 + 6) = v78;
  *(void *)((char *)v82 + 28) = 0x676C6F626677766ELL;
  *((_DWORD *)v82 + 9) = 0;
  long long v109 = v82;
  memset(v104, 0, 40);
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v104, (uint64_t)&v107);
  *(void *)&v104[2].uint64_t mElement = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v80, v81, (AMCP *)v104);
  if (*(void *)&v104[2].mElement) {
    (*(void (**)(void, AudioObjectPropertyAddress *, void, void))&v104[2].mElement)(0, v104, 0, 0);
  }
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::~__value_func[abi:ne180100](&v107);
  if (v79) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v79);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>((uint64_t)v80);
  CFTypeRef v83 = cf[0];
  *(_OWORD *)long long v103 = *(_OWORD *)cf;
  if (v79)
  {
    CFTypeRef v102 = cf[0];
    std::__shared_weak_count::__release_shared[abi:ne180100](v79);
    CFTypeRef v83 = v102;
  }
  if (v76)
  {
    atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v84 = (uint64_t)v83;
    unint64_t v85 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v84 = (uint64_t)v83;
    unint64_t v85 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  long long v109 = 0;
  uint64_t v86 = operator new(0x28uLL);
  void *v86 = &unk_1F1474270;
  v86[1] = v77;
  v86[2] = v76;
  if (v76) {
    atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v86 + 6) = v78;
  *(void *)((char *)v86 + 28) = 0x676C6F626677766ELL;
  *((_DWORD *)v86 + 9) = 0;
  long long v109 = v86;
  memset(v104, 0, 40);
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)v104, (uint64_t)&v107);
  *(void *)&v104[2].uint64_t mElement = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v84, v85, (AMCP *)v104);
  if (*(void *)&v104[2].mElement) {
    (*(void (**)(void, AudioObjectPropertyAddress *, void, void))&v104[2].mElement)(0, v104, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v107);
  if (v76)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v76);
    std::__shared_weak_count::__release_shared[abi:ne180100](v76);
  }
  if (v103[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)v103[0] + 10, v103);
  }
  if (v103[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v103[1]);
  }
  if (v76) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v76);
  }
  uint64_t v88 = *(AMCP::ASP::PlugIn **)(a1 + 24);
  uint64_t v87 = *(std::__shared_weak_count **)(a1 + 32);
  if (v87) {
    atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v89 = *(unsigned int *)(a1 + 44);
  if (!v89) {
    goto LABEL_241;
  }
  while (1)
  {
    strcpy((char *)v104, "crsrbolg");
    BYTE1(v104[0].mElement) = 0;
    HIWORD(v104[0].mElement) = 0;
    CFTypeRef v107 = 0;
    if (!AMCP::ASP::PlugIn::ObjectGetPropertyData(v88, v89, 0, v104, 0, 0, 8, &v107)) {
      break;
    }
    strcpy((char *)v104, "vdtsbolg");
    BYTE1(v104[0].mElement) = 0;
    HIWORD(v104[0].mElement) = 0;
    LODWORD(v107) = 0;
    if (!AMCP::ASP::PlugIn::ObjectGetPropertyData(v88, v89, 0, v104, 0, 0, 4, &v107))
    {
      uint64_t v89 = v107;
      if (v107) {
        continue;
      }
    }
    goto LABEL_241;
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v104, v107);
  mcp_applesauce::CF::PlugInRef_proxy::get_bundle(cf, *(__CFBundle **)v88);
  mcp_applesauce::CF::BundleRef_proxy::get_bundle_url((applesauce::CF::URLRef *)&v107, (__CFBundle *)cf[0]);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  unsigned int v90 = (const void *)MEMORY[0x1C18586C0](0, *(void *)&v104[0].mSelector, 0, 1, v107);
  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)v103, v90);
  if (v107) {
    CFRelease(v107);
  }
  if (*(void *)&v104[0].mSelector) {
    CFRelease(*(CFTypeRef *)&v104[0].mSelector);
  }
  if (v103[0])
  {
    CFTypeRef v107 = (CFTypeRef)0x676C6F6272737263;
    LODWORD(v108) = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>((uint64_t *)v104, (uint64_t)&v107, v103[0]);
    if (v103[0]) {
      CFRelease(v103[0]);
    }
    if (*(void *)&v104[0].mSelector) {
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(void *)&v104[0].mSelector + 40), v104);
    }
  }
  else
  {
LABEL_241:
    *(void *)&v104[0].signed int mSelector = 0;
    *(void *)&v104[0].uint64_t mElement = 0;
  }
  if (*(void *)&v104[0].mElement) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v104[0].mElement);
  }
  if (v87) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v87);
  }
  AudioObjectPropertyElement v91 = *(_DWORD *)(a1 + 60);
  *(void *)&v104[0].signed int mSelector = *(void *)(*(void *)(a1 + 8) + 16);
  v104[0].uint64_t mElement = v91;
  v104[1].signed int mSelector = 1633907820;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)&v107, 0, (long long *)v104, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)v107 + 10, &v107);
  if (v108) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v108);
  }
  AudioObjectPropertyElement v92 = *(_DWORD *)(a1 + 60);
  *(void *)&v104[0].signed int mSelector = *(void *)(*(void *)(a1 + 8) + 16);
  v104[0].uint64_t mElement = v92;
  *(_OWORD *)&v104[1].signed int mSelector = xmmword_1BAFF9490;
  *(_OWORD *)&v104[2].AudioObjectPropertyScope mScope = xmmword_1BAFF94A0;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v107, 0, (uint64_t *)v104, 7.28117485e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)v107 + 10, &v107);
  if (v108) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v108);
  }
  AudioObjectPropertyElement v93 = *(_DWORD *)(a1 + 60);
  *(void *)&v104[0].signed int mSelector = *(void *)(*(void *)(a1 + 8) + 16);
  v104[0].uint64_t mElement = v93;
  *(_OWORD *)&v104[1].signed int mSelector = xmmword_1BAFF9490;
  *(_OWORD *)&v104[2].AudioObjectPropertyScope mScope = xmmword_1BAFF94B0;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v107, 0, (uint64_t *)v104, 8.1320867e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)v107 + 10, &v107);
  if (v108) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v108);
  }
  AudioObjectPropertyElement v94 = *(_DWORD *)(a1 + 60);
  *(void *)&v104[0].signed int mSelector = *(void *)(*(void *)(a1 + 8) + 16);
  v104[0].uint64_t mElement = v94;
  *(_OWORD *)&v104[1].signed int mSelector = xmmword_1BAFF9490;
  *(_OWORD *)&v104[2].AudioObjectPropertyScope mScope = xmmword_1BAFF94C0;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v107, 0, (uint64_t *)v104, 5.07911975e233);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)v107 + 10, &v107);
  if (v108) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v108);
  }
  AMCP::ASP::PlugIn_Object::update_object_core(a1, a2, a3);
}

void sub_1BADD1208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::ASP::PlugIn_Object::update_object_core(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3 = a2;
  uint64_t v162 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 32);
  uint64_t v138 = *(void *)(a1 + 24);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = 0;
  int v6 = *(_DWORD *)(a1 + 44);
  unsigned __int32 v122 = vdup_n_s32(0x6C63686Eu).u32[0];
  do
  {
    unsigned int v7 = 0;
    uint64_t v126 = v5;
    uint64_t v8 = AMCP::Property_Traits<1818454126u>::k_valid_scopes[v5];
    LODWORD(v9) = v122;
    HIDWORD(v9) = AMCP::Property_Traits<1818454126u>::k_valid_scopes[v5];
    double v130 = v9;
    do
    {
      uint64_t v10 = 0;
      long long v160 = 0uLL;
      while (v8 != AMCP::Property_Traits<1818454126u>::k_valid_scopes[v10])
      {
        if (++v10 == 4)
        {
          uint64_t v11 = 1735159650;
          if (!v4) {
            goto LABEL_12;
          }
          goto LABEL_11;
        }
      }
      uint64_t v11 = v8;
      if (!v4) {
        goto LABEL_12;
      }
LABEL_11:
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_12:
      std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v151, v7, v130);
      uint64_t v12 = v151;
      unint64_t v13 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((void *)&v156 + 1) = 0;
      unint64_t v14 = operator new(0x28uLL);
      *unint64_t v14 = &unk_1F14742F0;
      v14[1] = v138;
      void v14[2] = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v14 + 6) = v6;
      uint64_t v15 = ((v11 << 32) | 0x6C63636E) + 1280;
      *(void *)((char *)v14 + 28) = v15;
      *((_DWORD *)v14 + 9) = v7;
      *((void *)&v156 + 1) = v14;
      *(_OWORD *)std::string __p = 0u;
      long long v147 = 0u;
      int v148 = 0;
      std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v154);
      int v148 = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v12, v13, (AMCP *)__p);
      if (v148) {
        v148(0, (uint64_t)__p, 0, 0);
      }
      std::__function::__value_func<applesauce::CF::StringRef ()(void)>::~__value_func[abi:ne180100](&v154);
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(v12);
      long long v160 = v151;
      if (v4)
      {
        uint64_t v134 = v151;
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v16 = v134;
        unint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        unsigned int v3 = a2;
      }
      else
      {
        uint64_t v16 = v151;
        unint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      }
      *((void *)&v156 + 1) = 0;
      uint64_t v18 = operator new(0x28uLL);
      *uint64_t v18 = &unk_1F1474370;
      v18[1] = v138;
      uint64_t v18[2] = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v18 + 6) = v6;
      *(void *)((char *)v18 + 28) = v15;
      *((_DWORD *)v18 + 9) = v7;
      *((void *)&v156 + 1) = v18;
      *(_OWORD *)std::string __p = 0u;
      long long v147 = 0u;
      int v148 = 0;
      std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v154);
      int v148 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v16, Has_Property, (AMCP *)__p);
      if (v148) {
        v148(0, (uint64_t)__p, 0, 0);
      }
      std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v154);
      if (v4)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      if ((void)v160) {
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v160 + 40), &v160);
      }
      if (*((void *)&v160 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v160 + 1));
      }
      ++v7;
    }
    while (v7 <= v3);
    uint64_t v5 = v126 + 1;
  }
  while (v126 != 3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  int v19 = *(std::__shared_weak_count **)(a1 + 32);
  uint64_t v139 = *(void *)(a1 + 24);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = 0;
  int v21 = *(_DWORD *)(a1 + 44);
  unsigned __int32 v123 = vdup_n_s32(0x6C63636Eu).u32[0];
  do
  {
    unsigned int v22 = 0;
    uint64_t v127 = v20;
    uint64_t v23 = AMCP::Property_Traits<1818452846u>::k_valid_scopes[v20];
    LODWORD(v24) = v123;
    HIDWORD(v24) = AMCP::Property_Traits<1818452846u>::k_valid_scopes[v20];
    double v131 = v24;
    do
    {
      uint64_t v25 = 0;
      long long v160 = 0uLL;
      while (v23 != AMCP::Property_Traits<1818452846u>::k_valid_scopes[v25])
      {
        if (++v25 == 4)
        {
          uint64_t v26 = 1735159650;
          if (!v19) {
            goto LABEL_48;
          }
          goto LABEL_47;
        }
      }
      uint64_t v26 = v23;
      if (!v19) {
        goto LABEL_48;
      }
LABEL_47:
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_48:
      std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v151, v22, v131);
      uint64_t v27 = v151;
      unint64_t v28 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((void *)&v156 + 1) = 0;
      uint64_t v29 = operator new(0x28uLL);
      *uint64_t v29 = &unk_1F14743F0;
      v29[1] = v139;
      uint64_t v29[2] = v19;
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v29 + 6) = v21;
      uint64_t v30 = (v26 << 32) | 0x6C63636E;
      *(void *)((char *)v29 + 28) = v30;
      *((_DWORD *)v29 + 9) = v22;
      *((void *)&v156 + 1) = v29;
      *(_OWORD *)std::string __p = 0u;
      long long v147 = 0u;
      int v148 = 0;
      std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v154);
      int v148 = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v27, v28, (AMCP *)__p);
      if (v148) {
        v148(0, (uint64_t)__p, 0, 0);
      }
      std::__function::__value_func<applesauce::CF::StringRef ()(void)>::~__value_func[abi:ne180100](&v154);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(v27);
      long long v160 = v151;
      if (v19)
      {
        uint64_t v135 = v151;
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v31 = v135;
        unint64_t v32 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        unsigned int v3 = a2;
      }
      else
      {
        uint64_t v31 = v151;
        unint64_t v32 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      }
      *((void *)&v156 + 1) = 0;
      uint64_t v33 = operator new(0x28uLL);
      *uint64_t v33 = &unk_1F1474470;
      v33[1] = v139;
      double v33[2] = v19;
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v33 + 6) = v21;
      *(void *)((char *)v33 + 28) = v30;
      *((_DWORD *)v33 + 9) = v22;
      *((void *)&v156 + 1) = v33;
      *(_OWORD *)std::string __p = 0u;
      long long v147 = 0u;
      int v148 = 0;
      std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v154);
      int v148 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v31, v32, (AMCP *)__p);
      if (v148) {
        v148(0, (uint64_t)__p, 0, 0);
      }
      std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v154);
      if (v19)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      if ((void)v160) {
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v160 + 40), &v160);
      }
      if (*((void *)&v160 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v160 + 1));
      }
      ++v22;
    }
    while (v22 <= v3);
    uint64_t v20 = v127 + 1;
  }
  while (v127 != 3);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  int v34 = *(std::__shared_weak_count **)(a1 + 32);
  uint64_t v140 = *(void *)(a1 + 24);
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v35 = 0;
  int v36 = *(_DWORD *)(a1 + 44);
  unsigned __int32 v124 = vdup_n_s32(0x6C636E6Eu).u32[0];
  do
  {
    unsigned int v37 = 0;
    uint64_t v128 = v35;
    uint64_t v38 = AMCP::Property_Traits<1818455662u>::k_valid_scopes[v35];
    LODWORD(v39) = v124;
    HIDWORD(v39) = AMCP::Property_Traits<1818455662u>::k_valid_scopes[v35];
    double v132 = v39;
    do
    {
      uint64_t v40 = 0;
      long long v160 = 0uLL;
      while (v38 != AMCP::Property_Traits<1818455662u>::k_valid_scopes[v40])
      {
        if (++v40 == 4)
        {
          uint64_t v41 = 1735159650;
          if (!v34) {
            goto LABEL_84;
          }
          goto LABEL_83;
        }
      }
      uint64_t v41 = v38;
      if (!v34) {
        goto LABEL_84;
      }
LABEL_83:
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_84:
      std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v151, v37, v132);
      uint64_t v42 = v151;
      unint64_t v43 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((void *)&v156 + 1) = 0;
      uint64_t v44 = operator new(0x28uLL);
      *uint64_t v44 = &unk_1F14744F0;
      v44[1] = v140;
      v44[2] = v34;
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v44 + 6) = v36;
      uint64_t v45 = ((v41 << 32) | 0x6C63636E) + 2816;
      *(void *)((char *)v44 + 28) = v45;
      *((_DWORD *)v44 + 9) = v37;
      *((void *)&v156 + 1) = v44;
      *(_OWORD *)std::string __p = 0u;
      long long v147 = 0u;
      int v148 = 0;
      std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v154);
      int v148 = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v42, v43, (AMCP *)__p);
      if (v148) {
        v148(0, (uint64_t)__p, 0, 0);
      }
      std::__function::__value_func<applesauce::CF::StringRef ()(void)>::~__value_func[abi:ne180100](&v154);
      if (v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
      AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(v42);
      long long v160 = v151;
      if (v34)
      {
        uint64_t v136 = v151;
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v46 = v136;
        unint64_t v47 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
        unsigned int v3 = a2;
      }
      else
      {
        uint64_t v46 = v151;
        unint64_t v47 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      }
      *((void *)&v156 + 1) = 0;
      unint64_t v48 = operator new(0x28uLL);
      *unint64_t v48 = &unk_1F1474570;
      v48[1] = v140;
      v48[2] = v34;
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v48 + 6) = v36;
      *(void *)((char *)v48 + 28) = v45;
      *((_DWORD *)v48 + 9) = v37;
      *((void *)&v156 + 1) = v48;
      *(_OWORD *)std::string __p = 0u;
      long long v147 = 0u;
      int v148 = 0;
      std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v154);
      int v148 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v46, v47, (AMCP *)__p);
      if (v148) {
        v148(0, (uint64_t)__p, 0, 0);
      }
      std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v154);
      if (v34)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
      if ((void)v160) {
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v160 + 40), &v160);
      }
      if (*((void *)&v160 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v160 + 1));
      }
      ++v37;
    }
    while (v37 <= v3);
    uint64_t v35 = v128 + 1;
  }
  while (v128 != 3);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  uint64_t v49 = *(AMCP::ASP::PlugIn **)(a1 + 24);
  uint64_t v50 = *(unsigned int *)(a1 + 44);
  __p[0] = (void *)0x676C6F6263757374;
  LODWORD(__p[1]) = 0;
  if (!AMCP::ASP::PlugIn::ObjectHasProperty(v49, v50, 0, (const AudioObjectPropertyAddress *)__p)) {
    return;
  }
  uint64_t v51 = *(AMCP::ASP::PlugIn **)(a1 + 24);
  uint64_t v52 = *(unsigned int *)(a1 + 44);
  uint64_t v154 = 0x676C6F6263757374;
  LODWORD(v155) = 0;
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(v51, v52, 0, (const AudioObjectPropertyAddress *)&v154, 0, 0);
  if (PropertyDataSize || HIDWORD(PropertyDataSize) <= 0xB) {
    return;
  }
  std::vector<AudioServerPlugInCustomPropertyInfo>::vector(__p, HIDWORD(PropertyDataSize) / 0xCuLL);
  PropertyCFDataRef Data = AMCP::ASP::PlugIn::ObjectGetPropertyData(v51, v52, 0, (const AudioObjectPropertyAddress *)&v154, 0, 0, (LODWORD(__p[1]) - LODWORD(__p[0])) & 0xFFFFFFFC, __p[0]);
  uint64_t v55 = __p[0];
  int64_t v56 = (char *)__p[1] - (char *)__p[0];
  if (__p[1] != __p[0])
  {
    if (0xAAAAAAAAAAAAAAABLL * (v56 >> 2) >= 0x1555555555555556) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    CFStringRef v57 = std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(0xAAAAAAAAAAAAAAABLL * (v56 >> 2));
    memmove(v57, v55, v56);
    unint64_t v118 = &v57[v56 >> 2];
    uint64_t v55 = __p[0];
    if (!__p[0]) {
      goto LABEL_116;
    }
    goto LABEL_115;
  }
  CFStringRef v57 = 0;
  unint64_t v118 = 0;
  if (__p[0])
  {
LABEL_115:
    __p[1] = v55;
    operator delete(v55);
  }
LABEL_116:
  unsigned int v58 = a2;
  if (!PropertyData && v57 != v118)
  {
    if (AMCP::is_base_of((AMCP *)0x61646576, *(_DWORD *)(a1 + 68)))
    {
      CFTypeRef v59 = operator new(0x10uLL);
      *CFTypeRef v59 = xmmword_1BAFF9670;
      unint64_t v60 = v59 + 1;
    }
    else
    {
      CFTypeRef v59 = operator new(4uLL);
      *(_DWORD *)CFTypeRef v59 = 1735159650;
      unint64_t v60 = (_OWORD *)((char *)v59 + 4);
    }
    std::locale v121 = v60;
    uint64_t v117 = v57;
    std::locale v119 = v59;
    while (1)
    {
      unint64_t v61 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v141 = *(void *)(a1 + 24);
      if (v61) {
        atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v59 != v121) {
        break;
      }
LABEL_285:
      if (v61) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v61);
      }
      v57 += 3;
      CFTypeRef v59 = v119;
      if (v57 == v118)
      {
        operator delete(v119);
        CFStringRef v57 = v117;
        goto LABEL_289;
      }
    }
    int v137 = *(_DWORD *)(a1 + 44);
    int v133 = v119;
LABEL_128:
    int v62 = 0;
    while (1)
    {
      uint64_t v63 = *v133;
      uint64_t v65 = (AMCP *)*v57;
      int v64 = v57[1];
      LODWORD(v66) = *v57;
      HIDWORD(v66) = *v133;
      if (v64 == 1667658612) {
        break;
      }
      if (v64 != 1918990199)
      {
        if (v64 != 1886155636) {
          goto LABEL_149;
        }
        int v67 = 3;
        char v68 = 1;
        goto LABEL_148;
      }
      if (!v57[2])
      {
        if (v61)
        {
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v144, v62, v66);
        uint64_t v69 = v144;
        unint64_t v70 = AMCP::Implementation::get_type_marker<std::function<AMCP::Bag_O_Bytes ()(void)>>();
        if (v61) {
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *((void *)&v156 + 1) = 0;
        uint64_t v71 = operator new(0x28uLL);
        void *v71 = &unk_1F1472CD8;
        v71[1] = v141;
        v71[2] = v61;
        if (v61) {
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *((_DWORD *)v71 + 6) = v137;
        *((_DWORD *)v71 + 7) = v65;
        *((_DWORD *)v71 + 8) = v63;
        *((_DWORD *)v71 + 9) = v62;
        *((void *)&v156 + 1) = v71;
        *(_OWORD *)std::string __p = 0u;
        long long v147 = 0u;
        int v148 = 0;
        std::__function::__value_func<AMCP::Bag_O_Bytes ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v154);
        int v148 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Bag_O_Bytes ()(void)>>::dispatch;
        std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v69, v70, (AMCP *)__p);
        if (v148) {
          v148(0, (uint64_t)__p, 0, 0);
        }
        std::__function::__value_func<AMCP::Bag_O_Bytes ()(void)>::~__value_func[abi:ne180100](&v154);
        if (v61) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v61);
        }
        std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v154, v69);
        uint64_t v158 = *(void *)(v69 + 40);
        int v159 = *(_DWORD *)(v69 + 48);
        unint64_t v72 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
        uint64_t v73 = (void *)v154;
        unint64_t v74 = v155;
        uint64_t v154 = 0;
        unint64_t v155 = 0;
        __p[0] = v73;
        __p[1] = (void *)v74;
        long long v147 = v156;
        LODWORD(v148) = v157;
        if (*((void *)&v156 + 1))
        {
          unint64_t v75 = *(void *)(v156 + 8);
          if ((v74 & (v74 - 1)) != 0)
          {
            if (v75 >= v74) {
              v75 %= v74;
            }
          }
          else
          {
            v75 &= v74 - 1;
          }
          *((void *)v73 + v75) = &v147;
          long long v156 = 0uLL;
        }
        uint64_t v149 = v158;
        int v150 = v159;
        int v161 = 0;
        AudioObjectPropertyElement v91 = operator new(0x40uLL);
        void *v91 = &unk_1F1472D68;
        std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v91 + 1), (uint64_t *)__p);
        void v91[6] = v149;
        *((_DWORD *)v91 + 14) = v150;
        int v161 = v91;
        long long v151 = 0u;
        long long v152 = 0u;
        uint64_t v153 = 0;
        std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)&v151, (uint64_t)&v160);
        uint64_t v153 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
        std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v69, v72, (AMCP *)&v151);
        if (v153) {
          v153(0, (uint64_t)&v151, 0, 0);
        }
        std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](&v160);
        std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
        std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v154);
        unint64_t v92 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Bag_O_Bytes const&)>>();
        if (v61) {
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *((void *)&v156 + 1) = 0;
        AudioObjectPropertyElement v93 = operator new(0x28uLL);
        *AudioObjectPropertyElement v93 = &unk_1F1472E58;
        v93[1] = v141;
        v93[2] = v61;
        if (v61) {
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *((_DWORD *)v93 + 6) = v137;
        *((_DWORD *)v93 + 7) = v65;
        *((_DWORD *)v93 + 8) = v63;
        *((_DWORD *)v93 + 9) = v62;
        *((void *)&v156 + 1) = v93;
        *(_OWORD *)std::string __p = 0u;
        long long v147 = 0u;
        int v148 = 0;
        std::__function::__value_func<void ()(AMCP::Bag_O_Bytes const&)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v154);
        int v148 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Bag_O_Bytes const&)>>::dispatch;
        std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v69, v92, (AMCP *)__p);
        if (v148) {
          v148(0, (uint64_t)__p, 0, 0);
        }
        std::__function::__value_func<void ()(AMCP::Bag_O_Bytes const&)>::~__value_func[abi:ne180100](&v154);
        if (v61) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v61);
        }
        std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v154, v69);
        uint64_t v158 = *(void *)(v69 + 40);
        int v159 = *(_DWORD *)(v69 + 48);
        unint64_t v94 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
        uint64_t v95 = (void *)v154;
        unint64_t v96 = v155;
        uint64_t v154 = 0;
        unint64_t v155 = 0;
        __p[0] = v95;
        __p[1] = (void *)v96;
        long long v147 = v156;
        LODWORD(v148) = v157;
        if (*((void *)&v156 + 1))
        {
          unint64_t v97 = *(void *)(v156 + 8);
          if ((v96 & (v96 - 1)) != 0)
          {
            if (v97 >= v96) {
              v97 %= v96;
            }
          }
          else
          {
            v97 &= v96 - 1;
          }
          *((void *)v95 + v97) = &v147;
          long long v156 = 0uLL;
        }
        uint64_t v149 = v158;
        int v150 = v159;
        int v161 = 0;
        CFTypeRef v98 = operator new(0x40uLL);
        *CFTypeRef v98 = &unk_1F1472EE8;
        std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v98 + 1), (uint64_t *)__p);
        v98[6] = v149;
        *((_DWORD *)v98 + 14) = v150;
        int v161 = v98;
        long long v151 = 0u;
        long long v152 = 0u;
        uint64_t v153 = 0;
        std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)&v151, (uint64_t)&v160);
        uint64_t v153 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
        std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v69, v94, (AMCP *)&v151);
        if (v153) {
          v153(0, (uint64_t)&v151, 0, 0);
        }
        std::__function::__value_func<void ()(AMCP::Thing const&)>::~__value_func[abi:ne180100](&v160);
        std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
        std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v154);
        if (v61)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v61);
          std::__shared_weak_count::__release_shared[abi:ne180100](v61);
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
          unint64_t Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        else
        {
          unint64_t Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
        }
        *((void *)&v156 + 1) = 0;
        long long v100 = operator new(0x28uLL);
        *long long v100 = &unk_1F1472F68;
        v100[1] = v141;
        uint64_t v100[2] = v61;
        if (v61) {
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *((_DWORD *)v100 + 6) = v137;
        *((_DWORD *)v100 + 7) = v65;
        *((_DWORD *)v100 + 8) = v63;
        *((_DWORD *)v100 + 9) = v62;
        *((void *)&v156 + 1) = v100;
        *(_OWORD *)std::string __p = 0u;
        long long v147 = 0u;
        int v148 = 0;
        std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v154);
        int v148 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
        std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v69, Is_Property_Settable, (AMCP *)__p);
        if (v148) {
          v148(0, (uint64_t)__p, 0, 0);
        }
        std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::~__value_func[abi:ne180100](&v154);
        if (v61)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v61);
          std::__shared_weak_count::__release_shared[abi:ne180100](v61);
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
          unint64_t v101 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        else
        {
          unint64_t v101 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
        }
        *((void *)&v156 + 1) = 0;
        CFTypeRef v102 = operator new(0x28uLL);
        *CFTypeRef v102 = &unk_1F1472FF8;
        v102[1] = v141;
        void v102[2] = v61;
        if (v61) {
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *((_DWORD *)v102 + 6) = v137;
        *((_DWORD *)v102 + 7) = v65;
        *((_DWORD *)v102 + 8) = v63;
        *((_DWORD *)v102 + 9) = v62;
        *((void *)&v156 + 1) = v102;
        *(_OWORD *)std::string __p = 0u;
        long long v147 = 0u;
        int v148 = 0;
        std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v154);
        int v148 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
        std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v69, v101, (AMCP *)__p);
        if (v148) {
          v148(0, (uint64_t)__p, 0, 0);
        }
        std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v154);
        if (v61)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v61);
          std::__shared_weak_count::__release_shared[abi:ne180100](v61);
        }
        unint64_t Property_Type_Hint = AMCP::Implementation::get_type_marker<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>();
        uint64_t v154 = (uint64_t)&unk_1F14730F8;
        *((void *)&v156 + 1) = &v154;
        *(_OWORD *)std::string __p = 0u;
        long long v147 = 0u;
        int v148 = 0;
        std::__function::__value_func<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v154);
        int v148 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>::dispatch;
        std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v69, Property_Type_Hint, (AMCP *)__p);
        if (v148) {
          goto LABEL_279;
        }
        goto LABEL_280;
      }
LABEL_149:
      uint64_t v144 = 0;
      uint64_t v145 = 0;
LABEL_281:
      if (v145) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v145);
      }
      if (++v62 > v58)
      {
        if (++v133 == (_DWORD *)v121) {
          goto LABEL_285;
        }
        goto LABEL_128;
      }
    }
    char v68 = 0;
    int v67 = 4;
LABEL_148:
    if (!v57[2])
    {
      double v129 = v66;
      int v125 = v67;
      AMCP::get_property_traits(v65, (uint64_t)__p);
      uint64_t v76 = 0x676C6F6200000000;
      if (__p[1] != (void *)v147)
      {
        uint64_t v77 = __p[1];
        while (v63 != *v77)
        {
          if (++v77 == (_DWORD *)v147)
          {
            uint64_t v76 = 0x676C6F6200000000;
            goto LABEL_156;
          }
        }
        uint64_t v76 = v63 << 32;
      }
LABEL_156:
      unsigned int v78 = HIDWORD(v148);
      if (__p[1]) {
        operator delete(__p[1]);
      }
      if (v78) {
        uint64_t v79 = v78;
      }
      else {
        uint64_t v79 = v65;
      }
      uint64_t v80 = v76 | v79;
      if (v61)
      {
        p_shared_owners = &v61->__shared_owners_;
        atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
        double v82 = v129;
        if (v68)
        {
          if (v79 == 1684234612)
          {
            atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
            goto LABEL_167;
          }
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
          unint64_t v85 = v61;
LABEL_239:
          std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v144, v62, v82);
          uint64_t v69 = v144;
          unint64_t v104 = AMCP::Implementation::get_type_marker<std::function<mcp_applesauce::CF::PropertyListRef ()(void)>>();
          if (v61) {
            atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *((void *)&v156 + 1) = 0;
          std::string v105 = operator new(0x28uLL);
          *std::string v105 = &unk_1F14732F0;
          v105[1] = v141;
          uint64_t v105[2] = v61;
          if (v61) {
            atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *((_DWORD *)v105 + 6) = v137;
          *(void *)((char *)v105 + 28) = v80;
          *((_DWORD *)v105 + 9) = v62;
          *((void *)&v156 + 1) = v105;
          *(_OWORD *)std::string __p = 0u;
          long long v147 = 0u;
          int v148 = 0;
          std::__function::__value_func<mcp_applesauce::CF::PropertyListRef ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v154);
          int v148 = AMCP::Implementation::In_Place_Storage<std::function<mcp_applesauce::CF::PropertyListRef ()(void)>>::dispatch;
          std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v69, v104, (AMCP *)__p);
          if (v148) {
            v148(0, (uint64_t)__p, 0, 0);
          }
          std::__function::__value_func<mcp_applesauce::CF::PropertyListRef ()(void)>::~__value_func[abi:ne180100](&v154);
          if (v61) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v61);
          }
          AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(v69);
          unint64_t v106 = AMCP::Implementation::get_type_marker<std::function<void ()(mcp_applesauce::CF::PropertyListRef const&)>>();
          if (v61) {
            atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *((void *)&v156 + 1) = 0;
          CFTypeRef v107 = operator new(0x28uLL);
          *CFTypeRef v107 = &unk_1F14733E0;
          v107[1] = v141;
          v107[2] = v85;
          if (v61) {
            atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *((_DWORD *)v107 + 6) = v137;
          *(void *)((char *)v107 + 28) = v80;
          *((_DWORD *)v107 + 9) = v62;
          *((void *)&v156 + 1) = v107;
          *(_OWORD *)std::string __p = 0u;
          long long v147 = 0u;
          int v148 = 0;
          std::__function::__value_func<void ()(mcp_applesauce::CF::PropertyListRef const&)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v154);
          int v148 = AMCP::Implementation::In_Place_Storage<std::function<void ()(mcp_applesauce::CF::PropertyListRef const&)>>::dispatch;
          std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v69, v106, (AMCP *)__p);
          if (v148) {
            v148(0, (uint64_t)__p, 0, 0);
          }
          std::__function::__value_func<void ()(mcp_applesauce::CF::PropertyListRef const&)>::~__value_func[abi:ne180100](&v154);
          if (v61) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v85);
          }
          std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v154, v69);
          uint64_t v158 = *(void *)(v69 + 40);
          int v159 = *(_DWORD *)(v69 + 48);
          unint64_t v108 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
          long long v109 = (void *)v154;
          unint64_t v110 = v155;
          uint64_t v154 = 0;
          unint64_t v155 = 0;
          __p[0] = v109;
          __p[1] = (void *)v110;
          long long v147 = v156;
          LODWORD(v148) = v157;
          if (*((void *)&v156 + 1))
          {
            unint64_t v111 = *(void *)(v156 + 8);
            if ((v110 & (v110 - 1)) != 0)
            {
              if (v111 >= v110) {
                v111 %= v110;
              }
            }
            else
            {
              v111 &= v110 - 1;
            }
            *((void *)v109 + v111) = &v147;
            long long v156 = 0uLL;
          }
          uint64_t v149 = v158;
          int v150 = v159;
          int v161 = 0;
          uint64_t v112 = operator new(0x40uLL);
          *uint64_t v112 = &unk_1F1473470;
          std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v112 + 1), (uint64_t *)__p);
          v112[6] = v149;
          *((_DWORD *)v112 + 14) = v150;
          int v161 = v112;
          long long v151 = 0u;
          long long v152 = 0u;
          uint64_t v153 = 0;
          std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)&v151, (uint64_t)&v160);
          uint64_t v153 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
          std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v69, v108, (AMCP *)&v151);
          if (v153) {
            v153(0, (uint64_t)&v151, 0, 0);
          }
          std::__function::__value_func<void ()(AMCP::Thing const&)>::~__value_func[abi:ne180100](&v160);
          std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
          std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v154);
          if (!v61) {
            goto LABEL_264;
          }
LABEL_196:
          std::__shared_weak_count::__release_shared[abi:ne180100](v85);
LABEL_197:
          std::__shared_weak_count::__release_shared[abi:ne180100](v61);
          std::__shared_weak_count::__release_shared[abi:ne180100](v61);
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
          unint64_t v90 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_265;
        }
        atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
        unint64_t v85 = v61;
LABEL_179:
        std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v144, v62, v82);
        uint64_t v69 = v144;
        unint64_t v86 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
        if (v61) {
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *((void *)&v156 + 1) = 0;
        uint64_t v87 = operator new(0x28uLL);
        void *v87 = &unk_1F14734F0;
        v87[1] = v141;
        v87[2] = v61;
        if (v61) {
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *((_DWORD *)v87 + 6) = v137;
        *(void *)((char *)v87 + 28) = v80;
        *((_DWORD *)v87 + 9) = v62;
        *((void *)&v156 + 1) = v87;
        *(_OWORD *)std::string __p = 0u;
        long long v147 = 0u;
        int v148 = 0;
        std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v154);
        int v148 = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
        std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v69, v86, (AMCP *)__p);
        if (v148) {
          v148(0, (uint64_t)__p, 0, 0);
        }
        std::__function::__value_func<applesauce::CF::StringRef ()(void)>::~__value_func[abi:ne180100](&v154);
        if (v61) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v61);
        }
        AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(v69);
        unint64_t v88 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::StringRef const&)>>();
        if (v61) {
          atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *((void *)&v156 + 1) = 0;
        uint64_t v89 = operator new(0x28uLL);
        *uint64_t v89 = &unk_1F14735E0;
        v89[1] = v141;
        v89[2] = v85;
        if (v61) {
          atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *((_DWORD *)v89 + 6) = v137;
        *(void *)((char *)v89 + 28) = v80;
        *((_DWORD *)v89 + 9) = v62;
        *((void *)&v156 + 1) = v89;
        *(_OWORD *)std::string __p = 0u;
        long long v147 = 0u;
        int v148 = 0;
        std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v154);
        int v148 = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::StringRef const&)>>::dispatch;
        std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v69, v88, (AMCP *)__p);
        if (v148) {
          v148(0, (uint64_t)__p, 0, 0);
        }
        std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::~__value_func[abi:ne180100](&v154);
        if (v61) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v85);
        }
        AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(v69);
        if (!v61) {
          goto LABEL_264;
        }
        goto LABEL_196;
      }
      double v82 = v129;
      if ((v68 & 1) == 0)
      {
        unint64_t v85 = 0;
        goto LABEL_179;
      }
      if (v79 != 1684234612)
      {
        unint64_t v85 = 0;
        goto LABEL_239;
      }
LABEL_167:
      std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v144, v62, v82);
      uint64_t v69 = v144;
      unint64_t v83 = AMCP::Implementation::get_type_marker<std::function<mcp_applesauce::CF::PropertyListRef ()(void)>>();
      if (v61) {
        atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((void *)&v156 + 1) = 0;
      uint64_t v84 = operator new(0x28uLL);
      *uint64_t v84 = &unk_1F14731E0;
      v84[1] = v141;
      v84[2] = v61;
      if (v61) {
        atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v84 + 6) = v137;
      *((_DWORD *)v84 + 7) = v65;
      *((_DWORD *)v84 + 8) = v63;
      *((_DWORD *)v84 + 9) = v62;
      *((void *)&v156 + 1) = v84;
      *(_OWORD *)std::string __p = 0u;
      long long v147 = 0u;
      int v148 = 0;
      std::__function::__value_func<mcp_applesauce::CF::PropertyListRef ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v154);
      int v148 = AMCP::Implementation::In_Place_Storage<std::function<mcp_applesauce::CF::PropertyListRef ()(void)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v69, v83, (AMCP *)__p);
      if (v148) {
        v148(0, (uint64_t)__p, 0, 0);
      }
      std::__function::__value_func<mcp_applesauce::CF::PropertyListRef ()(void)>::~__value_func[abi:ne180100](&v154);
      if (v61) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v61);
      }
      AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(v69);
      if (v61) {
        goto LABEL_197;
      }
LABEL_264:
      unint64_t v90 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
LABEL_265:
      *((void *)&v156 + 1) = 0;
      int v113 = operator new(0x28uLL);
      void *v113 = &unk_1F14736F0;
      v113[1] = v141;
      v113[2] = v61;
      if (v61) {
        atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v113 + 6) = v137;
      *(void *)((char *)v113 + 28) = v80;
      *((_DWORD *)v113 + 9) = v62;
      *((void *)&v156 + 1) = v113;
      *(_OWORD *)std::string __p = 0u;
      long long v147 = 0u;
      int v148 = 0;
      std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v154);
      int v148 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v69, v90, (AMCP *)__p);
      if (v148) {
        v148(0, (uint64_t)__p, 0, 0);
      }
      std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::~__value_func[abi:ne180100](&v154);
      if (v61)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v61);
        std::__shared_weak_count::__release_shared[abi:ne180100](v61);
        atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
        unint64_t v114 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
        atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        unint64_t v114 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      }
      *((void *)&v156 + 1) = 0;
      uint64_t v115 = operator new(0x28uLL);
      *uint64_t v115 = &unk_1F1473770;
      v115[1] = v141;
      v115[2] = v61;
      if (v61) {
        atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v115 + 6) = v137;
      *(void *)((char *)v115 + 28) = v80;
      *((_DWORD *)v115 + 9) = v62;
      *((void *)&v156 + 1) = v115;
      *(_OWORD *)std::string __p = 0u;
      long long v147 = 0u;
      int v148 = 0;
      std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v154);
      int v148 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v69, v114, (AMCP *)__p);
      if (v148) {
        v148(0, (uint64_t)__p, 0, 0);
      }
      std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](&v154);
      if (v61)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v61);
        std::__shared_weak_count::__release_shared[abi:ne180100](v61);
      }
      unint64_t v116 = AMCP::Implementation::get_type_marker<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>();
      uint64_t v154 = (uint64_t)&unk_1F14737F0;
      LODWORD(v155) = v125;
      *((void *)&v156 + 1) = &v154;
      *(_OWORD *)std::string __p = 0u;
      long long v147 = 0u;
      int v148 = 0;
      std::__function::__value_func<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v154);
      int v148 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v69, v116, (AMCP *)__p);
      if (v148) {
LABEL_279:
      }
        v148(0, (uint64_t)__p, 0, 0);
LABEL_280:
      std::__function::__value_func<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::~__value_func[abi:ne180100](&v154);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v69 + 40), &v144);
      unsigned int v58 = a2;
      goto LABEL_281;
    }
    goto LABEL_149;
  }
LABEL_289:
  if (v57) {
    operator delete(v57);
  }
}

void sub_1BADD2F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (v40) {
    operator delete(v40);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<AMCP::Bag_O_Bytes ()(void)>>()
{
  uint64_t v0 = &unk_1E9F79000;
  {
    uint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      uint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[321];
}

uint64_t std::__function::__value_func<AMCP::Bag_O_Bytes ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    unsigned int v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<AMCP::Bag_O_Bytes ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Bag_O_Bytes const&)>>()
{
  uint64_t v0 = &unk_1E9F79000;
  {
    uint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      uint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[323];
}

uint64_t std::__function::__value_func<void ()(AMCP::Bag_O_Bytes const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    unsigned int v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(AMCP::Bag_O_Bytes const&)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    unsigned int v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    unsigned int v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    unsigned int v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<mcp_applesauce::CF::PropertyListRef ()(void)>>()
{
  uint64_t v0 = &unk_1E9F79000;
  {
    uint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      uint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[327];
}

uint64_t std::__function::__value_func<mcp_applesauce::CF::PropertyListRef ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    unsigned int v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<mcp_applesauce::CF::PropertyListRef ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  uint64_t v23 = 0;
  int v6 = operator new(0x40uLL);
  *int v6 = &unk_1F1473270;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  void v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  uint64_t v23 = v6;
  memset(v20, 0, sizeof(v20));
  int v21 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  int v21 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BADD39D8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(mcp_applesauce::CF::PropertyListRef const&)>>()
{
  uint64_t v0 = &unk_1E9F79000;
  {
    uint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      uint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[329];
}

uint64_t std::__function::__value_func<void ()(mcp_applesauce::CF::PropertyListRef const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(mcp_applesauce::CF::PropertyListRef const&)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_3>,AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_3>,AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASPL25make_custom_property_N_CFERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjNS_18Property_Type_CodeEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_3>,AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::operator()(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_3>,AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F14737F0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_3>,AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F14737F0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_3>,AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::~__func()
{
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2>,BOOL ()(AMCP::Core::Has_Property_Function)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2>,BOOL ()(AMCP::Core::Has_Property_Function)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASPL25make_custom_property_N_CFERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjNS_18Property_Type_CodeEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2>,BOOL ()(AMCP::Core::Has_Property_Function)>::operator()(uint64_t a1)
{
  return AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2>,BOOL ()(AMCP::Core::Has_Property_Function)>::destroy_deallocate(void *__p)
{
  int v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2>,BOOL ()(AMCP::Core::Has_Property_Function)>::destroy(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2>,BOOL ()(AMCP::Core::Has_Property_Function)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1473770;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2>,BOOL ()(AMCP::Core::Has_Property_Function)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1473770;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2>,BOOL ()(AMCP::Core::Has_Property_Function)>::~__func(void *a1)
{
  *a1 = &unk_1F1473770;
  int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_2>,BOOL ()(AMCP::Core::Has_Property_Function)>::~__func(void *a1)
{
  *a1 = &unk_1F1473770;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASPL25make_custom_property_N_CFERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjNS_18Property_Type_CodeEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::operator()(uint64_t a1)
{
  unint64_t IsPropertySettable = AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
  if (IsPropertySettable) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = HIDWORD(IsPropertySettable) == 0;
  }
  return !v2;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::destroy_deallocate(void *__p)
{
  BOOL v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::destroy(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14736F0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14736F0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::~__func(void *a1)
{
  *a1 = &unk_1F14736F0;
  int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_1>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::~__func(void *a1)
{
  *a1 = &unk_1F14736F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2}>,void ()(applesauce::CF::StringRef const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2}>,void ()(applesauce::CF::StringRef const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN4AMCP3ASPL25make_custom_property_N_CFERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjNS_18Property_Type_CodeEENK3$_0clEvEUlRKNS_5ThingEE0_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2}>,void ()(applesauce::CF::StringRef const&)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::construct<applesauce::CF::StringRef const&>((uint64_t)v10, a2);
  if (!v11) {
    goto LABEL_12;
  }
  uint64_t v3 = AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>();
  uint64_t v4 = v11;
  *(void *)&v14[0] = 0;
  if (v11)
  {
    v11(3, v10, 0, v14);
    uint64_t v4 = *(void (**)(void, void, void, void))&v14[0];
  }
  if (v4 == (void (*)(void, void, void, void))v3)
  {
    *(void *)&v14[0] = v3;
    unint64_t v5 = (CFTypeRef *)((uint64_t (*)(uint64_t, _OWORD *, void, _OWORD *))v11)(4, v10, 0, v14);
    if (v5)
    {
      CFTypeRef v6 = *v5;
      if (*v5) {
        CFRetain(*v5);
      }
      goto LABEL_13;
    }
LABEL_12:
    CFTypeRef v6 = 0;
    goto LABEL_13;
  }
  uint64_t v13 = AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>();
  memset(v14, 0, sizeof(v14));
  uint64_t v15 = 0;
  v11(6, v10, v14, &v13);
  if (!v15) {
    goto LABEL_12;
  }
  uint64_t v12 = v3;
  unsigned int v7 = (CFTypeRef *)v15(4, v14, 0, &v12);
  if (v7)
  {
    CFTypeRef v6 = *v7;
    if (*v7) {
      CFRetain(*v7);
    }
  }
  else
  {
    CFTypeRef v6 = 0;
  }
  if (v15) {
    v15(0, v14, 0, 0);
  }
LABEL_13:
  uint64_t v8 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  *(void *)&v14[0] = v6;
  AMCP::ASP::PlugIn::ObjectSetPropertyData(v8, v9, 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, 8, v14);
  if (v6) {
    CFRelease(v6);
  }
  if (v11) {
    v11(0, v10, 0, 0);
  }
}

void sub_1BADD4258(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  __clang_call_terminate(a1);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2}>,void ()(applesauce::CF::StringRef const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2}>,void ()(applesauce::CF::StringRef const&)>::destroy(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2}>,void ()(applesauce::CF::StringRef const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14735E0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2}>,void ()(applesauce::CF::StringRef const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14735E0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2}>,void ()(applesauce::CF::StringRef const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14735E0;
  int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#2}>,void ()(applesauce::CF::StringRef const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14735E0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2}>,applesauce::CF::StringRef ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2}>,applesauce::CF::StringRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN4AMCP3ASPL25make_custom_property_N_CFERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjNS_18Property_Type_CodeEENK3$_0clEvEUlvE0_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

applesauce::CF::StringRef *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2}>,applesauce::CF::StringRef ()(void)>::operator()@<X0>(uint64_t a1@<X0>, applesauce::CF::StringRef *a2@<X8>)
{
  __n128 result = (applesauce::CF::StringRef *)AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (result == (applesauce::CF::StringRef *)0x800000000
    && (CFTypeRef cf = 0,
        __n128 result = (applesauce::CF::StringRef *)AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, 8, &cf), !result)&& (v5 = cf) != 0)
  {
    CFRetain(cf);
    return applesauce::CF::StringRef::StringRef(a2, v5);
  }
  else
  {
    *(void *)a2 = 0;
  }
  return result;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2}>,applesauce::CF::StringRef ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2}>,applesauce::CF::StringRef ()(void)>::destroy(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2}>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14734F0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2}>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14734F0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2}>,applesauce::CF::StringRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14734F0;
  int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#2}>,applesauce::CF::StringRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14734F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_setterIN14mcp_applesauce2CF15PropertyListRefEEEvRNS0_9OperationEEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  AMCP::Thing::convert_to<mcp_applesauce::CF::PropertyListRef>(&cf, a2);
  unint64_t v3 = AMCP::Implementation::get_type_marker<std::function<void ()(mcp_applesauce::CF::PropertyListRef const&)>>();
  uint64_t v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>((void *)(a1 + 8), v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)uint64_t v31 = 2080;
      *(void *)&v31[2] = "Operation.h";
      __int16 v32 = 1024;
      int v33 = 154;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v24 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    int v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const mcp_applesauce::CF::PropertyListRef &>]";
    uint64_t v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v36 = 154;
    std::vector<void *>::vector(&v16);
    int v14 = backtrace((void **)v16, (*((void *)&v16 + 1) - (void)v16) >> 3);
    std::vector<void *>::resize((char **)&v16, v14);
    long long v19 = v16;
    uint64_t v20 = v17;
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    uint64_t v18 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  CFTypeRef v5 = v4;
  if (!*((void *)v4 + 7)
    || (*(void *)std::string buf = AMCP::Implementation::get_type_marker<std::function<void ()(mcp_applesauce::CF::PropertyListRef const&)>>(),
        (uint64_t v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unsigned int v7 = **(NSObject ***)buf;
    if (*(void *)v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)uint64_t v31 = 2080;
      *(void *)&v31[2] = "Operation.h";
      __int16 v32 = 1024;
      int v33 = 161;
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v24 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    int v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const mcp_applesauce::CF::PropertyListRef &>]";
    uint64_t v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v36 = 161;
    std::vector<void *>::vector(&v16);
    int v10 = backtrace((void **)v16, (*((void *)&v16 + 1) - (void)v16) >> 3);
    std::vector<void *>::resize((char **)&v16, v10);
    long long v19 = v16;
    uint64_t v20 = v17;
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    uint64_t v18 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = *((void *)v4 + 3);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v6 + 48))(v6, &cf);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BADD4DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,std::runtime_error a25,uint64_t a26)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1473470;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  unint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F1473470;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  void v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BADD5008(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1473470;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1473470;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(mcp_applesauce::CF::PropertyListRef const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(mcp_applesauce::CF::PropertyListRef const&)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(mcp_applesauce::CF::PropertyListRef const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(mcp_applesauce::CF::PropertyListRef const&)>>::dispatch;
LABEL_6:
      std::__function::__value_func<void ()(mcp_applesauce::CF::PropertyListRef const&)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(mcp_applesauce::CF::PropertyListRef const&)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(mcp_applesauce::CF::PropertyListRef const&)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      uint64_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1}>,void ()(mcp_applesauce::CF::PropertyListRef const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1}>,void ()(mcp_applesauce::CF::PropertyListRef const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN4AMCP3ASPL25make_custom_property_N_CFERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjNS_18Property_Type_CodeEENK3$_0clEvEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1}>,void ()(mcp_applesauce::CF::PropertyListRef const&)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef const&>((uint64_t)v10, a2);
  if (!v11) {
    goto LABEL_12;
  }
  uint64_t v3 = AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>();
  uint64_t v4 = v11;
  *(void *)&v14[0] = 0;
  if (v11)
  {
    v11(3, v10, 0, v14);
    uint64_t v4 = *(void (**)(void, void, void, void))&v14[0];
  }
  if (v4 == (void (*)(void, void, void, void))v3)
  {
    *(void *)&v14[0] = v3;
    CFTypeRef v5 = (CFTypeRef *)((uint64_t (*)(uint64_t, _OWORD *, void, _OWORD *))v11)(4, v10, 0, v14);
    if (v5)
    {
      CFTypeRef v6 = *v5;
      if (*v5) {
        CFRetain(*v5);
      }
      goto LABEL_13;
    }
LABEL_12:
    CFTypeRef v6 = 0;
    goto LABEL_13;
  }
  uint64_t v13 = AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>();
  memset(v14, 0, sizeof(v14));
  uint64_t v15 = 0;
  v11(6, v10, v14, &v13);
  if (!v15) {
    goto LABEL_12;
  }
  uint64_t v12 = v3;
  unsigned int v7 = (CFTypeRef *)v15(4, v14, 0, &v12);
  if (v7)
  {
    CFTypeRef v6 = *v7;
    if (*v7) {
      CFRetain(*v7);
    }
  }
  else
  {
    CFTypeRef v6 = 0;
  }
  if (v15) {
    v15(0, v14, 0, 0);
  }
LABEL_13:
  uint64_t v8 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  *(void *)&v14[0] = v6;
  AMCP::ASP::PlugIn::ObjectSetPropertyData(v8, v9, 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, 8, v14);
  if (v6) {
    CFRelease(v6);
  }
  if (v11) {
    v11(0, v10, 0, 0);
  }
}

void sub_1BADD5458(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  __clang_call_terminate(a1);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1}>,void ()(mcp_applesauce::CF::PropertyListRef const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1}>,void ()(mcp_applesauce::CF::PropertyListRef const&)>::destroy(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1}>,void ()(mcp_applesauce::CF::PropertyListRef const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14733E0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1}>,void ()(mcp_applesauce::CF::PropertyListRef const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14733E0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1}>,void ()(mcp_applesauce::CF::PropertyListRef const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14733E0;
  int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(AMCP::Thing const&)#1}>,void ()(mcp_applesauce::CF::PropertyListRef const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14733E0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1}>,mcp_applesauce::CF::PropertyListRef ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1}>,mcp_applesauce::CF::PropertyListRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN4AMCP3ASPL25make_custom_property_N_CFERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjNS_18Property_Type_CodeEENK3$_0clEvEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

mcp_applesauce::CF::PropertyListRef *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1}>,mcp_applesauce::CF::PropertyListRef ()(void)>::operator()@<X0>(uint64_t a1@<X0>, mcp_applesauce::CF::PropertyListRef *a2@<X8>)
{
  __n128 result = (mcp_applesauce::CF::PropertyListRef *)AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (result == (mcp_applesauce::CF::PropertyListRef *)0x800000000)
  {
    CFTypeRef cf = 0;
    __n128 result = (mcp_applesauce::CF::PropertyListRef *)AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, 8, &cf);
    if (!result) {
      return mcp_applesauce::CF::PropertyListRef::from_get(a2, cf);
    }
  }
  *(void *)a2 = 0;
  return result;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1}>,mcp_applesauce::CF::PropertyListRef ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1}>,mcp_applesauce::CF::PropertyListRef ()(void)>::destroy(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1}>,mcp_applesauce::CF::PropertyListRef ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14732F0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1}>,mcp_applesauce::CF::PropertyListRef ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14732F0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1}>,mcp_applesauce::CF::PropertyListRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14732F0;
  int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<AMCP::ASP::make_custom_property_N_CF(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int,AMCP::Property_Type_Code)::$_0::operator() const(void)::{lambda(void)#1}>,mcp_applesauce::CF::PropertyListRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14732F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIN14mcp_applesauce2CF15PropertyListRefEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)(a1 + 8);
  unint64_t v4 = AMCP::Implementation::get_type_marker<std::function<mcp_applesauce::CF::PropertyListRef ()(void)>>();
  CFTypeRef v5 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v3, v4);
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v12 = **(NSObject ***)buf;
    if (*(void *)v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)uint64_t v31 = 2080;
      *(void *)&v31[2] = "Operation.h";
      __int16 v32 = 1024;
      int v33 = 154;
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v24 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    int v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = mcp_applesauce::CF::P"
          "ropertyListRef, Argument_Types = <>]";
    uint64_t v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v36 = 154;
    std::vector<void *>::vector(&v16);
    int v15 = backtrace((void **)v16, (*((void *)&v16 + 1) - (void)v16) >> 3);
    std::vector<void *>::resize((char **)&v16, v15);
    long long v19 = v16;
    uint64_t v20 = v17;
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    uint64_t v18 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  CFTypeRef v6 = v5;
  if (!*((void *)v5 + 7)
    || (*(void *)std::string buf = AMCP::Implementation::get_type_marker<std::function<mcp_applesauce::CF::PropertyListRef ()(void)>>(),
        (CFTypeRef v5 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v6 + 7))(4, (uint64_t)v6 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v8 = **(NSObject ***)buf;
    if (*(void *)v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)uint64_t v31 = 2080;
      *(void *)&v31[2] = "Operation.h";
      __int16 v32 = 1024;
      int v33 = 161;
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v24 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    int v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = mcp_applesauce::CF::P"
          "ropertyListRef, Argument_Types = <>]";
    uint64_t v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v36 = 161;
    std::vector<void *>::vector(&v16);
    int v11 = backtrace((void **)v16, (*((void *)&v16 + 1) - (void)v16) >> 3);
    std::vector<void *>::resize((char **)&v16, v11);
    long long v19 = v16;
    uint64_t v20 = v17;
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    uint64_t v18 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v7 = *((void *)v5 + 3);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint8_t *__return_ptr))(*(void *)v7 + 48))(buf);
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef&>(a2, (CFTypeRef *)buf);
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }
}

void sub_1BADD5FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,void *a24)
{
  std::runtime_error::~runtime_error(v24);
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  *(void *)(v26 - 128) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v26 - 120));
  std::runtime_error::~runtime_error((std::runtime_error *)(v26 - 144));
  a24 = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v25 + 24));
  std::runtime_error::~runtime_error(&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  __cxa_free_exception(v24);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v26 - 145));
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1473270;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F1473270;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  void v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BADD61E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1473270;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<mcp_applesauce::CF::PropertyListRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1473270;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<mcp_applesauce::CF::PropertyListRef ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<mcp_applesauce::CF::PropertyListRef ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<mcp_applesauce::CF::PropertyListRef ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<mcp_applesauce::CF::PropertyListRef ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<mcp_applesauce::CF::PropertyListRef ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<mcp_applesauce::CF::PropertyListRef ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<mcp_applesauce::CF::PropertyListRef ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      uint64_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,mcp_applesauce::CF::PropertyListRef ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,mcp_applesauce::CF::PropertyListRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASPL32make_custom_property_getter_dcatERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

mcp_applesauce::CF::PropertyListRef *std::__function::__func<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,mcp_applesauce::CF::PropertyListRef ()(void)>::operator()@<X0>(uint64_t a1@<X0>, mcp_applesauce::CF::PropertyListRef *a2@<X8>)
{
  uint64_t v4 = 0x676C6F6200000000;
  CFTypeRef cf = 0;
  CFTypeRef v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);
  AMCP::get_property_traits((AMCP *)*(unsigned int *)(a1 + 28), (uint64_t)&v15);
  if (v16 != v17)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 32);
    uint64_t v8 = v16;
    while (v7 != *v8)
    {
      if (++v8 == v17) {
        goto LABEL_7;
      }
    }
    uint64_t v4 = v7 << 32;
  }
LABEL_7:
  unsigned int v9 = v18;
  unsigned int v10 = *(_DWORD *)(a1 + 28);
  int v11 = *(_DWORD *)(a1 + 36);
  if (v16) {
    operator delete(v16);
  }
  if (v9) {
    uint64_t v12 = v9;
  }
  else {
    uint64_t v12 = v10;
  }
  uint64_t v15 = v4 | v12;
  LODWORD(v16) = v11;
  uint64_t result = (mcp_applesauce::CF::PropertyListRef *)AMCP::ASP::PlugIn::ObjectGetPropertyData(v5, v6, 0, (const AudioObjectPropertyAddress *)&v15, 0, 0, 8, &cf);
  if (!result) {
    return mcp_applesauce::CF::PropertyListRef::from_get(a2, cf);
  }
  *(void *)a2 = 0;
  return result;
}

void std::__function::__func<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,mcp_applesauce::CF::PropertyListRef ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,mcp_applesauce::CF::PropertyListRef ()(void)>::destroy(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,mcp_applesauce::CF::PropertyListRef ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14731E0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,mcp_applesauce::CF::PropertyListRef ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14731E0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,mcp_applesauce::CF::PropertyListRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14731E0;
  int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_getter_dcat(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,mcp_applesauce::CF::PropertyListRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14731E0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>::dispatch;
LABEL_6:
      std::__function::__value_func<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t Property_Type_Hint = AMCP::Implementation::get_type_marker<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>();
      uint64_t result = 0;
      *a4 = Property_Type_Hint;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      uint64_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_4,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_4>,AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_4,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_4>,AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASPL26make_custom_property_N_RawERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_4,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_4>,AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::operator()()
{
  return 16;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_4,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_4>,AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14730F8;
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_4,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_4>,AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F14730F8;
  return result;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_4,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_4>,AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>::~__func()
{
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
LABEL_6:
      std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
      uint64_t result = 0;
      *a4 = Has_Property;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      uint64_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3>,BOOL ()(AMCP::Core::Has_Property_Function)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3>,BOOL ()(AMCP::Core::Has_Property_Function)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASPL26make_custom_property_N_RawERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3>,BOOL ()(AMCP::Core::Has_Property_Function)>::operator()(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  CFTypeRef v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

uint64_t AMCP::ASP::property_always_exists(AMCP::ASP *this, const AudioObjectPropertyAddress *a2)
{
  int v2 = (int)this;
  uint64_t result = 1;
  if (v2 > 1935892840)
  {
    if (v2 > 1936092478)
    {
      if (v2 <= 1936745314)
      {
        unsigned int v6 = v2 - 1936092479;
        if (v6 > 0x35 || ((1 << v6) & 0x20400400000001) == 0) {
          return 0;
        }
        return result;
      }
      if (v2 == 1936745315 || v2 == 1936745334) {
        return result;
      }
      int v4 = 1952805485;
    }
    else if (v2 > 1935960433)
    {
      if (v2 > 1935962741)
      {
        if (v2 == 1935962742) {
          return result;
        }
        int v4 = 1936092451;
      }
      else
      {
        if (v2 == 1935960434) {
          return result;
        }
        int v4 = 1935962738;
      }
    }
    else
    {
      if (v2 > 1935894637)
      {
        if (v2 == 1935894638) {
          return result;
        }
        unsigned __int16 v5 = 26990;
      }
      else
      {
        if (v2 == 1935892841) {
          return result;
        }
        unsigned __int16 v5 = 25449;
      }
      int v4 = v5 | 0x73630000;
    }
LABEL_39:
    if (v2 == v4) {
      return result;
    }
    return 0;
  }
  if (v2 > 1818456949)
  {
    if (v2 > 1885762656)
    {
      if (v2 == 1885762657 || v2 == 1885762669) {
        return result;
      }
      int v4 = 1935762292;
    }
    else
    {
      if ((v2 - 1885762592) <= 0x1F && ((1 << (v2 - 32)) & 0x80000009) != 0 || v2 == 1818456950) {
        return result;
      }
      int v4 = 1819569763;
    }
    goto LABEL_39;
  }
  if (v2 > 1668506479)
  {
    if ((v2 - 1818453106) <= 4 && ((1 << (v2 - 114)) & 0x13) != 0 || v2 == 1668506480) {
      return result;
    }
    int v4 = 1818456932;
    goto LABEL_39;
  }
  if (v2 != 1650685548 && v2 != 1667591277)
  {
    int v4 = 1668049771;
    goto LABEL_39;
  }
  return result;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3>,BOOL ()(AMCP::Core::Has_Property_Function)>::destroy_deallocate(void *__p)
{
  int v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3>,BOOL ()(AMCP::Core::Has_Property_Function)>::destroy(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3>,BOOL ()(AMCP::Core::Has_Property_Function)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1472FF8;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3>,BOOL ()(AMCP::Core::Has_Property_Function)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1472FF8;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3>,BOOL ()(AMCP::Core::Has_Property_Function)>::~__func(void *a1)
{
  *a1 = &unk_1F1472FF8;
  int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_3>,BOOL ()(AMCP::Core::Has_Property_Function)>::~__func(void *a1)
{
  *a1 = &unk_1F1472FF8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>::dispatch;
LABEL_6:
      std::__function::__value_func<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
      uint64_t result = 0;
      *a4 = Is_Property_Settable;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      uint64_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASPL26make_custom_property_N_RawERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::operator()(uint64_t a1)
{
  unint64_t IsPropertySettable = AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
  char is_settable = AMCP::ASP::property_always_is_settable((AMCP::ASP *)*(unsigned int *)(a1 + 28), v3);
  if (IsPropertySettable) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = HIDWORD(IsPropertySettable) == 0;
  }
  unsigned int v6 = !v5;
  if (is_settable) {
    return 1;
  }
  else {
    return v6;
  }
}

uint64_t AMCP::ASP::property_always_is_settable(AMCP::ASP *this, const AudioObjectPropertyAddress *a2)
{
  int v2 = (int)this;
  uint64_t result = 1;
  if (v2 > 1935893352)
  {
    if (v2 > 1936092531)
    {
      if (v2 == 1936092532) {
        return result;
      }
      int v4 = 1936745334;
    }
    else
    {
      if (v2 == 1935893353) {
        return result;
      }
      int v4 = 1935962742;
    }
  }
  else if (v2 > 1818456949)
  {
    if (v2 == 1818456950) {
      return result;
    }
    int v4 = 1885762592;
  }
  else
  {
    if (v2 == 1650685548) {
      return result;
    }
    int v4 = 1818453110;
  }
  if (v2 != v4) {
    return 0;
  }
  return result;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::destroy_deallocate(void *__p)
{
  int v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::destroy(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1472F68;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1472F68;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::~__func(void *a1)
{
  *a1 = &unk_1F1472F68;
  int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_2>,BOOL ()(AMCP::Core::Is_Property_Settable_Function)>::~__func(void *a1)
{
  *a1 = &unk_1F1472F68;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_setterINS_11Bag_O_BytesEEEvRNS0_9OperationEEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  AMCP::Thing::convert_to<AMCP::Bag_O_Bytes>(__p, a2);
  unint64_t v3 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Bag_O_Bytes const&)>>();
  uint64_t v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>((void *)(a1 + 8), v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v11 = **(NSObject ***)buf;
    if (*(void *)v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)uint64_t v31 = 2080;
      *(void *)&v31[2] = "Operation.h";
      __int16 v32 = 1024;
      int v33 = 154;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v24 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    int v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const AMCP::Bag_O_Bytes &>]";
    uint64_t v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v36 = 154;
    std::vector<void *>::vector(&v16);
    int v14 = backtrace((void **)v16, (*((void *)&v16 + 1) - (void)v16) >> 3);
    std::vector<void *>::resize((char **)&v16, v14);
    long long v19 = v16;
    uint64_t v20 = v17;
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    unsigned int v18 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  BOOL v5 = v4;
  if (!*((void *)v4 + 7)
    || (*(void *)std::string buf = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Bag_O_Bytes const&)>>(),
        (uint64_t v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v7 = **(NSObject ***)buf;
    if (*(void *)v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)uint64_t v31 = 2080;
      *(void *)&v31[2] = "Operation.h";
      __int16 v32 = 1024;
      int v33 = 161;
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v24 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    int v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const AMCP::Bag_O_Bytes &>]";
    uint64_t v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v36 = 161;
    std::vector<void *>::vector(&v16);
    int v10 = backtrace((void **)v16, (*((void *)&v16 + 1) - (void)v16) >> 3);
    std::vector<void *>::resize((char **)&v16, v10);
    long long v19 = v16;
    uint64_t v20 = v17;
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    unsigned int v18 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = *((void *)v4 + 3);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v6 + 48))(v6, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1BADD7BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::runtime_error a26,std::runtime_error a27,uint64_t a28)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1472EE8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  unint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F1472EE8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  void v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BADD7E18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1472EE8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1472EE8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Bag_O_Bytes const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Bag_O_Bytes const&)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(AMCP::Bag_O_Bytes const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Bag_O_Bytes const&)>>::dispatch;
LABEL_6:
      std::__function::__value_func<void ()(AMCP::Bag_O_Bytes const&)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Bag_O_Bytes const&)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Bag_O_Bytes const&)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      uint64_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1>,void ()(AMCP::Bag_O_Bytes const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1>,void ()(AMCP::Bag_O_Bytes const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASPL26make_custom_property_N_RawERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1>,void ()(AMCP::Bag_O_Bytes const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return AMCP::ASP::PlugIn::ObjectSetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, *(_DWORD *)(a2 + 8) - *(void *)a2, *(const void **)a2);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1>,void ()(AMCP::Bag_O_Bytes const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1>,void ()(AMCP::Bag_O_Bytes const&)>::destroy(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1>,void ()(AMCP::Bag_O_Bytes const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1472E58;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1>,void ()(AMCP::Bag_O_Bytes const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1472E58;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1>,void ()(AMCP::Bag_O_Bytes const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1472E58;
  int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_1>,void ()(AMCP::Bag_O_Bytes const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1472E58;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterINS_11Bag_O_BytesEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)(a1 + 8);
  unint64_t v4 = AMCP::Implementation::get_type_marker<std::function<AMCP::Bag_O_Bytes ()(void)>>();
  BOOL v5 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v3, v4);
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v12 = **(NSObject ***)buf;
    if (*(void *)v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v33);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)int v33 = 2080;
      *(void *)&double v33[2] = "Operation.h";
      __int16 v34 = 1024;
      int v35 = 154;
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v31);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v23);
    std::runtime_error::runtime_error(&v24, &v23);
    std::runtime_error::runtime_error(&v25, &v24);
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    int v30 = -1;
    v25.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v26 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v25);
    int v36 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Bag_O_Bytes, Ar"
          "gument_Types = <>]";
    uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v38 = 154;
    std::vector<void *>::vector(&v18);
    int v15 = backtrace((void **)v18, (*((void *)&v18 + 1) - (void)v18) >> 3);
    std::vector<void *>::resize((char **)&v18, v15);
    long long v21 = v18;
    uint64_t v22 = v19;
    long long v18 = 0uLL;
    uint64_t v19 = 0;
    uint64_t v20 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = v5;
  if (!*((void *)v5 + 7)
    || (*(void *)std::string buf = AMCP::Implementation::get_type_marker<std::function<AMCP::Bag_O_Bytes ()(void)>>(),
        (BOOL v5 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v6 + 7))(4, (uint64_t)v6 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v8 = **(NSObject ***)buf;
    if (*(void *)v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v33);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)int v33 = 2080;
      *(void *)&double v33[2] = "Operation.h";
      __int16 v34 = 1024;
      int v35 = 161;
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v31);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v23);
    std::runtime_error::runtime_error(&v24, &v23);
    std::runtime_error::runtime_error(&v25, &v24);
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    int v30 = -1;
    v25.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v26 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v25);
    int v36 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Bag_O_Bytes, Ar"
          "gument_Types = <>]";
    uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v38 = 161;
    std::vector<void *>::vector(&v18);
    int v11 = backtrace((void **)v18, (*((void *)&v18 + 1) - (void)v18) >> 3);
    std::vector<void *>::resize((char **)&v18, v11);
    long long v21 = v18;
    uint64_t v22 = v19;
    long long v18 = 0uLL;
    uint64_t v19 = 0;
    uint64_t v20 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v7 = *((void *)v5 + 3);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(void **__return_ptr))(*(void *)v7 + 48))(&__p);
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>((void *)a2, __p, (uint64_t)v17, v17 - (unsigned char *)__p);
  *(void *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<AMCP::Bag_O_Bytes>::dispatch;
  if (__p)
  {
    uint64_t v17 = __p;
    operator delete(__p);
  }
}

void sub_1BADD89C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::runtime_error a26,std::runtime_error a27,void *a28)
{
  std::runtime_error::~runtime_error(v28);
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  *(void *)(v30 - 128) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v30 - 120));
  std::runtime_error::~runtime_error((std::runtime_error *)(v30 - 144));
  a28 = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v29 + 24));
  std::runtime_error::~runtime_error(&a27);
  std::runtime_error::~runtime_error(&a26);
  if (a25 < 0) {
    operator delete(a20);
  }
  __cxa_free_exception(v28);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v30 - 145));
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1472D68;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F1472D68;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  void v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BADD8C00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1472D68;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Bag_O_Bytes>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1472D68;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<AMCP::Bag_O_Bytes ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Bag_O_Bytes ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<AMCP::Bag_O_Bytes ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Bag_O_Bytes ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<AMCP::Bag_O_Bytes ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<AMCP::Bag_O_Bytes ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<AMCP::Bag_O_Bytes ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      uint64_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,AMCP::Bag_O_Bytes ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,AMCP::Bag_O_Bytes ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASPL26make_custom_property_N_RawERKNS_7AddressERKNSt3__110shared_ptrINS0_6PlugInEEEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,AMCP::Bag_O_Bytes ()(void)>::operator()(uint64_t a1@<X0>, void **a2@<X8>)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (!PropertyDataSize)
  {
    uint64_t v5 = HIDWORD(PropertyDataSize);
    char v7 = 0;
    std::vector<std::byte>::vector(a2, HIDWORD(PropertyDataSize), &v7);
    if (!AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, *a2))return; {
    uint64_t v6 = *a2;
    }
    if (*a2)
    {
      a2[1] = v6;
      operator delete(v6);
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,AMCP::Bag_O_Bytes ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,AMCP::Bag_O_Bytes ()(void)>::destroy(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,AMCP::Bag_O_Bytes ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1472CD8;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,AMCP::Bag_O_Bytes ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1472CD8;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,AMCP::Bag_O_Bytes ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1472CD8;
  int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0,std::allocator<AMCP::ASP::make_custom_property_N_Raw(AMCP::Address const&,std::shared_ptr<AMCP::ASP::PlugIn> const&,unsigned int)::$_0>,AMCP::Bag_O_Bytes ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1472CD8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::vector<AudioServerPlugInCustomPropertyInfo>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<AudioObjectPropertyAddress>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1BADD9198(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818455662EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818455662EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  size_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1474570;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1474570;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1474570;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1474570;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818455662EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818455662EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::StringRef *a2@<X8>)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    goto LABEL_2;
  }
  uint64_t v5 = HIDWORD(PropertyDataSize);
  char v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      uint64_t v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(void *)a2 = 0;
    return;
  }
  uint64_t v6 = __p;
  if ((unint64_t)(v8 - (unsigned char *)__p) < 8)
  {
    *(void *)a2 = 0;
    if (!v6) {
      return;
    }
LABEL_11:
    uint64_t v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::StringRef::StringRef(a2, *(CFTypeRef *)__p);
  uint64_t v6 = __p;
  if (__p) {
    goto LABEL_11;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14744F0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14744F0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED0Ev(void *a1)
{
  *a1 = &unk_1F14744F0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818455662EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED1Ev(void *a1)
{
  *a1 = &unk_1F14744F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818452846EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818452846EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1474470;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1474470;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1474470;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1474470;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818452846EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818452846EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::StringRef *a2@<X8>)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    goto LABEL_2;
  }
  uint64_t v5 = HIDWORD(PropertyDataSize);
  char v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      uint64_t v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(void *)a2 = 0;
    return;
  }
  uint64_t v6 = __p;
  if ((unint64_t)(v8 - (unsigned char *)__p) < 8)
  {
    *(void *)a2 = 0;
    if (!v6) {
      return;
    }
LABEL_11:
    uint64_t v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::StringRef::StringRef(a2, *(CFTypeRef *)__p);
  uint64_t v6 = __p;
  if (__p) {
    goto LABEL_11;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14743F0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14743F0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED0Ev(void *a1)
{
  *a1 = &unk_1F14743F0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818452846EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED1Ev(void *a1)
{
  *a1 = &unk_1F14743F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818454126EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818454126EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1474370;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1474370;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1474370;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1474370;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818454126EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818454126EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::StringRef *a2@<X8>)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    goto LABEL_2;
  }
  uint64_t v5 = HIDWORD(PropertyDataSize);
  char v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      uint64_t v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(void *)a2 = 0;
    return;
  }
  uint64_t v6 = __p;
  if ((unint64_t)(v8 - (unsigned char *)__p) < 8)
  {
    *(void *)a2 = 0;
    if (!v6) {
      return;
    }
LABEL_11:
    uint64_t v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::StringRef::StringRef(a2, *(CFTypeRef *)__p);
  uint64_t v6 = __p;
  if (__p) {
    goto LABEL_11;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14742F0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14742F0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED0Ev(void *a1)
{
  *a1 = &unk_1F14742F0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818454126EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED1Ev(void *a1)
{
  *a1 = &unk_1F14742F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

applesauce::CF::URLRef *mcp_applesauce::CF::BundleRef_proxy::get_bundle_url(applesauce::CF::URLRef *this, __CFBundle *a2)
{
  uint64_t v2 = this;
  if (a2)
  {
    CFURLRef v3 = CFBundleCopyBundleURL(a2);
    return applesauce::CF::URLRef::URLRef(v2, v3);
  }
  else
  {
    *(void *)this = 0;
  }
  return this;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1719105134EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1719105134EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  CFURLRef v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1474270;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1474270;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1474270;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1474270;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1719105134EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1719105134EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::StringRef *a2@<X8>)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    goto LABEL_2;
  }
  uint64_t v5 = HIDWORD(PropertyDataSize);
  char v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      uint64_t v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(void *)a2 = 0;
    return;
  }
  uint64_t v6 = __p;
  if ((unint64_t)(v8 - (unsigned char *)__p) < 8)
  {
    *(void *)a2 = 0;
    if (!v6) {
      return;
    }
LABEL_11:
    uint64_t v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::StringRef::StringRef(a2, *(CFTypeRef *)__p);
  uint64_t v6 = __p;
  if (__p) {
    goto LABEL_11;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14741F0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14741F0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED0Ev(void *a1)
{
  *a1 = &unk_1F14741F0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1719105134EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED1Ev(void *a1)
{
  *a1 = &unk_1F14741F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1936618861EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1936618861EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1474170;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1474170;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1474170;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1474170;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1936618861EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1936618861EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::StringRef *a2@<X8>)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    goto LABEL_2;
  }
  uint64_t v5 = HIDWORD(PropertyDataSize);
  char v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      uint64_t v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(void *)a2 = 0;
    return;
  }
  uint64_t v6 = __p;
  if ((unint64_t)(v8 - (unsigned char *)__p) < 8)
  {
    *(void *)a2 = 0;
    if (!v6) {
      return;
    }
LABEL_11:
    uint64_t v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::StringRef::StringRef(a2, *(CFTypeRef *)__p);
  uint64_t v6 = __p;
  if (__p) {
    goto LABEL_11;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14740F0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14740F0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED0Ev(void *a1)
{
  *a1 = &unk_1F14740F0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936618861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED1Ev(void *a1)
{
  *a1 = &unk_1F14740F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFN10applesauce2CF9StringRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1667330160EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjRKNS_15Property_TraitsIXT_EE10Value_TypeEEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFN10applesauce2CF9StringRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1667330160EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjRKNS_15Property_TraitsIXT_EE10Value_TypeEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFN10applesauce2CF9StringRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::StringRef *a2@<X8>)
{
  if (!AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28))|| (unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0), PropertyDataSize))
  {
LABEL_3:
    uint64_t v5 = *(const void **)(a1 + 40);
    if (v5) {
      CFRetain(v5);
    }
    *(void *)a2 = v5;
    return;
  }
  uint64_t v6 = HIDWORD(PropertyDataSize);
  char v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v6, __p))
  {
    if (__p)
    {
      char v9 = __p;
      operator delete(__p);
    }
    goto LABEL_3;
  }
  char v7 = __p;
  if ((unint64_t)(v9 - (unsigned char *)__p) < 8)
  {
    *(void *)a2 = 0;
  }
  else
  {
    applesauce::CF::StringRef::StringRef(a2, *(CFTypeRef *)__p);
    char v7 = __p;
  }
  if (v7)
  {
    char v9 = v7;
    operator delete(v7);
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFN10applesauce2CF9StringRefEvEE18destroy_deallocateEv(void *a1)
{
  _ZNSt3__110__function12__alloc_funcIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFN10applesauce2CF9StringRefEvEE7destroyB8ne180100Ev((uint64_t)a1 + 8);

  operator delete(a1);
}

void _ZNSt3__110__function12__alloc_funcIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFN10applesauce2CF9StringRefEvEE7destroyB8ne180100Ev(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFN10applesauce2CF9StringRefEvEE7destroyEv(uint64_t a1)
{
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFN10applesauce2CF9StringRefEvEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1474070;
  return _ZNSt3__122__compressed_pair_elemIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS1_4Core9OperationEEEE4typeERKNS1_7AddressERKNS5_INS2_6PlugInEEEjRKNS1_15Property_TraitsIXT_EE10Value_TypeEEUlvE_Li0ELb0EEC2B8ne180100IJRKSN_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t _ZNSt3__122__compressed_pair_elemIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS1_4Core9OperationEEEE4typeERKNS1_7AddressERKNS5_INS2_6PlugInEEEjRKNS1_15Property_TraitsIXT_EE10Value_TypeEEUlvE_Li0ELb0EEC2B8ne180100IJRKSN_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4) {
    CFRetain(*(CFTypeRef *)(a2 + 32));
  }
  *(void *)(a1 + 32) = v4;
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFN10applesauce2CF9StringRefEvEE7__cloneEv(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &unk_1F1474070;
  _ZNSt3__122__compressed_pair_elemIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS1_4Core9OperationEEEE4typeERKNS1_7AddressERKNS5_INS2_6PlugInEEEjRKNS1_15Property_TraitsIXT_EE10Value_TypeEEUlvE_Li0ELb0EEC2B8ne180100IJRKSN_EJLm0EEEENS_21piecewise_construct_tENS_5tupleIJDpT_EEENS_15__tuple_indicesIJXspT0_EEEE((uint64_t)(v2 + 1), v1);
  return v2;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFN10applesauce2CF9StringRefEvEED0Ev(void *a1)
{
  *a1 = &unk_1F1474070;
  uint64_t v2 = (const void *)a1[5];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667330160EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFN10applesauce2CF9StringRefEvEED1Ev(void *a1)
{
  *a1 = &unk_1F1474070;
  uint64_t v2 = (const void *)a1[5];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1768124270EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1768124270EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1473FF0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1473FF0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1473FF0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1473FF0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF6URLRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1768124270EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF6URLRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1768124270EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF6URLRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::URLRef *a2@<X8>)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    goto LABEL_2;
  }
  uint64_t v5 = HIDWORD(PropertyDataSize);
  char v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      uint64_t v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(void *)a2 = 0;
    return;
  }
  uint64_t v6 = __p;
  if ((unint64_t)(v8 - (unsigned char *)__p) < 8)
  {
    *(void *)a2 = 0;
    if (!v6) {
      return;
    }
LABEL_11:
    uint64_t v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::URLRef::URLRef(a2, *(CFTypeRef *)__p);
  uint64_t v6 = __p;
  if (__p) {
    goto LABEL_11;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF6URLRefEvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF6URLRefEvEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF6URLRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1473F70;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF6URLRefEvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1473F70;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF6URLRefEvEED0Ev(void *a1)
{
  *a1 = &unk_1F1473F70;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1768124270EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF6URLRefEvEED1Ev(void *a1)
{
  *a1 = &unk_1F1473F70;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1819107691EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1819107691EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1473EF0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1473EF0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1473EF0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1473EF0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1819107691EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1819107691EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::StringRef *a2@<X8>)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    goto LABEL_2;
  }
  uint64_t v5 = HIDWORD(PropertyDataSize);
  char v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      uint64_t v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(void *)a2 = 0;
    return;
  }
  uint64_t v6 = __p;
  if ((unint64_t)(v8 - (unsigned char *)__p) < 8)
  {
    *(void *)a2 = 0;
    if (!v6) {
      return;
    }
LABEL_11:
    uint64_t v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::StringRef::StringRef(a2, *(CFTypeRef *)__p);
  uint64_t v6 = __p;
  if (__p) {
    goto LABEL_11;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1473E70;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1473E70;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED0Ev(void *a1)
{
  *a1 = &unk_1F1473E70;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819107691EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED1Ev(void *a1)
{
  *a1 = &unk_1F1473E70;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1819111268EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1819111268EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1473DF0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1473DF0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1473DF0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1473DF0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1819111268EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1819111268EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::StringRef *a2@<X8>)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    goto LABEL_2;
  }
  uint64_t v5 = HIDWORD(PropertyDataSize);
  char v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      uint64_t v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(void *)a2 = 0;
    return;
  }
  uint64_t v6 = __p;
  if ((unint64_t)(v8 - (unsigned char *)__p) < 8)
  {
    *(void *)a2 = 0;
    if (!v6) {
      return;
    }
LABEL_11:
    uint64_t v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::StringRef::StringRef(a2, *(CFTypeRef *)__p);
  uint64_t v6 = __p;
  if (__p) {
    goto LABEL_11;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1473D70;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1473D70;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED0Ev(void *a1)
{
  *a1 = &unk_1F1473D70;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819111268EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED1Ev(void *a1)
{
  *a1 = &unk_1F1473D70;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1819173229EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1819173229EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1473CF0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1473CF0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1473CF0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1473CF0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1819173229EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1819173229EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1)
{
  unint64_t IsPropertySettable = AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
  char is_settable = AMCP::ASP::property_always_is_settable((AMCP::ASP *)*(unsigned int *)(a1 + 28), v3);
  if (IsPropertySettable) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = HIDWORD(IsPropertySettable) == 0;
  }
  unsigned int v6 = !v5;
  if (is_settable) {
    return 1;
  }
  else {
    return v6;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1473C70;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1473C70;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1473C70;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1473C70;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF9StringRefEE_NS_9allocatorISO_EEFvSN_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1819173229EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKN10applesauce2CF9StringRefEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF9StringRefEE_NS_9allocatorISO_EEFvSN_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1819173229EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKN10applesauce2CF9StringRefEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF9StringRefEE_NS_9allocatorISO_EEFvSN_EEclESN_(uint64_t a1, void *a2)
{
  char v6 = 0;
  std::vector<std::byte>::vector(&__p, 8uLL, &v6);
  *(void *)std::string __p = *a2;
  AMCP::ASP::PlugIn::ObjectSetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, (v5 - __p), __p);
  if (__p)
  {
    BOOL v5 = __p;
    operator delete(__p);
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF9StringRefEE_NS_9allocatorISO_EEFvSN_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF9StringRefEE_NS_9allocatorISO_EEFvSN_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF9StringRefEE_NS_9allocatorISO_EEFvSN_EE7__cloneEPNS0_6__baseISR_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1473BF0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF9StringRefEE_NS_9allocatorISO_EEFvSN_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1473BF0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF9StringRefEE_NS_9allocatorISO_EEFvSN_EED0Ev(void *a1)
{
  *a1 = &unk_1F1473BF0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF9StringRefEE_NS_9allocatorISO_EEFvSN_EED1Ev(void *a1)
{
  *a1 = &unk_1F1473BF0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1819173229EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1819173229EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::StringRef *a2@<X8>)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    goto LABEL_2;
  }
  uint64_t v5 = HIDWORD(PropertyDataSize);
  char v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      uint64_t v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(void *)a2 = 0;
    return;
  }
  char v6 = __p;
  if ((unint64_t)(v8 - (unsigned char *)__p) < 8)
  {
    *(void *)a2 = 0;
    if (!v6) {
      return;
    }
LABEL_11:
    uint64_t v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::StringRef::StringRef(a2, *(CFTypeRef *)__p);
  char v6 = __p;
  if (__p) {
    goto LABEL_11;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1473B70;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1473B70;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED0Ev(void *a1)
{
  *a1 = &unk_1F1473B70;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819173229EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED1Ev(void *a1)
{
  *a1 = &unk_1F1473B70;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void AMCP::ASP::make_properties<1953653102u>(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  long long v18 = 0uLL;
  uint64_t v7 = *a1;
  char v6 = (std::__shared_weak_count *)a1[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  strcpy((char *)v20, "nartbolg");
  BYTE1(v20[1]) = 0;
  WORD1(v20[1]) = 0;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v19, 0, v20[0]);
  uint64_t v8 = v19;
  unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::runtime_error v25 = 0;
  char v10 = operator new(0x28uLL);
  void *v10 = &unk_1F14746F0;
  v10[1] = v7;
  _OWORD v10[2] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v10 + 6) = a2;
  *(void *)((char *)v10 + 28) = 0x676C6F627472616ELL;
  *((_DWORD *)v10 + 9) = 0;
  std::runtime_error v25 = v10;
  long long v21 = 0u;
  long long v22 = 0u;
  std::string v23 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)&v21, (uint64_t)v24);
  std::string v23 = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v8, v9, (AMCP *)&v21);
  if (v23) {
    v23(0, (uint64_t)&v21, 0, 0);
  }
  std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](v24);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v8);
  uint64_t v11 = v19;
  long long v18 = v19;
  if (v6)
  {
    uint64_t v17 = v19;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    uint64_t v11 = v17;
  }
  uint64_t v13 = *a1;
  uint64_t v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v14 = v11;
    unint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v14 = v11;
    unint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  }
  std::runtime_error v25 = 0;
  long long v16 = operator new(0x28uLL);
  void *v16 = &unk_1F1474770;
  v16[1] = v13;
  void v16[2] = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)v16 + 6) = a2;
  *(void *)((char *)v16 + 28) = 0x676C6F627472616ELL;
  *((_DWORD *)v16 + 9) = 0;
  std::runtime_error v25 = v16;
  long long v21 = 0u;
  long long v22 = 0u;
  std::string v23 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v21, (uint64_t)v24);
  std::string v23 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v14, Has_Property, (AMCP *)&v21);
  if (v23) {
    v23(0, (uint64_t)&v21, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](v24);
  if (v12)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if ((void)v18) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v18 + 40), &v18);
  }
  if (*((void *)&v18 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
  }
}

void sub_1BADDCC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *std::__function::__func<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13PlugIn_Object19populate_clock_coreEjRNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::operator()(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v22, *(std::__shared_mutex_base **)(*(void *)(a1 + 32) + 16), *(_DWORD *)(a1 + 28));
  uint64_t v4 = v22;
  if (v22)
  {
    AMCP::Core::Core::get_simple_required_property<1969841184u>(&cf, v22);
    double simple_required = AMCP::Core::Core::get_simple_required_property<1853059700u>(v4);
    char v6 = *(AMCP::ASP::PlugIn **)(a1 + 8);
    uint64_t v7 = *(unsigned int *)(a1 + 24);
    *(void *)&v27.signed int mSelector = 0x676C6F6272696E67;
    v27.uint64_t mElement = 0;
    v20[0] = 0;
    AMCP::ASP::PlugIn::ObjectGetPropertyData(v6, v7, 0, &v27, 0, 0, 4, v20);
    int v8 = v20[0];
    int v9 = AMCP::Core::Core::get_simple_required_property<1668049764u>(v4);
    v20[0] = 0;
    *(void *)&v27.signed int mSelector = 0x696E707473616674;
    v27.uint64_t mElement = 0;
    int v10 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v4, (const AMCP::Address *)&v27, v20);
    v20[0] = 0;
    *(void *)&v27.signed int mSelector = 0x6F75747073616674;
    v27.uint64_t mElement = 0;
    int v11 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v4, (const AMCP::Address *)&v27, v20);
    v20[0] = 0;
    *(void *)&v27.signed int mSelector = 0x696E70746C746E63;
    v27.uint64_t mElement = 0;
    int v12 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v4, (const AMCP::Address *)&v27, v20);
    v20[0] = 0;
    *(void *)&v27.signed int mSelector = 0x6F7574706C746E63;
    v27.uint64_t mElement = 0;
    unsigned int v13 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v4, (const AMCP::Address *)&v27, v20);
    AMCP::ASP::make_stream_info_list((uint64_t)v20, *(std::__shared_mutex_base **)(*(void *)(a1 + 32) + 16), &v22, 1768845428);
    AMCP::ASP::make_stream_info_list((uint64_t)__p, *(std::__shared_mutex_base **)(*(void *)(a1 + 32) + 16), &v22, 1869968496);
    int v18 = v13;
    AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&v27, *(dispatch_object_t *)(*(void *)(*(void *)(a1 + 32) + 32) + 672));
    uint64_t v14 = operator new(0x328uLL);
    v14[1] = 0;
    _OWORD v14[2] = 0;
    *uint64_t v14 = &unk_1F14756E0;
    uint64_t v15 = *(void *)(a1 + 16);
    *(void *)&long long v26 = *(void *)(a1 + 8);
    *((void *)&v26 + 1) = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    v25[0] = 0;
    v25[1] = 0;
    uint64_t v16 = *(unsigned int *)(a1 + 24);
    CFTypeRef v17 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v24 = v17;
    AMCP::ASP::Engine::Engine((uint64_t)(v14 + 3), simple_required, (uint64_t)&v26, 0, (uint64_t)v25, v16, &v24, v8, v9, v10, v11, v12, v18, (uint64_t)v20, (uint64_t)__p, (dispatch_queue_t *)&v27);
  }
  long long v26 = 0uLL;
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  *a2 = v26;
}

void sub_1BADDCFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,CFTypeRef cf,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMCP::ASP::make_stream_info_list(uint64_t a1, std::__shared_mutex_base *a2, AMCP::Core::Core **a3, int a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  int v8 = *a3;
  *(_DWORD *)std::string buf = 1937009955;
  *(_DWORD *)&uint8_t buf[4] = a4;
  *(_DWORD *)&uint8_t buf[8] = 0;
  if (AMCP::Core::Core::has_property(v8, (const AMCP::Address *)buf))
  {
    AMCP::Core::Core::get_simple_required_property<1937009955u>(&v37, *a3, a4);
    int v9 = v37;
    int v10 = v38;
    std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::reserve((void **)a1, v38 - v37);
    if (v9 == v10)
    {
      uint64_t v30 = v10;
      if (v10) {
LABEL_29:
      }
        operator delete(v30);
    }
    else
    {
      std::string __p = v9;
      do
      {
        AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v35, a2, *v9);
        int v11 = v35;
        if (v35)
        {
          int simple_required = AMCP::Core::Core::get_simple_required_property<1935894638u>(v35);
          strcpy(buf, "jbodbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          unint64_t v13 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v11, (const AMCP::Address *)buf);
          if (!HIDWORD(v13))
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v13);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            char v31 = **(NSObject ***)buf;
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
            {
              __int16 v32 = pthread_self();
              mach_port_t v33 = pthread_mach_thread_np(v32);
              char v40 = 4;
              strcpy((char *)v39, "dobj");
              *(_DWORD *)std::string buf = 67110658;
              *(_DWORD *)&uint8_t buf[4] = v33;
              *(_WORD *)&uint8_t buf[8] = 2080;
              *(void *)&buf[10] = "Core.h";
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = 391;
              *(_WORD *)&unsigned char buf[24] = 2080;
              *(void *)&buf[26] = "optional_value.operator BOOL() == true";
              *(_WORD *)&buf[34] = 2080;
              *(void *)&buf[36] = v39;
              __int16 v42 = 1024;
              int v43 = 1735159650;
              __int16 v44 = 1024;
              int v45 = 0;
              _os_log_error_impl(&dword_1BAA78000, v31, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
              if (v40 < 0) {
                operator delete(v39[0]);
              }
            }
            abort();
          }
          int v14 = v13;
          AMCP::Core::Core::get_simple_required_property<1718444404u>((uint64_t)buf, v11);
          uint64_t v16 = *(_DWORD **)(a1 + 8);
          unint64_t v15 = *(void *)(a1 + 16);
          if ((unint64_t)v16 >= v15)
          {
            int v18 = *(_DWORD **)a1;
            uint64_t v19 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v16 - *(void *)a1) >> 3);
            unint64_t v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) > 0x492492492492492) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v21 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v15 - (void)v18) >> 3);
            if (2 * v21 > v20) {
              unint64_t v20 = 2 * v21;
            }
            if (v21 >= 0x249249249249249) {
              unint64_t v22 = 0x492492492492492;
            }
            else {
              unint64_t v22 = v20;
            }
            if (v22) {
              unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v22);
            }
            else {
              uint64_t v23 = 0;
            }
            unint64_t v24 = v22 + 56 * v19;
            *(_DWORD *)unint64_t v24 = simple_required;
            *(_DWORD *)(v24 + 4) = v14;
            *(_DWORD *)(v24 + 8) = 0;
            *(_OWORD *)(v24 + 16) = *(_OWORD *)buf;
            *(_OWORD *)(v24 + 32) = *(_OWORD *)&buf[16];
            *(void *)(v24 + 48) = *(void *)&buf[32];
            if (v16 == v18)
            {
              unint64_t v29 = v22 + 56 * v19;
            }
            else
            {
              unint64_t v25 = v22 + 56 * v19;
              do
              {
                long long v26 = *(_OWORD *)(v16 - 14);
                long long v27 = *(_OWORD *)(v16 - 10);
                long long v28 = *(_OWORD *)(v16 - 6);
                unint64_t v29 = v25 - 56;
                *(void *)(v25 - 8) = *((void *)v16 - 1);
                *(_OWORD *)(v25 - 24) = v28;
                *(_OWORD *)(v25 - 40) = v27;
                *(_OWORD *)(v25 - 56) = v26;
                v16 -= 14;
                v25 -= 56;
              }
              while (v16 != v18);
            }
            CFTypeRef v17 = (_DWORD *)(v24 + 56);
            *(void *)a1 = v29;
            *(void *)(a1 + 8) = v24 + 56;
            *(void *)(a1 + 16) = v22 + 56 * v23;
            if (v18) {
              operator delete(v18);
            }
          }
          else
          {
            _DWORD *v16 = simple_required;
            v16[1] = v14;
            void v16[2] = 0;
            *((_OWORD *)v16 + 1) = *(_OWORD *)buf;
            *((_OWORD *)v16 + 2) = *(_OWORD *)&buf[16];
            *((void *)v16 + 6) = *(void *)&buf[32];
            CFTypeRef v17 = v16 + 14;
          }
          *(void *)(a1 + 8) = v17;
        }
        if (v36) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v36);
        }
        ++v9;
      }
      while (v9 != v10);
      uint64_t v30 = __p;
      if (__p) {
        goto LABEL_29;
      }
    }
  }
}

void sub_1BADDD448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (v13) {
    operator delete(v13);
  }
  unint64_t v15 = *(void **)v12;
  if (*(void *)v12)
  {
    *(void *)(v12 + 8) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__function::__func<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy(uint64_t a1)
{
}

void *std::__function::__func<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_1F1475670;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  a2[3] = result[3];
  uint64_t v4 = result[5];
  a2[4] = result[4];
  a2[5] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::__clone(void *a1)
{
  __n128 result = operator new(0x30uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  *__n128 result = &unk_1F1475670;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1[4];
  result[3] = a1[3];
  result[4] = v5;
  uint64_t v6 = a1[5];
  result[5] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1475670;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1475670;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1853059619EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1853059619EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14755F0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14755F0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F14755F0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F14755F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA14ValueRangeListEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1853059619EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA14ValueRangeListEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1853059619EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA14ValueRangeListEvEEclEv(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    goto LABEL_2;
  }
  uint64_t v5 = HIDWORD(PropertyDataSize);
  LOBYTE(v11) = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v11);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      int v10 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    return;
  }
  uint64_t v6 = __p;
  unint64_t v7 = v10 - (unsigned char *)__p;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  if (v7 >= 0x10)
  {
    uint64_t v8 = 16 * (v7 >> 4);
    do
    {
      long long v11 = *v6;
      CA::ValueRangeList::AddRange((double **)a2, (double *)&v11);
      ++v6;
      v8 -= 16;
    }
    while (v8);
    uint64_t v6 = __p;
  }
  if (v6)
  {
    int v10 = v6;
    operator delete(v6);
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA14ValueRangeListEvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA14ValueRangeListEvEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA14ValueRangeListEvEE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1475570;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}