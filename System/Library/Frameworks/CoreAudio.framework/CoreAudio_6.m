__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA14ValueRangeListEvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  v4 = *(void *)(a1 + 8);
  v3 = *(void *)(a1 + 16);
  *(void *)v2 = &unk_1F1475570;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA14ValueRangeListEvEED0Ev(void *a1)
{
  *a1 = &unk_1F1475570;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059619EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA14ValueRangeListEvEED1Ev(void *a1)
{
  *a1 = &unk_1F1475570;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1853059700EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1853059700EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14754F0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14754F0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F14754F0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F14754F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1853059700EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1853059700EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1)
{
  unint64_t IsPropertySettable = AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
  char is_settable = AMCP::ASP::property_always_is_settable((AMCP::ASP *)*(unsigned int *)(a1 + 28), v3);
  if (IsPropertySettable) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = HIDWORD(IsPropertySettable) == 0;
  }
  unsigned int v6 = !v5;
  if (is_settable) {
    return 1;
  }
  else {
    return v6;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1475470;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1475470;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1475470;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1475470;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKdE_NS_9allocatorISL_EEFvSK_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1853059700EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKdE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKdE_NS_9allocatorISL_EEFvSK_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1853059700EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKdE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKdE_NS_9allocatorISL_EEFvSK_EEclESK_(uint64_t a1, const void *a2)
{
  char v6 = 0;
  std::vector<std::byte>::vector(&__p, 8uLL, &v6);
  memcpy(__p, a2, v5 - (unsigned char *)__p);
  AMCP::ASP::PlugIn::ObjectSetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, (v5 - __p), __p);
  if (__p)
  {
    BOOL v5 = __p;
    operator delete(__p);
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKdE_NS_9allocatorISL_EEFvSK_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKdE_NS_9allocatorISL_EEFvSK_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKdE_NS_9allocatorISL_EEFvSK_EE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14753F0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKdE_NS_9allocatorISL_EEFvSK_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14753F0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKdE_NS_9allocatorISL_EEFvSK_EED0Ev(void *a1)
{
  *a1 = &unk_1F14753F0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKdE_NS_9allocatorISL_EEFvSK_EED1Ev(void *a1)
{
  *a1 = &unk_1F14753F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFdvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1853059700EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFdvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1853059700EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFdvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    return 0.0;
  }
  uint64_t v3 = HIDWORD(PropertyDataSize);
  char v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  uint64_t PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v8 - (unsigned char *)__p) < 8)
  {
    double v5 = 0.0;
    if (!__p) {
      goto LABEL_7;
    }
  }
  else
  {
    double v5 = *(double *)__p;
  }
  v8 = __p;
  operator delete(__p);
LABEL_7:
  if (PropertyData) {
    return 0.0;
  }
  return v5;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFdvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFdvEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFdvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1475370;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFdvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1475370;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFdvEED0Ev(void *a1)
{
  *a1 = &unk_1F1475370;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1853059700EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFdvEED1Ev(void *a1)
{
  *a1 = &unk_1F1475370;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1819569763EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1819569763EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  double v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14752F0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14752F0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F14752F0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F14752F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1819569763EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1819569763EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    return 0;
  }
  uint64_t v3 = HIDWORD(PropertyDataSize);
  char v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  uint64_t PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (unsigned char *)__p) < 4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    if (!__p) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v5 = *(unsigned int *)__p;
  }
  char v9 = __p;
  operator delete(__p);
  uint64_t v6 = v5;
LABEL_7:
  if (PropertyData) {
    return 0;
  }
  return v6;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1475270;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1475270;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED0Ev(void *a1)
{
  *a1 = &unk_1F1475270;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1819569763EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED1Ev(void *a1)
{
  *a1 = &unk_1F1475270;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1668049764EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1668049764EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14751F0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14751F0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F14751F0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F14751F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1668049764EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1668049764EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    return 0;
  }
  uint64_t v3 = HIDWORD(PropertyDataSize);
  char v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  uint64_t PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (unsigned char *)__p) < 4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    if (!__p) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v5 = *(unsigned int *)__p;
  }
  char v9 = __p;
  operator delete(__p);
  uint64_t v6 = v5;
LABEL_7:
  if (PropertyData) {
    return 0;
  }
  return v6;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1475170;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1475170;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED0Ev(void *a1)
{
  *a1 = &unk_1F1475170;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668049764EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED1Ev(void *a1)
{
  *a1 = &unk_1F1475170;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1751737454EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFbvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1751737454EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjRKNS_15Property_TraitsIXT_EE10Value_TypeEEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1751737454EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFbvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1751737454EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjRKNS_15Property_TraitsIXT_EE10Value_TypeEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1751737454EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFbvEEclEv(uint64_t a1)
{
  if (!AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28)))return *(unsigned char *)(a1 + 40) != 0; {
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  }
  if (PropertyDataSize) {
    return *(unsigned char *)(a1 + 40) != 0;
  }
  uint64_t v3 = HIDWORD(PropertyDataSize);
  char v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  uint64_t PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (unsigned char *)__p) < 4)
  {
    BOOL v5 = 0;
    BOOL v6 = 0;
    if (!__p) {
      goto LABEL_8;
    }
  }
  else
  {
    BOOL v5 = *(_DWORD *)__p != 0;
  }
  char v9 = __p;
  operator delete(__p);
  BOOL v6 = v5;
LABEL_8:
  if (PropertyData) {
    return *(unsigned char *)(a1 + 40) != 0;
  }
  return v6;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1751737454EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFbvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1751737454EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFbvEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1751737454EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFbvEE7__cloneEPNS0_6__baseISR_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14750F0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1751737454EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFbvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14750F0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  v2[40] = *(unsigned char *)(a1 + 40);
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1751737454EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFbvEED0Ev(void *a1)
{
  *a1 = &unk_1F14750F0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1751737454EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFbvEED1Ev(void *a1)
{
  *a1 = &unk_1F14750F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1953653102EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1953653102EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  BOOL v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1474770;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1474770;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1474770;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1474770;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1953653102EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1953653102EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    return 0;
  }
  uint64_t v3 = HIDWORD(PropertyDataSize);
  char v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  uint64_t PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (unsigned char *)__p) < 4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    if (!__p) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v5 = *(unsigned int *)__p;
  }
  char v9 = __p;
  operator delete(__p);
  uint64_t v6 = v5;
LABEL_7:
  if (PropertyData) {
    return 0;
  }
  return v6;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14746F0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14746F0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED0Ev(void *a1)
{
  *a1 = &unk_1F14746F0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1953653102EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED1Ev(void *a1)
{
  *a1 = &unk_1F14746F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1836411236EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1836411236EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1475070;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1475070;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1475070;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1475070;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1836411236EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1836411236EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::StringRef *a2@<X8>)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    goto LABEL_2;
  }
  uint64_t v5 = HIDWORD(PropertyDataSize);
  char v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(void *)a2 = 0;
    return;
  }
  uint64_t v6 = __p;
  if ((unint64_t)(v8 - (unsigned char *)__p) < 8)
  {
    *(void *)a2 = 0;
    if (!v6) {
      return;
    }
LABEL_11:
    v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::StringRef::StringRef(a2, *(CFTypeRef *)__p);
  uint64_t v6 = __p;
  if (__p) {
    goto LABEL_11;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1474FF0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1474FF0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED0Ev(void *a1)
{
  *a1 = &unk_1F1474FF0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1836411236EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED1Ev(void *a1)
{
  *a1 = &unk_1F1474FF0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13PlugIn_Object21populate_control_coreEjRNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28)) == 0;
}

void std::__function::__func<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::destroy(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 std::__function::__func<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14762C0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 std::__function::__func<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14762C0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14762C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14762C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1667591277EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1667591277EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1476240;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1476240;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1476240;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1476240;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1667591277EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1667591277EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    return 0;
  }
  uint64_t v3 = HIDWORD(PropertyDataSize);
  char v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  uint64_t PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (unsigned char *)__p) < 4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    if (!__p) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v5 = *(unsigned int *)__p;
  }
  char v9 = __p;
  operator delete(__p);
  uint64_t v6 = v5;
LABEL_7:
  if (PropertyData) {
    return 0;
  }
  return v6;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14761C0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14761C0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED0Ev(void *a1)
{
  *a1 = &unk_1F14761C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667591277EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED1Ev(void *a1)
{
  *a1 = &unk_1F14761C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1668506480EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1668506480EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1476140;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1476140;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1476140;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1476140;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1668506480EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1668506480EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    return 0;
  }
  uint64_t v3 = HIDWORD(PropertyDataSize);
  char v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  uint64_t PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (unsigned char *)__p) < 4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    if (!__p) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v5 = *(unsigned int *)__p;
  }
  char v9 = __p;
  operator delete(__p);
  uint64_t v6 = v5;
LABEL_7:
  if (PropertyData) {
    return 0;
  }
  return v6;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14760C0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14760C0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED0Ev(void *a1)
{
  *a1 = &unk_1F14760C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1668506480EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED1Ev(void *a1)
{
  *a1 = &unk_1F14760C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1936745315EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1936745315EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1477340;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1477340;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1477340;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1477340;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1936745315EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1936745315EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

unint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  unsigned int v3 = 0;
  unint64_t v4 = 0;
  if (!PropertyDataSize)
  {
    uint64_t v5 = HIDWORD(PropertyDataSize);
    char v11 = 0;
    std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v11);
    if (!AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
    {
      if ((unint64_t)(v10 - (unsigned char *)__p) < 8)
      {
        unint64_t v7 = 0;
        LODWORD(v6) = 0;
        unint64_t v4 = 0;
        unsigned int v3 = 0;
        if (!__p) {
          return v4 & 0xFFFFFFFF00000000 | v3;
        }
      }
      else
      {
        uint64_t v6 = *(void *)__p;
        unint64_t v7 = *(void *)__p & 0xFFFFFFFF00000000;
      }
      char v10 = __p;
      operator delete(__p);
      unint64_t v4 = v7;
      unsigned int v3 = v6;
      return v4 & 0xFFFFFFFF00000000 | v3;
    }
    if (__p)
    {
      char v10 = __p;
      operator delete(__p);
    }
    unsigned int v3 = 0;
    unint64_t v4 = 0;
  }
  return v4 & 0xFFFFFFFF00000000 | v3;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14772C0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14772C0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEED0Ev(void *a1)
{
  *a1 = &unk_1F14772C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745315EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEED1Ev(void *a1)
{
  *a1 = &unk_1F14772C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1936745334EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1936745334EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1477240;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1477240;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1477240;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1477240;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1936745334EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1936745334EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1)
{
  unint64_t IsPropertySettable = AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
  char is_settable = AMCP::ASP::property_always_is_settable((AMCP::ASP *)*(unsigned int *)(a1 + 28), v3);
  if (IsPropertySettable) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = HIDWORD(IsPropertySettable) == 0;
  }
  unsigned int v6 = !v5;
  if (is_settable) {
    return 1;
  }
  else {
    return v6;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14771C0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14771C0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F14771C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F14771C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1936745334EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKfE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1936745334EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKfE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EEclESK_(uint64_t a1, const void *a2)
{
  char v6 = 0;
  std::vector<std::byte>::vector(&__p, 4uLL, &v6);
  memcpy(__p, a2, v5 - (unsigned char *)__p);
  AMCP::ASP::PlugIn::ObjectSetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, (v5 - __p), __p);
  if (__p)
  {
    BOOL v5 = __p;
    operator delete(__p);
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1477140;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1477140;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EED0Ev(void *a1)
{
  *a1 = &unk_1F1477140;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EED1Ev(void *a1)
{
  *a1 = &unk_1F1477140;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1936745334EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1936745334EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

float _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    return 0.0;
  }
  uint64_t v3 = HIDWORD(PropertyDataSize);
  char v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  uint64_t PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v8 - (unsigned char *)__p) < 4)
  {
    float v5 = 0.0;
    if (!__p) {
      goto LABEL_7;
    }
  }
  else
  {
    float v5 = *(float *)__p;
  }
  v8 = __p;
  operator delete(__p);
LABEL_7:
  if (PropertyData) {
    return 0.0;
  }
  return v5;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14770C0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14770C0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEED0Ev(void *a1)
{
  *a1 = &unk_1F14770C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936745334EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEED1Ev(void *a1)
{
  *a1 = &unk_1F14770C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  v23 = 0;
  char v6 = operator new(0x40uLL);
  *char v6 = &unk_1F1483AB8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  v23 = v6;
  memset(v20, 0, sizeof(v20));
  v21 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  v21 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BADE1B24(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterINSt3__16vectorINS3_5tupleIJjjN10applesauce2CF9StringRefEEEENS3_9allocatorIS9_EEEEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AMCP::Core::Operation::call_function<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>((uint64_t)&v3, (void *)(a1 + 8));
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>((void *)a2, v3, v4, (v4 - v3) >> 4);
  *(void *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>::dispatch;
  unint64_t v5 = (void **)&v3;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void sub_1BADE1BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1483AB8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F1483AB8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BADE1D20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1483AB8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1483AB8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935892841EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJjjN10applesauce2CF9StringRefEEEENSK_ISR_EEEEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935892841EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935892841EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJjjN10applesauce2CF9StringRefEEEENSK_ISR_EEEEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935892841EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935892841EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJjjN10applesauce2CF9StringRefEEEENSK_ISR_EEEEvEEclEv(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *(void *)&v27.mSelector = 0x676C6F6273636169;
  v27.mElement = 0;
  AMCP::ASP::PlugIn::object_get_property_data<unsigned int [],unsigned int>((uint64_t)&v24, *(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), &v27);
  int v4 = v24;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  unint64_t v5 = __p;
  if (!v4)
  {
    char v6 = v26;
    if (__p != v26)
    {
      do
      {
        *(void *)&v23.mSelector = 0x676C6F627363696ELL;
        v23.mElement = 0;
        unint64_t v7 = *(AMCP::ASP::PlugIn **)(a1 + 8);
        uint64_t v8 = *(unsigned int *)(a1 + 24);
        v28[0] = 0;
        if (AMCP::ASP::PlugIn::ObjectGetPropertyData(v7, v8, 0, &v23, 4, v5, 8, v28)) {
          CFTypeRef cf = 0;
        }
        else {
          applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v28[0]);
        }
        *(void *)&v21.mSelector = 0x676C6F62636C6B6BLL;
        v21.mElement = 0;
        unint64_t v9 = *(AMCP::ASP::PlugIn **)(a1 + 8);
        uint64_t v10 = *(unsigned int *)(a1 + 24);
        LODWORD(v28[0]) = 0;
        if (AMCP::ASP::PlugIn::ObjectGetPropertyData(v9, v10, 0, &v21, 4, v5, 4, v28)) {
          int v11 = 0;
        }
        else {
          int v11 = (int)v28[0];
        }
        unint64_t v13 = a2[1];
        unint64_t v12 = a2[2];
        if (v13 >= v12)
        {
          uint64_t v15 = (uint64_t)(v13 - *a2) >> 4;
          if ((unint64_t)(v15 + 1) >> 60) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v16 = v12 - *a2;
          uint64_t v17 = v16 >> 3;
          if (v16 >> 3 <= (unint64_t)(v15 + 1)) {
            uint64_t v17 = v15 + 1;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v17;
          }
          v28[4] = a2 + 2;
          if (v18) {
            unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v18);
          }
          else {
            uint64_t v19 = 0;
          }
          v20 = (_DWORD *)(v18 + 16 * v15);
          v28[0] = (CFTypeRef)v18;
          v28[1] = v20;
          v28[3] = (CFTypeRef)(v18 + 16 * v19);
          _DWORD *v20 = *v5;
          v20[1] = v11;
          std::__tuple_leaf<2ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100]<applesauce::CF::StringRef&,void>((void *)v20 + 1, cf);
          v28[2] = v20 + 4;
          std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__swap_out_circular_buffer(a2, v28);
          uint64_t v14 = a2[1];
          std::__split_buffer<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::~__split_buffer((uint64_t)v28);
        }
        else
        {
          *(_DWORD *)unint64_t v13 = *v5;
          *(_DWORD *)(v13 + 4) = v11;
          std::__tuple_leaf<2ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100]<applesauce::CF::StringRef&,void>((void *)(v13 + 8), cf);
          uint64_t v14 = v13 + 16;
          a2[1] = v13 + 16;
        }
        a2[1] = v14;
        if (cf) {
          CFRelease(cf);
        }
        ++v5;
      }
      while (v5 != v6);
      unint64_t v5 = __p;
    }
  }
  if (v5)
  {
    v26 = v5;
    operator delete(v5);
  }
}

void sub_1BADE2048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, uint64_t a12, uint64_t a13, uint64_t a14, void *__p)
{
  if (cf) {
    CFRelease(cf);
  }
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935892841EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJjjN10applesauce2CF9StringRefEEEENSK_ISR_EEEEvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935892841EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJjjN10applesauce2CF9StringRefEEEENSK_ISR_EEEEvEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935892841EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJjjN10applesauce2CF9StringRefEEEENSK_ISR_EEEEvEE7__cloneEPNS0_6__baseISU_EE(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = &unk_1F1477040;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935892841EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJjjN10applesauce2CF9StringRefEEEENSK_ISR_EEEEvEE7__cloneEv(uint64_t a1)
{
  double result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *double result = &unk_1F1477040;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935892841EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJjjN10applesauce2CF9StringRefEEEENSK_ISR_EEEEvEED0Ev(void *a1)
{
  *a1 = &unk_1F1477040;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935892841EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJjjN10applesauce2CF9StringRefEEEENSK_ISR_EEEEvEED1Ev(void *a1)
{
  *a1 = &unk_1F1477040;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935893353EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935893353EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  unint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1476FC0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1476FC0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1476FC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1476FC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935893353EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935893353EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1)
{
  unint64_t IsPropertySettable = AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
  char is_settable = AMCP::ASP::property_always_is_settable((AMCP::ASP *)*(unsigned int *)(a1 + 28), v3);
  if (IsPropertySettable) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = HIDWORD(IsPropertySettable) == 0;
  }
  unsigned int v6 = !v5;
  if (is_settable) {
    return 1;
  }
  else {
    return v6;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1476F40;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1476F40;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1476F40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1476F40;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  AudioObjectPropertyAddress v23 = 0;
  unsigned int v6 = operator new(0x40uLL);
  *unsigned int v6 = &unk_1F1483950;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  AudioObjectPropertyAddress v23 = v6;
  memset(v20, 0, sizeof(v20));
  AudioObjectPropertyAddress v21 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  AudioObjectPropertyAddress v21 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<void ()(AMCP::Thing const&)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BADE2880(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_setterINSt3__16vectorIjNS3_9allocatorIjEEEEEEvRNS0_9OperationEEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 8);
  AMCP::Thing::convert_to<std::vector<unsigned int>>(__p, a2);
  AMCP::Core::Operation::call_function<void,std::vector<unsigned int> const&>(v2, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1BADE292C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1483950;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F1483950;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BADE2A58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1483950;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1483950;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKNS_6vectorIjNS_9allocatorIjEEEEE_NSK_ISP_EEFvSO_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935893353EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKNS2_6vectorIjNS2_9allocatorIjEEEEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKNS_6vectorIjNS_9allocatorIjEEEEE_NSK_ISP_EEFvSO_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935893353EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKNS2_6vectorIjNS2_9allocatorIjEEEEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKNS_6vectorIjNS_9allocatorIjEEEEE_NSK_ISP_EEFvSO_EEclESO_(uint64_t a1, uint64_t a2)
{
  size_t v4 = *(void *)(a2 + 8) - *(void *)a2;
  char v7 = 0;
  std::vector<std::byte>::vector(&__p, v4, &v7);
  memcpy(__p, *(const void **)a2, v6 - (unsigned char *)__p);
  AMCP::ASP::PlugIn::ObjectSetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, (v6 - __p), __p);
  if (__p)
  {
    unsigned int v6 = __p;
    operator delete(__p);
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKNS_6vectorIjNS_9allocatorIjEEEEE_NSK_ISP_EEFvSO_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKNS_6vectorIjNS_9allocatorIjEEEEE_NSK_ISP_EEFvSO_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKNS_6vectorIjNS_9allocatorIjEEEEE_NSK_ISP_EEFvSO_EE7__cloneEPNS0_6__baseISR_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1476EC0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKNS_6vectorIjNS_9allocatorIjEEEEE_NSK_ISP_EEFvSO_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1476EC0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKNS_6vectorIjNS_9allocatorIjEEEEE_NSK_ISP_EEFvSO_EED0Ev(void *a1)
{
  *a1 = &unk_1F1476EC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKNS_6vectorIjNS_9allocatorIjEEEEE_NSK_ISP_EEFvSO_EED1Ev(void *a1)
{
  *a1 = &unk_1F1476EC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935893353EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935893353EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEEclEv(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    goto LABEL_2;
  }
  uint64_t v5 = HIDWORD(PropertyDataSize);
  char v11 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v11);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      uint64_t v10 = __p;
      operator delete(__p);
    }
LABEL_2:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  unsigned int v6 = __p;
  char v7 = (char *)__p + ((v10 - (unsigned char *)__p) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v8 = (v10 - (unsigned char *)__p) >> 2;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(a2, v6, (uint64_t)v7, v8);
  if (__p)
  {
    uint64_t v10 = __p;
    operator delete(__p);
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1476E40;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1476E40;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEED0Ev(void *a1)
{
  *a1 = &unk_1F1476E40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935893353EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEED1Ev(void *a1)
{
  *a1 = &unk_1F1476E40;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1650685548EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1650685548EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1476DC0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1476DC0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1476DC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1476DC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1650685548EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1650685548EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1)
{
  unint64_t IsPropertySettable = AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
  char is_settable = AMCP::ASP::property_always_is_settable((AMCP::ASP *)*(unsigned int *)(a1 + 28), v3);
  if (IsPropertySettable) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = HIDWORD(IsPropertySettable) == 0;
  }
  unsigned int v6 = !v5;
  if (is_settable) {
    return 1;
  }
  else {
    return v6;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1476D40;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1476D40;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1476D40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1476D40;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1650685548EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKbE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1650685548EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKbE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EEclESK_(uint64_t a1, unsigned __int8 *a2)
{
  char v7 = 0;
  std::vector<std::byte>::vector(&__p, 4uLL, &v7);
  uint64_t v4 = __p;
  *(_DWORD *)__p = *a2;
  AMCP::ASP::PlugIn::ObjectSetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, (v6 - v4), v4);
  if (__p)
  {
    unsigned int v6 = __p;
    operator delete(__p);
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1476CC0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1476CC0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EED0Ev(void *a1)
{
  *a1 = &unk_1F1476CC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EED1Ev(void *a1)
{
  *a1 = &unk_1F1476CC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1650685548EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1650685548EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    return 0;
  }
  uint64_t v3 = HIDWORD(PropertyDataSize);
  char v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  uint64_t PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (unsigned char *)__p) < 4)
  {
    BOOL v5 = 0;
    BOOL v6 = 0;
    if (!__p) {
      goto LABEL_7;
    }
  }
  else
  {
    BOOL v5 = *(_DWORD *)__p != 0;
  }
  unint64_t v9 = __p;
  operator delete(__p);
  BOOL v6 = v5;
LABEL_7:
  if (PropertyData) {
    return 0;
  }
  return v6;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1476C40;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1476C40;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEED0Ev(void *a1)
{
  *a1 = &unk_1F1476C40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650685548EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEED1Ev(void *a1)
{
  *a1 = &unk_1F1476C40;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13PlugIn_Object28populate_volume_control_coreEjRNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

float std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::operator()(uint64_t a1, float *a2)
{
  float v2 = *a2;
  *(void *)&v6.mSelector = 0x676C6F626C636473;
  v6.mElement = 0;
  float v5 = v2;
  int PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, &v6, 0, 0, 4, &v5);
  float result = v5;
  if (PropertyData) {
    return 0.0;
  }
  return result;
}

void std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::destroy_deallocate(void *__p)
{
  float v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::destroy(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = &unk_1F1476BC0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

void *std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::__clone(uint64_t a1)
{
  float result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *float result = &unk_1F1476BC0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

void std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::~__func(void *a1)
{
  *a1 = &unk_1F1476BC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_1>,float ()(float,BOOL)>::~__func(void *a1)
{
  *a1 = &unk_1F1476BC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13PlugIn_Object28populate_volume_control_coreEjRNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

float std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  float v2 = *a2;
  *(void *)&v6.mSelector = 0x676C6F626C637364;
  v6.mElement = 0;
  float v5 = v2;
  int PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, &v6, 0, 0, 4, &v5);
  float result = v5;
  if (PropertyData) {
    return 0.0;
  }
  return result;
}

void std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::destroy_deallocate(void *__p)
{
  float v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::destroy(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = &unk_1F1476B40;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

void *std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::__clone(uint64_t a1)
{
  float result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *float result = &unk_1F1476B40;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

void std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::~__func(void *a1)
{
  *a1 = &unk_1F1476B40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_volume_control_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,float ()(float)>::~__func(void *a1)
{
  *a1 = &unk_1F1476B40;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818453106EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818453106EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  float v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1476AC0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1476AC0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1476AC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1476AC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  AudioObjectPropertyAddress v23 = 0;
  uint64_t v6 = operator new(0x40uLL);
  *uint64_t v6 = &unk_1F14832B0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  AudioObjectPropertyAddress v23 = v6;
  memset(v20, 0, sizeof(v20));
  AudioObjectPropertyAddress v21 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  AudioObjectPropertyAddress v21 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BADE4328(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIN2CA10ValueRangeEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = AMCP::Core::Operation::call_function<CA::ValueRange>((void *)(a1 + 8));
  a2[2] = 0;
  a2[3] = 0;
  *a2 = v4;
  a2[1] = v5;
  a2[4] = AMCP::Implementation::In_Place_Storage<CA::ValueRange>::dispatch;
  return result;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14832B0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F14832B0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BADE44D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14832B0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14832B0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA10ValueRangeEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818453106EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA10ValueRangeEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818453106EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA10ValueRangeEvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (!PropertyDataSize)
  {
    uint64_t v5 = HIDWORD(PropertyDataSize);
    char v8 = 0;
    std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v8);
    if (!AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
    {
      double v3 = *(double *)__p;
      char v7 = __p;
      operator delete(__p);
      return v3;
    }
    if (__p)
    {
      char v7 = __p;
      operator delete(__p);
    }
  }
  return 0.0;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA10ValueRangeEvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA10ValueRangeEvEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA10ValueRangeEvEE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1476A40;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA10ValueRangeEvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1476A40;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA10ValueRangeEvEED0Ev(void *a1)
{
  *a1 = &unk_1F1476A40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453106EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN2CA10ValueRangeEvEED1Ev(void *a1)
{
  *a1 = &unk_1F1476A40;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818453110EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818453110EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14769C0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14769C0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F14769C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F14769C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818453110EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818453110EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1)
{
  unint64_t IsPropertySettable = AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
  char is_settable = AMCP::ASP::property_always_is_settable((AMCP::ASP *)*(unsigned int *)(a1 + 28), v3);
  if (IsPropertySettable) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = HIDWORD(IsPropertySettable) == 0;
  }
  unsigned int v6 = !v5;
  if (is_settable) {
    return 1;
  }
  else {
    return v6;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1476940;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1476940;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1476940;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1476940;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818453110EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKfE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818453110EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKfE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EEclESK_(uint64_t a1, const void *a2)
{
  char v6 = 0;
  std::vector<std::byte>::vector(&__p, 4uLL, &v6);
  memcpy(__p, a2, v5 - (unsigned char *)__p);
  AMCP::ASP::PlugIn::ObjectSetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, (v5 - __p), __p);
  if (__p)
  {
    BOOL v5 = __p;
    operator delete(__p);
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14768C0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14768C0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EED0Ev(void *a1)
{
  *a1 = &unk_1F14768C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EED1Ev(void *a1)
{
  *a1 = &unk_1F14768C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818453110EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818453110EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

float _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    return 0.0;
  }
  uint64_t v3 = HIDWORD(PropertyDataSize);
  char v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  uint64_t PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v8 - (unsigned char *)__p) < 4)
  {
    float v5 = 0.0;
    if (!__p) {
      goto LABEL_7;
    }
  }
  else
  {
    float v5 = *(float *)__p;
  }
  char v8 = __p;
  operator delete(__p);
LABEL_7:
  if (PropertyData) {
    return 0.0;
  }
  return v5;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1476840;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1476840;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEED0Ev(void *a1)
{
  *a1 = &unk_1F1476840;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818453110EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEED1Ev(void *a1)
{
  *a1 = &unk_1F1476840;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818456950EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818456950EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  float v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14767C0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14767C0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F14767C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F14767C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818456950EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818456950EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1)
{
  unint64_t IsPropertySettable = AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
  char is_settable = AMCP::ASP::property_always_is_settable((AMCP::ASP *)*(unsigned int *)(a1 + 28), v3);
  if (IsPropertySettable) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = HIDWORD(IsPropertySettable) == 0;
  }
  unsigned int v6 = !v5;
  if (is_settable) {
    return 1;
  }
  else {
    return v6;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1476740;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1476740;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1476740;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1476740;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818456950EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKfE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818456950EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKfE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EEclESK_(uint64_t a1, const void *a2)
{
  char v6 = 0;
  std::vector<std::byte>::vector(&__p, 4uLL, &v6);
  memcpy(__p, a2, v5 - (unsigned char *)__p);
  AMCP::ASP::PlugIn::ObjectSetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, (v5 - __p), __p);
  if (__p)
  {
    BOOL v5 = __p;
    operator delete(__p);
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14766C0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14766C0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EED0Ev(void *a1)
{
  *a1 = &unk_1F14766C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKfE_NS_9allocatorISL_EEFvSK_EED1Ev(void *a1)
{
  *a1 = &unk_1F14766C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1818456950EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1818456950EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

float _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    return 0.0;
  }
  uint64_t v3 = HIDWORD(PropertyDataSize);
  char v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  uint64_t PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v8 - (unsigned char *)__p) < 4)
  {
    float v5 = 0.0;
    if (!__p) {
      goto LABEL_7;
    }
  }
  else
  {
    float v5 = *(float *)__p;
  }
  char v8 = __p;
  operator delete(__p);
LABEL_7:
  if (PropertyData) {
    return 0.0;
  }
  return v5;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1476640;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1476640;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEED0Ev(void *a1)
{
  *a1 = &unk_1F1476640;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1818456950EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFfvEED1Ev(void *a1)
{
  *a1 = &unk_1F1476640;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935962738EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935962738EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  float v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14765C0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14765C0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F14765C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F14765C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935962738EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935962738EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

unint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  unsigned int v3 = 0;
  unint64_t v4 = 0;
  if (!PropertyDataSize)
  {
    uint64_t v5 = HIDWORD(PropertyDataSize);
    char v11 = 0;
    std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v11);
    if (!AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
    {
      if ((unint64_t)(v10 - (unsigned char *)__p) < 8)
      {
        unint64_t v7 = 0;
        LODWORD(v6) = 0;
        unint64_t v4 = 0;
        unsigned int v3 = 0;
        if (!__p) {
          return v4 & 0xFFFFFFFF00000000 | v3;
        }
      }
      else
      {
        uint64_t v6 = *(void *)__p;
        unint64_t v7 = *(void *)__p & 0xFFFFFFFF00000000;
      }
      uint64_t v10 = __p;
      operator delete(__p);
      unint64_t v4 = v7;
      unsigned int v3 = v6;
      return v4 & 0xFFFFFFFF00000000 | v3;
    }
    if (__p)
    {
      uint64_t v10 = __p;
      operator delete(__p);
    }
    unsigned int v3 = 0;
    unint64_t v4 = 0;
  }
  return v4 & 0xFFFFFFFF00000000 | v3;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1476540;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1476540;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEED0Ev(void *a1)
{
  *a1 = &unk_1F1476540;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962738EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_5tupleIJjjEEEvEED1Ev(void *a1)
{
  *a1 = &unk_1F1476540;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935962742EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935962742EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14764C0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14764C0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F14764C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F14764C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935962742EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935962742EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1)
{
  unint64_t IsPropertySettable = AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
  char is_settable = AMCP::ASP::property_always_is_settable((AMCP::ASP *)*(unsigned int *)(a1 + 28), v3);
  if (IsPropertySettable) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = HIDWORD(IsPropertySettable) == 0;
  }
  unsigned int v6 = !v5;
  if (is_settable) {
    return 1;
  }
  else {
    return v6;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1476440;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1476440;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1476440;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1476440;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKjE_NS_9allocatorISL_EEFvSK_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935962742EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKjE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKjE_NS_9allocatorISL_EEFvSK_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935962742EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKjE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKjE_NS_9allocatorISL_EEFvSK_EEclESK_(uint64_t a1, const void *a2)
{
  char v6 = 0;
  std::vector<std::byte>::vector(&__p, 4uLL, &v6);
  memcpy(__p, a2, v5 - (unsigned char *)__p);
  AMCP::ASP::PlugIn::ObjectSetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, (v5 - __p), __p);
  if (__p)
  {
    BOOL v5 = __p;
    operator delete(__p);
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKjE_NS_9allocatorISL_EEFvSK_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKjE_NS_9allocatorISL_EEFvSK_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKjE_NS_9allocatorISL_EEFvSK_EE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14763C0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKjE_NS_9allocatorISL_EEFvSK_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14763C0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKjE_NS_9allocatorISL_EEFvSK_EED0Ev(void *a1)
{
  *a1 = &unk_1F14763C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKjE_NS_9allocatorISL_EEFvSK_EED1Ev(void *a1)
{
  *a1 = &unk_1F14763C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935962742EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935962742EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    return 0;
  }
  uint64_t v3 = HIDWORD(PropertyDataSize);
  char v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  uint64_t PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (unsigned char *)__p) < 4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    if (!__p) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v5 = *(unsigned int *)__p;
  }
  char v9 = __p;
  operator delete(__p);
  uint64_t v6 = v5;
LABEL_7:
  if (PropertyData) {
    return 0;
  }
  return v6;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1476340;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1476340;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED0Ev(void *a1)
{
  *a1 = &unk_1F1476340;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935962742EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED1Ev(void *a1)
{
  *a1 = &unk_1F1476340;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1718449187EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1718449187EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1476040;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1476040;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1476040;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1476040;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJN2CA14ValueRangeListENSO_17StreamDescriptionEEEENSK_ISR_EEEEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1718449187EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJN2CA14ValueRangeListENSO_17StreamDescriptionEEEENSK_ISR_EEEEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1718449187EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJN2CA14ValueRangeListENSO_17StreamDescriptionEEEENSK_ISR_EEEEvEEclEv(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    goto LABEL_2;
  }
  uint64_t v5 = HIDWORD(PropertyDataSize);
  LOBYTE(v18) = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v18);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      int v17 = __p;
      operator delete(__p);
    }
LABEL_2:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  uint64_t v6 = (char *)__p;
  uint64_t v18 = 0;
  int v19 = 0;
  v20 = 0;
  if ((unint64_t)(v17 - (unsigned char *)__p) > 0x37)
  {
    unint64_t v7 = v17 - (unsigned char *)__p;
    char v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>((v17 - (unsigned char *)__p) / 0x38uLL);
    char v9 = v8;
    uint64_t v10 = 0;
    uint64_t v18 = v8;
    v20 = &v8[56 * v11];
    do
    {
      int v12 = &v8[v10];
      long long v13 = *(_OWORD *)&v6[v10];
      long long v14 = *(_OWORD *)&v6[v10 + 16];
      long long v15 = *(_OWORD *)&v6[v10 + 32];
      *((void *)v12 + 6) = *(void *)&v6[v10 + 48];
      *((_OWORD *)v12 + 1) = v14;
      *((_OWORD *)v12 + 2) = v15;
      *(_OWORD *)int v12 = v13;
      v10 += 56;
    }
    while (56 * (v7 / 0x38) != v10);
    int v19 = &v8[v10];
    AMCP::make_available_format_list((uint64_t *)&v18, a2);
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    AMCP::make_available_format_list((uint64_t *)&v18, a2);
  }
  if (__p)
  {
    int v17 = __p;
    operator delete(__p);
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJN2CA14ValueRangeListENSO_17StreamDescriptionEEEENSK_ISR_EEEEvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJN2CA14ValueRangeListENSO_17StreamDescriptionEEEENSK_ISR_EEEEvEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJN2CA14ValueRangeListENSO_17StreamDescriptionEEEENSK_ISR_EEEEvEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1475FC0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJN2CA14ValueRangeListENSO_17StreamDescriptionEEEENSK_ISR_EEEEvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1475FC0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJN2CA14ValueRangeListENSO_17StreamDescriptionEEEENSK_ISR_EEEEvEED0Ev(void *a1)
{
  *a1 = &unk_1F1475FC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1718449187EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorINS_5tupleIJN2CA14ValueRangeListENSO_17StreamDescriptionEEEENSK_ISR_EEEEvEED1Ev(void *a1)
{
  *a1 = &unk_1F1475FC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP28make_current_format_propertyENSt3__110shared_ptrINS0_6PlugInEEEjjNS2_INS_4Core11System_CoreEEERNS5_13Operation_SetEEUlRKN2CA17StreamDescriptionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::operator()(uint64_t a1, const void *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  core = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v31, *(std::__shared_mutex_base **)(*(void *)(a1 + 32) + 16), *(_DWORD *)(a1 + 28));
  if (!v31)
  {
    AMCP::Log::Scope_Registry::get(core);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    char v8 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      char v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v10;
      *(_WORD *)&buf[8] = 2080;
      *(void *)&buf[10] = "ASP_Object.cpp";
      __int16 v34 = 1024;
      int v35 = 978;
      __int16 v36 = 2080;
      *(void *)v37 = "(stream_core_ptr.get() == nullptr)";
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set stream format, invalid core stream object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v18);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error((std::runtime_error *)&v16, "failed to set stream format, invalid core stream object");
    std::runtime_error::runtime_error(&v25, (const std::runtime_error *)&v16);
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    int v30 = -1;
    v25.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    v26 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v25);
    *(void *)&v37[6] = "auto AMCP::ASP::make_current_format_property(PlugIn_Ptr, AudioObjectID, Object_ID, Core::System"
                         "_Core_Ptr, Core::Operation_Set &)::(anonymous class)::operator()(const CA::StreamDescription &) const";
    v38 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Object.cpp";
    int v39 = 978;
    std::vector<void *>::vector(&v20);
    int v11 = backtrace((void **)v20, (*((void *)&v20 + 1) - (void)v20) >> 3);
    std::vector<void *>::resize((char **)&v20, v11);
    std::runtime_error v23 = (std::runtime_error)v20;
    uint64_t v24 = v21;
    long long v20 = 0uLL;
    uint64_t v21 = 0;
    v22 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  AMCP::Core::Core::get_simple_required_property<1718449187u>(&v20, v31);
  BOOL is_an_available_format = AMCP::Utility::Stream_Format::format_is_an_available_format((uint64_t)a2, v20, *((uint64_t *)&v20 + 1));
  if (!is_an_available_format)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_an_available_format);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v12 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      long long v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v14;
      *(_WORD *)&buf[8] = 2080;
      *(void *)&buf[10] = "ASP_Object.cpp";
      __int16 v34 = 1024;
      int v35 = 982;
      __int16 v36 = 2080;
      *(void *)v37 = "(format_is_valid) == false";
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set stream format, invalid format", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v19);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v18, "failed to set stream format, invalid format");
    std::runtime_error::runtime_error(&v25, &v18);
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    int v30 = -1;
    v25.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    v26 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v25);
    *(void *)&v37[6] = "auto AMCP::ASP::make_current_format_property(PlugIn_Ptr, AudioObjectID, Object_ID, Core::System"
                         "_Core_Ptr, Core::Operation_Set &)::(anonymous class)::operator()(const CA::StreamDescription &) const";
    v38 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Object.cpp";
    int v39 = 982;
    std::vector<void *>::vector(&v16);
    int v15 = backtrace((void **)v16, (*((void *)&v16 + 1) - (void)v16) >> 3);
    std::vector<void *>::resize((char **)&v16, v15);
    v22 = &unk_1F148AA90;
    std::runtime_error v23 = (std::runtime_error)v16;
    uint64_t v24 = v17;
    unsigned long long v16 = 0uLL;
    uint64_t v17 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(a1 + 24);
  strcpy(buf, " tfpbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  AMCP::ASP::PlugIn::ObjectSetPropertyData(v6, v7, 0, (const AudioObjectPropertyAddress *)buf, 0, 0, 40, a2);
  *(void *)buf = &v20;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
}

void sub_1BADE782C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, std::runtime_error a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,std::runtime_error a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  *(void *)(v31 - 144) = &a17;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 144));
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::ASP::PlugIn_Object::populate_clock_core(unsigned int,AMCP::Core::Operation_Set &)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::destroy(uint64_t a1)
{
}

void *std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_1F1473AF0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  a2[3] = result[3];
  uint64_t v4 = result[5];
  a2[4] = result[4];
  a2[5] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::__clone(void *a1)
{
  __n128 result = operator new(0x30uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  *__n128 result = &unk_1F1473AF0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1[4];
  result[3] = a1[3];
  result[4] = v5;
  uint64_t v6 = a1[5];
  result[5] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1473AF0;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1473AF0;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void *std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP28make_current_format_propertyENSt3__110shared_ptrINS0_6PlugInEEEjjNS2_INS_4Core11System_CoreEEERNS5_13Operation_SetEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::operator()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  *(void *)&v8.mSelector = 0x676C6F6270667420;
  v8.mElement = 0;
  uint64_t v11 = 0;
  long long v9 = 0u;
  long long v10 = 0u;
  int PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(v3, v4, 0, &v8, 0, 0, 40, &v9);
  long long v12 = v9;
  long long v13 = v10;
  uint64_t v14 = v11;
  if (PropertyData)
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  else
  {
    double result = *(double *)&v12;
    long long v7 = v13;
    *(_OWORD *)a2 = v12;
    *(_OWORD *)(a2 + 16) = v7;
    *(void *)(a2 + 32) = v14;
  }
  return result;
}

void std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::destroy(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = &unk_1F1473A70;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

void *std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::__clone(uint64_t a1)
{
  double result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *double result = &unk_1F1473A70;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

void std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1473A70;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_current_format_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1473A70;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1936487523EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1936487523EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1475F40;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1475F40;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1475F40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1475F40;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFivEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1936487523EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFivEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1936487523EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFivEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    return 0;
  }
  uint64_t v3 = HIDWORD(PropertyDataSize);
  char v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  uint64_t PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (unsigned char *)__p) < 4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    if (!__p) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v5 = *(unsigned int *)__p;
  }
  long long v9 = __p;
  operator delete(__p);
  uint64_t v6 = v5;
LABEL_7:
  if (PropertyData) {
    return 0;
  }
  return v6;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFivEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFivEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFivEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1475EC0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFivEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1475EC0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFivEED0Ev(void *a1)
{
  *a1 = &unk_1F1475EC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1936487523EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFivEED1Ev(void *a1)
{
  *a1 = &unk_1F1475EC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1952805485EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1952805485EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1475E40;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1475E40;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1475E40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1475E40;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1952805485EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1952805485EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    return 0;
  }
  uint64_t v3 = HIDWORD(PropertyDataSize);
  char v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  uint64_t PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (unsigned char *)__p) < 4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    if (!__p) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v5 = *(unsigned int *)__p;
  }
  long long v9 = __p;
  operator delete(__p);
  uint64_t v6 = v5;
LABEL_7:
  if (PropertyData) {
    return 0;
  }
  return v6;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1475DC0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1475DC0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED0Ev(void *a1)
{
  *a1 = &unk_1F1475DC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952805485EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED1Ev(void *a1)
{
  *a1 = &unk_1F1475DC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952542835EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFjvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1952542835EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjRKNS_15Property_TraitsIXT_EE10Value_TypeEEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952542835EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFjvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1952542835EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjRKNS_15Property_TraitsIXT_EE10Value_TypeEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952542835EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFjvEEclEv(uint64_t a1)
{
  if (!AMCP::ASP::PlugIn::ObjectHasProperty(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28)))return *(unsigned int *)(a1 + 40); {
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  }
  if (PropertyDataSize) {
    return *(unsigned int *)(a1 + 40);
  }
  uint64_t v3 = HIDWORD(PropertyDataSize);
  char v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  uint64_t PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (unsigned char *)__p) < 4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    if (!__p) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v5 = *(unsigned int *)__p;
  }
  long long v9 = __p;
  operator delete(__p);
  uint64_t v6 = v5;
LABEL_8:
  if (PropertyData) {
    return *(unsigned int *)(a1 + 40);
  }
  return v6;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952542835EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFjvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952542835EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFjvEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952542835EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFjvEE7__cloneEPNS0_6__baseISR_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1475D40;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952542835EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFjvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1475D40;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_DWORD *)v2 + 10) = *(_DWORD *)(a1 + 40);
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952542835EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFjvEED0Ev(void *a1)
{
  *a1 = &unk_1F1475D40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1952542835EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjRKNS2_15Property_TraitsIXT_EE10Value_TypeEEUlvE_NS_9allocatorISO_EEFjvEED1Ev(void *a1)
{
  *a1 = &unk_1F1475D40;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935894638EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935894638EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1475CC0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1475CC0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1475CC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1475CC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935894638EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935894638EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    return 0;
  }
  uint64_t v3 = HIDWORD(PropertyDataSize);
  char v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  uint64_t PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (unsigned char *)__p) < 4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    if (!__p) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v5 = *(unsigned int *)__p;
  }
  long long v9 = __p;
  operator delete(__p);
  uint64_t v6 = v5;
LABEL_7:
  if (PropertyData) {
    return 0;
  }
  return v6;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1475C40;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1475C40;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED0Ev(void *a1)
{
  *a1 = &unk_1F1475C40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935894638EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED1Ev(void *a1)
{
  *a1 = &unk_1F1475C40;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935960434EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935960434EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1475BC0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1475BC0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1475BC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1475BC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS2_9DirectionEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935960434EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS2_9DirectionEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935960434EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS2_9DirectionEvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    return 0;
  }
  uint64_t v3 = HIDWORD(PropertyDataSize);
  char v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  uint64_t PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (unsigned char *)__p) < 4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    if (!__p) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v5 = *(unsigned int *)__p;
  }
  long long v9 = __p;
  operator delete(__p);
  uint64_t v6 = v5;
LABEL_7:
  if (PropertyData) {
    return 0;
  }
  return v6;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS2_9DirectionEvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS2_9DirectionEvEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS2_9DirectionEvEE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1475B40;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS2_9DirectionEvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1475B40;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS2_9DirectionEvEED0Ev(void *a1)
{
  *a1 = &unk_1F1475B40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935960434EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS2_9DirectionEvEED1Ev(void *a1)
{
  *a1 = &unk_1F1475B40;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void AMCP::ASP::make_channel_layout_property(unsigned int a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, long long *a6, uint64_t a7)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  long long v25 = 0uLL;
  LODWORD(v14) = vdup_n_s32(0x73726E64u).u32[0];
  HIDWORD(v14) = a1;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  long long v22 = *a6;
  if (*((void *)a6 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)a6 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v24, 0, v14);
  uint64_t v15 = v24;
  unint64_t v16 = AMCP::Implementation::get_type_marker<std::function<CA::ChannelLayout ()(void)>>();
  int v30 = 0;
  uint64_t v17 = (char *)operator new(0x38uLL);
  *(void *)&long long v18 = a2;
  *((void *)&v18 + 1) = a3;
  *(void *)uint64_t v17 = &unk_1F1473870;
  *((_DWORD *)v17 + 2) = a1;
  *((_OWORD *)v17 + 1) = v18;
  *((void *)v17 + 4) = a4 | ((unint64_t)a5 << 32);
  *(_OWORD *)(v17 + 40) = v22;
  int v30 = v17;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v28 = 0;
  std::__function::__value_func<CA::ChannelLayout ()(void)>::__value_func[abi:ne180100]((uint64_t)&v26, (uint64_t)v29);
  uint64_t v28 = AMCP::Implementation::In_Place_Storage<std::function<CA::ChannelLayout ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v15, v16, (AMCP *)&v26);
  if (v28) {
    v28(0, (uint64_t)&v26, 0, 0);
  }
  std::__function::__value_func<CA::ChannelLayout ()(void)>::~__value_func[abi:ne180100](v29);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(v15);
  uint64_t v21 = v24;
  long long v25 = v24;
  long long v23 = *a6;
  if (*((void *)a6 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)a6 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  int v30 = 0;
  long long v20 = operator new(0x20uLL);
  void *v20 = &unk_1F14738F0;
  v20[1] = (a5 << 32) | a1;
  *((_OWORD *)v20 + 1) = v23;
  int v30 = v20;
  long long v26 = 0u;
  long long v27 = 0u;
  uint64_t v28 = 0;
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::__value_func[abi:ne180100]((uint64_t)&v26, (uint64_t)v29);
  uint64_t v28 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v21, Has_Property, (AMCP *)&v26);
  if (v28) {
    v28(0, (uint64_t)&v26, 0, 0);
  }
  std::__function::__value_func<BOOL ()(AMCP::Core::Has_Property_Function)>::~__value_func[abi:ne180100](v29);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a7, (unsigned int *)(v21 + 40), &v25);
  if (*((void *)&v25 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
  }
}

void sub_1BADE98E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Core::Operation_Utilities::make_typed_property<BOOL,AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>(uint64_t *a1, int a2, int *a3, double a4)
{
  v14[4] = *MEMORY[0x1E4F143B8];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, a2, a4);
  uint64_t v6 = *a1;
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  int v8 = *a3;
  long long v11 = *(_OWORD *)(a3 + 2);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  LODWORD(a3) = a3[6];
  long long v9 = operator new(0x28uLL);
  *(void *)long long v9 = &unk_1F1473970;
  v9[2] = v8;
  *((_OWORD *)v9 + 1) = v11;
  v9[8] = a3;
  v14[3] = v9;
  memset(v12, 0, sizeof(v12));
  long long v13 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v14);
  long long v13 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v12);
  if (v13) {
    v13(0, (uint64_t)v12, 0, 0);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v14);
  return AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v6);
}

void sub_1BADE9A4C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1667523955EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1667523955EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1475AC0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1475AC0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1475AC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1475AC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1667523955EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1667523955EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1)
{
  unint64_t IsPropertySettable = AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
  char is_settable = AMCP::ASP::property_always_is_settable((AMCP::ASP *)*(unsigned int *)(a1 + 28), v3);
  if (IsPropertySettable) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = HIDWORD(IsPropertySettable) == 0;
  }
  unsigned int v6 = !v5;
  if (is_settable) {
    return 1;
  }
  else {
    return v6;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1475A40;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1475A40;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1475A40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1475A40;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF13DictionaryRefEE_NS_9allocatorISO_EEFvSN_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1667523955EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKN10applesauce2CF13DictionaryRefEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF13DictionaryRefEE_NS_9allocatorISO_EEFvSN_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1667523955EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKN10applesauce2CF13DictionaryRefEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF13DictionaryRefEE_NS_9allocatorISO_EEFvSN_EEclESN_(uint64_t a1, void *a2)
{
  char v6 = 0;
  std::vector<std::byte>::vector(&__p, 8uLL, &v6);
  *(void *)__p = *a2;
  AMCP::ASP::PlugIn::ObjectSetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, (v5 - __p), __p);
  if (__p)
  {
    BOOL v5 = __p;
    operator delete(__p);
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF13DictionaryRefEE_NS_9allocatorISO_EEFvSN_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF13DictionaryRefEE_NS_9allocatorISO_EEFvSN_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF13DictionaryRefEE_NS_9allocatorISO_EEFvSN_EE7__cloneEPNS0_6__baseISR_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14759C0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF13DictionaryRefEE_NS_9allocatorISO_EEFvSN_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14759C0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF13DictionaryRefEE_NS_9allocatorISO_EEFvSN_EED0Ev(void *a1)
{
  *a1 = &unk_1F14759C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKN10applesauce2CF13DictionaryRefEE_NS_9allocatorISO_EEFvSN_EED1Ev(void *a1)
{
  *a1 = &unk_1F14759C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1667523955EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1667523955EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::DictionaryRef *a2@<X8>)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    goto LABEL_2;
  }
  uint64_t v5 = HIDWORD(PropertyDataSize);
  char v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      int v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(void *)a2 = 0;
    return;
  }
  char v6 = __p;
  if ((unint64_t)(v8 - (unsigned char *)__p) < 8)
  {
    *(void *)a2 = 0;
    if (!v6) {
      return;
    }
LABEL_11:
    int v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::DictionaryRef::DictionaryRef(a2, *(CFTypeRef *)__p);
  char v6 = __p;
  if (__p) {
    goto LABEL_11;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1475940;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1475940;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEED0Ev(void *a1)
{
  *a1 = &unk_1F1475940;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1667523955EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEED1Ev(void *a1)
{
  *a1 = &unk_1F1475940;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1684301171EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1684301171EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14758C0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14758C0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F14758C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F14758C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1684301171EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1684301171EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::DictionaryRef *a2@<X8>)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    goto LABEL_2;
  }
  uint64_t v5 = HIDWORD(PropertyDataSize);
  char v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      int v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(void *)a2 = 0;
    return;
  }
  uint64_t v6 = __p;
  if ((unint64_t)(v8 - (unsigned char *)__p) < 8)
  {
    *(void *)a2 = 0;
    if (!v6) {
      return;
    }
LABEL_11:
    int v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::DictionaryRef::DictionaryRef(a2, *(CFTypeRef *)__p);
  uint64_t v6 = __p;
  if (__p) {
    goto LABEL_11;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEE7destroyEv(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1475840;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1475840;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEED0Ev(void *a1)
{
  *a1 = &unk_1F1475840;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1684301171EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF13DictionaryRefEvEED1Ev(void *a1)
{
  *a1 = &unk_1F1475840;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP35make_default_system_device_propertyENSt3__110shared_ptrINS0_6PlugInEEEjRNS_4Core13Operation_SetEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::operator()(uint64_t a1)
{
  v1 = (AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  uint64_t result = AMCP::ASP::get_number_of_non_reference_streams_for_scope(0x6F757470u, (AMCP::ASP::PlugIn **)(a1 + 8), v2);
  if (result)
  {
    *(void *)&v6.mSelector = 0x676C6F6273666C74;
    v6.mElement = 0;
    if (AMCP::ASP::PlugIn::ObjectHasProperty(*v1, v2, 0, &v6))
    {
      uint64_t v4 = *v1;
      int v7 = 0;
      int PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(v4, v2, 0, &v6, 0, 0, 4, &v7);
      return (PropertyData | v7) != 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t AMCP::ASP::get_number_of_non_reference_streams_for_scope(AudioObjectPropertyScope a1, AMCP::ASP::PlugIn **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  v13.mSelector = 1937009955;
  v13.mScope = a1;
  v13.mElement = 0;
  AMCP::ASP::PlugIn::object_get_property_data<unsigned int [],unsigned int>((uint64_t)&v14, v4, a3, &v13);
  uint64_t v5 = 0;
  AudioObjectPropertyAddress v6 = __p;
  if (!v14)
  {
    int v7 = v16;
    if (__p == v16)
    {
      uint64_t v5 = 0;
      if (!__p) {
        return v5;
      }
      goto LABEL_12;
    }
    LODWORD(v5) = 0;
    int v8 = (unsigned int *)__p;
    do
    {
      char v9 = *a2;
      unsigned int v10 = *v8++;
      *(void *)&v13.mSelector = 0x676C6F6274617073;
      v13.mElement = 0;
      int v17 = 0;
      if (AMCP::ASP::PlugIn::ObjectGetPropertyData(v9, v10, 0, &v13, 0, 0, 4, &v17)) {
        BOOL v11 = 1;
      }
      else {
        BOOL v11 = v17 == 0;
      }
      if (v11) {
        uint64_t v5 = (v5 + 1);
      }
      else {
        uint64_t v5 = v5;
      }
    }
    while (v8 != v7);
  }
  if (v6) {
LABEL_12:
  }
    operator delete(v6);
  return v5;
}

void std::__function::__func<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::destroy(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = &unk_1F14739F0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

void *std::__function::__func<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F14739F0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

void std::__function::__func<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14739F0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_system_device_property(std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14739F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP28make_default_device_propertyEjNSt3__110shared_ptrINS0_6PlugInEEEjRNS_4Core13Operation_SetEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::operator()(uint64_t a1)
{
  AudioObjectPropertyScope v1 = *(_DWORD *)(a1 + 8);
  uint64_t v2 = (AMCP::ASP::PlugIn **)(a1 + 16);
  uint64_t v3 = *(unsigned int *)(a1 + 32);
  uint64_t result = AMCP::ASP::get_number_of_non_reference_streams_for_scope(v1, (AMCP::ASP::PlugIn **)(a1 + 16), v3);
  if (result)
  {
    v7.mSelector = 1684434036;
    v7.mScope = v1;
    v7.mElement = 0;
    if (AMCP::ASP::PlugIn::ObjectHasProperty(*v2, v3, 0, &v7))
    {
      uint64_t v5 = *v2;
      int v8 = 0;
      int PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(v5, v3, 0, &v7, 0, 0, 4, &v8);
      return (PropertyData | v8) != 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void std::__function::__func<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::destroy(uint64_t a1)
{
  AudioObjectPropertyScope v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F1473970;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 16) = *(void *)(result + 16);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 32);
  return result;
}

_DWORD *std::__function::__func<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x28uLL);
  *(void *)uint64_t result = &unk_1F1473970;
  result[2] = *(_DWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 2) = *(void *)(a1 + 16);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  result[8] = *(_DWORD *)(a1 + 32);
  return result;
}

void std::__function::__func<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1473970;
  AudioObjectPropertyScope v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_default_device_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,BOOL ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1473970;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1}>,BOOL ()(AMCP::Core::Has_Property_Function)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1}>,BOOL ()(AMCP::Core::Has_Property_Function)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP28make_channel_layout_propertyEjNSt3__110shared_ptrINS0_6PlugInEEEjjNS2_INS_4Core11System_CoreEEERNS5_13Operation_SetEEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1}>,BOOL ()(AMCP::Core::Has_Property_Function)>::operator()(uint64_t a1)
{
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v5, *(std::__shared_mutex_base **)(*(void *)(a1 + 16) + 16), *(_DWORD *)(a1 + 12));
  if (v5)
  {
    AMCP::ASP::make_stream_info_list((uint64_t)v4, *(std::__shared_mutex_base **)(*(void *)(a1 + 16) + 16), &v5, *(_DWORD *)(a1 + 8));
    BOOL v2 = v4[0] != v4[1];
    if (v4[0]) {
      operator delete(v4[0]);
    }
  }
  else
  {
    BOOL v2 = 0;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v2;
}

void sub_1BADEB0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1}>,BOOL ()(AMCP::Core::Has_Property_Function)>::destroy_deallocate(void *__p)
{
  BOOL v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1}>,BOOL ()(AMCP::Core::Has_Property_Function)>::destroy(uint64_t a1)
{
  AudioObjectPropertyScope v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void *std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1}>,BOOL ()(AMCP::Core::Has_Property_Function)>::__clone(void *result, void *a2)
{
  *a2 = &unk_1F14738F0;
  a2[1] = result[1];
  uint64_t v2 = result[3];
  a2[2] = result[2];
  a2[3] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1}>,BOOL ()(AMCP::Core::Has_Property_Function)>::__clone(void *a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  *uint64_t result = &unk_1F14738F0;
  result[1] = v3;
  uint64_t v5 = a1[3];
  result[2] = v4;
  result[3] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1}>,BOOL ()(AMCP::Core::Has_Property_Function)>::~__func(void *a1)
{
  *a1 = &unk_1F14738F0;
  AudioObjectPropertyScope v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(AMCP::Core::Has_Property_Function)#1}>,BOOL ()(AMCP::Core::Has_Property_Function)>::~__func(void *a1)
{
  *a1 = &unk_1F14738F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP28make_channel_layout_propertyEjNSt3__110shared_ptrINS0_6PlugInEEEjjNS2_INS_4Core11System_CoreEEERNS5_13Operation_SetEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::operator()(uint64_t a1@<X0>, std::vector<char> *a2@<X8>)
{
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v13, *(std::__shared_mutex_base **)(*(void *)(a1 + 40) + 16), *(_DWORD *)(a1 + 36));
  if (!v13)
  {
    unsigned int v4 = 0;
    goto LABEL_10;
  }
  AMCP::ASP::make_stream_info_list((uint64_t)__x, *(std::__shared_mutex_base **)(*(void *)(a1 + 40) + 16), &v13, *(_DWORD *)(a1 + 8));
  if (*(_DWORD **)__x == v12)
  {
    unsigned int v4 = 0;
    if (!*(void *)__x) {
      goto LABEL_10;
    }
  }
  else
  {
    unsigned int v4 = 0;
    uint64_t v5 = *(_DWORD **)__x;
    do
    {
      v4 += v5[11];
      v5 += 14;
    }
    while (v5 != v12);
    if (!*(void *)__x) {
      goto LABEL_10;
    }
  }
  operator delete(*(void **)__x);
LABEL_10:
  if (v4 <= 1) {
    unsigned int v6 = 1;
  }
  else {
    unsigned int v6 = v4;
  }
  __x[0] = 0;
  std::vector<char>::vector(a2, 20 * v6 + 12, __x);
  std::vector<char>::pointer begin = a2->__begin_;
  *(void *)std::vector<char>::pointer begin = 0;
  *((_DWORD *)begin + 2) = v4;
  std::vector<char>::pointer end = a2->__end_;
  if (end - begin != 12)
  {
    std::vector<char>::pointer v9 = begin + 12;
    do
    {
      *(void *)std::vector<char>::pointer v9 = 0xFFFFFFFFLL;
      *((void *)v9 + 1) = 0;
      *((_DWORD *)v9 + 4) = 0;
      v9 += 20;
    }
    while (v9 != end);
  }
  unsigned int v10 = v14;
  if (v14)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1BADEB404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1473870;
  return std::__compressed_pair_elem<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1} const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1} const&,0ul>(uint64_t result, uint64_t a2)
{
  *(_DWORD *)uint64_t result = *(_DWORD *)a2;
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(result + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 24) = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  void *v2 = &unk_1F1473870;
  std::__compressed_pair_elem<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1} const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1473870;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1},std::allocator<AMCP::ASP::make_channel_layout_property(unsigned int,std::shared_ptr<AMCP::ASP::PlugIn>,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::System_Core>,AMCP::Core::Operation_Set &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1473870;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935763060EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935763060EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14757C0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14757C0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F14757C0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F14757C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1935763060EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1935763060EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    return 0;
  }
  uint64_t v3 = HIDWORD(PropertyDataSize);
  char v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  uint64_t PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (unsigned char *)__p) < 4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    if (!__p) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v5 = *(unsigned int *)__p;
  }
  std::vector<char>::pointer v9 = __p;
  operator delete(__p);
  uint64_t v6 = v5;
LABEL_7:
  if (PropertyData) {
    return 0;
  }
  return v6;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1475740;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1475740;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED0Ev(void *a1)
{
  *a1 = &unk_1F1475740;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1935763060EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED1Ev(void *a1)
{
  *a1 = &unk_1F1475740;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650682915EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1650682915EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650682915EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1650682915EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650682915EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEEclEv(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v4 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v5 = *(unsigned int *)(a1 + 24);
  *(void *)&v21.mSelector = 0x676C6F6262636C23;
  v21.mElement = 0;
  AMCP::ASP::PlugIn::object_get_property_data<unsigned int [],unsigned int>((uint64_t)&v22, v4, v5, &v21);
  int v6 = v22;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  AudioObjectPropertyAddress v7 = (unsigned int *)__p;
  if (!v6)
  {
    int v8 = v24;
    if (__p != v24)
    {
      std::vector<char>::pointer v9 = 0;
      unint64_t v10 = 0;
      BOOL v11 = 0;
      do
      {
        int core_id_for_driver_id = AMCP::ASP::Driver::get_core_id_for_driver_id(*(AMCP::ASP::Driver **)(*(void *)(a1 + 8) + 8), *v7);
        if (core_id_for_driver_id)
        {
          int v13 = core_id_for_driver_id;
          if ((unint64_t)v11 >= v10)
          {
            uint64_t v15 = (v11 - v9) >> 2;
            unint64_t v16 = v15 + 1;
            if ((unint64_t)(v15 + 1) >> 62) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v10 - (void)v9) >> 1 > v16) {
              unint64_t v16 = (uint64_t)(v10 - (void)v9) >> 1;
            }
            if (v10 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v17 = v16;
            }
            if (v17) {
              unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v17);
            }
            else {
              uint64_t v18 = 0;
            }
            char v19 = (char *)(v17 + 4 * v15);
            *(_DWORD *)char v19 = v13;
            int v14 = v19 + 4;
            while (v11 != v9)
            {
              int v20 = *((_DWORD *)v11 - 1);
              v11 -= 4;
              *((_DWORD *)v19 - 1) = v20;
              v19 -= 4;
            }
            unint64_t v10 = v17 + 4 * v18;
            *a2 = v19;
            a2[1] = v14;
            a2[2] = (char *)v10;
            if (v9) {
              operator delete(v9);
            }
            std::vector<char>::pointer v9 = v19;
          }
          else
          {
            *(_DWORD *)BOOL v11 = core_id_for_driver_id;
            int v14 = v11 + 4;
          }
          a2[1] = v14;
          BOOL v11 = v14;
        }
        ++v7;
      }
      while (v7 != v8);
      AudioObjectPropertyAddress v7 = (unsigned int *)__p;
    }
  }
  if (v7)
  {
    long long v24 = v7;
    operator delete(v7);
  }
}

void sub_1BADEBD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  int v14 = *(void **)v12;
  if (*(void *)v12)
  {
    *(void *)(v12 + 8) = v14;
    operator delete(v14);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650682915EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650682915EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650682915EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = &unk_1F1474F70;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650682915EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F1474F70;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650682915EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEED0Ev(void *a1)
{
  *a1 = &unk_1F1474F70;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650682915EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEED1Ev(void *a1)
{
  *a1 = &unk_1F1474F70;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650751011EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1650751011EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650751011EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1650751011EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650751011EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEEclEv(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v4 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v5 = *(unsigned int *)(a1 + 24);
  *(void *)&v21.mSelector = 0x676C6F6262647623;
  v21.mElement = 0;
  AMCP::ASP::PlugIn::object_get_property_data<unsigned int [],unsigned int>((uint64_t)&v22, v4, v5, &v21);
  int v6 = v22;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  AudioObjectPropertyAddress v7 = (unsigned int *)__p;
  if (!v6)
  {
    int v8 = v24;
    if (__p != v24)
    {
      std::vector<char>::pointer v9 = 0;
      unint64_t v10 = 0;
      BOOL v11 = 0;
      do
      {
        int core_id_for_driver_id = AMCP::ASP::Driver::get_core_id_for_driver_id(*(AMCP::ASP::Driver **)(*(void *)(a1 + 8) + 8), *v7);
        if (core_id_for_driver_id)
        {
          int v13 = core_id_for_driver_id;
          if ((unint64_t)v11 >= v10)
          {
            uint64_t v15 = (v11 - v9) >> 2;
            unint64_t v16 = v15 + 1;
            if ((unint64_t)(v15 + 1) >> 62) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v10 - (void)v9) >> 1 > v16) {
              unint64_t v16 = (uint64_t)(v10 - (void)v9) >> 1;
            }
            if (v10 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v17 = v16;
            }
            if (v17) {
              unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v17);
            }
            else {
              uint64_t v18 = 0;
            }
            char v19 = (char *)(v17 + 4 * v15);
            *(_DWORD *)char v19 = v13;
            int v14 = v19 + 4;
            while (v11 != v9)
            {
              int v20 = *((_DWORD *)v11 - 1);
              v11 -= 4;
              *((_DWORD *)v19 - 1) = v20;
              v19 -= 4;
            }
            unint64_t v10 = v17 + 4 * v18;
            *a2 = v19;
            a2[1] = v14;
            a2[2] = (char *)v10;
            if (v9) {
              operator delete(v9);
            }
            std::vector<char>::pointer v9 = v19;
          }
          else
          {
            *(_DWORD *)BOOL v11 = core_id_for_driver_id;
            int v14 = v11 + 4;
          }
          a2[1] = v14;
          BOOL v11 = v14;
        }
        ++v7;
      }
      while (v7 != v8);
      AudioObjectPropertyAddress v7 = (unsigned int *)__p;
    }
  }
  if (v7)
  {
    long long v24 = v7;
    operator delete(v7);
  }
}

void sub_1BADEC0C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  int v14 = *(void **)v12;
  if (*(void *)v12)
  {
    *(void *)(v12 + 8) = v14;
    operator delete(v14);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650751011EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650751011EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650751011EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = &unk_1F1474EF0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650751011EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F1474EF0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650751011EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEED0Ev(void *a1)
{
  *a1 = &unk_1F1474EF0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1650751011EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFNS_6vectorIjNSK_IjEEEEvEED1Ev(void *a1)
{
  *a1 = &unk_1F1474EF0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1652060006EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1652060006EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1474E70;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1474E70;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1474E70;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1474E70;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1652060006EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1652060006EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    return 0;
  }
  uint64_t v3 = HIDWORD(PropertyDataSize);
  char v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  uint64_t PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (unsigned char *)__p) < 4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    if (!__p) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v5 = *(unsigned int *)__p;
  }
  std::vector<char>::pointer v9 = __p;
  operator delete(__p);
  uint64_t v6 = v5;
LABEL_7:
  if (PropertyData) {
    return 0;
  }
  return v6;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1474DF0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1474DF0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED0Ev(void *a1)
{
  *a1 = &unk_1F1474DF0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060006EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFjvEED1Ev(void *a1)
{
  *a1 = &unk_1F1474DF0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1652060014EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1652060014EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  uint64_t v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1474D70;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1474D70;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1474D70;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1474D70;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1652060014EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1652060014EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_29Is_Property_Settable_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1)
{
  unint64_t IsPropertySettable = AMCP::ASP::PlugIn::ObjectIsPropertySettable(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28));
  char is_settable = AMCP::ASP::property_always_is_settable((AMCP::ASP *)*(unsigned int *)(a1 + 28), v3);
  if (IsPropertySettable) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = HIDWORD(IsPropertySettable) == 0;
  }
  unsigned int v6 = !v5;
  if (is_settable) {
    return 1;
  }
  else {
    return v6;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1474CF0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1474CF0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1474CF0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_29Is_Property_Settable_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1474CF0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1652060014EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKbE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1652060014EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlRKbE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EEclESK_(uint64_t a1, unsigned __int8 *a2)
{
  char v7 = 0;
  std::vector<std::byte>::vector(&__p, 4uLL, &v7);
  uint64_t v4 = __p;
  *(_DWORD *)__p = *a2;
  AMCP::ASP::PlugIn::ObjectSetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, (v6 - v4), v4);
  if (__p)
  {
    unsigned int v6 = __p;
    operator delete(__p);
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1474C70;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1474C70;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EED0Ev(void *a1)
{
  *a1 = &unk_1F1474C70;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlRKbE_NS_9allocatorISL_EEFvSK_EED1Ev(void *a1)
{
  *a1 = &unk_1F1474C70;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1652060014EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1652060014EEENSt3__19enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    return 0;
  }
  uint64_t v3 = HIDWORD(PropertyDataSize);
  char v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  uint64_t PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (unsigned char *)__p) < 4)
  {
    BOOL v5 = 0;
    BOOL v6 = 0;
    if (!__p) {
      goto LABEL_7;
    }
  }
  else
  {
    BOOL v5 = *(_DWORD *)__p != 0;
  }
  std::vector<char>::pointer v9 = __p;
  operator delete(__p);
  BOOL v6 = v5;
LABEL_7:
  if (PropertyData) {
    return 0;
  }
  return v6;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1474BF0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1474BF0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEED0Ev(void *a1)
{
  *a1 = &unk_1F1474BF0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1652060014EEENS_9enable_ifIXsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEED1Ev(void *a1)
{
  *a1 = &unk_1F1474BF0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1651536495EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1651536495EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  BOOL v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1474B70;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1474B70;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1474B70;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1474B70;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1651536495EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1651536495EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    return 0;
  }
  uint64_t v3 = HIDWORD(PropertyDataSize);
  char v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  uint64_t PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (unsigned char *)__p) < 4)
  {
    BOOL v5 = 0;
    BOOL v6 = 0;
    if (!__p) {
      goto LABEL_7;
    }
  }
  else
  {
    BOOL v5 = *(_DWORD *)__p != 0;
  }
  std::vector<char>::pointer v9 = __p;
  operator delete(__p);
  BOOL v6 = v5;
LABEL_7:
  if (PropertyData) {
    return 0;
  }
  return v6;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1474AF0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1474AF0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEED0Ev(void *a1)
{
  *a1 = &unk_1F1474AF0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651536495EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEED1Ev(void *a1)
{
  *a1 = &unk_1F1474AF0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1651010921EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1651010921EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  BOOL v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1474A70;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1474A70;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1474A70;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1474A70;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1651010921EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1651010921EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    return 0;
  }
  uint64_t v3 = HIDWORD(PropertyDataSize);
  char v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  uint64_t PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (unsigned char *)__p) < 4)
  {
    BOOL v5 = 0;
    BOOL v6 = 0;
    if (!__p) {
      goto LABEL_7;
    }
  }
  else
  {
    BOOL v5 = *(_DWORD *)__p != 0;
  }
  std::vector<char>::pointer v9 = __p;
  operator delete(__p);
  BOOL v6 = v5;
LABEL_7:
  if (PropertyData) {
    return 0;
  }
  return v6;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14749F0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14749F0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEED0Ev(void *a1)
{
  *a1 = &unk_1F14749F0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651010921EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEED1Ev(void *a1)
{
  *a1 = &unk_1F14749F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1651013225EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1651013225EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  BOOL v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1474970;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1474970;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1474970;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1474970;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1651013225EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1651013225EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    return 0;
  }
  uint64_t v3 = HIDWORD(PropertyDataSize);
  char v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  uint64_t PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (unsigned char *)__p) < 4)
  {
    BOOL v5 = 0;
    BOOL v6 = 0;
    if (!__p) {
      goto LABEL_7;
    }
  }
  else
  {
    BOOL v5 = *(_DWORD *)__p != 0;
  }
  std::vector<char>::pointer v9 = __p;
  operator delete(__p);
  BOOL v6 = v5;
LABEL_7:
  if (PropertyData) {
    return 0;
  }
  return v6;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14748F0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14748F0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEED0Ev(void *a1)
{
  *a1 = &unk_1F14748F0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651013225EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEED1Ev(void *a1)
{
  *a1 = &unk_1F14748F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1651007861EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1651007861EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  BOOL v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1474870;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1474870;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1474870;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1474870;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1651007861EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1651007861EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEEclEv(uint64_t a1)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    return 0;
  }
  uint64_t v3 = HIDWORD(PropertyDataSize);
  char v10 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v10);
  uint64_t PropertyData = AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v3, __p);
  if (PropertyData || (unint64_t)(v9 - (unsigned char *)__p) < 4)
  {
    BOOL v5 = 0;
    BOOL v6 = 0;
    if (!__p) {
      goto LABEL_7;
    }
  }
  else
  {
    BOOL v5 = *(_DWORD *)__p != 0;
  }
  std::vector<char>::pointer v9 = __p;
  operator delete(__p);
  BOOL v6 = v5;
LABEL_7:
  if (PropertyData) {
    return 0;
  }
  return v6;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7__cloneEPNS0_6__baseISM_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14747F0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14747F0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEED0Ev(void *a1)
{
  *a1 = &unk_1F14747F0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651007861EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFbvEED1Ev(void *a1)
{
  *a1 = &unk_1F14747F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1651861860EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1651861860EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlNS5_21Has_Property_FunctionEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EEclEOSJ_(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v3 = (const AudioObjectPropertyAddress *)(a1 + 28);
  if (AMCP::ASP::property_always_exists((AMCP::ASP *)*(unsigned int *)(a1 + 28), a2)) {
    return 1;
  }
  BOOL v5 = *(AMCP::ASP::PlugIn **)(a1 + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 24);

  return AMCP::ASP::PlugIn::ObjectHasProperty(v5, v6, 0, v3);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEPNS0_6__baseISN_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F1474670;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F1474670;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED0Ev(void *a1)
{
  *a1 = &unk_1F1474670;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlNS7_21Has_Property_FunctionEE_NS_9allocatorISK_EEFbSJ_EED1Ev(void *a1)
{
  *a1 = &unk_1F1474670;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE11target_typeEv()
{
  return &_ZTIZN4AMCP3ASP13make_propertyILj1651861860EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP13make_propertyILj1651861860EEENSt3__19enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS2_10shared_ptrINS_4Core9OperationEEEE4typeERKNS_7AddressERKNS4_INS0_6PlugInEEEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEEclEv(uint64_t a1@<X0>, applesauce::CF::StringRef *a2@<X8>)
{
  unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0);
  if (PropertyDataSize) {
    goto LABEL_2;
  }
  uint64_t v5 = HIDWORD(PropertyDataSize);
  char v9 = 0;
  std::vector<std::byte>::vector(&__p, HIDWORD(PropertyDataSize), &v9);
  if (AMCP::ASP::PlugIn::ObjectGetPropertyData(*(AMCP::ASP::PlugIn **)(a1 + 8), *(unsigned int *)(a1 + 24), 0, (const AudioObjectPropertyAddress *)(a1 + 28), 0, 0, v5, __p))
  {
    if (__p)
    {
      int v8 = __p;
      operator delete(__p);
    }
LABEL_2:
    *(void *)a2 = 0;
    return;
  }
  uint64_t v6 = __p;
  if ((unint64_t)(v8 - (unsigned char *)__p) < 8)
  {
    *(void *)a2 = 0;
    if (!v6) {
      return;
    }
LABEL_11:
    int v8 = v6;
    operator delete(v6);
    return;
  }
  applesauce::CF::StringRef::StringRef(a2, *(CFTypeRef *)__p);
  uint64_t v6 = __p;
  if (__p) {
    goto LABEL_11;
  }
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEPNS0_6__baseISP_EE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F14745F0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F14745F0;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED0Ev(void *a1)
{
  *a1 = &unk_1F14745F0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZN4AMCP3ASP13make_propertyILj1651861860EEENS_9enable_ifIXntsr15Property_TraitsIXT_EEE17k_may_be_settableENS_10shared_ptrINS2_4Core9OperationEEEE4typeERKNS2_7AddressERKNS6_INS3_6PlugInEEEjEUlvE_NS_9allocatorISJ_EEFN10applesauce2CF9StringRefEvEED1Ev(void *a1)
{
  *a1 = &unk_1F14745F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t AMCP::ASP::get_max_number_channels_for_scope(int a1, AMCP::ASP::PlugIn **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  v20[0] = 1937009955;
  v20[1] = a1;
  LODWORD(v21) = 0;
  AMCP::ASP::PlugIn::object_get_property_data<unsigned int [],unsigned int>((uint64_t)&v16, v4, a3, (const AudioObjectPropertyAddress *)v20);
  uint64_t v5 = 0;
  uint64_t v6 = __p;
  if (!v16)
  {
    int v8 = v18;
    if (__p == v18)
    {
      uint64_t v5 = 0;
      goto LABEL_2;
    }
    LODWORD(v5) = 0;
    for (i = (unsigned int *)__p; i != v8; ++i)
    {
      uint64_t v10 = *i;
      BOOL v11 = *a2;
      *(void *)&v19.mSelector = 0x676C6F6270667461;
      v19.mElement = 0;
      unint64_t PropertyDataSize = AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(v11, v10, 0, &v19, 0, 0);
      if (PropertyDataSize || HIDWORD(PropertyDataSize) <= 0x37)
      {
        int v13 = 0;
        v20[0] = PropertyDataSize;
        int v22 = 0;
        uint64_t v23 = 0;
        AudioObjectPropertyAddress v21 = 0;
        if (PropertyDataSize) {
          goto LABEL_23;
        }
      }
      else
      {
        std::vector<AudioStreamRangedDescription>::vector(&v24, HIDWORD(PropertyDataSize) / 0x38uLL);
        v20[0] = AMCP::ASP::PlugIn::ObjectGetPropertyData(v11, v10, 0, &v19, 0, 0, (v25 - v24) & 0xFFFFFFF8, v24);
        int v22 = 0;
        uint64_t v23 = 0;
        AudioObjectPropertyAddress v21 = 0;
        std::vector<AudioStreamRangedDescription>::__init_with_size[abi:ne180100]<AudioStreamRangedDescription*,AudioStreamRangedDescription*>(&v21, v24, (uint64_t)v25, 0x6DB6DB6DB6DB6DB7 * ((v25 - (unsigned char *)v24) >> 3));
        if (v24)
        {
          long long v25 = v24;
          operator delete(v24);
        }
        int v13 = v21;
        if (v20[0])
        {
LABEL_23:
          unsigned int v14 = 0;
          if (!v13) {
            goto LABEL_21;
          }
          goto LABEL_20;
        }
      }
      if (v13 == v22) {
        goto LABEL_23;
      }
      unsigned int v14 = 0;
      uint64_t v15 = v13;
      do
      {
        if (v14 <= v15[7]) {
          unsigned int v14 = v15[7];
        }
        v15 += 14;
      }
      while (v15 != v22);
      if (!v13) {
        goto LABEL_21;
      }
LABEL_20:
      operator delete(v13);
LABEL_21:
      uint64_t v5 = v14 + v5;
    }
  }
LABEL_2:
  if (v6) {
    operator delete(v6);
  }
  return v5;
}

void AMCP::ASP::PlugIn_Object::update_core(AMCP::ASP::PlugIn_Object *this)
{
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v9, *(std::__shared_mutex_base **)(*((void *)this + 1) + 16), *((_DWORD *)this + 15));
  uint64_t v2 = v9;
  if (v9)
  {
    *(_OWORD *)__p = 0u;
    *(_OWORD *)char v7 = 0u;
    int v8 = 1065353216;
    unsigned int v3 = AMCP::ASP::calculate_max_element((AMCP::ASP::PlugIn **)this + 3, *((unsigned int *)this + 11), *((_DWORD *)this + 17));
    if ((AMCP::is_base_of((AMCP *)0x61706C67, *((_DWORD *)this + 17)) & 1) == 0
      && (AMCP::is_base_of((AMCP *)0x61626F78, *((_DWORD *)this + 17)) & 1) == 0
      && (AMCP::is_base_of((AMCP *)0x61646576, *((_DWORD *)this + 17)) & 1) == 0
      && (AMCP::is_base_of((AMCP *)0x61737472, *((_DWORD *)this + 17)) & 1) == 0
      && (AMCP::is_base_of((AMCP *)0x736C6472, *((_DWORD *)this + 17)) & 1) == 0
      && (AMCP::is_base_of((AMCP *)0x6C65766C, *((_DWORD *)this + 17)) & 1) == 0
      && (AMCP::is_base_of((AMCP *)0x746F676C, *((_DWORD *)this + 17)) & 1) == 0
      && (AMCP::is_base_of((AMCP *)0x736C6374, *((_DWORD *)this + 17)) & 1) == 0
      && (AMCP::is_base_of((AMCP *)0x7370616E, *((_DWORD *)this + 17)) & 1) == 0
      && (AMCP::is_base_of((AMCP *)0x6163746C, *((_DWORD *)this + 17)) & 1) == 0
      && (AMCP::is_base_of((AMCP *)0x61636C6B, *((_DWORD *)this + 17)) & 1) == 0
      && AMCP::is_base_of((AMCP *)0x616F626A, *((_DWORD *)this + 17)))
    {
      AMCP::ASP::PlugIn_Object::update_object_core((uint64_t)this, v3, (uint64_t)__p);
    }
    uint64_t v11 = (uint64_t)(v2 + 12);
    LOBYTE(v12) = 1;
    caulk::concurrent::shared_spin_lock::lock(v2 + 12);
    uint64_t v4 = v7[0];
    if (v7[0])
    {
      do
      {
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)(v2 + 2), (unsigned int *)(v4[4] + 40), v4 + 4);
        uint64_t v4 = (void *)*v4;
      }
      while (v4);
    }
    std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&v11);
    uint64_t v11 = 0x676C6F626F776E72;
    int v12 = 0;
    v2[1] = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>((AMCP::Core::Core *)v2, (const AMCP::Address *)&v11, &AMCP::k_object_id_unknown);
    std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((void *)v7[0]);
    uint64_t v5 = __p[0];
    __p[0] = 0;
    if (v5) {
      operator delete(v5);
    }
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1BADEEFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

void CADeprecated::CAPThread::Start(CADeprecated::CAPThread *this)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unint64_t *)((char *)this + 8);
  unint64_t v3 = atomic_load((unint64_t *)this + 1);
  if (v3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf.__sig) = 136315394;
    *(uint64_t *)((char *)&buf.__sig + 4) = (uint64_t)"CAPThread.cpp";
    *(_WORD *)&buf.__opaque[4] = 1024;
    *(_DWORD *)&buf.__opaque[6] = 248;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  CAPThread::Start: can't start because the thread is already running", (uint8_t *)&buf, 0x12u);
  }
  if (!atomic_load(v2))
  {
    int v5 = pthread_attr_init(&buf);
    if (v5)
    {
      int v8 = v5;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_20;
      }
      *(_DWORD *)unsigned int v14 = 136315394;
      uint64_t v15 = "CAPThread.cpp";
      __int16 v16 = 1024;
      int v17 = 255;
      char v9 = MEMORY[0x1E4F14500];
      uint64_t v10 = "%25s:%-5d  CAPThread::Start: Thread attributes could not be created.";
    }
    else
    {
      int v6 = pthread_attr_setdetachstate(&buf, 2);
      if (v6)
      {
        int v8 = v6;
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_20;
        }
        *(_DWORD *)unsigned int v14 = 136315394;
        uint64_t v15 = "CAPThread.cpp";
        __int16 v16 = 1024;
        int v17 = 258;
        char v9 = MEMORY[0x1E4F14500];
        uint64_t v10 = "%25s:%-5d  CAPThread::Start: A thread could not be created in the detached state.";
      }
      else
      {
        pthread_attr_getschedparam(&buf, &v13);
        v13.sched_priority = *((_DWORD *)this + 26);
        pthread_attr_setschedparam(&buf, &v13);
        if (*((unsigned char *)this + 122)) {
          pthread_attr_setschedpolicy(&buf, 4);
        }
        unint64_t v12 = 0;
        int v7 = pthread_create((pthread_t *)&v12, &buf, (void *(__cdecl *)(void *))CADeprecated::CAPThread::Entry, this);
        if (!v7 && v12)
        {
          atomic_store(v12, (unint64_t *)this + 1);
          pthread_attr_destroy(&buf);
          return;
        }
        int v8 = v7;
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
LABEL_20:
          exception = __cxa_allocate_exception(0x10uLL);
          *(void *)exception = off_1F148A5D8;
          exception[2] = v8;
        }
        *(_DWORD *)unsigned int v14 = 136315394;
        uint64_t v15 = "CAPThread.cpp";
        __int16 v16 = 1024;
        int v17 = 272;
        char v9 = MEMORY[0x1E4F14500];
        uint64_t v10 = "%25s:%-5d  CAPThread::Start: Could not create a thread.";
      }
    }
    _os_log_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, v10, v14, 0x12u);
    goto LABEL_20;
  }
}

uint64_t CADeprecated::CAPThread::Entry(CADeprecated::CAPThread *this, CADeprecated::CAPThread *a2)
{
  kern_return_t v7;
  kern_return_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  unsigned char v12[5];
  integer_t policy_info[2];
  int v14;
  int v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  kern_return_t v21;
  __int16 v22;
  unsigned char *v23;
  uint64_t v24;

  long long v24 = *MEMORY[0x1E4F143B8];
  atomic_store((unint64_t)pthread_self(), (unint64_t *)this + 1);
  if (*((unsigned char *)this + 40)) {
    pthread_setname_np((const char *)this + 40);
  }
  if (*((unsigned char *)this + 121))
  {
    *((unsigned char *)this + 121) = 1;
    if (atomic_load((unint64_t *)this + 1))
    {
      *(void *)policy_info = *(void *)((char *)this + 108);
      int v4 = *((unsigned __int8 *)this + 120);
      unsigned int v14 = *((_DWORD *)this + 29);
      uint64_t v15 = v4;
      int v5 = (_opaque_pthread_t *)atomic_load((unint64_t *)this + 1);
      thread_act_t v6 = pthread_mach_thread_np(v5);
      int v7 = thread_policy_set(v6, 2u, policy_info, 4u);
      int v8 = v7;
      if (v7)
      {
        v12[0] = HIBYTE(v7);
        v12[1] = BYTE2(v7);
        _OWORD v12[2] = BYTE1(v7);
        v12[3] = v7;
        v12[4] = 0;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)pthread_attr_t buf = 136315906;
          int v17 = "CAPThread.cpp";
          uint64_t v18 = 1024;
          uint64_t v19 = 219;
          int v20 = 1024;
          AudioObjectPropertyAddress v21 = v8;
          int v22 = 2080;
          uint64_t v23 = v12;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  CAPThread::SetTimeConstraints: thread_policy_set failed, Error: %d (%s)", buf, 0x22u);
        }
      }
    }
  }
  char v9 = (uint64_t (*)(void))*((void *)this + 3);
  if (v9) {
    uint64_t v10 = v9(*((void *)this + 4));
  }
  else {
    uint64_t v10 = 0;
  }
  atomic_store(0, (unint64_t *)this + 1);
  if (*((unsigned char *)this + 123)) {
    (*(void (**)(CADeprecated::CAPThread *))(*(void *)this + 8))(this);
  }
  return v10;
}

void CADeprecated::CAPThread::~CAPThread(CADeprecated::CAPThread *this)
{
}

void AMCP::IOAudio2::Stream::~Stream(AMCP::IOAudio2::Stream *this)
{
  AMCP::IOAudio2::Stream::~Stream(this);

  JUMPOUT(0x1C1859840);
}

{
  AMCP::Log::Scope_Registry *v2;
  int v3;
  NSObject *v4;
  _opaque_pthread_t *v5;
  mach_port_t v6;
  int v7;
  NSObject *v8;
  os_log_type_t v9;
  NSObject *v10;
  _opaque_pthread_t *v11;
  mach_port_t v12;
  int v13;
  NSObject *v14;
  _opaque_pthread_t *v15;
  mach_port_t v16;
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint8_t buf[8];
  unsigned char v21[10];
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  long long v26 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F14773F8;
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v18, "com.apple.coreaudio", "AMCP");
  unint64_t v3 = *(_DWORD *)(v18 + 16);
  switch(v3)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v10 = **(NSObject ***)buf;
      if (*(void *)v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v21);
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = pthread_self();
        unint64_t v12 = pthread_mach_thread_np(v11);
        sched_param v13 = *((_DWORD *)this + 8);
        *(_DWORD *)pthread_attr_t buf = 67109890;
        *(_DWORD *)&buf[4] = v12;
        *(_WORD *)AudioObjectPropertyAddress v21 = 2080;
        *(void *)&v21[2] = "IOAudio2_Stream.cpp";
        int v22 = 1024;
        uint64_t v23 = 120;
        long long v24 = 1024;
        long long v25 = v13;
        int v8 = v10;
        char v9 = OS_LOG_TYPE_INFO;
        goto LABEL_12;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unsigned int v14 = **(NSObject ***)buf;
      if (*(void *)v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v21);
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v15 = pthread_self();
        __int16 v16 = pthread_mach_thread_np(v15);
        int v17 = *((_DWORD *)this + 8);
        *(_DWORD *)pthread_attr_t buf = 67109890;
        *(_DWORD *)&buf[4] = v16;
        *(_WORD *)AudioObjectPropertyAddress v21 = 2080;
        *(void *)&v21[2] = "IOAudio2_Stream.cpp";
        int v22 = 1024;
        uint64_t v23 = 120;
        long long v24 = 1024;
        long long v25 = v17;
        _os_log_debug_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Tore down Stream with object id %u", buf, 0x1Eu);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v4 = **(NSObject ***)buf;
      if (*(void *)v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v21);
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = pthread_self();
        thread_act_t v6 = pthread_mach_thread_np(v5);
        int v7 = *((_DWORD *)this + 8);
        *(_DWORD *)pthread_attr_t buf = 67109890;
        *(_DWORD *)&buf[4] = v6;
        *(_WORD *)AudioObjectPropertyAddress v21 = 2080;
        *(void *)&v21[2] = "IOAudio2_Stream.cpp";
        int v22 = 1024;
        uint64_t v23 = 120;
        long long v24 = 1024;
        long long v25 = v7;
        int v8 = v4;
        char v9 = OS_LOG_TYPE_DEFAULT;
LABEL_12:
        _os_log_impl(&dword_1BAA78000, v8, v9, "%6u %32s:%-5d Tore down Stream with object id %u", buf, 0x1Eu);
      }
      break;
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  AMCP::IOAudio2::Device_Sub_Object::~Device_Sub_Object(this);
}

void sub_1BADEF770(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::IOAudio2::Device_Sub_Object::Device_Sub_Object(uint64_t a1, uint64_t a2, const void *a3, CFDictionaryRef *a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F1482788;
  *(void *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 32) = 0;
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  LODWORD(valuePtr) = 0;
  CFNumberRef v7 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v7)
  {
    unint64_t v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "Could not construct");
    __cxa_throw(v12, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*&>(&valuePtr, *a4, a3);
  if (v15)
  {
    CFNumberRef v8 = valuePtr;
    if (!valuePtr)
    {
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&valuePtr);
      sched_param v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v13, "Could not construct");
      __cxa_throw(v13, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFRetain(valuePtr);
    std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&valuePtr);
  }
  else
  {
    std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&valuePtr);
    CFNumberRef v8 = v7;
    CFNumberRef v7 = 0;
  }
  int v9 = applesauce::CF::convert_to<unsigned int,0>(v8);
  CFRelease(v8);
  if (v7) {
    CFRelease(v7);
  }
  *(_DWORD *)(a1 + 36) = v9;
  *(void *)(a1 + 40) = *a4;
  *a4 = 0;
  return a1;
}

void sub_1BADEF950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v11);
  applesauce::CF::NumberRef::~NumberRef(&a10);
  applesauce::CF::NumberRef::~NumberRef((const void **)&a9);
  sched_param v13 = *(std::__shared_weak_count **)(v10 + 16);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(a1);
}

unint64_t AMCP::IOAudio2::get_stream_starting_channel(CFDictionaryRef theDict, const applesauce::CF::DictionaryRef *a2)
{
  if (!theDict)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_9;
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v5, theDict, @"starting channel");
  if (!v6)
  {
    unint64_t v2 = 0;
    goto LABEL_6;
  }
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_9:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v2 = applesauce::CF::convert_to<unsigned int,0>(v5);
LABEL_6:
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v5);
  return v2;
}

void sub_1BADEFA78(void *a1)
{
  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*&>(unsigned char *a1, CFDictionaryRef theDict, const void *a3)
{
  int v4 = applesauce::CF::details::at_key<__CFString const*&>(theDict, a3);
  if (!v4) {
    goto LABEL_5;
  }
  CFNumberRef v5 = v4;
  CFRetain(v4);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFNumberGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    char v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(void *)a1 = v5;
  char v7 = 1;
LABEL_6:
  a1[8] = v7;
}

void AMCP::IOAudio2::Stream::create_from_dictionary_list(uint64_t *a1, uint64_t a2, int a3, CFArrayRef *a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  CFArrayRef v4 = *a4;
  if (*a4)
  {
    CFIndex Count = CFArrayGetCount(*a4);
    CFIndex v8 = Count;
    CFArrayRef v9 = *a4;
    if (*a4)
    {
      CFIndex v31 = CFArrayGetCount(*a4);
      if (!v8) {
        return;
      }
      goto LABEL_6;
    }
    CFIndex v31 = 0;
    if (Count)
    {
LABEL_6:
      unint64_t v10 = 0;
      while (1)
      {
        if (v4 == v9 && v31 == v10) {
          return;
        }
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&cf, v4, v10);
        uint64_t v11 = (char *)operator new(0x50uLL);
        *((void *)v11 + 1) = 0;
        *((void *)v11 + 2) = 0;
        *(void *)uint64_t v11 = &unk_1F1477760;
        CFTypeRef v12 = cf;
        if (cf)
        {
          CFRetain(cf);
          CFTypeRef v40 = v12;
          CFRetain(v12);
          CFDictionaryRef v13 = (const __CFDictionary *)v12;
        }
        else
        {
          CFDictionaryRef v13 = 0;
          CFTypeRef v40 = 0;
        }
        unsigned int v14 = v11 + 24;
        CFTypeRef v37 = v12;
        AMCP::IOAudio2::Device_Sub_Object::Device_Sub_Object((uint64_t)(v11 + 24), a2, @"stream ID", (CFDictionaryRef *)&v37);
        if (v37) {
          CFRelease(v37);
        }
        *((void *)v11 + 3) = &unk_1F14773F8;
        *((_DWORD *)v11 + 18) = a3;
        *((_DWORD *)v11 + 19) = AMCP::IOAudio2::get_stream_starting_channel(v13, v15);
        if (v12) {
          CFRelease(v12);
        }
        __int16 v16 = (std::__shared_weak_count *)*((void *)v11 + 5);
        if (!v16) {
          break;
        }
        if (v16->__shared_owners_ == -1)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 1, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 2, 1uLL, memory_order_relaxed);
          *((void *)v11 + 4) = v14;
          *((void *)v11 + 5) = v11;
          std::__shared_weak_count::__release_weak(v16);
LABEL_20:
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v11);
        }
        *(void *)&long long v17 = v11 + 24;
        *((void *)&v17 + 1) = v11;
        uint64_t v18 = (_OWORD *)a1[1];
        unint64_t v19 = a1[2];
        if ((unint64_t)v18 >= v19)
        {
          long long v32 = v17;
          uint64_t v21 = ((uint64_t)v18 - *a1) >> 4;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 60) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v23 = v19 - *a1;
          if (v23 >> 3 > v22) {
            unint64_t v22 = v23 >> 3;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          int v39 = a1 + 2;
          long long v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v24);
          long long v26 = &v25[16 * v21];
          CFTypeRef v37 = v25;
          *(void *)v38 = v26;
          *(void *)&v38[16] = &v25[16 * v27];
          *(_OWORD *)long long v26 = v32;
          *(void *)&v38[8] = v26 + 16;
          uint64_t v28 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<AMCP::IOAudio2::Stream>>,std::reverse_iterator<std::shared_ptr<AMCP::IOAudio2::Stream>*>,std::reverse_iterator<std::shared_ptr<AMCP::IOAudio2::Stream>*>,std::reverse_iterator<std::shared_ptr<AMCP::IOAudio2::Stream>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, *(uint64_t *)v38, *(uint64_t *)v38);
          long long v29 = *(_OWORD *)a1;
          *a1 = v28;
          uint64_t v30 = a1[2];
          long long v33 = *(_OWORD *)&v38[8];
          *(_OWORD *)v38 = v29;
          *(_OWORD *)(a1 + 1) = v33;
          *(void *)&v38[16] = v30;
          CFTypeRef v37 = (CFTypeRef)v29;
          std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v37);
          int v20 = (_OWORD *)v33;
        }
        else
        {
          *uint64_t v18 = v17;
          int v20 = v18 + 1;
        }
        a1[1] = (uint64_t)v20;
        if (cf) {
          CFRelease(cf);
        }
        if (v8 == ++v10) {
          return;
        }
      }
      atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 1, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 2, 1uLL, memory_order_relaxed);
      *((void *)v11 + 4) = v14;
      *((void *)v11 + 5) = v11;
      goto LABEL_20;
    }
  }
}

void sub_1BADEFDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  CFArrayRef v9 = va_arg(va1, const void *);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<AMCP::IOAudio2::Stream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::IOAudio2::Stream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1477760;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::IOAudio2::Stream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1477760;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AMCP::IOAudio2::Stream::find_stream_dictionary_by_driver_id(AMCP::IOAudio2::Stream *this, CFArrayRef *a2, int a3)
{
  CFArrayRef v4 = *a2;
  if (!*a2) {
    goto LABEL_18;
  }
  CFIndex Count = CFArrayGetCount(*a2);
  CFIndex v8 = Count;
  CFArrayRef v9 = *a2;
  if (v9)
  {
    CFIndex v10 = CFArrayGetCount(v9);
    if (!v8) {
      goto LABEL_18;
    }
  }
  else
  {
    CFIndex v10 = 0;
    if (!Count) {
      goto LABEL_18;
    }
  }
  unint64_t v11 = 0;
  while (v4 != v9 || v10 != v11)
  {
    applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(this, v4, v11);
    if (!*(void *)this) {
      goto LABEL_21;
    }
    LODWORD(valuePtr) = 0;
    CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!cf)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *(const __CFDictionary **)this, @"stream ID", &cf);
    CFNumberRef v12 = valuePtr;
    if (!valuePtr)
    {
LABEL_21:
      uint64_t v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v15, "Could not construct");
      __cxa_throw(v15, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v13 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
    CFRelease(v12);
    if (cf) {
      CFRelease(cf);
    }
    if (v13 == a3) {
      return;
    }
    if (*(void *)this) {
      CFRelease(*(CFTypeRef *)this);
    }
    if (v8 == ++v11) {
      break;
    }
  }
LABEL_18:
  *(void *)this = 0;
}

void sub_1BADF00D0(void *a1)
{
  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

unint64_t AMCP::IOAudio2::Stream::get_mapping_options(AMCP::IOAudio2::Stream *this)
{
  if (!*((void *)this + 5))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_10;
  }
  LODWORD(valuePtr) = 1;
  CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    CFTypeID v6 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v6, "Could not construct");
    __cxa_throw(v6, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *((const __CFDictionary **)this + 5), @"buffer mapping options", &cf);
  CFNumberRef v2 = valuePtr;
  if (!valuePtr)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_10:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v3 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  CFRelease(v2);
  if (cf) {
    CFRelease(cf);
  }
  return v3;
}

void sub_1BADF0230(void *a1)
{
  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::IOAudio2::get_stream_format(AMCP::IOAudio2 *this, const applesauce::CF::DictionaryRef *a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*>(&v42, a2, @"current format");
  if (!v43)
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&valuePtr, "com.apple.coreaudio", "AMCP");
    __int16 v16 = *valuePtr;
    if (*(void *)v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v45);
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      long long v17 = pthread_self();
      mach_port_t v18 = pthread_mach_thread_np(v17);
      LODWORD(valuePtr) = 67109890;
      HIDWORD(valuePtr) = v18;
      *(_WORD *)v45 = 2080;
      *(void *)&v45[2] = "IOAudio2_Stream.cpp";
      __int16 v46 = 1024;
      int v47 = 107;
      __int16 v48 = 2080;
      *(void *)v49 = "!raw_current_format_opt";
      _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to find the current format for a stream", (uint8_t *)&valuePtr, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v34, "failed to find the current format for a stream");
    std::runtime_error::runtime_error(&cf, &v34);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    int v40 = -1;
    cf.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    __int16 v36 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&valuePtr, (uint64_t)&cf);
    *(void *)&v49[6] = "CA::StreamDescription AMCP::IOAudio2::get_stream_format(const CF::Dictionary &)";
    v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IOAudio2/IOAudio2_Stream.cpp";
    int v51 = 107;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v29);
    CFIndex v31 = &unk_1F148AA90;
    long long v32 = v29;
    uint64_t v33 = v30;
    long long v29 = 0uLL;
    uint64_t v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (!v42)
  {
    int v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v20, "Could not construct");
    goto LABEL_75;
  }
  LODWORD(valuePtr) = 0;
  cf.__vftable = (std::runtime_error_vtbl *)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf.__vftable)
  {
    uint64_t v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v21, "Could not construct");
    __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, v42, @"sample rate", &cf);
  CFNumberRef v4 = (const __CFNumber *)valuePtr;
  if (!valuePtr) {
    goto LABEL_74;
  }
  unint64_t v5 = applesauce::CF::convert_to<unsigned long long,0>((const __CFNumber *)valuePtr);
  CFRelease(v4);
  if (cf.__vftable) {
    CFRelease(cf.__vftable);
  }
  *(double *)this = (double)v5 * 2.32830644e-10 + (double)HIDWORD(v5);
  if (!v42) {
    goto LABEL_74;
  }
  LODWORD(valuePtr) = 0;
  cf.__vftable = (std::runtime_error_vtbl *)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf.__vftable)
  {
    unint64_t v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "Could not construct");
    __cxa_throw(v22, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, v42, @"format ID", &cf);
  CFNumberRef v6 = (const __CFNumber *)valuePtr;
  if (!valuePtr) {
    goto LABEL_74;
  }
  int v7 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
  *((_DWORD *)this + 2) = v7;
  CFRelease(v6);
  if (cf.__vftable) {
    CFRelease(cf.__vftable);
  }
  if (!v42) {
    goto LABEL_74;
  }
  LODWORD(valuePtr) = 0;
  cf.__vftable = (std::runtime_error_vtbl *)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf.__vftable)
  {
    uint64_t v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Could not construct");
    __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, v42, @"format flags", &cf);
  CFNumberRef v8 = (const __CFNumber *)valuePtr;
  if (!valuePtr) {
    goto LABEL_74;
  }
  int v9 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
  *((_DWORD *)this + 3) = v9;
  CFRelease(v8);
  if (cf.__vftable) {
    CFRelease(cf.__vftable);
  }
  if (!v42) {
    goto LABEL_74;
  }
  LODWORD(valuePtr) = 0;
  cf.__vftable = (std::runtime_error_vtbl *)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf.__vftable)
  {
    unint64_t v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v24, "Could not construct");
    __cxa_throw(v24, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, v42, @"bytes per packet", &cf);
  CFNumberRef v10 = (const __CFNumber *)valuePtr;
  if (!valuePtr) {
    goto LABEL_74;
  }
  *((_DWORD *)this + 4) = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
  CFRelease(v10);
  if (cf.__vftable) {
    CFRelease(cf.__vftable);
  }
  if (!v42) {
    goto LABEL_74;
  }
  LODWORD(valuePtr) = 0;
  cf.__vftable = (std::runtime_error_vtbl *)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf.__vftable)
  {
    long long v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "Could not construct");
    __cxa_throw(v25, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, v42, @"frames per packet", &cf);
  CFNumberRef v11 = (const __CFNumber *)valuePtr;
  if (!valuePtr) {
    goto LABEL_74;
  }
  *((_DWORD *)this + 5) = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
  CFRelease(v11);
  if (cf.__vftable) {
    CFRelease(cf.__vftable);
  }
  if (!v42) {
    goto LABEL_74;
  }
  LODWORD(valuePtr) = 0;
  cf.__vftable = (std::runtime_error_vtbl *)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf.__vftable)
  {
    long long v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v26, "Could not construct");
    __cxa_throw(v26, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, v42, @"bytes per frame", &cf);
  CFNumberRef v12 = (const __CFNumber *)valuePtr;
  if (!valuePtr) {
    goto LABEL_74;
  }
  *((_DWORD *)this + 6) = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
  CFRelease(v12);
  if (cf.__vftable) {
    CFRelease(cf.__vftable);
  }
  if (!v42) {
    goto LABEL_74;
  }
  LODWORD(valuePtr) = 0;
  cf.__vftable = (std::runtime_error_vtbl *)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf.__vftable)
  {
    uint64_t v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v27, "Could not construct");
    __cxa_throw(v27, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, v42, @"channels per frame", &cf);
  CFNumberRef v13 = (const __CFNumber *)valuePtr;
  if (!valuePtr) {
    goto LABEL_74;
  }
  *((_DWORD *)this + 7) = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
  CFRelease(v13);
  if (cf.__vftable) {
    CFRelease(cf.__vftable);
  }
  if (!v42) {
    goto LABEL_74;
  }
  LODWORD(valuePtr) = 0;
  cf.__vftable = (std::runtime_error_vtbl *)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf.__vftable)
  {
    uint64_t v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v28, "Could not construct");
    __cxa_throw(v28, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, v42, @"bits per channel", &cf);
  CFNumberRef v14 = (const __CFNumber *)valuePtr;
  if (!valuePtr)
  {
LABEL_74:
    int v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v20, "Could not construct");
LABEL_75:
    __cxa_throw(v20, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *((_DWORD *)this + 8) = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
  CFRelease(v14);
  if (cf.__vftable) {
    CFRelease(cf.__vftable);
  }
  if (v7 == 1819304813) {
    *((_DWORD *)this + 3) = v9 & 0xFFFFFFBF;
  }
  return std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v42);
}

void sub_1BADF0C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
}

void AMCP::IOAudio2::Stream::build_core(AMCP::IOAudio2::Stream *this)
{
  int v2 = AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(*(void *)(**((void **)this + 3) + 32) + 16));
  *((_DWORD *)this + 8) = v2;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)CFNumberRef v13 = 0u;
  int v14 = 1065353216;
  LODWORD(v9) = v2;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v15, 0, (int *)&v9, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v15 + 40), &v15);
  if (*((void *)&v15 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
  }
  LODWORD(v9) = 1634956402;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v15, 0, (int *)&v9, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v15 + 40), &v15);
  if (*((void *)&v15 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
  }
  LODWORD(v9) = 1634956402;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v15, 0, (int *)&v9, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v15 + 40), &v15);
  if (*((void *)&v15 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
  }
  LODWORD(v9) = *(_DWORD *)(*((void *)this + 3) + 16);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v15, 0, (int *)&v9, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v15 + 40), &v15);
  if (*((void *)&v15 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
  }
  CFStringRef v3 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.iokit.IOAudio2", 24, 0x8000100u, 0);
  CFStringRef v11 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v9 = 0x676C6F626F706C67;
  LODWORD(v10) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)&v15, (uint64_t)&v9, v3);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v15 + 40), &v15);
  if (*((void *)&v15 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
  }
  CFRelease(v3);
  int v4 = *((_DWORD *)this + 8);
  *(void *)&long long v15 = *(void *)(*(void *)(**((void **)this + 3) + 32) + 16);
  DWORD2(v15) = v4;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>(&v9, 0, &v15, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v9 + 40), &v9);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  LODWORD(v9) = *((_DWORD *)this + 12);
  AMCP::Core::Operation_Utilities::make_typed_property<AMCP::Direction,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1}>((uint64_t *)&v15, 0, (int *)&v9, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v15 + 40), &v15);
  if (*((void *)&v15 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
  }
  LODWORD(v9) = 0;
  AMCP::Core::Operation_Utilities::make_typed_property<int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1}>((uint64_t *)&v15, 0, (int *)&v9, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v15 + 40), &v15);
  if (*((void *)&v15 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
  }
  AMCP::IOAudio2::Device::get_device_connection((AMCP::IOAudio2::Device *)&v15, **(_DWORD **)(*((void *)this + 3) + 360));
  AMCP::IOAudio2::update_stream_core((uint64_t)__p, (const applesauce::CF::DictionaryRef *)&v15, (CFDictionaryRef *)this + 5, *((_DWORD *)this + 9));
  IOConnectRelease(v15);
  AMCP::Core::Broker::make_core(&v7, *(std::__shared_mutex_base **)(*(void *)(**((void **)this + 3) + 32) + 16), (uint64_t)__p, *((_DWORD *)this + 8));
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((void *)v13[0]);
  unint64_t v5 = __p[0];
  __p[0] = 0;
  if (v5) {
    operator delete(v5);
  }
}

void sub_1BADF10E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void AMCP::IOAudio2::update_stream_core(uint64_t a1, const applesauce::CF::DictionaryRef *a2, CFDictionaryRef *a3, int a4)
{
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  LODWORD(cf[0]) = AMCP::IOAudio2::get_stream_starting_channel(*a3, a2);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)cf, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a1, (unsigned int *)(*(void *)buf + 40), buf);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  LODWORD(cf[0]) = 0;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)cf, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a1, (unsigned int *)(*(void *)buf + 40), buf);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (!*a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  LODWORD(valuePtr) = 0;
  cf[0] = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf[0])
  {
    v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v76, "Could not construct");
    __cxa_throw(v76, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(buf, *a3, @"terminal type", cf);
  CFNumberRef v8 = *(const void **)buf;
  if (!*(void *)buf)
  {
    v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v77, "Could not construct");
    __cxa_throw(v77, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v9 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf);
  CFRelease(v8);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  LODWORD(cf[0]) = v9;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)cf, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a1, (unsigned int *)(*(void *)buf + 40), buf);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  CFDictionaryRef v10 = *a3;
  if (!*a3)
  {
    v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v78);
    __cxa_throw(v78, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(void *)pthread_attr_t buf = 0;
  applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&theArray, v10, @"available formats", buf);
  CFStringRef v11 = *(AMCP::Log::Scope_Registry **)buf;
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }
  CFArrayRef v12 = theArray;
  if (!theArray)
  {
    AMCP::Log::Scope_Registry::get(v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v62 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      v63 = pthread_self();
      mach_port_t v64 = pthread_mach_thread_np(v63);
      *(_DWORD *)pthread_attr_t buf = 67109890;
      *(_DWORD *)&buf[4] = v64;
      *(_WORD *)&buf[8] = 2080;
      *(void *)&buf[10] = "IOAudio2_Stream.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 200;
      *(_WORD *)&buf[24] = 2080;
      *(void *)&buf[26] = "(raw_available_format_list.is_valid()) == false";
      _os_log_error_impl(&dword_1BAA78000, v62, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to find the current format for a stream", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&__p);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&connect, "failed to find the available format list for a stream");
    std::runtime_error::runtime_error((std::runtime_error *)cf, &connect);
    *((void *)&v104 + 1) = 0;
    uint64_t v105 = 0;
    uint64_t v106 = 0;
    int v107 = -1;
    cf[0] = &unk_1F148A9A8;
    *(void *)&long long v104 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)cf);
    *(void *)&buf[32] = "void AMCP::IOAudio2::update_stream_core(Core::Operation_Set &, const IOKit::Connection &, cons"
                          "t CF::Dictionary &, uint32_t)";
    v114 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IOAudio2/IOAudio2_Stream.cpp";
    int v115 = 200;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v109);
    long long v117 = *(_OWORD *)v109;
    CFDictionaryRef valuePtr = (const __CFDictionary *)&unk_1F148AA90;
    v118 = v110;
    memset(v109, 0, sizeof(v109));
    v110 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  v85 = a3;
  v86 = a2;
  int v87 = a4;
  uint64_t v88 = a1;
  __p = 0;
  v101 = 0;
  unint64_t v102 = 0;
  CFIndex Count = CFArrayGetCount(theArray);
  CFNumberRef v13 = 0;
  unint64_t v91 = 0;
  unint64_t v92 = 0;
  int v14 = 0;
  CFArrayRef v90 = v12;
  CFArrayRef v15 = v12;
LABEL_17:
  for (CFIndex i = CFArrayGetCount(v15); v92 != Count && (v90 != v15 || v92 != i); CFIndex i = 0)
  {
    applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&valuePtr, v90, v92);
    if (!valuePtr) {
      goto LABEL_137;
    }
    *(_DWORD *)pthread_attr_t buf = 0;
    cf[0] = CFNumberCreate(0, kCFNumberIntType, buf);
    if (!cf[0])
    {
      v101 = v13;
      unint64_t v102 = v91;
      v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v67, "Could not construct");
      __cxa_throw(v67, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(buf, valuePtr, @"min sample rate", cf);
    long long v17 = *(const void **)buf;
    if (!*(void *)buf) {
      goto LABEL_137;
    }
    unint64_t v18 = applesauce::CF::convert_to<unsigned long long,0>(*(const __CFNumber **)buf);
    CFRelease(v17);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (!valuePtr) {
      goto LABEL_137;
    }
    *(_DWORD *)pthread_attr_t buf = 0;
    cf[0] = CFNumberCreate(0, kCFNumberIntType, buf);
    if (!cf[0])
    {
      v101 = v13;
      unint64_t v102 = v91;
      v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v66, "Could not construct");
      __cxa_throw(v66, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(buf, valuePtr, @"max sample rate", cf);
    unint64_t v19 = *(const void **)buf;
    if (!*(void *)buf) {
      goto LABEL_137;
    }
    unint64_t v20 = applesauce::CF::convert_to<unsigned long long,0>(*(const __CFNumber **)buf);
    CFRelease(v19);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    double v21 = (double)v18 * 2.32830644e-10;
    double v22 = v21 + (double)HIDWORD(v18);
    double v23 = (double)v20 * 2.32830644e-10 + (double)HIDWORD(v20);
    double v24 = v22 == v23 ? v21 + (double)HIDWORD(v18) : 0.0;
    if (!valuePtr) {
      goto LABEL_137;
    }
    *(_DWORD *)pthread_attr_t buf = 0;
    cf[0] = CFNumberCreate(0, kCFNumberIntType, buf);
    if (!cf[0])
    {
      v101 = v13;
      unint64_t v102 = v91;
      v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v65, "Could not construct");
      __cxa_throw(v65, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(buf, valuePtr, @"format ID", cf);
    long long v25 = *(const void **)buf;
    if (!*(void *)buf) {
      goto LABEL_137;
    }
    int v26 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf);
    CFRelease(v25);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (!valuePtr) {
      goto LABEL_137;
    }
    *(_DWORD *)pthread_attr_t buf = 0;
    cf[0] = CFNumberCreate(0, kCFNumberIntType, buf);
    if (!cf[0])
    {
      v101 = v13;
      unint64_t v102 = v91;
      v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v71, "Could not construct");
      __cxa_throw(v71, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(buf, valuePtr, @"format flags", cf);
    uint64_t v27 = *(const void **)buf;
    if (!*(void *)buf) {
      goto LABEL_137;
    }
    int v28 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf);
    CFRelease(v27);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (!valuePtr) {
      goto LABEL_137;
    }
    *(_DWORD *)pthread_attr_t buf = 0;
    cf[0] = CFNumberCreate(0, kCFNumberIntType, buf);
    if (!cf[0])
    {
      v101 = v13;
      unint64_t v102 = v91;
      v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v69, "Could not construct");
      __cxa_throw(v69, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(buf, valuePtr, @"bytes per packet", cf);
    long long v29 = *(const void **)buf;
    if (!*(void *)buf) {
      goto LABEL_137;
    }
    int v30 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf);
    CFRelease(v29);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (!valuePtr) {
      goto LABEL_137;
    }
    *(_DWORD *)pthread_attr_t buf = 0;
    cf[0] = CFNumberCreate(0, kCFNumberIntType, buf);
    if (!cf[0])
    {
      v101 = v13;
      unint64_t v102 = v91;
      v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v72, "Could not construct");
      __cxa_throw(v72, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(buf, valuePtr, @"frames per packet", cf);
    CFIndex v31 = *(const void **)buf;
    if (!*(void *)buf) {
      goto LABEL_137;
    }
    int v32 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf);
    CFRelease(v31);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (!valuePtr) {
      goto LABEL_137;
    }
    *(_DWORD *)pthread_attr_t buf = 0;
    cf[0] = CFNumberCreate(0, kCFNumberIntType, buf);
    if (!cf[0])
    {
      v101 = v13;
      unint64_t v102 = v91;
      v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v70, "Could not construct");
      __cxa_throw(v70, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(buf, valuePtr, @"bytes per frame", cf);
    uint64_t v33 = *(const void **)buf;
    if (!*(void *)buf) {
      goto LABEL_137;
    }
    int v34 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf);
    CFRelease(v33);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (!valuePtr) {
      goto LABEL_137;
    }
    *(_DWORD *)pthread_attr_t buf = 0;
    cf[0] = CFNumberCreate(0, kCFNumberIntType, buf);
    if (!cf[0])
    {
      v101 = v13;
      unint64_t v102 = v91;
      v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v68, "Could not construct");
      __cxa_throw(v68, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(buf, valuePtr, @"channels per frame", cf);
    int v35 = *(const void **)buf;
    if (!*(void *)buf) {
      goto LABEL_137;
    }
    int v36 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf);
    CFRelease(v35);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (!valuePtr) {
      goto LABEL_137;
    }
    *(_DWORD *)pthread_attr_t buf = 0;
    cf[0] = CFNumberCreate(0, kCFNumberIntType, buf);
    if (!cf[0])
    {
      v101 = v13;
      unint64_t v102 = v91;
      v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v74, "Could not construct");
      __cxa_throw(v74, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(buf, valuePtr, @"bits per channel", cf);
    uint64_t v37 = *(const void **)buf;
    if (!*(void *)buf)
    {
LABEL_137:
      v101 = v13;
      unint64_t v102 = v91;
      v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v73, "Could not construct");
      __cxa_throw(v73, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v38 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)buf);
    CFRelease(v37);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (v26 == 1819304813) {
      v28 &= ~0x40u;
    }
    if ((unint64_t)v13 >= v91)
    {
      unint64_t v39 = 0x6DB6DB6DB6DB6DB7 * (v13 - v14) + 1;
      if (v39 > 0x492492492492492)
      {
        v101 = v13;
        unint64_t v102 = v91;
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v91 - (void)v14) >> 3) > v39) {
        unint64_t v39 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v91 - (void)v14) >> 3);
      }
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v91 - (void)v14) >> 3)) >= 0x249249249249249) {
        unint64_t v40 = 0x492492492492492;
      }
      else {
        unint64_t v40 = v39;
      }
      if (v40) {
        unint64_t v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v40);
      }
      else {
        uint64_t v41 = 0;
      }
      unint64_t v42 = v40 + 8 * (v13 - v14);
      *(double *)unint64_t v42 = v24;
      *(_DWORD *)(v42 + 8) = v26;
      *(_DWORD *)(v42 + 12) = v28;
      *(_DWORD *)(v42 + 16) = v30;
      *(_DWORD *)(v42 + 20) = v32;
      *(_DWORD *)(v42 + 24) = v34;
      *(_DWORD *)(v42 + 28) = v36;
      *(_DWORD *)(v42 + 32) = v38;
      *(_DWORD *)(v42 + 36) = 0;
      *(double *)(v42 + 40) = v22;
      *(double *)(v42 + 48) = v23;
      if (v13 == v14)
      {
        v44 = (void *)(v40 + 8 * (v13 - v14));
      }
      else
      {
        unint64_t v43 = v40 + 8 * (v13 - v14);
        do
        {
          v44 = (void *)(v43 - 56);
          long long v45 = *(_OWORD *)(v13 - 7);
          long long v46 = *(_OWORD *)(v13 - 5);
          long long v47 = *(_OWORD *)(v13 - 3);
          *(double *)(v43 - 8) = *(v13 - 1);
          *(_OWORD *)(v43 - 24) = v47;
          *(_OWORD *)(v43 - 40) = v46;
          *(_OWORD *)(v43 - 56) = v45;
          v13 -= 7;
          v43 -= 56;
        }
        while (v13 != v14);
      }
      unint64_t v91 = v40 + 56 * v41;
      CFNumberRef v13 = (double *)(v42 + 56);
      __p = v44;
      if (v14) {
        operator delete(v14);
      }
      int v14 = (double *)v44;
    }
    else
    {
      *CFNumberRef v13 = v24;
      *((_DWORD *)v13 + 2) = v26;
      *((_DWORD *)v13 + 3) = v28;
      *((_DWORD *)v13 + 4) = v30;
      *((_DWORD *)v13 + 5) = v32;
      *((_DWORD *)v13 + 6) = v34;
      *((_DWORD *)v13 + 7) = v36;
      *((_DWORD *)v13 + 8) = v38;
      *((_DWORD *)v13 + 9) = 0;
      v13[5] = v22;
      v13[6] = v23;
      v13 += 7;
    }
    if (valuePtr) {
      CFRelease(valuePtr);
    }
    ++v92;
    CFArrayRef v15 = theArray;
    if (theArray) {
      goto LABEL_17;
    }
  }
  v101 = v13;
  unint64_t v102 = v91;
  AMCP::make_available_format_list((uint64_t *)&__p, &v98);
  cf[0] = (CFTypeRef)0x676C6F62666D7423;
  LODWORD(cf[1]) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>((uint64_t *)buf, (uint64_t)cf, v98, v99);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v88, (unsigned int *)(*(void *)buf + 40), buf);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  AMCP::IOAudio2::get_stream_format((AMCP::IOAudio2 *)cf, *v85);
  LODWORD(connect.__vftable) = *(_DWORD *)v86;
  uint64_t v48 = IOConnectAddRef((io_connect_t)connect.__vftable);
  if (v48)
  {
    v79 = __cxa_allocate_exception(0x20uLL);
    v80 = std::system_category();
    MEMORY[0x1C1859250](v79, v48, v80, "Error on IOConnectAddRef");
    __cxa_throw(v79, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  HIDWORD(connect.__vftable) = v87;
  v94 = 0;
  uint64_t v95 = 0;
  connect.__imp_.__imp_ = 0;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>((uint64_t)&connect.__imp_, v98, v99, (v99 - v98) >> 6);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v96, 0, 1.58366008e190);
  uint64_t v49 = v96;
  unint64_t v50 = AMCP::Implementation::get_type_marker<std::function<CA::StreamDescription ()(void)>>();
  v118 = 0;
  int v51 = (char *)operator new(0x30uLL);
  *(void *)int v51 = &unk_1F1477540;
  long long v52 = v104;
  *(_OWORD *)(v51 + 8) = *(_OWORD *)cf;
  *(_OWORD *)(v51 + 24) = v52;
  *((void *)v51 + 5) = v105;
  v118 = v51;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<CA::StreamDescription ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&valuePtr);
  *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<CA::StreamDescription ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v49, v50, (AMCP *)buf);
  if (*(void *)&buf[32]) {
    (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
  }
  std::__function::__value_func<CA::StreamDescription ()(void)>::~__value_func[abi:ne180100](&valuePtr);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(v49);
  unint64_t v53 = AMCP::Implementation::get_type_marker<std::function<void ()(CA::StreamDescription const&)>>();
  io_connect_t v54 = (io_connect_t)connect.__vftable;
  v109[0] = (io_connect_t)connect.__vftable;
  uint64_t v55 = IOConnectAddRef((io_connect_t)connect.__vftable);
  if (v55)
  {
    v81 = __cxa_allocate_exception(0x20uLL);
    v82 = std::system_category();
    MEMORY[0x1C1859250](v81, v55, v82, "Error on IOConnectAddRef");
    __cxa_throw(v81, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  int v56 = HIDWORD(connect.__vftable);
  v109[1] = HIDWORD(connect.__vftable);
  imp = connect.__imp_.__imp_;
  v58 = v94;
  *(void *)&v109[2] = connect.__imp_.__imp_;
  v110 = v94;
  uint64_t v59 = v95;
  uint64_t v111 = v95;
  v94 = 0;
  uint64_t v95 = 0;
  connect.__imp_.__imp_ = 0;
  v118 = 0;
  v60 = operator new(0x28uLL);
  *(void *)v60 = &unk_1F1477650;
  v60[2] = v54;
  uint64_t v61 = IOConnectAddRef(v54);
  if (v61)
  {
    v83 = __cxa_allocate_exception(0x20uLL);
    v84 = std::system_category();
    MEMORY[0x1C1859250](v83, v61, v84, "Error on IOConnectAddRef");
    __cxa_throw(v83, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  v60[3] = v56;
  *((void *)v60 + 2) = imp;
  *((void *)v60 + 3) = v58;
  *((void *)v60 + 4) = v59;
  v110 = 0;
  uint64_t v111 = 0;
  *(void *)&v109[2] = 0;
  v118 = v60;
  memset(buf, 0, sizeof(buf));
  std::__function::__value_func<void ()(CA::StreamDescription const&)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&valuePtr);
  *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(CA::StreamDescription const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v49, v53, (AMCP *)buf);
  if (*(void *)&buf[32]) {
    (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
  }
  std::__function::__value_func<void ()(CA::StreamDescription const&)>::~__value_func[abi:ne180100](&valuePtr);
  v112 = &v109[2];
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
  IOConnectRelease(v109[0]);
  AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(v49);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v88, (unsigned int *)(v49 + 40), &v96);
  if (v97) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v97);
  }
  *(void *)pthread_attr_t buf = &connect.__imp_;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  IOConnectRelease((io_connect_t)connect.__vftable);
  *(void *)pthread_attr_t buf = &v98;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (__p)
  {
    v101 = __p;
    operator delete(__p);
  }
  if (v15) {
    CFRelease(v15);
  }
}

void sub_1BADF24D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, io_connect_t connect, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,const void *a36,void *a37,uint64_t a38)
{
}

uint64_t AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1::~$_1(uint64_t a1)
{
  CFStringRef v3 = (void **)(a1 + 8);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  IOConnectRelease(*(_DWORD *)a1);
  return a1;
}

void *std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1>,void ()(CA::StreamDescription const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1>,void ()(CA::StreamDescription const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio2L18update_stream_coreERNS_4Core13Operation_SetERKN10applesauce5iokit17io_connect_holderERKNS4_2CF13DictionaryRefEjE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1>,void ()(CA::StreamDescription const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  BOOL is_an_available_format = AMCP::Utility::Stream_Format::format_is_an_available_format(a2, *(void *)(a1 + 16), *(void *)(a1 + 24));
  if (!is_an_available_format)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_an_available_format);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&inputStruct, "com.apple.coreaudio", "AMCP");
    int v7 = *inputStruct;
    if ((void)v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v35);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      CFNumberRef v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      LODWORD(inputStruct) = 67109890;
      HIDWORD(inputStruct) = v9;
      LOWORD(v35) = 2080;
      *(void *)((char *)&v35 + 2) = "IOAudio2_Stream.cpp";
      WORD5(v35) = 1024;
      HIDWORD(v35) = 215;
      LOWORD(v36) = 2080;
      *(void *)((char *)&v36 + 2) = "(format_is_valid) == false";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set stream format", (uint8_t *)&inputStruct, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error((std::runtime_error *)&v28, "failed to set stream format");
    std::runtime_error::runtime_error(&v21, (const std::runtime_error *)&v28);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    double v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&inputStruct, (uint64_t)&v21);
    *((void *)&v36 + 1) = "auto AMCP::IOAudio2::update_stream_core(Core::Operation_Set &, const IOKit::Connection &, co"
                            "nst CF::Dictionary &, uint32_t)::(anonymous class)::operator()(const CA::StreamDescription &) const";
    uint64_t v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IOAudio2/IOAudio2_Stream.cpp";
    int v38 = 215;
    std::vector<void *>::vector(&v29);
    int v10 = backtrace((void **)v29, (*((void *)&v29 + 1) - (void)v29) >> 3);
    std::vector<void *>::resize((char **)&v29, v10);
    __p = &unk_1F148AA90;
    long long v19 = v29;
    std::string::size_type v20 = v30;
    long long v29 = 0uLL;
    std::string::size_type v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  inputStruct = (NSObject **)(vcvtd_n_s64_f64(*(double *)a2 - floor(*(double *)a2), 0x20uLL) | (vcvtmd_s64_f64(*(double *)a2) << 32));
  long long v35 = *(_OWORD *)(a2 + 8);
  *(void *)&long long v36 = *(void *)(a2 + 24);
  DWORD2(v36) = *(_DWORD *)(a2 + 32);
  mach_port_t v5 = *(_DWORD *)(a1 + 8);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t input = *(unsigned int *)(a1 + 12);
  v21.__vftable = 0;
  v21.__imp_.__imp_ = 0;
  double v22 = 0;
  uint32_t outputCnt = 0;
  __p = 0;
  long long v19 = 0uLL;
  size_t v31 = 0;
  uint64_t v6 = IOConnectCallMethod(v5, 5u, &input, 1u, &inputStruct, 0x28uLL, 0, &outputCnt, 0, &v31);
  if (v6)
  {
    CFArrayRef v12 = __cxa_allocate_exception(0x20uLL);
    CFNumberRef v13 = std::system_category();
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
    *(_OWORD *)&v28.__r_.__value_.__r.__words[1] = xmmword_1BAFF94D0;
    strcpy(v28.__r_.__value_.__l.__data_, "Error on IOConnectCallScalarMethod for selector ");
    std::to_string(&v27, 5u);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v14 = &v27;
    }
    else {
      int v14 = (std::string *)v27.__r_.__value_.__r.__words[0];
    }
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v27.__r_.__value_.__l.__size_;
    }
    __int16 v16 = std::string::append(&v28, (const std::string::value_type *)v14, size);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    std::string::size_type v30 = v16->__r_.__value_.__r.__words[2];
    long long v29 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x1C1859260](v12, v6, v13, &v29);
    __cxa_throw(v12, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  std::vector<unsigned long long>::resize((char **)&v21, outputCnt);
  if (v31)
  {
    std::vector<unsigned char>::__append((unint64_t *)&__p, v31);
    if (__p) {
      operator delete(__p);
    }
  }
  if (v21.__vftable) {
    operator delete(v21.__vftable);
  }
}

void sub_1BADF2D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, std::runtime_error a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a32 < 0)
  {
    operator delete(a28.__vftable);
    if ((v39 & 1) == 0)
    {
LABEL_10:
      if (a16.__vftable) {
        operator delete(a16.__vftable);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v38);
  goto LABEL_10;
}

void std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1>,void ()(CA::StreamDescription const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1>,void ()(CA::StreamDescription const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__alloc_func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1>,void ()(CA::StreamDescription const&)>::destroy[abi:ne180100](uint64_t a1)
{
  CFStringRef v3 = (void **)(a1 + 8);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return IOConnectRelease(*(_DWORD *)a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1>,void ()(CA::StreamDescription const&)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1>,void ()(CA::StreamDescription const&)>::destroy[abi:ne180100](a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1>,void ()(CA::StreamDescription const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1477650;
  return std::__compressed_pair_elem<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  io_connect_t v4 = *(_DWORD *)a2;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v5 = IOConnectAddRef(v4);
  if (v5)
  {
    uint64_t v8 = v5;
    exception = __cxa_allocate_exception(0x20uLL);
    int v10 = std::system_category();
    MEMORY[0x1C1859250](exception, v8, v10, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  int v6 = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 4) = v6;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>(a1 + 8, *(void *)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 6);
  return a1;
}

void sub_1BADF3070(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1>,void ()(CA::StreamDescription const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  int v2 = operator new(0x28uLL);
  void *v2 = &unk_1F1477650;
  std::__compressed_pair_elem<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BADF30EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1>,void ()(CA::StreamDescription const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1477650;
  int v2 = (void **)(a1 + 16);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v2);
  IOConnectRelease(*(_DWORD *)(a1 + 8));

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_1>,void ()(CA::StreamDescription const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1477650;
  CFStringRef v3 = (void **)(a1 + 16);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  IOConnectRelease(*(_DWORD *)(a1 + 8));
  return a1;
}

void *std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_0,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_0>,CA::StreamDescription ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_0,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_0>,CA::StreamDescription ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio2L18update_stream_coreERNS_4Core13Operation_SetERKN10applesauce5iokit17io_connect_holderERKNS4_2CF13DictionaryRefEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_0,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_0>,CA::StreamDescription ()(void)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_0,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_0>,CA::StreamDescription ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1477540;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_0,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_0>,CA::StreamDescription ()(void)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x30uLL);
  *(void *)int v2 = &unk_1F1477540;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_0,std::allocator<AMCP::IOAudio2::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_connect_holder const&,applesauce::CF::DictionaryRef const&,unsigned int)::$_0>,CA::StreamDescription ()(void)>::~__func()
{
}

double AMCP::DAL::Packetized_File_Handler::get_length_in_frames(AMCP::DAL::Packetized_File_Handler *this)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (OpaqueExtAudioFile *)*((void *)this + 6);
  if (!v1)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v6 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)pthread_attr_t buf = 67109890;
      *(_DWORD *)&buf[4] = v8;
      *(_WORD *)long long v29 = 2080;
      *(void *)&v29[2] = "Packetized_File_Handler.cpp";
      __int16 v30 = 1024;
      int v31 = 52;
      __int16 v32 = 2080;
      *(void *)uint64_t v33 = "not (m_audio_File != nullptr)";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Packetized_File_Handler::GetLengthInFrames: mAudioFile is null", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&ioPropertyDataSize);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Packetized_File_Handler::GetLengthInFrames: mAudioFile is null", (uint64_t)&v12);
    std::logic_error::logic_error(&outPropertyData, &v12);
    outPropertyData.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v14, &outPropertyData);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = -1;
    v14.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    CFArrayRef v15 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(void *)&v33[6] = "virtual Sample_Time AMCP::DAL::Packetized_File_Handler::get_length_in_frames() const";
    int v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Handler.cpp";
    LODWORD(v35) = 52;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v22);
    long long v25 = v22;
    uint64_t v24 = &unk_1F148AA90;
    uint64_t v26 = v23;
    long long v22 = 0uLL;
    uint64_t v23 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  outPropertyData.__vftable = 0;
  iounint64_t PropertyDataSize = 8;
  Property = (AMCP::Utility::OSStatus_Error_Category *)ExtAudioFileGetProperty(v1, 0x2366726Du, &ioPropertyDataSize, &outPropertyData);
  unsigned int v3 = Property;
  AMCP::Utility::OSStatus_Error_Category::get(Property);
  if (v3)
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v9 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)pthread_attr_t buf = 67109890;
      *(_DWORD *)&buf[4] = v11;
      *(_WORD *)long long v29 = 2080;
      *(void *)&v29[2] = "Packetized_File_Handler.cpp";
      __int16 v30 = 1024;
      int v31 = 56;
      __int16 v32 = 2080;
      *(void *)uint64_t v33 = "the_error.operator BOOL()";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Packetized_File_Handler::GetFileLengthInFrames: couldn't get the file's length", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    __cxa_allocate_exception(0x50uLL);
    MEMORY[0x1C1859240](&v24, v3, &AMCP::Utility::OSStatus_Error_Category::get(void)::s_category);
    boost::enable_error_info<std::system_error>((std::runtime_error *)&v14, (uint64_t)&v24);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    long long v35 = "virtual Sample_Time AMCP::DAL::Packetized_File_Handler::get_length_in_frames() const";
    long long v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Handler.cpp";
    int v37 = 56;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v22);
    v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(_OWORD *)&v12.__r_.__value_.__r.__words[1] = v22;
    uint64_t v13 = v23;
    long long v22 = 0uLL;
    uint64_t v23 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>();
  }
  return (double)(uint64_t)outPropertyData.__vftable;
}

void sub_1BADF374C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,std::runtime_error a33,uint64_t a34)
{
  if (__p) {
    operator delete(__p);
  }
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl(v35 - 128);
  boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector((uint64_t)&a16);
  std::runtime_error::~runtime_error(&a33);
  if (a11) {
    __cxa_free_exception(v34);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a27);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Packetized_File_Factory(void *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(buf, "read");
  int v2 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a1, buf);
  unsigned int v3 = v2;
  if (SHIBYTE(v24) < 0) {
    operator delete(*(void **)buf);
  }
  if (v3) {
    operator new();
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  io_connect_t v4 = **(NSObject ***)buf;
  if (*(void *)v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v22);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = pthread_self();
    mach_port_t v6 = pthread_mach_thread_np(v5);
    *(_DWORD *)pthread_attr_t buf = 67109634;
    *(_DWORD *)&buf[4] = v6;
    *(_WORD *)long long v22 = 2080;
    *(void *)&v22[2] = "Packetized_File_Handler.cpp";
    __int16 v23 = 1024;
    int v24 = 34;
    _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Packetized_File_Factory only supports reading packetized files", buf, 0x18u);
  }
  AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
  __cxa_allocate_exception(0x40uLL);
  caulk::make_string((caulk *)"Packetized_File_Factory only supports reading packetized files", (uint64_t)&v12);
  std::runtime_error::runtime_error(&v13, &v12);
  std::runtime_error::runtime_error(&v14, &v13);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  int v19 = -1;
  v14.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
  CFArrayRef v15 = &unk_1F148A9D0;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
  long long v25 = "std::shared_ptr<DAL_File_Handler> AMCP::DAL::Packetized_File_Factory(const DAL_Settings &)";
  uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Handler.cpp";
  int v27 = 34;
  applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v7);
  long long v10 = v7;
  uint64_t v11 = v8;
  long long v7 = 0uLL;
  uint64_t v8 = 0;
  mach_port_t v9 = &unk_1F148AA90;
  boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
}

void sub_1BADF3B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::Packetized_File_Reader *,std::shared_ptr<AMCP::DAL::DAL_File_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_File_Handler,AMCP::DAL::Packetized_File_Reader>,std::allocator<AMCP::DAL::Packetized_File_Reader>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4AMCP3DAL16DAL_File_HandlerEE27__shared_ptr_default_deleteIS3_NS2_22Packetized_File_ReaderEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::Packetized_File_Reader *,std::shared_ptr<AMCP::DAL::DAL_File_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_File_Handler,AMCP::DAL::Packetized_File_Reader>,std::allocator<AMCP::DAL::Packetized_File_Reader>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<AMCP::DAL::Packetized_File_Reader *,std::shared_ptr<AMCP::DAL::DAL_File_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_File_Handler,AMCP::DAL::Packetized_File_Reader>,std::allocator<AMCP::DAL::Packetized_File_Reader>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t HALS_IOContext::IsIOThreadRunning(HALS_IOContext *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 12) + 168))();
}

uint64_t HALS_IOContext::HasEnabledOutputStreams(HALS_IOContext *this)
{
  uint64_t v5 = 0;
  mach_port_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  char v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK14HALS_IOContext23HasEnabledOutputStreamsEv_block_invoke;
  v4[3] = &unk_1E6233E98;
  v4[4] = &v5;
  v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BADF3D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14HALS_IOContext23HasEnabledOutputStreamsEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v2 + 96) + 32))(*(void *)(v2 + 96), 0);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v2 + 96) + 48))(*(void *)(v2 + 96), 0);
    BOOL v4 = result != 0;
  }
  else
  {
    BOOL v4 = 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v4;
  return result;
}

uint64_t HALS_IOContext::HasEnabledInputStreams(HALS_IOContext *this)
{
  uint64_t v5 = 0;
  mach_port_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  char v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK14HALS_IOContext22HasEnabledInputStreamsEv_block_invoke;
  v4[3] = &unk_1E6233EC0;
  v4[4] = &v5;
  v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BADF3F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14HALS_IOContext22HasEnabledInputStreamsEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 96) + 32))(*(void *)(v2 + 96), 1);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 96) + 48))(*(void *)(v2 + 96), 1);
    BOOL v4 = result != 0;
  }
  else
  {
    BOOL v4 = 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v4;
  return result;
}

uint64_t HALS_IOContext::GetClientPID(HALS_IOContext *this)
{
  return *(unsigned int *)(*((void *)this + 8) + 4);
}

void HALS_IOContext::SetPropertyData(HALS_IOContext *this, uint64_t a2, const AudioObjectPropertyAddress *a3, unsigned int a4, const __CFDictionary **a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_IOContext *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
    goto LABEL_68;
  }
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1836282993)
  {
    if (mSelector > 1684108386)
    {
      if (mSelector <= 1735750500)
      {
        if (mSelector != 1684108387)
        {
          if (mSelector != 1718839674) {
LABEL_92:
          }
            HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v16, v17, v18, v19, (uint64_t)a8);
          goto LABEL_37;
        }
        if ((*(unsigned int (**)(HALS_IOContext *, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, HALS_Client *))(*(void *)this + 104))(this, a2, a3, a6, a7, a8) > a4)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)pthread_attr_t buf = 136315394;
            *(void *)&buf[4] = "HALS_IOContext.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1230;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::_SetPropertyData: bad property data size for kAudioDevicePropertyEnableCaptureFile", buf, 0x12u);
          }
          unint64_t v53 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v53 = off_1F148A5D8;
          v53[2] = 561211770;
        }
        *((_DWORD *)this + 39) = *(_DWORD *)a5;
        uint64_t v37 = *((void *)this + 12);
        uint64_t AudioCaptureMode = HALS_IOContext::GetAudioCaptureMode(this);
        int v39 = *(void (**)(uint64_t, uint64_t))(*(void *)v37 + 528);
        v39(v37, AudioCaptureMode);
        return;
      }
      if (mSelector == 1735750501)
      {
        AudioObjectPropertyScope mScope = a3->mScope;
        uint64_t v41 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**((unsigned int **)this + 8));
        uint64_t v70 = 0;
        v71 = &v70;
        uint64_t v72 = 0x2000000000;
        int v73 = 0;
        uint64_t v66 = 0;
        v67 = &v66;
        uint64_t v68 = 0x2000000000;
        char v69 = 0;
        uint64_t v81 = 0;
        v82 = &v81;
        uint64_t v83 = 0x3802000000;
        v84 = __Block_byref_object_copy__10760;
        v85 = __Block_byref_object_dispose__10761;
        memset(v86, 0, sizeof(v86));
        __int16 v87 = 1;
        uint64_t v74 = 0;
        v75 = &v74;
        uint64_t v76 = 0x3802000000;
        v77 = __Block_byref_object_copy__10760;
        v78 = __Block_byref_object_dispose__10761;
        memset(v79, 0, sizeof(v79));
        __int16 v80 = 1;
        *(void *)pthread_attr_t buf = MEMORY[0x1E4F143A8];
        *(void *)&uint8_t buf[8] = 1174405120;
        *(void *)&buf[16] = ___ZN14HALS_IOContext14SetStreamUsageERK26AudioIOContext_StreamUsagejb_block_invoke;
        v89 = &unk_1F1477AD0;
        unsigned int v97 = a4;
        BOOL v98 = mScope == 1768845428;
        CFArrayRef v90 = &v70;
        unint64_t v91 = &v66;
        v94 = this;
        uint64_t v95 = a5;
        unint64_t v92 = &v81;
        uint64_t v96 = v41;
        HALS_ObjectMap::RetainObject(v41, v42);
        v93 = &v74;
        unint64_t v43 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v43, (uint64_t)buf);
        if (mScope == 1768845428 && *((unsigned char *)v67 + 24)) {
          HALS_IOContext::UpdateInputStreamUsageStatus(v44);
        }
        if (*((_DWORD *)v71 + 6))
        {
          v58 = __cxa_allocate_exception(0x10uLL);
          int v59 = *((_DWORD *)v71 + 6);
          *(void *)v58 = off_1F148A5D8;
          v58[2] = v59;
        }
        HALS_ObjectMap::ReleaseObject(v96, v45);
        _Block_object_dispose(&v74, 8);
        _Block_object_dispose(&v81, 8);
        _Block_object_dispose(&v66, 8);
        _Block_object_dispose(&v70, 8);
        HALS_ObjectMap::ReleaseObject(v41, v46);
        return;
      }
      if (mSelector != 1752135523) {
        goto LABEL_92;
      }
      if ((*(unsigned int (**)(HALS_IOContext *, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, HALS_Client *))(*(void *)this + 104))(this, a2, a3, a6, a7, a8) > a4)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)pthread_attr_t buf = 136315394;
          *(void *)&buf[4] = "HALS_IOContext.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1314;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::_SetPropertyData: bad property data size for kAudioAggregateDevicePropertyHandleOverloadWithCatchup", buf, 0x12u);
        }
        long long v52 = __cxa_allocate_exception(0x10uLL);
        *(void *)long long v52 = off_1F148A5D8;
        v52[2] = 561211770;
      }
      int v24 = *(void (**)(void))(**((void **)this + 12) + 688);
LABEL_60:
      v24();
      return;
    }
    if (mSelector != 1633906541)
    {
      if (mSelector == 1633970532)
      {
        v64[0] = MEMORY[0x1E4F143A8];
        v64[1] = 0x40000000;
        v64[2] = ___ZN14HALS_IOContext15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
        v64[3] = &__block_descriptor_tmp_37_10752;
        unsigned int v65 = a4;
        v64[4] = this;
        v64[5] = a5;
        long long v47 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v47, (uint64_t)v64);
      }
      else
      {
        if (mSelector != 1634300531) {
          goto LABEL_92;
        }
        v60[0] = MEMORY[0x1E4F143A8];
        v60[1] = 0x40000000;
        v60[2] = ___ZN14HALS_IOContext15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_40;
        v60[3] = &__block_descriptor_tmp_41_10754;
        unsigned int v61 = a4;
        v60[4] = this;
        v60[5] = a5;
        uint64_t v23 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v23, (uint64_t)v60);
      }
      return;
    }
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)pthread_attr_t buf = 136315394;
        *(void *)&buf[4] = "HALS_IOContext.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1178;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::SetPropertyData: bad property data size for kAudioAggregateDevicePropertyComposition", buf, 0x12u);
      }
      unint64_t v50 = __cxa_allocate_exception(0x10uLL);
      *(void *)unint64_t v50 = off_1F148A5D8;
      v50[2] = 561211770;
    }
    int v33 = HALS_IOContext::SetComposition(this, *a5);
    if (!v33) {
      return;
    }
    int v34 = v33;
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v34;
LABEL_68:
  }
  if (mSelector <= 1902539641)
  {
    if (mSelector == 1836282994)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)pthread_attr_t buf = 136315394;
          *(void *)&buf[4] = "HALS_IOContext.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1210;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::SetPropertyData: bad property data size for kAudioIOContextProperty_MasterDevice", buf, 0x12u);
        }
        long long v36 = __cxa_allocate_exception(0x10uLL);
        *(void *)long long v36 = off_1F148A5D8;
        v36[2] = 561211770;
      }
      return;
    }
    if (mSelector == 1852012899)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)pthread_attr_t buf = 136315394;
          *(void *)&buf[4] = "HALS_IOContext.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1202;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::SetPropertyData: bad property data size for kAudioDevicePropertyIOCycleUsage", buf, 0x12u);
        }
        uint64_t v55 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v55 = off_1F148A5D8;
        v55[2] = 561211770;
      }
      v20.n128_u32[0] = *(_DWORD *)a5;
      uint64_t v48 = *(void (**)(__n128))(**((void **)this + 12) + 592);
      v48(v20);
      return;
    }
    if (mSelector != 1869838183) {
      goto LABEL_92;
    }
    if ((*(unsigned int (**)(HALS_IOContext *, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, HALS_Client *))(*(void *)this + 104))(this, a2, a3, a6, a7, a8) > a4)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)pthread_attr_t buf = 136315394;
        *(void *)&buf[4] = "HALS_IOContext.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1297;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::_SetPropertyData: bad property data size for kAudioDevicePropertyIOThreadOSWorkgroup", buf, 0x12u);
      }
      int v51 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v51 = off_1F148A5D8;
      v51[2] = 561211770;
    }
    int v24 = *(void (**)(void))(**((void **)this + 12) + 648);
    goto LABEL_60;
  }
  if (mSelector > 1935959153)
  {
    if (mSelector != 1935959154)
    {
      if (mSelector != 1937077093) {
        goto LABEL_92;
      }
      AudioObjectPropertyScope v25 = a3->mScope;
      uint64_t v26 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**((unsigned int **)this + 8));
      uint64_t v81 = 0;
      v82 = &v81;
      uint64_t v83 = 0x3802000000;
      v84 = __Block_byref_object_copy__10760;
      v85 = __Block_byref_object_dispose__10761;
      memset(v86, 0, sizeof(v86));
      __int16 v87 = 1;
      uint64_t v74 = 0;
      v75 = &v74;
      uint64_t v76 = 0x3802000000;
      v77 = __Block_byref_object_copy__10760;
      v78 = __Block_byref_object_dispose__10761;
      memset(v79, 0, sizeof(v79));
      __int16 v80 = 1;
      uint64_t v70 = 0;
      v71 = &v70;
      uint64_t v72 = 0x2000000000;
      int v73 = 0;
      uint64_t v66 = 0;
      v67 = &v66;
      uint64_t v68 = 0x2000000000;
      char v69 = 0;
      *(void *)pthread_attr_t buf = MEMORY[0x1E4F143A8];
      *(void *)&uint8_t buf[8] = 1174405120;
      *(void *)&buf[16] = ___ZN14HALS_IOContext20SetIOProcStreamUsageERK30AudioHardwareIOProcStreamUsagejb_block_invoke;
      v89 = &unk_1F1477B08;
      unsigned int v97 = a4;
      BOOL v98 = v25 == 1768845428;
      CFArrayRef v90 = &v70;
      unint64_t v91 = &v66;
      v94 = this;
      uint64_t v95 = a5;
      unint64_t v92 = &v81;
      uint64_t v96 = v26;
      HALS_ObjectMap::RetainObject(v26, v27);
      v93 = &v74;
      uint64_t v28 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v28, (uint64_t)buf);
      if (v25 == 1768845428 && *((unsigned char *)v67 + 24)) {
        HALS_IOContext::UpdateInputStreamUsageStatus(v29);
      }
      if (*((_DWORD *)v71 + 6))
      {
        int v56 = __cxa_allocate_exception(0x10uLL);
        int v57 = *((_DWORD *)v71 + 6);
        *(void *)int v56 = off_1F148A5D8;
        v56[2] = v57;
      }
      HALS_ObjectMap::ReleaseObject(v96, v30);
      _Block_object_dispose(&v66, 8);
      _Block_object_dispose(&v70, 8);
      _Block_object_dispose(&v74, 8);
      _Block_object_dispose(&v81, 8);
      HALS_ObjectMap::ReleaseObject(v26, v31);
      return;
    }
    if ((*(unsigned int (**)(HALS_IOContext *, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, HALS_Client *))(*(void *)this + 104))(this, a2, a3, a6, a7, a8) > a4)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)pthread_attr_t buf = 136315394;
        *(void *)&buf[4] = "HALS_IOContext.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1306;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::_SetPropertyData: bad property data size for kAudioDevicePropertyIdentifySpeechDeviceToAllowDeviceRestart", buf, 0x12u);
      }
      io_connect_t v54 = __cxa_allocate_exception(0x10uLL);
      *(void *)io_connect_t v54 = off_1F148A5D8;
      v54[2] = 561211770;
    }
    int v24 = *(void (**)(void))(**((void **)this + 12) + 672);
    goto LABEL_60;
  }
  if (mSelector == 1902539642)
  {
LABEL_37:
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)pthread_attr_t buf = 136315394;
        *(void *)&buf[4] = "HALS_IOContext.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1193;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::SetPropertyData: bad property data size for kAudioDevicePropertyBufferFrameSize", buf, 0x12u);
      }
      uint64_t v49 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v49 = off_1F148A5D8;
      v49[2] = 561211770;
    }
    __int16 v32 = *(void (**)(void))(**((void **)this + 12) + 584);
    v32();
    return;
  }
  if (mSelector != 1919773028) {
    goto LABEL_92;
  }
  v62[0] = MEMORY[0x1E4F143A8];
  v62[1] = 0x40000000;
  v62[2] = ___ZN14HALS_IOContext15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_38;
  v62[3] = &__block_descriptor_tmp_39_10753;
  unsigned int v63 = a4;
  v62[4] = this;
  v62[5] = a5;
  long long v22 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v22, (uint64_t)v62);
}

void sub_1BADF51E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContext::SetComposition(HALS_IOContext *this, const __CFDictionary *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  unsigned int v3 = pthread_self();
  BOOL is_thread_configured_for_realtime = AMCP::Utility::is_thread_configured_for_realtime(v3, v4);
  if (is_thread_configured_for_realtime)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_thread_configured_for_realtime);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v11, "com.apple.coreaudio", "AMCP");
    mach_port_t v6 = *v11;
    if (*(void *)v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v12);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      LODWORD(v11) = 67109634;
      HIDWORD(v11) = v10;
      *(_WORD *)std::string v12 = 2080;
      *(void *)&_OWORD v12[2] = "HALS_IOContext.cpp";
      __int16 v13 = 1024;
      int v14 = 1905;
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_IOContext::SetComposition not allowed on the IO thread, returning kAudioHardwareIllegalOperationError", (uint8_t *)&v11, 0x18u);
    }
    return 1852797029;
  }
  else
  {
    char v8 = *(uint64_t (**)(void))(**((void **)this + 12) + 560);
    return v8();
  }
}

uint64_t HALS_IOContext::GetAudioCaptureMode(HALS_IOContext *this)
{
  uint64_t v1 = *((unsigned int *)this + 39);
  if (!v1)
  {
    v6[0] = 0;
    v6[1] = 0;
    HALS_System::GetInstance(&v7, 0, v6);
    if (v7 && *(unsigned char *)(v7 + 1464))
    {
      int v3 = 0;
      unsigned int v4 = *(_DWORD *)(v7 + 1468);
      if (v4 <= 1) {
        uint64_t v1 = 1;
      }
      else {
        uint64_t v1 = v4;
      }
    }
    else
    {
      int v3 = 1;
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if (v3) {
      return *((unsigned int *)this + 39);
    }
  }
  return v1;
}

char *___ZN14HALS_IOContext15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 48) != 8)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      uint64_t v19 = "HALS_IOContext.cpp";
      __int16 v20 = 1024;
      int v21 = 1243;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::_SetPropertyData: bad property data size for kAudioDevicePropertyAddReporterID", (uint8_t *)&v18, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 561211770;
  }
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t result = *(char **)(v2 + 160);
  unsigned int v4 = *(char **)(v2 + 168);
  if (result == v4)
  {
    uint64_t v5 = *(char **)(v2 + 160);
  }
  else
  {
    uint64_t v5 = *(char **)(v2 + 160);
    while (*(void *)v5 != *v1)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(v2 + 168);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    unint64_t v6 = *(void *)(v2 + 176);
    if ((unint64_t)v4 >= v6)
    {
      uint64_t v8 = (v4 - result) >> 3;
      unint64_t v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v10 = v6 - (void)result;
      if (v10 >> 2 > v9) {
        unint64_t v9 = v10 >> 2;
      }
      BOOL v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8;
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v11) {
        unint64_t v12 = v9;
      }
      if (v12)
      {
        unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        uint64_t result = *(char **)(v2 + 160);
        unsigned int v4 = *(char **)(v2 + 168);
      }
      else
      {
        uint64_t v13 = 0;
      }
      int v14 = (void *)(v12 + 8 * v8);
      unint64_t v15 = v12 + 8 * v13;
      *int v14 = *v1;
      uint64_t v7 = v14 + 1;
      while (v4 != result)
      {
        uint64_t v16 = *((void *)v4 - 1);
        v4 -= 8;
        *--int v14 = v16;
      }
      *(void *)(v2 + 160) = v14;
      *(void *)(v2 + 168) = v7;
      *(void *)(v2 + 176) = v15;
      if (result) {
        operator delete(result);
      }
    }
    else
    {
      *(void *)unsigned int v4 = *v1;
      uint64_t v7 = v4 + 8;
    }
    *(void *)(v2 + 168) = v7;
    std::__sort<std::__less<long long,long long> &,long long *>();
    return (char *)(*(uint64_t (**)(void))(**(void **)(v2 + 96) + 360))(*(void *)(v2 + 96));
  }
  return result;
}

uint64_t ___ZN14HALS_IOContext15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_38(uint64_t result)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(result + 48) != 8)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "HALS_IOContext.cpp";
      __int16 v9 = 1024;
      int v10 = 1259;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::_SetPropertyData: bad property data size for kAudioDevicePropertyRemoveReporterID", (uint8_t *)&v7, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 561211770;
  }
  uint64_t v1 = *(void *)(result + 32);
  int v3 = *(char **)(v1 + 160);
  uint64_t v2 = *(char **)(v1 + 168);
  if (v3 != v2)
  {
    while (*(void *)v3 != **(void **)(result + 40))
    {
      v3 += 8;
      if (v3 == v2)
      {
        int v3 = *(char **)(v1 + 168);
        break;
      }
    }
  }
  if (v3 != v2)
  {
    int64_t v4 = v2 - (v3 + 8);
    if (v2 != v3 + 8) {
      memmove(v3, v3 + 8, v2 - (v3 + 8));
    }
    *(void *)(v1 + 168) = &v3[v4];
    uint64_t v5 = *(uint64_t (**)(void))(**(void **)(v1 + 96) + 360);
    return v5();
  }
  return result;
}

uint64_t ___ZN14HALS_IOContext15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_40(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(char **)(v1 + 160);
  *(void *)(v1 + 168) = v2;
  unint64_t v3 = *(unsigned int *)(a1 + 48);
  if (v3 >= 8)
  {
    uint64_t v5 = 0;
    unint64_t v6 = v3 >> 3;
    do
    {
      uint64_t v7 = *(void *)(a1 + 40);
      unint64_t v8 = *(void *)(v1 + 176);
      if ((unint64_t)v2 >= v8)
      {
        __int16 v9 = *(char **)(v1 + 160);
        uint64_t v10 = (v2 - v9) >> 3;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v8 - (void)v9;
        if (v12 >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v13);
          uint64_t v15 = v14;
          __int16 v9 = *(char **)(v1 + 160);
          uint64_t v2 = *(char **)(v1 + 168);
        }
        else
        {
          uint64_t v15 = 0;
        }
        uint64_t v16 = (void *)(v13 + 8 * v10);
        *uint64_t v16 = *(void *)(v7 + 8 * v5);
        uint64_t v17 = (char *)(v16 + 1);
        while (v2 != v9)
        {
          uint64_t v18 = *((void *)v2 - 1);
          v2 -= 8;
          *--uint64_t v16 = v18;
        }
        *(void *)(v1 + 160) = v16;
        *(void *)(v1 + 168) = v17;
        *(void *)(v1 + 176) = v13 + 8 * v15;
        if (v9) {
          operator delete(v9);
        }
        uint64_t v2 = v17;
      }
      else
      {
        *(void *)uint64_t v2 = *(void *)(v7 + 8 * v5);
        v2 += 8;
      }
      *(void *)(v1 + 168) = v2;
      ++v5;
    }
    while (v5 != v6);
  }
  std::__sort<std::__less<long long,long long> &,long long *>();
  __int16 v20 = *(uint64_t **)(v1 + 160);
  uint64_t v19 = *(uint64_t **)(v1 + 168);
  if (v20 == v19)
  {
LABEL_31:
    if (v19 != v20) {
      *(void *)(v1 + 168) = v20;
    }
  }
  else
  {
    int v21 = v20 + 1;
    while (v21 != v19)
    {
      uint64_t v22 = v21 - 1;
      uint64_t v23 = *(v21 - 1);
      uint64_t v24 = *v21++;
      if (v23 == v24)
      {
        for (CFIndex i = v22 + 2; i != v19; ++i)
        {
          uint64_t v26 = v23;
          uint64_t v23 = *i;
          if (v26 != *i)
          {
            v22[1] = v23;
            ++v22;
          }
        }
        __int16 v20 = v22 + 1;
        goto LABEL_31;
      }
    }
  }
  return (*(uint64_t (**)(void))(**(void **)(v1 + 96) + 360))(*(void *)(v1 + 96));
}

__n128 __Block_byref_object_copy__10760(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t ___ZN14HALS_IOContext20SetIOProcStreamUsageERK30AudioHardwareIOProcStreamUsagejb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(uint64_t (**)(void, void, void, void))(**(void **)(v2 + 96) + 632))(*(void *)(v2 + 96), *(void *)(a1 + 72), *(unsigned int *)(a1 + 88), *(unsigned __int8 *)(a1 + 92));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (*(uint64_t (**)(void))(**(void **)(v2 + 96)
                                                                                                 + 152))(*(void *)(v2 + 96));
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 96) + 136))(*(void *)(v2 + 96), a1 + 80);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  *(void *)(v4 + 40) = v3;
  *(void *)(v4 + 48) = v5;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 96) + 144))(*(void *)(v2 + 96), a1 + 80);
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
  *(void *)(v7 + 40) = result;
  *(void *)(v7 + 48) = v8;
  return result;
}

uint64_t HALS_IOContext::UpdateInputStreamUsageStatus(HALS_PlatformBehaviors *a1)
{
  platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(a1);
  uint64_t v2 = (HALS_PlatformBehaviors *)(*(uint64_t (**)(uint64_t *))(*platform_behaviors + 64))(platform_behaviors);
  uint64_t v3 = *(uint64_t (**)(void))(*HALS_PlatformBehaviors::get_platform_behaviors(v2) + 64);

  return v3();
}

void __destroy_helper_block_e8_80c34_ZTS13HALS_ReleaserI11HALS_ClientE(uint64_t a1, HALS_Object *a2)
{
}

void __copy_helper_block_e8_80c34_ZTS13HALS_ReleaserI11HALS_ClientE(uint64_t a1, HALS_Object *a2)
{
  uint64_t v2 = (HALS_ObjectMap *)*((void *)a2 + 10);
  *(void *)(a1 + 80) = v2;
  HALS_ObjectMap::RetainObject(v2, a2);
}

uint64_t ___ZN14HALS_IOContext14SetStreamUsageERK26AudioIOContext_StreamUsagejb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(uint64_t (**)(void, void, void, void))(**(void **)(v2 + 96) + 616))(*(void *)(v2 + 96), *(void *)(a1 + 72), *(unsigned int *)(a1 + 88), *(unsigned __int8 *)(a1 + 92));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (*(uint64_t (**)(void))(**(void **)(v2 + 96)
                                                                                                 + 152))(*(void *)(v2 + 96));
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 96) + 136))(*(void *)(v2 + 96), a1 + 80);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  *(void *)(v4 + 40) = v3;
  *(void *)(v4 + 48) = v5;
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 96) + 144))(*(void *)(v2 + 96), a1 + 80);
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
  *(void *)(v7 + 40) = result;
  *(void *)(v7 + 48) = v8;
  return result;
}

void HALS_IOContext::GetPropertyData(HALS_IOContext *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, uint64_t *a6, uint64_t a7, const void *a8, HALS_Client *a9)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  unsigned int v70 = a4;
  if (((*(uint64_t (**)(HALS_IOContext *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *, unsigned int *, uint64_t *, uint64_t, const void *))(*(void *)this + 88))(this, a2, a3, a9, a5, a6, a7, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    int v36 = 2003332927;
    goto LABEL_79;
  }
  signed int mSelector = a3->mSelector;
  BOOL v16 = a3->mScope == 1768845428;
  if ((int)a3->mSelector <= 1752135522)
  {
    if (mSelector <= 1718839673)
    {
      if (mSelector > 1634955891)
      {
        if (mSelector != 1634955892)
        {
          if (mSelector != 1684108387) {
            goto LABEL_75;
          }
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)pthread_attr_t buf = 136315394;
              *(void *)&buf[4] = "HALS_IOContext.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1110;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioDevicePropertyEnableCaptureFile", buf, 0x12u);
            }
            uint64_t v38 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v38 = off_1F148A5D8;
            v38[2] = 561211770;
          }
          int AudioCaptureMode = HALS_IOContext::GetAudioCaptureMode(this);
          goto LABEL_68;
        }
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)pthread_attr_t buf = 136315394;
            *(void *)&buf[4] = "HALS_IOContext.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1045;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioDevicePropertyActualSampleRate", buf, 0x12u);
          }
          v44 = __cxa_allocate_exception(0x10uLL);
          *(void *)v44 = off_1F148A5D8;
          v44[2] = 561211770;
        }
        v62[0] = MEMORY[0x1E4F143A8];
        v62[1] = 0x40000000;
        v62[2] = ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_30;
        v62[3] = &__block_descriptor_tmp_31_10783;
        v62[4] = this;
        v62[5] = a6;
        long long v29 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v29, (uint64_t)v62);
LABEL_53:
        unsigned int v26 = 8;
        goto LABEL_70;
      }
      if (mSelector == 1633906541)
      {
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)pthread_attr_t buf = 136315394;
            *(void *)&buf[4] = "HALS_IOContext.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 981;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioAggregateDevicePropertyComposition", buf, 0x12u);
          }
          unint64_t v40 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v40 = off_1F148A5D8;
          v40[2] = 561211770;
        }
        *(void *)pthread_attr_t buf = 0;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&buf[16] = 0x2000000000;
        LODWORD(v80) = 0;
        v69[0] = MEMORY[0x1E4F143A8];
        v69[1] = 0x40000000;
        v69[2] = ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
        v69[3] = &unk_1E6233FF0;
        v69[6] = a6;
        v69[5] = this;
        v69[4] = buf;
        uint64_t v28 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v28, (uint64_t)v69);
        if (*(_DWORD *)(*(void *)&buf[8] + 24))
        {
          io_connect_t v54 = __cxa_allocate_exception(0x10uLL);
          int v55 = *(_DWORD *)(*(void *)&buf[8] + 24);
          *(void *)io_connect_t v54 = off_1F148A5D8;
          v54[2] = v55;
        }
        int v22 = 8;
      }
      else
      {
        if (mSelector != 1634300531)
        {
          int v34 = 1633970532;
LABEL_74:
          if (mSelector != v34) {
            goto LABEL_75;
          }
          exception = __cxa_allocate_exception(0x10uLL);
          *(void *)exception = off_1F148A5D8;
          int v36 = 1852797029;
LABEL_79:
          exception[2] = v36;
        }
        *(void *)pthread_attr_t buf = 0;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&buf[16] = 0x2000000000;
        LODWORD(v80) = 0;
        v56[0] = MEMORY[0x1E4F143A8];
        v56[1] = 0x40000000;
        v56[2] = ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_35;
        v56[3] = &unk_1E6234128;
        v56[4] = buf;
        v56[5] = this;
        unsigned int v57 = a4;
        v56[6] = a6;
        int v21 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v21, (uint64_t)v56);
        int v22 = 8 * *(_DWORD *)(*(void *)&buf[8] + 24);
      }
    }
    else
    {
      if (mSelector <= 1735354733)
      {
        if (mSelector == 1718839674) {
          goto LABEL_44;
        }
        if (mSelector != 1718843939) {
          goto LABEL_75;
        }
        if (a4 <= 0xF)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)pthread_attr_t buf = 136315394;
            *(void *)&buf[4] = "HALS_IOContext.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 999;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioDevicePropertyBufferFrameSizeRange", buf, 0x12u);
          }
          unint64_t v43 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v43 = off_1F148A5D8;
          v43[2] = 561211770;
        }
        v68[0] = MEMORY[0x1E4F143A8];
        v68[1] = 0x40000000;
        v68[2] = ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_20;
        v68[3] = &__block_descriptor_tmp_21_10773;
        v68[4] = this;
        v68[5] = a6;
        AudioObjectPropertyScope v25 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v25, (uint64_t)v68);
        unsigned int v26 = 16;
LABEL_70:
        *a5 = v26;
        return;
      }
      if (mSelector == 1735354734)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)pthread_attr_t buf = 136315394;
            *(void *)&buf[4] = "HALS_IOContext.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1036;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceIsRunning", buf, 0x12u);
          }
          long long v47 = __cxa_allocate_exception(0x10uLL);
          *(void *)long long v47 = off_1F148A5D8;
          v47[2] = 561211770;
        }
        v63[0] = MEMORY[0x1E4F143A8];
        v63[1] = 0x40000000;
        v63[2] = ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_28;
        v63[3] = &__block_descriptor_tmp_29_10781;
        v63[4] = this;
        v63[5] = a6;
        __int16 v32 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v32, (uint64_t)v63);
        goto LABEL_69;
      }
      if (mSelector != 1735551332)
      {
        if (mSelector != 1735750501) {
          goto LABEL_75;
        }
        *a5 = a4;
        BOOL v18 = a3->mScope == 1768845428;
        uint64_t v75 = 0;
        uint64_t v76 = &v75;
        uint64_t v77 = 0x2000000000;
        int v78 = 0;
        uint64_t v71 = 0;
        uint64_t v72 = &v71;
        uint64_t v73 = 0x2000000000;
        int v74 = 0;
        *(void *)pthread_attr_t buf = MEMORY[0x1E4F143A8];
        *(void *)&uint8_t buf[8] = 0x40000000;
        *(void *)&buf[16] = ___ZNK14HALS_IOContext14GetStreamUsageER26AudioIOContext_StreamUsageRjb_block_invoke;
        __int16 v80 = &unk_1E62341B0;
        uint64_t v83 = this;
        v84 = a6;
        v85 = &v70;
        BOOL v86 = v18;
        uint64_t v81 = &v75;
        v82 = &v71;
        uint64_t v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v19, (uint64_t)buf);
        if (*((_DWORD *)v72 + 6))
        {
          unint64_t v50 = __cxa_allocate_exception(0x10uLL);
          int v51 = *((_DWORD *)v72 + 6);
          *(void *)unint64_t v50 = off_1F148A5D8;
          v50[2] = v51;
        }
        unsigned int v70 = *((_DWORD *)v76 + 6);
        _Block_object_dispose(&v71, 8);
        __int16 v20 = &v75;
LABEL_63:
        _Block_object_dispose(v20, 8);
        return;
      }
      *(void *)pthread_attr_t buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&buf[16] = 0x2000000000;
      LODWORD(v80) = 0;
      v59[0] = MEMORY[0x1E4F143A8];
      v59[1] = 0x40000000;
      v59[2] = ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_32;
      v59[3] = &unk_1E62340D8;
      v59[5] = this;
      v59[6] = a6;
      unsigned int v60 = a4;
      v59[4] = buf;
      BOOL v61 = v16;
      __int16 v30 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v30, (uint64_t)v59);
      int v22 = 56 * *(_DWORD *)(*(void *)&buf[8] + 24);
    }
    *a5 = v22;
LABEL_62:
    __int16 v20 = (uint64_t *)buf;
    goto LABEL_63;
  }
  if (mSelector <= 1902539641)
  {
    if (mSelector <= 1852012898)
    {
      if (mSelector == 1752135523)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)pthread_attr_t buf = 136315394;
            *(void *)&buf[4] = "HALS_IOContext.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1157;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioAggregateDevicePropertyHandleOverloadWithCatchup", buf, 0x12u);
          }
          uint64_t v48 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v48 = off_1F148A5D8;
          v48[2] = 561211770;
        }
        int AudioCaptureMode = (*(uint64_t (**)(void))(**((void **)this + 12) + 696))(*((void *)this + 12));
      }
      else
      {
        if (mSelector != 1836282994) {
          goto LABEL_75;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)pthread_attr_t buf = 136315394;
            *(void *)&buf[4] = "HALS_IOContext.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1054;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioIOContextProperty_MasterDevice", buf, 0x12u);
          }
          unint64_t v42 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v42 = off_1F148A5D8;
          v42[2] = 561211770;
        }
        int AudioCaptureMode = (*(uint64_t (**)(void))(**((void **)this + 12) + 608))(*((void *)this + 12));
      }
      goto LABEL_68;
    }
    if (mSelector == 1852012899)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)pthread_attr_t buf = 136315394;
          *(void *)&buf[4] = "HALS_IOContext.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1027;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioDevicePropertyIOCycleUsage", buf, 0x12u);
        }
        long long v46 = __cxa_allocate_exception(0x10uLL);
        *(void *)long long v46 = off_1F148A5D8;
        v46[2] = 561211770;
      }
      v64[0] = MEMORY[0x1E4F143A8];
      v64[1] = 0x40000000;
      v64[2] = ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_26;
      v64[3] = &__block_descriptor_tmp_27_10779;
      v64[4] = this;
      v64[5] = a6;
      int v31 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v31, (uint64_t)v64);
      goto LABEL_69;
    }
    if (mSelector != 1869838183)
    {
      if (mSelector != 1870030194) {
        goto LABEL_75;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)pthread_attr_t buf = 136315394;
          *(void *)&buf[4] = "HALS_IOContext.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1100;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioDeviceProcessorOverload", buf, 0x12u);
        }
        int v39 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v39 = off_1F148A5D8;
        v39[2] = 561211770;
      }
      *(_DWORD *)a6 = 0;
      goto LABEL_69;
    }
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)pthread_attr_t buf = 136315394;
        *(void *)&buf[4] = "HALS_IOContext.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1139;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioDevicePropertyIOThreadOSWorkgroup", buf, 0x12u);
      }
      long long v45 = __cxa_allocate_exception(0x10uLL);
      *(void *)long long v45 = off_1F148A5D8;
      v45[2] = 561211770;
    }
    *a6 = (*(uint64_t (**)(void))(**((void **)this + 12) + 664))(*((void *)this + 12));
    goto LABEL_53;
  }
  if (mSelector <= 1935959153)
  {
    if (mSelector != 1902539642)
    {
      if (mSelector == 1935763060)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)pthread_attr_t buf = 136315394;
            *(void *)&buf[4] = "HALS_IOContext.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1018;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioDevicePropertySafetyOffset", buf, 0x12u);
          }
          uint64_t v41 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v41 = off_1F148A5D8;
          v41[2] = 561211770;
        }
        v65[0] = MEMORY[0x1E4F143A8];
        v65[1] = 0x40000000;
        v65[2] = ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_24;
        v65[3] = &__block_descriptor_tmp_25_10777;
        v65[4] = this;
        v65[5] = a6;
        BOOL v66 = v16;
        uint64_t v23 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v23, (uint64_t)v65);
        goto LABEL_69;
      }
      int v34 = 1919773028;
      goto LABEL_74;
    }
LABEL_44:
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)pthread_attr_t buf = 136315394;
        *(void *)&buf[4] = "HALS_IOContext.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1009;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioDevicePropertyBufferFrameSize", buf, 0x12u);
      }
      uint64_t v37 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v37 = off_1F148A5D8;
      v37[2] = 561211770;
    }
    v67[0] = MEMORY[0x1E4F143A8];
    v67[1] = 0x40000000;
    v67[2] = ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_22;
    v67[3] = &__block_descriptor_tmp_23_10775;
    v67[4] = this;
    v67[5] = a6;
    int v27 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v27, (uint64_t)v67);
    goto LABEL_69;
  }
  switch(mSelector)
  {
    case 1935959154:
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)pthread_attr_t buf = 136315394;
          *(void *)&buf[4] = "HALS_IOContext.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1148;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioDevicePropertyIdentifySpeechDeviceToAllowDeviceRestart", buf, 0x12u);
        }
        uint64_t v49 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v49 = off_1F148A5D8;
        v49[2] = 561211770;
      }
      int AudioCaptureMode = (*(uint64_t (**)(void))(**((void **)this + 12) + 680))(*((void *)this + 12));
LABEL_68:
      *(_DWORD *)a6 = AudioCaptureMode;
LABEL_69:
      unsigned int v26 = 4;
      goto LABEL_70;
    case 1936482681:
      *(void *)pthread_attr_t buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&buf[16] = 0x2000000000;
      LODWORD(v80) = a4;
      uint64_t v75 = 0;
      uint64_t v76 = &v75;
      uint64_t v77 = 0x2000000000;
      int v78 = 0;
      v58[0] = MEMORY[0x1E4F143A8];
      v58[1] = 0x40000000;
      v58[2] = ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2;
      v58[3] = &unk_1E6234100;
      v58[6] = this;
      v58[7] = a6;
      v58[4] = &v75;
      v58[5] = buf;
      v58[8] = a3;
      int v33 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v33, (uint64_t)v58);
      if (*((_DWORD *)v76 + 6))
      {
        long long v52 = __cxa_allocate_exception(0x10uLL);
        int v53 = *((_DWORD *)v76 + 6);
        *(void *)long long v52 = off_1F148A5D8;
        v52[2] = v53;
      }
      *a5 = *(_DWORD *)(*(void *)&buf[8] + 24);
      _Block_object_dispose(&v75, 8);
      goto LABEL_62;
    case 1937077093:
      *a5 = a4;
      uint64_t v17 = *(void (**)(void))(**((void **)this + 12) + 640);
      v17();
      return;
  }
LABEL_75:

  HALS_Object::GetPropertyData((uint64_t)this, v14, (int *)a3, a4, (int *)a5, a6);
}

void sub_1BADF740C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 40) + 96) + 568))(*(void *)(*(void *)(a1 + 40) + 96));
  **(void **)(a1 + 48) = result;
  return result;
}

void sub_1BADF74BC(void *a1, int a2)
{
  uint64_t v4 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) = v4[2];
  }
  else {
    *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) = 2003329396;
  }
  __cxa_end_catch();
}

uint64_t ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_20(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 32) + 96) + 576))(*(void *)(*(void *)(a1 + 32) + 96), *(void *)(a1 + 40));
}

uint64_t ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_22(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 32) + 96) + 280))(*(void *)(*(void *)(a1 + 32) + 96));
  **(_DWORD **)(a1 + 40) = result;
  return result;
}

uint64_t ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_24(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 32) + 96) + 720))(*(void *)(*(void *)(a1 + 32) + 96), *(unsigned __int8 *)(a1 + 48));
  **(_DWORD **)(a1 + 40) = result;
  return result;
}

void ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_26(uint64_t a1)
{
  **(float **)(a1 + 40) = (*(float (**)(void))(**(void **)(*(void *)(a1 + 32) + 96) + 600))(*(void *)(*(void *)(a1 + 32) + 96));
}

uint64_t ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_28(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 32) + 96) + 152))(*(void *)(*(void *)(a1 + 32) + 96));
  **(_DWORD **)(a1 + 40) = result;
  return result;
}

void ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_30(uint64_t a1)
{
  **(double **)(a1 + 40) = (*(double (**)(void))(**(void **)(*(void *)(a1 + 32) + 96) + 712))(*(void *)(*(void *)(a1 + 32) + 96));
}

uint64_t ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_32(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, uint64_t, void))(**(void **)(*(void *)(a1 + 40) + 96)
                                                                            + 704))(*(void *)(*(void *)(a1 + 40) + 96), *(void *)(a1 + 48), *(unsigned int *)(a1 + 56), *(void *)(*(void *)(a1 + 32) + 8) + 24, *(unsigned __int8 *)(a1 + 60));
}

uint64_t ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2(void *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[6];
  uint64_t v3 = *(void *)(a1[5] + 8);
  uint64_t v4 = (_DWORD *)a1[7];
  int v5 = *(_DWORD *)(a1[8] + 4);
  int v6 = (*(uint64_t (**)(void, BOOL))(**(void **)(v2 + 96) + 32))(*(void *)(v2 + 96), v5 == 1768845428);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v2 + 96) + 280))(*(void *)(v2 + 96));
  unsigned int v8 = (16 * v6) | 8;
  if (*(_DWORD *)(v3 + 24) < v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      uint64_t v14 = "HALS_IOContext.cpp";
      __int16 v15 = 1024;
      int v16 = 2218;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::GetPropertyData: bad property data size for kAudioDevicePropertyStreamConfiguration", (uint8_t *)&v13, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 561211770;
  }
  *uint64_t v4 = v6;
  if (v6)
  {
    int v9 = result;
    uint64_t v10 = 0;
    unint64_t v11 = v4 + 4;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, BOOL, uint64_t, int *))(**(void **)(v2 + 96) + 72))(*(void *)(v2 + 96), v5 == 1768845428, v10, &v13);
      *((_DWORD *)v11 - 2) = v18;
      *((_DWORD *)v11 - 1) = v17 * v9;
      *unint64_t v11 = 0;
      v11 += 2;
      ++v10;
    }
    while (v6 != v10);
  }
  *(_DWORD *)(v3 + 24) = v8;
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = 0;
  return result;
}

void sub_1BADF79A0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BADF78A0);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14HALS_IOContext15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_35(uint64_t result)
{
  unint64_t v1 = *(unsigned int *)(result + 56);
  uint64_t v2 = *(void *)(*(void *)(result + 40) + 160);
  unint64_t v3 = (*(void *)(*(void *)(result + 40) + 168) - v2) >> 3;
  BOOL v4 = v3 >= v1 >> 3;
  unint64_t v5 = v1 >> 3;
  if (!v4) {
    unint64_t v5 = (*(void *)(*(void *)(result + 40) + 168) - v2) >> 3;
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
  if (*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24))
  {
    unint64_t v6 = 0;
    do
    {
      if (v3 == v6) {
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      }
      *(void *)(*(void *)(result + 48) + 8 * v6) = *(void *)(v2 + 8 * v6);
      ++v6;
    }
    while (v6 < *(unsigned int *)(*(void *)(*(void *)(result + 32) + 8) + 24));
  }
  return result;
}

uint64_t ___ZNK14HALS_IOContext14GetStreamUsageER26AudioIOContext_StreamUsageRjb_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, void))(**(void **)(*(void *)(a1 + 48) + 96) + 624))(*(void *)(*(void *)(a1 + 48) + 96), *(void *)(a1 + 56), **(unsigned int **)(a1 + 64), *(unsigned __int8 *)(a1 + 72));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BADF7AD8(void *a1, int a2)
{
  BOOL v4 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    *(_DWORD *)(*(void *)(*(void *)(v2 + 40) + 8) + 24) = v4[2];
  }
  else {
    *(_DWORD *)(*(void *)(*(void *)(v2 + 40) + 8) + 24) = 2003329396;
  }
  __cxa_end_catch();
}

uint64_t HALS_IOContext::GetPropertyDataSize(HALS_IOContext *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, const void *a5, HALS_Client *a6)
{
  uint64_t v8 = (*(uint64_t (**)(HALS_IOContext *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *, const void *))(*(void *)this + 88))(this, a2, a3, a6, a5);
  if ((v8 & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  signed int mSelector = a3->mSelector;
  uint64_t v11 = 8;
  if ((int)a3->mSelector <= 1752135522)
  {
    if (mSelector > 1718839673)
    {
      if (mSelector <= 1735354733)
      {
        if (mSelector == 1718839674) {
          return 4;
        }
        if (mSelector == 1718843939) {
          return 16;
        }
        goto LABEL_41;
      }
      switch(mSelector)
      {
        case 1735354734:
          return 4;
        case 1735551332:
          uint64_t v23 = 0;
          uint64_t v24 = &v23;
          uint64_t v25 = 0x2000000000;
          int v26 = 0;
          v22[0] = MEMORY[0x1E4F143A8];
          v22[1] = 0x40000000;
          v22[2] = ___ZNK14HALS_IOContext19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke;
          void v22[3] = &unk_1E6233F50;
          v22[4] = &v23;
          v22[5] = this;
          v22[6] = a3;
          __int16 v15 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v15, (uint64_t)v22);
          uint64_t v11 = (56 * *((_DWORD *)v24 + 6));
          break;
        case 1735750501:
          uint64_t v23 = 0;
          uint64_t v24 = &v23;
          uint64_t v25 = 0x2000000000;
          int v26 = 0;
          v21[0] = MEMORY[0x1E4F143A8];
          v21[1] = 0x40000000;
          v21[2] = ___ZNK14HALS_IOContext19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2;
          v21[3] = &unk_1E6233F78;
          v21[4] = &v23;
          v21[5] = this;
          v21[6] = a3;
          int v13 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v13, (uint64_t)v21);
          uint64_t v11 = (4 * *((_DWORD *)v24 + 6) + 4);
          break;
        default:
          goto LABEL_41;
      }
      goto LABEL_39;
    }
    if (mSelector <= 1634300530)
    {
      if (mSelector == 1633906541 || mSelector == 1633970532) {
        return v11;
      }
      goto LABEL_41;
    }
    if (mSelector == 1634300531) {
      return (*((_DWORD *)this + 42) - *((_DWORD *)this + 40)) & 0xFFFFFFF8;
    }
    if (mSelector == 1634955892) {
      return v11;
    }
    int v12 = 1684108387;
  }
  else
  {
    if (mSelector > 1902539641)
    {
      if (mSelector <= 1935959153)
      {
        if (mSelector != 1902539642)
        {
          if (mSelector != 1919773028)
          {
            int v12 = 1935763060;
            goto LABEL_31;
          }
          return v11;
        }
        return 4;
      }
      switch(mSelector)
      {
        case 1935959154:
          return 4;
        case 1936482681:
          uint64_t v23 = 0;
          uint64_t v24 = &v23;
          uint64_t v25 = 0x2000000000;
          int v26 = 0;
          v19[0] = MEMORY[0x1E4F143A8];
          v19[1] = 0x40000000;
          v19[2] = ___ZNK14HALS_IOContext19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4;
          v19[3] = &unk_1E6233FC8;
          v19[4] = &v23;
          v19[5] = this;
          v19[6] = a3;
          int v16 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v16, (uint64_t)v19);
          uint64_t v11 = (16 * *((_DWORD *)v24 + 6)) | 8u;
          break;
        case 1937077093:
          uint64_t v23 = 0;
          uint64_t v24 = &v23;
          uint64_t v25 = 0x2000000000;
          int v26 = 0;
          v20[0] = MEMORY[0x1E4F143A8];
          v20[1] = 0x40000000;
          _DWORD v20[2] = ___ZNK14HALS_IOContext19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3;
          v20[3] = &unk_1E6233FA0;
          v20[4] = &v23;
          v20[5] = this;
          v20[6] = a3;
          uint64_t v14 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v14, (uint64_t)v20);
          uint64_t v11 = (4 * *((_DWORD *)v24 + 6) + 12);
          break;
        default:
          goto LABEL_41;
      }
LABEL_39:
      _Block_object_dispose(&v23, 8);
      return v11;
    }
    if (mSelector <= 1852012898)
    {
      if (mSelector == 1752135523) {
        return 4;
      }
      int v12 = 1836282994;
    }
    else
    {
      if (mSelector == 1852012899) {
        return 4;
      }
      if (mSelector == 1869838183) {
        return v11;
      }
      int v12 = 1870030194;
    }
  }
LABEL_31:
  if (mSelector == v12) {
    return 4;
  }
LABEL_41:

  return HALS_Object::GetPropertyDataSize(v8, v9, (int *)a3);
}

void sub_1BADF8090(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14HALS_IOContext19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void, BOOL))(**(void **)(a1[5] + 96) + 32))(*(void *)(a1[5] + 96), *(_DWORD *)(a1[6] + 4) == 1768845428);
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = result;
  return result;
}

void sub_1BADF8120(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK14HALS_IOContext19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void, BOOL))(**(void **)(a1[5] + 96) + 32))(*(void *)(a1[5] + 96), *(_DWORD *)(a1[6] + 4) == 1768845428);
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = result;
  return result;
}

void sub_1BADF81AC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK14HALS_IOContext19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void, BOOL))(**(void **)(a1[5] + 96) + 32))(*(void *)(a1[5] + 96), *(_DWORD *)(a1[6] + 4) == 1768845428);
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = result;
  return result;
}

void sub_1BADF8238(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK14HALS_IOContext19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void, BOOL))(**(void **)(a1[5] + 96) + 32))(*(void *)(a1[5] + 96), *(_DWORD *)(a1[6] + 4) == 1768845428);
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = result;
  return result;
}

void sub_1BADF82C4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_IOContext::IsPropertySettable(uint64_t a1, uint64_t a2, int *a3)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  int v5 = *a3;
  uint64_t result = 1;
  if (*a3 <= 1752135522)
  {
    if (v5 > 1718839673)
    {
      if (v5 <= 1735354733)
      {
        if (v5 == 1718839674) {
          return result;
        }
        int v7 = 1718843939;
LABEL_32:
        if (v5 == v7) {
          return 0;
        }
        goto LABEL_35;
      }
      if (v5 == 1735354734 || v5 == 1735551332) {
        return 0;
      }
      int v8 = 1735750501;
    }
    else if (v5 <= 1634300530)
    {
      if (v5 == 1633906541) {
        return result;
      }
      int v8 = 1633970532;
    }
    else
    {
      if (v5 == 1634300531) {
        return result;
      }
      if (v5 == 1634955892) {
        return 0;
      }
      int v8 = 1684108387;
    }
  }
  else if (v5 <= 1902539641)
  {
    if (v5 > 1852012898)
    {
      if (v5 == 1852012899 || v5 == 1869838183) {
        return result;
      }
      int v7 = 1870030194;
      goto LABEL_32;
    }
    if (v5 == 1752135523) {
      return result;
    }
    int v8 = 1836282994;
  }
  else
  {
    if (v5 <= 1935959153)
    {
      if (v5 == 1902539642 || v5 == 1919773028) {
        return result;
      }
      int v7 = 1935763060;
      goto LABEL_32;
    }
    if (v5 == 1935959154) {
      return result;
    }
    if (v5 == 1936482681) {
      return 0;
    }
    int v8 = 1937077093;
  }
  if (v5 == v8) {
    return result;
  }
LABEL_35:

  return HALS_Object::IsPropertySettable(1, v4, a3);
}

BOOL HALS_IOContext::HasProperty(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = *a3;
  BOOL result = 1;
  if (*a3 > 1836282993)
  {
    if (v3 > 1902539641)
    {
      if (v3 <= 1935959153)
      {
        if (v3 == 1902539642 || v3 == 1919773028) {
          return result;
        }
        int v5 = 1935763060;
      }
      else if (v3 > 1937007733)
      {
        if (v3 == 1937007734) {
          return result;
        }
        int v5 = 1937077093;
      }
      else
      {
        if (v3 == 1935959154) {
          return result;
        }
        int v5 = 1936482681;
      }
LABEL_38:
      if (v3 == v5) {
        goto LABEL_39;
      }
      return 0;
    }
    if (v3 > 1869838182)
    {
      if (v3 == 1869838183 || v3 == 1870030194) {
        return result;
      }
      int v6 = 1870098020;
    }
    else
    {
      if (v3 == 1836282994 || v3 == 1852012899) {
        return result;
      }
      int v6 = 1869638759;
    }
LABEL_34:
    if (v3 == v6) {
      return result;
    }
    return 0;
  }
  if (v3 <= 1684108386)
  {
    if (v3 > 1634955891)
    {
      if (v3 == 1634955892 || v3 == 1650682995) {
        return result;
      }
      int v6 = 1668047219;
    }
    else
    {
      if (v3 == 1633906541 || v3 == 1633970532) {
        return result;
      }
      int v6 = 1634300531;
    }
    goto LABEL_34;
  }
  if (v3 <= 1735354733)
  {
    if (v3 == 1684108387 || v3 == 1718839674) {
      return result;
    }
    int v6 = 1718843939;
    goto LABEL_34;
  }
  if (v3 <= 1735750500)
  {
    if (v3 == 1735354734) {
      return result;
    }
    int v5 = 1735551332;
    goto LABEL_38;
  }
  if (v3 != 1735750501)
  {
    int v6 = 1752135523;
    goto LABEL_34;
  }
LABEL_39:
  int v7 = a3[1];
  return v7 == 1768845428 || v7 == 1869968496;
}

uint64_t HALS_IOContext::GetMIGDispatchQueue(HALS_IOContext *this)
{
  return *((void *)this + 7);
}

{
  return *((void *)this + 7);
}

void HALS_IOContext::_Deactivate(HALS_IOContext *this)
{
  (*(void (**)(void))(**((void **)this + 12) + 24))(*((void *)this + 12));
  uint64_t v2 = (HALS_IOProc *)*((void *)this + 14);
  if (v2)
  {
    HALS_IOProc::~HALS_IOProc(v2);
    MEMORY[0x1C1859840]();
  }
  *((void *)this + 14) = 0;
  free(*((void **)this + 15));
  *((void *)this + 15) = 0;
  free(*((void **)this + 16));
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  int v3 = (std::__shared_weak_count *)*((void *)this + 11);
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *((_DWORD *)this + 2) = 0;
}

void HALS_IOContext::~HALS_IOContext(HALS_IOContext *this)
{
  HALS_IOContext::~HALS_IOContext(this);

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v2;
  HALB_Mutex *v3;
  AMCP::Utility::Dispatch_Queue *v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t vars8;

  *(void *)this = &unk_1F14779E0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 13);
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  int v3 = (HALB_Mutex *)*((void *)this + 6);
  if (v3)
  {
    HALB_Mutex::~HALB_Mutex(v3);
    MEMORY[0x1C1859840]();
  }
  uint64_t v4 = (AMCP::Utility::Dispatch_Queue *)*((void *)this + 7);
  if (v4)
  {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v4);
    MEMORY[0x1C1859840]();
  }
  int v5 = *((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v5) {
    std::default_delete<HALS_IOContext::OverloadReporter>::operator()[abi:ne180100](v5);
  }
  std::unique_ptr<HALS_IOContext::TimeCodeIssueReporter>::reset[abi:ne180100]((uint64_t **)this + 25);
  std::unique_ptr<HALS_IOContext::IntervalReporter>::reset[abi:ne180100]((uint64_t *)this + 24);
  int v6 = (void *)*((void *)this + 20);
  if (v6)
  {
    *((void *)this + 21) = v6;
    operator delete(v6);
  }
  int v7 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  int v8 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v9) {
    MEMORY[0x1C1859840](v9, 0x1000C40B62306B4);
  }

  HALS_Object::~HALS_Object(this);
}

void std::default_delete<HALS_IOContext::OverloadReporter>::operator()[abi:ne180100](uint64_t a1)
{
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)(a1 + 16), 0);
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    std::default_delete<OverloadDescription>::operator()[abi:ne180100](v2);
  }

  JUMPOUT(0x1C1859840);
}

uint64_t **std::unique_ptr<HALS_IOContext::TimeCodeIssueReporter>::reset[abi:ne180100](uint64_t **result)
{
  uint64_t v1 = *result;
  *BOOL result = 0;
  if (v1)
  {
    std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v1, 0);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

uint64_t *std::unique_ptr<HALS_IOContext::IntervalReporter>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *BOOL result = 0;
  if (v1)
  {
    std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)(v1 + 64), 0);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

void std::default_delete<OverloadDescription>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALS_IOContext_Legacy_Impl>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<HALS_IOContext_Legacy_Impl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1477F60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALS_IOContext_Legacy_Impl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1477F60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_IOContext_MCP_Impl>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<HALS_IOContext_MCP_Impl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1477F10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALS_IOContext_MCP_Impl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1477F10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t ___ZNK14HALS_IOContext16GetNumberStreamsEb_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 40) + 96) + 32))(*(void *)(*(void *)(a1 + 40) + 96), *(unsigned __int8 *)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BADF8C64(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK14HALS_IOContext20GetStreamInfoAtIndexEbjR25AudioIOContext_StreamInfo_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(**(void **)(*(void *)(a1 + 32) + 96) + 72))(*(void *)(*(void *)(a1 + 32) + 96), *(unsigned __int8 *)(a1 + 52), *(unsigned int *)(a1 + 48), *(void *)(a1 + 40));
}

void sub_1BADF8CD0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void *std::__function::__func<HALS_IOContext::Server_Internal_CreateIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0,std::allocator<HALS_IOContext::Server_Internal_CreateIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext::Server_Internal_CreateIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0,std::allocator<HALS_IOContext::Server_Internal_CreateIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN14HALS_IOContext30Server_Internal_CreateIOProcIDEPFijPK14AudioTimeStampPK15AudioBufferListS2_PS3_S2_PvES7_E3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOContext::Server_Internal_CreateIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0,std::allocator<HALS_IOContext::Server_Internal_CreateIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(*(void *)(a1 + 8) + 112)) {
    operator new();
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v2 = 136315394;
    int v3 = "HALS_IOContext.cpp";
    __int16 v4 = 1024;
    int v5 = 353;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::Server_Internal_CreateIOProcID: only one IOProc at a time is supported", (uint8_t *)&v2, 0x12u);
  }
  exception = __cxa_allocate_exception(0x10uLL);
  *(void *)exception = off_1F148A5D8;
  exception[2] = 1852797029;
}

void sub_1BADF8F38(_Unwind_Exception *exception_object)
{
}

void sub_1BADF8F40(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __int16 v4 = *(HALS_IOProc **)(v3 + 112);
    if (v4)
    {
      HALS_IOProc::~HALS_IOProc(v4);
      MEMORY[0x1C1859840]();
    }
    *(void *)(v3 + 112) = 0;
    free(*(void **)(v3 + 120));
    *(void *)(v3 + 120) = 0;
    free(*(void **)(v3 + 128));
    *(void *)(v3 + 128) = 0;
    *(void *)(v3 + 136) = 0;
    **(void **)(v2 + 16) = 0;
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1BADF8F9C(_Unwind_Exception *a1)
{
}

void sub_1BADF8FA8(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BADF8FB0);
  }
  __clang_call_terminate(a1);
}

__n128 std::__function::__func<HALS_IOContext::Server_Internal_CreateIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0,std::allocator<HALS_IOContext::Server_Internal_CreateIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1477B60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext::Server_Internal_CreateIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0,std::allocator<HALS_IOContext::Server_Internal_CreateIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F1477B60;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<HALS_IOContext::Server_Internal_CreateIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0,std::allocator<HALS_IOContext::Server_Internal_CreateIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock(dispatch_queue_s *,void({block_pointer})(AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*))::$_0,std::allocator<HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock(dispatch_queue_s *,void({block_pointer})(AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*))::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock(dispatch_queue_s *,void({block_pointer})(AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*))::$_0,std::allocator<HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock(dispatch_queue_s *,void({block_pointer})(AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*))::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN14HALS_IOContext39Server_Internal_CreateIOProcIDWithBlockEP16dispatch_queue_sU13block_pointerFvPK14AudioTimeStampPK15AudioBufferListS4_PS5_S4_EE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock(dispatch_queue_s *,void({block_pointer})(AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*))::$_0,std::allocator<HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock(dispatch_queue_s *,void({block_pointer})(AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*))::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(*(void *)(a1 + 8) + 112)) {
    operator new();
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v2 = 136315394;
    uint64_t v3 = "HALS_IOContext.cpp";
    __int16 v4 = 1024;
    int v5 = 393;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock: only one IOProc at a time is supported", (uint8_t *)&v2, 0x12u);
  }
  exception = __cxa_allocate_exception(0x10uLL);
  *(void *)exception = off_1F148A5D8;
  exception[2] = 1852797029;
}

void sub_1BADF92CC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    MEMORY[0x1C1859840](v3, 0x10A0C406C73CFA5);
    __cxa_begin_catch(exception_object);
    uint64_t v6 = *(HALS_IOProc **)(v4 + 112);
    if (v6)
    {
      HALS_IOProc::~HALS_IOProc(v6);
      MEMORY[0x1C1859840]();
    }
    *(void *)(v4 + 112) = 0;
    free(*(void **)(v4 + 120));
    *(void *)(v4 + 120) = 0;
    free(*(void **)(v4 + 128));
    *(void *)(v4 + 128) = 0;
    *(void *)(v4 + 136) = 0;
    **(void **)(v2 + 16) = 0;
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1BADF9354(_Unwind_Exception *a1)
{
}

void sub_1BADF9360(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BADF9368);
  }
  __clang_call_terminate(a1);
}

__n128 std::__function::__func<HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock(dispatch_queue_s *,void({block_pointer})(AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*))::$_0,std::allocator<HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock(dispatch_queue_s *,void({block_pointer})(AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*))::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1477BE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock(dispatch_queue_s *,void({block_pointer})(AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*))::$_0,std::allocator<HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock(dispatch_queue_s *,void({block_pointer})(AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*))::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F1477BE0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock(dispatch_queue_s *,void({block_pointer})(AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*))::$_0,std::allocator<HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock(dispatch_queue_s *,void({block_pointer})(AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*))::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<HALS_IOContext::Server_Internal_DestroyIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext::Server_Internal_DestroyIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext::Server_Internal_DestroyIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext::Server_Internal_DestroyIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN14HALS_IOContext31Server_Internal_DestroyIOProcIDEPFijPK14AudioTimeStampPK15AudioBufferListS2_PS3_S2_PvEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOContext::Server_Internal_DestroyIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext::Server_Internal_DestroyIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (*(void *)(v1 + 112) && *(void *)(v1 + 136) == *(void *)(a1 + 16))
  {
    (*(void (**)(void))(**(void **)(v1 + 96) + 496))(*(void *)(v1 + 96));
    uint64_t v2 = *(HALS_IOProc **)(v1 + 112);
    if (v2)
    {
      HALS_IOProc::~HALS_IOProc(v2);
      MEMORY[0x1C1859840]();
    }
    *(void *)(v1 + 112) = 0;
    free(*(void **)(v1 + 120));
    *(void *)(v1 + 120) = 0;
    free(*(void **)(v1 + 128));
    *(void *)(v1 + 128) = 0;
    *(void *)(v1 + 136) = 0;
  }
}

void sub_1BADF9508(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

__n128 std::__function::__func<HALS_IOContext::Server_Internal_DestroyIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext::Server_Internal_DestroyIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1477C60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext::Server_Internal_DestroyIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext::Server_Internal_DestroyIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F1477C60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<HALS_IOContext::Server_Internal_DestroyIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext::Server_Internal_DestroyIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<HALS_IOContext::Server_Internal_AddIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0,std::allocator<HALS_IOContext::Server_Internal_AddIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext::Server_Internal_AddIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0,std::allocator<HALS_IOContext::Server_Internal_AddIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN14HALS_IOContext25Server_Internal_AddIOProcEPFijPK14AudioTimeStampPK15AudioBufferListS2_PS3_S2_PvES7_E3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOContext::Server_Internal_AddIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0,std::allocator<HALS_IOContext::Server_Internal_AddIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(*(void *)(a1 + 8) + 112)) {
    operator new();
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v2 = 136315394;
    uint64_t v3 = "HALS_IOContext.cpp";
    __int16 v4 = 1024;
    int v5 = 461;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext::Server_Internal_AddIOProc: only one IOProc at a time is supported", (uint8_t *)&v2, 0x12u);
  }
  exception = __cxa_allocate_exception(0x10uLL);
  *(void *)exception = off_1F148A5D8;
  exception[2] = 1852797029;
}

void sub_1BADF97FC(_Unwind_Exception *exception_object)
{
}

void sub_1BADF9804(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    uint64_t v3 = *(HALS_IOProc **)(v2 + 112);
    if (v3)
    {
      HALS_IOProc::~HALS_IOProc(v3);
      MEMORY[0x1C1859840]();
    }
    *(void *)(v2 + 112) = 0;
    free(*(void **)(v2 + 120));
    *(void *)(v2 + 120) = 0;
    free(*(void **)(v2 + 128));
    *(void *)(v2 + 128) = 0;
    *(void *)(v2 + 136) = 0;
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1BADF9858(_Unwind_Exception *a1)
{
}

void sub_1BADF9864(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BADF986CLL);
  }
  __clang_call_terminate(a1);
}

__n128 std::__function::__func<HALS_IOContext::Server_Internal_AddIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0,std::allocator<HALS_IOContext::Server_Internal_AddIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1477CE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext::Server_Internal_AddIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0,std::allocator<HALS_IOContext::Server_Internal_AddIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F1477CE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<HALS_IOContext::Server_Internal_AddIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0,std::allocator<HALS_IOContext::Server_Internal_AddIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *),void *)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<HALS_IOContext::Server_Internal_RemoveIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext::Server_Internal_RemoveIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext::Server_Internal_RemoveIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext::Server_Internal_RemoveIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN14HALS_IOContext28Server_Internal_RemoveIOProcEPFijPK14AudioTimeStampPK15AudioBufferListS2_PS3_S2_PvEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOContext::Server_Internal_RemoveIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext::Server_Internal_RemoveIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (*(void *)(v1 + 112) && *(void *)(v1 + 136) == *(void *)(a1 + 16))
  {
    (*(void (**)(void))(**(void **)(v1 + 96) + 496))(*(void *)(v1 + 96));
    uint64_t v2 = *(HALS_IOProc **)(v1 + 112);
    if (v2)
    {
      HALS_IOProc::~HALS_IOProc(v2);
      MEMORY[0x1C1859840]();
    }
    *(void *)(v1 + 112) = 0;
    free(*(void **)(v1 + 120));
    *(void *)(v1 + 120) = 0;
    free(*(void **)(v1 + 128));
    *(void *)(v1 + 128) = 0;
    *(void *)(v1 + 136) = 0;
  }
}

void sub_1BADF9A0C(void *a1)
{
}

void sub_1BADF9A18(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

__n128 std::__function::__func<HALS_IOContext::Server_Internal_RemoveIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext::Server_Internal_RemoveIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1477D60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext::Server_Internal_RemoveIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext::Server_Internal_RemoveIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F1477D60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<HALS_IOContext::Server_Internal_RemoveIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext::Server_Internal_RemoveIOProc(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(void)>::~__func()
{
}

UInt64 HALS_IOContext::Server_Internal_StartIOProcID(UInt64 this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), AudioTimeStamp *a3, uint64_t a4)
{
  UInt64 v7 = this;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a3 && (a4 & 8) != 0)
  {
    (*(void (**)(void, AudioTimeStamp *, uint64_t))(**(void **)(this + 96) + 480))(*(void *)(this + 96), a3, a4);
    UInt64 mHostTime = a3->mHostTime;
    this = mach_absolute_time();
    if (mHostTime > this)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        UInt64 v9 = a3->mHostTime;
        int v14 = 136315906;
        __int16 v15 = "HALS_IOContext.cpp";
        __int16 v16 = 1024;
        int v17 = 526;
        __int16 v18 = 2048;
        UInt64 v19 = v9;
        __int16 v20 = 2048;
        uint64_t v21 = mach_absolute_time();
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContext::Server_Internal_StartIOProcID: Attempting to start in the past with a start time that is in the future. Requested time: %llu  Current time: %llu", (uint8_t *)&v14, 0x26u);
      }
      this = mach_absolute_time();
      a3->UInt64 mHostTime = this;
    }
    if ((a3->mFlags & 2) == 0)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_19;
      }
      int v14 = 136315394;
      __int16 v15 = "HALS_IOContext.cpp";
      __int16 v16 = 1024;
      int v17 = 533;
      uint64_t v11 = MEMORY[0x1E4F14500];
      int v12 = "%25s:%-5d  HALS_IOContext::Server_Internal_StartIOProcID: Invalid start time";
      goto LABEL_18;
    }
  }
  if (a2)
  {
    uint64_t v10 = *(void *)(v7 + 112);
    if (v10)
    {
      if (*(int (**)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(v7 + 136) == a2)
      {
        if (*(unsigned char *)(v10 + 32)) {
          return this;
        }
        return (*(uint64_t (**)(void, int (*)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), AudioTimeStamp *, uint64_t))(**(void **)(v7 + 96) + 488))(*(void *)(v7 + 96), a2, a3, a4);
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
LABEL_19:
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = off_1F148A5D8;
        exception[2] = 1852797029;
      }
      int v14 = 136315394;
      __int16 v15 = "HALS_IOContext.cpp";
      __int16 v16 = 1024;
      int v17 = 539;
      uint64_t v11 = MEMORY[0x1E4F14500];
      int v12 = "%25s:%-5d  HALS_IOContext::Server_Internal_StartIOProcID: failed to start because the IOProcID wasn't nullpt"
            "r or wasn't registered";
LABEL_18:
      _os_log_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v14, 0x12u);
      goto LABEL_19;
    }
  }
  return (*(uint64_t (**)(void, int (*)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), AudioTimeStamp *, uint64_t))(**(void **)(v7 + 96) + 488))(*(void *)(v7 + 96), a2, a3, a4);
}

void sub_1BADF9D80()
{
}

void sub_1BADF9DF8(_Unwind_Exception *a1)
{
}

void sub_1BADF9E04(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BADF9E0CLL);
  }
  __clang_call_terminate(a1);
}

uint64_t ___ZN14HALS_IOContext12PowerChangedEN4AMCP11Power_StateE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 32) + 96) + 504))(*(void *)(*(void *)(a1 + 32) + 96), *(unsigned int *)(a1 + 40));
}

void sub_1BADF9E6C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZN14HALS_IOContext16PowerHintChangedEj_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 40) + 96) + 512))(*(void *)(*(void *)(a1 + 40) + 96), *(unsigned int *)(a1 + 48));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BADF9EEC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZN14HALS_IOContext24SleepingIsAllowedChangedEb_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 32) + 96) + 520))(*(void *)(*(void *)(a1 + 32) + 96), *(unsigned __int8 *)(a1 + 40));
}

void HALS_IOContext::OverloadReporter::SendAnyPendingOverloadReports(HALS_IOContext::OverloadReporter *this)
{
  if (*(unsigned char *)this)
  {
    if (g_static_start_options == 1) {
      goto LABEL_19;
    }
    goto LABEL_8;
  }
  if (*((unsigned char *)this + 1)) {
    BOOL v2 = g_static_start_options == 1;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
LABEL_8:
    uint64_t v3 = (long long *)*((void *)this + 1);
    long long v29 = v3[2];
    long long v30 = v3[3];
    uint64_t v31 = *((void *)v3 + 8);
    long long v27 = *v3;
    long long v28 = v3[1];
    if (*((char *)v3 + 95) < 0) {
      std::string::__init_copy_ctor_external(&v32, *((const std::string::value_type **)v3 + 9), *((void *)v3 + 10));
    }
    else {
      std::string v32 = *(std::string *)((unsigned char *)v3 + 3);
    }
    long long v4 = v3[15];
    long long v41 = v3[14];
    long long v42 = v4;
    long long v43 = v3[16];
    long long v5 = v3[11];
    long long v37 = v3[10];
    long long v38 = v5;
    long long v6 = v3[13];
    long long v39 = v3[12];
    long long v40 = v6;
    long long v7 = v3[7];
    long long v33 = v3[6];
    long long v34 = v7;
    long long v8 = v3[9];
    long long v35 = v3[8];
    long long v36 = v8;
    long long v46 = v29;
    long long v47 = v30;
    uint64_t v48 = v31;
    long long v44 = v27;
    long long v45 = v28;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    {
      int v14 = (void *)v32.__r_.__value_.__r.__words[0];
      std::string::__init_copy_ctor_external(&__p, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
      long long v58 = v41;
      long long v59 = v42;
      long long v60 = v43;
      long long v54 = v37;
      long long v55 = v38;
      long long v56 = v39;
      long long v57 = v40;
      long long v50 = v33;
      long long v51 = v34;
      long long v52 = v35;
      long long v53 = v36;
      operator delete(v14);
    }
    else
    {
      std::string __p = v32;
      long long v9 = v3[15];
      long long v58 = v3[14];
      long long v59 = v9;
      long long v60 = v3[16];
      long long v10 = v3[11];
      long long v54 = v3[10];
      long long v55 = v10;
      long long v11 = v3[13];
      long long v56 = v3[12];
      long long v57 = v11;
      long long v12 = v3[7];
      long long v50 = v3[6];
      long long v51 = v12;
      long long v13 = v3[9];
      long long v52 = v3[8];
      long long v53 = v13;
    }
    __int16 v15 = (caulk::concurrent::messenger *)*((void *)this + 2);
    uint64_t v16 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 296, 8);
    *(_DWORD *)(v16 + 16) = 0;
    *(void *)uint64_t v16 = &unk_1F1477E38;
    *(void *)(v16 + 8) = 0;
    long long v63 = v46;
    long long v64 = v47;
    uint64_t v65 = v48;
    long long v61 = v44;
    long long v62 = v45;
    int v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(v66, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      v66[0] = __p;
    }
    long long v18 = v61;
    *(_OWORD *)(v16 + 40) = v62;
    long long v19 = v64;
    *(_OWORD *)(v16 + 56) = v63;
    *(_OWORD *)(v16 + 72) = v19;
    *(void *)(v16 + 88) = v65;
    *(_OWORD *)(v16 + 24) = v18;
    *(std::string *)(v16 + 96) = v66[0];
    long long v20 = v50;
    long long v21 = v51;
    long long v22 = v53;
    *(_OWORD *)(v16 + 152) = v52;
    *(_OWORD *)(v16 + 136) = v21;
    *(_OWORD *)(v16 + 120) = v20;
    long long v23 = v57;
    *(_OWORD *)(v16 + 216) = v56;
    long long v24 = v54;
    *(_OWORD *)(v16 + 200) = v55;
    *(_OWORD *)(v16 + 184) = v24;
    *(_OWORD *)(v16 + 168) = v22;
    long long v25 = v58;
    long long v26 = v60;
    *(_OWORD *)(v16 + 264) = v59;
    *(_OWORD *)(v16 + 280) = v26;
    *(_OWORD *)(v16 + 248) = v25;
    *(_OWORD *)(v16 + 232) = v23;
    *(void *)uint64_t v16 = &unk_1F1477DE0;
    caulk::concurrent::messenger::enqueue(v15, (caulk::concurrent::message *)v16);
    if (v17 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
LABEL_19:
  *(_WORD *)this = 0;
}

void sub_1BADFA254(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  caulk::concurrent::message::~message(v57);
  operator delete(__p);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BADFA234);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext::OverloadReporter::SendAnyPendingOverloadReports(void)::$_0,HALS_OverloadMessage &>::perform(uint64_t a1)
{
  uint64_t v1 = a1;
  HALS_OverloadMessage::perform((HALS_OverloadMessage *)(a1 + 24));
}

void sub_1BADFA2D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<HALS_IOContext::OverloadReporter::SendAnyPendingOverloadReports(void)::$_0,HALS_OverloadMessage &>::rt_cleanup::~rt_cleanup((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *caulk::concurrent::details::rt_message_call<HALS_IOContext::OverloadReporter::SendAnyPendingOverloadReports(void)::$_0,HALS_OverloadMessage &>::rt_cleanup::~rt_cleanup(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *(void *)uint64_t v2 = &unk_1F1477E38;
  if (*(char *)(v2 + 119) < 0) {
    operator delete(*(void **)(v2 + 96));
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)v2);
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 296, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext::OverloadReporter::SendAnyPendingOverloadReports(void)::$_0,HALS_OverloadMessage &>::~rt_message_call(void **this)
{
  *this = &unk_1F1477E38;
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t vars8;

  *this = &unk_1F1477E38;
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)this);
}

void caulk::concurrent::details::message_call<HALS_IOContext::OverloadReporter::SendAnyPendingOverloadReports(void)::$_0,HALS_OverloadMessage &>::perform(uint64_t a1)
{
}

void caulk::concurrent::details::message_call<HALS_IOContext::OverloadReporter::SendAnyPendingOverloadReports(void)::$_0,HALS_OverloadMessage &>::~message_call(void **this)
{
  *this = &unk_1F1477E38;
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t vars8;

  *this = &unk_1F1477E38;
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)this);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext::IntervalReporter::SendIntervals(unsigned int)::$_0,HALS_IntervalMessage &>::perform(uint64_t a1)
{
  long long v34 = (caulk::concurrent::message *)a1;
  uint64_t v3 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 88));
  if (v3)
  {
    HALS_IOContext::GetIssueReporters((HALS_IOContext *)&v41, (uint64_t)v3);
    long long v39 = 0;
    uint64_t v40 = 0;
    long long v38 = (uint64_t *)&v39;
    if (*(unsigned char *)(a1 + 32) && *(unsigned char *)(a1 + 48))
    {
      unint64_t v4 = *(void *)(a1 + 24);
      unint64_t v5 = *(void *)(a1 + 40);
      uint64_t v6 = __udivti3();
      std::to_string(&v37, v6);
      std::string::basic_string[abi:ne180100]<0>(__p, "hardwareStartBegin_UptimeNs");
      long long v43 = __p;
      long long v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v38, __p, (_OWORD **)&v43);
      long long v8 = (void **)v7 + 7;
      if (*((char *)v7 + 79) < 0) {
        operator delete(*v8);
      }
      *(std::string *)long long v8 = v37;
      *((unsigned char *)&v37.__r_.__value_.__s + 23) = 0;
      v37.__r_.__value_.__s.__data_[0] = 0;
      if (v36 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v37.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v9 = __udivti3();
      std::to_string(&v37, v9);
      std::string::basic_string[abi:ne180100]<0>(__p, "hardwareStartEnd_UptimeNs");
      long long v43 = __p;
      long long v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v38, __p, (_OWORD **)&v43);
      long long v11 = (void **)v10 + 7;
      if (*((char *)v10 + 79) < 0) {
        operator delete(*v11);
      }
      *(std::string *)long long v11 = v37;
      *((unsigned char *)&v37.__r_.__value_.__s + 23) = 0;
      v37.__r_.__value_.__s.__data_[0] = 0;
      if (v36 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v37.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v12 = __udivti3();
      if (v5 < v4) {
        uint64_t v12 = -v12;
      }
      std::to_string(&v37, v12);
      std::string::basic_string[abi:ne180100]<0>(__p, "hardwareStartDuration_Ns");
      long long v43 = __p;
      long long v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v38, __p, (_OWORD **)&v43);
      int v14 = (void **)v13 + 7;
      if (*((char *)v13 + 79) < 0) {
        operator delete(*v14);
      }
      *(std::string *)int v14 = v37;
      *((unsigned char *)&v37.__r_.__value_.__s + 23) = 0;
      v37.__r_.__value_.__s.__data_[0] = 0;
      if (v36 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v37.__r_.__value_.__l.__data_);
        }
      }
    }
    if (*(unsigned char *)(a1 + 64) && *(unsigned char *)(a1 + 80))
    {
      unint64_t v15 = *(void *)(a1 + 56);
      unint64_t v16 = *(void *)(a1 + 72);
      uint64_t v17 = __udivti3();
      std::to_string(&v37, v17);
      std::string::basic_string[abi:ne180100]<0>(__p, "clientOutputSilentBegin_UptimeNs");
      long long v43 = __p;
      long long v18 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v38, __p, (_OWORD **)&v43);
      long long v19 = (void **)v18 + 7;
      if (*((char *)v18 + 79) < 0) {
        operator delete(*v19);
      }
      *(std::string *)long long v19 = v37;
      *((unsigned char *)&v37.__r_.__value_.__s + 23) = 0;
      v37.__r_.__value_.__s.__data_[0] = 0;
      if (v36 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v37.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v20 = __udivti3();
      std::to_string(&v37, v20);
      std::string::basic_string[abi:ne180100]<0>(__p, "clientOutputSilentEnd_UptimeNs");
      long long v43 = __p;
      long long v21 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v38, __p, (_OWORD **)&v43);
      long long v22 = (void **)v21 + 7;
      if (*((char *)v21 + 79) < 0) {
        operator delete(*v22);
      }
      *(std::string *)long long v22 = v37;
      *((unsigned char *)&v37.__r_.__value_.__s + 23) = 0;
      v37.__r_.__value_.__s.__data_[0] = 0;
      if (v36 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v37.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v23 = __udivti3();
      if (v16 < v15) {
        uint64_t v23 = -v23;
      }
      std::to_string(&v37, v23);
      std::string::basic_string[abi:ne180100]<0>(__p, "clientOutputSilentDuration_Ns");
      long long v43 = __p;
      long long v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v38, __p, (_OWORD **)&v43);
      long long v25 = (void **)v24 + 7;
      if (*((char *)v24 + 79) < 0) {
        operator delete(*v25);
      }
      *(std::string *)long long v25 = v37;
      *((unsigned char *)&v37.__r_.__value_.__s + 23) = 0;
      v37.__r_.__value_.__s.__data_[0] = 0;
      if (v36 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v37.__r_.__value_.__l.__data_);
        }
      }
    }
    if (v40)
    {
      std::to_string(&v37, 1);
      std::string::basic_string[abi:ne180100]<0>(__p, "AudioAnalyticsRetainMessage");
      long long v43 = __p;
      long long v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v38, __p, (_OWORD **)&v43);
      long long v27 = (void **)v26 + 7;
      if (*((char *)v26 + 79) < 0) {
        operator delete(*v27);
      }
      *(std::string *)long long v27 = v37;
      *((unsigned char *)&v37.__r_.__value_.__s + 23) = 0;
      v37.__r_.__value_.__s.__data_[0] = 0;
      if (v36 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v37.__r_.__value_.__l.__data_);
        }
      }
      applesauce::CF::make_DictionaryRef<std::string,std::string>((CFDictionaryRef *)&v37, (const UInt8 **)&v38);
      long long v28 = v41;
      long long v29 = v42;
      long long v30 = (const void *)v37.__r_.__value_.__r.__words[0];
      if (v41 != v42)
      {
        uint64_t v31 = v41;
        do
        {
          uint64_t v32 = *v31;
          if (AudioStatisticsLibraryLoader(void)::once != -1) {
            dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_6803);
          }
          if (AudioStatisticsLibraryLoader(void)::libSym) {
            AudioStatisticsLibraryLoader(void)::libSym(v32, v30, 536870919, 5);
          }
          ++v31;
        }
        while (v31 != v29);
      }
      if (v30) {
        CFRelease(v30);
      }
    }
    else
    {
      long long v28 = v41;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v39);
    if (v28) {
      operator delete(v28);
    }
  }
  HALS_ObjectMap::ReleaseObject(v3, v2);
  return caulk::concurrent::details::rt_message_call<HALS_IOContext::IntervalReporter::SendIntervals::$_0,HALS_IntervalMessage &>::rt_cleanup::~rt_cleanup(&v34);
}

void sub_1BADFAACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,void *a25)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a23);
  if (a25) {
    operator delete(a25);
  }
  HALS_ObjectMap::ReleaseObject(v25, v27);
  caulk::concurrent::details::rt_message_call<HALS_IOContext::IntervalReporter::SendIntervals::$_0,HALS_IntervalMessage &>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext::IntervalReporter::SendIntervals(unsigned int)::$_0,HALS_IntervalMessage &>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 96, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext::IntervalReporter::SendIntervals(unsigned int)::$_0,HALS_IntervalMessage &>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext::TimeCodeIssueReporter::SendTimeCodeIssue(unsigned int,unsigned int)::$_0,HALS_TimeCodeIssueMessage &>::perform(caulk::concurrent::message *a1)
{
  uint64_t v20 = a1;
  uint64_t v3 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)a1 + 7));
  if (v3)
  {
    HALS_IOContext::GetIssueReporters((HALS_IOContext *)&v26, (uint64_t)v3);
    v25[0] = 0;
    v25[1] = 0;
    long long v24 = (uint64_t *)v25;
    memset(&__str, 0, sizeof(__str));
    std::string::basic_string[abi:ne180100]<0>(__p, "issue_type");
    long long v28 = __p;
    unint64_t v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v24, __p, (_OWORD **)&v28);
    if (*((char *)v4 + 79) < 0)
    {
      *((void *)v4 + 8) = 13;
      unint64_t v5 = (char *)*((void *)v4 + 7);
    }
    else
    {
      unint64_t v5 = (char *)v4 + 56;
      *((unsigned char *)v4 + 79) = 13;
    }
    strcpy(v5, "timecodeIssue");
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    int v6 = *((_DWORD *)a1 + 6);
    if ((v6 & 2) != 0)
    {
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
      }
      if (size) {
        long long v8 = ",HostTimeOutOfBounds";
      }
      else {
        long long v8 = "HostTimeOutOfBounds";
      }
      if (size) {
        std::string::size_type v9 = 20;
      }
      else {
        std::string::size_type v9 = 19;
      }
      std::string::append(&__str, v8, v9);
      int v6 = *((_DWORD *)a1 + 6);
    }
    if ((v6 & 4) != 0)
    {
      std::string::size_type v10 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v10 = __str.__r_.__value_.__l.__size_;
      }
      if (v10) {
        long long v11 = ",TimeStampOutOfLine";
      }
      else {
        long long v11 = "TimeStampOutOfLine";
      }
      if (v10) {
        std::string::size_type v12 = 19;
      }
      else {
        std::string::size_type v12 = 18;
      }
      std::string::append(&__str, v11, v12);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "clockResetReason");
    long long v28 = __p;
    long long v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v24, __p, (_OWORD **)&v28);
    std::string::operator=((std::string *)((char *)v13 + 56), &__str);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    applesauce::CF::make_DictionaryRef<std::string,std::string>((CFDictionaryRef *)__p, (const UInt8 **)&v24);
    int v14 = v26;
    unint64_t v15 = v27;
    unint64_t v16 = __p[0];
    if (v26 != v27)
    {
      uint64_t v17 = v26;
      do
      {
        uint64_t v18 = *v17;
        if (AudioStatisticsLibraryLoader(void)::once != -1) {
          dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_8511);
        }
        if (AudioStatisticsLibraryLoader(void)::libSym) {
          AudioStatisticsLibraryLoader(void)::libSym(v18, v16, 7, 6);
        }
        ++v17;
      }
      while (v17 != v15);
    }
    if (v16) {
      CFRelease(v16);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v25[0]);
    if (v14) {
      operator delete(v14);
    }
  }
  HALS_ObjectMap::ReleaseObject(v3, v2);
  return caulk::concurrent::details::rt_message_call<HALS_IOContext::TimeCodeIssueReporter::SendTimeCodeIssue(unsigned int,unsigned int)::$_0,HALS_TimeCodeIssueMessage &>::rt_cleanup::~rt_cleanup(&v20);
}

void sub_1BADFAED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,void *a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a23);
  if (a25) {
    operator delete(a25);
  }
  HALS_ObjectMap::ReleaseObject(v25, v27);
  caulk::concurrent::details::rt_message_call<HALS_IOContext::TimeCodeIssueReporter::SendTimeCodeIssue(unsigned int,unsigned int)::$_0,HALS_TimeCodeIssueMessage &>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)&a9);
  _Unwind_Resume(a1);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<HALS_IOContext::TimeCodeIssueReporter::SendTimeCodeIssue(unsigned int,unsigned int)::$_0,HALS_TimeCodeIssueMessage &>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], v2, 32, 8);
  return a1;
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext::TimeCodeIssueReporter::SendTimeCodeIssue(unsigned int,unsigned int)::$_0,HALS_TimeCodeIssueMessage &>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void HALS_IOContext::RemoveTap(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3)
{
  uint64_t v3 = a2;
  unint64_t v4 = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 752))(a1, &v3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1BADFB088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOContext::SignalOverloadToClient(std::__shared_weak_count **this)
{
  uint64_t v2 = AMCP::Utility::configure_syscall_mask_for_normal_priority((AMCP::Utility *)this);
  uint64_t v3 = (void *)MEMORY[0x1E4FB7E90];
  if (v2)
  {
    int v4 = (int)v2;
    AMCP::Log::Scope_Registry::get(v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v34, "com.apple.coreaudio", "AMCP");
    unint64_t v5 = *(caulk::concurrent::messenger **)(v34 + 8);
    int v6 = pthread_self();
    mach_port_t v7 = pthread_mach_thread_np(v6);
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v3 + 16))(*v3, 48, 8);
    *(_DWORD *)(v8 + 16) = 0;
    *(unsigned char *)(v8 + 20) = 16;
    *(_DWORD *)(v8 + 24) = v7;
    *(void *)(v8 + 32) = "HALS_IOContext.cpp";
    *(_DWORD *)(v8 + 40) = 1703;
    *(_DWORD *)(v8 + 44) = v4;
    *(void *)uint64_t v8 = &unk_1F1477FB0;
    *(void *)(v8 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v5, (caulk::concurrent::message *)v8);
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
  }
  std::string::size_type v9 = (HALS_PlatformBehaviors *)((uint64_t (*)(std::__shared_weak_count **))(*this)[8].__shared_owners_)(this);
  if (!v9
    || (platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(v9),
        long long v11 = (std::__shared_weak_count *)(*(uint64_t (**)(uint64_t *))(*platform_behaviors + 104))(platform_behaviors),
        (v11 & 1) != 0))
  {
    std::string::size_type v12 = (HALS_NotificationManager *)*((unsigned int *)this + 18);
    if (!v12) {
      std::string::size_type v12 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    }
    uint64_t v34 = 0x676C6F626F766572;
    LODWORD(v35) = 0;
    HALS_Object::PropertiesChanged_Sync((HALS_Object *)this, v12, 0, 1u, (const AudioObjectPropertyAddress *)&v34);
    goto LABEL_25;
  }
  int v14 = this[11];
  if (!v14)
  {
    unint64_t v16 = 0;
    goto LABEL_19;
  }
  unint64_t v15 = this[10];
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v11 = std::__shared_weak_count::lock(v14);
  unint64_t v16 = v11;
  if (!v11 || !v15)
  {
LABEL_19:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v34, "com.apple.coreaudio", "AMCP");
    long long v24 = *(caulk::concurrent::messenger **)(v34 + 8);
    long long v25 = pthread_self();
    mach_port_t v26 = pthread_mach_thread_np(v25);
    uint64_t v27 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v3 + 16))(*v3, 48, 8);
    *(_DWORD *)(v27 + 16) = 0;
    *(unsigned char *)(v27 + 20) = 16;
    *(_DWORD *)(v27 + 24) = v26;
    *(void *)(v27 + 32) = "HALS_IOContext.cpp";
    *(_DWORD *)(v27 + 40) = 1711;
    *(void *)uint64_t v27 = &unk_1F1478008;
    *(void *)(v27 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v24, (caulk::concurrent::message *)v27);
    long long v13 = (AMCP::Utility *)v35;
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    if (!v16) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  uint64_t v17 = (AMCP::Log::Scope_Registry *)((uint64_t (*)(std::__shared_weak_count *))v15->__vftable[2].~__shared_weak_count)(v15);
  int v18 = (int)v17;
  if (v17) {
    BOOL v19 = v17 == 268451843;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19)
  {
    AMCP::Log::Scope_Registry::get(v17);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v34, "com.apple.coreaudio", "AMCP");
    uint64_t v20 = *(caulk::concurrent::messenger **)(v34 + 8);
    long long v21 = pthread_self();
    mach_port_t v22 = pthread_mach_thread_np(v21);
    uint64_t v23 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v3 + 16))(*v3, 48, 8);
    *(_DWORD *)(v23 + 16) = 0;
    *(unsigned char *)(v23 + 20) = 16;
    *(_DWORD *)(v23 + 24) = v22;
    *(void *)(v23 + 32) = "HALS_IOContext.cpp";
    *(_DWORD *)(v23 + 40) = 1717;
    *(_DWORD *)(v23 + 44) = v18;
    *(void *)uint64_t v23 = &unk_1F1478060;
    *(void *)(v23 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v20, (caulk::concurrent::message *)v23);
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
  }
LABEL_22:
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
LABEL_23:
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_25:
  long long v28 = AMCP::Utility::configure_syscall_mask_for_realtime_priority(v13);
  if (v28)
  {
    int v29 = (int)v28;
    AMCP::Log::Scope_Registry::get(v28);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v34, "com.apple.coreaudio", "AMCP");
    long long v30 = *(caulk::concurrent::messenger **)(v34 + 8);
    uint64_t v31 = pthread_self();
    mach_port_t v32 = pthread_mach_thread_np(v31);
    uint64_t v33 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v3 + 16))(*v3, 48, 8);
    *(_DWORD *)(v33 + 16) = 0;
    *(unsigned char *)(v33 + 20) = 16;
    *(_DWORD *)(v33 + 24) = v32;
    *(void *)(v33 + 32) = "HALS_IOContext.cpp";
    *(_DWORD *)(v33 + 40) = 1731;
    *(_DWORD *)(v33 + 44) = v29;
    *(void *)uint64_t v33 = &unk_1F14780B8;
    *(void *)(v33 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v30, (caulk::concurrent::message *)v33);
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
  }
}

void sub_1BADFB4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext::SignalOverloadToClient(void)::$_3,std::tuple<unsigned int,char const*,int,int>>::perform(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    LODWORD(v9) = 67109890;
    HIDWORD(v9) = v4;
    *(_WORD *)std::string::size_type v10 = 2080;
    *(void *)&v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d HALS_IOContext::SignalOverloadToClient - Failed to set the syscall mask back to realtime priority: %d", (uint8_t *)&v9, 0x1Eu);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BADFB694(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext::SignalOverloadToClient(void)::$_3,std::tuple<unsigned int,char const*,int,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext::SignalOverloadToClient(void)::$_2,std::tuple<unsigned int,char const*,int,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    LODWORD(v9) = 67109890;
    HIDWORD(v9) = v4;
    *(_WORD *)std::string::size_type v10 = 2080;
    *(void *)&v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d HALS_IOContext::SignalOverloadToClient: failed to receive the client message for overload notification, Error: 0x%X", (uint8_t *)&v9, 0x1Eu);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BADFB81C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext::SignalOverloadToClient(void)::$_2,std::tuple<unsigned int,char const*,int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext::SignalOverloadToClient(void)::$_1,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v8;
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    LODWORD(v8) = 67109634;
    HIDWORD(v8) = v4;
    *(_WORD *)std::string::size_type v9 = 2080;
    *(void *)&v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d HALS_IOContext::SignalOverloadToClient: no client connection", (uint8_t *)&v8, 0x18u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BADFB99C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext::SignalOverloadToClient(void)::$_1,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext::SignalOverloadToClient(void)::$_0,std::tuple<unsigned int,char const*,int,int>>::perform(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    LODWORD(v9) = 67109890;
    HIDWORD(v9) = v4;
    *(_WORD *)__int16 v10 = 2080;
    *(void *)&v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d HALS_IOContext::SignalOverloadToClient - Failed to set the syscall mask to normal priority: %d", (uint8_t *)&v9, 0x1Eu);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BADFBB24(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext::SignalOverloadToClient(void)::$_0,std::tuple<unsigned int,char const*,int,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t HALS_IOContext::WaitForClientToBeginTransport(std::__shared_weak_count *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (HALS_PlatformBehaviors *)((uint64_t (*)(std::__shared_weak_count *))this->__vftable[5].~__shared_weak_count)(this);
  if (!v2) {
    return 1;
  }
  platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(v2);
  if ((*(uint64_t (**)(uint64_t *))(*platform_behaviors + 104))(platform_behaviors)) {
    return 1;
  }
  int v15 = 0;
  do
  {
    int v4 = this[4].__vftable;
    unint64_t v16 = &unk_1F1478110;
    uint64_t v17 = this;
    int v18 = &v15;
    BOOL v19 = &v16;
    (*((void (**)(std::__shared_weak_count_vtbl *, void **))v4->~__shared_weak_count + 41))(v4, &v16);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v16);
    int v5 = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))this[4].~__shared_weak_count + 44))(this[4].__vftable);
    if (v15 == 268451843) {
      int v6 = v5;
    }
    else {
      int v6 = 1;
    }
  }
  while (v6 != 1);
  int v7 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(std::__shared_weak_count_vtbl *))this[4].~__shared_weak_count
                                     + 44))(this[4].__vftable);
  int v8 = v15;
  int v9 = v15 ? (int)v7 : 1;
  if (v9 == 1) {
    return 1;
  }
  AMCP::Log::Scope_Registry::get(v7);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v16, "com.apple.coreaudio", "AMCP");
  __int16 v11 = (caulk::concurrent::messenger *)*((void *)v16 + 1);
  int v12 = pthread_self();
  mach_port_t v13 = pthread_mach_thread_np(v12);
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
  *(_DWORD *)(v14 + 16) = 0;
  *(unsigned char *)(v14 + 20) = 16;
  *(_DWORD *)(v14 + 24) = v13;
  *(void *)(v14 + 32) = "HALS_IOContext.cpp";
  *(_DWORD *)(v14 + 40) = 1759;
  *(_DWORD *)(v14 + 44) = v8;
  *(void *)uint64_t v14 = &unk_1F14781E8;
  *(void *)(v14 + 8) = 0;
  caulk::concurrent::messenger::enqueue(v11, (caulk::concurrent::message *)v14);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  return 0;
}

void sub_1BADFBDEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext::WaitForClientToBeginTransport(void)::$_1,std::tuple<unsigned int,char const*,int,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    LODWORD(v9) = 67109890;
    HIDWORD(v9) = v4;
    *(_WORD *)__int16 v10 = 2080;
    *(void *)&v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d HALS_IOContext::IOWorkLoop: did not receive the first poke from the client, Error: 0x%X", (uint8_t *)&v9, 0x1Eu);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BADFBF60(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext::WaitForClientToBeginTransport(void)::$_1,std::tuple<unsigned int,char const*,int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0,std::allocator<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0,std::allocator<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN14HALS_IOContext29WaitForClientToBeginTransportEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0,std::allocator<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0>,void ()(void)>::operator()(std::__shared_weak_count *a1)
{
  uint64_t shared_owners = a1->__shared_owners_;
  uint64_t v2 = *(std::__shared_weak_count **)(shared_owners + 88);
  if (v2)
  {
    os_log_type_t v3 = a1;
    uint64_t v4 = *(void *)(shared_owners + 80);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    a1 = std::__shared_weak_count::lock(v2);
    uint64_t v5 = a1;
    if (a1 && v4)
    {
      *(_DWORD *)v3->__shared_weak_owners_ = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 112))(v4);
LABEL_9:
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  int v6 = *(caulk::concurrent::messenger **)(v10 + 8);
  int v7 = pthread_self();
  mach_port_t v8 = pthread_mach_thread_np(v7);
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
  *(_DWORD *)(v9 + 16) = 0;
  *(unsigned char *)(v9 + 20) = 16;
  *(_DWORD *)(v9 + 24) = v8;
  *(void *)(v9 + 32) = "HALS_IOContext.cpp";
  *(_DWORD *)(v9 + 40) = 1748;
  *(void *)uint64_t v9 = &unk_1F1478180;
  *(void *)(v9 + 8) = 0;
  caulk::concurrent::messenger::enqueue(v6, (caulk::concurrent::message *)v9);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v5) {
    goto LABEL_9;
  }
LABEL_10:
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1BADFC180(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0::operator() const(void)::{lambda(std::tuple<unsigned int,char const*,int> &)#1},std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v8;
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    LODWORD(v8) = 67109634;
    HIDWORD(v8) = v4;
    *(_WORD *)uint64_t v9 = 2080;
    *(void *)&v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d HALS_IOContext::PerformIO: no client connection", (uint8_t *)&v8, 0x18u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BADFC2F4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0::operator() const(void)::{lambda(std::tuple<unsigned int,char const*,int> &)#1},std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

__n128 std::__function::__func<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0,std::allocator<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1478110;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0,std::allocator<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F1478110;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0,std::allocator<HALS_IOContext::WaitForClientToBeginTransport(void)::$_0>,void ()(void)>::~__func()
{
}

uint64_t HALS_IOContext::CallClientIOProc(HALS_IOContext *this, int a2, int a3, int a4, char a5)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  unsigned int v55 = 0;
  int v56 = a2;
  int v9 = (*(uint64_t (**)(void, void))(**((void **)this + 12) + 48))(*((void *)this + 12), 0);
  __int16 v10 = (HALS_PlatformBehaviors *)(*(uint64_t (**)(HALS_IOContext *))(*(void *)this + 200))(this);
  if (v10)
  {
    platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(v10);
    if (((*(uint64_t (**)(uint64_t *))(*platform_behaviors + 104))(platform_behaviors) & 1) == 0)
    {
      if (!a4)
      {
        (*(void (**)(void))(**((void **)this + 12) + 264))(*((void *)this + 12));
        kdebug_trace();
        uint64_t v50 = *((void *)this + 12);
        long long v51 = operator new(0x30uLL);
        *long long v51 = &unk_1F1478240;
        v51[1] = this;
        v51[2] = &v56;
        *((unsigned char *)v51 + 24) = v9 != 0;
        v51[4] = &v55;
        *((unsigned char *)v51 + 40) = a5;
        *((void *)&v59 + 1) = v51;
        (*(void (**)(uint64_t, long long *))(*(void *)v50 + 328))(v50, &v58);
        std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v58);
        if (!v9) {
          return v55;
        }
        goto LABEL_23;
      }
LABEL_21:
      if (!v9) {
        return v55;
      }
      (*(void (**)(void))(**((void **)this + 12) + 232))(*((void *)this + 12));
      goto LABEL_23;
    }
  }
  uint64_t v12 = *((void *)this + 14);
  if (!v12 || !*(unsigned char *)(v12 + 32) || (a4 & 1) != 0) {
    goto LABEL_21;
  }
  int v13 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 12) + 32))(*((void *)this + 12), 1);
  **((_DWORD **)this + 15) = v13;
  if (v13)
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    do
    {
      (*(void (**)(void, uint64_t, unint64_t, long long *))(**((void **)this + 12) + 72))(*((void *)this + 12), 1, v15, &v58);
      unint64_t v16 = (unsigned int **)((char *)this + 120);
      uint64_t v17 = *((void *)this + 15) + v14 * 4;
      *(_DWORD *)(v17 + 8) = HIDWORD(v60);
      int v18 = DWORD2(v60) * a3;
      if (DWORD2(v59) != 1819304813) {
        int v18 = v60;
      }
      *(_DWORD *)(v17 + 12) = v18;
      uint64_t v19 = (*(uint64_t (**)(void))(**((void **)this + 12) + 288))();
      uint64_t v20 = *v16;
      *(void *)&(*v16)[v14 + 4] = v19;
      ++v15;
      v14 += 4;
    }
    while (v15 < *v20);
  }
  int v21 = (*(uint64_t (**)(void, void))(**((void **)this + 12) + 32))(*((void *)this + 12), 0);
  **((_DWORD **)this + 16) = v21;
  if (v21)
  {
    uint64_t v22 = 0;
    unint64_t v23 = 0;
    do
    {
      (*(void (**)(void, void, unint64_t, long long *))(**((void **)this + 12) + 72))(*((void *)this + 12), 0, v23, &v58);
      long long v24 = (unsigned int **)((char *)this + 128);
      uint64_t v25 = *((void *)this + 16) + v22 * 4;
      *(_DWORD *)(v25 + 8) = HIDWORD(v60);
      int v26 = DWORD2(v60) * a3;
      if (DWORD2(v59) != 1819304813) {
        int v26 = v60;
      }
      *(_DWORD *)(v25 + 12) = v26;
      uint64_t v27 = (*(uint64_t (**)(void))(**((void **)this + 12) + 288))();
      long long v28 = *v24;
      *(void *)&(*v24)[v22 + 4] = v27;
      ++v23;
      v22 += 4;
    }
    while (v23 < *v28);
  }
  int v29 = (long long *)(*(uint64_t (**)(void))(**((void **)this + 12) + 264))(*((void *)this + 12));
  long long v30 = *v29;
  long long v31 = v29[1];
  long long v32 = v29[2];
  long long v61 = v29[3];
  long long v59 = v31;
  long long v60 = v32;
  long long v58 = v30;
  long long v33 = v29[4];
  long long v34 = v29[5];
  long long v35 = v29[7];
  v62[2] = v29[6];
  v62[3] = v35;
  v62[0] = v33;
  v62[1] = v34;
  long long v36 = v29[8];
  long long v37 = v29[9];
  long long v38 = v29[11];
  v63[2] = v29[10];
  v63[3] = v38;
  v63[0] = v36;
  v63[1] = v37;
  kdebug_trace();
  uint64_t v40 = *((void *)this + 14);
  uint64_t v39 = *((void *)this + 15);
  uint64_t v41 = *((void *)this + 16);
  if (*(void *)v40)
  {
    (*(void (**)(void, long long *, uint64_t, _OWORD *, uint64_t, _OWORD *, void))v40)(*((unsigned int *)this + 18), &v58, v39, v62, v41, v63, *(void *)(v40 + 8));
  }
  else
  {
    uint64_t v53 = *(void *)(v40 + 24);
    if (v53)
    {
      long long v54 = *(NSObject **)(v40 + 16);
      if (v54)
      {
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = ___ZN11HALS_IOProc4CallEjPK14AudioTimeStampPK15AudioBufferListS2_PS3_S2__block_invoke;
        block[3] = &__block_descriptor_tmp_17047;
        block[4] = v40;
        block[5] = &v58;
        block[6] = v39;
        block[7] = v62;
        block[8] = v41;
        block[9] = v63;
        dispatch_sync(v54, block);
      }
      else
      {
        (*(void (**)(uint64_t, long long *, uint64_t, _OWORD *, uint64_t, _OWORD *))(v53 + 16))(v53, &v58, v39, v62, v41, v63);
      }
    }
  }
  kdebug_trace();
  if (v9)
  {
LABEL_23:
    if ((*(unsigned int (**)(void))(**((void **)this + 12) + 256))(*((void *)this + 12)))
    {
      kdebug_trace();
      *((void *)this + 27) = 0;
      ++*((void *)this + 26);
      uint64_t v42 = *((void *)this + 24);
      if (!*(unsigned char *)(v42 + 40))
      {
        *(void *)(v42 + 32) = mach_absolute_time();
        *(unsigned char *)(v42 + 40) = 1;
      }
    }
    else
    {
      uint64_t v43 = *((void *)this + 27) + 1;
      *((void *)this + 26) = 0;
      *((void *)this + 27) = v43;
      uint64_t v44 = *((void *)this + 24);
      if (!*(unsigned char *)(v44 + 56))
      {
        BOOL v45 = *(unsigned char *)(v44 + 40) == 0;
        *(void *)(v44 + 48) = mach_absolute_time();
        *(unsigned char *)(v44 + 56) = 1;
        if (v45)
        {
          *(void *)(v44 + 32) = *(void *)(v44 + 48);
          *(unsigned char *)(v44 + 40) = *(unsigned char *)(v44 + 56);
        }
        long long v46 = (long long *)*((void *)this + 24);
        int v47 = *((_DWORD *)this + 4);
        long long v58 = *v46;
        long long v59 = v46[1];
        long long v60 = v46[2];
        long long v61 = v46[3];
        uint64_t v48 = (caulk::concurrent::messenger *)*((void *)v46 + 8);
        uint64_t v49 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 96, 8);
        *(void *)(v49 + 8) = 0;
        *(_DWORD *)(v49 + 16) = 0;
        *(_OWORD *)(v49 + 24) = v58;
        *(_OWORD *)(v49 + 40) = v59;
        *(_OWORD *)(v49 + 56) = v60;
        *(_OWORD *)(v49 + 72) = v61;
        *(_DWORD *)(v49 + 88) = v47;
        *(void *)uint64_t v49 = &unk_1F1477E60;
        caulk::concurrent::messenger::enqueue(v48, (caulk::concurrent::message *)v49);
      }
    }
  }
  return v55;
}

void sub_1BADFCB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL,BOOL)::$_0,std::allocator<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL,BOOL)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL,BOOL)::$_0,std::allocator<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL,BOOL)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN14HALS_IOContext16CallClientIOProcEjjbbE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL,BOOL)::$_0,std::allocator<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL,BOOL)::$_0>,void ()(void)>::operator()(std::__shared_weak_count *a1)
{
  uint64_t shared_owners = a1->__shared_owners_;
  uint64_t v2 = *(std::__shared_weak_count **)(shared_owners + 88);
  if (v2)
  {
    os_log_type_t v3 = a1;
    uint64_t v4 = *(void *)(shared_owners + 80);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    a1 = std::__shared_weak_count::lock(v2);
    uint64_t v5 = a1;
    if (a1 && v4)
    {
      unint64_t v6 = (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)v4 + 88))(v4, *(unsigned int *)v3->__shared_weak_owners_, LOBYTE(v3[1].__vftable), LOBYTE(v3[1].__shared_weak_owners_));
      char v8 = v7;
      if (v6)
      {
        (*(void (**)(void))(**(void **)(shared_owners + 96) + 232))(*(void *)(shared_owners + 96));
      }
      else if ((v7 & 0x100) != 0)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v24, "com.apple.coreaudio", "AMCP");
        uint64_t v20 = *(caulk::concurrent::messenger **)(v24 + 8);
        int v21 = pthread_self();
        mach_port_t v22 = pthread_mach_thread_np(v21);
        uint64_t v23 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
        *(_DWORD *)(v23 + 16) = 0;
        *(unsigned char *)(v23 + 20) = 2;
        *(_DWORD *)(v23 + 24) = v22;
        *(void *)(v23 + 32) = "HALS_IOContext.cpp";
        *(_DWORD *)(v23 + 40) = 1801;
        *(void *)uint64_t v23 = &unk_1F1478308;
        *(void *)(v23 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v20, (caulk::concurrent::message *)v23);
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        *(_DWORD *)v3[1].__shared_owners_ = 1;
      }
      else
      {
        unint64_t v13 = HIDWORD(v6);
        if (HIDWORD(v6)) {
          BOOL v14 = *(_DWORD *)v3->__shared_weak_owners_ == HIDWORD(v6);
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v24, "com.apple.coreaudio", "AMCP");
          unint64_t v15 = *(caulk::concurrent::messenger **)(v24 + 8);
          unint64_t v16 = pthread_self();
          mach_port_t v17 = pthread_mach_thread_np(v16);
          int v18 = *(_DWORD *)v3->__shared_weak_owners_;
          uint64_t v19 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
          *(_DWORD *)(v19 + 16) = 0;
          *(unsigned char *)(v19 + 20) = 2;
          *(_DWORD *)(v19 + 24) = v17;
          *(void *)(v19 + 32) = "HALS_IOContext.cpp";
          *(_DWORD *)(v19 + 40) = 1806;
          *(_DWORD *)(v19 + 44) = v13;
          *(_DWORD *)(v19 + 48) = v18 + 1;
          *(void *)uint64_t v19 = &unk_1F1478360;
          *(void *)(v19 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v15, (caulk::concurrent::message *)v19);
          if (v25) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v25);
          }
        }
      }
      (*(void (**)(void, void))(**(void **)(shared_owners + 96) + 808))(*(void *)(shared_owners + 96), v8 & 1);
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v24, "com.apple.coreaudio", "AMCP");
  int v9 = *(caulk::concurrent::messenger **)(v24 + 8);
  __int16 v10 = pthread_self();
  mach_port_t v11 = pthread_mach_thread_np(v10);
  uint64_t v12 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
  *(_DWORD *)(v12 + 16) = 0;
  *(unsigned char *)(v12 + 20) = 16;
  *(_DWORD *)(v12 + 24) = v11;
  *(void *)(v12 + 32) = "HALS_IOContext.cpp";
  *(_DWORD *)(v12 + 40) = 1789;
  *(void *)uint64_t v12 = &unk_1F14782B0;
  *(void *)(v12 + 8) = 0;
  caulk::concurrent::messenger::enqueue(v9, (caulk::concurrent::message *)v12);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  (*(void (**)(void))(**(void **)(shared_owners + 96) + 232))(*(void *)(shared_owners + 96));
LABEL_21:
  kdebug_trace();
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1BADFCFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL,BOOL)::$_0::operator() const(void)::{lambda(std::tuple<unsigned int,char const*,int,int,int> &)#1},std::tuple<unsigned int,char const*,int,int,int>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)mach_port_t v11 = 2080;
    *(void *)&v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d HALS_IOContext::CallClientIOProc: received an out of order message (got %d want: %d)", (uint8_t *)&v10, 0x24u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BADFD190(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL,BOOL)::$_0::operator() const(void)::{lambda(std::tuple<unsigned int,char const*,int,int,int> &)#1},std::tuple<unsigned int,char const*,int,int,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL,BOOL)::$_0::operator() const(void)::{lambda(std::tuple<unsigned int,char const*,int> &)#2},std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v8;
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    LODWORD(v8) = 67109634;
    HIDWORD(v8) = v4;
    *(_WORD *)int v9 = 2080;
    *(void *)&v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d HALS_IOContext::CallClientIOProc: client io proc is stopping", (uint8_t *)&v8, 0x18u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BADFD310(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL,BOOL)::$_0::operator() const(void)::{lambda(std::tuple<unsigned int,char const*,int> &)#2},std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL,BOOL)::$_0::operator() const(void)::{lambda(std::tuple<unsigned int,char const*,int> &)#1},std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v8;
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    LODWORD(v8) = 67109634;
    HIDWORD(v8) = v4;
    *(_WORD *)int v9 = 2080;
    *(void *)&v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d HALS_IOContext::PerformIO: no client connection", (uint8_t *)&v8, 0x18u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BADFD490(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL,BOOL)::$_0::operator() const(void)::{lambda(std::tuple<unsigned int,char const*,int> &)#1},std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

__n128 std::__function::__func<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL,BOOL)::$_0,std::allocator<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1478240;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL,BOOL)::$_0,std::allocator<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F1478240;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL,BOOL)::$_0,std::allocator<HALS_IOContext::CallClientIOProc(unsigned int,unsigned int,BOOL,BOOL)::$_0>,void ()(void)>::~__func()
{
}

void HALS_IOContext::GetIssueReporters(HALS_IOContext *this, uint64_t a2)
{
  uint64_t v6 = 0;
  int v7 = &v6;
  uint64_t v8 = 0x4002000000;
  int v9 = __Block_byref_object_copy__51;
  __int16 v10 = __Block_byref_object_dispose__52;
  std::string __p = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK14HALS_IOContext17GetIssueReportersEv_block_invoke;
  v5[3] = &unk_1E62341D8;
  v5[4] = &v6;
  v5[5] = a2;
  long long v3 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v5);
  int v4 = v7;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(this, (const void *)v4[5], v4[6], (v4[6] - v4[5]) >> 3);
  _Block_object_dispose(&v6, 8);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
}

void sub_1BADFD6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__51(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__52(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

char *___ZNK14HALS_IOContext17GetIssueReportersEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  __n128 result = (char *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (result != (char *)(v1 + 160)) {
    return std::vector<long long>::__assign_with_size[abi:ne180100]<long long *,long long *>(result, *(char **)(v1 + 160), *(void *)(v1 + 168), (uint64_t)(*(void *)(v1 + 168) - *(void *)(v1 + 160)) >> 3);
  }
  return result;
}

uint64_t __Block_byref_object_copy__54(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__55(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(a1 + 40);
}

void ___ZNK14HALS_IOContext12GetDeviceSetEv_block_invoke(uint64_t a1)
{
  char v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = *(void *)(a1 + 40);
  __int16 v11 = 1;
  do
  {
    int v5 = *((unsigned __int8 *)&v11 + v3);
    char v6 = v2;
    int v7 = (*(uint64_t (**)(void, void))(**(void **)(v4 + 96) + 32))(*(void *)(v4 + 96), *((unsigned __int8 *)&v11 + v3));
    if (v7)
    {
      int v8 = v7;
      uint64_t v9 = 0;
      do
      {
        (*(void (**)(void, BOOL, uint64_t, unsigned int *))(**(void **)(v4 + 96) + 72))(*(void *)(v4 + 96), v5 != 0, v9, v10);
        std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(*(void *)(*(void *)(a1 + 32) + 8) + 40, v10[0], v10[0]);
        uint64_t v9 = (v9 + 1);
      }
      while (v8 != v9);
    }
    char v2 = 1;
    uint64_t v3 = 1;
  }
  while ((v6 & 1) == 0);
}

BOOL HALS_IOContext::IncludesDevice(HALS_IOContext *this, int a2)
{
  if ((*(unsigned int (**)(void))(**((void **)this + 12) + 728))(*((void *)this + 12)) == a2) {
    return 1;
  }
  uint64_t v9 = 0;
  __int16 v10 = &v9;
  uint64_t v11 = 0x2000000000;
  char v12 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK14HALS_IOContext14IncludesDeviceEj_block_invoke;
  v7[3] = &unk_1E6234228;
  int v8 = a2;
  v7[4] = &v9;
  v7[5] = this;
  int v5 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOContext *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v7);
  BOOL v4 = *((unsigned char *)v10 + 24) != 0;
  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1BADFD96C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14HALS_IOContext14IncludesDeviceEj_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v2 + 96) + 32))(*(void *)(v2 + 96), 0);
  if (result)
  {
    int v4 = result;
    uint64_t v5 = 0;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, void, uint64_t, _DWORD *))(**(void **)(v2 + 96) + 72))(*(void *)(v2 + 96), 0, v5, v6);
      if (v6[0] == *(_DWORD *)(a1 + 48)) {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      }
      uint64_t v5 = (v5 + 1);
    }
    while (v4 != v5);
  }
  return result;
}

void DSP_Host_PropertySet::getHostedDSPPropertyInfo(DSP_Host_PropertySet *this, const AudioObjectPropertyAddress *a2, _DWORD *a3)
{
  if (!(*(unsigned int (**)(const AudioObjectPropertyAddress *, _DWORD *))(*(void *)&a2->mSelector + 24))(a2, a3))goto LABEL_15; {
  (*(void (**)(void ***__return_ptr, const AudioObjectPropertyAddress *))(*(void *)&a2->mSelector + 16))(&v11, a2);
  }
  char v6 = v13;
  __int16 v10 = (uint64_t *)v14;
  long long v16 = v14;
  int v15 = v13;
  uint64_t v13 = 0;
  long long v14 = 0uLL;
  uint64_t v11 = (void **)&unk_1F1487398;
  int v17 = (void **)&v13;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v17);
  uint64_t v11 = (void **)&unk_1F14873D8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v12);
  if (v6 != v10)
  {
    while (1)
    {
      uint64_t v7 = *v6;
      if (*v6)
      {
        int v8 = *(unsigned char *)(v7 + 44) ? *(_DWORD *)(v7 + 40) : 0;
        if (v8 == *a3) {
          break;
        }
      }
      v6 += 2;
      if (v6 == v10) {
        goto LABEL_14;
      }
    }
  }
  if (v10 == v6)
  {
LABEL_14:
    uint64_t v11 = (void **)&v15;
    std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v11);
LABEL_15:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    return;
  }
  *(void *)this = *v6;
  uint64_t v9 = v6[1];
  *((void *)this + 1) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (void **)&v15;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v11);
}

uint64_t DSP_Host_PropertySet::getHostedDSPPropertyDataType(AudioObjectPropertyAddress *this, AudioObjectPropertyAddress *a2)
{
  DSP_Host_PropertySet::getHostedDSPPropertyInfo((DSP_Host_PropertySet *)&v4, this, a2);
  if (v4 && *(unsigned char *)(v4 + 140)) {
    uint64_t v2 = *(unsigned int *)(v4 + 136);
  }
  else {
    uint64_t v2 = 1;
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_meta_stream_property_traits_list(void)::$_0 &&>>()
{
  v25[6] = *MEMORY[0x1E4F143B8];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v0, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v1, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v2, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v3, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v4, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v5, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v6, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v7, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v8, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v9, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1935960434, 1, 0, 0, &AMCP::Property_Traits<1935960434u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935894638u>::k_valid_scopes, 0, 1935960434, 8);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1935894638, 1, 0, 0, &AMCP::Property_Traits<1935894638u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1952542835u>::k_valid_scopes, 0, 1935894638, 24);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1952542835, 1, 0, 0, &AMCP::Property_Traits<1952542835u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1952805485u>::k_valid_scopes, 0, 1952542835, 24);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1952805485, 1, 0, 0, &AMCP::Property_Traits<1952805485u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936487523u>::k_valid_scopes, 0, 1952805485, 22);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v22, 1936487523, 1, 0, 0, &AMCP::Property_Traits<1936487523u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1718444404u>::k_valid_scopes, 0, 1819569763, 12);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v23, 1718444404, 1, 0, 1, &AMCP::Property_Traits<1718444404u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1718449187u>::k_valid_scopes, 0, 1885762592, 11);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v24, 1718449187, 1, 0, 0, &AMCP::Property_Traits<1718449187u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1735554416u>::k_valid_scopes, 0, 1885762657, 1);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v25, 1919246700, 0, 0, 0, &AMCP::Property_Traits<1919246700u>::k_valid_scopes, (uint64_t)"N4AMCP3DAL16Ring_Buffer_BaseE", 0, 0, 15);
  operator new();
}

void sub_1BADFE358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v16 = v15;
  *(void *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1C1859840](v14, 0x20C40960023A9);
  uint64_t v18 = 1248;
  while (1)
  {
    uint64_t v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(void *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t HALB_Info::IsStandardClass(HALB_Info *this)
{
  int v1 = (int)this;
  uint64_t result = 0;
  if (v1 <= 1768907635)
  {
    if (v1 <= 1651273578)
    {
      if (v1 > 1634757734)
      {
        if (v1 > 1634957682)
        {
          if (v1 == 1634957683 || v1 == 1635017576) {
            return 1;
          }
          int v3 = 1650602615;
        }
        else
        {
          if (v1 == 1634757735 || v1 == 1634956402) {
            return 1;
          }
          int v3 = 1634956642;
        }
      }
      else if (v1 > 1633907819)
      {
        if (v1 == 1633907820 || v1 == 1633969526) {
          return 1;
        }
        int v3 = 1634689642;
      }
      else
      {
        if (v1 == 1633773415 || v1 == 1633841016) {
          return 1;
        }
        int v3 = 1633905771;
      }
    }
    else if (v1 <= 1685287522)
    {
      if (v1 > 1668050547)
      {
        if (v1 == 1668050548 || v1 == 1684370292) {
          return 1;
        }
        int v3 = 1684895092;
      }
      else
      {
        if (v1 == 1651273579 || v1 == 1668047723) {
          return 1;
        }
        int v3 = 1668049264;
      }
    }
    else if (v1 <= 1701734253)
    {
      if (v1 == 1685287523 || v1 == 1701078390) {
        return 1;
      }
      int v3 = 1701733488;
    }
    else if (v1 > 1718432369)
    {
      if (v1 == 1718432370) {
        return 1;
      }
      int v3 = 1751740518;
    }
    else
    {
      if (v1 == 1701734254) {
        return 1;
      }
      int v3 = 1702259059;
    }
LABEL_70:
    if (v1 != v3) {
      return result;
    }
    return 1;
  }
  if (v1 > 1936483187)
  {
    if (v1 <= 1937072757)
    {
      if (v1 > 1936744813)
      {
        if (v1 == 1936744814 || v1 == 1937006960) {
          return 1;
        }
        int v3 = 1937072749;
      }
      else
      {
        if (v1 == 1936483188 || v1 == 1936483442) {
          return 1;
        }
        int v3 = 1936682095;
      }
    }
    else if (v1 <= 1953458027)
    {
      if (v1 == 1937072758 || v1 == 1952541794) {
        return 1;
      }
      int v3 = 1952672883;
    }
    else if (v1 > 1986817380)
    {
      if (v1 == 1999790690) {
        return 1;
      }
      int v3 = 1986817381;
    }
    else
    {
      if (v1 == 1953458028) {
        return 1;
      }
      int v3 = 1953656941;
    }
    goto LABEL_70;
  }
  if (v1 <= 1852601963)
  {
    if (v1 > 1818588779)
    {
      if (v1 == 1818588780 || v1 == 1819504226) {
        return 1;
      }
      int v3 = 1836414053;
    }
    else
    {
      if (v1 == 1768907636 || v1 == 1784767339) {
        return 1;
      }
      int v3 = 1815241314;
    }
    goto LABEL_70;
  }
  if (v1 <= 1886544236)
  {
    if (v1 == 1852601964 || v1 == 1885888878) {
      return 1;
    }
    int v3 = 1885893481;
    goto LABEL_70;
  }
  if (v1 > 1936028001)
  {
    if (v1 == 1936028002) {
      return 1;
    }
    int v3 = 1936028007;
    goto LABEL_70;
  }
  if (v1 != 1886544237)
  {
    int v3 = 1919182198;
    goto LABEL_70;
  }
  return 1;
}

uint64_t HALB_Info::GetBaseClass(HALB_Info *this)
{
  if ((int)this <= 1768907635)
  {
    if ((int)this <= 1651273578)
    {
      if ((int)this <= 1634757734)
      {
        if ((int)this > 1633907819)
        {
          if (this == 1634689642) {
            return 0;
          }
          return 1634689642;
        }
        if (this != 1633773415) {
          return 1634689642;
        }
        return 1633969526;
      }
      if ((int)this <= 1634957682)
      {
        if (this == 1634757735 || this == 1634956402) {
          return 1634689642;
        }
        int v1 = 1634956642;
LABEL_46:
        if (this == v1) {
          return 1633969526;
        }
        return 1634689642;
      }
      if (this == 1634957683) {
        return 1634689642;
      }
      if (this == 1635017576) {
        return 1953458028;
      }
      int v2 = 1650602615;
    }
    else
    {
      if ((int)this > 1685287522)
      {
        if ((int)this > 1701734253)
        {
          if ((int)this <= 1718432369)
          {
            if (this == 1701734254) {
              return 1634689642;
            }
            int v2 = 1702259059;
            goto LABEL_74;
          }
          if (this == 1718432370) {
            return 1953458028;
          }
          if (this != 1751740518) {
            return 1634689642;
          }
          return 1936483188;
        }
        if (this == 1685287523) {
          return 1936483188;
        }
        if (this != 1701078390)
        {
          int v1 = 1701733488;
          goto LABEL_46;
        }
        return 1633969526;
      }
      if ((int)this <= 1668050547)
      {
        if (this != 1651273579)
        {
          if (this != 1668047723)
          {
            int v2 = 1668049264;
            goto LABEL_74;
          }
          return 1936483188;
        }
        return 1633907820;
      }
      if (this == 1668050548) {
        return 1634689642;
      }
      if (this == 1684370292) {
        return 1936483188;
      }
      int v2 = 1684895092;
    }
LABEL_74:
    if (this == v2) {
      return 1953458028;
    }
    return 1634689642;
  }
  if ((int)this > 1936483187)
  {
    if ((int)this <= 1937072757)
    {
      if ((int)this > 1936744813)
      {
        if (this != 1936744814)
        {
          if (this == 1937006960) {
            return 1634689642;
          }
          int v2 = 1937072749;
          goto LABEL_74;
        }
      }
      else if (this != 1936483188 && this != 1936483442)
      {
        int v2 = 1936682095;
        goto LABEL_74;
      }
    }
    else
    {
      if ((int)this <= 1953458027)
      {
        if (this == 1937072758) {
          return 1818588780;
        }
        if (this != 1952541794) {
          return 1634689642;
        }
        return 1953458028;
      }
      if ((int)this > 1986817380)
      {
        if (this == 1986817381) {
          return 1818588780;
        }
        int v2 = 1999790690;
        goto LABEL_74;
      }
      if (this != 1953458028)
      {
        if (this == 1953656941) {
          return 1634757735;
        }
        return 1634689642;
      }
    }
    return 1633907820;
  }
  if ((int)this <= 1852601963)
  {
    if ((int)this <= 1818588779)
    {
      if (this == 1768907636) {
        return 1634689642;
      }
      if (this != 1784767339)
      {
        int v2 = 1815241314;
        goto LABEL_74;
      }
      return 1953458028;
    }
    if (this != 1818588780)
    {
      if (this == 1819504226) {
        return 1953458028;
      }
      int v2 = 1836414053;
      goto LABEL_74;
    }
    return 1633907820;
  }
  if ((int)this <= 1886544236)
  {
    if (this != 1852601964)
    {
      if (this != 1885888878)
      {
        int v2 = 1885893481;
        goto LABEL_74;
      }
      return 1953458028;
    }
    return 1936483188;
  }
  if ((int)this <= 1936028001)
  {
    if (this != 1886544237)
    {
      int v1 = 1919182198;
      goto LABEL_46;
    }
    return 1818588780;
  }
  if (this != 1936028002)
  {
    if (this != 1936028007) {
      return 1634689642;
    }
    return 1818588780;
  }
  return 1651273579;
}

BOOL HALB_Info::IsSubClass(HALB_Info *this, int a2)
{
  if (a2 > 1768907635)
  {
    if (a2 <= 1936483187)
    {
      if (a2 > 1852601963 || a2 <= 1818588779 || a2 != 1818588780) {
        return this == a2;
      }
      uint64_t v2 = 0;
      if ((int)this <= 1936028006)
      {
        if (this == 1818588780) {
          return 1;
        }
        int v3 = 1886544237;
        goto LABEL_117;
      }
      if (this == 1936028007 || this == 1986817381) {
        return 1;
      }
      unsigned __int16 v8 = 25206;
      goto LABEL_101;
    }
    if (a2 > 1937072757)
    {
      if (a2 != 1953458028) {
        return this == a2;
      }
      goto LABEL_31;
    }
    if (a2 != 1936483188) {
      return this == a2;
    }
    uint64_t v2 = 0;
    if ((int)this <= 1751740517)
    {
      if (this == 1668047723 || this == 1684370292) {
        return 1;
      }
      int v3 = 1685287523;
      goto LABEL_117;
    }
    if (this == 1751740518) {
      return 1;
    }
    int v9 = 1936483188;
LABEL_72:
    if (this == v9) {
      return 1;
    }
    int v3 = 1852601964;
    goto LABEL_117;
  }
  if (a2 > 1651273578)
  {
    if (a2 >= 1668050548 || a2 != 1651273579) {
      return this == a2;
    }
    BOOL v6 = this == 1651273579;
    int v7 = 1936028002;
    return v6 || this == v7;
  }
  if (a2 <= 1634757734)
  {
    if (a2 <= 1633907819) {
      return this == a2;
    }
    if (a2 != 1633907820)
    {
      if (a2 != 1633969526)
      {
        if (a2 != 1634689642) {
          return this == a2;
        }
        return 1;
      }
      uint64_t v2 = 0;
      if ((int)this <= 1701078389)
      {
        if (this == 1633773415) {
          return 1;
        }
        int v3 = 1633969526;
      }
      else
      {
        if (this == 1701078390 || this == 1919182198) {
          return 1;
        }
        int v3 = 1701733488;
      }
LABEL_117:
      if (this != v3) {
        return v2;
      }
      return 1;
    }
    uint64_t v2 = 0;
    if ((int)this <= 1836414052)
    {
      if ((int)this <= 1685287522)
      {
        if ((int)this <= 1668047722)
        {
          if ((int)this > 1650602614)
          {
            if (this == 1650602615) {
              return 1;
            }
            int v3 = 1651273579;
          }
          else
          {
            if (this == 1633907820) {
              return 1;
            }
            int v3 = 1635017576;
          }
          goto LABEL_117;
        }
        if ((int)this <= 1684370291)
        {
          if (this == 1668047723) {
            return 1;
          }
          int v3 = 1668049264;
          goto LABEL_117;
        }
        int v11 = 1684370292;
LABEL_103:
        if (this == v11) {
          return 1;
        }
        int v3 = 1684895092;
        goto LABEL_117;
      }
      if ((int)this <= 1784767338)
      {
        if ((int)this > 1718432369)
        {
          if (this == 1718432370) {
            return 1;
          }
          int v3 = 1751740518;
        }
        else
        {
          if (this == 1685287523) {
            return 1;
          }
          int v3 = 1702259059;
        }
        goto LABEL_117;
      }
      if ((int)this > 1818588779)
      {
        if (this == 1818588780) {
          return 1;
        }
        int v3 = 1819504226;
        goto LABEL_117;
      }
LABEL_115:
      if (this == 1784767339) {
        return 1;
      }
      int v3 = 1815241314;
      goto LABEL_117;
    }
    if ((int)this > 1936483441)
    {
      if ((int)this > 1937072757)
      {
        if ((int)this <= 1953458027)
        {
          if (this == 1937072758) {
            return 1;
          }
          int v3 = 1952541794;
        }
        else
        {
          if (this == 1953458028 || this == 1999790690) {
            return 1;
          }
          int v3 = 1986817381;
        }
        goto LABEL_117;
      }
      if ((int)this <= 1936744813)
      {
        if (this == 1936483442) {
          return 1;
        }
        int v3 = 1936682095;
        goto LABEL_117;
      }
      int v10 = 1936744814;
LABEL_99:
      if (this == v10) {
        return 1;
      }
      unsigned __int16 v8 = 25197;
LABEL_101:
      int v3 = v8 | 0x73750000;
      goto LABEL_117;
    }
    if ((int)this > 1886544236)
    {
      if ((int)this > 1936028006)
      {
        if (this == 1936028007) {
          return 1;
        }
        int v3 = 1936483188;
      }
      else
      {
        if (this == 1886544237) {
          return 1;
        }
        int v3 = 1936028002;
      }
      goto LABEL_117;
    }
    if ((int)this > 1885888877)
    {
LABEL_92:
      if (this == 1885888878) {
        return 1;
      }
      int v3 = 1885893481;
      goto LABEL_117;
    }
    int v9 = 1836414053;
    goto LABEL_72;
  }
  if (a2 <= 1634957682)
  {
    if (a2 != 1634757735) {
      return this == a2;
    }
    BOOL v6 = this == 1634757735;
    int v7 = 1953656941;
    return v6 || this == v7;
  }
  if (a2 == 1650685548)
  {
LABEL_31:
    uint64_t v2 = 0;
    if ((int)this > 1819504225)
    {
      if ((int)this > 1936682094)
      {
        if ((int)this > 1952541793)
        {
          if (this == 1952541794 || this == 1999790690) {
            return 1;
          }
          int v3 = 1953458028;
          goto LABEL_117;
        }
        int v10 = 1936682095;
        goto LABEL_99;
      }
      if ((int)this <= 1885888877)
      {
        if (this == 1819504226) {
          return 1;
        }
        int v3 = 1836414053;
        goto LABEL_117;
      }
      goto LABEL_92;
    }
    if ((int)this <= 1702259058)
    {
      if ((int)this <= 1668049263)
      {
        if (this == 1635017576) {
          return 1;
        }
        int v3 = 1650602615;
        goto LABEL_117;
      }
      int v11 = 1668049264;
      goto LABEL_103;
    }
    if ((int)this <= 1784767338)
    {
      if (this == 1702259059) {
        return 1;
      }
      int v3 = 1718432370;
      goto LABEL_117;
    }
    goto LABEL_115;
  }
  return this == a2;
}

uint64_t HALB_Info::GetPropertyDataType(HALB_Info *this, unsigned char *a2, BOOL *a3)
{
  if (a2) {
    *a2 = 1;
  }
  uint64_t v3 = 1969828658;
  if ((int)this > 1836281965)
  {
    if ((int)this > 1936092478)
    {
      if ((int)this > 1937142885)
      {
        if ((int)this <= 1969841249)
        {
          if ((int)this > 1953002100)
          {
            if ((int)this > 1953653101)
            {
              if ((int)this > 1969514099)
              {
                if (this == 1969514100) {
                  return v3;
                }
                int v7 = 1969841184;
              }
              else
              {
                if (this == 1953653102) {
                  return v3;
                }
                int v7 = 1953851748;
              }
              goto LABEL_445;
            }
            if ((int)this <= 1953326882)
            {
              if (this == 1953002101) {
                return v3;
              }
              int v4 = 1953325673;
              goto LABEL_429;
            }
            if (this == 1953326883) {
              return 1634284338;
            }
            int v13 = 1953526563;
            goto LABEL_388;
          }
          if ((int)this <= 1952740194)
          {
            if ((int)this > 1952542819)
            {
              if (this == 1952542820) {
                return v3;
              }
              int v4 = 1952542835;
              goto LABEL_429;
            }
            if (this == 1937142886) {
              return v3;
            }
            int v9 = 1952542755;
            goto LABEL_449;
          }
          if ((int)this <= 1952869747)
          {
            if (this == 1952740195) {
              return 1886155636;
            }
            int v4 = 1952805485;
            goto LABEL_429;
          }
          if (this != 1952869748)
          {
            int v4 = 1953002099;
            goto LABEL_429;
          }
          return 1634951780;
        }
        if ((int)this <= 1986229349)
        {
          if ((int)this <= 1970170979)
          {
            if ((this - 1969841250) <= 0x12 && ((1 << ((_BYTE)this - 98)) & 0x4000F) != 0) {
              return v3;
            }
            goto LABEL_453;
          }
          if ((int)this <= 1983013985)
          {
            if (this == 1970170980) {
              return v3;
            }
            int v4 = 1970496882;
            goto LABEL_429;
          }
          if (this != 1983013986)
          {
            if (this == 1983996971) {
              return v3;
            }
            int v4 = 1983997011;
            goto LABEL_429;
          }
          return 1718367026;
        }
        if ((int)this <= 1986880098)
        {
          if ((int)this > 1986359922)
          {
            if (this == 1986359923 || this == 1986425722) {
              return v3;
            }
            int v4 = 1986622324;
            goto LABEL_429;
          }
          if (this == 1986229350) {
            return v3;
          }
          if (this != 1986290211) {
            goto LABEL_453;
          }
          return 1634088500;
        }
        if ((int)this <= 1987013740)
        {
          if (this == 1986880099 || this == 1986885219) {
            return 1718367026;
          }
          int v5 = 1987013732;
          goto LABEL_384;
        }
        if (this == 1987013741) {
          return 1718367026;
        }
        if (this == 2003136116) {
          return v3;
        }
        int v17 = 2020373603;
        goto LABEL_298;
      }
      if ((int)this <= 1936811875)
      {
        if ((int)this > 1936618860)
        {
          if ((int)this > 1936745333)
          {
            if ((int)this > 1936811107)
            {
              if (this == 1936811108) {
                return 1918990199;
              }
              int v9 = 1936811109;
              goto LABEL_449;
            }
            if (this == 1936745334) {
              return 1718367026;
            }
            unsigned __int16 v21 = 28195;
          }
          else
          {
            if ((int)this <= 1936744813)
            {
              if (this == 1936618861) {
                return 1667658612;
              }
              int v4 = 1936682095;
              goto LABEL_429;
            }
            if (this == 1936744814) {
              return 1718367026;
            }
            unsigned __int16 v21 = 25443;
          }
          int v13 = v21 | 0x73700000;
          goto LABEL_388;
        }
        if ((int)this > 1936224867)
        {
          if ((int)this > 1936483695)
          {
            if (this == 1936483696) {
              return v3;
            }
            int v4 = 1936553332;
            goto LABEL_429;
          }
          if (this == 1936224868) {
            return v3;
          }
          int v16 = 1936482681;
          goto LABEL_402;
        }
        if ((int)this <= 1936092524)
        {
          if (this == 1936092479) {
            return 1634951780;
          }
          if (this != 1936092513) {
            goto LABEL_453;
          }
          return 1936876641;
        }
        if (this == 1936092525) {
          return 1634951780;
        }
        int v22 = 1936092532;
LABEL_329:
        if (this != v22) {
          goto LABEL_453;
        }
        return 1634951780;
      }
      if ((int)this <= 1936945762)
      {
        if ((int)this > 1936876643)
        {
          if ((int)this <= 1936941858)
          {
            if (this == 1936876644) {
              return 1918990199;
            }
            int v16 = 1936879204;
            goto LABEL_402;
          }
          if (this == 1936941859) {
            return 1634284338;
          }
          if (this == 1936941931) {
            return v3;
          }
          int v6 = 1936941934;
          goto LABEL_433;
        }
        if ((this - 1936811876) > 0x10) {
          goto LABEL_453;
        }
        if (((1 << ((_BYTE)this - 100)) & 0x18005) == 0)
        {
          if (this != 1936811890) {
            goto LABEL_453;
          }
          return 1634088500;
        }
        return 1718367026;
      }
      if ((int)this <= 1937077092)
      {
        if ((int)this <= 1937009954)
        {
          if (this == 1936945763) {
            return 1634284338;
          }
          unsigned __int16 v10 = 25718;
        }
        else
        {
          if (this == 1937009955) {
            return 1634284338;
          }
          if (this == 1937010031) {
            return v3;
          }
          unsigned __int16 v10 = 28772;
        }
        int v4 = v10 | 0x73740000;
        goto LABEL_429;
      }
      if ((int)this <= 1937138722)
      {
        if (this == 1937077093) {
          return 1918990199;
        }
        unsigned __int16 v15 = 12900;
      }
      else
      {
        if (this == 1937138723) {
          return 1634088500;
        }
        if (this == 1937140836) {
          return 1718367026;
        }
        unsigned __int16 v15 = 27757;
      }
      int v5 = v15 | 0x73760000;
    }
    else
    {
      if ((int)this > 1886156134)
      {
        if ((int)this <= 1934587251)
        {
          if ((int)this <= 1902539641)
          {
            if ((int)this <= 1886353255)
            {
              if ((int)this <= 1886221683)
              {
                if (this == 1886156135) {
                  return v3;
                }
                int v4 = 1886218606;
                goto LABEL_429;
              }
              if (this == 1886221684) {
                return v3;
              }
              unsigned __int16 v25 = 28020;
            }
            else
            {
              if ((int)this > 1886415203)
              {
                if (this == 1886415204 || this == 1886546294) {
                  return v3;
                }
                int v13 = 1886548771;
                goto LABEL_388;
              }
              if (this == 1886353256) {
                return v3;
              }
              unsigned __int16 v25 = 30578;
            }
            int v4 = v25 | 0x706F0000;
            goto LABEL_429;
          }
          if ((int)this <= 1919512166)
          {
            if ((int)this > 1919186466)
            {
              if (this == 1919186467) {
                return 1634284338;
              }
              if (this == 1919251299) {
                return v3;
              }
              int v4 = 1919251302;
              goto LABEL_429;
            }
            if (this == 1902539642) {
              return v3;
            }
            int v16 = 1919055206;
            goto LABEL_402;
          }
          if ((int)this > 1919839343)
          {
            if (this != 1919839344)
            {
              if (this == 1920168547) {
                return 1667658612;
              }
              int v4 = 1920297316;
              goto LABEL_429;
            }
            return 1918990199;
          }
          if (this == 1919512167) {
            return v3;
          }
          if (this != 1919773028) {
            goto LABEL_453;
          }
          goto LABEL_390;
        }
        if ((int)this <= 1935896177)
        {
          if ((int)this <= 1935763059)
          {
            if ((int)this > 1934647635)
            {
              if (this == 1934647636) {
                return v3;
              }
              int v4 = 1935762292;
              goto LABEL_429;
            }
            if (this == 1934587252) {
              return v3;
            }
            int v16 = 1934647619;
            goto LABEL_402;
          }
          if ((int)this > 1935893352)
          {
            if (this == 1935893353) {
              return 1634284338;
            }
            if (this == 1935894638) {
              return v3;
            }
            int v7 = 1935894894;
            goto LABEL_445;
          }
          if (this == 1935763060) {
            return v3;
          }
          int v13 = 1935892841;
          goto LABEL_388;
        }
        if ((int)this > 1935962737)
        {
          if ((int)this > 1936092275)
          {
            if (this == 1936092276) {
              return v3;
            }
            if (this != 1936092451) {
              goto LABEL_453;
            }
            return 1935828065;
          }
          if (this == 1935962738) {
            return 1634284338;
          }
          unsigned __int16 v20 = 29302;
        }
        else
        {
          if ((int)this <= 1935959153)
          {
            if ((this - 1935896178) < 2) {
              return 1667658612;
            }
            int v5 = 1935946358;
            goto LABEL_384;
          }
          if (this == 1935959154) {
            return v3;
          }
          unsigned __int16 v20 = 26994;
        }
        int v4 = v20 | 0x73640000;
        goto LABEL_429;
      }
      if ((int)this > 1853059618)
      {
        if ((int)this > 1885762594)
        {
          if ((int)this > 1885956451)
          {
            if ((this - 1885958719) <= 0x30
              && ((1 << (this - 63)) & 0x1040000000001) != 0)
            {
              return v3;
            }
            if (this == 1885956452) {
              return 1667658612;
            }
            int v13 = 1886152483;
            goto LABEL_388;
          }
          if ((int)this > 1885762656)
          {
            if (this != 1885762657)
            {
              if (this != 1885762669)
              {
                int v4 = 1885954665;
                goto LABEL_429;
              }
              return 1634951780;
            }
            return 1936876641;
          }
          if (this != 1885762595)
          {
            unsigned __int16 v11 = 29759;
LABEL_304:
            int v22 = v11 | 0x70660000;
            goto LABEL_329;
          }
          return 1935828065;
        }
        if ((int)this > 1870030193)
        {
          if ((int)this <= 1885497699)
          {
            if (this == 1870030194) {
              return v3;
            }
            int v13 = 1870098020;
            goto LABEL_388;
          }
          if (this == 1885497700) {
            return 1667658612;
          }
          if (this == 1885632035) {
            return 1634284338;
          }
          unsigned __int16 v11 = 29728;
          goto LABEL_304;
        }
        if ((int)this > 1869180522)
        {
          if (this == 1869180523) {
            return v3;
          }
          int v7 = 1869638759;
          goto LABEL_445;
        }
        if (this == 1853059619) {
          return 1634088500;
        }
        int v17 = 1853059700;
LABEL_298:
        if (this != v17) {
          goto LABEL_453;
        }
        goto LABEL_423;
      }
      if ((int)this > 1836479589)
      {
        if ((int)this <= 1852012898)
        {
          if ((int)this > 1851878763)
          {
            if (this == 1851878764) {
              return 1667658612;
            }
            int v4 = 1851878770;
            goto LABEL_429;
          }
          if (this == 1836479590) {
            return v3;
          }
          int v6 = 1851878757;
          goto LABEL_433;
        }
        if ((int)this > 1852601890)
        {
          if (this == 1852601891 || this == 1852601964) {
            return 1634284338;
          }
          int v4 = 1852793963;
          goto LABEL_429;
        }
        if (this != 1852012899)
        {
          int v7 = 1852400499;
          goto LABEL_445;
        }
        return 1718367026;
      }
      if ((int)this <= 1836462691)
      {
        if ((int)this > 1836411235)
        {
          if (this == 1836411236) {
            return 1667658612;
          }
          int v4 = 1836414053;
          goto LABEL_429;
        }
        if (this != 1836281966)
        {
          int v4 = 1836282994;
          goto LABEL_429;
        }
        return 1718367026;
      }
      if ((int)this <= 1836475426)
      {
        if (this == 1836462692) {
          return 1718367026;
        }
        unsigned __int16 v8 = 12915;
      }
      else
      {
        if (this == 1836475427) {
          return 1634088500;
        }
        if (this == 1836475490) {
          return 1718367026;
        }
        unsigned __int16 v8 = 29539;
      }
      int v5 = v8 | 0x6D760000;
    }
LABEL_384:
    if (this != v5) {
      goto LABEL_453;
    }
    return 1718367026;
  }
  if ((int)this <= 1685089382)
  {
    if ((int)this > 1667787119)
    {
      if ((int)this <= 1668702577)
      {
        if ((int)this <= 1668311395)
        {
          if ((int)this <= 1668049698)
          {
            if ((int)this <= 1667851117)
            {
              if (this == 1667787120) {
                return 1668510834;
              }
              int v6 = 1667788397;
              goto LABEL_433;
            }
            if (this == 1667851118) {
              return 1886155636;
            }
            unsigned __int16 v23 = 24947;
          }
          else
          {
            if ((int)this > 1668049770)
            {
              if (this == 1668049771) {
                return v3;
              }
              if (this == 1668181110) {
                return 1668510834;
              }
              int v6 = 1668181613;
              goto LABEL_433;
            }
            if (this == 1668049699) {
              return 1634284338;
            }
            unsigned __int16 v23 = 27492;
          }
          int v4 = v23 | 0x636C0000;
          goto LABEL_429;
        }
        if ((int)this <= 1668506479)
        {
          if ((int)this > 1668506474)
          {
            if (this == 1668506475) {
              return v3;
            }
            int v6 = 1668506478;
LABEL_433:
            if (this != v6) {
              goto LABEL_453;
            }
            return 1668510834;
          }
          if (this == 1668311396) {
            return v3;
          }
          unsigned __int16 v18 = 25379;
        }
        else
        {
          if ((int)this > 1668575851)
          {
            if (this == 1668575852) {
              return 1634284338;
            }
            if (this == 1668639076) {
              return 1667658612;
            }
            int v13 = 1668641652;
            goto LABEL_388;
          }
          if (this == 1668506480) {
            return v3;
          }
          unsigned __int16 v18 = 29283;
        }
        int v13 = v18 | 0x63730000;
        goto LABEL_388;
      }
      if ((int)this <= 1684301173)
      {
        if ((int)this <= 1684107363)
        {
          if ((int)this <= 1682929011)
          {
            if (this == 1668702578) {
              return v3;
            }
            int v4 = 1682533920;
            goto LABEL_429;
          }
          if (this == 1682929012) {
            return v3;
          }
          unsigned __int16 v24 = 26471;
        }
        else
        {
          if ((int)this > 1684157045)
          {
            if (this != 1684157046)
            {
              if (this == 1684236338) {
                return 1634284338;
              }
              int v9 = 1684301171;
              goto LABEL_449;
            }
            return 1718367026;
          }
          if (this == 1684107364) {
            return v3;
          }
          unsigned __int16 v24 = 29795;
        }
        int v4 = v24 | 0x64610000;
        goto LABEL_429;
      }
      if ((int)this <= 1684500588)
      {
        if ((int)this > 1684434035)
        {
          if (this == 1684434036 || this == 1684498541) {
            return v3;
          }
          int v4 = 1684498544;
          goto LABEL_429;
        }
        if (this == 1684301174) {
          return v3;
        }
        int v13 = 1684370979;
        goto LABEL_388;
      }
      if ((int)this > 1684629093)
      {
        if (this == 1684629094 || this == 1684893796) {
          return v3;
        }
        int v4 = 1685087596;
        goto LABEL_429;
      }
      if (this != 1684500589)
      {
        int v16 = 1684500594;
        goto LABEL_402;
      }
      return 1718367026;
    }
    if ((int)this > 1651010920)
    {
      if ((int)this > 1652060005)
      {
        if ((int)this <= 1667460716)
        {
          if ((int)this <= 1667327846)
          {
            if (this == 1652060006) {
              return v3;
            }
            int v4 = 1652060014;
            goto LABEL_429;
          }
          if (this == 1667327847) {
            return v3;
          }
          int v7 = 1667330160;
          goto LABEL_445;
        }
        if ((int)this > 1667523957)
        {
          if (this == 1667523958 || this == 1667591277) {
            return v3;
          }
          int v4 = 1667658618;
          goto LABEL_429;
        }
        if (this != 1667460717)
        {
          int v9 = 1667523955;
          goto LABEL_449;
        }
        return 1668510834;
      }
      if ((int)this > 1651272547)
      {
        if ((int)this > 1651730809)
        {
          if (this == 1651730810) {
            return v3;
          }
          if (this != 1651735075)
          {
            int v7 = 1651861860;
            goto LABEL_445;
          }
          return 1634088500;
        }
        if (this == 1651272548) {
          return 1886155636;
        }
        int v13 = 1651472419;
        goto LABEL_388;
      }
      if ((int)this > 1651074159)
      {
        if (this == 1651074160) {
          return v3;
        }
        int v16 = 1651272546;
        goto LABEL_402;
      }
      if (this == 1651010921) {
        return v3;
      }
      unsigned __int16 v14 = 30313;
LABEL_246:
      int v4 = v14 | 0x62680000;
      goto LABEL_429;
    }
    if ((int)this <= 1634758764)
    {
      if ((int)this > 1634300530)
      {
        if ((int)this > 1634496614)
        {
          if (this == 1634496615) {
            return v3;
          }
          if (this == 1634562932) {
            return 1667658612;
          }
          int v7 = 1634755428;
          goto LABEL_445;
        }
        if (this != 1634300531)
        {
          int v13 = 1634429294;
          goto LABEL_388;
        }
LABEL_390:
        int v26 = 1634284338;
        return (v26 + 770);
      }
      if ((int)this > 1633970531)
      {
        if (this != 1633970532)
        {
          int v13 = 1634169456;
          goto LABEL_388;
        }
        goto LABEL_390;
      }
      if (this == 1346585414) {
        return v3;
      }
      int v9 = 1633906541;
LABEL_449:
      if (this != v9) {
        goto LABEL_453;
      }
      return 1886155636;
    }
    if ((int)this > 1650682914)
    {
      if ((int)this <= 1650685547)
      {
        if (this == 1650682915) {
          return 1634284338;
        }
        int v4 = 1650682995;
        goto LABEL_429;
      }
      if (this == 1650685548) {
        return v3;
      }
      if (this == 1650751011) {
        return 1634284338;
      }
      unsigned __int16 v14 = 24949;
      goto LABEL_246;
    }
    if ((int)this <= 1634955891)
    {
      if (this == 1634758765) {
        return v3;
      }
      int v5 = 1634758774;
      goto LABEL_384;
    }
    if (this != 1634955892)
    {
      int v4 = 1635087471;
      goto LABEL_429;
    }
LABEL_423:
    int v26 = 1718367026;
    return (v26 + 770);
  }
  if ((int)this <= 1768907635)
  {
    if ((int)this > 1735354733)
    {
      if ((int)this > 1751740450)
      {
        if ((int)this <= 1768124269)
        {
          if ((int)this > 1751740523)
          {
            if (this != 1751740524)
            {
              if (this == 1752131442) {
                return v3;
              }
              int v4 = 1752135523;
              goto LABEL_429;
            }
            return 1667658612;
          }
          if (this != 1751740451)
          {
            int v13 = 1751740518;
            goto LABEL_388;
          }
          return 1634284338;
        }
        if ((int)this > 1768187245)
        {
          if (this == 1768187246) {
            return v3;
          }
          if (this != 1768777573)
          {
            int v4 = 1768845172;
            goto LABEL_429;
          }
          return 1886155636;
        }
        if (this == 1768124270) {
          return 1668641388;
        }
        int v4 = 1768174192;
        goto LABEL_429;
      }
      if ((int)this > 1735750500)
      {
        if ((int)this > 1751413615)
        {
          if (this != 1751413616 && this != 1751474532)
          {
            int v4 = 1751737454;
            goto LABEL_429;
          }
          return 1886155636;
        }
        if (this == 1735750501) {
          return 1634284338;
        }
        int v4 = 1751412337;
LABEL_429:
        if (this == v4) {
          return v3;
        }
        goto LABEL_453;
      }
      if ((int)this <= 1735551331)
      {
        if (this == 1735354734) {
          return v3;
        }
        int v4 = 1735356005;
        goto LABEL_429;
      }
      if (this != 1735551332)
      {
        int v9 = 1735554416;
        goto LABEL_449;
      }
      return 1918990199;
    }
    if ((int)this <= 1685288047)
    {
      if ((int)this > 1685222500)
      {
        if ((this - 1685278561) > 0x11 || ((1 << ((_BYTE)this - 97)) & 0x20003) == 0)
        {
          if (this == 1685222501) {
            return v3;
          }
          int v4 = 1685287012;
          goto LABEL_429;
        }
        return 1886155636;
      }
      if ((this - 1685218913) <= 0x13 && ((1 << ((_BYTE)this - 97)) & 0x90001) != 0) {
        return v3;
      }
      int v7 = 1685089383;
      goto LABEL_445;
    }
    if ((int)this > 1701733410)
    {
      if ((int)this <= 1718839673)
      {
        if (this == 1701733411) {
          return 1634284338;
        }
        int v4 = 1702193508;
        goto LABEL_429;
      }
      if (this == 1718839674) {
        return v3;
      }
      if (this != 1718843939)
      {
        int v7 = 1719105134;
        goto LABEL_445;
      }
      return 1634088500;
    }
    if ((int)this > 1685416291)
    {
      if (this == 1685416292) {
        return v3;
      }
      int v4 = 1698776147;
      goto LABEL_429;
    }
    if (this == 1685288048) {
      return v3;
    }
    int v16 = 1685414763;
LABEL_402:
    if (this != v16) {
      goto LABEL_453;
    }
    return 1918990199;
  }
  if ((int)this <= 1818850161)
  {
    if ((int)this <= 1818453109)
    {
      if ((int)this <= 1769302371)
      {
        if ((int)this > 1769173112)
        {
          if (this == 1769173113) {
            return v3;
          }
          int v4 = 1769174370;
          goto LABEL_429;
        }
        if (this == 1768907636) {
          return 1886155636;
        }
        int v4 = 1768973155;
        goto LABEL_429;
      }
      if ((int)this <= 1818452845)
      {
        if (this == 1769302372) {
          return v3;
        }
        int v4 = 1784767339;
        goto LABEL_429;
      }
      if (this == 1818452846) {
        return 1667658612;
      }
      if (this == 1818453106) {
        return 1634088500;
      }
      int v5 = 1818453107;
      goto LABEL_384;
    }
    if ((int)this <= 1818456931)
    {
      if ((int)this > 1818455659)
      {
        if (this == 1818455660) {
          return 1667658612;
        }
        unsigned __int16 v19 = 28270;
      }
      else
      {
        if (this == 1818453110) {
          return 1718367026;
        }
        unsigned __int16 v19 = 26734;
      }
    }
    else
    {
      if ((int)this > 1818456949)
      {
        if (this != 1818456950)
        {
          if (this == 1818457190) {
            return v3;
          }
          int v13 = 1818850145;
          goto LABEL_388;
        }
        return 1718367026;
      }
      if (this == 1818456932) {
        return 1718367026;
      }
      unsigned __int16 v19 = 29550;
    }
    int v7 = v19 | 0x6C630000;
    goto LABEL_445;
  }
  if ((int)this <= 1835101041)
  {
    if ((int)this <= 1819173228)
    {
      if ((int)this <= 1819107690)
      {
        if (this == 1818850162) {
          return 1634284338;
        }
        int v4 = 1818850926;
        goto LABEL_429;
      }
      if (this == 1819107691) {
        return 1667658612;
      }
      int v7 = 1819111268;
LABEL_445:
      if (this == v7) {
        return 1667658612;
      }
      goto LABEL_453;
    }
    if ((int)this <= 1819569762)
    {
      if (this == 1819173229) {
        return 1667658612;
      }
      int v7 = 1819501422;
      goto LABEL_445;
    }
    if (this == 1819569763) {
      return v3;
    }
    if (this == 1819634020) {
      return 1886155636;
    }
    unsigned __int16 v12 = 26990;
    goto LABEL_309;
  }
  if ((int)this <= 1835295858)
  {
    if ((int)this > 1835295778)
    {
      if (this == 1835295779) {
        return 1634284338;
      }
      if (this == 1835295843) {
        return 1667658612;
      }
      int v6 = 1835295854;
      goto LABEL_433;
    }
    if (this == 1835101042) {
      return 1668510834;
    }
    unsigned __int16 v12 = 29556;
LABEL_309:
    int v4 = v12 | 0x6D610000;
    goto LABEL_429;
  }
  if ((int)this <= 1835758703)
  {
    if (this == 1835295859) {
      return 1634284338;
    }
    int v4 = 1835628607;
    goto LABEL_429;
  }
  if (this == 1835758704) {
    return 1886155636;
  }
  if (this == 1835821926) {
    return v3;
  }
  int v13 = 1836281891;
LABEL_388:
  if (this == v13) {
    return 1634284338;
  }
LABEL_453:
  uint64_t v3 = 1918990199;
  if (a2) {
    *a2 = 0;
  }
  return v3;
}

uint64_t HALB_Info::GetPropertyQualifierDataType(HALB_Info *this, unsigned char *a2, BOOL *a3)
{
  int v3 = (int)this;
  if (a2) {
    *a2 = 1;
  }
  uint64_t result = 0;
  if (v3 <= 1836281965)
  {
    if (v3 <= 1685218912)
    {
      if (v3 > 1667788396)
      {
        if (v3 <= 1682533919)
        {
          if (v3 > 1668506402)
          {
            if (v3 <= 1668510306)
            {
              if (v3 <= 1668506477)
              {
                if (v3 == 1668506403) {
                  return result;
                }
                int v6 = 1668506475;
                goto LABEL_359;
              }
              if (v3 == 1668506478) {
                return 1969828658;
              }
              int v5 = 1668506480;
            }
            else if (v3 <= 1668639075)
            {
              if (v3 == 1668510307) {
                return result;
              }
              int v5 = 1668575852;
            }
            else
            {
              if (v3 == 1668639076 || v3 == 1668641652) {
                return result;
              }
              int v5 = 1668702578;
            }
            goto LABEL_426;
          }
          if (v3 <= 1668049763)
          {
            if (v3 > 1668047218)
            {
              if (v3 == 1668047219) {
                return result;
              }
              int v5 = 1668049699;
            }
            else
            {
              if (v3 == 1667788397) {
                return result;
              }
              int v5 = 1667851118;
            }
            goto LABEL_426;
          }
          if (v3 <= 1668181109)
          {
            if (v3 == 1668049764) {
              return result;
            }
            int v6 = 1668049771;
            goto LABEL_359;
          }
          if (v3 != 1668181110)
          {
            if (v3 == 1668181613) {
              return result;
            }
            int v5 = 1668311396;
            goto LABEL_426;
          }
        }
        else
        {
          if (v3 > 1684370978)
          {
            if (v3 > 1684500593)
            {
              if (v3 <= 1684893795)
              {
                if (v3 == 1684500594) {
                  return 1969828658;
                }
                int v5 = 1684629094;
              }
              else
              {
                if (v3 == 1684893796 || v3 == 1685087596) {
                  return result;
                }
                int v5 = 1685089383;
              }
            }
            else
            {
              if (v3 > 1684498540)
              {
                if (v3 == 1684498541 || v3 == 1684498544) {
                  return 1969828658;
                }
                int v6 = 1684500589;
                goto LABEL_359;
              }
              if (v3 == 1684370979) {
                return result;
              }
              int v5 = 1684434036;
            }
            goto LABEL_426;
          }
          if (v3 > 1684108386)
          {
            if (v3 <= 1684236337)
            {
              if (v3 == 1684108387) {
                return result;
              }
              int v9 = 1684157046;
              goto LABEL_365;
            }
            if (v3 == 1684236338 || v3 == 1684301171) {
              return result;
            }
            int v5 = 1684301174;
            goto LABEL_426;
          }
          if (v3 > 1684105062)
          {
            if (v3 == 1684105063) {
              return result;
            }
            int v5 = 1684107364;
            goto LABEL_426;
          }
          if (v3 != 1682533920)
          {
            int v6 = 1682929012;
            goto LABEL_359;
          }
        }
        return 1969828658;
      }
      if (v3 <= 1651013224)
      {
        if (v3 <= 1634758764)
        {
          if (v3 <= 1634300530)
          {
            if (v3 > 1633970531)
            {
              if (v3 == 1633970532) {
                return result;
              }
              int v5 = 1634169456;
            }
            else
            {
              if (v3 == 1346585414) {
                return result;
              }
              int v5 = 1633906541;
            }
            goto LABEL_426;
          }
          if (v3 <= 1634496614)
          {
            if (v3 == 1634300531) {
              return result;
            }
            int v5 = 1634429294;
            goto LABEL_426;
          }
          if (v3 == 1634496615 || v3 == 1634562932) {
            return result;
          }
          unsigned __int16 v7 = 25444;
LABEL_265:
          int v5 = v7 | 0x61700000;
          goto LABEL_426;
        }
        if (v3 <= 1650682994)
        {
          if (v3 <= 1634955891)
          {
            if (v3 == 1634758765) {
              return result;
            }
            unsigned __int16 v7 = 28790;
            goto LABEL_265;
          }
          if (v3 == 1634955892) {
            return result;
          }
          unsigned __int16 v22 = 27683;
        }
        else
        {
          if (v3 > 1650751010)
          {
            if (v3 == 1650751011 || v3 == 1651007861) {
              return result;
            }
            int v5 = 1651010921;
            goto LABEL_426;
          }
          if (v3 == 1650682995) {
            return result;
          }
          unsigned __int16 v22 = 30316;
        }
        int v5 = v22 | 0x62630000;
        goto LABEL_426;
      }
      if (v3 <= 1652060013)
      {
        if (v3 > 1651472418)
        {
          if (v3 <= 1651735074)
          {
            if (v3 == 1651472419) {
              return result;
            }
            int v5 = 1651730810;
          }
          else
          {
            if (v3 == 1651735075 || v3 == 1651861860) {
              return result;
            }
            int v5 = 1652060006;
          }
          goto LABEL_426;
        }
        if (v3 > 1651272545)
        {
          if (v3 == 1651272546) {
            return result;
          }
          int v5 = 1651272548;
          goto LABEL_426;
        }
        if (v3 == 1651013225) {
          return result;
        }
        int v12 = 1651074160;
        goto LABEL_272;
      }
      if (v3 <= 1667523954)
      {
        if (v3 > 1667330159)
        {
          if (v3 == 1667330160) {
            return result;
          }
          int v5 = 1667460717;
          goto LABEL_426;
        }
        if (v3 == 1652060014) {
          return result;
        }
        int v19 = 1667327847;
      }
      else
      {
        if (v3 > 1667591276)
        {
          if (v3 == 1667591277) {
            return result;
          }
          if (v3 != 1667658618)
          {
            int v6 = 1667787120;
            goto LABEL_359;
          }
          return 1969828658;
        }
        if (v3 == 1667523955) {
          return result;
        }
        int v19 = 1667523958;
      }
      if (v3 != v19) {
        goto LABEL_430;
      }
      return 1886155636;
    }
    if (v3 <= 1768907635)
    {
      if (v3 > 1735356004)
      {
        if (v3 > 1751740517)
        {
          if (v3 <= 1768124269)
          {
            if (v3 <= 1752131441)
            {
              if (v3 == 1751740518) {
                return result;
              }
              int v6 = 1751740524;
              goto LABEL_359;
            }
            if (v3 == 1752131442) {
              return result;
            }
            int v5 = 1752135523;
          }
          else
          {
            if (v3 <= 1768187245)
            {
              if (v3 == 1768124270) {
                return result;
              }
              int v6 = 1768174192;
              goto LABEL_359;
            }
            if (v3 == 1768187246 || v3 == 1768777573) {
              return result;
            }
            int v5 = 1768845172;
          }
        }
        else if (v3 <= 1751412336)
        {
          if (v3 > 1735554415)
          {
            if (v3 == 1735554416) {
              return result;
            }
            int v5 = 1735750501;
          }
          else
          {
            if (v3 == 1735356005) {
              return result;
            }
            int v5 = 1735551332;
          }
        }
        else if (v3 <= 1751474531)
        {
          if (v3 == 1751412337) {
            return result;
          }
          int v5 = 1751413616;
        }
        else
        {
          if (v3 == 1751474532 || v3 == 1751737454) {
            return result;
          }
          int v5 = 1751740451;
        }
        goto LABEL_426;
      }
      if (v3 <= 1685414762)
      {
        if (v3 <= 1685278560)
        {
          if ((v3 - 1685218913) <= 0x13 && ((1 << (v3 - 97)) & 0x90001) != 0) {
            return result;
          }
          int v5 = 1685222501;
        }
        else
        {
          if ((v3 - 1685278561) <= 0x11 && ((1 << (v3 - 97)) & 0x20003) != 0 || v3 == 1685287012) {
            return result;
          }
          int v5 = 1685288048;
        }
        goto LABEL_426;
      }
      if (v3 > 1702193507)
      {
        if (v3 <= 1718843938)
        {
          if (v3 == 1702193508) {
            return result;
          }
          int v5 = 1718839674;
        }
        else
        {
          if (v3 == 1718843939 || v3 == 1719105134) {
            return result;
          }
          int v5 = 1735354734;
        }
        goto LABEL_426;
      }
      if (v3 > 1698776146)
      {
        if (v3 == 1698776147) {
          return result;
        }
        int v5 = 1701733411;
        goto LABEL_426;
      }
      if (v3 == 1685414763) {
        return result;
      }
      int v12 = 1685416292;
      goto LABEL_272;
    }
    if (v3 <= 1818850161)
    {
      if (v3 <= 1818453109)
      {
        if (v3 <= 1769302371)
        {
          if (v3 > 1769173112)
          {
            if (v3 == 1769173113) {
              return result;
            }
            int v5 = 1769174370;
          }
          else
          {
            if (v3 == 1768907636) {
              return result;
            }
            int v5 = 1768973155;
          }
          goto LABEL_426;
        }
        if (v3 > 1818452845)
        {
          if (v3 == 1818452846 || v3 == 1818453106) {
            return result;
          }
          int v9 = 1818453107;
          goto LABEL_365;
        }
        if (v3 != 1769302372)
        {
          int v5 = 1784767339;
          goto LABEL_426;
        }
        return 1969828658;
      }
      if (v3 <= 1818456931)
      {
        if (v3 > 1818455659)
        {
          if (v3 == 1818455660) {
            return 1969828658;
          }
          unsigned __int16 v18 = 28270;
        }
        else
        {
          if (v3 == 1818453110) {
            return result;
          }
          unsigned __int16 v18 = 26734;
        }
        int v5 = v18 | 0x6C630000;
        goto LABEL_426;
      }
      if (v3 <= 1818456949)
      {
        if (v3 != 1818456932)
        {
          int v6 = 1818456942;
          goto LABEL_359;
        }
        return 1718367026;
      }
      if (v3 == 1818456950 || v3 == 1818457190) {
        return result;
      }
      unsigned __int16 v13 = 29537;
    }
    else
    {
      if (v3 > 1835101041)
      {
        if (v3 > 1835295858)
        {
          if (v3 <= 1835758703)
          {
            if (v3 == 1835295859) {
              return result;
            }
            int v5 = 1835628607;
            goto LABEL_426;
          }
          if (v3 != 1835758704)
          {
            if (v3 == 1835821926) {
              return 1969828658;
            }
            unsigned __int16 v15 = 28707;
            goto LABEL_233;
          }
          return 1886155636;
        }
        if (v3 > 1835295778)
        {
          if (v3 == 1835295779) {
            return result;
          }
          if (v3 != 1835295843)
          {
            int v6 = 1835295854;
            goto LABEL_359;
          }
          return 1969828658;
        }
        if (v3 == 1835101042) {
          return result;
        }
        unsigned __int16 v11 = 29556;
LABEL_307:
        int v5 = v11 | 0x6D610000;
        goto LABEL_426;
      }
      if (v3 > 1819173228)
      {
        if (v3 <= 1819569762)
        {
          if (v3 == 1819173229) {
            return result;
          }
          int v6 = 1819501422;
          goto LABEL_359;
        }
        if (v3 == 1819569763 || v3 == 1819634020) {
          return result;
        }
        unsigned __int16 v11 = 26990;
        goto LABEL_307;
      }
      if (v3 > 1819107690)
      {
        if (v3 == 1819107691) {
          return result;
        }
        int v5 = 1819111268;
        goto LABEL_426;
      }
      if (v3 == 1818850162) {
        return result;
      }
      unsigned __int16 v13 = 30318;
    }
    int v5 = v13 | 0x6C690000;
    goto LABEL_426;
  }
  if (v3 <= 1936092478)
  {
    if (v3 <= 1886152482)
    {
      if (v3 > 1853059618)
      {
        if (v3 <= 1885762591)
        {
          if (v3 <= 1869838182)
          {
            if (v3 > 1869180522)
            {
              if (v3 == 1869180523) {
                return result;
              }
              int v5 = 1869638759;
            }
            else
            {
              if (v3 == 1853059619) {
                return result;
              }
              int v5 = 1853059700;
            }
          }
          else if (v3 <= 1870098019)
          {
            if (v3 == 1869838183) {
              return result;
            }
            int v5 = 1870030194;
          }
          else
          {
            if (v3 == 1870098020) {
              return 1634284338;
            }
            if (v3 == 1885497700) {
              return result;
            }
            int v5 = 1885632035;
          }
          goto LABEL_426;
        }
        if (v3 <= 1885954664)
        {
          if ((v3 - 1885762592) <= 0x1F && ((1 << (v3 - 32)) & 0x80000009) != 0 || v3 == 1885762657) {
            return result;
          }
          if (v3 != 1885762669) {
            goto LABEL_430;
          }
          return 1634951780;
        }
        if ((v3 - 1885958719) <= 0x30 && ((1 << (v3 - 63)) & 0x1040000000001) != 0) {
          return result;
        }
        if (v3 != 1885954665)
        {
          int v5 = 1885956452;
          goto LABEL_426;
        }
        return 1667658612;
      }
      if (v3 > 1836479589)
      {
        if (v3 > 1852012898)
        {
          if (v3 <= 1852601890)
          {
            if (v3 == 1852012899) {
              return result;
            }
            int v6 = 1852400499;
            goto LABEL_359;
          }
          if (v3 == 1852601891 || v3 == 1852601964) {
            return result;
          }
          int v5 = 1852793963;
          goto LABEL_426;
        }
        if ((v3 - 1851878757) <= 0xD && ((1 << (v3 - 101)) & 0x2081) != 0) {
          return result;
        }
        unsigned __int16 v8 = 29798;
LABEL_280:
        int v5 = v8 | 0x6D760000;
        goto LABEL_426;
      }
      if (v3 > 1836462691)
      {
        if (v3 <= 1836475426)
        {
          if (v3 == 1836462692) {
            return 1718367026;
          }
          int v9 = 1836462707;
          goto LABEL_365;
        }
        if (v3 == 1836475427 || v3 == 1836475490) {
          return result;
        }
        unsigned __int16 v8 = 29539;
        goto LABEL_280;
      }
      if (v3 > 1836411235)
      {
        if (v3 == 1836411236) {
          return result;
        }
        int v5 = 1836414053;
        goto LABEL_426;
      }
      if (v3 == 1836281966) {
        return result;
      }
      unsigned __int16 v15 = 29810;
LABEL_233:
      int v5 = v15 | 0x6D730000;
      goto LABEL_426;
    }
    if (v3 > 1934587251)
    {
      if (v3 > 1935896177)
      {
        if (v3 > 1935962737)
        {
          if (v3 > 1936092275)
          {
            if (v3 == 1936092276) {
              return result;
            }
            unsigned __int16 v23 = 27939;
LABEL_418:
            int v5 = v23 | 0x73660000;
            goto LABEL_426;
          }
          if (v3 == 1935962738) {
            return result;
          }
          unsigned __int16 v20 = 29302;
        }
        else
        {
          if (v3 <= 1935959153)
          {
            if ((v3 - 1935896178) < 2) {
              return 1969828658;
            }
            int v9 = 1935946358;
            goto LABEL_365;
          }
          if (v3 == 1935959154) {
            return result;
          }
          unsigned __int16 v20 = 26994;
        }
        int v5 = v20 | 0x73640000;
        goto LABEL_426;
      }
      if (v3 <= 1935763059)
      {
        if (v3 <= 1934647635)
        {
          if (v3 != 1934587252)
          {
            int v5 = 1934647619;
            goto LABEL_426;
          }
          return 1969828658;
        }
        if (v3 == 1934647636) {
          return result;
        }
        int v5 = 1935762292;
      }
      else
      {
        if (v3 > 1935893352)
        {
          if (v3 == 1935893353 || v3 == 1935894638) {
            return result;
          }
          int v6 = 1935894894;
          goto LABEL_359;
        }
        if (v3 == 1935763060) {
          return result;
        }
        int v5 = 1935892841;
      }
LABEL_426:
      if (v3 == v5) {
        return result;
      }
      goto LABEL_430;
    }
    if (v3 <= 1886548770)
    {
      if (v3 <= 1886350707)
      {
        if (v3 > 1886218605)
        {
          if (v3 == 1886218606) {
            return 1969828658;
          }
          int v5 = 1886221684;
        }
        else
        {
          if (v3 == 1886152483) {
            return result;
          }
          int v5 = 1886156135;
        }
      }
      else if (v3 <= 1886353265)
      {
        if (v3 == 1886350708) {
          return result;
        }
        int v5 = 1886353256;
      }
      else
      {
        if (v3 == 1886353266 || v3 == 1886415204) {
          return result;
        }
        int v5 = 1886546294;
      }
      goto LABEL_426;
    }
    if (v3 <= 1919512166)
    {
      if (v3 > 1919055205)
      {
        if (v3 == 1919055206) {
          return result;
        }
        int v5 = 1919186467;
      }
      else
      {
        if (v3 == 1886548771) {
          return result;
        }
        int v5 = 1902539642;
      }
      goto LABEL_426;
    }
    if (v3 <= 1919839343)
    {
      if (v3 == 1919512167) {
        return result;
      }
      int v5 = 1919773028;
      goto LABEL_426;
    }
    if (v3 == 1919839344 || v3 == 1920168547) {
      return result;
    }
    int v12 = 1920297316;
LABEL_272:
    if (v3 != v12) {
      goto LABEL_430;
    }
    return 1667658612;
  }
  if (v3 > 1952542754)
  {
    if (v3 <= 1970170979)
    {
      if (v3 > 1953526562)
      {
        if (v3 <= 1969514099)
        {
          if (v3 == 1953526563 || v3 == 1953653102) {
            return result;
          }
          int v5 = 1953851748;
          goto LABEL_426;
        }
        if ((v3 - 1969841250) > 0x12 || ((1 << (v3 - 98)) & 0x4000F) == 0)
        {
          if (v3 == 1969514100) {
            return result;
          }
          int v5 = 1969841184;
          goto LABEL_426;
        }
      }
      else
      {
        if (v3 <= 1952869747)
        {
          if (v3 <= 1952542834)
          {
            if (v3 == 1952542755) {
              return result;
            }
            int v5 = 1952542820;
          }
          else
          {
            if (v3 == 1952542835 || v3 == 1952740195) {
              return result;
            }
            int v5 = 1952805485;
          }
          goto LABEL_426;
        }
        if (v3 <= 1953002100)
        {
          if (v3 == 1952869748) {
            return result;
          }
          int v5 = 1953002099;
          goto LABEL_426;
        }
        if (v3 == 1953002101) {
          return result;
        }
        if (v3 != 1953325673)
        {
          int v5 = 1953326883;
          goto LABEL_426;
        }
      }
      return 1667658612;
    }
    if (v3 > 1986425721)
    {
      if (v3 <= 1987013731)
      {
        if (v3 > 1986880098)
        {
          if (v3 == 1986880099) {
            return result;
          }
          int v5 = 1986885219;
        }
        else
        {
          if (v3 == 1986425722) {
            return result;
          }
          int v5 = 1986622324;
        }
      }
      else if (v3 <= 2003136115)
      {
        if (v3 == 1987013732) {
          return result;
        }
        int v5 = 1987013741;
      }
      else
      {
        if (v3 == 2003136116 || v3 == 2003398256) {
          return result;
        }
        int v5 = 2020373603;
      }
      goto LABEL_426;
    }
    if (v3 > 1983997010)
    {
      if (v3 > 1986290210)
      {
        if (v3 == 1986290211) {
          return result;
        }
        int v5 = 1986359923;
      }
      else
      {
        if (v3 == 1983997011) {
          return result;
        }
        int v5 = 1986229350;
      }
      goto LABEL_426;
    }
    if (v3 <= 1983013985)
    {
      if (v3 == 1970170980) {
        return result;
      }
      int v5 = 1970496882;
      goto LABEL_426;
    }
    if (v3 != 1983013986)
    {
      int v5 = 1983996971;
      goto LABEL_426;
    }
    return 1718367026;
  }
  if (v3 > 1936876643)
  {
    if (v3 <= 1937010030)
    {
      if (v3 <= 1936941933)
      {
        if (v3 <= 1936941858)
        {
          if (v3 == 1936876644) {
            return result;
          }
          int v5 = 1936879204;
          goto LABEL_426;
        }
        if (v3 == 1936941859) {
          return result;
        }
        int v6 = 1936941931;
LABEL_359:
        if (v3 == v6) {
          return 1969828658;
        }
LABEL_430:
        uint64_t result = 0;
        if (a2) {
          *a2 = 0;
        }
        return result;
      }
      if (v3 <= 1937007733)
      {
        if (v3 != 1936941934)
        {
          int v5 = 1936945763;
          goto LABEL_426;
        }
        return 1969828658;
      }
      if (v3 == 1937007734) {
        return result;
      }
      unsigned __int16 v14 = 27939;
LABEL_395:
      int v5 = v14 | 0x73740000;
      goto LABEL_426;
    }
    if (v3 <= 1937138722)
    {
      if (v3 <= 1937077092)
      {
        if (v3 == 1937010031) {
          return result;
        }
        unsigned __int16 v14 = 28772;
        goto LABEL_395;
      }
      if (v3 == 1937077093) {
        return result;
      }
      int v9 = 1937125988;
LABEL_365:
      if (v3 != v9) {
        goto LABEL_430;
      }
      return 1718367026;
    }
    if (v3 > 1937140844)
    {
      if (v3 == 1937140845) {
        return result;
      }
      unsigned __int16 v21 = 29798;
    }
    else
    {
      if (v3 == 1937138723) {
        return result;
      }
      unsigned __int16 v21 = 27748;
    }
    int v5 = v21 | 0x73760000;
    goto LABEL_426;
  }
  if (v3 > 1936745314)
  {
    if (v3 <= 1936811875)
    {
      if (v3 <= 1936811107)
      {
        if (v3 == 1936745315 || v3 == 1936745334) {
          return result;
        }
        unsigned __int16 v10 = 28195;
        goto LABEL_302;
      }
      if ((v3 - 1936811108) < 2) {
        return result;
      }
      goto LABEL_430;
    }
    unsigned int v16 = v3 - 1936811876;
    if (v16 > 0x10) {
      goto LABEL_430;
    }
    int v17 = 1 << v16;
    if ((v17 & 0xC001) != 0) {
      return result;
    }
    if ((v17 & 0x10004) == 0) {
      goto LABEL_430;
    }
    return 1718367026;
  }
  if (v3 <= 1936482680)
  {
    if (v3 > 1936092524)
    {
      if (v3 != 1936092525)
      {
        if (v3 == 1936092532) {
          return result;
        }
        int v6 = 1936224868;
        goto LABEL_359;
      }
      return 1634951780;
    }
    if (v3 == 1936092479) {
      return result;
    }
    unsigned __int16 v23 = 28001;
    goto LABEL_418;
  }
  if (v3 > 1936618860)
  {
    if (v3 == 1936618861 || v3 == 1936682095) {
      return result;
    }
    unsigned __int16 v10 = 24942;
LABEL_302:
    int v5 = v10 | 0x73700000;
    goto LABEL_426;
  }
  if (v3 != 1936482681 && v3 != 1936483696)
  {
    int v5 = 1936553332;
    goto LABEL_426;
  }
  return result;
}

uint64_t HALB_Info::IsAVTProperty(HALB_Info *this)
{
  int v1 = (int)this;
  uint64_t result = 0;
  if (v1 > 1819501421)
  {
    if (v1 > 1935896177)
    {
      if ((v1 - 1935896178) < 2 || v1 == 1936941934) {
        return 1;
      }
      int v3 = 1936941931;
    }
    else if (v1 > 1835295853)
    {
      if (v1 == 1835295854) {
        return 1;
      }
      int v3 = 1885954665;
    }
    else
    {
      if (v1 == 1819501422) {
        return 1;
      }
      int v3 = 1835295843;
    }
LABEL_22:
    if (v1 != v3) {
      return result;
    }
    return 1;
  }
  if (v1 > 1685416291)
  {
    if (v1 > 1818455659)
    {
      if (v1 == 1818455660) {
        return 1;
      }
      int v3 = 1818456942;
    }
    else
    {
      if (v1 == 1685416292) {
        return 1;
      }
      int v3 = 1751740524;
    }
    goto LABEL_22;
  }
  if (v1 > 1668506474)
  {
    if (v1 == 1668506475) {
      return 1;
    }
    int v3 = 1668506478;
    goto LABEL_22;
  }
  if (v1 != 1667787120)
  {
    int v3 = 1668181110;
    goto LABEL_22;
  }
  return 1;
}

uint64_t HALB_Info::PropertyRequiresHogMode(HALB_Info *this, const AudioObjectPropertyAddress *a2)
{
  int v2 = (int)this;
  uint64_t result = 1;
  if (v2 > 1735750500)
  {
    if (v2 <= 1818850161)
    {
      if (v2 == 1735750501) {
        return 0;
      }
      int v4 = 1818850145;
    }
    else
    {
      if (v2 == 1818850162 || v2 == 1937077093) {
        return 0;
      }
      int v4 = 1919512167;
    }
    goto LABEL_14;
  }
  if (v2 <= 1634758773)
  {
    if (v2 == 1634755428) {
      return 0;
    }
    int v4 = 1634758765;
LABEL_14:
    if (v2 != v4) {
      return result;
    }
    return 0;
  }
  if (v2 != 1634758774 && v2 != 1651730810)
  {
    int v4 = 1718839674;
    goto LABEL_14;
  }
  return 0;
}

uint64_t HALB_Info::IsIOContextProperty(HALB_Info *this, const AudioObjectPropertyAddress *a2)
{
  int v2 = (int)this;
  uint64_t result = 0;
  if (v2 <= 1852012898)
  {
    if (v2 <= 1684108386)
    {
      if (v2 <= 1634955891)
      {
        if (v2 == 1633970532) {
          return 1;
        }
        int v4 = 1634300531;
      }
      else
      {
        if (v2 == 1634955892 || v2 == 1651730810) {
          return 1;
        }
        int v4 = 1651735075;
      }
    }
    else if (v2 > 1735354733)
    {
      if (v2 == 1735354734 || v2 == 1735750501) {
        return 1;
      }
      int v4 = 1752135523;
    }
    else
    {
      if (v2 == 1684108387 || v2 == 1718839674) {
        return 1;
      }
      int v4 = 1718843939;
    }
LABEL_31:
    if (v2 != v4) {
      return result;
    }
    return 1;
  }
  if (v2 > 1935959153)
  {
    if (v2 > 1937077092)
    {
      if (v2 == 1937077093 || v2 == 2003398256) {
        return 1;
      }
      int v4 = 1986425722;
    }
    else
    {
      if (v2 == 1935959154 || v2 == 1936482681) {
        return 1;
      }
      int v4 = 1937010788;
    }
    goto LABEL_31;
  }
  if (v2 > 1902539641)
  {
    if (v2 == 1902539642 || v2 == 1919773028) {
      return 1;
    }
    int v4 = 1935763060;
    goto LABEL_31;
  }
  if (v2 != 1852012899 && v2 != 1869838183)
  {
    int v4 = 1870030194;
    goto LABEL_31;
  }
  return 1;
}

uint64_t HALB_Info::IsReallyGlobalDeviceProperty(HALB_Info *this, const AudioObjectPropertyAddress *a2)
{
  int v2 = (int)this;
  uint64_t result = 0;
  if (v2 > 1768907635)
  {
    if (v2 <= 1886156134)
    {
      if (v2 > 1851878769)
      {
        if (v2 <= 1869180522)
        {
          if (v2 > 1853059618)
          {
            if (v2 == 1853059619) {
              return 1;
            }
            int v4 = 1853059700;
          }
          else
          {
            if (v2 == 1851878770) {
              return 1;
            }
            int v4 = 1852012899;
          }
        }
        else if (v2 <= 1869838182)
        {
          if (v2 == 1869180523) {
            return 1;
          }
          int v4 = 1869638759;
        }
        else
        {
          if (v2 == 1869838183 || v2 == 1870030194) {
            return 1;
          }
          int v4 = 1870098020;
        }
      }
      else if (v2 <= 1819173228)
      {
        if (v2 > 1819107690)
        {
          if (v2 == 1819107691) {
            return 1;
          }
          int v4 = 1819111268;
        }
        else
        {
          if (v2 == 1768907636) {
            return 1;
          }
          int v4 = 1818850926;
        }
      }
      else if (v2 <= 1819634019)
      {
        if (v2 == 1819173229) {
          return 1;
        }
        int v4 = 1819569763;
      }
      else
      {
        if (v2 == 1819634020 || v2 == 1836411236) {
          return 1;
        }
        int v4 = 1851878764;
      }
    }
    else if (v2 <= 1936618860)
    {
      if (v2 <= 1919251298)
      {
        if (v2 > 1886546293)
        {
          if (v2 == 1886546294) {
            return 1;
          }
          int v4 = 1902539642;
        }
        else
        {
          if (v2 == 1886156135) {
            return 1;
          }
          int v4 = 1886353266;
        }
      }
      else if (v2 <= 1919773027)
      {
        if (v2 == 1919251299) {
          return 1;
        }
        int v4 = 1919251302;
      }
      else
      {
        if (v2 == 1919773028 || v2 == 1920168547) {
          return 1;
        }
        int v4 = 1935959154;
      }
    }
    else if (v2 > 1953653101)
    {
      if (v2 <= 1986425721)
      {
        if (v2 == 1953653102) {
          return 1;
        }
        int v4 = 1969841184;
      }
      else
      {
        if (v2 == 1986425722 || v2 == 2003398256) {
          return 1;
        }
        int v4 = 2003136116;
      }
    }
    else if (v2 <= 1937010787)
    {
      if (v2 == 1936618861) {
        return 1;
      }
      int v4 = 1937007734;
    }
    else
    {
      if (v2 == 1937010788 || v2 == 1937077093) {
        return 1;
      }
      int v4 = 1952542820;
    }
    goto LABEL_106;
  }
  if (v2 <= 1684301170)
  {
    if (v2 > 1667330159)
    {
      if (v2 <= 1668049763)
      {
        if (v2 > 1667658617)
        {
          if (v2 == 1667658618) {
            return 1;
          }
          int v4 = 1668047219;
        }
        else
        {
          if (v2 == 1667330160) {
            return 1;
          }
          int v4 = 1667523955;
        }
      }
      else if (v2 <= 1668639075)
      {
        if (v2 == 1668049764) {
          return 1;
        }
        int v4 = 1668575852;
      }
      else
      {
        if (v2 == 1668639076 || v2 == 1684107364) {
          return 1;
        }
        int v4 = 1684108387;
      }
    }
    else if (v2 <= 1634429293)
    {
      if (v2 > 1634169455)
      {
        if (v2 == 1634169456) {
          return 1;
        }
        int v4 = 1634300531;
      }
      else
      {
        if (v2 == 1633906541) {
          return 1;
        }
        int v4 = 1633970532;
      }
    }
    else if (v2 <= 1634955891)
    {
      if (v2 == 1634429294) {
        return 1;
      }
      int v4 = 1634496615;
    }
    else
    {
      if (v2 == 1634955892 || v2 == 1635087471) {
        return 1;
      }
      int v4 = 1650682995;
    }
LABEL_106:
    if (v2 != v4) {
      return result;
    }
    return 1;
  }
  if (v2 <= 1719105133)
  {
    if (v2 <= 1685089382)
    {
      if (v2 > 1684893795)
      {
        if (v2 == 1684893796) {
          return 1;
        }
        int v4 = 1685087596;
      }
      else
      {
        if (v2 == 1684301171) {
          return 1;
        }
        int v4 = 1684629094;
      }
    }
    else if (v2 <= 1685287011)
    {
      if (v2 == 1685089383) {
        return 1;
      }
      int v4 = 1685222501;
    }
    else
    {
      if (v2 == 1685287012 || v2 == 1718839674) {
        return 1;
      }
      int v4 = 1718843939;
    }
    goto LABEL_106;
  }
  if (v2 > 1751737453)
  {
    if (v2 <= 1768124269)
    {
      if (v2 == 1751737454) {
        return 1;
      }
      int v4 = 1752135523;
    }
    else
    {
      if (v2 == 1768124270 || v2 == 1768187246) {
        return 1;
      }
      int v4 = 1768777573;
    }
    goto LABEL_106;
  }
  if (v2 <= 1735356004)
  {
    if (v2 == 1719105134) {
      return 1;
    }
    int v4 = 1735354734;
    goto LABEL_106;
  }
  if (v2 != 1735356005 && v2 != 1751412337)
  {
    int v4 = 1751474532;
    goto LABEL_106;
  }
  return 1;
}

uint64_t HALB_Info::IsLocalizedStringProperty(HALB_Info *this, const AudioObjectPropertyAddress *a2)
{
  int v2 = (int)this;
  uint64_t result = 0;
  if (v2 > 1818456941)
  {
    if (v2 <= 1835101041)
    {
      if (v2 > 1819111267)
      {
        if (v2 != 1819111268 && v2 != 1819173229)
        {
          int v5 = 1819501422;
          goto LABEL_31;
        }
        return 1;
      }
      if (v2 == 1818456942) {
        return 1;
      }
      int v5 = 1819107691;
    }
    else
    {
      if (v2 <= 1851878756)
      {
        if (v2 != 1835101042 && v2 != 1835295843)
        {
          int v5 = 1835295854;
          goto LABEL_31;
        }
        return 1;
      }
      if (v2 == 1851878757 || v2 == 1936941934) {
        return 1;
      }
      int v5 = 1935894894;
    }
LABEL_31:
    if (v2 != v5) {
      return result;
    }
    return 1;
  }
  if (v2 <= 1668506477)
  {
    if (v2 > 1667788396)
    {
      if (v2 != 1667788397 && v2 != 1668181110)
      {
        int v5 = 1668181613;
        goto LABEL_31;
      }
      return 1;
    }
    if (v2 == 1667460717) {
      return 1;
    }
    int v5 = 1667787120;
    goto LABEL_31;
  }
  if (v2 > 1818454125)
  {
    if (v2 != 1818454126 && v2 != 1818455660)
    {
      unsigned __int16 v4 = 28270;
      goto LABEL_23;
    }
  }
  else if (v2 != 1668506478 && v2 != 1751740524)
  {
    unsigned __int16 v4 = 25454;
LABEL_23:
    int v5 = v4 | 0x6C630000;
    goto LABEL_31;
  }
  return 1;
}

int *HALB_Info::TranslateDeviceAddressToControlAddress(int *this, const AudioObjectPropertyAddress *a2, unsigned int *a3, unsigned int *a4, AudioObjectPropertyAddress *a5)
{
  a2->signed int mSelector = 0;
  *a3 = this[1];
  *(void *)(a4 + 1) = 1735159650;
  int v5 = *this;
  if (*this <= 1852601890)
  {
    if (v5 > 1818455659)
    {
      if (v5 > 1836281890)
      {
        if (v5 > 1836462706)
        {
          if (v5 > 1836475489)
          {
            if (v5 != 1836475490)
            {
              if (v5 != 1836479331)
              {
                if (v5 != 1836479590) {
                  return this;
                }
                a2->signed int mSelector = 1986817381;
                *a3 = 1886679669;
                goto LABEL_164;
              }
              a2->signed int mSelector = 1986817381;
              *a3 = 1886679669;
LABEL_144:
              unsigned int v7 = 1818456950;
              goto LABEL_107;
            }
            a2->signed int mSelector = 1986817381;
            *a3 = 1886679669;
LABEL_147:
            unsigned int v7 = 1818453110;
            goto LABEL_107;
          }
          if (v5 != 1836462707)
          {
            if (v5 != 1836475427) {
              return this;
            }
            unsigned int v7 = 1818453106;
            AudioObjectPropertySelector v11 = 1986817381;
            goto LABEL_173;
          }
          a2->signed int mSelector = 1986817381;
          *a3 = 1886679669;
LABEL_178:
          unsigned int v7 = 1818453107;
          goto LABEL_107;
        }
        if (v5 > 1836414052)
        {
          AudioObjectPropertySelector v6 = 1836414053;
          if (v5 != 1836414053)
          {
            if (v5 == 1836462692)
            {
              a2->signed int mSelector = 1986817381;
              *a3 = 1886679669;
LABEL_141:
              unsigned int v7 = 1818456932;
              goto LABEL_107;
            }
            return this;
          }
          goto LABEL_105;
        }
        if (v5 != 1836281891)
        {
          if (v5 != 1836281966) {
            return this;
          }
          a2->signed int mSelector = 1936744814;
          *a3 = 1886679669;
          unsigned int v7 = 1936745334;
          goto LABEL_107;
        }
        a2->signed int mSelector = 1936744814;
        *a3 = 1886679669;
        goto LABEL_155;
      }
      if (v5 <= 1835295778)
      {
        if (v5 > 1819501421)
        {
          if (v5 != 1819501422)
          {
            AudioObjectPropertySelector v6 = 1819504226;
            goto LABEL_104;
          }
          AudioObjectPropertySelector v10 = 1685287523;
        }
        else if (v5 == 1818455660)
        {
          AudioObjectPropertySelector v10 = 1852601964;
        }
        else
        {
          if (v5 != 1818456942) {
            return this;
          }
          AudioObjectPropertySelector v10 = 1668047723;
        }
        goto LABEL_167;
      }
      if (v5 <= 1835295853)
      {
        if (v5 == 1835295779)
        {
          unsigned int v7 = 1935892841;
          AudioObjectPropertySelector v6 = 1684370292;
          goto LABEL_106;
        }
        if (v5 != 1835295843) {
          return this;
        }
        AudioObjectPropertySelector v10 = 1684370292;
        goto LABEL_167;
      }
      if (v5 == 1835295854)
      {
        a2->signed int mSelector = 1684370292;
        unsigned int v7 = 1835295854;
        goto LABEL_107;
      }
      if (v5 != 1835295859) {
        return this;
      }
      AudioObjectPropertySelector v14 = 1684370292;
    }
    else
    {
      if (v5 > 1684157045)
      {
        if (v5 <= 1751740517)
        {
          if (v5 > 1718432369)
          {
            AudioObjectPropertySelector v6 = 1718432370;
            if (v5 != 1718432370)
            {
              if (v5 == 1751740451)
              {
                unsigned int v7 = 1935892841;
                AudioObjectPropertySelector v6 = 1751740518;
                goto LABEL_106;
              }
              return this;
            }
            goto LABEL_105;
          }
          if (v5 == 1684157046)
          {
            AudioObjectPropertySelector v16 = 1986817381;
LABEL_177:
            a2->signed int mSelector = v16;
            goto LABEL_178;
          }
          AudioObjectPropertySelector v6 = 1684895092;
          goto LABEL_104;
        }
        if (v5 > 1769174369)
        {
          if (v5 == 1769174370)
          {
            unsigned int v7 = 1650685548;
            AudioObjectPropertySelector v6 = 1635017576;
            goto LABEL_106;
          }
          AudioObjectPropertySelector v6 = 1784767339;
          if (v5 == 1784767339) {
            goto LABEL_105;
          }
          AudioObjectPropertySelector v6 = 1815241314;
          goto LABEL_104;
        }
        AudioObjectPropertySelector v9 = 1751740518;
        if (v5 == 1751740518) {
          goto LABEL_133;
        }
        if (v5 != 1751740524) {
          return this;
        }
        AudioObjectPropertySelector v10 = 1751740518;
LABEL_167:
        a2->signed int mSelector = v10;
        unsigned int v7 = 1935894894;
        goto LABEL_107;
      }
      if (v5 <= 1668506402)
      {
        if (v5 > 1668049263)
        {
          if (v5 != 1668049264)
          {
            if (v5 != 1668181110) {
              return this;
            }
            a2->signed int mSelector = 1852601964;
            unsigned int v7 = 1668181110;
            goto LABEL_107;
          }
          unsigned int v7 = 1650685548;
          AudioObjectPropertySelector v6 = 1668049264;
          goto LABEL_106;
        }
        AudioObjectPropertySelector v6 = 1650602615;
        if (v5 != 1650602615)
        {
          if (v5 != 1667787120) {
            return this;
          }
          a2->signed int mSelector = 1751740518;
          unsigned int v7 = 1667787120;
          goto LABEL_107;
        }
        goto LABEL_105;
      }
      if (v5 <= 1668506477)
      {
        if (v5 == 1668506403)
        {
          unsigned int v7 = 1935892841;
          AudioObjectPropertySelector v6 = 1668047723;
          goto LABEL_106;
        }
        if (v5 != 1668506475) {
          return this;
        }
        a2->signed int mSelector = 1668047723;
LABEL_151:
        unsigned int v7 = 1668049771;
        goto LABEL_107;
      }
      if (v5 == 1668506478)
      {
        a2->signed int mSelector = 1668047723;
        unsigned int v7 = 1668506478;
        goto LABEL_107;
      }
      if (v5 != 1668510307) {
        return this;
      }
      AudioObjectPropertySelector v14 = 1668047723;
    }
LABEL_169:
    a2->signed int mSelector = v14;
    goto LABEL_170;
  }
  if (v5 <= 1936941930)
  {
    if (v5 > 1936748066)
    {
      if (v5 > 1936811877)
      {
        if (v5 > 1936811890)
        {
          if (v5 != 1936811891)
          {
            if (v5 != 1936811892)
            {
              if (v5 != 1936941859) {
                return this;
              }
              unsigned int v7 = 1935892841;
              AudioObjectPropertySelector v6 = 1685287523;
              goto LABEL_106;
            }
            AudioObjectPropertySelector v13 = 1936028007;
            goto LABEL_140;
          }
          AudioObjectPropertySelector v8 = 1936028007;
LABEL_138:
          a2->signed int mSelector = v8;
          goto LABEL_144;
        }
        if (v5 != 1936811878)
        {
          if (v5 != 1936811890) {
            return this;
          }
          unsigned int v7 = 1818453106;
          AudioObjectPropertySelector v6 = 1936028007;
          goto LABEL_106;
        }
        AudioObjectPropertySelector v16 = 1936028007;
        goto LABEL_177;
      }
      if (v5 > 1936811108)
      {
        if (v5 == 1936811109)
        {
          a2->signed int mSelector = 1936028002;
          unsigned int v7 = 1651272548;
          goto LABEL_107;
        }
        if (v5 != 1936811876) {
          return this;
        }
        AudioObjectPropertySelector v12 = 1936028007;
        goto LABEL_146;
      }
      if (v5 != 1936748067)
      {
        if (v5 != 1936811108) {
          return this;
        }
        unsigned int v7 = 1651272546;
        AudioObjectPropertySelector v6 = 1936028002;
        goto LABEL_106;
      }
      a2->signed int mSelector = 1936744814;
LABEL_155:
      unsigned int v7 = 1936745315;
      goto LABEL_107;
    }
    if (v5 > 1935946357)
    {
      if (v5 > 1936682094)
      {
        AudioObjectPropertySelector v6 = 1936682095;
        if (v5 != 1936682095)
        {
          if (v5 == 1936744814)
          {
            a2->signed int mSelector = 1936744814;
            unsigned int v7 = 1936745334;
            goto LABEL_107;
          }
          return this;
        }
        goto LABEL_105;
      }
      if (v5 != 1935946358)
      {
        if (v5 != 1936553332) {
          return this;
        }
        unsigned int v7 = 1650685548;
        AudioObjectPropertySelector v6 = 1937072749;
        goto LABEL_106;
      }
      AudioObjectPropertySelector v16 = 1937072758;
      goto LABEL_177;
    }
    if (v5 <= 1885888877)
    {
      if (v5 == 1852601891)
      {
        unsigned int v7 = 1935892841;
        AudioObjectPropertySelector v6 = 1852601964;
        goto LABEL_106;
      }
      AudioObjectPropertySelector v9 = 1852601964;
      if (v5 != 1852601964) {
        return this;
      }
LABEL_133:
      a2->signed int mSelector = v9;
LABEL_170:
      unsigned int v7 = 1935893353;
      goto LABEL_107;
    }
    AudioObjectPropertySelector v6 = 1885888878;
    if (v5 == 1885888878) {
      goto LABEL_105;
    }
    AudioObjectPropertySelector v6 = 1885893481;
LABEL_104:
    if (v5 != v6) {
      return this;
    }
    goto LABEL_105;
  }
  if (v5 <= 1952542819)
  {
    if (v5 > 1937138722)
    {
      if (v5 > 1937140844)
      {
        if (v5 != 1937140845)
        {
          if (v5 != 1937142886)
          {
            AudioObjectPropertySelector v6 = 1952541794;
            goto LABEL_104;
          }
          AudioObjectPropertySelector v15 = 1937072758;
          goto LABEL_163;
        }
        AudioObjectPropertySelector v8 = 1937072758;
        goto LABEL_138;
      }
      if (v5 == 1937138723)
      {
        unsigned int v7 = 1818453106;
        AudioObjectPropertySelector v6 = 1937072758;
        goto LABEL_106;
      }
      if (v5 != 1937140836) {
        return this;
      }
      AudioObjectPropertySelector v12 = 1937072758;
      goto LABEL_146;
    }
    if (v5 <= 1936945762)
    {
      if (v5 != 1936941931)
      {
        if (v5 != 1936941934) {
          return this;
        }
        a2->signed int mSelector = 1685287523;
        unsigned int v7 = 1936941934;
        goto LABEL_107;
      }
      a2->signed int mSelector = 1685287523;
      goto LABEL_151;
    }
    if (v5 != 1936945763)
    {
      if (v5 == 1937125988)
      {
        AudioObjectPropertySelector v13 = 1937072758;
LABEL_140:
        a2->signed int mSelector = v13;
        goto LABEL_141;
      }
      return this;
    }
    AudioObjectPropertySelector v14 = 1685287523;
    goto LABEL_169;
  }
  if (v5 > 1986229349)
  {
    if (v5 <= 1987013731)
    {
      if (v5 != 1986229350)
      {
        if (v5 != 1986290211) {
          return this;
        }
        unsigned int v7 = 1818453106;
        AudioObjectPropertySelector v6 = 1986817381;
        goto LABEL_106;
      }
      AudioObjectPropertySelector v15 = 1986817381;
LABEL_163:
      a2->signed int mSelector = v15;
LABEL_164:
      unsigned int v7 = 1818457190;
      goto LABEL_107;
    }
    if (v5 != 1987013732)
    {
      AudioObjectPropertySelector v6 = 1999790690;
      if (v5 != 1999790690)
      {
        if (v5 != 1987013741) {
          return this;
        }
        AudioObjectPropertySelector v8 = 1986817381;
        goto LABEL_138;
      }
LABEL_105:
      unsigned int v7 = 1650685548;
LABEL_106:
      a2->signed int mSelector = v6;
LABEL_107:
      *a4 = v7;
      return this;
    }
    AudioObjectPropertySelector v12 = 1986817381;
LABEL_146:
    a2->signed int mSelector = v12;
    goto LABEL_147;
  }
  if (v5 <= 1953002100)
  {
    if (v5 == 1952542820)
    {
      unsigned int v7 = 1650685548;
      AudioObjectPropertySelector v6 = 1702259059;
      goto LABEL_106;
    }
    if (v5 != 1953002099) {
      return this;
    }
    unsigned int v7 = 1650685548;
    AudioObjectPropertySelector v11 = 1936682095;
LABEL_173:
    a2->signed int mSelector = v11;
    *a3 = 1886679669;
    goto LABEL_107;
  }
  if (v5 == 1953002101)
  {
    unsigned int v7 = 1650685548;
    AudioObjectPropertySelector v11 = 1836414053;
    goto LABEL_173;
  }
  if (v5 == 1983013986)
  {
    AudioObjectPropertySelector v13 = 1986817381;
    goto LABEL_140;
  }
  return this;
}

void AMCP::DAL::Ring_Buffer_Base::commit_direct_write(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + 8;
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::union_range((uint64_t)&v22, (AMCP::DAL::DAL_Time *)(a1 + 8), (AMCP::DAL::DAL_Time *)(a3 + 16));
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)v27, &v22);
  if (*((void *)&v26 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
  }
  if (*((void *)&v24[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24[0] + 1));
  }
  AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)v16, a1);
  boost::operators_impl::operator-((AMCP::DAL::DAL_Time *)&v22, (uint64_t)v30, (AMCP::DAL::DAL_Time_Delta *)v16);
  BOOL v5 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)v27, (AMCP::DAL::DAL_Time *)&v22);
  BOOL v6 = !v5;
  if (v5) {
    unsigned int v7 = &v22;
  }
  else {
    unsigned int v7 = (long long *)v27;
  }
  long long v18 = *v7;
  uint64_t v19 = *((void *)v7 + 2);
  AudioObjectPropertySelector v8 = (uint64_t *)v24;
  if (!v5) {
    AudioObjectPropertySelector v8 = &v28;
  }
  uint64_t v9 = *v8;
  AudioObjectPropertySelector v10 = (std::__shared_weak_count *)*((void *)&v24[0] + 1);
  if (v6) {
    AudioObjectPropertySelector v11 = v29;
  }
  else {
    AudioObjectPropertySelector v11 = (std::__shared_weak_count *)*((void *)&v24[0] + 1);
  }
  uint64_t v20 = v9;
  unsigned __int16 v21 = v11;
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    AudioObjectPropertySelector v10 = (std::__shared_weak_count *)*((void *)&v24[0] + 1);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v22, (const AMCP::DAL::DAL_Time *)&v18, (const AMCP::DAL::DAL_Time *)v30);
  *(_OWORD *)uint64_t v4 = v22;
  *(void *)(v4 + 16) = v23;
  long long v12 = v24[0];
  v24[0] = 0uLL;
  AudioObjectPropertySelector v13 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v12;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  *(_OWORD *)(a1 + 48) = v24[1];
  *(void *)(a1 + 64) = v25;
  long long v14 = v26;
  long long v26 = 0uLL;
  AudioObjectPropertySelector v15 = *(std::__shared_weak_count **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = v14;
  if (v15)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    if (*((void *)&v26 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
    }
  }
  if (*((void *)&v24[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24[0] + 1));
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
}

void sub_1BAE03EAC(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)(v2 - 128));
  _Unwind_Resume(a1);
}

BOOL caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::union_range(uint64_t a1, AMCP::DAL::DAL_Time *this, AMCP::DAL::DAL_Time *a3)
{
  BOOL v6 = (AMCP::DAL::DAL_Time *)((char *)this + 40);
  BOOL result = AMCP::DAL::DAL_Time::operator<(this, (AMCP::DAL::DAL_Time *)((char *)this + 40));
  if (result)
  {
    AudioObjectPropertySelector v8 = (AMCP::DAL::DAL_Time *)((char *)a3 + 40);
    BOOL result = AMCP::DAL::DAL_Time::operator<(a3, (AMCP::DAL::DAL_Time *)((char *)a3 + 40));
    if (result)
    {
      if (!AMCP::DAL::DAL_Time::operator<(a3, this)) {
        a3 = this;
      }
      BOOL result = AMCP::DAL::DAL_Time::operator<(v6, v8);
      if (result) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = v6;
      }
      *(_OWORD *)a1 = *(_OWORD *)a3;
      uint64_t v10 = *((void *)a3 + 3);
      *(void *)(a1 + 16) = *((void *)a3 + 2);
      *(void *)(a1 + 24) = v10;
      uint64_t v11 = *((void *)a3 + 4);
      *(void *)(a1 + 32) = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)(a1 + 40) = *(_OWORD *)v9;
      uint64_t v12 = *((void *)v9 + 3);
      *(void *)(a1 + 56) = *((void *)v9 + 2);
      *(void *)(a1 + 64) = v12;
      uint64_t v13 = *((void *)v9 + 4);
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)this;
      uint64_t v17 = *((void *)this + 3);
      *(void *)(a1 + 16) = *((void *)this + 2);
      *(void *)(a1 + 24) = v17;
      uint64_t v18 = *((void *)this + 4);
      *(void *)(a1 + 32) = v18;
      if (v18) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)(a1 + 40) = *(_OWORD *)v6;
      uint64_t v19 = *((void *)this + 8);
      uint64_t v13 = *((void *)this + 9);
      *(void *)(a1 + 56) = *((void *)v6 + 2);
      *(void *)(a1 + 64) = v19;
    }
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a3;
    uint64_t v14 = *((void *)a3 + 3);
    *(void *)(a1 + 16) = *((void *)a3 + 2);
    *(void *)(a1 + 24) = v14;
    uint64_t v15 = *((void *)a3 + 4);
    *(void *)(a1 + 32) = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)(a1 + 40) = *(_OWORD *)((char *)a3 + 40);
    uint64_t v16 = *((void *)a3 + 8);
    *(void *)(a1 + 56) = *((void *)a3 + 7);
    *(void *)(a1 + 64) = v16;
    uint64_t v13 = *((void *)a3 + 9);
  }
  *(void *)(a1 + 72) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void AMCP::DAL::Ring_Buffer_Base::create_writable_range(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  BOOL v6 = (AMCP::DAL::DAL_Time *)(a2 + 5);
  AMCP::DAL::DAL_Time::operator-((uint64_t)buf, (AMCP::DAL::DAL_Time *)(a2 + 5), (AMCP::DAL::DAL_Time *)a2);
  AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)&v35, a1);
  BOOL v7 = AMCP::DAL::DAL_Time_Delta::operator<((AMCP::DAL::DAL_Time_Delta *)&v35, (uint64_t)buf);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  AudioObjectPropertySelector v8 = *(AMCP::Log::Scope_Registry **)&v50[6];
  if (*(void *)&v50[6]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v50[6]);
  }
  if (v7)
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v13 = **(NSObject ***)buf;
    if (*(void *)v46) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v46);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      AMCP::DAL::DAL_Time::operator-((uint64_t)&v35, v6, (AMCP::DAL::DAL_Time *)a2);
      if (((uint64_t)v35.__vftable & 2) == 0) {
        AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v35);
      }
      imp = v35.__imp_.__imp_;
      AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)v42, a1);
      if ((v42[0] & 2) == 0) {
        AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)v42);
      }
      *(_DWORD *)pthread_attr_t buf = 67110402;
      *(_DWORD *)&buf[4] = v15;
      *(_WORD *)long long v46 = 2080;
      *(void *)&v46[2] = "Ring_Buffer.cpp";
      __int16 v47 = 1024;
      int v48 = 255;
      __int16 v49 = 2080;
      *(void *)uint64_t v50 = "not (range.length() <= get_length_in_frames())";
      *(_WORD *)&v50[8] = 2048;
      *(void *)&v50[10] = vcvtmd_s64_f64(*(double *)&imp);
      *(_WORD *)&v50[18] = 2048;
      *(void *)&v50[20] = vcvtmd_s64_f64(v43);
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s range too large for ring buffer: range size: %llu  ring buffer size: %llu", buf, 0x36u);
      if (v44) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v44);
      }
      if (v38) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v38);
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    __cxa_allocate_exception(0x40uLL);
    AMCP::DAL::DAL_Time::operator-((uint64_t)v42, v6, (AMCP::DAL::DAL_Time *)a2);
    if ((v42[0] & 2) == 0) {
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)v42);
    }
    double v17 = v43;
    AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)v31, a1);
    if ((v31[0] & 2) == 0) {
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)v31);
    }
    caulk::make_string((caulk *)"range too large for ring buffer: range size: %llu  ring buffer size: %llu", (uint64_t)&v33, vcvtmd_s64_f64(v17), vcvtmd_s64_f64(v32));
    std::logic_error::logic_error(&v34, &v33);
    v34.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v35, &v34);
    uint64_t v37 = 0;
    long long v38 = 0;
    uint64_t v39 = 0;
    int v40 = -1;
    v35.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v36 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(void *)&v50[6] = "virtual Writable_Range AMCP::DAL::Ring_Buffer_Base::create_writable_range(DAL_Time_Range) const";
    *(void *)&v50[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    *(_DWORD *)&v50[22] = 255;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v26);
    long long v29 = v26;
    uint64_t v30 = v27;
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    uint64_t v28 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  long long v18 = *(_OWORD *)a2;
  uint64_t v9 = a2[3];
  uint64_t v19 = a2[2];
  uint64_t v20 = v9;
  uint64_t v10 = (std::__shared_weak_count *)a2[4];
  unsigned __int16 v21 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v22 = *(_OWORD *)v6;
  uint64_t v12 = a2[8];
  uint64_t v11 = (std::__shared_weak_count *)a2[9];
  uint64_t v23 = *((void *)v6 + 2);
  uint64_t v24 = v12;
  uint64_t v25 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::DAL::Writable_Range::Writable_Range(a3, &v18, a1);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
}

void sub_1BAE0446C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  __int16 v47 = *(std::__shared_weak_count **)(v45 - 152);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::Ring_Buffer_Base::create_writable_range(AMCP::DAL::Ring_Buffer_Base *this)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  int v1 = **(NSObject ***)buf;
  if (*(void *)v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v20);
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    uint64_t v2 = pthread_self();
    mach_port_t v3 = pthread_mach_thread_np(v2);
    *(_DWORD *)pthread_attr_t buf = 67109890;
    *(_DWORD *)&buf[4] = v3;
    *(_WORD *)uint64_t v20 = 2080;
    *(void *)&_DWORD v20[2] = "Ring_Buffer.cpp";
    __int16 v21 = 1024;
    int v22 = 235;
    __int16 v23 = 2080;
    *(void *)uint64_t v24 = "not (false)";
    _os_log_error_impl(&dword_1BAA78000, v1, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s A range is required when writing to a ring buffer", buf, 0x22u);
  }
  AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v18);
  __cxa_allocate_exception(0x40uLL);
  caulk::make_string((caulk *)"A range is required when writing to a ring buffer", (uint64_t)&v10);
  std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
  std::logic_error::logic_error(&v12, &v11);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v17 = -1;
  v12.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
  uint64_t v13 = &unk_1F1489CF0;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v12);
  *(void *)&v24[6] = "virtual Writable_Range AMCP::DAL::Ring_Buffer_Base::create_writable_range() const";
  uint64_t v25 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
  int v26 = 235;
  std::vector<void *>::vector(&v5);
  int v4 = backtrace((void **)v5, (*((void *)&v5 + 1) - (void)v5) >> 3);
  std::vector<void *>::resize((char **)&v5, v4);
  long long v8 = v5;
  uint64_t v9 = v6;
  long long v5 = 0uLL;
  uint64_t v6 = 0;
  BOOL v7 = &unk_1F148AA90;
  boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
}

void AMCP::DAL::Ring_Buffer_Base::create_readable_range(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 72))(v46);
  BOOL v6 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses((uint64_t)v46, a2);
  if (!v6)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    std::logic_error v11 = **(NSObject ***)buf;
    if (*(void *)v50) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v50);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      std::logic_error v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      double range = AMCP::DAL::DAL_Time_Range::get_range((AMCP::DAL::DAL_Time_Range *)v46);
      AMCP::DAL::DAL_Time_Range::get_range((AMCP::DAL::DAL_Time_Range *)v46);
      double v16 = v15;
      double v17 = AMCP::DAL::DAL_Time_Range::get_range((AMCP::DAL::DAL_Time_Range *)a2);
      AMCP::DAL::DAL_Time_Range::get_range((AMCP::DAL::DAL_Time_Range *)a2);
      *(_DWORD *)pthread_attr_t buf = 67111170;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)uint64_t v50 = 2080;
      *(void *)&v50[2] = "Ring_Buffer.cpp";
      __int16 v51 = 1024;
      int v52 = 244;
      __int16 v53 = 2080;
      *(void *)long long v54 = "not (valid_range.encompasses(range))";
      *(_WORD *)&v54[8] = 2048;
      *(void *)&v54[10] = a1;
      *(_WORD *)&v54[18] = 2048;
      *(void *)&v54[20] = vcvtmd_s64_f64(range);
      __int16 v55 = 2048;
      unint64_t v56 = vcvtmd_s64_f64(v16);
      __int16 v57 = 2048;
      unint64_t v58 = vcvtmd_s64_f64(v17);
      __int16 v59 = 2048;
      unint64_t v60 = vcvtmd_s64_f64(v18);
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring Buffer %p: valid range [%lld %lld] does not encompass requested range [%lld %lld]", buf, 0x54u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v45);
    __cxa_allocate_exception(0x40uLL);
    double v19 = AMCP::DAL::DAL_Time_Range::get_range((AMCP::DAL::DAL_Time_Range *)v46);
    AMCP::DAL::DAL_Time_Range::get_range((AMCP::DAL::DAL_Time_Range *)v46);
    double v21 = v20;
    double v22 = AMCP::DAL::DAL_Time_Range::get_range((AMCP::DAL::DAL_Time_Range *)a2);
    AMCP::DAL::DAL_Time_Range::get_range((AMCP::DAL::DAL_Time_Range *)a2);
    caulk::make_string((caulk *)"Ring Buffer %p: valid range [%lld %lld] does not encompass requested range [%lld %lld]", (uint64_t)&v37, a1, vcvtmd_s64_f64(v19), vcvtmd_s64_f64(v21), vcvtmd_s64_f64(v22), vcvtmd_s64_f64(v23));
    std::logic_error::logic_error(&v38, &v37);
    v38.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v39, &v38);
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    int v44 = -1;
    v39.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v40 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v39);
    *(void *)&v54[6] = "virtual Readable_Range AMCP::DAL::Ring_Buffer_Base::create_readable_range(DAL_Time_Range) const";
    *(void *)&v54[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    *(_DWORD *)&v54[22] = 244;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v32);
    long long v35 = v32;
    uint64_t v36 = v33;
    long long v32 = 0uLL;
    uint64_t v33 = 0;
    std::logic_error v34 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  long long v24 = *(_OWORD *)a2;
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v25 = *(void *)(a2 + 16);
  uint64_t v26 = v7;
  long long v8 = *(std::__shared_weak_count **)(a2 + 32);
  uint64_t v27 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v28 = *(_OWORD *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v29 = *(void *)(a2 + 56);
  uint64_t v30 = v9;
  std::string v10 = *(std::__shared_weak_count **)(a2 + 72);
  long long v31 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::DAL::Writable_Range::Writable_Range(a3, &v24, a1);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
}

void sub_1BAE04DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)(v50 - 256));
  _Unwind_Resume(a1);
}

void AMCP::DAL::Ring_Buffer_Base::create_readable_range(AMCP::DAL::Ring_Buffer_Base *this)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  int v1 = **(NSObject ***)buf;
  if (*(void *)v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v20);
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    uint64_t v2 = pthread_self();
    mach_port_t v3 = pthread_mach_thread_np(v2);
    *(_DWORD *)pthread_attr_t buf = 67109890;
    *(_DWORD *)&buf[4] = v3;
    *(_WORD *)double v20 = 2080;
    *(void *)&_DWORD v20[2] = "Ring_Buffer.cpp";
    __int16 v21 = 1024;
    int v22 = 227;
    __int16 v23 = 2080;
    *(void *)long long v24 = "not (false)";
    _os_log_error_impl(&dword_1BAA78000, v1, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s A range is required when reading from a ring buffer", buf, 0x22u);
  }
  AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v18);
  __cxa_allocate_exception(0x40uLL);
  caulk::make_string((caulk *)"A range is required when reading from a ring buffer", (uint64_t)&v10);
  std::logic_error::logic_error(&v11, &v10);
  v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
  std::logic_error::logic_error(&v12, &v11);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v17 = -1;
  v12.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
  mach_port_t v13 = &unk_1F1489CF0;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v12);
  *(void *)&v24[6] = "virtual Readable_Range AMCP::DAL::Ring_Buffer_Base::create_readable_range() const";
  uint64_t v25 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
  int v26 = 227;
  std::vector<void *>::vector(&v5);
  int v4 = backtrace((void **)v5, (*((void *)&v5 + 1) - (void)v5) >> 3);
  std::vector<void *>::resize((char **)&v5, v4);
  long long v8 = v5;
  uint64_t v9 = v6;
  long long v5 = 0uLL;
  uint64_t v6 = 0;
  uint64_t v7 = &unk_1F148AA90;
  boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
}

void AMCP::DAL::Ring_Buffer_Base::reset_time(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  mach_port_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v10, &v8, 0.0, 0.0);
  *(_OWORD *)uint64_t v2 = v10;
  *(void *)(v2 + 16) = v11;
  long long v4 = v12;
  long long v12 = 0uLL;
  long long v5 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(_OWORD *)(a1 + 48) = v13;
  *(void *)(a1 + 64) = v14;
  long long v6 = v15;
  long long v15 = 0uLL;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = v6;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    if (*((void *)&v15 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
    }
  }
  if (*((void *)&v12 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void AMCP::DAL::Ring_Buffer_Base::set_anchor_time_and_nominal_buffer_size(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(std::__shared_weak_count **)(a3 + 32);
  uint64_t v9 = *(void *)(a3 + 24);
  long long v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v11, &v9, 0.0, 0.0);
  *(_OWORD *)(a1 + 8) = v11;
  *(void *)(a1 + 24) = v12;
  long long v5 = v13;
  long long v13 = 0uLL;
  long long v6 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(_OWORD *)(a1 + 48) = v14;
  *(void *)(a1 + 64) = v15;
  long long v7 = v16;
  long long v16 = 0uLL;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = v7;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    if (*((void *)&v16 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
    }
  }
  if (*((void *)&v13 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

uint64_t AMCP::DAL::Ring_Buffer_Base::get_allowed_read_range(AMCP::DAL::Ring_Buffer_Base *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 64))();
}

void AMCP::DAL::Ring_Buffer_Base::receive_zeros(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v39 = *a3;
  uint64_t v5 = *((void *)a3 + 3);
  uint64_t v40 = *((void *)a3 + 2);
  uint64_t v41 = v5;
  long long v6 = (std::__shared_weak_count *)*((void *)a3 + 4);
  uint64_t v42 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v43 = *(long long *)((char *)a3 + 40);
  uint64_t v7 = *((void *)a3 + 8);
  uint64_t v44 = *((void *)a3 + 7);
  uint64_t v45 = v7;
  uint64_t v8 = (std::__shared_weak_count *)*((void *)a3 + 9);
  long long v46 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::DAL::Ring_Buffer_Base::create_writable_range(a1, &v39, (uint64_t)v47);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  AMCP::DAL::DAL_Timed_Segment::translate_range(v38, v50, (uint64_t)v47);
  uint64_t v9 = v38[0];
  long long v10 = v38[1];
  while (v9 != v10)
  {
    AMCP::DAL::Container::erase_range(*(void *)(a1 + 88));
    v9 += 12;
  }
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::union_range((uint64_t)&v28, (AMCP::DAL::DAL_Time *)(a1 + 8), (AMCP::DAL::DAL_Time *)a3);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)v33, &v28);
  if (*((void *)&v32 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
  }
  if (*((void *)&v30[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v30[0] + 1));
  }
  AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)v22, a1);
  boost::operators_impl::operator-((AMCP::DAL::DAL_Time *)&v28, (uint64_t)v36, (AMCP::DAL::DAL_Time_Delta *)v22);
  BOOL v11 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)v33, (AMCP::DAL::DAL_Time *)&v28);
  BOOL v12 = !v11;
  if (v11) {
    long long v13 = &v28;
  }
  else {
    long long v13 = (long long *)v33;
  }
  long long v24 = *v13;
  uint64_t v25 = *((void *)v13 + 2);
  long long v14 = (uint64_t *)v30;
  if (!v11) {
    long long v14 = &v34;
  }
  uint64_t v15 = *v14;
  long long v16 = (std::__shared_weak_count *)*((void *)&v30[0] + 1);
  if (v12) {
    int v17 = v35;
  }
  else {
    int v17 = (std::__shared_weak_count *)*((void *)&v30[0] + 1);
  }
  uint64_t v26 = v15;
  uint64_t v27 = v17;
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    long long v16 = (std::__shared_weak_count *)*((void *)&v30[0] + 1);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v28, (const AMCP::DAL::DAL_Time *)&v24, (const AMCP::DAL::DAL_Time *)v36);
  *(_OWORD *)(a1 + 8) = v28;
  *(void *)(a1 + 24) = v29;
  long long v18 = v30[0];
  v30[0] = 0uLL;
  double v19 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v18;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  *(_OWORD *)(a1 + 48) = v30[1];
  *(void *)(a1 + 64) = v31;
  long long v20 = v32;
  long long v32 = 0uLL;
  __int16 v21 = *(std::__shared_weak_count **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = v20;
  if (v21)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    if (*((void *)&v32 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
    }
  }
  if (*((void *)&v30[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v30[0] + 1));
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  v33[0] = v38;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)v33);
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
}

void sub_1BAE05744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&a30);
  a30 = &a40;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&a30);
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)(v41 - 136));
  _Unwind_Resume(a1);
}

void AMCP::DAL::Ring_Buffer_Base::translate_range(AMCP::DAL::Ring_Buffer_Base *this, const AMCP::DAL::DAL_Time_Range *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 11) + 104))(*((void *)this + 11));
  uint64_t v5 = *((void *)this + 11);
  if (v5) {
    double v6 = (*(double (**)(uint64_t))(*(void *)v5 + 48))(v5);
  }
  else {
    double v6 = 0.0;
  }
  AMCP::DAL::DAL_Buffer::get_timebase((AMCP::DAL::DAL_Buffer *)&v7, (uint64_t)this);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)v9, &v7, 0.0, v6);
  (*(void (**)(uint64_t, unsigned char *, const AMCP::DAL::DAL_Time_Range *))(*(void *)v4 + 16))(v4, v9, a2);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1BAE058F8(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)va);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *AMCP::DAL::Ring_Buffer::get_direct_write_ranges@<X0>(AMCP::DAL::Ring_Buffer *this@<X0>, const AMCP::DAL::DAL_Time_Range *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  AMCP::DAL::Ring_Buffer_Base::translate_range(this, a2);
  uint64_t v5 = v22;
  for (uint64_t i = v23; v5 != i; v5 += 96)
  {
    v14[0] = *(_OWORD *)v5;
    long long v7 = *(_OWORD *)(v5 + 16);
    uint64_t v15 = *(void *)(v5 + 32);
    v14[1] = v7;
    uint64_t v16 = *(void *)(v5 + 40);
    uint64_t v8 = *(std::__shared_weak_count **)(v5 + 48);
    int v17 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v9 = *(_OWORD *)(v5 + 56);
    uint64_t v19 = *(void *)(v5 + 72);
    long long v18 = v9;
    uint64_t v20 = *(void *)(v5 + 80);
    long long v10 = *(std::__shared_weak_count **)(v5 + 88);
    __int16 v21 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v11 = *((void *)this + 12);
    v13.n128_u64[0] = *((void *)this + 11);
    v13.n128_u64[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    std::vector<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::emplace_back<AMCP::DAL::Buffer_Time_Translator::Translation_Range&,AMCP::DAL::Container>(a3, (uint64_t)v14, &v13);
    if (v13.n128_u64[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v13.n128_u64[1]);
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  *(void *)&v14[0] = &v22;
  return std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)v14);
}

void sub_1BAE05A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::vector<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)va);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::emplace_back<AMCP::DAL::Buffer_Time_Translator::Translation_Range&,AMCP::DAL::Container>(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  double v6 = a1 + 2;
  unint64_t v7 = a1[2];
  unint64_t v8 = a1[1];
  if (v8 >= v7)
  {
    uint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8 - *a1) >> 4);
    if ((unint64_t)(v11 + 1) > 0x249249249249249) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - *a1) >> 4);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= v11 + 1) {
      uint64_t v13 = v11 + 1;
    }
    if (v12 >= 0x124924924924924) {
      uint64_t v14 = 0x249249249249249;
    }
    else {
      uint64_t v14 = v13;
    }
    uint64_t v20 = v6;
    if (v14) {
      uint64_t v14 = (uint64_t)std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>((caulk::rt_safe_memory_resource *)v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = v14;
    uint64_t v17 = v14 + 112 * v11;
    uint64_t v19 = (char *)(v14 + 112 * v15);
    std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>::pair[abi:ne180100]<AMCP::DAL::Buffer_Time_Translator::Translation_Range&,AMCP::DAL::Container,0>(v17, a2, a3);
    uint64_t v18 = v17 + 112;
    std::vector<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::__swap_out_circular_buffer(a1, &v16);
    uint64_t v10 = a1[1];
    std::__split_buffer<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>> &>::~__split_buffer((uint64_t)&v16);
  }
  else
  {
    std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>::pair[abi:ne180100]<AMCP::DAL::Buffer_Time_Translator::Translation_Range&,AMCP::DAL::Container,0>(v8, a2, a3);
    uint64_t v10 = v9 + 112;
  }
  a1[1] = v10;
}

__n128 std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>::pair[abi:ne180100]<AMCP::DAL::Buffer_Time_Translator::Translation_Range&,AMCP::DAL::Container,0>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  long long v5 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = *a3;
  *(__n128 *)(a1 + 96) = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

caulk::rt_safe_memory_resource *AMCP::DAL::Ring_Buffer::receive_data_at_range(uint64_t a1, uint64_t a2, uint64_t a3, AMCP::DAL::DAL_Time *a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint8_t *__return_ptr))(*(void *)a1 + 64))(buf);
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)buf, (AMCP::DAL::DAL_Time *)&v35))
  {
    (*(void (**)(std::logic_error *__return_ptr, uint64_t))(*(void *)a1 + 64))(&v22, a1);
    BOOL v7 = AMCP::DAL::DAL_Time::operator<(a4, (AMCP::DAL::DAL_Time *)&v26);
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    char v8 = !v7;
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
  }
  else
  {
    char v8 = 1;
  }
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  uint64_t v9 = *(AMCP::Log::Scope_Registry **)&v34[6];
  if (*(void *)&v34[6]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v34[6]);
  }
  if ((v8 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      unint64_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)pthread_attr_t buf = 67109890;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)uint64_t v30 = 2080;
      *(void *)&_OWORD v30[2] = "Ring_Buffer.cpp";
      __int16 v31 = 1024;
      int v32 = 308;
      __int16 v33 = 2080;
      *(void *)uint64_t v34 = "not (get_time_range().is_empty() or write_range.start() >= get_time_range().end())";
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::Write only allows writes at or after the end of the ring buffer", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v21);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::Write only allows writes at or after the end of the ring buffer", (uint64_t)&v19);
    std::logic_error::logic_error(&v20, &v19);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v22, &v20);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v23 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    *(void *)&v34[6] = "virtual void AMCP::DAL::Ring_Buffer::receive_data_at_range(const Source_ID &, const Readable_Ra"
                         "nge &, const DAL_Time_Range &)";
    long long v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    int v36 = 308;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    uint64_t v16 = &unk_1F148AA90;
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return AMCP::DAL::Ring_Buffer_Base::receive_data_write_at_range(a1, a3, a4);
}

void sub_1BAE05F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&a29);
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)(v29 - 144));
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *AMCP::DAL::Ring_Buffer_Base::receive_data_write_at_range(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  long long v5 = (AMCP::DAL::DAL_Time *)(a2 + 40);
  BOOL v6 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a2 + 40), (AMCP::DAL::DAL_Time *)a2);
  if (v6)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v48 = **(NSObject ***)buf;
    if (*(void *)v99) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v99);
    }
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      __int16 v49 = pthread_self();
      mach_port_t v50 = pthread_mach_thread_np(v49);
      *(_DWORD *)pthread_attr_t buf = 67109890;
      *(_DWORD *)&buf[4] = v50;
      *(_WORD *)uint64_t v99 = 2080;
      *(void *)&v99[2] = "Ring_Buffer.cpp";
      __int16 v100 = 1024;
      int v101 = 76;
      __int16 v102 = 2080;
      *(void *)v103 = "not (new_audio.get_time_range().end() >= new_audio.get_time_range().start())";
      _os_log_error_impl(&dword_1BAA78000, v48, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::receive_data_write_at_range: Bad time range (start > end)", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v70);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::receive_data_write_at_range: Bad time range (start > end)", (uint64_t)&v68);
    std::logic_error::logic_error(&v97, &v68);
    v97.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v89, &v97);
    long long v91 = 0uLL;
    *(void *)&long long v92 = 0;
    DWORD2(v92) = -1;
    v89.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    CFArrayRef v90 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v89);
    *(void *)&v103[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_write_at_range(const Readable_Range &, const DAL_Time_Range &)";
    long long v104 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    int v105 = 76;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v95);
    *(_OWORD *)&v86[8] = v95;
    *(void *)BOOL v86 = &unk_1F148AA90;
    uint64_t v87 = v96;
    long long v95 = 0uLL;
    uint64_t v96 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a2 + 80) + 56))(buf);
  BOOL v7 = (uint64_t *)(a1 + 88);
  BOOL is_compatible = AMCP::DAL::Container::container_is_compatible(*(void *)(a1 + 88), *(uint64_t *)buf);
  uint64_t v9 = *(AMCP::Log::Scope_Registry **)v99;
  if (*(void *)v99) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v99);
  }
  if (!is_compatible)
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    __int16 v51 = **(NSObject ***)buf;
    if (*(void *)v99) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v99);
    }
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      int v52 = pthread_self();
      mach_port_t v53 = pthread_mach_thread_np(v52);
      *(_DWORD *)pthread_attr_t buf = 67109890;
      *(_DWORD *)&buf[4] = v53;
      *(_WORD *)uint64_t v99 = 2080;
      *(void *)&v99[2] = "Ring_Buffer.cpp";
      __int16 v100 = 1024;
      int v101 = 77;
      __int16 v102 = 2080;
      *(void *)v103 = "not (m_container.container_is_compatible(new_audio.get_container()))";
      _os_log_error_impl(&dword_1BAA78000, v51, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::receive_data_write_at_range: Containers Are Not Compatible", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v70);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::receive_data_write_at_range: Containers Are Not Compatible", (uint64_t)&v68);
    std::logic_error::logic_error(&v97, &v68);
    v97.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v89, &v97);
    long long v91 = 0uLL;
    *(void *)&long long v92 = 0;
    DWORD2(v92) = -1;
    v89.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    CFArrayRef v90 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v89);
    *(void *)&v103[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_write_at_range(const Readable_Range &, const DAL_Time_Range &)";
    long long v104 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    int v105 = 77;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v95);
    *(_OWORD *)&v86[8] = v95;
    *(void *)BOOL v86 = &unk_1F148AA90;
    uint64_t v87 = v96;
    long long v95 = 0uLL;
    uint64_t v96 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  BOOL v10 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a2, v5);
  if (!v10)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v54 = **(NSObject ***)buf;
    if (*(void *)v99) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v99);
    }
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      __int16 v55 = pthread_self();
      mach_port_t v56 = pthread_mach_thread_np(v55);
      *(_DWORD *)pthread_attr_t buf = 67109890;
      *(_DWORD *)&buf[4] = v56;
      *(_WORD *)uint64_t v99 = 2080;
      *(void *)&v99[2] = "Ring_Buffer.cpp";
      __int16 v100 = 1024;
      int v101 = 78;
      __int16 v102 = 2080;
      *(void *)v103 = "not (not new_audio.get_time_range().is_empty())";
      _os_log_error_impl(&dword_1BAA78000, v54, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::receive_data_write_at_range: doesnt allow writes of zero length data", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v70);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::receive_data_write_at_range: doesnt allow writes of zero length data", (uint64_t)&v68);
    std::logic_error::logic_error(&v97, &v68);
    v97.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v89, &v97);
    long long v91 = 0uLL;
    *(void *)&long long v92 = 0;
    DWORD2(v92) = -1;
    v89.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    CFArrayRef v90 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v89);
    *(void *)&v103[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_write_at_range(const Readable_Range &, const DAL_Time_Range &)";
    long long v104 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    int v105 = 78;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v95);
    *(_OWORD *)&v86[8] = v95;
    *(void *)BOOL v86 = &unk_1F148AA90;
    uint64_t v87 = v96;
    long long v95 = 0uLL;
    uint64_t v96 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  AMCP::DAL::DAL_Time::operator-((uint64_t)buf, v5, (AMCP::DAL::DAL_Time *)a2);
  AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)&v89, a1);
  BOOL v11 = AMCP::DAL::DAL_Time_Delta::operator<((AMCP::DAL::DAL_Time_Delta *)&v89, (uint64_t)buf);
  if (*((void *)&v91 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v91 + 1));
  }
  unint64_t v12 = *(AMCP::Log::Scope_Registry **)&v103[6];
  if (*(void *)&v103[6]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v103[6]);
  }
  if (v11)
  {
    AMCP::Log::Scope_Registry::get(v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    __int16 v57 = **(NSObject ***)buf;
    if (*(void *)v99) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v99);
    }
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      unint64_t v58 = pthread_self();
      mach_port_t v59 = pthread_mach_thread_np(v58);
      *(_DWORD *)pthread_attr_t buf = 67109890;
      *(_DWORD *)&buf[4] = v59;
      *(_WORD *)uint64_t v99 = 2080;
      *(void *)&v99[2] = "Ring_Buffer.cpp";
      __int16 v100 = 1024;
      int v101 = 79;
      __int16 v102 = 2080;
      *(void *)v103 = "not (new_audio.get_time_range().length() <= get_length_in_frames())";
      _os_log_error_impl(&dword_1BAA78000, v57, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::receive_data_write_at_range: doesnt allow writes that are larger than the ring buffer's size", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v70);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::receive_data_write_at_range: doesnt allow writes that are larger than the ring buffer's size", (uint64_t)&v68);
    std::logic_error::logic_error(&v97, &v68);
    v97.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v89, &v97);
    long long v91 = 0uLL;
    *(void *)&long long v92 = 0;
    DWORD2(v92) = -1;
    v89.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    CFArrayRef v90 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v89);
    *(void *)&v103[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_write_at_range(const Readable_Range &, const DAL_Time_Range &)";
    long long v104 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    int v105 = 79;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v95);
    *(_OWORD *)&v86[8] = v95;
    *(void *)BOOL v86 = &unk_1F148AA90;
    uint64_t v87 = v96;
    long long v95 = 0uLL;
    uint64_t v96 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v13 = *(void *)(a1 + 32);
  long long v14 = *(std::__shared_weak_count **)(a1 + 40);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v15 = *(std::__shared_weak_count **)(a2 + 32);
  if (v15)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v13 != v16)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v15);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v60 = **(NSObject ***)buf;
    if (*(void *)v99) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v99);
    }
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      uint64_t v61 = pthread_self();
      mach_port_t v62 = pthread_mach_thread_np(v61);
      *(_DWORD *)pthread_attr_t buf = 67109890;
      *(_DWORD *)&buf[4] = v62;
      *(_WORD *)uint64_t v99 = 2080;
      *(void *)&v99[2] = "Ring_Buffer.cpp";
      __int16 v100 = 1024;
      int v101 = 80;
      __int16 v102 = 2080;
      *(void *)v103 = "not (m_valid_range.start().get_clock() == new_audio.get_time_range().start().get_clock())";
      _os_log_error_impl(&dword_1BAA78000, v60, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::receive_data_write_at_range: All times must use the same clock", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v70);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::receive_data_write_at_range: All times must use the same clock", (uint64_t)&v68);
    std::logic_error::logic_error(&v97, &v68);
    v97.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v89, &v97);
    long long v91 = 0uLL;
    *(void *)&long long v92 = 0;
    DWORD2(v92) = -1;
    v89.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    CFArrayRef v90 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v89);
    *(void *)&v103[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_write_at_range(const Readable_Range &, const DAL_Time_Range &)";
    long long v104 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    int v105 = 80;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v95);
    *(_OWORD *)&v86[8] = v95;
    *(void *)BOOL v86 = &unk_1F148AA90;
    uint64_t v87 = v96;
    long long v95 = 0uLL;
    uint64_t v96 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  AMCP::DAL::DAL_Time::operator-((uint64_t)buf, (AMCP::DAL::DAL_Time *)(a3 + 5), (AMCP::DAL::DAL_Time *)a3);
  AMCP::DAL::DAL_Time::operator-((uint64_t)&v89, v5, (AMCP::DAL::DAL_Time *)a2);
  BOOL v17 = AMCP::DAL::DAL_Time_Delta::operator==((AMCP::DAL::DAL_Time_Delta *)buf, (uint64_t)&v89);
  if (*((void *)&v91 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v91 + 1));
  }
  uint64_t v18 = *(AMCP::Log::Scope_Registry **)&v103[6];
  if (*(void *)&v103[6]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v103[6]);
  }
  if (!v17)
  {
    AMCP::Log::Scope_Registry::get(v18);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v63 = **(NSObject ***)buf;
    if (*(void *)v99) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v99);
    }
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      uint64_t v64 = pthread_self();
      mach_port_t v65 = pthread_mach_thread_np(v64);
      *(_DWORD *)pthread_attr_t buf = 67109890;
      *(_DWORD *)&buf[4] = v65;
      *(_WORD *)uint64_t v99 = 2080;
      *(void *)&v99[2] = "Ring_Buffer.cpp";
      __int16 v100 = 1024;
      int v101 = 81;
      __int16 v102 = 2080;
      *(void *)v103 = "not (write_range.length() == new_audio.get_time_range().length())";
      _os_log_error_impl(&dword_1BAA78000, v63, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::receive_data_write_at_range: source audio data length must match write range length", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v70);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::receive_data_write_at_range: source audio data length must match write range length", (uint64_t)&v68);
    std::logic_error::logic_error(&v97, &v68);
    v97.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v89, &v97);
    long long v91 = 0uLL;
    *(void *)&long long v92 = 0;
    DWORD2(v92) = -1;
    v89.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    CFArrayRef v90 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v89);
    *(void *)&v103[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_write_at_range(const Readable_Range &, const DAL_Time_Range &)";
    long long v104 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    int v105 = 81;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v95);
    *(_OWORD *)&v86[8] = v95;
    *(void *)BOOL v86 = &unk_1F148AA90;
    uint64_t v87 = v96;
    long long v95 = 0uLL;
    uint64_t v96 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  std::string v19 = (AMCP::DAL::DAL_Time *)(a1 + 48);
  BOOL v66 = (AMCP::DAL::DAL_Time *)(a1 + 8);
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a1 + 8), (AMCP::DAL::DAL_Time *)(a1 + 48))
    && AMCP::DAL::DAL_Time::operator<(v19, (AMCP::DAL::DAL_Time *)a3))
  {
    AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)v86, a1);
    boost::operators_impl::operator-((AMCP::DAL::DAL_Time *)buf, (uint64_t)a3, (AMCP::DAL::DAL_Time_Delta *)v86);
    if (AMCP::DAL::DAL_Time::operator<(v19, (AMCP::DAL::DAL_Time *)buf)) {
      std::logic_error v20 = buf;
    }
    else {
      std::logic_error v20 = (uint8_t *)(a1 + 48);
    }
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v89, (const AMCP::DAL::DAL_Time *)v20, (const AMCP::DAL::DAL_Time *)a3);
    if (*(void *)&v103[6]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v103[6]);
    }
    if (v88) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v88);
    }
    std::logic_error v80 = v89;
    uint64_t v81 = v90;
    long long v82 = v91;
    if (*((void *)&v91 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v91 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v83 = v92;
    uint64_t v84 = v93;
    long long v85 = v94;
    if (*((void *)&v94 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v94 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    AMCP::DAL::Ring_Buffer_Base::create_writable_range(a1, &v80, (uint64_t)buf);
    if (*((void *)&v85 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v85 + 1));
    }
    if (*((void *)&v82 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v82 + 1));
    }
    AMCP::DAL::DAL_Timed_Segment::translate_range((double **)v86, v107, (uint64_t)buf);
    uint64_t v21 = *(void *)v86;
    uint64_t v22 = *(void *)&v86[8];
    while (v21 != v22)
    {
      AMCP::DAL::Container::erase_range(*v7);
      v21 += 96;
    }
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v86;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v68);
    if (v106) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v106);
    }
    if (*(void *)&v103[6]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v103[6]);
    }
    if (*((void *)&v94 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v94 + 1));
    }
    if (*((void *)&v91 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v91 + 1));
    }
  }
  AMCP::DAL::DAL_Timed_Segment::translate_range((double **)&v95, *(const AMCP::DAL::DAL_Time_Range **)(a2 + 80), a2);
  uint64_t v24 = (double *)*((void *)&v95 + 1);
  uint64_t v23 = (double *)v95;
  if ((void)v95 != *((void *)&v95 + 1))
  {
    double v25 = 0.0;
    do
    {
      double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a3);
      double v28 = *v23;
      double v27 = v23[1];
      uint64_t v29 = (std::__shared_weak_count *)a3[4];
      uint64_t v78 = a3[3];
      v79 = v29;
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v89, &v78, v25 + sample_time, v25 + sample_time + v27 - v28);
      if (v79) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v79);
      }
      std::logic_error v72 = v89;
      uint64_t v73 = v90;
      long long v74 = v91;
      if (*((void *)&v91 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v91 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      long long v75 = v92;
      uint64_t v76 = v93;
      long long v77 = v94;
      if (*((void *)&v94 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v94 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      AMCP::DAL::Ring_Buffer_Base::create_writable_range(a1, &v72, (uint64_t)buf);
      if (*((void *)&v77 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v77 + 1));
      }
      if (*((void *)&v74 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v74 + 1));
      }
      AMCP::DAL::DAL_Timed_Segment::translate_range((double **)v86, v107, (uint64_t)buf);
      uint64_t v30 = *(void *)v86;
      uint64_t v31 = *(void *)&v86[8];
      double v32 = 0.0;
      while (v30 != v31)
      {
        double v33 = v32 + *v23;
        if (round(*(double *)(v30 + 8) - *(double *)v30) >= round(v23[1] - v33)) {
          double v34 = v23[1] - v33;
        }
        else {
          double v34 = *(double *)(v30 + 8) - *(double *)v30;
        }
        *(double *)&v68.__r_.__value_.__l.__data_ = v32 + *v23;
        *(double *)&v68.__r_.__value_.__l.__size_ = v33 + v34;
        double v35 = v34 + *(double *)v30;
        v97.__vftable = *(std::logic_error_vtbl **)v30;
        *(double *)&v97.__imp_.__imp_ = v35;
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(a2 + 80) + 56))(&v70);
        AMCP::DAL::Container::copy_from_this_container(&v70, (uint64_t)&v68, v7, (double *)&v97);
        if (v71) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v71);
        }
        double v32 = v32 + v34;
        v30 += 96;
      }
      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v86;
      std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v68);
      if (v106) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v106);
      }
      if (*(void *)&v103[6]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v103[6]);
      }
      if (*((void *)&v94 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v94 + 1));
      }
      if (*((void *)&v91 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v91 + 1));
      }
      double v25 = v25 + v32;
      v23 += 12;
    }
    while (v23 != v24);
  }
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::union_range((uint64_t)&v89, v66, (AMCP::DAL::DAL_Time *)a3);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)buf, (long long *)&v89);
  if (*((void *)&v94 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v94 + 1));
  }
  if (*((void *)&v91 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v91 + 1));
  }
  AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)&v68, a1);
  boost::operators_impl::operator-((AMCP::DAL::DAL_Time *)&v89, (uint64_t)&v104, (AMCP::DAL::DAL_Time_Delta *)&v68);
  BOOL v36 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)buf, (AMCP::DAL::DAL_Time *)&v89);
  BOOL v37 = !v36;
  if (v36) {
    uint64_t v38 = &v89;
  }
  else {
    uint64_t v38 = buf;
  }
  *(_OWORD *)BOOL v86 = *(_OWORD *)v38;
  *(void *)&v86[16] = v38[2];
  long long v39 = (__int16 *)&v91;
  if (!v36) {
    long long v39 = &v102;
  }
  uint64_t v40 = *(void *)v39;
  uint64_t v41 = (std::__shared_weak_count *)*((void *)&v91 + 1);
  if (v37) {
    uint64_t v42 = *(std::__shared_weak_count **)&v103[6];
  }
  else {
    uint64_t v42 = (std::__shared_weak_count *)*((void *)&v91 + 1);
  }
  uint64_t v87 = v40;
  uint64_t v88 = v42;
  if (v42)
  {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v41 = (std::__shared_weak_count *)*((void *)&v91 + 1);
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (v69) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v69);
  }
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v89, (const AMCP::DAL::DAL_Time *)v86, (const AMCP::DAL::DAL_Time *)&v104);
  *(std::logic_error *)BOOL v66 = v89;
  *(void *)(a1 + 24) = v90;
  long long v43 = v91;
  long long v91 = 0uLL;
  uint64_t v44 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v43;
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  *(_OWORD *)std::string v19 = v92;
  *(void *)(a1 + 64) = v93;
  long long v45 = v94;
  long long v94 = 0uLL;
  long long v46 = *(std::__shared_weak_count **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = v45;
  if (v46)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
    if (*((void *)&v94 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v94 + 1));
    }
  }
  if (*((void *)&v91 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v91 + 1));
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (v106) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v106);
  }
  if (*(void *)&v103[6]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v103[6]);
  }
  *(void *)pthread_attr_t buf = &v95;
  return std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)buf);
}

void sub_1BAE07344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61)
{
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)(v61 - 224));
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&a50);
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *AMCP::DAL::Ring_Buffer::receive_data(uint64_t a1, uint64_t a2, AMCP::DAL::DAL_Time *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint8_t *__return_ptr))(*(void *)a1 + 64))(buf);
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)buf, (AMCP::DAL::DAL_Time *)&v33))
  {
    (*(void (**)(std::logic_error *__return_ptr, uint64_t))(*(void *)a1 + 64))(&v20, a1);
    BOOL v5 = AMCP::DAL::DAL_Time::operator<(a3, (AMCP::DAL::DAL_Time *)&v24);
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    char v6 = !v5;
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
  }
  else
  {
    char v6 = 1;
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  BOOL v7 = *(AMCP::Log::Scope_Registry **)&v32[6];
  if (*(void *)&v32[6]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v32[6]);
  }
  if ((v6 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v9 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      BOOL v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)pthread_attr_t buf = 67109890;
      *(_DWORD *)&buf[4] = v11;
      *(_WORD *)double v28 = 2080;
      *(void *)&v28[2] = "Ring_Buffer.cpp";
      __int16 v29 = 1024;
      int v30 = 300;
      __int16 v31 = 2080;
      *(void *)double v32 = "not (get_time_range().is_empty() or new_audio.get_time_range().start() >= get_time_range().end())";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::Write only allows writes at or after the end of the ring buffer", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v19);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::Write only allows writes at or after the end of the ring buffer", (uint64_t)&v17);
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v20, &v18);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v21 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(void *)&v32[6] = "virtual void AMCP::DAL::Ring_Buffer::receive_data(const Source_ID &, const Readable_Range &)";
    double v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    int v34 = 300;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v14 = &unk_1F148AA90;
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return AMCP::DAL::Ring_Buffer_Base::receive_data_write(a1, (uint64_t)a3);
}

void sub_1BAE078A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&a32);
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)(v32 - 128));
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *AMCP::DAL::Ring_Buffer_Base::receive_data_write(uint64_t a1, uint64_t a2)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (AMCP::DAL::DAL_Time *)(a2 + 40);
  BOOL v5 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a2 + 40), (AMCP::DAL::DAL_Time *)a2);
  if (v5)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v42 = **(NSObject ***)buf;
    if (*(void *)v88) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v88);
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      long long v43 = pthread_self();
      mach_port_t v44 = pthread_mach_thread_np(v43);
      *(_DWORD *)pthread_attr_t buf = 67109890;
      *(_DWORD *)&buf[4] = v44;
      *(_WORD *)uint64_t v88 = 2080;
      *(void *)&v88[2] = "Ring_Buffer.cpp";
      __int16 v89 = 1024;
      int v90 = 30;
      __int16 v91 = 2080;
      *(void *)long long v92 = "not (new_audio.get_time_range().end() >= new_audio.get_time_range().start())";
      _os_log_error_impl(&dword_1BAA78000, v42, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::RecieveData: Bad time range (start > end)", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v86);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::RecieveData: Bad time range (start > end)", (uint64_t)&v58);
    std::logic_error::logic_error(&v85, &v58);
    v85.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v77, &v85);
    long long v79 = 0uLL;
    *(void *)&long long v80 = 0;
    DWORD2(v80) = -1;
    v77.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v78 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v77);
    *(void *)&v92[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_write(const Readable_Range &)";
    uint64_t v93 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    int v94 = 30;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v83);
    *(_OWORD *)&v74[8] = v83;
    *(void *)long long v74 = &unk_1F148AA90;
    uint64_t v75 = v84;
    long long v83 = 0uLL;
    uint64_t v84 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a2 + 80) + 56))(buf);
  BOOL is_compatible = AMCP::DAL::Container::container_is_compatible(*(void *)(a1 + 88), *(uint64_t *)buf);
  BOOL v7 = *(AMCP::Log::Scope_Registry **)v88;
  if (*(void *)v88) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v88);
  }
  if (!is_compatible)
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v45 = **(NSObject ***)buf;
    if (*(void *)v88) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v88);
    }
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      long long v46 = pthread_self();
      mach_port_t v47 = pthread_mach_thread_np(v46);
      *(_DWORD *)pthread_attr_t buf = 67109890;
      *(_DWORD *)&buf[4] = v47;
      *(_WORD *)uint64_t v88 = 2080;
      *(void *)&v88[2] = "Ring_Buffer.cpp";
      __int16 v89 = 1024;
      int v90 = 31;
      __int16 v91 = 2080;
      *(void *)long long v92 = "not (m_container.container_is_compatible(new_audio.get_container()))";
      _os_log_error_impl(&dword_1BAA78000, v45, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::WriteTo: Containers Are Not Compatible", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v86);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::WriteTo: Containers Are Not Compatible", (uint64_t)&v58);
    std::logic_error::logic_error(&v85, &v58);
    v85.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v77, &v85);
    long long v79 = 0uLL;
    *(void *)&long long v80 = 0;
    DWORD2(v80) = -1;
    v77.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v78 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v77);
    *(void *)&v92[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_write(const Readable_Range &)";
    uint64_t v93 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    int v94 = 31;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v83);
    *(_OWORD *)&v74[8] = v83;
    *(void *)long long v74 = &unk_1F148AA90;
    uint64_t v75 = v84;
    long long v83 = 0uLL;
    uint64_t v84 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  BOOL v8 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a2, v4);
  if (!v8)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v48 = **(NSObject ***)buf;
    if (*(void *)v88) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v88);
    }
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      __int16 v49 = pthread_self();
      mach_port_t v50 = pthread_mach_thread_np(v49);
      *(_DWORD *)pthread_attr_t buf = 67109890;
      *(_DWORD *)&buf[4] = v50;
      *(_WORD *)uint64_t v88 = 2080;
      *(void *)&v88[2] = "Ring_Buffer.cpp";
      __int16 v89 = 1024;
      int v90 = 32;
      __int16 v91 = 2080;
      *(void *)long long v92 = "not (not new_audio.get_time_range().is_empty())";
      _os_log_error_impl(&dword_1BAA78000, v48, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::Write doesnt allow writes of zero length data", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v86);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::Write doesnt allow writes of zero length data", (uint64_t)&v58);
    std::logic_error::logic_error(&v85, &v58);
    v85.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v77, &v85);
    long long v79 = 0uLL;
    *(void *)&long long v80 = 0;
    DWORD2(v80) = -1;
    v77.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v78 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v77);
    *(void *)&v92[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_write(const Readable_Range &)";
    uint64_t v93 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    int v94 = 32;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v83);
    *(_OWORD *)&v74[8] = v83;
    *(void *)long long v74 = &unk_1F148AA90;
    uint64_t v75 = v84;
    long long v83 = 0uLL;
    uint64_t v84 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  AMCP::DAL::DAL_Time::operator-((uint64_t)buf, v4, (AMCP::DAL::DAL_Time *)a2);
  AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)&v77, a1);
  BOOL v9 = AMCP::DAL::DAL_Time_Delta::operator<((AMCP::DAL::DAL_Time_Delta *)&v77, (uint64_t)buf);
  if (*((void *)&v79 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v79 + 1));
  }
  BOOL v10 = *(AMCP::Log::Scope_Registry **)&v92[6];
  if (*(void *)&v92[6]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v92[6]);
  }
  if (v9)
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    __int16 v51 = **(NSObject ***)buf;
    if (*(void *)v88) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v88);
    }
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      int v52 = pthread_self();
      mach_port_t v53 = pthread_mach_thread_np(v52);
      *(_DWORD *)pthread_attr_t buf = 67109890;
      *(_DWORD *)&buf[4] = v53;
      *(_WORD *)uint64_t v88 = 2080;
      *(void *)&v88[2] = "Ring_Buffer.cpp";
      __int16 v89 = 1024;
      int v90 = 33;
      __int16 v91 = 2080;
      *(void *)long long v92 = "not (new_audio.get_time_range().length() <= get_length_in_frames())";
      _os_log_error_impl(&dword_1BAA78000, v51, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::Write doesnt allow writes that are larger than the ring buffer's size", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v86);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::Write doesnt allow writes that are larger than the ring buffer's size", (uint64_t)&v58);
    std::logic_error::logic_error(&v85, &v58);
    v85.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v77, &v85);
    long long v79 = 0uLL;
    *(void *)&long long v80 = 0;
    DWORD2(v80) = -1;
    v77.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v78 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v77);
    *(void *)&v92[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_write(const Readable_Range &)";
    uint64_t v93 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    int v94 = 33;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v83);
    *(_OWORD *)&v74[8] = v83;
    *(void *)long long v74 = &unk_1F148AA90;
    uint64_t v75 = v84;
    long long v83 = 0uLL;
    uint64_t v84 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v12 = *(void *)(a1 + 32);
  mach_port_t v11 = *(std::__shared_weak_count **)(a1 + 40);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(void *)(a2 + 24);
  uint64_t v13 = *(std::__shared_weak_count **)(a2 + 32);
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v12 != v14)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v13);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v54 = **(NSObject ***)buf;
    if (*(void *)v88) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v88);
    }
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      __int16 v55 = pthread_self();
      mach_port_t v56 = pthread_mach_thread_np(v55);
      *(_DWORD *)pthread_attr_t buf = 67109890;
      *(_DWORD *)&buf[4] = v56;
      *(_WORD *)uint64_t v88 = 2080;
      *(void *)&v88[2] = "Ring_Buffer.cpp";
      __int16 v89 = 1024;
      int v90 = 34;
      __int16 v91 = 2080;
      *(void *)long long v92 = "not (m_valid_range.start().get_clock() == new_audio.get_time_range().start().get_clock())";
      _os_log_error_impl(&dword_1BAA78000, v54, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::Write: All times must use the same clock", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v86);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::Write: All times must use the same clock", (uint64_t)&v58);
    std::logic_error::logic_error(&v85, &v58);
    v85.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v77, &v85);
    long long v79 = 0uLL;
    *(void *)&long long v80 = 0;
    DWORD2(v80) = -1;
    v77.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v78 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v77);
    *(void *)&v92[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_write(const Readable_Range &)";
    uint64_t v93 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    int v94 = 34;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v83);
    *(_OWORD *)&v74[8] = v83;
    *(void *)long long v74 = &unk_1F148AA90;
    uint64_t v75 = v84;
    long long v83 = 0uLL;
    uint64_t v84 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a1 + 8), (AMCP::DAL::DAL_Time *)(a1 + 48))
    && AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a1 + 48), (AMCP::DAL::DAL_Time *)a2))
  {
    AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)v74, a1);
    boost::operators_impl::operator-((AMCP::DAL::DAL_Time *)buf, a2, (AMCP::DAL::DAL_Time_Delta *)v74);
    if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a1 + 48), (AMCP::DAL::DAL_Time *)buf)) {
      long long v15 = buf;
    }
    else {
      long long v15 = (uint8_t *)(a1 + 48);
    }
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v77, (const AMCP::DAL::DAL_Time *)v15, (const AMCP::DAL::DAL_Time *)a2);
    if (*(void *)&v92[6]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v92[6]);
    }
    if (v76) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v76);
    }
    std::logic_error v68 = v77;
    char v69 = v78;
    long long v70 = v79;
    if (*((void *)&v79 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v79 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v71 = v80;
    uint64_t v72 = v81;
    long long v73 = v82;
    if (*((void *)&v82 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v82 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    AMCP::DAL::Ring_Buffer_Base::create_writable_range(a1, &v68, (uint64_t)buf);
    if (*((void *)&v73 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v73 + 1));
    }
    if (*((void *)&v70 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v70 + 1));
    }
    AMCP::DAL::DAL_Timed_Segment::translate_range((double **)v74, v96, (uint64_t)buf);
    uint64_t v16 = *(void *)v74;
    uint64_t v17 = *(void *)&v74[8];
    while (v16 != v17)
    {
      AMCP::DAL::Container::erase_range(*(void *)(a1 + 88));
      v16 += 96;
    }
    v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v58);
    if (v95) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v95);
    }
    if (*(void *)&v92[6]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v92[6]);
    }
    if (*((void *)&v82 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v82 + 1));
    }
    if (*((void *)&v79 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v79 + 1));
    }
  }
  AMCP::DAL::DAL_Timed_Segment::translate_range((double **)&v83, *(const AMCP::DAL::DAL_Time_Range **)(a2 + 80), a2);
  __int16 v57 = (AMCP::DAL::DAL_Time *)(a1 + 8);
  uint64_t v19 = *((void *)&v83 + 1);
  for (uint64_t i = v83; i != v19; i += 96)
  {
    long long v60 = *(_OWORD *)(i + 16);
    uint64_t v20 = *(void *)(i + 40);
    uint64_t v61 = *(void *)(i + 32);
    uint64_t v62 = v20;
    uint64_t v21 = *(std::__shared_weak_count **)(i + 48);
    long long v63 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v64 = *(_OWORD *)(i + 56);
    uint64_t v22 = *(void *)(i + 80);
    uint64_t v65 = *(void *)(i + 72);
    uint64_t v23 = *(std::__shared_weak_count **)(i + 88);
    uint64_t v66 = v22;
    v67 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::DAL::Ring_Buffer_Base::create_writable_range(a1, &v60, (uint64_t)buf);
    if (v67) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v67);
    }
    if (v63) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v63);
    }
    AMCP::DAL::DAL_Timed_Segment::translate_range((double **)&v77, v96, (uint64_t)buf);
    int v25 = (double *)v77.__vftable;
    imp = v77.__imp_.__imp_;
    if (v77.__vftable != (std::logic_error_vtbl *)v77.__imp_.__imp_)
    {
      double v26 = 0.0;
      do
      {
        double v27 = v26 + *(double *)i + v25[1] - *v25;
        *(double *)long long v74 = v26 + *(double *)i;
        *(double *)&v74[8] = v27;
        (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 80) + 56))(&v58);
        AMCP::DAL::Container::copy_from_this_container((uint64_t *)&v58, (uint64_t)v74, (uint64_t *)(a1 + 88), v25);
        if (v58.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v58.__r_.__value_.__l.__size_);
        }
        double v29 = *v25;
        double v28 = v25[1];
        v25 += 12;
        double v26 = v26 + v28 - v29;
      }
      while (v25 != (double *)imp);
    }
    *(void *)long long v74 = &v77;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)v74);
    if (v95) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v95);
    }
    if (*(void *)&v92[6]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v92[6]);
    }
  }
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::union_range((uint64_t)&v77, v57, (AMCP::DAL::DAL_Time *)a2);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)buf, (long long *)&v77);
  if (*((void *)&v82 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v82 + 1));
  }
  if (*((void *)&v79 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v79 + 1));
  }
  AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)&v58, a1);
  boost::operators_impl::operator-((AMCP::DAL::DAL_Time *)&v77, (uint64_t)&v93, (AMCP::DAL::DAL_Time_Delta *)&v58);
  BOOL v30 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)buf, (AMCP::DAL::DAL_Time *)&v77);
  BOOL v31 = !v30;
  if (v30) {
    uint64_t v32 = &v77;
  }
  else {
    uint64_t v32 = buf;
  }
  *(_OWORD *)long long v74 = *(_OWORD *)v32;
  *(void *)&v74[16] = v32[2];
  double v33 = (__int16 *)&v79;
  if (!v30) {
    double v33 = &v91;
  }
  uint64_t v34 = *(void *)v33;
  double v35 = (std::__shared_weak_count *)*((void *)&v79 + 1);
  if (v31) {
    uint64_t v36 = *(std::__shared_weak_count **)&v92[6];
  }
  else {
    uint64_t v36 = (std::__shared_weak_count *)*((void *)&v79 + 1);
  }
  uint64_t v75 = v34;
  uint64_t v76 = v36;
  if (v36)
  {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    double v35 = (std::__shared_weak_count *)*((void *)&v79 + 1);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v77, (const AMCP::DAL::DAL_Time *)v74, (const AMCP::DAL::DAL_Time *)&v93);
  *(std::logic_error *)__int16 v57 = v77;
  *(void *)(a1 + 24) = v78;
  long long v37 = v79;
  long long v79 = 0uLL;
  uint64_t v38 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v37;
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  *(_OWORD *)(a1 + 48) = v80;
  *(void *)(a1 + 64) = v81;
  long long v39 = v82;
  long long v82 = 0uLL;
  uint64_t v40 = *(std::__shared_weak_count **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = v39;
  if (v40)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
    if (*((void *)&v82 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v82 + 1));
    }
  }
  if (*((void *)&v79 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v79 + 1));
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  if (v95) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v95);
  }
  if (*(void *)&v92[6]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v92[6]);
  }
  *(void *)pthread_attr_t buf = &v83;
  return std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)buf);
}

void sub_1BAE08954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)(v50 - 208));
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&a46);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Ring_Buffer::~Ring_Buffer(AMCP::DAL::Ring_Buffer *this)
{
  *(void *)this = &unk_1F147E198;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1F147E198;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

AMCP::DAL::Ring_Buffer_Base *AMCP::DAL::Ring_Buffer_Base::Ring_Buffer_Base(AMCP::DAL::Ring_Buffer_Base *this, const CA::StreamDescription *a2, const AMCP::DAL::DAL_Time_Delta *a3)
{
  *(void *)this = &unk_1F147E198;
  char v6 = (std::__shared_weak_count *)*((void *)a3 + 4);
  uint64_t v8 = *((void *)a3 + 3);
  BOOL v9 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)this + 8, &v8, 0.0, 0.0);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if ((*(unsigned char *)a3 & 2) == 0) {
    AMCP::DAL::DAL_Time_Delta::validate(a3);
  }
  AMCP::DAL::Container::Container((void *)this + 11, (uint64_t)a2, *((double *)a3 + 1));
  return this;
}

void sub_1BAE08CF0(_Unwind_Exception *a1)
{
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range(v1);
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *AMCP::DAL::Ring_Buffer_Base::receive_data_mix(void *a1, uint64_t a2)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (AMCP::DAL::DAL_Time *)(a2 + 40);
  BOOL v5 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a2 + 40), (AMCP::DAL::DAL_Time *)a2);
  if (v5)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v95, "com.apple.coreaudio", "AMCP");
    int v48 = **(NSObject ***)v95;
    if (*(void *)v96) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v96);
    }
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      __int16 v49 = pthread_self();
      mach_port_t v50 = pthread_mach_thread_np(v49);
      *(_DWORD *)long long v95 = 67109890;
      *(_DWORD *)&v95[4] = v50;
      *(_WORD *)uint64_t v96 = 2080;
      *(void *)&v96[2] = "Ring_Buffer.cpp";
      __int16 v97 = 1024;
      int v98 = 130;
      __int16 v99 = 2080;
      *(void *)__int16 v100 = "not (new_audio.get_time_range().end() >= new_audio.get_time_range().start())";
      _os_log_error_impl(&dword_1BAA78000, v48, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::RecieveData: Bad time range (start > end)", v95, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v81);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::RecieveData: Bad time range (start > end)", (uint64_t)&v85);
    std::logic_error::logic_error(&v83, &v85);
    v83.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)buf, &v83);
    long long v107 = 0uLL;
    uint64_t v108 = 0;
    int v109 = -1;
    *(void *)pthread_attr_t buf = &unk_1F1489CC8;
    *((void *)&v106 + 1) = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v95, (uint64_t)buf);
    *(void *)&v100[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_mix(const Readable_Range &)";
    int v101 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    int v102 = 130;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v87.__r_.__value_.__l.__data_);
    std::string v90 = v87;
    __int16 v89 = &unk_1F148AA90;
    memset(&v87, 0, sizeof(v87));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a2 + 80) + 56))(v95);
  BOOL is_compatible = AMCP::DAL::Container::container_is_compatible(a1[11], *(uint64_t *)v95);
  BOOL v7 = *(AMCP::Log::Scope_Registry **)v96;
  if (*(void *)v96) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v96);
  }
  if (!is_compatible)
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v95, "com.apple.coreaudio", "AMCP");
    __int16 v51 = **(NSObject ***)v95;
    if (*(void *)v96) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v96);
    }
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      int v52 = pthread_self();
      mach_port_t v53 = pthread_mach_thread_np(v52);
      *(_DWORD *)long long v95 = 67109890;
      *(_DWORD *)&v95[4] = v53;
      *(_WORD *)uint64_t v96 = 2080;
      *(void *)&v96[2] = "Ring_Buffer.cpp";
      __int16 v97 = 1024;
      int v98 = 131;
      __int16 v99 = 2080;
      *(void *)__int16 v100 = "not (m_container.container_is_compatible(new_audio.get_container()))";
      _os_log_error_impl(&dword_1BAA78000, v51, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::WriteTo: Containers Are Not Compatible", v95, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v81);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::WriteTo: Containers Are Not Compatible", (uint64_t)&v85);
    std::logic_error::logic_error(&v83, &v85);
    v83.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)buf, &v83);
    long long v107 = 0uLL;
    uint64_t v108 = 0;
    int v109 = -1;
    *(void *)pthread_attr_t buf = &unk_1F1489CC8;
    *((void *)&v106 + 1) = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v95, (uint64_t)buf);
    *(void *)&v100[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_mix(const Readable_Range &)";
    int v101 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    int v102 = 131;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v87.__r_.__value_.__l.__data_);
    std::string v90 = v87;
    __int16 v89 = &unk_1F148AA90;
    memset(&v87, 0, sizeof(v87));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  BOOL v8 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a2, v4);
  if (!v8)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v95, "com.apple.coreaudio", "AMCP");
    long long v54 = **(NSObject ***)v95;
    if (*(void *)v96) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v96);
    }
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      __int16 v55 = pthread_self();
      mach_port_t v56 = pthread_mach_thread_np(v55);
      *(_DWORD *)long long v95 = 67109890;
      *(_DWORD *)&v95[4] = v56;
      *(_WORD *)uint64_t v96 = 2080;
      *(void *)&v96[2] = "Ring_Buffer.cpp";
      __int16 v97 = 1024;
      int v98 = 132;
      __int16 v99 = 2080;
      *(void *)__int16 v100 = "not (not new_audio.get_time_range().is_empty())";
      _os_log_error_impl(&dword_1BAA78000, v54, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::Write doesnt allow writes of zero length data", v95, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v81);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::Write doesnt allow writes of zero length data", (uint64_t)&v85);
    std::logic_error::logic_error(&v83, &v85);
    v83.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)buf, &v83);
    long long v107 = 0uLL;
    uint64_t v108 = 0;
    int v109 = -1;
    *(void *)pthread_attr_t buf = &unk_1F1489CC8;
    *((void *)&v106 + 1) = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v95, (uint64_t)buf);
    *(void *)&v100[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_mix(const Readable_Range &)";
    int v101 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    int v102 = 132;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v87.__r_.__value_.__l.__data_);
    std::string v90 = v87;
    __int16 v89 = &unk_1F148AA90;
    memset(&v87, 0, sizeof(v87));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  AMCP::DAL::DAL_Time::operator-((uint64_t)v95, v4, (AMCP::DAL::DAL_Time *)a2);
  AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)buf, (uint64_t)a1);
  BOOL v9 = AMCP::DAL::DAL_Time_Delta::operator<((AMCP::DAL::DAL_Time_Delta *)buf, (uint64_t)v95);
  if (*((void *)&v107 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v107 + 1));
  }
  BOOL v10 = *(AMCP::Log::Scope_Registry **)&v100[6];
  if (*(void *)&v100[6]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v100[6]);
  }
  if (v9)
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v95, "com.apple.coreaudio", "AMCP");
    __int16 v57 = **(NSObject ***)v95;
    if (*(void *)v96) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v96);
    }
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      std::string v58 = pthread_self();
      mach_port_t v59 = pthread_mach_thread_np(v58);
      *(_DWORD *)long long v95 = 67109890;
      *(_DWORD *)&v95[4] = v59;
      *(_WORD *)uint64_t v96 = 2080;
      *(void *)&v96[2] = "Ring_Buffer.cpp";
      __int16 v97 = 1024;
      int v98 = 133;
      __int16 v99 = 2080;
      *(void *)__int16 v100 = "not (new_audio.get_time_range().length() <= get_length_in_frames())";
      _os_log_error_impl(&dword_1BAA78000, v57, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::Write doesnt allow writes that are larger than the ring buffer's size", v95, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v81);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::Write doesnt allow writes that are larger than the ring buffer's size", (uint64_t)&v85);
    std::logic_error::logic_error(&v83, &v85);
    v83.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)buf, &v83);
    long long v107 = 0uLL;
    uint64_t v108 = 0;
    int v109 = -1;
    *(void *)pthread_attr_t buf = &unk_1F1489CC8;
    *((void *)&v106 + 1) = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v95, (uint64_t)buf);
    *(void *)&v100[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_mix(const Readable_Range &)";
    int v101 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    int v102 = 133;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v87.__r_.__value_.__l.__data_);
    std::string v90 = v87;
    __int16 v89 = &unk_1F148AA90;
    memset(&v87, 0, sizeof(v87));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v12 = a1[4];
  mach_port_t v11 = (std::__shared_weak_count *)a1[5];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(void *)(a2 + 24);
  uint64_t v13 = *(std::__shared_weak_count **)(a2 + 32);
  if (v13)
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v12 != v14)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v13);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v95, "com.apple.coreaudio", "AMCP");
    long long v60 = **(NSObject ***)v95;
    if (*(void *)v96) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v96);
    }
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      uint64_t v61 = pthread_self();
      mach_port_t v62 = pthread_mach_thread_np(v61);
      *(_DWORD *)long long v95 = 67109890;
      *(_DWORD *)&v95[4] = v62;
      *(_WORD *)uint64_t v96 = 2080;
      *(void *)&v96[2] = "Ring_Buffer.cpp";
      __int16 v97 = 1024;
      int v98 = 134;
      __int16 v99 = 2080;
      *(void *)__int16 v100 = "not (m_valid_range.start().get_clock() == new_audio.get_time_range().start().get_clock())";
      _os_log_error_impl(&dword_1BAA78000, v60, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::Write: All times must use the same clock", v95, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v81);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::Write: All times must use the same clock", (uint64_t)&v85);
    std::logic_error::logic_error(&v83, &v85);
    v83.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)buf, &v83);
    long long v107 = 0uLL;
    uint64_t v108 = 0;
    int v109 = -1;
    *(void *)pthread_attr_t buf = &unk_1F1489CC8;
    *((void *)&v106 + 1) = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v95, (uint64_t)buf);
    *(void *)&v100[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_mix(const Readable_Range &)";
    int v101 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    int v102 = 134;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v87.__r_.__value_.__l.__data_);
    std::string v90 = v87;
    __int16 v89 = &unk_1F148AA90;
    memset(&v87, 0, sizeof(v87));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  (*(void (**)(uint8_t *__return_ptr, void *))(*a1 + 64))(v95, a1);
  BOOL v15 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)v95, (AMCP::DAL::DAL_Time *)&v101);
  if (v103) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v103);
  }
  uint64_t v16 = *(AMCP::Log::Scope_Registry **)&v100[6];
  if (*(void *)&v100[6]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v100[6]);
  }
  if (!v15)
  {
    AMCP::Log::Scope_Registry::get(v16);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v95, "com.apple.coreaudio", "AMCP");
    long long v63 = **(NSObject ***)v95;
    if (*(void *)v96) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v96);
    }
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      long long v64 = pthread_self();
      mach_port_t v65 = pthread_mach_thread_np(v64);
      *(_DWORD *)long long v95 = 67109890;
      *(_DWORD *)&v95[4] = v65;
      *(_WORD *)uint64_t v96 = 2080;
      *(void *)&v96[2] = "Ring_Buffer.cpp";
      __int16 v97 = 1024;
      int v98 = 136;
      __int16 v99 = 2080;
      *(void *)__int16 v100 = "not (not get_time_range().is_empty())";
      _os_log_error_impl(&dword_1BAA78000, v63, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::mix only allows writes within the range of existing dat in the ring buffer", v95, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v81);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::mix only allows writes within the range of existing dat in the ring buffer", (uint64_t)&v85);
    std::logic_error::logic_error(&v83, &v85);
    v83.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)buf, &v83);
    long long v107 = 0uLL;
    uint64_t v108 = 0;
    int v109 = -1;
    *(void *)pthread_attr_t buf = &unk_1F1489CC8;
    *((void *)&v106 + 1) = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v95, (uint64_t)buf);
    *(void *)&v100[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_mix(const Readable_Range &)";
    int v101 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    int v102 = 136;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v87.__r_.__value_.__l.__data_);
    std::string v90 = v87;
    __int16 v89 = &unk_1F148AA90;
    memset(&v87, 0, sizeof(v87));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  (*(void (**)(uint8_t *__return_ptr, void *))(*a1 + 64))(v95, a1);
  BOOL v17 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses((uint64_t)v95, a2);
  if (v103) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v103);
  }
  std::logic_error v18 = *(AMCP::Log::Scope_Registry **)&v100[6];
  if (*(void *)&v100[6]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v100[6]);
  }
  if (!v17)
  {
    AMCP::Log::Scope_Registry::get(v18);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v95, "com.apple.coreaudio", "AMCP");
    uint64_t v66 = **(NSObject ***)v95;
    if (*(void *)v96) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v96);
    }
    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      v67 = pthread_self();
      mach_port_t v68 = pthread_mach_thread_np(v67);
      *(_DWORD *)long long v95 = 67109890;
      *(_DWORD *)&v95[4] = v68;
      *(_WORD *)uint64_t v96 = 2080;
      *(void *)&v96[2] = "Ring_Buffer.cpp";
      __int16 v97 = 1024;
      int v98 = 137;
      __int16 v99 = 2080;
      *(void *)__int16 v100 = "not (get_time_range().encompasses(new_audio.get_time_range()))";
      _os_log_error_impl(&dword_1BAA78000, v66, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Ring_Buffer::mix only allows writes within the range of existing dat in the ring buffer", v95, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v81);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Ring_Buffer::mix only allows writes within the range of existing dat in the ring buffer", (uint64_t)&v85);
    std::logic_error::logic_error(&v83, &v85);
    v83.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)buf, &v83);
    long long v107 = 0uLL;
    uint64_t v108 = 0;
    int v109 = -1;
    *(void *)pthread_attr_t buf = &unk_1F1489CC8;
    *((void *)&v106 + 1) = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v95, (uint64_t)buf);
    *(void *)&v100[6] = "void AMCP::DAL::Ring_Buffer_Base::receive_data_mix(const Readable_Range &)";
    int v101 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ring_Buffer.cpp";
    int v102 = 137;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v87.__r_.__value_.__l.__data_);
    std::string v90 = v87;
    __int16 v89 = &unk_1F148AA90;
    memset(&v87, 0, sizeof(v87));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  AMCP::DAL::DAL_Timed_Segment::translate_range(&v81, *(const AMCP::DAL::DAL_Time_Range **)(a2 + 80), a2);
  uint64_t v19 = v81;
  for (uint64_t i = v82; v19 != i; v19 += 12)
  {
    long long v73 = *((_OWORD *)v19 + 1);
    uint64_t v21 = *((void *)v19 + 5);
    uint64_t v74 = *((void *)v19 + 4);
    uint64_t v75 = v21;
    uint64_t v22 = (std::__shared_weak_count *)*((void *)v19 + 6);
    uint64_t v76 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v77 = *(_OWORD *)(v19 + 7);
    uint64_t v23 = *((void *)v19 + 10);
    uint64_t v78 = *((void *)v19 + 9);
    uint64_t v24 = (std::__shared_weak_count *)*((void *)v19 + 11);
    uint64_t v79 = v23;
    long long v80 = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::DAL::Ring_Buffer_Base::create_writable_range((uint64_t)a1, &v73, (uint64_t)v95);
    if (v80) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v80);
    }
    if (v76) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v76);
    }
    AMCP::DAL::DAL_Timed_Segment::translate_range(&v71, v104, (uint64_t)v95);
    int v25 = v71;
    double v26 = v72;
    if (v71 != v72)
    {
      double v27 = 0.0;
      do
      {
        double v28 = *v19;
        double v30 = *v25;
        double v29 = v25[1];
        (*(void (**)(AMCP::Log::Scope_Registry **__return_ptr))(**(void **)(a2 + 80) + 56))(&v69);
        double v31 = *v25;
        BOOL v32 = AMCP::DAL::Container::container_is_compatible((uint64_t)v69, a1[11]);
        if (!v32)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v32);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          uint64_t v40 = **(NSObject ***)buf;
          if ((void)v106) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v106);
          }
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            uint64_t v41 = pthread_self();
            mach_port_t v42 = pthread_mach_thread_np(v41);
            *(_DWORD *)pthread_attr_t buf = 67109890;
            *(_DWORD *)&buf[4] = v42;
            LOWORD(v106) = 2080;
            *(void *)((char *)&v106 + 2) = "Container.cpp";
            WORD5(v106) = 1024;
            HIDWORD(v106) = 153;
            LOWORD(v107) = 2080;
            *(void *)((char *)&v107 + 2) = "not (container_is_compatible(dest_container))";
            _os_log_error_impl(&dword_1BAA78000, v40, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Container::mix: Containers Are Not Compatible", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v94);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Container::mix: Containers Are Not Compatible", (uint64_t)&v87);
          std::logic_error::logic_error(&v88, &v87);
          v88.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)&v89, &v88);
          v90.__r_.__value_.__r.__words[2] = 0;
          uint64_t v91 = 0;
          uint64_t v92 = 0;
          int v93 = -1;
          __int16 v89 = &unk_1F1489CC8;
          v90.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v89);
          *((void *)&v107 + 1) = "void AMCP::DAL::Container::mix(const Sample_Time_Range &, Container &, Sample_Time, D"
                                   "AL_Operation_Context_Ref)";
          uint64_t v108 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Container.cpp";
          int v109 = 153;
          std::vector<void *>::vector(&v83);
          int v43 = backtrace((void **)&v83.~logic_error, (unint64_t)(v83.__imp_.__imp_ - (const char *)v83.__vftable) >> 3);
          std::vector<void *>::resize((char **)&v83, v43);
          *(std::logic_error *)&v85.__r_.__value_.__r.__words[1] = v83;
          v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
          uint64_t v86 = v84;
          v83.__vftable = 0;
          v83.__imp_.__imp_ = 0;
          uint64_t v84 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        std::string::basic_string[abi:ne180100]<0>(buf, "mix");
        double v33 = v69;
        if (v69)
        {
          double v33 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(AMCP::Log::Scope_Registry *, uint8_t *))(*(void *)v69 + 16))(v69, buf);
          char v34 = (char)v33;
        }
        else
        {
          char v34 = 0;
        }
        if (SHIBYTE(v106) < 0) {
          operator delete(*(void **)buf);
        }
        if ((v34 & 1) == 0)
        {
          AMCP::Log::Scope_Registry::get(v33);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          mach_port_t v44 = **(NSObject ***)buf;
          if ((void)v106) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v106);
          }
          if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
          {
            long long v45 = pthread_self();
            mach_port_t v46 = pthread_mach_thread_np(v45);
            *(_DWORD *)pthread_attr_t buf = 67109890;
            *(_DWORD *)&buf[4] = v46;
            LOWORD(v106) = 2080;
            *(void *)((char *)&v106 + 2) = "Container.cpp";
            WORD5(v106) = 1024;
            HIDWORD(v106) = 154;
            LOWORD(v107) = 2080;
            *(void *)((char *)&v107 + 2) = "not (dal_operation_is_supported(kDALOperationSettings_Mix))";
            _os_log_error_impl(&dword_1BAA78000, v44, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Container::mix: container type does not support mixing", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v94);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Container::mix: container type does not support mixing", (uint64_t)&v87);
          std::logic_error::logic_error(&v88, &v87);
          v88.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)&v89, &v88);
          v90.__r_.__value_.__r.__words[2] = 0;
          uint64_t v91 = 0;
          uint64_t v92 = 0;
          int v93 = -1;
          __int16 v89 = &unk_1F1489CC8;
          v90.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v89);
          *((void *)&v107 + 1) = "void AMCP::DAL::Container::mix(const Sample_Time_Range &, Container &, Sample_Time, D"
                                   "AL_Operation_Context_Ref)";
          uint64_t v108 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Container.cpp";
          int v109 = 154;
          std::vector<void *>::vector(&v83);
          int v47 = backtrace((void **)&v83.~logic_error, (unint64_t)(v83.__imp_.__imp_ - (const char *)v83.__vftable) >> 3);
          std::vector<void *>::resize((char **)&v83, v47);
          *(std::logic_error *)&v85.__r_.__value_.__r.__words[1] = v83;
          v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
          uint64_t v86 = v84;
          v83.__vftable = 0;
          v83.__imp_.__imp_ = 0;
          uint64_t v84 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        uint64_t v35 = (uint64_t)v69;
        uint64_t v36 = a1[12];
        *(void *)pthread_attr_t buf = a1[11];
        *(void *)&long long v106 = v36;
        if (v36) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
        }
        __int16 v89 = 0;
        v90.__r_.__value_.__r.__words[0] = 0;
        (*(void (**)(uint64_t, uint8_t *, void **, double, double, double))(*(void *)v35 + 88))(v35, buf, &v89, v27 + v28, v27 + v28 + v29 - v30, v31);
        if (v90.__r_.__value_.__r.__words[0]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v90.__r_.__value_.__l.__data_);
        }
        if ((void)v106) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v106);
        }
        if (v70) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v70);
        }
        double v38 = *v25;
        double v37 = v25[1];
        v25 += 12;
        double v27 = v27 + v37 - v38;
      }
      while (v25 != v26);
    }
    *(void *)pthread_attr_t buf = &v71;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)buf);
    if (v103) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v103);
    }
    if (*(void *)&v100[6]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v100[6]);
    }
  }
  *(void *)long long v95 = &v81;
  return std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)v95);
}

void sub_1BAE0A630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
}

void HALS_NotificationManager::PropertiesChanged(HALS_NotificationManager *this, uint64_t a2, unsigned int a3, const AudioObjectPropertyAddress *a4, const AudioObjectPropertyAddress *a5)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&HALS_NotificationManager::sInitialized, memory_order_acquire) != -1)
  {
    mach_port_t v53 = HALS_NotificationManager::Initialize;
    std::string v58 = &v53;
    std::__call_once(&HALS_NotificationManager::sInitialized, &v58, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>);
  }
  uint64_t v8 = mach_absolute_time();
  HALS_NotificationManager::FindObject((HALS_NotificationManager *)&v51, this);
  BOOL v9 = v51;
  if (v51)
  {
    HALS_NotificationManager::Monitor::BeginReadOperation((HALS_NotificationManager::Monitor *)(v51 + 2));
    int v48 = 0;
    __int16 v49 = 0;
    unint64_t v50 = 0;
    uint64_t v61 = (HALB_Mutex *)(v9 + 46);
    uint64_t v38 = v8;
    int v62 = HALB_Mutex::Lock((HALB_Mutex *)(v9 + 46));
    mach_port_t v11 = (const HALS_Listener *)*((void *)v9 + 35);
    BOOL v10 = (const HALS_Listener *)*((void *)v9 + 36);
    if (v11 != v10)
    {
      long long v39 = (const HALS_Listener *)*((void *)v9 + 36);
      do
      {
        if (!*(_DWORD *)v11)
        {
          std::string v58 = 0;
          mach_port_t v59 = 0;
          unint64_t v60 = 0;
          if (a3)
          {
            uint64_t v12 = 0;
            uint64_t v13 = 0;
            do
            {
              uint64_t v14 = (_DWORD *)*((void *)v11 + 5);
              BOOL v15 = (_DWORD *)*((void *)v11 + 6);
              if (v14 != v15)
              {
                uint64_t v16 = &a4[v13];
                while (1)
                {
                  if (*v14 == 707406378 || *v14 == v16->mSelector)
                  {
                    int v18 = v14[1];
                    if (v18 == 707406378 || v18 == v16->mScope)
                    {
                      int v20 = v14[2];
                      if (v20 == -1 || v20 == v16->mElement) {
                        break;
                      }
                    }
                  }
                  v14 += 3;
                  if (v14 == v15) {
                    goto LABEL_44;
                  }
                }
                if ((unint64_t)v12 >= v60)
                {
                  uint64_t v23 = v58;
                  unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v58) >> 2);
                  unint64_t v25 = v24 + 1;
                  if (v24 + 1 > 0x1555555555555555) {
                    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                  }
                  if (0x5555555555555556 * ((uint64_t)(v60 - (void)v58) >> 2) > v25) {
                    unint64_t v25 = 0x5555555555555556 * ((uint64_t)(v60 - (void)v58) >> 2);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60 - (void)v58) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                    unint64_t v26 = 0x1555555555555555;
                  }
                  else {
                    unint64_t v26 = v25;
                  }
                  if (v26) {
                    unint64_t v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v26);
                  }
                  else {
                    uint64_t v27 = 0;
                  }
                  uint64_t v28 = *(void *)&v16->mSelector;
                  unint64_t v29 = v26 + 12 * v24;
                  *(_DWORD *)(v29 + 8) = v16->mElement;
                  *(void *)unint64_t v29 = v28;
                  unint64_t v30 = v29;
                  if (v12 != v23)
                  {
                    do
                    {
                      uint64_t v31 = *(uint64_t *)((char *)v12 - 12);
                      uint64_t v12 = (void **)((char *)v12 - 12);
                      int v32 = *((_DWORD *)v12 + 2);
                      *(void *)(v30 - 12) = v31;
                      v30 -= 12;
                      *(_DWORD *)(v30 + 8) = v32;
                    }
                    while (v12 != v23);
                    uint64_t v12 = v58;
                  }
                  uint64_t v22 = (void **)(v29 + 12);
                  std::string v58 = (void **)v30;
                  mach_port_t v59 = (void **)(v29 + 12);
                  unint64_t v60 = v26 + 12 * v27;
                  if (v12) {
                    operator delete(v12);
                  }
                }
                else
                {
                  uint64_t v21 = *(void **)&v16->mSelector;
                  *((_DWORD *)v12 + 2) = v16->mElement;
                  *uint64_t v12 = v21;
                  uint64_t v22 = (void **)((char *)v12 + 12);
                }
                mach_port_t v59 = v22;
                uint64_t v12 = v22;
              }
LABEL_44:
              ++v13;
            }
            while (v13 != a3);
            BOOL v10 = v39;
            if (v58 != v12)
            {
              uint64_t v12 = v58;
              std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>::pair[abi:ne180100]<HALS_Listener const&,std::vector<AudioObjectPropertyAddress>&,0>((HALS_Listener *)&v53, v11, (uint64_t)&v58);
              double v33 = v49;
              if ((unint64_t)v49 >= v50)
              {
                __int16 v49 = (HALS_Listener *)std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(&v48, (uint64_t)&v53);
                if ((void)__p)
                {
                  *((void *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
              }
              else
              {
                *(void *)__int16 v49 = v53;
                *(_OWORD *)((char *)v33 + 8) = v54;
                *(_OWORD *)((char *)v33 + 24) = v55;
                long long v54 = 0uLL;
                *((void *)v33 + 6) = 0;
                *((void *)v33 + 7) = 0;
                *((void *)v33 + 5) = 0;
                *(_OWORD *)((char *)v33 + 40) = __p;
                *((void *)v33 + 7) = v57;
                long long __p = 0uLL;
                uint64_t v57 = 0;
                __int16 v49 = (HALS_Listener *)((char *)v33 + 64);
              }
              HALS_Listener::~HALS_Listener((HALS_Listener *)&v53);
            }
            if (v12)
            {
              mach_port_t v59 = v12;
              operator delete(v12);
            }
          }
        }
        mach_port_t v11 = (const HALS_Listener *)((char *)v11 + 64);
      }
      while (v11 != v10);
    }
    HALB_Mutex::Locker::~Locker(&v61);
    int v34 = a2;
    HALS_NotificationManager::Object::CallOwner((HALS_NotificationManager::Object *)*v9, a2, a3, a4, 0);
    HALS_NotificationManager::Object::CallListeners_Sync(v9, a2, v48, v49);
    mach_port_t v53 = 0;
    long long v54 = 0uLL;
    std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress const*,AudioObjectPropertyAddress const*>(&v53, a4, (uint64_t)&a4[a3], a3);
    uint64_t v35 = v51;
    uint64_t v36 = v52;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZN24HALS_NotificationManager17PropertiesChangedEjjjPK26AudioObjectPropertyAddress_block_invoke;
    block[3] = &__block_descriptor_tmp_11129;
    block[4] = v51;
    mach_port_t v42 = v52;
    if (v52) {
      atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v43 = 0;
    mach_port_t v44 = 0;
    uint64_t v45 = 0;
    std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&v43, v53, v54, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54 - (void)v53) >> 2));
    int v47 = v34;
    uint64_t v46 = v38;
    unsigned __int8 v37 = atomic_load((unsigned __int8 *)v35 + 336);
    if (v37) {
      atomic_store(1u, (unsigned __int8 *)v35 + 337);
    }
    dispatch_async(*((dispatch_queue_t *)v35 + 38), block);
    if (v43)
    {
      mach_port_t v44 = v43;
      operator delete(v43);
    }
    if (v42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v42);
    }
    if (v53) {
      operator delete(v53);
    }
    mach_port_t v53 = &v48;
    std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
    if (v36) {
      goto LABEL_64;
    }
  }
  else
  {
    HALS_NotificationManager::CallOwner(this, a2, a3, (uint64_t)a4, 0);
    uint64_t v36 = v52;
    if (v52) {
LABEL_64:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
}

void sub_1BAE0AE04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,char *a33)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (v33) {
    operator delete(v33);
  }
  a33 = &a28;
  std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  _Unwind_Resume(a1);
}

void HALS_NotificationManager::Monitor::BeginReadOperation(HALS_NotificationManager::Monitor *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = this;
  int v9 = HALB_Mutex::Lock(this);
  if (*((void *)this + 21))
  {
    uint64_t v2 = *((void *)this + 18);
    if (v2 == -1)
    {
LABEL_10:
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_15;
      }
      *(_DWORD *)pthread_attr_t buf = 136315394;
      mach_port_t v11 = "HALS_NotificationManager.cpp";
      __int16 v12 = 1024;
      int v13 = 74;
      BOOL v5 = MEMORY[0x1E4F14500];
      char v6 = "%25s:%-5d  HALS_NotificationManager::SafeIncrement: value at maximum before increment. this is probably a bug";
      goto LABEL_14;
    }
    *((void *)this + 18) = v2 + 1;
    while (*((void *)this + 21))
      HALB_Guard::Wait(v8);
    uint64_t v3 = *((void *)this + 18);
    if (!v3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_15;
      }
      *(_DWORD *)pthread_attr_t buf = 136315394;
      mach_port_t v11 = "HALS_NotificationManager.cpp";
      __int16 v12 = 1024;
      int v13 = 80;
      BOOL v5 = MEMORY[0x1E4F14500];
      char v6 = "%25s:%-5d  HALS_NotificationManager::SafeIncrement: value at minimum before decrement. this is probably a bug";
LABEL_14:
      _os_log_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_ERROR, v6, buf, 0x12u);
LABEL_15:
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    *((void *)this + 18) = v3 - 1;
  }
  uint64_t v4 = *((void *)this + 19);
  if (v4 == -1) {
    goto LABEL_10;
  }
  *((void *)this + 19) = v4 + 1;
  HALB_Guard::Locker::~Locker(&v8);
}

void sub_1BAE0B078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HALB_Mutex *a9)
{
}

void HALS_NotificationManager::Object::CallOwner(HALS_NotificationManager::Object *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5)
{
  uint64_t v9 = HALS_ObjectMap::CopyObjectByObjectID(this);
  mach_port_t v11 = (HALS_ObjectMap *)v9;
  if (v9)
  {
    uint64_t v12 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v9 + 28));
    uint64_t v14 = (HALS_ObjectMap *)v12;
    if (v12 && (*(unsigned int (**)(uint64_t))(*(void *)v12 + 136))(v12)) {
      (*(void (**)(HALS_ObjectMap *, HALS_ObjectMap *, uint64_t, uint64_t, const AudioObjectPropertyAddress *, uint64_t))(*(void *)v14 + 144))(v14, v11, a2, a3, a4, a5);
    }
    HALS_ObjectMap::ReleaseObject(v14, v13);
  }
  HALS_ObjectMap::ReleaseObject(v11, v10);
}

void sub_1BAE0B160(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v3, a2);
  HALS_ObjectMap::ReleaseObject(v2, v5);
  _Unwind_Resume(a1);
}

void HALS_NotificationManager::Object::CallListeners_Sync(unsigned int *a1, uint64_t a2, HALS_Listener *this, HALS_Listener *a4)
{
  if (this != a4)
  {
    BOOL v5 = this;
    do
    {
      HALS_Listener::Call(v5, (HALS_ObjectMap *)*a1, a2, -1431655765 * ((*((void *)v5 + 6) - *((void *)v5 + 5)) >> 2), *((const AudioObjectPropertyAddress **)v5 + 5), 1);
      BOOL v5 = (HALS_Listener *)((char *)v5 + 64);
    }
    while (v5 != a4);
  }
}

void ___ZN24HALS_NotificationManager17PropertiesChangedEjjjPK26AudioObjectPropertyAddress_block_invoke(HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *a1)
{
  uint64_t v36 = 0;
  unsigned __int8 v37 = 0;
  unint64_t v38 = 0;
  uint64_t v2 = (void *)*((void *)a1 + 4);
  uint64_t v4 = *((void *)a1 + 6);
  uint64_t v3 = *((void *)a1 + 7);
  int v47 = (HALB_Mutex *)(v2 + 23);
  int v34 = a1;
  int v48 = HALB_Mutex::Lock((HALB_Mutex *)(v2 + 23));
  BOOL v5 = (const HALS_Listener *)v2[35];
  char v6 = (const HALS_Listener *)v2[36];
  if (v5 != v6)
  {
    uint64_t v35 = (const HALS_Listener *)v2[36];
    do
    {
      if ((*(_DWORD *)v5 - 1) <= 5)
      {
        mach_port_t v44 = 0;
        uint64_t v45 = 0;
        unint64_t v46 = 0;
        if (-1431655765 * ((v3 - v4) >> 2))
        {
          BOOL v7 = 0;
          uint64_t v8 = 0;
          do
          {
            uint64_t v9 = (_DWORD *)*((void *)v5 + 5);
            BOOL v10 = (_DWORD *)*((void *)v5 + 6);
            if (v9 != v10)
            {
              mach_port_t v11 = (_DWORD *)(v4 + 12 * v8);
              while (1)
              {
                if (*v9 == 707406378 || *v9 == *v11)
                {
                  int v13 = v9[1];
                  if (v13 == 707406378 || v13 == v11[1])
                  {
                    int v15 = v9[2];
                    if (v15 == -1 || v15 == v11[2]) {
                      break;
                    }
                  }
                }
                v9 += 3;
                if (v9 == v10) {
                  goto LABEL_39;
                }
              }
              if ((unint64_t)v7 >= v46)
              {
                int v18 = v44;
                unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (v7 - v44);
                unint64_t v20 = v19 + 1;
                if (v19 + 1 > 0x1555555555555555) {
                  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556 * ((uint64_t)(v46 - (void)v44) >> 2) > v20) {
                  unint64_t v20 = 0x5555555555555556 * ((uint64_t)(v46 - (void)v44) >> 2);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - (void)v44) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                  unint64_t v21 = 0x1555555555555555;
                }
                else {
                  unint64_t v21 = v20;
                }
                if (v21) {
                  unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v21);
                }
                else {
                  uint64_t v22 = 0;
                }
                uint64_t v23 = *(void *)v11;
                unint64_t v24 = v21 + 12 * v19;
                *(_DWORD *)(v24 + 8) = v11[2];
                *(void *)unint64_t v24 = v23;
                unint64_t v25 = (_DWORD *)v24;
                if (v7 != v18)
                {
                  do
                  {
                    uint64_t v26 = *(void *)(v7 - 3);
                    v7 -= 3;
                    int v27 = v7[2];
                    *(void *)(v25 - 3) = v26;
                    v25 -= 3;
                    v25[2] = v27;
                  }
                  while (v7 != v18);
                  BOOL v7 = v44;
                }
                BOOL v17 = (_DWORD *)(v24 + 12);
                mach_port_t v44 = v25;
                uint64_t v45 = (_DWORD *)(v24 + 12);
                unint64_t v46 = v21 + 12 * v22;
                if (v7) {
                  operator delete(v7);
                }
              }
              else
              {
                uint64_t v16 = *(void *)v11;
                v7[2] = v11[2];
                *(void *)BOOL v7 = v16;
                BOOL v17 = v7 + 3;
              }
              uint64_t v45 = v17;
              BOOL v7 = v17;
            }
LABEL_39:
            ++v8;
          }
          while (v8 != -1431655765 * ((v3 - v4) >> 2));
          char v6 = v35;
          if (v44 != v7)
          {
            BOOL v7 = v44;
            std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>::pair[abi:ne180100]<HALS_Listener const&,std::vector<AudioObjectPropertyAddress>&,0>((HALS_Listener *)&v39, v5, (uint64_t)&v44);
            uint64_t v28 = v37;
            if ((unint64_t)v37 >= v38)
            {
              unsigned __int8 v37 = (HALS_Listener *)std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(&v36, (uint64_t)&v39);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              *(void *)unsigned __int8 v37 = v39;
              *(_OWORD *)((char *)v28 + 8) = v40;
              *(_OWORD *)((char *)v28 + 24) = v41;
              long long v40 = 0uLL;
              *((void *)v28 + 6) = 0;
              *((void *)v28 + 7) = 0;
              *((void *)v28 + 5) = 0;
              *(_OWORD *)((char *)v28 + 40) = *(_OWORD *)__p;
              *((void *)v28 + 7) = v43;
              __p[0] = 0;
              __p[1] = 0;
              uint64_t v43 = 0;
              unsigned __int8 v37 = (HALS_Listener *)((char *)v28 + 64);
            }
            HALS_Listener::~HALS_Listener((HALS_Listener *)&v39);
          }
          if (v7)
          {
            uint64_t v45 = v7;
            operator delete(v7);
          }
        }
      }
      BOOL v5 = (const HALS_Listener *)((char *)v5 + 64);
    }
    while (v5 != v6);
  }
  HALB_Mutex::Locker::~Locker(&v47);
  unint64_t v30 = v36;
  unint64_t v29 = v37;
  if (v36 != v37)
  {
    uint64_t v31 = (unsigned int *)*((void *)v34 + 4);
    uint64_t v32 = *((unsigned int *)v34 + 20);
    do
    {
      HALS_Listener::Call(v30, (HALS_ObjectMap *)*v31, v32, -1431655765 * ((*((void *)v30 + 6) - *((void *)v30 + 5)) >> 2), *((const AudioObjectPropertyAddress **)v30 + 5), 0);
      unint64_t v30 = (HALS_Listener *)((char *)v30 + 64);
    }
    while (v30 != v29);
  }
  HALS_NotificationManager::Monitor::FinishReadOperation((HALS_NotificationManager::Monitor *)(*((void *)v34 + 4) + 8));
  long long v39 = &v36;
  std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
}

void sub_1BAE0B5F0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void **a17)
{
  std::__destroy_at[abi:ne180100]<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>,0>((HALS_Listener *)&a17);
  if (v17) {
    operator delete(v17);
  }
  HALB_Mutex::Locker::~Locker((HALB_Mutex **)(v18 - 104));
  a17 = (void **)&a14;
  std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](&a17);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAE0B5CCLL);
}

void sub_1BAE0B650(HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *a1)
{
}

void std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = (HALS_Listener *)**a1;
  if (v2)
  {
    uint64_t v4 = (HALS_Listener *)v1[1];
    BOOL v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v4 = (HALS_Listener *)((char *)v4 - 64);
        std::__destroy_at[abi:ne180100]<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>,0>(v4);
      }
      while (v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void HALS_NotificationManager::CallOwner(HALS_NotificationManager *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioObjectPropertyAddress *a5)
{
  uint64_t v9 = HALS_ObjectMap::CopyObjectByObjectID(this);
  mach_port_t v11 = (HALS_ObjectMap *)v9;
  if (v9)
  {
    uint64_t v12 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v9 + 28));
    uint64_t v14 = (HALS_ObjectMap *)v12;
    if (v12 && (*(unsigned int (**)(uint64_t))(*(void *)v12 + 136))(v12)) {
      (*(void (**)(HALS_ObjectMap *, HALS_ObjectMap *, uint64_t, uint64_t, uint64_t, const AudioObjectPropertyAddress *))(*(void *)v14 + 144))(v14, v11, a2, a3, a4, a5);
    }
    HALS_ObjectMap::ReleaseObject(v14, v13);
  }
  HALS_ObjectMap::ReleaseObject(v11, v10);
}

void sub_1BAE0B7B4(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v3, a2);
  HALS_ObjectMap::ReleaseObject(v2, v5);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:ne180100]<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>,0>(HALS_Listener *this)
{
  uint64_t v2 = (void *)*((void *)this + 5);
  if (v2)
  {
    *((void *)this + 6) = v2;
    operator delete(v2);
  }

  HALS_Listener::~HALS_Listener(this);
}

void HALS_Listener::~HALS_Listener(HALS_Listener *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 2);
  if (v3) {
    _Block_release(v3);
  }
}

void __destroy_helper_block_e8_32c61_ZTSNSt3__110shared_ptrIN24HALS_NotificationManager6ObjectEEE48c68_ZTSNSt3__16vectorI26AudioObjectPropertyAddressNS_9allocatorIS1_EEEE(void *a1)
{
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *__copy_helper_block_e8_32c61_ZTSNSt3__110shared_ptrIN24HALS_NotificationManager6ObjectEEE48c68_ZTSNSt3__16vectorI26AudioObjectPropertyAddressNS_9allocatorIS1_EEEE(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  return std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(a1 + 6, *(const void **)(a2 + 48), *(void *)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 2));
}

void sub_1BAE0B924(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void HALS_NotificationManager::anonymous namespace'::ThreadMarker::ThreadMarker(HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v1 = pthread_setspecific(HALS_NotificationManager::sThreadMarkerKey, (const void *)1);
  if (v1)
  {
    int v2 = v1;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315650;
      uint64_t v4 = "HALS_NotificationManager.cpp";
      __int16 v5 = 1024;
      int v6 = 756;
      __int16 v7 = 1024;
      int v8 = v2;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ThreadMarker::ThreadMarker: failed to set the marker, Error: 0x%X", (uint8_t *)&v3, 0x18u);
    }
  }
}

void HALS_NotificationManager::anonymous namespace'::ThreadMarker::~ThreadMarker(HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v1 = pthread_setspecific(HALS_NotificationManager::sThreadMarkerKey, 0);
  if (v1)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v2 = 136315650;
      int v3 = "HALS_NotificationManager.cpp";
      __int16 v4 = 1024;
      int v5 = 767;
      __int16 v6 = 1024;
      int v7 = v1;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ThreadMarker::ThreadMarker: failed to set the marker, Error: 0x%X", (uint8_t *)&v2, 0x18u);
    }
  }
}

void sub_1BAE0BAE4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void HALS_NotificationManager::Monitor::FinishReadOperation(HALS_NotificationManager::Monitor *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int v5 = this;
  int v6 = HALB_Mutex::Lock(this);
  uint64_t v2 = *((void *)this + 19);
  if (!v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)pthread_attr_t buf = 136315394;
      uint64_t v8 = "HALS_NotificationManager.cpp";
      __int16 v9 = 1024;
      int v10 = 80;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_NotificationManager::SafeIncrement: value at minimum before decrement. this is probably a bug", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  uint64_t v3 = v2 - 1;
  *((void *)this + 19) = v3;
  if (!v3) {
    HALB_Guard::NotifyAll((pthread_cond_t *)this);
  }
  HALB_Guard::Locker::~Locker(&v5);
}

void sub_1BAE0BC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HALB_Mutex *a9)
{
}

void HALS_Listener::Call(HALS_Listener *this, HALS_ObjectMap *a2, uint64_t a3, uint64_t a4, const AudioObjectPropertyAddress *a5, int a6)
{
  int v6 = a5;
  switch(*(_DWORD *)this)
  {
    case 0:
    case 1:
      uint64_t v11 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(a2);
      uint64_t v12 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 1));
      uint64_t v14 = (HALS_ObjectMap *)v12;
      if (v11)
      {
        if (v12) {
          (*(void (**)(uint64_t, HALS_ObjectMap *, uint64_t, uint64_t, const AudioObjectPropertyAddress *))(*(void *)v12 + 160))(v12, v11, a3, a4, v6);
        }
      }
      HALS_ObjectMap::ReleaseObject(v14, v13);
      HALS_ObjectMap::ReleaseObject(v11, v15);
      return;
    case 2:
      uint64_t v16 = *((void *)this + 1);
      if (v16)
      {
        if (a6)
        {
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 0x40000000;
          block[2] = ___ZNK13HALS_Listener4CallEjjjPK26AudioObjectPropertyAddressb_block_invoke;
          block[3] = &__block_descriptor_tmp_9_11135;
          int v48 = a4;
          block[4] = this;
          void block[5] = a5;
          dispatch_sync(v16, block);
          return;
        }
        uint64_t v43 = *(void *)this;
        long long v45 = *((_OWORD *)this + 1);
        uint64_t v29 = *((void *)this + 4);
        dispatch_object_t object = v16;
        uint64_t v46 = v29;
        dispatch_retain(v16);
        if ((void)v45) {
          *(void *)&long long v45 = _Block_copy((const void *)v45);
        }
        long long v40 = 0;
        uint64_t v41 = 0;
        uint64_t v42 = 0;
        std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress const*,AudioObjectPropertyAddress const*>(&v40, v6, (uint64_t)&v6[a4], a4);
        unint64_t v30 = *((void *)this + 1);
        v33[0] = MEMORY[0x1E4F143A8];
        v33[1] = 1174405120;
        v33[2] = ___ZNK13HALS_Listener4CallEjjjPK26AudioObjectPropertyAddressb_block_invoke_2;
        void v33[3] = &__block_descriptor_tmp_10_11136;
        v34[0] = v43;
        v34[1] = object;
        long long v35 = v45;
        uint64_t v36 = v46;
        if (object)
        {
          dispatch_retain(object);
          uint64_t v31 = (const void *)v35;
          if (!(void)v35) {
            goto LABEL_34;
          }
        }
        else
        {
          uint64_t v31 = (const void *)v45;
          if (!(void)v45)
          {
LABEL_34:
            long long __p = 0;
            unint64_t v38 = 0;
            uint64_t v39 = 0;
            uint64_t v32 = v40;
            std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&__p, v40, v41, 0xAAAAAAAAAAAAAAABLL * ((v41 - (uint64_t)v40) >> 2));
            dispatch_async(v30, v33);
            if (__p)
            {
              unint64_t v38 = __p;
              operator delete(__p);
            }
            HALS_Listener::~HALS_Listener((HALS_Listener *)v34);
            if (v32) {
              operator delete(v32);
            }
            HALS_Listener::~HALS_Listener((HALS_Listener *)&v43);
            return;
          }
        }
        *(void *)&long long v35 = _Block_copy(v31);
        goto LABEL_34;
      }
      uint64_t v28 = *(void (**)(void))(*((void *)this + 2) + 16);
      v28();
      return;
    case 3:
      uint64_t v18 = (void (*)(HALS_ObjectMap *, uint64_t, const AudioObjectPropertyAddress *, uint64_t))*((void *)this + 3);
      uint64_t v17 = *((void *)this + 4);
      v18(a2, a4, v6, v17);
      return;
    case 4:
      if (a4)
      {
        unint64_t v19 = (void (*)(void, void))*((void *)this + 3);
        uint64_t v20 = a4;
        do
        {
          AudioObjectPropertySelector mSelector = v6->mSelector;
          ++v6;
          v19(mSelector, *((void *)this + 4));
          --v20;
        }
        while (v20);
      }
      return;
    case 5:
      if (a4)
      {
        uint64_t v22 = (void (*)(HALS_ObjectMap *, void, BOOL, void, void))*((void *)this + 3);
        uint64_t v23 = a4;
        p_AudioObjectPropertyScope mScope = &a5->mScope;
        do
        {
          v22(a2, p_mScope[1], *p_mScope == 1768845428, *(p_mScope - 1), *((void *)this + 4));
          p_mScope += 3;
          --v23;
        }
        while (v23);
      }
      return;
    case 6:
      if (a4)
      {
        unint64_t v25 = (void (*)(HALS_ObjectMap *, void, void, void))*((void *)this + 3);
        uint64_t v26 = a4;
        do
        {
          AudioObjectPropertySelector v27 = v6->mSelector;
          ++v6;
          v25(a2, v27, v27, *((void *)this + 4));
          --v26;
        }
        while (v26);
      }
      return;
    default:
      return;
  }
}

void sub_1BAE0BFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  HALS_Listener::~HALS_Listener((HALS_Listener *)&a25);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK13HALS_Listener4CallEjjjPK26AudioObjectPropertyAddressb_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(*(void *)(a1 + 32) + 16) + 16))(*(void *)(*(void *)(a1 + 32) + 16), *(unsigned int *)(a1 + 48), *(void *)(a1 + 40));
}

void sub_1BAE0C0A0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_Listener::HALS_Listener(HALS_Listener *this, const HALS_Listener *a2)
{
  *(void *)this = *(void *)a2;
  uint64_t v3 = *((void *)a2 + 1);
  *((void *)this + 1) = v3;
  long long v4 = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 1) = v4;
  *((void *)this + 4) = *((void *)a2 + 4);
  if (v3)
  {
    dispatch_retain(v3);
    int v5 = (const void *)*((void *)this + 2);
    if (!v5) {
      return;
    }
  }
  else
  {
    int v5 = (const void *)v4;
    if (!(void)v4) {
      return;
    }
  }
  *((void *)this + 2) = _Block_copy(v5);
}

uint64_t ___ZNK13HALS_Listener4CallEjjjPK26AudioObjectPropertyAddressb_block_invoke_2(void *a1)
{
  return (*(uint64_t (**)(void, void))(a1[6] + 16))(a1[6], -1431655765 * ((a1[10] - a1[9]) >> 2));
}

void sub_1BAE0C164(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void __destroy_helper_block_e8_32c19_ZTS13HALS_Listener72c68_ZTSNSt3__16vectorI26AudioObjectPropertyAddressNS_9allocatorIS1_EEEE(void *a1)
{
  uint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }

  HALS_Listener::~HALS_Listener((HALS_Listener *)(a1 + 4));
}

void *__copy_helper_block_e8_32c19_ZTS13HALS_Listener72c68_ZTSNSt3__16vectorI26AudioObjectPropertyAddressNS_9allocatorIS1_EEEE(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  HALS_Listener::HALS_Listener((HALS_Listener *)(a1 + 4), (const HALS_Listener *)(a2 + 32));
  v3[9] = 0;
  v3[10] = 0;
  v3 += 9;
  v3[2] = 0;
  return std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(v3, *(const void **)(a2 + 72), *(void *)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2));
}

void sub_1BAE0C228(_Unwind_Exception *a1)
{
  HALS_Listener::~HALS_Listener(v1);
  _Unwind_Resume(a1);
}

HALS_Listener *std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>::pair[abi:ne180100]<HALS_Listener const&,std::vector<AudioObjectPropertyAddress>&,0>(HALS_Listener *a1, const HALS_Listener *a2, uint64_t a3)
{
  HALS_Listener::HALS_Listener(a1, a2);
  v5[5] = 0;
  void v5[6] = 0;
  v5 += 5;
  v5[2] = 0;
  std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(v5, *(const void **)a3, *(void *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2));
  return a1;
}

void sub_1BAE0C28C(_Unwind_Exception *a1)
{
  HALS_Listener::~HALS_Listener(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(void *a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t)(a1[1] - *a1) >> 6;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 58) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  int v6 = a1 + 2;
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 5 > v3) {
    unint64_t v3 = v7 >> 5;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v8 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v3;
  }
  unint64_t v24 = v6;
  __int16 v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>>(v8);
  int v10 = &v9[64 * v2];
  uint64_t v22 = v9;
  *(void *)uint64_t v23 = v10;
  *(void *)&v23[16] = &v9[64 * v11];
  *(void *)int v10 = *(void *)a2;
  *(_OWORD *)(v10 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((void *)v10 + 6) = 0;
  *((void *)v10 + 7) = 0;
  *((void *)v10 + 5) = 0;
  *(_OWORD *)(v10 + 40) = *(_OWORD *)(a2 + 40);
  *((void *)v10 + 7) = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)&v23[8] = v10 + 64;
  uint64_t v13 = *a1;
  uint64_t v12 = a1[1];
  for (uint64_t i = 64; ; i -= 64)
  {
    int v15 = &v10[i];
    if (v12 + i - 64 == v13) {
      break;
    }
    uint64_t v16 = v12 + i - 128;
    std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>::pair[abi:ne180100]((HALS_Listener *)(v15 - 128), v16);
  }
  uint64_t v17 = a1[2];
  long long v18 = *(_OWORD *)&v23[8];
  uint64_t v21 = *(void *)&v23[8];
  long long v19 = *(_OWORD *)a1;
  *a1 = v15 - 64;
  *(_OWORD *)uint64_t v23 = v19;
  *(_OWORD *)(a1 + 1) = v18;
  *(void *)&v23[16] = v17;
  uint64_t v22 = (char *)v19;
  std::__split_buffer<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::~__split_buffer((uint64_t)&v22);
  return v21;
}

uint64_t std::__split_buffer<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    std::__destroy_at[abi:ne180100]<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>,0>((HALS_Listener *)(i - 64));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

HALS_Listener *std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>::pair[abi:ne180100](HALS_Listener *a1, uint64_t a2)
{
  HALS_Listener::HALS_Listener(a1, (const HALS_Listener *)a2);
  v4[5] = 0;
  void v4[6] = 0;
  v4 += 5;
  v4[2] = 0;
  std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(v4, *(const void **)(a2 + 40), *(void *)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 2));
  return a1;
}

void sub_1BAE0C4B4(_Unwind_Exception *a1)
{
  HALS_Listener::~HALS_Listener(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>(uint64_t (***a1)(void))
{
  return (**a1)();
}

void HALS_NotificationManager::Initialize(HALS_NotificationManager *this)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1BAE0C640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(a9) = 136315394;
      *(void *)((char *)&a9 + 4) = "HALS_NotificationManager.cpp";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 786;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_NotificationManager::Initialize: failure!", (uint8_t *)&a9, 0x12u);
    }
    if (HALS_NotificationManager::sObjectListLock) {
      (*(void (**)(uint64_t))(*(void *)HALS_NotificationManager::sObjectListLock + 8))(HALS_NotificationManager::sObjectListLock);
    }
    HALS_NotificationManager::sObjectListLock = 0;
    uint64_t v9 = HALS_NotificationManager::sObjectList;
    if (HALS_NotificationManager::sObjectList)
    {
      *(void *)&a9 = HALS_NotificationManager::sObjectList;
      std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
      MEMORY[0x1C1859840](v9, 0x20C40960023A9);
    }
    HALS_NotificationManager::sObjectList = 0;
    __cxa_end_catch();
    JUMPOUT(0x1BAE0C560);
  }
  _Unwind_Resume(exception_object);
}

void HALS_NotificationManager::PropertiesChanged_Sync(HALS_NotificationManager *this, uint64_t a2, unsigned int a3, const AudioObjectPropertyAddress *a4, const AudioObjectPropertyAddress *a5)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&HALS_NotificationManager::sInitialized, memory_order_acquire) != -1)
  {
    __int16 v49 = (HALS_Listener **)HALS_NotificationManager::Initialize;
    long long v54 = (void ***)&v49;
    std::__call_once(&HALS_NotificationManager::sInitialized, &v54, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>);
  }
  mach_absolute_time();
  HALS_NotificationManager::FindObject((HALS_NotificationManager *)v47, this);
  unint64_t v8 = *(unsigned int **)v47;
  if (*(void *)v47)
  {
    HALS_NotificationManager::Monitor::BeginReadOperation((HALS_NotificationManager::Monitor *)(*(void *)v47 + 8));
    mach_port_t v44 = 0;
    long long v45 = 0;
    unint64_t v46 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    unint64_t v43 = 0;
    uint64_t v57 = (HALB_Mutex *)(v8 + 46);
    int v58 = HALB_Mutex::Lock((HALB_Mutex *)(v8 + 46));
    uint64_t v9 = (const HALS_Listener *)*((void *)v8 + 35);
    unint64_t v38 = v8;
    uint64_t v39 = (const HALS_Listener *)*((void *)v8 + 36);
    if (v9 != v39)
    {
      while (1)
      {
        long long v54 = 0;
        long long v55 = 0;
        unint64_t v56 = 0;
        if (a3) {
          break;
        }
LABEL_52:
        uint64_t v9 = (const HALS_Listener *)((char *)v9 + 64);
        if (v9 == v39) {
          goto LABEL_56;
        }
      }
      int v10 = 0;
      uint64_t v11 = 0;
      do
      {
        uint64_t v12 = (_DWORD *)*((void *)v9 + 5);
        uint64_t v13 = (_DWORD *)*((void *)v9 + 6);
        if (v12 != v13)
        {
          uint64_t v14 = &a4[v11];
          while (1)
          {
            if (*v12 == 707406378 || *v12 == v14->mSelector)
            {
              int v16 = v12[1];
              if (v16 == 707406378 || v16 == v14->mScope)
              {
                int v18 = v12[2];
                if (v18 == -1 || v18 == v14->mElement) {
                  break;
                }
              }
            }
            v12 += 3;
            if (v12 == v13) {
              goto LABEL_40;
            }
          }
          if ((unint64_t)v10 >= v56)
          {
            uint64_t v21 = v54;
            unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)v54) >> 2) + 1;
            if (v22 > 0x1555555555555555) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((uint64_t)(v56 - (void)v54) >> 2) > v22) {
              unint64_t v22 = 0x5555555555555556 * ((uint64_t)(v56 - (void)v54) >> 2);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (void)v54) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
              unint64_t v23 = 0x1555555555555555;
            }
            else {
              unint64_t v23 = v22;
            }
            if (v23) {
              unint64_t v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v23);
            }
            else {
              uint64_t v24 = 0;
            }
            uint64_t v25 = *(void *)&v14->mSelector;
            unint64_t v26 = v23 + 4 * (((char *)v10 - (char *)v21) >> 2);
            *(_DWORD *)(v26 + 8) = v14->mElement;
            *(void *)unint64_t v26 = v25;
            unint64_t v27 = v26;
            if (v10 != v21)
            {
              do
              {
                uint64_t v28 = *(uint64_t *)((char *)v10 - 12);
                int v10 = (void ***)((char *)v10 - 12);
                int v29 = *((_DWORD *)v10 + 2);
                *(void *)(v27 - 12) = v28;
                v27 -= 12;
                *(_DWORD *)(v27 + 8) = v29;
              }
              while (v10 != v21);
              int v10 = v54;
            }
            uint64_t v20 = (void ***)(v26 + 12);
            long long v54 = (void ***)v27;
            long long v55 = (void ***)(v26 + 12);
            unint64_t v56 = v23 + 12 * v24;
            if (v10) {
              operator delete(v10);
            }
          }
          else
          {
            long long v19 = *(void ***)&v14->mSelector;
            *((_DWORD *)v10 + 2) = v14->mElement;
            *int v10 = v19;
            uint64_t v20 = (void ***)((char *)v10 + 12);
          }
          long long v55 = v20;
          int v10 = v20;
        }
LABEL_40:
        ++v11;
      }
      while (v11 != a3);
      if (v54 == v10)
      {
LABEL_50:
        if (v10)
        {
          long long v55 = v10;
          operator delete(v10);
        }
        goto LABEL_52;
      }
      int v10 = v54;
      if (*(_DWORD *)v9)
      {
        std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>::pair[abi:ne180100]<HALS_Listener const&,std::vector<AudioObjectPropertyAddress>&,0>((HALS_Listener *)&v49, v9, (uint64_t)&v54);
        unint64_t v30 = v42;
        if ((unint64_t)v42 < v43)
        {
          *(void *)uint64_t v42 = v49;
          *(_OWORD *)((char *)v30 + 8) = v50;
          *(_OWORD *)((char *)v30 + 24) = v51;
          long long v50 = 0uLL;
          *((void *)v30 + 6) = 0;
          *((void *)v30 + 7) = 0;
          *((void *)v30 + 5) = 0;
          *(_OWORD *)((char *)v30 + 40) = *(_OWORD *)__p;
          *((void *)v30 + 7) = v53;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v53 = 0;
          uint64_t v42 = (HALS_Listener *)((char *)v30 + 64);
LABEL_49:
          HALS_Listener::~HALS_Listener((HALS_Listener *)&v49);
          goto LABEL_50;
        }
        uint64_t v32 = (HALS_Listener *)std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(&v41, (uint64_t)&v49);
        double v33 = __p[0];
        uint64_t v42 = v32;
        if (!__p[0]) {
          goto LABEL_49;
        }
      }
      else
      {
        std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>::pair[abi:ne180100]<HALS_Listener const&,std::vector<AudioObjectPropertyAddress>&,0>((HALS_Listener *)&v49, v9, (uint64_t)&v54);
        uint64_t v31 = v45;
        if ((unint64_t)v45 < v46)
        {
          *(void *)long long v45 = v49;
          *(_OWORD *)((char *)v31 + 8) = v50;
          *(_OWORD *)((char *)v31 + 24) = v51;
          long long v50 = 0uLL;
          *((void *)v31 + 6) = 0;
          *((void *)v31 + 7) = 0;
          *((void *)v31 + 5) = 0;
          *(_OWORD *)((char *)v31 + 40) = *(_OWORD *)__p;
          *((void *)v31 + 7) = v53;
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v53 = 0;
          long long v45 = (HALS_Listener *)((char *)v31 + 64);
          goto LABEL_49;
        }
        int v34 = (HALS_Listener *)std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(&v44, (uint64_t)&v49);
        double v33 = __p[0];
        long long v45 = v34;
        if (!__p[0]) {
          goto LABEL_49;
        }
      }
      __p[1] = v33;
      operator delete(v33);
      goto LABEL_49;
    }
LABEL_56:
    HALB_Mutex::Locker::~Locker(&v57);
    HALS_NotificationManager::Object::CallOwner((HALS_NotificationManager::Object *)*v38, a2, a3, a4, 1);
    HALS_NotificationManager::Object::CallListeners_Sync(v38, a2, v44, v45);
    uint64_t v36 = *(unsigned int **)v47;
    HALS_NotificationManager::Object::CallListeners_Sync(*(unsigned int **)v47, a2, v41, v42);
    HALS_NotificationManager::Monitor::FinishReadOperation((HALS_NotificationManager::Monitor *)(v36 + 2));
    __int16 v49 = &v41;
    std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
    __int16 v49 = &v44;
    std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
  }
  else
  {
    HALS_NotificationManager::CallOwner(this, a2, a3, (uint64_t)a4, (const AudioObjectPropertyAddress *)1);
  }
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
}

void sub_1BAE0CBF8(void *a1)
{
}

void sub_1BAE0CC08(HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void **a23)
{
  a23 = (void **)&a15;
  std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](&a23);
  a23 = (void **)&a18;
  std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](&a23);
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  _Unwind_Resume((_Unwind_Exception *)a1);
}

void std::vector<AudioObjectPropertyAddress>::__insert_with_size[abi:ne180100]<AudioObjectPropertyAddress const*,AudioObjectPropertyAddress const*>(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  int v6 = __src;
  unint64_t v10 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v10) >> 2)) < a5)
  {
    uint64_t v11 = *(char **)a1;
    unint64_t v12 = a5 - 0x5555555555555555 * ((uint64_t)(v10 - *(void *)a1) >> 2);
    if (v12 > 0x1555555555555555) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((__dst - v11) >> 2);
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v11) >> 2);
    uint64_t v15 = 2 * v14;
    if (2 * v14 <= v12) {
      uint64_t v15 = v12;
    }
    if (v14 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v16 = 0x1555555555555555;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16) {
      unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v16);
    }
    else {
      uint64_t v17 = 0;
    }
    unint64_t v26 = v16 + 12 * v13;
    uint64_t v27 = 3 * a5;
    uint64_t v28 = (char *)(v26 + 12 * a5);
    uint64_t v29 = 4 * v27;
    unint64_t v30 = v26;
    do
    {
      uint64_t v31 = *(void *)v6;
      *(_DWORD *)(v30 + 8) = *((_DWORD *)v6 + 2);
      *(void *)unint64_t v30 = v31;
      v30 += 12;
      v6 += 12;
      v29 -= 12;
    }
    while (v29);
    uint64_t v32 = *(char **)a1;
    if (*(char **)a1 != __dst)
    {
      double v33 = __dst;
      do
      {
        uint64_t v34 = *(void *)(v33 - 12);
        v33 -= 12;
        int v35 = *((_DWORD *)v33 + 2);
        *(void *)(v26 - 12) = v34;
        v26 -= 12;
        *(_DWORD *)(v26 + 8) = v35;
      }
      while (v33 != v32);
    }
    unint64_t v36 = v16 + 12 * v17;
    unsigned __int8 v37 = *(unsigned char **)(a1 + 8);
    uint64_t v38 = v37 - __dst;
    if (v37 != __dst) {
      memmove(v28, __dst, v37 - __dst);
    }
    uint64_t v39 = *(char **)a1;
    *(void *)a1 = v26;
    *(void *)(a1 + 8) = &v28[v38];
    *(void *)(a1 + 16) = v36;
    if (v39)
    {
      operator delete(v39);
    }
    return;
  }
  uint64_t v18 = v10 - (void)__dst;
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)__dst) >> 2)) >= a5)
  {
    long long v19 = &__src[12 * a5];
    uint64_t v21 = *(char **)(a1 + 8);
LABEL_17:
    unint64_t v22 = &__dst[12 * a5];
    unint64_t v23 = &v21[-12 * a5];
    uint64_t v24 = v21;
    if ((unint64_t)v23 < v10)
    {
      uint64_t v24 = v21;
      do
      {
        uint64_t v25 = *(void *)v23;
        *((_DWORD *)v24 + 2) = *((_DWORD *)v23 + 2);
        *(void *)uint64_t v24 = v25;
        v24 += 12;
        v23 += 12;
      }
      while ((unint64_t)v23 < v10);
    }
    *(void *)(a1 + 8) = v24;
    if (v21 != v22) {
      memmove(&__dst[12 * a5], __dst, v21 - v22);
    }
    if (v19 != v6)
    {
      memmove(__dst, v6, v19 - v6);
    }
    return;
  }
  long long v19 = &__src[4 * ((uint64_t)(v10 - (void)__dst) >> 2)];
  int64_t v20 = a4 - v19;
  if (a4 != v19) {
    memmove(*(void **)(a1 + 8), &__src[4 * ((uint64_t)(v10 - (void)__dst) >> 2)], a4 - v19);
  }
  uint64_t v21 = (char *)(v10 + v20);
  *(void *)(a1 + 8) = v10 + v20;
  if (v18 >= 1) {
    goto LABEL_17;
  }
}

void *std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__init_with_size[abi:ne180100]<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>*,std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 58) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    int v6 = result;
    __n128 result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>>(a4);
    uint64_t v7 = result;
    *int v6 = result;
    v6[1] = result;
    uint64_t v6[2] = &result[8 * v8];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        __n128 result = std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>::pair[abi:ne180100]((HALS_Listener *)&v7[v9 / 8], a2 + v9);
        v9 += 64;
      }
      while (a2 + v9 != a3);
      uint64_t v7 = (void *)((char *)v7 + v9);
    }
    v6[1] = v7;
  }
  return result;
}

void sub_1BAE0CFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t *std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>(uint64_t *result, unsigned int a2, uint64_t a3)
{
  long long v4 = result;
  int v6 = (uint64_t **)(result + 1);
  uint64_t v5 = result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (void *)v5;
        unsigned int v8 = *(_DWORD *)(v5 + 32);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        int v6 = (uint64_t **)v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        int v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = result + 1;
LABEL_9:
    unint64_t v9 = (char *)operator new(0x40uLL);
    *((_DWORD *)v9 + 8) = *(_DWORD *)a3;
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(a3 + 8);
    *((void *)v9 + 7) = *(void *)(a3 + 24);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)unint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v7;
    *int v6 = (uint64_t *)v9;
    uint64_t v10 = *(void *)*v4;
    if (v10)
    {
      *long long v4 = v10;
      uint64_t v11 = *v6;
    }
    else
    {
      uint64_t v11 = (uint64_t *)v9;
    }
    __n128 result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

void HALS_NotificationManager::CallGroupOwner(HALS_NotificationManager *this, uint64_t a2, uint64_t a3, uint64_t a4, const unsigned int *a5, const unsigned int *a6, uint64_t a7, const AudioObjectPropertyAddress *a8, unint64_t a9, BOOL a10)
{
  char v10 = (char)a8;
  uint64_t v18 = HALS_ObjectMap::CopyObjectByObjectID(this);
  int64_t v20 = (HALS_ObjectMap *)v18;
  if (v18)
  {
    uint64_t v21 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v18 + 28));
    unint64_t v23 = (HALS_ObjectMap *)v21;
    if (v21 && (*(unsigned int (**)(uint64_t))(*(void *)v21 + 136))(v21))
    {
      char v24 = v10;
      (*(void (**)(HALS_ObjectMap *, HALS_NotificationManager *, uint64_t, uint64_t, uint64_t, const unsigned int *, const unsigned int *, uint64_t, char))(*(void *)v23 + 152))(v23, this, a2, a3, a4, a5, a6, a7, v24);
    }
    HALS_ObjectMap::ReleaseObject(v23, v22);
  }
  HALS_ObjectMap::ReleaseObject(v20, v19);
}

void sub_1BAE0D1F4(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v3, a2);
  HALS_ObjectMap::ReleaseObject(v2, v5);
  _Unwind_Resume(a1);
}

void HALS_NotificationManager::Object::CallGroupListeners_Sync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  unint64_t v16 = dispatch_group_create();
  uint64_t v17 = *(_DWORD **)a8;
  for (uint64_t i = *(_DWORD **)(a8 + 8); v17 != i; v17 += 16)
  {
    if (*v17 <= 1u)
    {
      uint64_t v25 = v16;
      if (v16) {
        dispatch_retain(v16);
      }
      HALS_Listener::GroupCall(v17, a1, a2, a3, a4, a5, a6, a7, 1, a9, &v25);
      if (v16) {
        dispatch_release(v16);
      }
    }
  }
  dispatch_time_t v19 = dispatch_time(0, 2000000000);
  int64_t v20 = (AMCP::Log::Scope_Registry *)dispatch_group_wait(v16, v19);
  if (v20)
  {
    AMCP::Log::Scope_Registry::get(v20);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v21 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v22 = pthread_self();
      mach_port_t v23 = pthread_mach_thread_np(v22);
      *(_DWORD *)pthread_attr_t buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v23;
      *(_WORD *)uint64_t v27 = 2080;
      *(void *)&v27[2] = "HALS_NotificationManager.cpp";
      __int16 v28 = 1024;
      int v29 = 682;
      _os_log_impl(&dword_1BAA78000, v21, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d Timed out waiting for group listener notifications to complete", buf, 0x18u);
    }
  }
  if (v16) {
    dispatch_release(v16);
  }
}

void sub_1BAE0D428(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v12) {
    dispatch_release(v12);
  }
  _Unwind_Resume(v13);
}

void HALS_NotificationManager::CallListeners_Sync(uint64_t a1, void *a2)
{
  uint64_t v2 = a2 + 1;
  uint64_t v3 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v5 = v3[5];
      uint64_t v6 = v3[6];
      while (v5 != v6)
      {
        HALS_Listener::Call((HALS_Listener *)v5, (HALS_ObjectMap *)*((unsigned int *)v3 + 8), a1, -1431655765 * ((*(void *)(v5 + 48) - *(void *)(v5 + 40)) >> 2), *(const AudioObjectPropertyAddress **)(v5 + 40), 1);
        v5 += 64;
      }
      uint64_t v7 = (void *)v3[1];
      if (v7)
      {
        do
        {
          unsigned int v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unsigned int v8 = (void *)v3[2];
          BOOL v9 = *v8 == (void)v3;
          uint64_t v3 = v8;
        }
        while (!v9);
      }
      uint64_t v3 = v8;
    }
    while (v8 != v2);
  }
}

void ___ZN24HALS_NotificationManager22GroupPropertiesChangedEjjjPKjS1_jPK26AudioObjectPropertyAddress_block_invoke(HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *a1)
{
  uint64_t v1 = a1;
  mach_port_t v65 = 0;
  uint64_t v66 = 0;
  unint64_t v67 = 0;
  uint64_t v2 = *((void *)v1 + 4);
  long long v77 = (void **)(v2 + 184);
  LODWORD(v78) = HALB_Mutex::Lock((HALB_Mutex *)(v2 + 184));
  uint64_t v3 = *(void *)(v2 + 280);
  uint64_t v4 = *(void *)(v2 + 288);
  if (v3 != v4)
  {
    while (*(_DWORD *)v3 != 1)
    {
LABEL_13:
      v3 += 64;
      if (v3 == v4) {
        goto LABEL_14;
      }
    }
    long long v73 = *(void **)v3;
    uint64_t v5 = *(NSObject **)(v3 + 8);
    *(void *)uint64_t v74 = v5;
    long long v6 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)&v74[8] = v6;
    *(void *)&unsigned char v74[24] = *(void *)(v3 + 32);
    if (v5)
    {
      dispatch_retain(v5);
      uint64_t v7 = *(const void **)&v74[8];
      if (!*(void *)&v74[8]) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v7 = (const void *)v6;
      if (!(void)v6)
      {
LABEL_8:
        long long __p = 0uLL;
        uint64_t v76 = 0;
        unsigned int v8 = v66;
        if ((unint64_t)v66 >= v67)
        {
          uint64_t v66 = (void *)std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(&v65, (uint64_t)&v73);
          if ((void)__p)
          {
            *((void *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
        }
        else
        {
          void *v66 = v73;
          *(_OWORD *)(v8 + 1) = *(_OWORD *)v74;
          *(_OWORD *)(v8 + 3) = *(_OWORD *)&v74[16];
          *(_OWORD *)uint64_t v74 = 0uLL;
          v8[6] = 0;
          v8[7] = 0;
          v8[5] = 0;
          *(_OWORD *)(v8 + 5) = __p;
          v8[7] = v76;
          long long __p = 0uLL;
          uint64_t v76 = 0;
          uint64_t v66 = v8 + 8;
        }
        HALS_Listener::~HALS_Listener((HALS_Listener *)&v73);
        goto LABEL_13;
      }
    }
    *(void *)&v74[8] = _Block_copy(v7);
    goto LABEL_8;
  }
LABEL_14:
  HALB_Mutex::Locker::~Locker((HALB_Mutex **)&v77);
  uint64_t v9 = *((void *)v1 + 6);
  uint64_t v10 = (unint64_t)(*((void *)v1 + 7) - v9) >> 2;
  uint64_t v11 = *((void *)v1 + 12);
  uint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v1 + 13) - v11) >> 2);
  unint64_t v14 = v65;
  unint64_t v13 = v66;
  uint64_t v57 = v1;
  if (v65 == (_DWORD *)v66)
  {
    dispatch_time_t v19 = (unsigned int *)*((void *)v1 + 6);
    unint64_t v20 = (unint64_t)(*((void *)v1 + 7) - v9) >> 2;
  }
  else
  {
    uint64_t v15 = v1;
    uint64_t v16 = *((unsigned int *)v1 + 32);
    uint64_t v17 = *((unsigned int *)v15 + 33);
    uint64_t v18 = *((void *)v15 + 9);
    do
    {
      if (*v14 <= 1u)
      {
        long long v73 = 0;
        *(_OWORD *)uint64_t v74 = 0uLL;
        long long v77 = 0;
        HALS_Listener::GroupCall(v14, v16, v17, v10, v9, v18, v12, v11, 0, (uint64_t)&v73, (NSObject **)&v77);
        if (v73)
        {
          *(void *)uint64_t v74 = v73;
          operator delete(v73);
        }
      }
      v14 += 16;
    }
    while (v14 != v13);
    uint64_t v1 = v57;
    dispatch_time_t v19 = (unsigned int *)*((void *)v57 + 6);
    uint64_t v11 = *((void *)v57 + 12);
    uint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)v57 + 13) - v11) >> 2);
    unint64_t v20 = (*((void *)v57 + 7) - (void)v19) >> 2;
  }
  v64[0] = 0;
  v64[1] = 0;
  long long v63 = v64;
  if (v20)
  {
    unsigned int v21 = v12;
    if (v12)
    {
      unint64_t v22 = (unsigned int *)*((void *)v1 + 9);
      uint64_t v58 = v11 + 12 * v21;
      do
      {
        HALS_NotificationManager::FindObject((HALS_NotificationManager *)&v71, *v19);
        uint64_t v23 = v71;
        if (v71)
        {
          int v60 = v20;
          uint64_t v61 = v19;
          mach_port_t v68 = 0;
          char v69 = 0;
          unint64_t v70 = 0;
          mach_port_t v59 = v22;
          uint64_t v24 = *v22;
          long long v80 = (HALB_Mutex *)(v71 + 184);
          int v81 = HALB_Mutex::Lock((HALB_Mutex *)(v71 + 184));
          unint64_t v26 = *(const HALS_Listener **)(v23 + 280);
          uint64_t v25 = *(const HALS_Listener **)(v23 + 288);
          if (v26 != v25)
          {
            int v62 = v25;
            do
            {
              if (*(_DWORD *)v26 >= 2u)
              {
                long long v77 = 0;
                uint64_t v78 = 0;
                unint64_t v79 = 0;
                if (v24)
                {
                  uint64_t v27 = 0;
                  for (uint64_t i = 0; i != v24; ++i)
                  {
                    int v29 = (_DWORD *)*((void *)v26 + 5);
                    uint64_t v30 = (_DWORD *)*((void *)v26 + 6);
                    if (v29 != v30)
                    {
                      uint64_t v31 = (_DWORD *)(v11 + 12 * i);
                      while (1)
                      {
                        BOOL v32 = *v29 == 707406378 || *v29 == *v31;
                        if (v32)
                        {
                          int v33 = v29[1];
                          if (v33 == 707406378 || v33 == v31[1])
                          {
                            int v35 = v29[2];
                            if (v35 == -1 || v35 == v31[2]) {
                              break;
                            }
                          }
                        }
                        v29 += 3;
                        if (v29 == v30) {
                          goto LABEL_64;
                        }
                      }
                      if ((unint64_t)v27 >= v79)
                      {
                        uint64_t v38 = v77;
                        unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - (char *)v77) >> 2) + 1;
                        if (v39 > 0x1555555555555555) {
                          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                        }
                        if (0x5555555555555556 * ((uint64_t)(v79 - (void)v77) >> 2) > v39) {
                          unint64_t v39 = 0x5555555555555556 * ((uint64_t)(v79 - (void)v77) >> 2);
                        }
                        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - (void)v77) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                          unint64_t v40 = 0x1555555555555555;
                        }
                        else {
                          unint64_t v40 = v39;
                        }
                        if (v40) {
                          unint64_t v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v40);
                        }
                        else {
                          uint64_t v41 = 0;
                        }
                        uint64_t v42 = *(void *)v31;
                        unint64_t v43 = v40 + 4 * (((char *)v27 - (char *)v38) >> 2);
                        *(_DWORD *)(v43 + 8) = v31[2];
                        *(void *)unint64_t v43 = v42;
                        unint64_t v44 = v43;
                        if (v27 != v38)
                        {
                          do
                          {
                            uint64_t v45 = *(uint64_t *)((char *)v27 - 12);
                            uint64_t v27 = (void **)((char *)v27 - 12);
                            int v46 = *((_DWORD *)v27 + 2);
                            *(void *)(v44 - 12) = v45;
                            v44 -= 12;
                            *(_DWORD *)(v44 + 8) = v46;
                          }
                          while (v27 != v38);
                          uint64_t v27 = v77;
                        }
                        unsigned __int8 v37 = (void **)(v43 + 12);
                        long long v77 = (void **)v44;
                        uint64_t v78 = (void **)(v43 + 12);
                        unint64_t v79 = v40 + 12 * v41;
                        if (v27) {
                          operator delete(v27);
                        }
                      }
                      else
                      {
                        unint64_t v36 = *(void **)v31;
                        *((_DWORD *)v27 + 2) = v31[2];
                        *uint64_t v27 = v36;
                        unsigned __int8 v37 = (void **)((char *)v27 + 12);
                      }
                      uint64_t v78 = v37;
                      uint64_t v27 = v37;
                    }
LABEL_64:
                    ;
                  }
                  uint64_t v25 = v62;
                  if (v77 != v27)
                  {
                    uint64_t v27 = v77;
                    if ((*(_DWORD *)v26 - 1) <= 5)
                    {
                      std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>::pair[abi:ne180100]<HALS_Listener const&,std::vector<AudioObjectPropertyAddress>&,0>((HALS_Listener *)&v73, v26, (uint64_t)&v77);
                      int v47 = v69;
                      if ((unint64_t)v69 >= v70)
                      {
                        char v69 = (char *)std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(&v68, (uint64_t)&v73);
                        if ((void)__p)
                        {
                          *((void *)&__p + 1) = __p;
                          operator delete((void *)__p);
                        }
                      }
                      else
                      {
                        *(void *)char v69 = v73;
                        *(_OWORD *)(v47 + 8) = *(_OWORD *)v74;
                        *(_OWORD *)(v47 + 24) = *(_OWORD *)&v74[16];
                        *(_OWORD *)uint64_t v74 = 0uLL;
                        *((void *)v47 + 6) = 0;
                        *((void *)v47 + 7) = 0;
                        *((void *)v47 + 5) = 0;
                        *(_OWORD *)(v47 + 40) = __p;
                        *((void *)v47 + 7) = v76;
                        long long __p = 0uLL;
                        uint64_t v76 = 0;
                        char v69 = v47 + 64;
                      }
                      HALS_Listener::~HALS_Listener((HALS_Listener *)&v73);
                    }
                  }
                  if (v27)
                  {
                    uint64_t v78 = v27;
                    operator delete(v27);
                  }
                }
              }
              unint64_t v26 = (const HALS_Listener *)((char *)v26 + 64);
            }
            while (v26 != v25);
          }
          HALB_Mutex::Locker::~Locker(&v80);
          LODWORD(v20) = v60;
          dispatch_time_t v19 = v61;
          unint64_t v22 = v59;
          if (v68 != v69)
          {
            LODWORD(v73) = *v61;
            memset(v74, 0, 24);
            std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__init_with_size[abi:ne180100]<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>*,std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>*>(v74, (uint64_t)v68, (uint64_t)v69, (v69 - v68) >> 6);
            std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>((uint64_t *)&v63, v73, (uint64_t)&v73);
            long long v77 = (void **)v74;
            std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](&v77);
          }
          long long v73 = &v68;
          std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
        }
        unsigned int v49 = *v22++;
        unsigned int v48 = v49;
        if (v72) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v72);
        }
        LODWORD(v20) = v20 - 1;
        if (!v20) {
          break;
        }
        v11 += 12 * v48;
        ++v19;
      }
      while (v11 != v58);
      uint64_t v50 = (uint64_t)v63;
      uint64_t v1 = v57;
      if (v63 != v64)
      {
        uint64_t v51 = *((unsigned int *)v57 + 33);
        do
        {
          uint64_t v52 = *(void *)(v50 + 40);
          uint64_t v53 = *(void *)(v50 + 48);
          while (v52 != v53)
          {
            HALS_Listener::Call((HALS_Listener *)v52, (HALS_ObjectMap *)*(unsigned int *)(v50 + 32), v51, -1431655765 * ((*(void *)(v52 + 48) - *(void *)(v52 + 40)) >> 2), *(const AudioObjectPropertyAddress **)(v52 + 40), 0);
            v52 += 64;
          }
          long long v54 = *(char **)(v50 + 8);
          if (v54)
          {
            do
            {
              long long v55 = (char **)v54;
              long long v54 = *(char **)v54;
            }
            while (v54);
          }
          else
          {
            do
            {
              long long v55 = *(char ***)(v50 + 16);
              BOOL v32 = *v55 == (char *)v50;
              uint64_t v50 = (uint64_t)v55;
            }
            while (!v32);
          }
          uint64_t v50 = (uint64_t)v55;
        }
        while (v55 != v64);
      }
    }
  }
  HALS_NotificationManager::Monitor::FinishReadOperation((HALS_NotificationManager::Monitor *)(*((void *)v1 + 4) + 8));
  std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::destroy(v64[0]);
  long long v73 = &v65;
  std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
}

void sub_1BAE0DBD4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33)
{
  a33 = (void **)&a25;
  std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](&a33);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAE0DBA8);
}

void sub_1BAE0DCB0(HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *a1)
{
}

void std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::destroy(*((void *)a1 + 1));
    uint64_t v2 = (void **)(a1 + 40);
    std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](&v2);
    operator delete(a1);
  }
}

void __destroy_helper_block_e8_32c61_ZTSNSt3__110shared_ptrIN24HALS_NotificationManager6ObjectEEE48c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE72c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE96c68_ZTSNSt3__16vectorI26AudioObjectPropertyAddressNS_9allocatorIS1_EEEE(void *a1)
{
  uint64_t v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[9];
  if (v3)
  {
    a1[10] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[6];
  if (v4)
  {
    a1[7] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[5];
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void *__copy_helper_block_e8_32c61_ZTSNSt3__110shared_ptrIN24HALS_NotificationManager6ObjectEEE48c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE72c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE96c68_ZTSNSt3__16vectorI26AudioObjectPropertyAddressNS_9allocatorIS1_EEEE(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 6, *(const void **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 2);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 9, *(const void **)(a2 + 72), *(void *)(a2 + 80), (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2);
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  return std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(a1 + 12, *(const void **)(a2 + 96), *(void *)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 2));
}

void sub_1BAE0DE44(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    v1[10] = v5;
    operator delete(v5);
  }
  long long v6 = *v2;
  if (*v2)
  {
    v1[7] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)v1[5];
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  _Unwind_Resume(exception_object);
}

void HALS_Listener::GroupCall(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, NSObject **a11)
{
  if (*a1 <= 1u)
  {
    dispatch_time_t v19 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)a1[1]);
    if (v19)
    {
      unint64_t v20 = *a11;
      dispatch_object_t object = v20;
      if (v20) {
        dispatch_retain(v20);
      }
      (*(void (**)(HALS_ObjectMap *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, dispatch_object_t *))(*(void *)v19 + 168))(v19, a2, a3, a4, a5, a6, a7, a8, a9, a10, &object);
      if (object) {
        dispatch_release(object);
      }
    }
    HALS_ObjectMap::ReleaseObject(v19, v18);
  }
}

void sub_1BAE0DF84(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  HALS_ObjectMap::ReleaseObject(v12, a2);
  _Unwind_Resume(a1);
}

void HALS_NotificationManager::GroupPropertiesChanged(char a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  v155 = 0;
  __dst = 0;
  uint64_t v157 = 0;
  uint64_t v7 = *(char **)a4;
  uint64_t v8 = *(void *)(a4 + 8);
  if (*(void *)a4 == v8)
  {
    uint64_t v10 = 0;
    uint64_t v16 = 0;
    v154 = 0;
    unint64_t v14 = 0;
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v10 = (char *)operator new(4uLL);
    *(_DWORD *)uint64_t v10 = a2;
    uint64_t v11 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(1uLL);
    uint64_t v13 = v12;
    *uint64_t v11 = -1431655765 * ((unint64_t)(v8 - (void)v7) >> 2);
    unint64_t v14 = v11 + 1;
    uint64_t v15 = -1431655765 * ((*(void *)(a4 + 8) - *(void *)a4) >> 2);
    std::vector<AudioObjectPropertyAddress>::__insert_with_size[abi:ne180100]<AudioObjectPropertyAddress const*,AudioObjectPropertyAddress const*>((uint64_t)&v155, 0, *(char **)a4, (char *)(*(void *)a4 + 12 * v15), v15);
    uint64_t v16 = v10 + 4;
    v154 = v11;
    uint64_t v17 = (char *)&v11[v13];
  }
  uint64_t v18 = *a5;
  uint64_t v19 = a5[1] - *a5;
  char v150 = a1;
  if ((v19 & 0x1FFFFFFFE0) != 0)
  {
    unint64_t v20 = 0;
    unsigned int v21 = v16;
    do
    {
      unint64_t v22 = v10;
      if (v20 >= v19 >> 5) {
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v23 = v18 + 32 * v20;
      int v24 = *(_DWORD *)(v23 + 24);
      if (v16 >= v21)
      {
        uint64_t v25 = (v16 - v22) >> 2;
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        if ((v21 - v22) >> 1 > v26) {
          unint64_t v26 = (v21 - v22) >> 1;
        }
        if ((unint64_t)(v21 - v22) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27) {
          unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v27);
        }
        else {
          uint64_t v28 = 0;
        }
        int v29 = (char *)(v27 + 4 * v25);
        *(_DWORD *)int v29 = v24;
        uint64_t v30 = v29 + 4;
        while (v16 != v22)
        {
          int v31 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v29 - 1) = v31;
          v29 -= 4;
        }
        unsigned int v21 = (char *)(v27 + 4 * v28);
        if (v22) {
          operator delete(v22);
        }
        unint64_t v22 = v29;
        uint64_t v16 = v30;
      }
      else
      {
        *(_DWORD *)uint64_t v16 = v24;
        v16 += 4;
      }
      unsigned int v32 = -1431655765 * ((*(void *)(v23 + 8) - *(void *)v23) >> 2);
      if (v14 >= (unsigned int *)v17)
      {
        uint64_t v33 = v14 - v154;
        unint64_t v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 62) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        if ((v17 - (char *)v154) >> 1 > v34) {
          unint64_t v34 = (v17 - (char *)v154) >> 1;
        }
        if ((unint64_t)(v17 - (char *)v154) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v34;
        }
        if (v35) {
          unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v35);
        }
        else {
          uint64_t v36 = 0;
        }
        unsigned __int8 v37 = (unsigned int *)(v35 + 4 * v33);
        *unsigned __int8 v37 = v32;
        uint64_t v38 = v37 + 1;
        uint64_t v10 = v22;
        while (v14 != v154)
        {
          unsigned int v39 = *--v14;
          *--unsigned __int8 v37 = v39;
        }
        uint64_t v17 = (char *)(v35 + 4 * v36);
        if (v154) {
          operator delete(v154);
        }
        v154 = v37;
        unint64_t v14 = v38;
      }
      else
      {
        *v14++ = v32;
        uint64_t v10 = v22;
      }
      uint64_t v40 = -1431655765 * ((*(void *)(v23 + 8) - *(void *)v23) >> 2);
      std::vector<AudioObjectPropertyAddress>::__insert_with_size[abi:ne180100]<AudioObjectPropertyAddress const*,AudioObjectPropertyAddress const*>((uint64_t)&v155, (char *)__dst, *(char **)v23, (char *)(*(void *)v23 + 12 * v40), v40);
      ++v20;
      uint64_t v18 = *a5;
      uint64_t v19 = a5[1] - *a5;
    }
    while (v20 < ((unint64_t)v19 >> 5));
  }
  v140 = (char *)v155;
  uint64_t v141 = (unint64_t)(v16 - v10) >> 2;
  unint64_t v139 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)__dst - (unsigned char *)v155) >> 2);
  if ((v150 & 1) == 0)
  {
    unint64_t v137 = v16 - v10;
    uint64_t v41 = v154;
    if (atomic_load_explicit((atomic_ullong *volatile)&HALS_NotificationManager::sInitialized, memory_order_acquire) != -1)
    {
      block = HALS_NotificationManager::Initialize;
      p_block = &block;
      std::__call_once(&HALS_NotificationManager::sInitialized, &p_block, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>);
    }
    uint64_t v89 = mach_absolute_time();
    HALS_NotificationManager::FindObject((HALS_NotificationManager *)&v158, a2);
    uint64_t v90 = (uint64_t)v158;
    if (v158)
    {
      HALS_NotificationManager::Monitor::BeginReadOperation((HALS_NotificationManager::Monitor *)(v158 + 1));
      uint64_t v134 = v89;
      v188 = 0;
      v189 = 0;
      unint64_t v190 = 0;
      p_block = (void **)(v90 + 184);
      LODWORD(v195) = HALB_Mutex::Lock((HALB_Mutex *)(v90 + 184));
      uint64_t v91 = *(void *)(v90 + 280);
      uint64_t v92 = *(void *)(v90 + 288);
      if (v91 != v92)
      {
        while (*(_DWORD *)v91)
        {
LABEL_152:
          v91 += 64;
          if (v91 == v92) {
            goto LABEL_153;
          }
        }
        block = *(void **)v91;
        *(void *)v169 = *(void *)(v91 + 8);
        long long v93 = *(_OWORD *)(v91 + 16);
        *(_OWORD *)&v169[8] = v93;
        *(void *)&v169[24] = *(void *)(v91 + 32);
        if (*(void *)v169)
        {
          dispatch_retain(*(dispatch_object_t *)v169);
          char v94 = *(const void **)&v169[8];
          if (!*(void *)&v169[8]) {
            goto LABEL_147;
          }
        }
        else
        {
          char v94 = (const void *)v93;
          if (!(void)v93)
          {
LABEL_147:
            long long __p = 0uLL;
            uint64_t v171 = 0;
            long long v95 = v189;
            if ((unint64_t)v189 >= v190)
            {
              v189 = (char *)std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(&v188, (uint64_t)&block);
              if ((void)__p)
              {
                *((void *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
            }
            else
            {
              *(void *)v189 = block;
              *(_OWORD *)(v95 + 8) = *(_OWORD *)v169;
              *(_OWORD *)(v95 + 24) = *(_OWORD *)&v169[16];
              *(void *)v169 = 0;
              *(void *)&v169[8] = 0;
              *((void *)v95 + 6) = 0;
              *((void *)v95 + 7) = 0;
              *((void *)v95 + 5) = 0;
              *(_OWORD *)(v95 + 40) = __p;
              *((void *)v95 + 7) = v171;
              long long __p = 0uLL;
              uint64_t v171 = 0;
              v189 = v95 + 64;
            }
            HALS_Listener::~HALS_Listener((HALS_Listener *)&block);
            goto LABEL_152;
          }
        }
        *(void *)&v169[8] = _Block_copy(v94);
        goto LABEL_147;
      }
LABEL_153:
      v135 = (unsigned int *)v10;
      HALB_Mutex::Locker::~Locker((HALB_Mutex **)&p_block);
      v186 = 0;
      unint64_t v187 = 0;
      v185 = &v186;
      uint64_t v143 = (uint64_t)&v140[12 * v139];
      if (v141 && v139)
      {
        uint64_t v96 = v140;
        int v97 = v141;
        int v98 = v135;
        __int16 v99 = v154;
        while (1)
        {
          HALS_NotificationManager::FindObject((HALS_NotificationManager *)&v160, *v98);
          uint64_t v100 = (uint64_t)v160;
          if (v160)
          {
            v145 = v99;
            v147 = v98;
            int v149 = v97;
            v191 = 0;
            v192 = 0;
            unint64_t v193 = 0;
            uint64_t v101 = *v99;
            v182 = (HALB_Mutex *)(v160 + 23);
            LODWORD(v183) = HALB_Mutex::Lock((HALB_Mutex *)(v160 + 23));
            v103 = *(const HALS_Listener **)(v100 + 280);
            int v102 = *(const HALS_Listener **)(v100 + 288);
            if (v103 != v102)
            {
              v153 = v102;
              while (1)
              {
                if (*(_DWORD *)v103 < 2u) {
                  goto LABEL_200;
                }
                p_block = 0;
                unint64_t v195 = 0;
                unint64_t v196 = 0;
                if (!v101) {
                  goto LABEL_200;
                }
                long long v104 = 0;
                for (uint64_t i = 0; i != v101; ++i)
                {
                  long long v106 = (_DWORD *)*((void *)v103 + 5);
                  long long v107 = (_DWORD *)*((void *)v103 + 6);
                  if (v106 != v107)
                  {
                    uint64_t v108 = &v96[12 * i];
                    while (1)
                    {
                      if (*v106 == 707406378 || *v106 == *(_DWORD *)v108)
                      {
                        int v110 = v106[1];
                        if (v110 == 707406378 || v110 == *((_DWORD *)v108 + 1))
                        {
                          int v112 = v106[2];
                          if (v112 == -1 || v112 == *((_DWORD *)v108 + 2)) {
                            break;
                          }
                        }
                      }
                      v106 += 3;
                      if (v106 == v107) {
                        goto LABEL_195;
                      }
                    }
                    if ((unint64_t)v104 >= v196)
                    {
                      int v115 = p_block;
                      unint64_t v116 = 0xAAAAAAAAAAAAAAABLL * (((char *)v104 - (char *)p_block) >> 2) + 1;
                      if (v116 > 0x1555555555555555) {
                        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                      }
                      if (0x5555555555555556 * ((uint64_t)(v196 - (void)p_block) >> 2) > v116) {
                        unint64_t v116 = 0x5555555555555556 * ((uint64_t)(v196 - (void)p_block) >> 2);
                      }
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v196 - (void)p_block) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                        unint64_t v117 = 0x1555555555555555;
                      }
                      else {
                        unint64_t v117 = v116;
                      }
                      if (v117) {
                        unint64_t v117 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v117);
                      }
                      else {
                        uint64_t v118 = 0;
                      }
                      uint64_t v119 = *(void **)v108;
                      unint64_t v120 = v117 + 4 * (((char *)v104 - (char *)v115) >> 2);
                      *(_DWORD *)(v120 + 8) = *((_DWORD *)v108 + 2);
                      *(void *)unint64_t v120 = v119;
                      unint64_t v121 = v120;
                      if (v104 != v115)
                      {
                        do
                        {
                          uint64_t v122 = *(uint64_t *)((char *)v104 - 12);
                          long long v104 = (void **)((char *)v104 - 12);
                          int v123 = *((_DWORD *)v104 + 2);
                          *(void *)(v121 - 12) = v122;
                          v121 -= 12;
                          *(_DWORD *)(v121 + 8) = v123;
                        }
                        while (v104 != v115);
                        long long v104 = p_block;
                      }
                      uint64_t v114 = v120 + 12;
                      p_block = (void **)v121;
                      unint64_t v195 = v120 + 12;
                      unint64_t v196 = v117 + 12 * v118;
                      if (v104) {
                        operator delete(v104);
                      }
                    }
                    else
                    {
                      v113 = *(void **)v108;
                      *((_DWORD *)v104 + 2) = *((_DWORD *)v108 + 2);
                      *long long v104 = v113;
                      uint64_t v114 = (uint64_t)v104 + 12;
                    }
                    unint64_t v195 = v114;
                    long long v104 = (void **)v114;
                  }
LABEL_195:
                  ;
                }
                int v102 = v153;
                if (p_block != v104)
                {
                  long long v104 = p_block;
                  if (!*(_DWORD *)v103) {
                    break;
                  }
                }
                if (v104) {
                  goto LABEL_199;
                }
LABEL_200:
                v103 = (const HALS_Listener *)((char *)v103 + 64);
                if (v103 == v102) {
                  goto LABEL_208;
                }
              }
              std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>::pair[abi:ne180100]<HALS_Listener const&,std::vector<AudioObjectPropertyAddress>&,0>((HALS_Listener *)&block, v103, (uint64_t)&p_block);
              v124 = v192;
              if ((unint64_t)v192 >= v193)
              {
                v192 = (void *)std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(&v191, (uint64_t)&block);
                if ((void)__p)
                {
                  *((void *)&__p + 1) = __p;
                  operator delete((void *)__p);
                }
              }
              else
              {
                void *v192 = block;
                *(_OWORD *)(v124 + 1) = *(_OWORD *)v169;
                *(_OWORD *)(v124 + 3) = *(_OWORD *)&v169[16];
                *(void *)v169 = 0;
                *(void *)&v169[8] = 0;
                v124[6] = 0;
                v124[7] = 0;
                v124[5] = 0;
                *(_OWORD *)(v124 + 5) = __p;
                v124[7] = v171;
                long long __p = 0uLL;
                uint64_t v171 = 0;
                v192 = v124 + 8;
              }
              HALS_Listener::~HALS_Listener((HALS_Listener *)&block);
              if (!v104) {
                goto LABEL_200;
              }
LABEL_199:
              unint64_t v195 = (unint64_t)v104;
              operator delete(v104);
              goto LABEL_200;
            }
LABEL_208:
            HALB_Mutex::Locker::~Locker(&v182);
            int v97 = v149;
            __int16 v99 = v145;
            int v98 = v147;
            if (v191 != (unsigned char *)v192)
            {
              LODWORD(block) = *v147;
              memset(v169, 0, 24);
              std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__init_with_size[abi:ne180100]<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>*,std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>*>(v169, (uint64_t)v191, (uint64_t)v192, ((char *)v192 - v191) >> 6);
              std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>((uint64_t *)&v185, block, (uint64_t)&block);
              p_block = (void **)v169;
              std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](&p_block);
            }
            block = &v191;
            std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&block);
          }
          unsigned int v126 = *v99++;
          unsigned int v125 = v126;
          if (v161[0]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v161[0]);
          }
          if (--v97)
          {
            v96 += 12 * v125;
            ++v98;
            if (v96 != (char *)v143) {
              continue;
            }
          }
          break;
        }
      }
      uint64_t v10 = (char *)v135;
      uint64_t v41 = v154;
      HALS_NotificationManager::CallGroupOwner((HALS_NotificationManager *)a2, a3, v141, (uint64_t)v135, v154, (const unsigned int *)v139, (uint64_t)v140, 0, v131, v139);
      block = 0;
      *(void *)v169 = 0;
      *(void *)&v169[8] = 0;
      HALS_NotificationManager::Object::CallGroupListeners_Sync(a2, a3, v141, (uint64_t)v135, (uint64_t)v154, v139, (uint64_t)v140, (uint64_t)&v188, (uint64_t)&block);
      if (block)
      {
        *(void *)v169 = block;
        operator delete(block);
      }
      HALS_NotificationManager::CallListeners_Sync(a3, &v185);
      p_block = 0;
      unint64_t v195 = 0;
      unint64_t v196 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(&p_block, v135, (uint64_t)&v135[v141], (v137 >> 2));
      v191 = 0;
      v192 = 0;
      unint64_t v193 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(&v191, v154, (uint64_t)&v154[(v137 >> 2)], (v137 >> 2));
      v182 = 0;
      v183 = 0;
      unint64_t v184 = 0;
      std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress const*,AudioObjectPropertyAddress const*>(&v182, v140, v143, v133);
      uint64_t v127 = (uint64_t)v158;
      v128 = v159[0];
      block = (void *)MEMORY[0x1E4F143A8];
      *(void *)v169 = 1174405120;
      *(void *)&v169[8] = ___ZN24HALS_NotificationManager22GroupPropertiesChangedEjjjPKjS1_jPK26AudioObjectPropertyAddress_block_invoke;
      *(void *)&v169[16] = &__block_descriptor_tmp_1_11144;
      *(void *)&v169[24] = v158;
      *(char **)&long long __p = v159[0];
      if (v159[0]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v159[0] + 1, 1uLL, memory_order_relaxed);
      }
      unsigned int v180 = a2;
      uint64_t v171 = 0;
      uint64_t v172 = 0;
      *((void *)&__p + 1) = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)&__p + 1, p_block, v195, (uint64_t)(v195 - (void)p_block) >> 2);
      v173 = 0;
      v174 = 0;
      uint64_t v175 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v173, v191, (uint64_t)v192, ((char *)v192 - v191) >> 2);
      v176 = 0;
      v177 = 0;
      uint64_t v178 = 0;
      std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&v176, v182, (uint64_t)v183, 0xAAAAAAAAAAAAAAABLL * ((v183 - (char *)v182) >> 2));
      unsigned int v181 = a3;
      uint64_t v179 = v134;
      unsigned __int8 v129 = atomic_load((unsigned __int8 *)(v127 + 336));
      if (v129) {
        atomic_store(1u, (unsigned __int8 *)(v127 + 337));
      }
      dispatch_async(*(dispatch_queue_t *)(v127 + 304), &block);
      if (v176)
      {
        v177 = v176;
        operator delete(v176);
      }
      if (v173)
      {
        v174 = v173;
        operator delete(v173);
      }
      if (*((void *)&__p + 1))
      {
        uint64_t v171 = *((void *)&__p + 1);
        operator delete(*((void **)&__p + 1));
      }
      if ((void)__p) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p);
      }
      if (v182) {
        operator delete(v182);
      }
      if (v191) {
        operator delete(v191);
      }
      if (p_block) {
        operator delete(p_block);
      }
      std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::destroy(v186);
      p_block = (void **)&v188;
      std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](&p_block);
      if (!v128) {
        goto LABEL_243;
      }
    }
    else
    {
      HALS_NotificationManager::CallGroupOwner((HALS_NotificationManager *)a2, a3, v141, (uint64_t)v10, v154, (const unsigned int *)v139, (uint64_t)v140, 0, v131, v132);
      v128 = v159[0];
      if (!v159[0]) {
        goto LABEL_243;
      }
    }
    v130 = (std::__shared_weak_count *)v128;
LABEL_242:
    std::__shared_weak_count::__release_shared[abi:ne180100](v130);
    goto LABEL_243;
  }
  uint64_t v41 = v154;
  if (atomic_load_explicit((atomic_ullong *volatile)&HALS_NotificationManager::sInitialized, memory_order_acquire) != -1)
  {
    block = HALS_NotificationManager::Initialize;
    p_block = &block;
    std::__call_once(&HALS_NotificationManager::sInitialized, &p_block, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>);
  }
  mach_absolute_time();
  HALS_NotificationManager::FindObject((HALS_NotificationManager *)&v162, a2);
  uint64_t v42 = v162;
  if (v162)
  {
    HALS_NotificationManager::Monitor::BeginReadOperation((HALS_NotificationManager::Monitor *)(v162 + 8));
    v185 = 0;
    v186 = 0;
    unint64_t v187 = 0;
    v182 = 0;
    v183 = 0;
    unint64_t v184 = 0;
    p_block = (void **)(v42 + 184);
    LODWORD(v195) = HALB_Mutex::Lock((HALB_Mutex *)(v42 + 184));
    uint64_t v43 = *(void *)(v42 + 280);
    uint64_t v44 = *(void *)(v42 + 288);
    if (v43 != v44)
    {
      while (*(_DWORD *)v43 > 1u)
      {
LABEL_68:
        v43 += 64;
        if (v43 == v44) {
          goto LABEL_69;
        }
      }
      if (*(_DWORD *)v43)
      {
        block = *(void **)v43;
        *(void *)v169 = *(void *)(v43 + 8);
        long long v45 = *(_OWORD *)(v43 + 16);
        *(_OWORD *)&v169[8] = v45;
        *(void *)&v169[24] = *(void *)(v43 + 32);
        if (*(void *)v169)
        {
          dispatch_retain(*(dispatch_object_t *)v169);
          int v46 = *(const void **)&v169[8];
          if (!*(void *)&v169[8]) {
            goto LABEL_57;
          }
        }
        else
        {
          int v46 = (const void *)v45;
          if (!(void)v45)
          {
LABEL_57:
            long long __p = 0uLL;
            uint64_t v171 = 0;
            unsigned int v49 = v183;
            if ((unint64_t)v183 < v184)
            {
              *(void *)v183 = block;
              *(_OWORD *)(v49 + 8) = *(_OWORD *)v169;
              *(_OWORD *)(v49 + 24) = *(_OWORD *)&v169[16];
              *(void *)v169 = 0;
              *(void *)&v169[8] = 0;
              *((void *)v49 + 6) = 0;
              *((void *)v49 + 7) = 0;
              *((void *)v49 + 5) = 0;
              *(_OWORD *)(v49 + 40) = __p;
              *((void *)v49 + 7) = v171;
              long long __p = 0uLL;
              uint64_t v171 = 0;
              v183 = v49 + 64;
LABEL_67:
              HALS_Listener::~HALS_Listener((HALS_Listener *)&block);
              goto LABEL_68;
            }
            uint64_t v50 = (char *)std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(&v182, (uint64_t)&block);
            uint64_t v51 = (void *)__p;
            v183 = v50;
            if (!(void)__p) {
              goto LABEL_67;
            }
            goto LABEL_66;
          }
        }
        *(void *)&v169[8] = _Block_copy(v46);
        goto LABEL_57;
      }
      block = *(void **)v43;
      *(void *)v169 = *(void *)(v43 + 8);
      long long v47 = *(_OWORD *)(v43 + 16);
      *(_OWORD *)&v169[8] = v47;
      *(void *)&v169[24] = *(void *)(v43 + 32);
      if (*(void *)v169)
      {
        dispatch_retain(*(dispatch_object_t *)v169);
        unsigned int v48 = *(const void **)&v169[8];
        if (!*(void *)&v169[8]) {
          goto LABEL_63;
        }
      }
      else
      {
        unsigned int v48 = (const void *)v47;
        if (!(void)v47)
        {
LABEL_63:
          long long __p = 0uLL;
          uint64_t v171 = 0;
          uint64_t v52 = v186;
          if ((unint64_t)v186 < v187)
          {
            *(void *)v186 = block;
            *(_OWORD *)(v52 + 8) = *(_OWORD *)v169;
            *(_OWORD *)(v52 + 24) = *(_OWORD *)&v169[16];
            *(void *)v169 = 0;
            *(void *)&v169[8] = 0;
            *((void *)v52 + 6) = 0;
            *((void *)v52 + 7) = 0;
            *((void *)v52 + 5) = 0;
            *(_OWORD *)(v52 + 40) = __p;
            *((void *)v52 + 7) = v171;
            long long __p = 0uLL;
            uint64_t v171 = 0;
            v186 = v52 + 64;
            goto LABEL_67;
          }
          uint64_t v53 = (char *)std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(&v185, (uint64_t)&block);
          uint64_t v51 = (void *)__p;
          v186 = v53;
          if (!(void)__p) {
            goto LABEL_67;
          }
LABEL_66:
          *((void *)&__p + 1) = v51;
          operator delete(v51);
          goto LABEL_67;
        }
      }
      *(void *)&v169[8] = _Block_copy(v48);
      goto LABEL_63;
    }
LABEL_69:
    HALB_Mutex::Locker::~Locker((HALB_Mutex **)&p_block);
    v161[0] = 0;
    v161[1] = 0;
    v159[1] = 0;
    v160 = v161;
    v158 = v159;
    v159[0] = 0;
    if (v141 && v139)
    {
      long long v54 = v140;
      int v55 = v141;
      unint64_t v56 = (unsigned int *)v10;
      v146 = v154;
      while (1)
      {
        int v144 = v55;
        v148 = v56;
        HALS_NotificationManager::FindObject((HALS_NotificationManager *)&v164, *v56);
        uint64_t v57 = v164;
        if (v164)
        {
          v191 = 0;
          v192 = 0;
          unint64_t v193 = 0;
          v188 = 0;
          v189 = 0;
          unint64_t v190 = 0;
          uint64_t v58 = *v146;
          v166 = (HALB_Mutex *)(v164 + 184);
          int v167 = HALB_Mutex::Lock((HALB_Mutex *)(v164 + 184));
          int v60 = *(const HALS_Listener **)(v57 + 280);
          mach_port_t v59 = *(const HALS_Listener **)(v57 + 288);
          if (v60 != v59)
          {
            v152 = v59;
            while (1)
            {
              if (*(_DWORD *)v60 >= 2u)
              {
                p_block = 0;
                unint64_t v195 = 0;
                unint64_t v196 = 0;
                if (v58) {
                  break;
                }
              }
LABEL_123:
              int v60 = (const HALS_Listener *)((char *)v60 + 64);
              if (v60 == v59) {
                goto LABEL_127;
              }
            }
            uint64_t v61 = 0;
            for (uint64_t j = 0; j != v58; ++j)
            {
              long long v63 = (_DWORD *)*((void *)v60 + 5);
              long long v64 = (_DWORD *)*((void *)v60 + 6);
              if (v63 != v64)
              {
                mach_port_t v65 = &v54[12 * j];
                while (1)
                {
                  if (*v63 == 707406378 || *v63 == *(_DWORD *)v65)
                  {
                    int v67 = v63[1];
                    if (v67 == 707406378 || v67 == *((_DWORD *)v65 + 1))
                    {
                      int v69 = v63[2];
                      if (v69 == -1 || v69 == *((_DWORD *)v65 + 2)) {
                        break;
                      }
                    }
                  }
                  v63 += 3;
                  if (v63 == v64) {
                    goto LABEL_111;
                  }
                }
                if ((unint64_t)v61 >= v196)
                {
                  uint64_t v72 = p_block;
                  unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * (((char *)v61 - (char *)p_block) >> 2) + 1;
                  if (v73 > 0x1555555555555555) {
                    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                  }
                  if (0x5555555555555556 * ((uint64_t)(v196 - (void)p_block) >> 2) > v73) {
                    unint64_t v73 = 0x5555555555555556 * ((uint64_t)(v196 - (void)p_block) >> 2);
                  }
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v196 - (void)p_block) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                    unint64_t v74 = 0x1555555555555555;
                  }
                  else {
                    unint64_t v74 = v73;
                  }
                  if (v74) {
                    unint64_t v74 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v74);
                  }
                  else {
                    uint64_t v75 = 0;
                  }
                  uint64_t v76 = *(void **)v65;
                  unint64_t v77 = v74 + 4 * (((char *)v61 - (char *)v72) >> 2);
                  *(_DWORD *)(v77 + 8) = *((_DWORD *)v65 + 2);
                  *(void *)unint64_t v77 = v76;
                  unint64_t v78 = v77;
                  if (v61 != v72)
                  {
                    do
                    {
                      uint64_t v79 = *(uint64_t *)((char *)v61 - 12);
                      uint64_t v61 = (void **)((char *)v61 - 12);
                      int v80 = *((_DWORD *)v61 + 2);
                      *(void *)(v78 - 12) = v79;
                      v78 -= 12;
                      *(_DWORD *)(v78 + 8) = v80;
                    }
                    while (v61 != v72);
                    uint64_t v61 = p_block;
                  }
                  uint64_t v71 = v77 + 12;
                  p_block = (void **)v78;
                  unint64_t v195 = v77 + 12;
                  unint64_t v196 = v74 + 12 * v75;
                  if (v61) {
                    operator delete(v61);
                  }
                }
                else
                {
                  unint64_t v70 = *(void **)v65;
                  *((_DWORD *)v61 + 2) = *((_DWORD *)v65 + 2);
                  *uint64_t v61 = v70;
                  uint64_t v71 = (uint64_t)v61 + 12;
                }
                unint64_t v195 = v71;
                uint64_t v61 = (void **)v71;
              }
LABEL_111:
              ;
            }
            mach_port_t v59 = v152;
            if (p_block != v61)
            {
              uint64_t v61 = p_block;
              if (*(_DWORD *)v60)
              {
                std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>::pair[abi:ne180100]<HALS_Listener const&,std::vector<AudioObjectPropertyAddress>&,0>((HALS_Listener *)&block, v60, (uint64_t)&p_block);
                int v81 = v189;
                if ((unint64_t)v189 < v190)
                {
                  *(void *)v189 = block;
                  *(_OWORD *)(v81 + 8) = *(_OWORD *)v169;
                  *(_OWORD *)(v81 + 24) = *(_OWORD *)&v169[16];
                  *(void *)v169 = 0;
                  *(void *)&v169[8] = 0;
                  *((void *)v81 + 6) = 0;
                  *((void *)v81 + 7) = 0;
                  *((void *)v81 + 5) = 0;
                  *(_OWORD *)(v81 + 40) = __p;
                  *((void *)v81 + 7) = v171;
                  long long __p = 0uLL;
                  uint64_t v171 = 0;
                  v189 = v81 + 64;
                  goto LABEL_120;
                }
                std::logic_error v83 = (char *)std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(&v188, (uint64_t)&block);
                uint64_t v84 = (void *)__p;
                v189 = v83;
                if ((void)__p)
                {
LABEL_119:
                  *((void *)&__p + 1) = v84;
                  operator delete(v84);
                }
              }
              else
              {
                std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>::pair[abi:ne180100]<HALS_Listener const&,std::vector<AudioObjectPropertyAddress>&,0>((HALS_Listener *)&block, v60, (uint64_t)&p_block);
                long long v82 = v192;
                if ((unint64_t)v192 >= v193)
                {
                  std::string v85 = (void *)std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(&v191, (uint64_t)&block);
                  uint64_t v84 = (void *)__p;
                  v192 = v85;
                  if ((void)__p) {
                    goto LABEL_119;
                  }
                }
                else
                {
                  void *v192 = block;
                  *(_OWORD *)(v82 + 1) = *(_OWORD *)v169;
                  *(_OWORD *)(v82 + 3) = *(_OWORD *)&v169[16];
                  *(void *)v169 = 0;
                  *(void *)&v169[8] = 0;
                  v82[6] = 0;
                  v82[7] = 0;
                  v82[5] = 0;
                  *(_OWORD *)(v82 + 5) = __p;
                  v82[7] = v171;
                  long long __p = 0uLL;
                  uint64_t v171 = 0;
                  v192 = v82 + 8;
                }
              }
LABEL_120:
              HALS_Listener::~HALS_Listener((HALS_Listener *)&block);
            }
            if (v61)
            {
              unint64_t v195 = (unint64_t)v61;
              operator delete(v61);
            }
            goto LABEL_123;
          }
LABEL_127:
          HALB_Mutex::Locker::~Locker(&v166);
          uint64_t v41 = v154;
          if (v191 != (unsigned char *)v192)
          {
            LODWORD(block) = *v148;
            memset(v169, 0, 24);
            std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__init_with_size[abi:ne180100]<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>*,std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>*>(v169, (uint64_t)v191, (uint64_t)v192, ((char *)v192 - v191) >> 6);
            std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>((uint64_t *)&v160, block, (uint64_t)&block);
            p_block = (void **)v169;
            std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](&p_block);
          }
          if (v188 != v189)
          {
            LODWORD(block) = *v148;
            memset(v169, 0, 24);
            std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__init_with_size[abi:ne180100]<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>*,std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>*>(v169, (uint64_t)v188, (uint64_t)v189, (v189 - v188) >> 6);
            std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>((uint64_t *)&v158, block, (uint64_t)&block);
            p_block = (void **)v169;
            std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](&p_block);
          }
          block = &v188;
          std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&block);
          block = &v191;
          std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&block);
        }
        unsigned int v86 = *v146++;
        if (v165) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v165);
        }
        int v55 = v144 - 1;
        if (v144 != 1)
        {
          v54 += 12 * v86;
          unint64_t v56 = v148 + 1;
          if (v54 != &v140[12 * v139]) {
            continue;
          }
        }
        break;
      }
    }
    HALS_NotificationManager::CallGroupOwner((HALS_NotificationManager *)a2, a3, v141, (uint64_t)v10, v41, (const unsigned int *)v139, (uint64_t)v140, (const AudioObjectPropertyAddress *)1, v131, v132);
    HALS_NotificationManager::Object::CallGroupListeners_Sync(a2, a3, v141, (uint64_t)v10, (uint64_t)v41, v139, (uint64_t)v140, (uint64_t)&v185, a6);
    HALS_NotificationManager::CallListeners_Sync(a3, &v160);
    HALS_NotificationManager::Object::CallGroupListeners_Sync(a2, a3, v141, (uint64_t)v10, (uint64_t)v41, v139, (uint64_t)v140, (uint64_t)&v182, a6);
    HALS_NotificationManager::CallListeners_Sync(a3, &v158);
    HALS_NotificationManager::Monitor::FinishReadOperation((HALS_NotificationManager::Monitor *)(v162 + 8));
    std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::destroy(v159[0]);
    std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::destroy(v161[0]);
    block = &v182;
    std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&block);
    block = &v185;
    std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&block);
  }
  else
  {
    HALS_NotificationManager::CallGroupOwner((HALS_NotificationManager *)a2, a3, v141, (uint64_t)v10, v154, (const unsigned int *)v139, (uint64_t)v140, (const AudioObjectPropertyAddress *)1, v131, v132);
  }
  v130 = v163;
  if (v163) {
    goto LABEL_242;
  }
LABEL_243:
  if (v155) {
    operator delete(v155);
  }
  if (v41) {
    operator delete(v41);
  }
  if (v10) {
    operator delete(v10);
  }
}

void sub_1BAE0F2DC(void *a1)
{
}

void sub_1BAE0F2E8(void *a1)
{
}

void sub_1BAE0F2F4(HALS_NotificationManager::_anonymous_namespace_::ThreadMarker *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,char *a32,uint64_t a33,uint64_t a34,char *a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53)
{
  std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::destroy(a32);
  std::__tree<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>>>>::destroy(a35);
  a43 = (void *)(v55 - 208);
  std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  a43 = (void *)(v55 - 184);
  std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a43);
  if (a38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a38);
  }
  if (__p)
  {
    operator delete(__p);
    if (!v54)
    {
LABEL_5:
      if (!v53) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if (!v54)
  {
    goto LABEL_5;
  }
  operator delete(v54);
  if (!v53) {
LABEL_7:
  }
    _Unwind_Resume((_Unwind_Exception *)a1);
LABEL_6:
  operator delete(v53);
  goto LABEL_7;
}

void HALS_NotificationManager::AddPropertyListener(uint64_t a1, unsigned int a2, char *a3, uint64_t a4)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  if (atomic_load_explicit((atomic_ullong *volatile)&HALS_NotificationManager::sInitialized, memory_order_acquire) != -1)
  {
    dispatch_object_t object = (dispatch_object_t)HALS_NotificationManager::Initialize;
    p_dispatch_object_t object = (dispatch_object_t)&object;
    std::__call_once(&HALS_NotificationManager::sInitialized, &p_object, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>);
  }
  LOBYTE(v88[0]) = 0;
  char v89 = 0;
  if (*(unsigned char *)(a4 + 320))
  {
    AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v88, *(dispatch_object_t *)a4);
    char v89 = 1;
  }
  long long v78 = 0uLL;
  uint64_t v79 = (HALB_Mutex *)HALS_NotificationManager::sObjectListLock;
  int v80 = HALB_Mutex::Lock((HALB_Mutex *)HALS_NotificationManager::sObjectListLock);
  uint64_t v8 = *(void *)HALS_NotificationManager::sObjectList;
  uint64_t v9 = *(void *)(HALS_NotificationManager::sObjectList + 8);
  if (*(void *)HALS_NotificationManager::sObjectList != v9)
  {
    while (**(_DWORD **)v8 < a2)
    {
      v8 += 16;
      if (v8 == v9) {
        goto LABEL_15;
      }
    }
  }
  if (v8 == v9) {
    goto LABEL_15;
  }
  uint64_t v10 = *(_DWORD **)v8;
  if (**(_DWORD **)v8 != a2)
  {
    uint64_t v9 = v8;
LABEL_15:
    uint64_t v12 = (char *)operator new(0x288uLL);
    *((void *)v12 + 1) = 0;
    *((void *)v12 + 2) = 0;
    *(void *)uint64_t v12 = &unk_1F1478560;
    LOBYTE(object) = 0;
    char v95 = 0;
    if (v89)
    {
      AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&object, v88[0]);
      char v95 = 1;
    }
    *((_DWORD *)v12 + 6) = a2;
    HALB_Guard::HALB_Guard((HALB_Guard *)(v12 + 32));
    *((_OWORD *)v12 + 11) = 0u;
    *((_OWORD *)v12 + 12) = 0u;
    HALB_Mutex::HALB_Mutex((HALB_Mutex *)(v12 + 208));
    uint64_t v13 = (NSObject **)(v12 + 328);
    *((void *)v12 + 46) = 0;
    *((void *)v12 + 47) = 0;
    *((_OWORD *)v12 + 19) = 0u;
    *((_OWORD *)v12 + 20) = 0u;
    *((_OWORD *)v12 + 21) = 0u;
    *(_OWORD *)(v12 + 346) = 0u;
    *((void *)v12 + 48) = 0;
    *((void *)v12 + 49) = 850045863;
    *((_OWORD *)v12 + 25) = 0u;
    *((_OWORD *)v12 + 26) = 0u;
    *((_OWORD *)v12 + 27) = 0u;
    *((_OWORD *)v12 + 28) = 0u;
    *((_OWORD *)v12 + 29) = 0u;
    *((void *)v12 + 60) = 850045863;
    *(_OWORD *)(v12 + 488) = 0u;
    *(_OWORD *)(v12 + 504) = 0u;
    *(_OWORD *)(v12 + 520) = 0u;
    *(_OWORD *)(v12 + 536) = 0u;
    *(_OWORD *)(v12 + 552) = 0u;
    *((void *)v12 + 71) = 850045863;
    *((_OWORD *)v12 + 36) = 0u;
    *((_OWORD *)v12 + 37) = 0u;
    *((_OWORD *)v12 + 38) = 0u;
    *((_OWORD *)v12 + 39) = 0u;
    *((void *)v12 + 80) = dispatch_semaphore_create(0);
    if (v95)
    {
      dispatch_object_t v14 = object;
      if (object) {
        dispatch_retain(object);
      }
      uint64_t v15 = *v13;
      *uint64_t v13 = v14;
      if (v15) {
        dispatch_release(v15);
      }
    }
    else
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v84, (uint64_t)"HAL Notification Queue ", 23);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__p, (uint64_t)v85);
      if (v82 >= 0) {
        uint64_t v16 = (char *)__p;
      }
      else {
        uint64_t v16 = (char *)__p[0];
      }
      AMCP::Utility::Dispatch_Queue::Dispatch_Queue((uint64_t)&p_object, v16);
      AMCP::Utility::Dispatch_Queue::operator=((NSObject **)v12 + 41, p_object);
      AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&p_object);
      if (v82 < 0) {
        operator delete(__p[0]);
      }
      v83[0] = *MEMORY[0x1E4FBA408];
      uint64_t v17 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      *(void *)((char *)v83 + *(void *)(v83[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
      uint64_t v84 = v17;
      v85[0] = MEMORY[0x1E4FBA470] + 16;
      if (v86 < 0) {
        operator delete((void *)v85[8]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1C1859700](&v87);
    }
    if (v95) {
      AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&object);
    }
    *(void *)&long long v18 = v12 + 24;
    *((void *)&v18 + 1) = v12;
    long long v78 = v18;
    uint64_t v19 = (void *)HALS_NotificationManager::sObjectList;
    uint64_t v21 = *(void *)HALS_NotificationManager::sObjectList;
    unint64_t v20 = *(void *)(HALS_NotificationManager::sObjectList + 8);
    uint64_t v22 = v9 - *(void *)HALS_NotificationManager::sObjectList;
    uint64_t v23 = v22 >> 4;
    unint64_t v24 = *(void *)HALS_NotificationManager::sObjectList + (v22 & 0xFFFFFFFFFFFFFFF0);
    uint64_t v26 = HALS_NotificationManager::sObjectList + 16;
    unint64_t v25 = *(void *)(HALS_NotificationManager::sObjectList + 16);
    if (v20 >= v25)
    {
      unint64_t v30 = ((uint64_t)(v20 - v21) >> 4) + 1;
      if (v30 >> 60) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v31 = v25 - v21;
      if (v31 >> 3 > v30) {
        unint64_t v30 = v31 >> 3;
      }
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v32 = v30;
      }
      uint64_t v99 = HALS_NotificationManager::sObjectList + 16;
      if (v32) {
        unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v32);
      }
      else {
        uint64_t v33 = 0;
      }
      long long v45 = (void *)(v32 + 16 * v23);
      p_dispatch_object_t object = (dispatch_object_t)v32;
      *(void *)&long long v97 = v45;
      *((void *)&v97 + 1) = v45;
      int v98 = (v32 + 16 * v33);
      if (v23 == v33)
      {
        if (v22 < 1)
        {
          if (v21 == v9) {
            unint64_t v47 = 1;
          }
          else {
            unint64_t v47 = v22 >> 3;
          }
          *(void *)&v91[24] = v26;
          unsigned int v48 = std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v47);
          uint64_t v50 = v97;
          uint64_t v51 = *((void *)&v97 + 1) - v97;
          if (*((void *)&v97 + 1) == (void)v97)
          {
            int64x2_t v56 = vdupq_n_s64(v97);
            unint64_t v53 = (unint64_t)&v48[2 * (v47 >> 2)];
          }
          else
          {
            uint64_t v52 = v51 >> 4;
            unint64_t v53 = (unint64_t)&v48[2 * (v47 >> 2)] + (v51 & 0xFFFFFFFFFFFFFFF0);
            uint64_t v54 = 16 * v52;
            uint64_t v55 = &v48[2 * (v47 >> 2)];
            do
            {
              *(_OWORD *)&v55->isa = *(_OWORD *)v50;
              v55 += 2;
              *(void *)uint64_t v50 = 0;
              *(void *)(v50 + 8) = 0;
              v50 += 16;
              v54 -= 16;
            }
            while (v54);
            int64x2_t v56 = (int64x2_t)v97;
          }
          uint64_t v57 = p_object;
          uint64_t v58 = v98;
          p_dispatch_object_t object = v48;
          *(void *)&long long v97 = &v48[2 * (v47 >> 2)];
          *(int64x2_t *)uint64_t v91 = v56;
          *((void *)&v97 + 1) = v53;
          int v98 = &v48[2 * v49];
          dispatch_object_t object = v57;
          *(void *)&v91[16] = v58;
          std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&object);
          long long v45 = (void *)*((void *)&v97 + 1);
        }
        else
        {
          unint64_t v46 = v23 + 2;
          if (v23 >= -1) {
            unint64_t v46 = v23 + 1;
          }
          v45 -= 2 * (v46 >> 1);
          *((void *)&v97 + 1) = v45;
          *(void *)&long long v97 = v45;
        }
      }
      *long long v45 = v78;
      uint64_t v59 = *((void *)&v78 + 1);
      v45[1] = *((void *)&v78 + 1);
      if (v59)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v59 + 8), 1uLL, memory_order_relaxed);
        long long v45 = (void *)*((void *)&v97 + 1);
      }
      int v60 = v45 + 2;
      *((void *)&v97 + 1) = v45 + 2;
      uint64_t v61 = v97;
      int v62 = (void *)*v19;
      if (v24 != *v19)
      {
        long long v63 = (void *)v24;
        do
        {
          long long v64 = *((_OWORD *)v63 - 1);
          v63 -= 2;
          *(_OWORD *)(v61 - 16) = v64;
          v61 -= 16;
          void *v63 = 0;
          v63[1] = 0;
        }
        while (v63 != v62);
        int v60 = (_OWORD *)*((void *)&v97 + 1);
      }
      *(void *)&long long v97 = v61;
      uint64_t v65 = v19[1];
      if (v24 != v65)
      {
        do
        {
          *v60++ = *(_OWORD *)v24;
          *(void *)unint64_t v24 = 0;
          *(void *)(v24 + 8) = 0;
          v24 += 16;
        }
        while (v24 != v65);
        uint64_t v61 = v97;
      }
      *((void *)&v97 + 1) = v60;
      uint64_t v66 = (void *)*v19;
      *uint64_t v19 = v61;
      *(void *)&long long v97 = v66;
      uint64_t v67 = v19[1];
      v19[1] = *((void *)&v97 + 1);
      mach_port_t v68 = v97;
      *((void *)&v97 + 1) = v67;
      int v69 = v19[2];
      v19[2] = v98;
      int v98 = v69;
      p_dispatch_object_t object = v68;
      std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&p_object);
    }
    else if (v24 == v20)
    {
      *(_OWORD *)unint64_t v24 = v18;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v12 + 1, 1uLL, memory_order_relaxed);
      v19[1] = v24 + 16;
    }
    else
    {
      unint64_t v27 = v24 + 16;
      unint64_t v28 = v20 - 16;
      int v29 = *(_OWORD **)(HALS_NotificationManager::sObjectList + 8);
      while (v28 < v20)
      {
        *v29++ = *(_OWORD *)v28;
        *(void *)unint64_t v28 = 0;
        *(void *)(v28 + 8) = 0;
        v28 += 16;
      }
      v19[1] = v29;
      if (v20 != v27)
      {
        unint64_t v34 = (std::__shared_weak_count **)(v20 - 8);
        uint64_t v35 = 16 * ((uint64_t)(v20 - v27) >> 4);
        uint64_t v36 = v21 + 16 * v23 - 16;
        do
        {
          unsigned __int8 v37 = (void *)(v36 + v35);
          long long v38 = *(_OWORD *)(v36 + v35);
          *unsigned __int8 v37 = 0;
          v37[1] = 0;
          unsigned int v39 = *v34;
          *(_OWORD *)(v34 - 1) = v38;
          if (v39) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v39);
          }
          v34 -= 2;
          v35 -= 16;
        }
        while (v35);
      }
      uint64_t v40 = &v78;
      if (v24 <= (unint64_t)&v78) {
        uint64_t v40 = &v78 + (v19[1] > (unint64_t)&v78);
      }
      uint64_t v42 = *(void *)v40;
      uint64_t v41 = *((void *)v40 + 1);
      if (v41) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)unint64_t v24 = v42;
      uint64_t v43 = v21 + 16 * v23;
      uint64_t v44 = *(std::__shared_weak_count **)(v43 + 8);
      *(void *)(v43 + 8) = v41;
      if (v44) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v44);
      }
    }
    goto LABEL_82;
  }
  uint64_t v11 = *(void *)(v8 + 8);
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)&long long v78 = v10;
  *((void *)&v78 + 1) = v11;
LABEL_82:
  HALB_Mutex::Locker::~Locker(&v79);
  if (v89) {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v88);
  }
  if ((void)v78)
  {
    HALS_NotificationManager::Monitor::BeginReadOperation((HALS_NotificationManager::Monitor *)(v78 + 8));
    unint64_t v70 = (void *)v78;
    p_dispatch_object_t object = (dispatch_object_t)(v78 + 184);
    LODWORD(v97) = HALB_Mutex::Lock((HALB_Mutex *)(v78 + 184));
    uint64_t v72 = (char **)v70[35];
    uint64_t v71 = (char **)v70[36];
    if (v72 != v71)
    {
      while (!HALS_Listener::IsSame((HALS_Listener *)v72, (const HALS_Listener *)a1))
      {
        v72 += 8;
        if (v72 == v71) {
          goto LABEL_90;
        }
      }
    }
    if (v72 == v71)
    {
LABEL_90:
      dispatch_object_t object = *(dispatch_object_t *)a1;
      unint64_t v73 = *(NSObject **)(a1 + 8);
      *(void *)uint64_t v91 = v73;
      *(_OWORD *)&v91[8] = *(_OWORD *)(a1 + 16);
      *(void *)&v91[24] = *(void *)(a1 + 32);
      unint64_t v74 = *(const void **)&v91[8];
      if (v73) {
        dispatch_retain(v73);
      }
      if (v74) {
        *(void *)&v91[8] = _Block_copy(v74);
      }
      long long v93 = 0;
      uint64_t v92 = 0;
      uint64_t v94 = 0;
      unint64_t v75 = v70[36];
      if (v75 >= v70[37])
      {
        uint64_t v76 = std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__push_back_slow_path<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>(v70 + 35, (uint64_t)&object);
        unint64_t v77 = v92;
        v70[36] = v76;
        if (v77)
        {
          long long v93 = v77;
          operator delete(v77);
        }
      }
      else
      {
        *(void *)unint64_t v75 = object;
        *(_OWORD *)(v75 + 8) = *(_OWORD *)v91;
        *(_OWORD *)(v75 + 24) = *(_OWORD *)&v91[16];
        *(void *)uint64_t v91 = 0;
        *(void *)&v91[8] = 0;
        *(void *)(v75 + 48) = 0;
        *(void *)(v75 + 56) = 0;
        *(void *)(v75 + 40) = 0;
        long long v93 = 0;
        uint64_t v94 = 0;
        uint64_t v92 = 0;
        v70[36] = v75 + 64;
      }
      HALS_Listener::~HALS_Listener((HALS_Listener *)&object);
      uint64_t v72 = (char **)(v70[36] - 64);
    }
    std::vector<AudioObjectPropertyAddress>::__insert_with_size[abi:ne180100]<AudioObjectPropertyAddress const*,AudioObjectPropertyAddress const*>((uint64_t)(v72 + 5), v72[6], a3, a3 + 12, 1);
    HALB_Mutex::Locker::~Locker((HALB_Mutex **)&p_object);
    HALS_NotificationManager::Monitor::FinishReadOperation((HALS_NotificationManager::Monitor *)(v78 + 8));
  }
  if (*((void *)&v78 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v78 + 1));
  }
}

void sub_1BAE0FF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, HALB_Mutex *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (LOBYTE(STACK[0x2A8])) {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a54);
  }
  _Unwind_Resume(a1);
}

void sub_1BAE10044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  JUMPOUT(0x1BAE1003CLL);
}

BOOL HALS_Listener::IsSame(HALS_Listener *this, const HALS_Listener *a2)
{
  if (*(_DWORD *)this != *(_DWORD *)a2) {
    return 0;
  }
  switch(*(_DWORD *)this)
  {
    case 0:
    case 1:
      BOOL v4 = *((_DWORD *)this + 1) == *((_DWORD *)a2 + 1);
      goto LABEL_6;
    case 2:
      if (*((void *)this + 1) != *((void *)a2 + 1)) {
        return 0;
      }
      uint64_t v2 = *((void *)this + 2);
      uint64_t v3 = *((void *)a2 + 2);
      goto LABEL_4;
    case 3:
      if (*((void *)this + 3) != *((void *)a2 + 3)) {
        return 0;
      }
      uint64_t v2 = *((void *)this + 4);
      uint64_t v3 = *((void *)a2 + 4);
      goto LABEL_4;
    case 4:
    case 5:
    case 6:
      uint64_t v2 = *((void *)this + 3);
      uint64_t v3 = *((void *)a2 + 3);
LABEL_4:
      BOOL v4 = v2 == v3;
LABEL_6:
      BOOL result = v4;
      break;
    default:
      BOOL result = 1;
      break;
  }
  return result;
}

void std::__shared_ptr_emplace<HALS_NotificationManager::Object>::__on_zero_shared(uint64_t a1)
{
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(a1 + 328));
  uint64_t v2 = (void **)(a1 + 304);
  std::vector<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  HALB_Mutex::~HALB_Mutex((HALB_Mutex *)(a1 + 208));

  HALB_Guard::~HALB_Guard((pthread_cond_t *)(a1 + 32));
}

void std::__shared_ptr_emplace<HALS_NotificationManager::Object>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1478560;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALS_NotificationManager::Object>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1478560;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void HALS_NotificationManager::RemovePropertyListener(HALS_NotificationManager *this, const HALS_Listener *a2, _DWORD *a3, unsigned int a4, const AudioObjectPropertyAddress *a5)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  if (atomic_load_explicit((atomic_ullong *volatile)&HALS_NotificationManager::sInitialized, memory_order_acquire) != -1)
  {
    *(void *)pthread_attr_t buf = HALS_NotificationManager::Initialize;
    unint64_t v34 = (HALB_Guard *)buf;
    std::__call_once(&HALS_NotificationManager::sInitialized, &v34, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>);
  }
  HALS_NotificationManager::FindObject((HALS_NotificationManager *)&v32, a2);
  uint64_t v8 = v32;
  if (!v32) {
    goto LABEL_49;
  }
  unint64_t v34 = (HALB_Guard *)(v32 + 1);
  int v35 = HALB_Mutex::Lock((HALB_Mutex *)(v32 + 1));
  uint64_t v9 = v8[22];
  if (v8[19] + v8[20] + v9)
  {
    uint64_t v10 = v8[21];
    if (v10 == -1)
    {
LABEL_52:
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_60;
      }
      *(_DWORD *)pthread_attr_t buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_NotificationManager.cpp";
      __int16 v37 = 1024;
      int v38 = 74;
      unint64_t v28 = MEMORY[0x1E4F14500];
      int v29 = "%25s:%-5d  HALS_NotificationManager::SafeIncrement: value at maximum before increment. this is probably a bug";
      goto LABEL_59;
    }
    v8[21] = v10 + 1;
    while (1)
    {
      uint64_t v9 = v8[22];
      if (!(v8[19] + v8[20] + v9)) {
        break;
      }
      HALB_Guard::Wait(v34);
    }
    uint64_t v11 = v8[21];
    if (!v11)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_60;
      }
      *(_DWORD *)pthread_attr_t buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_NotificationManager.cpp";
      __int16 v37 = 1024;
      int v38 = 80;
      unint64_t v28 = MEMORY[0x1E4F14500];
      int v29 = "%25s:%-5d  HALS_NotificationManager::SafeIncrement: value at minimum before decrement. this is probably a bug";
LABEL_59:
      _os_log_impl(&dword_1BAA78000, v28, OS_LOG_TYPE_ERROR, v29, buf, 0x12u);
LABEL_60:
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    v8[21] = v11 - 1;
  }
  if (v9 == -1) {
    goto LABEL_52;
  }
  v8[22] = v9 + 1;
  HALB_Guard::Locker::~Locker(&v34);
  *(void *)pthread_attr_t buf = v8 + 23;
  *(_DWORD *)&uint8_t buf[8] = HALB_Mutex::Lock((HALB_Mutex *)(v8 + 23));
  uint64_t v12 = v8[35];
  uint64_t v13 = v8[36];
  if (v12 != v13)
  {
    while (!HALS_Listener::IsSame((HALS_Listener *)v12, this))
    {
      v12 += 64;
      if (v12 == v13) {
        goto LABEL_43;
      }
    }
  }
  if (v12 != v13)
  {
    uint64_t v15 = *(_DWORD **)(v12 + 40);
    dispatch_object_t v14 = *(_DWORD **)(v12 + 48);
    uint64_t v16 = v15;
    if (v15 != v14)
    {
      uint64_t v16 = *(_DWORD **)(v12 + 40);
      while (*v16 != *a3 || v16[1] != a3[1] || v16[2] != a3[2])
      {
        v16 += 3;
        if (v16 == v14) {
          goto LABEL_34;
        }
      }
    }
    if (v16 != v14)
    {
      uint64_t v17 = v16 + 3;
      if (v16 + 3 != v14)
      {
        do
        {
          if (*v17 != *a3 || v17[1] != a3[1] || v17[2] != a3[2])
          {
            uint64_t v18 = *(void *)v17;
            void v16[2] = v17[2];
            *(void *)uint64_t v16 = v18;
            v16 += 3;
          }
          v17 += 3;
        }
        while (v17 != v14);
        uint64_t v15 = *(_DWORD **)(v12 + 40);
        dispatch_object_t v14 = *(_DWORD **)(v12 + 48);
      }
      if (v14 != v16)
      {
        dispatch_object_t v14 = v16;
        *(void *)(v12 + 48) = v16;
      }
    }
LABEL_34:
    if (v15 == v14)
    {
      uint64_t v19 = (HALS_Listener *)(v12 + 64);
      uint64_t v20 = v8[36];
      if (v12 + 64 != v20)
      {
        do
        {
          *(void *)uint64_t v12 = *(void *)(v12 + 64);
          *(_OWORD *)(v12 + 8) = *(_OWORD *)(v12 + 72);
          *(_OWORD *)(v12 + 24) = *(_OWORD *)(v12 + 88);
          *(void *)(v12 + 72) = 0;
          *(void *)(v12 + 80) = 0;
          uint64_t v21 = *(void **)(v12 + 40);
          if (v21)
          {
            *(void *)(v12 + 48) = v21;
            operator delete(v21);
            *(void *)(v12 + 40) = 0;
            *(void *)(v12 + 48) = 0;
            *(void *)(v12 + 56) = 0;
          }
          *(_OWORD *)(v12 + 40) = *(_OWORD *)(v12 + 104);
          *(void *)(v12 + 56) = *(void *)(v12 + 120);
          *(void *)(v12 + 112) = 0;
          *(void *)(v12 + 120) = 0;
          *(void *)(v12 + 104) = 0;
          uint64_t v22 = v12 + 64;
          uint64_t v23 = v12 + 128;
          v12 += 64;
        }
        while (v23 != v20);
        uint64_t v19 = (HALS_Listener *)v8[36];
        uint64_t v12 = v22;
      }
      while (v19 != (HALS_Listener *)v12)
      {
        uint64_t v19 = (HALS_Listener *)((char *)v19 - 64);
        std::__destroy_at[abi:ne180100]<std::pair<HALS_Listener,std::vector<AudioObjectPropertyAddress>>,0>(v19);
      }
      v8[36] = v12;
    }
  }
LABEL_43:
  HALB_Mutex::Locker::~Locker((HALB_Mutex **)buf);
  *(void *)pthread_attr_t buf = v8 + 23;
  *(_DWORD *)&uint8_t buf[8] = HALB_Mutex::Lock((HALB_Mutex *)(v8 + 23));
  uint64_t v24 = v8[35];
  uint64_t v25 = v8[36];
  HALB_Mutex::Locker::~Locker((HALB_Mutex **)buf);
  if (v24 == v25) {
    HALS_NotificationManager::RemoveObject(a2);
  }
  unint64_t v34 = (HALB_Guard *)(v8 + 1);
  int v35 = HALB_Mutex::Lock((HALB_Mutex *)(v8 + 1));
  uint64_t v26 = v8[22];
  if (!v26)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)pthread_attr_t buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_NotificationManager.cpp";
      __int16 v37 = 1024;
      int v38 = 80;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_NotificationManager::SafeIncrement: value at minimum before decrement. this is probably a bug", buf, 0x12u);
    }
    unint64_t v30 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v30 = off_1F148A5D8;
    _OWORD v30[2] = 1852797029;
  }
  uint64_t v27 = v26 - 1;
  v8[22] = v27;
  if (!v27) {
    HALB_Guard::NotifyAll((pthread_cond_t *)(v8 + 1));
  }
  HALB_Guard::Locker::~Locker(&v34);
LABEL_49:
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
}

void sub_1BAE10748(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  HALB_Guard::Locker::~Locker((HALB_Mutex **)va);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  _Unwind_Resume(a1);
}

void HALS_NotificationManager::RemoveObject(HALS_NotificationManager *this)
{
  unsigned int v1 = this;
  uint64_t v9 = (HALB_Mutex *)HALS_NotificationManager::sObjectListLock;
  int v10 = HALB_Mutex::Lock((HALB_Mutex *)HALS_NotificationManager::sObjectListLock);
  uint64_t v2 = HALS_NotificationManager::sObjectList;
  uint64_t v3 = *(unsigned int ***)HALS_NotificationManager::sObjectList;
  BOOL v4 = *(unsigned int ***)(HALS_NotificationManager::sObjectList + 8);
  if (*(unsigned int ***)HALS_NotificationManager::sObjectList != v4)
  {
    while (**v3 < v1)
    {
      v3 += 2;
      if (v3 == v4) {
        goto LABEL_17;
      }
    }
  }
  if (v3 != v4 && **v3 == v1)
  {
    uint64_t v5 = v3 + 2;
    if (v3 + 2 != v4)
    {
      do
      {
        uint64_t v3 = v5;
        long long v6 = *(_OWORD *)v5;
        void *v5 = 0;
        v5[1] = 0;
        uint64_t v7 = (std::__shared_weak_count *)*(v5 - 1);
        *((_OWORD *)v5 - 1) = v6;
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        uint64_t v5 = v3 + 2;
      }
      while (v3 + 2 != v4);
      BOOL v4 = *(unsigned int ***)(v2 + 8);
    }
    while (v4 != v3)
    {
      uint64_t v8 = (std::__shared_weak_count *)*(v4 - 1);
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      v4 -= 2;
    }
    *(void *)(v2 + 8) = v3;
  }
LABEL_17:
  HALB_Mutex::Locker::~Locker(&v9);
}

void HALS_NotificationManager::ObjectIsDead(HALS_NotificationManager *this)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&HALS_NotificationManager::sInitialized, memory_order_acquire) != -1)
  {
    uint64_t v2 = &v3;
    uint64_t v3 = HALS_NotificationManager::Initialize;
    std::__call_once(&HALS_NotificationManager::sInitialized, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>);
  }
  HALS_NotificationManager::RemoveObject(this);
}

void *HALS_Listener::HALS_Listener(void *a1, dispatch_object_t object, void *aBlock)
{
  *a1 = 2;
  a1[1] = object;
  a1[2] = aBlock;
  a1[3] = 0;
  a1[4] = 0;
  if (object)
  {
    dispatch_retain(object);
    aBlock = (void *)a1[2];
  }
  if (aBlock) {
    a1[2] = _Block_copy(aBlock);
  }
  return a1;
}

BOOL HALS_IOA2Control::GetHardwareReferenceStreamControlValue(HALS_IOA2Control *this, const HALS_Client *a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  int v9 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK16HALS_IOA2Control38GetHardwareReferenceStreamControlValueEPK11HALS_Client_block_invoke;
  v5[3] = &unk_1E62345A8;
  v5[4] = &v6;
  v5[5] = this;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *, const HALS_Client *))(*(void *)this + 56))(this, a2);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  BOOL v3 = *((_DWORD *)v7 + 6) != 0;
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1BAE10A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK16HALS_IOA2Control38GetHardwareReferenceStreamControlValueEPK11HALS_Client_block_invoke(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t result = HALS_IOA2UCDevice::GetControlInfo_Value(*(HALS_IOA2UCDevice **)(*(void *)(a1 + 40) + 80), a2);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAE10A60(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_IOA2Control::SetHardwareReferenceStreamControlValue(HALS_IOA2Control *this, HALS_Client *a2, char a3)
{
  uint64_t v13 = 0;
  dispatch_object_t v14 = &v13;
  uint64_t v15 = 0x4802000000;
  uint64_t v16 = __Block_byref_object_copy__11207;
  uint64_t v17 = __Block_byref_object_dispose__11208;
  long long v18 = 0u;
  long long v19 = 0u;
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x2000000000;
  int v12 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = ___ZN16HALS_IOA2Control38SetHardwareReferenceStreamControlValueEP11HALS_Clientb_block_invoke;
  v9[3] = &unk_1E6234580;
  v9[5] = &v13;
  v9[6] = this;
  char v10 = a3;
  v9[4] = v11;
  uint64_t v5 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v9);
  uint64_t v6 = (const AudioObjectPropertyAddress *)v14[5];
  unsigned int v7 = -1431655765 * ((unint64_t)(v14[6] - (void)v6) >> 2);
  if (v7)
  {
    if (a2) {
      uint64_t v8 = *((unsigned int *)a2 + 4);
    }
    else {
      uint64_t v8 = 0;
    }
    HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), v8, v7, v6);
  }
  _Block_object_dispose(v11, 8);
  _Block_object_dispose(&v13, 8);
  if ((void)v18)
  {
    *((void *)&v18 + 1) = v18;
    operator delete((void *)v18);
  }
}

void sub_1BAE10BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v10 - 88), 8);
  int v12 = *(void **)(v10 - 48);
  if (v12)
  {
    *(void *)(v10 - 40) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

char *__Block_byref_object_copy__11207(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v3 = a1 + 40;
  *(void *)(a1 + 56) = 0;
  uint64_t result = std::vector<CAPropertyAddress>::__init_with_size[abi:ne180100]<CAPropertyAddress*,CAPropertyAddress*>((char *)(a1 + 40), *(uint64_t **)(a2 + 40), *(uint64_t **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 2));
  *(void *)(v3 + 24) = *(void *)(a2 + 64);
  return result;
}

void __Block_byref_object_dispose__11208(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN16HALS_IOA2Control38SetHardwareReferenceStreamControlValueEP11HALS_Clientb_block_invoke(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v2 + 56));
  if (!v3)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)pthread_attr_t buf = 136315394;
      int v12 = "HALS_IOA2Control.cpp";
      __int16 v13 = 1024;
      int v14 = 1176;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::SetHardwareReferenceStreamControlValue: owning device is missing", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 560947818;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + 56);
  unsigned int v10 = 0;
  CACFDictionary::GetUInt32(*(void *)(v2 + 80), @"value", &v10);
  if (v10 != v4)
  {
    unsigned int v9 = 0;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALS_IOA2UCDevice::SetControlValue((HALS_IOA2UCDevice *)(v3 + 1808), *(_DWORD *)(v2 + 72), v4, &v9);
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      int v7 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)pthread_attr_t buf = 136315650;
        int v12 = "HALS_IOA2Control.cpp";
        __int16 v13 = 1024;
        int v14 = 1185;
        __int16 v15 = 1024;
        int v16 = v7;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::SetHardwareReferenceStreamControlValue: error setting BOOLean control value on the device, Error: 0x%X", buf, 0x18u);
      }
      uint64_t v8 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v8 = off_1F148A5D8;
      v8[2] = 560226676;
    }
    if (v9 == v4)
    {
      CACFDictionary::AddUInt32((CFMutableDictionaryRef *)(v2 + 80), @"value", v4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 200))(v2, *(void *)(*(void *)(a1 + 40) + 8) + 40);
    }
  }
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v3, v5);
}

void sub_1BAE10F38(_Unwind_Exception *exception_object, HALS_Object *a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  int v5 = (int)a2;
  HALS_ObjectMap::ReleaseObject(v3, a2);
  uint64_t v6 = __cxa_begin_catch(exception_object);
  if (v5 == 2) {
    int v7 = v6[2];
  }
  else {
    int v7 = 2003329396;
  }
  *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) = v7;
  __cxa_end_catch();
  JUMPOUT(0x1BAE10D90);
}

void sub_1BAE10FC8()
{
}

void HALS_IOA2Control::SetPropertyData(HALS_IOA2Control *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, HALS_Client *a8)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_IOA2Control *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  uint64_t v61 = (HALS_Device *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 14));
  if (!v61)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)pthread_attr_t buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_IOA2Control.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 729;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::SetPropertyData: owning device is missing", buf, 0x12u);
    }
    uint64_t v42 = __cxa_allocate_exception(0x10uLL);
    int v43 = 560947818;
LABEL_60:
    *(void *)uint64_t v42 = off_1F148A5D8;
    v42[2] = v43;
  }
  signed int mSelector = a3->mSelector;
  if (!HALB_Info::PropertyRequiresHogMode((HALB_Info *)a3->mSelector, v16)) {
    goto LABEL_6;
  }
  if (!HALS_Device::IsHogModeOwnerOrFree(v61, a8))
  {
    uint64_t v42 = __cxa_allocate_exception(0x10uLL);
    int v43 = 560492391;
    goto LABEL_60;
  }
  signed int mSelector = a3->mSelector;
LABEL_6:
  *(void *)pthread_attr_t buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&buf[16] = 0x4802000000;
  std::logic_error v88 = __Block_byref_object_copy__11207;
  char v89 = __Block_byref_object_dispose__11208;
  long long v90 = 0u;
  long long v91 = 0u;
  if (mSelector > 1818457189)
  {
    if (mSelector <= 1935962741)
    {
      if (mSelector != 1818457190)
      {
        if (mSelector == 1935893353)
        {
          *(void *)std::string v85 = 0;
          *(void *)&v85[8] = v85;
          *(void *)&v85[16] = 0x2000000000;
          int v86 = 0;
          v67[0] = MEMORY[0x1E4F143A8];
          v67[1] = 1174405120;
          v67[2] = ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_61;
          v67[3] = &unk_1F1478780;
          int v69 = a4;
          void v67[6] = this;
          v67[7] = a5;
          v67[4] = v85;
          long long v19 = v61;
          mach_port_t v68 = v61;
          HALS_ObjectMap::RetainObject(v61, v18);
          v67[5] = buf;
          uint64_t v22 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v22, (uint64_t)v67);
          if (*(_DWORD *)(*(void *)&v85[8] + 24))
          {
            uint64_t v49 = __cxa_allocate_exception(0x10uLL);
            int v50 = *(_DWORD *)(*(void *)&v85[8] + 24);
            *(void *)uint64_t v49 = off_1F148A5D8;
            v49[2] = v50;
          }
          HALS_ObjectMap::ReleaseObject(v68, v23);
          goto LABEL_41;
        }
LABEL_38:
        uint64_t v36 = a7;
        long long v19 = v61;
        HALS_Control::SetPropertyData((uint64_t)this, a2, (int *)a3, a4, (uint64_t)a5, a6, v36, (uint64_t)a8);
        goto LABEL_42;
      }
      if (a4 > 3)
      {
        v73[0] = MEMORY[0x1E4F143A8];
        v73[1] = 0x40000000;
        v73[2] = ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_55;
        v73[3] = &__block_descriptor_tmp_56_11225;
        v73[4] = this;
        v73[5] = a5;
        long long v19 = v61;
        unint64_t v30 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v30, (uint64_t)v73);
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)(*(void *)&buf[8] + 40), a3, v31);
        goto LABEL_42;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string v85 = 136315394;
        *(void *)&v85[4] = "HALS_IOA2Control.cpp";
        *(_WORD *)&v85[12] = 1024;
        *(_DWORD *)&v85[14] = 888;
        uint64_t v44 = MEMORY[0x1E4F14500];
        long long v45 = "%25s:%-5d  HALS_IOA2Control::_SetPropertyData: bad property data size for kAudioLevelControlPropertyDecibe"
              "lsToScalarTransferFunction";
        goto LABEL_73;
      }
      goto LABEL_74;
    }
    if (mSelector == 1936745334)
    {
      if (a4 > 3)
      {
        *(void *)std::string v85 = 0;
        *(void *)&v85[8] = v85;
        *(void *)&v85[16] = 0x2000000000;
        int v86 = 0;
        v65[0] = MEMORY[0x1E4F143A8];
        v65[1] = 1174405120;
        v65[2] = ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_63;
        v65[3] = &unk_1F14787B8;
        void v65[6] = this;
        v65[7] = a5;
        v65[4] = v85;
        long long v19 = v61;
        uint64_t v66 = v61;
        HALS_ObjectMap::RetainObject(v61, v18);
        v65[5] = buf;
        unint64_t v34 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v34, (uint64_t)v65);
        if (*(_DWORD *)(*(void *)&v85[8] + 24))
        {
          uint64_t v57 = __cxa_allocate_exception(0x10uLL);
          int v58 = *(_DWORD *)(*(void *)&v85[8] + 24);
          *(void *)uint64_t v57 = off_1F148A5D8;
          v57[2] = v58;
        }
        HALS_ObjectMap::ReleaseObject(v66, v35);
        goto LABEL_41;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string v85 = 136315394;
        *(void *)&v85[4] = "HALS_IOA2Control.cpp";
        *(_WORD *)&v85[12] = 1024;
        *(_DWORD *)&v85[14] = 1053;
        uint64_t v44 = MEMORY[0x1E4F14500];
        long long v45 = "%25s:%-5d  HALS_IOA2Control::_SetPropertyData: bad property data size for kAudioStereoPanControlPropertyValue";
        goto LABEL_73;
      }
      goto LABEL_74;
    }
    if (mSelector != 1935962742) {
      goto LABEL_38;
    }
    long long v19 = v61;
    if (a4 > 3)
    {
      int v26 = *a5;
      *(void *)std::string v85 = 0;
      *(void *)&v85[8] = v85;
      *(void *)&v85[16] = 0x2000000000;
      int v86 = 0;
      v82[0] = MEMORY[0x1E4F143A8];
      v82[1] = 1174405120;
      v82[2] = ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
      v82[3] = &unk_1F14786A0;
      int v84 = v26;
      v82[6] = this;
      v82[4] = v85;
      std::logic_error v83 = v61;
      HALS_ObjectMap::RetainObject(v61, v18);
      v82[5] = buf;
      uint64_t v27 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v27, (uint64_t)v82);
      if (*(_DWORD *)(*(void *)&v85[8] + 24))
      {
        unint64_t v53 = __cxa_allocate_exception(0x10uLL);
        int v54 = *(_DWORD *)(*(void *)&v85[8] + 24);
        *(void *)unint64_t v53 = off_1F148A5D8;
        v53[2] = v54;
      }
      HALS_ObjectMap::ReleaseObject(v83, v28);
      goto LABEL_41;
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_74;
    }
    *(_DWORD *)std::string v85 = 136315394;
    *(void *)&v85[4] = "HALS_IOA2Control.cpp";
    *(_WORD *)&v85[12] = 1024;
    *(_DWORD *)&v85[14] = 745;
    uint64_t v44 = MEMORY[0x1E4F14500];
    long long v45 = "%25s:%-5d  HALS_IOA2Control::_SetPropertyData: bad property data size for kAudioSliderControlPropertyValue";
LABEL_73:
    _os_log_impl(&dword_1BAA78000, v44, OS_LOG_TYPE_ERROR, v45, v85, 0x12u);
    goto LABEL_74;
  }
  if (mSelector > 1818453109)
  {
    if (mSelector == 1818453110)
    {
      if (a4 > 3)
      {
        *(void *)std::string v85 = 0;
        *(void *)&v85[8] = v85;
        *(void *)&v85[16] = 0x2000000000;
        int v86 = 0;
        v74[0] = MEMORY[0x1E4F143A8];
        v74[1] = 1174405120;
        v74[2] = ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_51;
        v74[3] = &unk_1F1478710;
        int v76 = a2;
        int v77 = a4;
        v74[7] = a3;
        v74[8] = a5;
        v74[6] = this;
        v74[4] = v85;
        long long v19 = v61;
        unint64_t v75 = v61;
        HALS_ObjectMap::RetainObject(v61, v18);
        v74[5] = buf;
        unint64_t v32 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v32, (uint64_t)v74);
        if (*(_DWORD *)(*(void *)&v85[8] + 24))
        {
          uint64_t v55 = __cxa_allocate_exception(0x10uLL);
          int v56 = *(_DWORD *)(*(void *)&v85[8] + 24);
          *(void *)uint64_t v55 = off_1F148A5D8;
          v55[2] = v56;
        }
        HALS_ObjectMap::ReleaseObject(v75, v33);
        goto LABEL_41;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string v85 = 136315394;
        *(void *)&v85[4] = "HALS_IOA2Control.cpp";
        *(_WORD *)&v85[12] = 1024;
        *(_DWORD *)&v85[14] = 839;
        uint64_t v44 = MEMORY[0x1E4F14500];
        long long v45 = "%25s:%-5d  HALS_IOA2Control::_SetPropertyData: bad property data size for kAudioLevelControlPropertyDecibelValue";
        goto LABEL_73;
      }
      goto LABEL_74;
    }
    if (mSelector != 1818456950) {
      goto LABEL_38;
    }
    long long v19 = v61;
    if (a4 > 3)
    {
      *(void *)std::string v85 = 0;
      *(void *)&v85[8] = v85;
      *(void *)&v85[16] = 0x2000000000;
      int v86 = 0;
      v78[0] = MEMORY[0x1E4F143A8];
      v78[1] = 1174405120;
      v78[2] = ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_48;
      v78[3] = &unk_1F14786D8;
      int v80 = a2;
      int v81 = a4;
      v78[7] = a3;
      v78[8] = a5;
      v78[6] = this;
      v78[4] = v85;
      uint64_t v79 = v61;
      HALS_ObjectMap::RetainObject(v61, v18);
      v78[5] = buf;
      uint64_t v24 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v24, (uint64_t)v78);
      if (*(_DWORD *)(*(void *)&v85[8] + 24))
      {
        uint64_t v51 = __cxa_allocate_exception(0x10uLL);
        int v52 = *(_DWORD *)(*(void *)&v85[8] + 24);
        *(void *)uint64_t v51 = off_1F148A5D8;
        v51[2] = v52;
      }
      HALS_ObjectMap::ReleaseObject(v79, v25);
      goto LABEL_41;
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_74;
    }
    *(_DWORD *)std::string v85 = 136315394;
    *(void *)&v85[4] = "HALS_IOA2Control.cpp";
    *(_WORD *)&v85[12] = 1024;
    *(_DWORD *)&v85[14] = 789;
    uint64_t v44 = MEMORY[0x1E4F14500];
    long long v45 = "%25s:%-5d  HALS_IOA2Control::_SetPropertyData: bad property data size for kAudioLevelControlPropertyScalarValue";
    goto LABEL_73;
  }
  if (mSelector == 1650685548)
  {
    if (a4 > 3)
    {
      int v29 = *a5;
      long long v19 = v61;
      if (*((_DWORD *)this + 5) == 1702259059)
      {
        HALS_ReferenceStreamControlPropertyHandler::SetReferenceStreamControlPropertyData(*(HALS_ReferenceStreamControlPropertyHandler **)(*((void *)this + 8) + 8), a8, v29 != 0);
        goto LABEL_42;
      }
      *(void *)std::string v85 = 0;
      *(void *)&v85[8] = v85;
      *(void *)&v85[16] = 0x2000000000;
      int v86 = 0;
      v70[0] = MEMORY[0x1E4F143A8];
      v70[1] = 1174405120;
      v70[2] = ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_57;
      v70[3] = &unk_1F1478748;
      int v72 = v29;
      v70[6] = this;
      uint64_t v71 = v61;
      v70[4] = v85;
      HALS_ObjectMap::RetainObject(v61, v18);
      v70[5] = buf;
      __int16 v37 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v37, (uint64_t)v70);
      if (*(_DWORD *)(*(void *)&v85[8] + 24))
      {
        uint64_t v59 = __cxa_allocate_exception(0x10uLL);
        int v60 = *(_DWORD *)(*(void *)&v85[8] + 24);
        *(void *)uint64_t v59 = off_1F148A5D8;
        v59[2] = v60;
      }
      HALS_ObjectMap::ReleaseObject(v71, v38);
      goto LABEL_41;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string v85 = 136315394;
      *(void *)&v85[4] = "HALS_IOA2Control.cpp";
      *(_WORD *)&v85[12] = 1024;
      *(_DWORD *)&v85[14] = 897;
      uint64_t v44 = MEMORY[0x1E4F14500];
      long long v45 = "%25s:%-5d  HALS_IOA2Control::_SetPropertyData: bad property data size for kAudioBooleanControlPropertyValue";
      goto LABEL_73;
    }
LABEL_74:
    unint64_t v46 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v46 = off_1F148A5D8;
    v46[2] = 561211770;
  }
  if (mSelector != 1651272546) {
    goto LABEL_38;
  }
  *(void *)std::string v85 = 0;
  *(void *)&v85[8] = v85;
  *(void *)&v85[16] = 0x2000000000;
  int v86 = 0;
  v62[0] = MEMORY[0x1E4F143A8];
  v62[1] = 1174405120;
  v62[2] = ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_67;
  v62[3] = &unk_1F14787F0;
  int v64 = a4;
  v62[5] = this;
  void v62[6] = a5;
  long long v19 = v61;
  long long v63 = v61;
  HALS_ObjectMap::RetainObject(v61, v18);
  _OWORD v62[4] = v85;
  uint64_t v20 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v20, (uint64_t)v62);
  if (*(_DWORD *)(*(void *)&v85[8] + 24))
  {
    unint64_t v47 = __cxa_allocate_exception(0x10uLL);
    int v48 = *(_DWORD *)(*(void *)&v85[8] + 24);
    *(void *)unint64_t v47 = off_1F148A5D8;
    int v47[2] = v48;
  }
  HALS_ObjectMap::ReleaseObject(v63, v21);
LABEL_41:
  _Block_object_dispose(v85, 8);
LABEL_42:
  if (-1431655765
     * ((*(void *)(*(void *)&buf[8] + 48) - *(void *)(*(void *)&buf[8] + 40)) >> 2))
  {
    if (a3->mSelector == 1818456950 || a3->mSelector == 1818453110) {
      kdebug_trace();
    }
    if (a8) {
      uint64_t v39 = *((unsigned int *)a8 + 4);
    }
    else {
      uint64_t v39 = 0;
    }
    HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), v39, -1431655765 * ((*(void *)(*(void *)&buf[8] + 48) - *(void *)(*(void *)&buf[8] + 40)) >> 2), *(const AudioObjectPropertyAddress **)(*(void *)&buf[8] + 40));
    if (a3->mSelector == 1818456950 || a3->mSelector == 1818453110) {
      kdebug_trace();
    }
  }
  _Block_object_dispose(buf, 8);
  if ((void)v90)
  {
    *((void *)&v90 + 1) = v90;
    operator delete((void *)v90);
  }
  HALS_ObjectMap::ReleaseObject(v19, v40);
}

void sub_1BAE11F0C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  unsigned int v8 = 0;
  uint64_t result = CACFDictionary::GetUInt32(*(void *)(v2 + 80), @"value", &v8);
  unsigned int v4 = *(_DWORD *)(a1 + 64);
  if (v4 != v8)
  {
    unsigned int v7 = 0;
    uint64_t result = HALS_IOA2UCDevice::SetControlValue((HALS_IOA2UCDevice *)(*(void *)(a1 + 56) + 1808), *(_DWORD *)(v2 + 72), v4, &v7);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)pthread_attr_t buf = 136315650;
        unsigned int v10 = "HALS_IOA2Control.cpp";
        __int16 v11 = 1024;
        int v12 = 758;
        __int16 v13 = 1024;
        int v14 = v5;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::SetControlPropertyData: error setting slider control value on the device, Error: 0x%X", buf, 0x18u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 560226676;
    }
    if (v7 == *(_DWORD *)(a1 + 64))
    {
      CACFDictionary::AddUInt32((CFMutableDictionaryRef *)(v2 + 80), @"value", v7);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 200))(v2, *(void *)(*(void *)(a1 + 40) + 8) + 40);
    }
  }
  return result;
}

void sub_1BAE12294(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    unsigned int v4 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) = v4[2];
    }
    else {
      *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) = 2003329396;
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAE121A4);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_48(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  std::string::basic_string[abi:ne180100]<0>(v23, "HALS_IOA2Control::SetPropertyData");
  uint64_t v3 = *(void *)(a1 + 56);
  unsigned int v4 = *(float **)(a1 + 64);
  unint64_t v5 = *(void *)v3;
  unsigned int v6 = *(_DWORD *)(v3 + 8);
  unsigned int v8 = *(_DWORD *)(a1 + 80);
  int v7 = *(_DWORD *)(a1 + 84);
  unsigned int v9 = *(_DWORD *)(v2 + 48);
  unsigned int v10 = *(_DWORD *)(v2 + 52);
  int v12 = (HALS_ObjectMap *)*(unsigned int *)(v2 + 56);
  int v11 = *(_DWORD *)(v2 + 60);
  __int16 v13 = "no control type";
  if (v11 == 1) {
    __int16 v13 = "software control";
  }
  if (v11) {
    int v14 = (char *)v13;
  }
  else {
    int v14 = "external driver";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v14);
  LogVolumeChangeForServerSideControl((uint64_t)v23, v8, v5, v6, v7, v4, v12, v9, v10, (uint64_t)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  kdebug_trace();
  unsigned int v15 = CAVolumeCurve::ConvertScalarToRaw((CAVolumeCurve *)(v2 + 120), **(float **)(a1 + 64));
  unsigned int v20 = 0;
  CACFDictionary::GetUInt32(*(void *)(v2 + 80), @"value", &v20);
  if (v15 != v20)
  {
    unsigned int v19 = 0;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALS_IOA2UCDevice::SetControlValue((HALS_IOA2UCDevice *)(*(void *)(a1 + 72) + 1808), *(_DWORD *)(v2 + 72), v15, &v19);
    int v16 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v16)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)pthread_attr_t buf = 136315650;
        int v26 = "HALS_IOA2Control.cpp";
        __int16 v27 = 1024;
        int v28 = 806;
        __int16 v29 = 1024;
        int v30 = v16;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::SetControlPropertyData: error setting level control scalar value on the device, Error: 0x%X", buf, 0x18u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 560226676;
    }
    if (v19 == v15)
    {
      CACFDictionary::AddUInt32((CFMutableDictionaryRef *)(v2 + 80), @"value", v15);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 200))(v2, *(void *)(*(void *)(a1 + 40) + 8) + 40);
    }
  }
  return kdebug_trace();
}

void sub_1BAE125D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
  {
    int v26 = __cxa_begin_catch(exception_object);
    if (a2 == 2) {
      *(_DWORD *)(*(void *)(*(void *)(v24 + 32) + 8) + 24) = v26[2];
    }
    else {
      *(_DWORD *)(*(void *)(*(void *)(v24 + 32) + 8) + 24) = 2003329396;
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAE124DCLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_51(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  std::string::basic_string[abi:ne180100]<0>(v23, "HALS_IOA2Control::SetPropertyData");
  uint64_t v3 = *(void *)(a1 + 56);
  unsigned int v4 = *(float **)(a1 + 64);
  unint64_t v5 = *(void *)v3;
  unsigned int v6 = *(_DWORD *)(v3 + 8);
  unsigned int v8 = *(_DWORD *)(a1 + 80);
  int v7 = *(_DWORD *)(a1 + 84);
  unsigned int v9 = *(_DWORD *)(v2 + 48);
  unsigned int v10 = *(_DWORD *)(v2 + 52);
  int v12 = (HALS_ObjectMap *)*(unsigned int *)(v2 + 56);
  int v11 = *(_DWORD *)(v2 + 60);
  __int16 v13 = "no control type";
  if (v11 == 1) {
    __int16 v13 = "software control";
  }
  if (v11) {
    int v14 = (char *)v13;
  }
  else {
    int v14 = "external driver";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v14);
  LogVolumeChangeForServerSideControl((uint64_t)v23, v8, v5, v6, v7, v4, v12, v9, v10, (uint64_t)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  kdebug_trace();
  unsigned int v15 = CAVolumeCurve::ConvertDBToRaw((CAVolumeCurve *)(v2 + 120), **(float **)(a1 + 64));
  unsigned int v20 = 0;
  CACFDictionary::GetUInt32(*(void *)(v2 + 80), @"value", &v20);
  if (v15 != v20)
  {
    unsigned int v19 = 0;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALS_IOA2UCDevice::SetControlValue((HALS_IOA2UCDevice *)(*(void *)(a1 + 72) + 1808), *(_DWORD *)(v2 + 72), v15, &v19);
    int v16 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v16)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)pthread_attr_t buf = 136315650;
        int v26 = "HALS_IOA2Control.cpp";
        __int16 v27 = 1024;
        int v28 = 856;
        __int16 v29 = 1024;
        int v30 = v16;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::SetControlPropertyData: error setting level control decibel value on the device, Error: 0x%X", buf, 0x18u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 560226676;
    }
    if (v19 == v15)
    {
      CACFDictionary::AddUInt32((CFMutableDictionaryRef *)(v2 + 80), @"value", v15);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 200))(v2, *(void *)(*(void *)(a1 + 40) + 8) + 40);
    }
  }
  return kdebug_trace();
}

void sub_1BAE12978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
  {
    int v26 = __cxa_begin_catch(exception_object);
    if (a2 == 2) {
      *(_DWORD *)(*(void *)(*(void *)(v24 + 32) + 8) + 24) = v26[2];
    }
    else {
      *(_DWORD *)(*(void *)(*(void *)(v24 + 32) + 8) + 24) = 2003329396;
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAE12880);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_55(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  uint64_t v2 = **(unsigned int **)(result + 40);
  *(_DWORD *)(v1 + 156) = v2;
  if (v2 > 0xF)
  {
    float v5 = 1.0;
    float v4 = 2.0;
    char v3 = 1;
  }
  else
  {
    char v3 = byte_1BAFF96D0[v2];
    float v4 = flt_1BAFFF660[v2];
    float v5 = flt_1BAFFF6A0[v2];
  }
  *(unsigned char *)(v1 + 152) = v3;
  *(float *)(v1 + 160) = v4;
  *(float *)(v1 + 164) = v5;
  return result;
}

uint64_t ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_57(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  unsigned int v8 = 0;
  uint64_t result = CACFDictionary::GetUInt32(*(void *)(v2 + 80), @"value", &v8);
  unsigned int v4 = *(_DWORD *)(a1 + 64);
  if (v4 != v8)
  {
    unsigned int v7 = 0;
    uint64_t result = HALS_IOA2UCDevice::SetControlValue((HALS_IOA2UCDevice *)(*(void *)(a1 + 56) + 1808), *(_DWORD *)(v2 + 72), v4, &v7);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)pthread_attr_t buf = 136315650;
        unsigned int v10 = "HALS_IOA2Control.cpp";
        __int16 v11 = 1024;
        int v12 = 916;
        __int16 v13 = 1024;
        int v14 = v5;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::SetControlPropertyData: error setting BOOLean control value on the device, Error: 0x%X", buf, 0x18u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 560226676;
    }
    if (v7 == *(_DWORD *)(a1 + 64))
    {
      CACFDictionary::AddUInt32((CFMutableDictionaryRef *)(v2 + 80), @"value", v7);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 200))(v2, *(void *)(*(void *)(a1 + 40) + 8) + 40);
    }
  }
  return result;
}

void sub_1BAE12C64(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    unsigned int v4 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) = v4[2];
    }
    else {
      *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) = 2003329396;
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAE12B74);
  }
  _Unwind_Resume(a1);
}

void ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_61(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 48);
  if (*(unsigned char *)(v3 + 96))
  {
    CFArrayRef v4 = (const __CFArray *)HALS_IOA2UCDevice::CopySelectorControlInfo_SelectorMap(*(HALS_IOA2UCDevice **)(v3 + 80), a2);
    CFArrayRef v47 = v4;
    __int16 v48 = 1;
    if (v4) {
      unsigned int Count = CFArrayGetCount(v4);
    }
    else {
      unsigned int Count = 0;
    }
    unint64_t v9 = *(unsigned int *)(a1 + 72);
    if (4 * (unint64_t)Count < v9)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        LODWORD(v55.__begin_) = 136315394;
        *(std::vector<unsigned int>::pointer *)((char *)&v55.__begin_ + 4) = (std::vector<unsigned int>::pointer)"HALS_IOA2Control.cpp";
        WORD2(v55.__end_) = 1024;
        *(_DWORD *)((char *)&v55.__end_ + 6) = 956;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::SetControlPropertyData: bad property data size for kAudioSelectorControlPropertyCurrentItem", (uint8_t *)&v55, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 561211770;
    }
    unsigned int v10 = *(const unsigned int **)(a1 + 56);
    CFArrayRef v11 = (const __CFArray *)HALS_IOA2UCDevice::CopySelectorControlInfo_MultiSelectorValue(*(HALS_IOA2UCDevice **)(v3 + 80), v5);
    *(void *)int v52 = v11;
    __int16 v53 = 1;
    if (v11) {
      LODWORD(v11) = CFArrayGetCount(v11);
    }
    unint64_t v12 = v9 >> 2;
    if (v11 != (v9 >> 2))
    {
      CACFArray::~CACFArray((CACFArray *)v52);
LABEL_44:
      MEMORY[0x1F4188790](v28);
      int v30 = (unsigned int *)&v45[-v29];
      unsigned int v46 = Count;
      bzero(&v45[-v29], 4 * Count);
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALS_IOA2UCDevice::SetMultiControlValue((mach_port_t *)(*(void *)(a1 + 64) + 1808), *(_DWORD *)(v3 + 72), v10, v9 >> 2, v30, Count, &v46);
      int v31 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      if (v31)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          LODWORD(v55.__begin_) = 136315650;
          *(std::vector<unsigned int>::pointer *)((char *)&v55.__begin_ + 4) = (std::vector<unsigned int>::pointer)"HALS_IOA2Control.cpp";
          WORD2(v55.__end_) = 1024;
          *(_DWORD *)((char *)&v55.__end_ + 6) = 973;
          WORD1(v55.__end_cap_.__value_) = 1024;
          HIDWORD(v55.__end_cap_.__value_) = v31;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::SetControlPropertyData: error setting selector control value on the device, Error: 0x%X", (uint8_t *)&v55, 0x18u);
        }
        uint64_t v42 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v42 = off_1F148A5D8;
        v42[2] = 560226676;
      }
      if (v12 == v46)
      {
        uint64_t v32 = v12;
        memset(&v55, 0, sizeof(v55));
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(&v55, v10, (uint64_t)&v10[v12], v12);
        std::vector<unsigned int>::pointer begin = v55.__begin_;
        std::vector<unsigned int>::pointer end = v55.__end_;
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        *(void *)uint64_t v49 = 0;
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(v49, v30, (uint64_t)&v30[v12], v12);
        CFMutableDictionaryRef v35 = *(CFMutableDictionaryRef *)v49;
        uint64_t v36 = v50;
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        BOOL v37 = (char *)end - (char *)begin == v36 - (void)v35 && memcmp(begin, v35, (char *)end - (char *)begin) == 0;
        if (v35) {
          operator delete(v35);
        }
        if (begin) {
          operator delete(begin);
        }
        if (v37)
        {
          *(void *)uint64_t v49 = *(void *)(v3 + 80);
          LOWORD(v50) = 256;
          if (*(void *)v49)
          {
            CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
            *(void *)int v52 = Mutable;
            __int16 v53 = 257;
            if (v9 >= 4)
            {
              do
              {
                if (*(void *)v52) {
                  BOOL v39 = HIBYTE(v53) == 0;
                }
                else {
                  BOOL v39 = 1;
                }
                if (!v39)
                {
                  unsigned int valuePtr = *v30;
                  uint64_t v40 = (unsigned int *)CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
                  v55.__begin_ = v40;
                  LOBYTE(v55.__end_) = 1;
                  if (v40 && *(void *)v52 && HIBYTE(v53)) {
                    CFArrayAppendValue(*(CFMutableArrayRef *)v52, v40);
                  }
                  CACFNumber::~CACFNumber((CACFNumber *)&v55);
                }
                ++v30;
                --v32;
              }
              while (v32);
              CFMutableArrayRef Mutable = *(CFMutableArrayRef *)v52;
            }
            if (BYTE1(v50) && Mutable)
            {
              if (*(void *)v49) {
                CFDictionarySetValue(*(CFMutableDictionaryRef *)v49, @"value", Mutable);
              }
            }
            CACFArray::~CACFArray((CACFArray *)v52);
          }
          CACFDictionary::~CACFDictionary((CACFDictionary *)v49);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 200))(v3, *(void *)(*(void *)(a1 + 40) + 8) + 40);
        }
      }
LABEL_73:
      CACFArray::~CACFArray((CACFArray *)&v47);
      return;
    }
    std::vector<unsigned int>::vector(&v55, v9 >> 2);
    if (v9 >= 4)
    {
      unsigned int v13 = 0;
      do
      {
        v49[0] = 0;
        if (CACFArray::GetUInt32((CFArrayRef *)v52, v13, v49))
        {
          std::vector<unsigned int>::pointer v14 = v55.__end_;
          if (v55.__end_ >= v55.__end_cap_.__value_)
          {
            std::vector<unsigned int>::pointer v16 = v55.__begin_;
            int64_t v17 = v55.__end_ - v55.__begin_;
            unint64_t v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 62) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            int64_t v19 = (char *)v55.__end_cap_.__value_ - (char *)v55.__begin_;
            if (((char *)v55.__end_cap_.__value_ - (char *)v55.__begin_) >> 1 > v18) {
              unint64_t v18 = v19 >> 1;
            }
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v18;
            }
            if (v20)
            {
              unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v20);
              std::vector<unsigned int>::pointer v16 = v55.__begin_;
              std::vector<unsigned int>::pointer v14 = v55.__end_;
            }
            else
            {
              uint64_t v21 = 0;
            }
            char v22 = (unsigned int *)(v20 + 4 * v17);
            unsigned int *v22 = v49[0];
            uint64_t v15 = v22 + 1;
            while (v14 != v16)
            {
              unsigned int v23 = *--v14;
              *--char v22 = v23;
            }
            v55.__begin_ = v22;
            v55.__end_ = v15;
            v55.__end_cap_.__value_ = (unsigned int *)(v20 + 4 * v21);
            if (v16) {
              operator delete(v16);
            }
          }
          else
          {
            *v55.__end_ = v49[0];
            uint64_t v15 = v14 + 1;
          }
          v55.__end_ = v15;
        }
        ++v13;
      }
      while (v13 != v12);
    }
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    *(void *)uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(v49, v10, (uint64_t)&v10[v12], v9 >> 2);
    CFMutableDictionaryRef v24 = *(CFMutableDictionaryRef *)v49;
    uint64_t v25 = v50;
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    int v26 = v55.__begin_;
    if ((char *)v55.__end_ - (char *)v55.__begin_ == v25 - (void)v24)
    {
      BOOL v27 = memcmp(v55.__begin_, v24, (char *)v55.__end_ - (char *)v55.__begin_) == 0;
      if (!v24)
      {
LABEL_41:
        if (v26)
        {
          v55.__end_ = v26;
          operator delete(v26);
        }
        CACFArray::~CACFArray((CACFArray *)v52);
        if (v27) {
          goto LABEL_73;
        }
        goto LABEL_44;
      }
    }
    else
    {
      BOOL v27 = 0;
      if (!v24) {
        goto LABEL_41;
      }
    }
    operator delete(v24);
    int v26 = v55.__begin_;
    goto LABEL_41;
  }
  if (*(_DWORD *)(a1 + 72) <= 3u)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(v55.__begin_) = 136315394;
      *(std::vector<unsigned int>::pointer *)((char *)&v55.__begin_ + 4) = (std::vector<unsigned int>::pointer)"HALS_IOA2Control.cpp";
      WORD2(v55.__end_) = 1024;
      *(_DWORD *)((char *)&v55.__end_ + 6) = 1012;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::_SetPropertyData: bad property data size for kAudioSelectorControlPropertyCurrentItem", (uint8_t *)&v55, 0x12u);
    }
    int v43 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v43 = off_1F148A5D8;
    v43[2] = 561211770;
  }
  unsigned int v7 = **(_DWORD **)(a1 + 56);
  v49[0] = 0;
  CACFDictionary::GetUInt32(*(void *)(v3 + 80), @"value", v49);
  if (v7 != v49[0])
  {
    v52[0] = 0;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALS_IOA2UCDevice::SetControlValue((HALS_IOA2UCDevice *)(*(void *)(a1 + 64) + 1808), *(_DWORD *)(v3 + 72), v7, v52);
    int v8 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v8)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        LODWORD(v55.__begin_) = 136315650;
        *(std::vector<unsigned int>::pointer *)((char *)&v55.__begin_ + 4) = (std::vector<unsigned int>::pointer)"HALS_IOA2Control.cpp";
        WORD2(v55.__end_) = 1024;
        *(_DWORD *)((char *)&v55.__end_ + 6) = 1021;
        WORD1(v55.__end_cap_.__value_) = 1024;
        HIDWORD(v55.__end_cap_.__value_) = v8;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::SetControlPropertyData: error setting selector control value on the device, Error: 0x%X", (uint8_t *)&v55, 0x18u);
      }
      uint64_t v44 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v44 = off_1F148A5D8;
      v44[2] = 560226676;
    }
    if (v52[0] == v7)
    {
      CACFDictionary::AddUInt32((CFMutableDictionaryRef *)(v3 + 80), @"value", v7);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 200))(v3, *(void *)(*(void *)(a1 + 40) + 8) + 40);
    }
  }
}

void sub_1BAE13548(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    CACFArray::~CACFArray((CACFArray *)(v3 - 136));
    CACFDictionary::~CACFDictionary((CACFDictionary *)(v3 - 160));
    CACFArray::~CACFArray((CACFArray *)(v3 - 176));
    unsigned int v6 = __cxa_begin_catch(exception_object);
    if (a2 == 2) {
      *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) = v6[2];
    }
    else {
      *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) = 2003329396;
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAE13224);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_63(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 48);
  CFArrayRef v4 = (uint64_t *)(v3 + 80);
  unsigned int StereoPanControlInfo_LeftValue = HALS_IOA2UCDevice::GetStereoPanControlInfo_LeftValue(*(HALS_IOA2UCDevice **)(v3 + 80), a2);
  unsigned int StereoPanControlInfo_CenterValue = HALS_IOA2UCDevice::GetStereoPanControlInfo_CenterValue(*(HALS_IOA2UCDevice **)(v3 + 80), v6);
  unsigned int StereoPanControlInfo_RightValue = HALS_IOA2UCDevice::GetStereoPanControlInfo_RightValue(*(HALS_IOA2UCDevice **)(v3 + 80), v8);
  float v10 = **(float **)(a1 + 56);
  unsigned int v11 = StereoPanControlInfo_LeftValue;
  if (v10 > 0.0)
  {
    unsigned int v11 = StereoPanControlInfo_CenterValue;
    if (v10 != 0.5)
    {
      unsigned int v11 = StereoPanControlInfo_RightValue;
      if (v10 < 1.0)
      {
        if (v10 >= 0.5)
        {
          float v12 = (float)((float)(v10 + -0.5) + (float)(v10 + -0.5))
              * (float)(StereoPanControlInfo_RightValue - StereoPanControlInfo_CenterValue);
          float v13 = (float)StereoPanControlInfo_CenterValue;
        }
        else
        {
          float v12 = (float)(v10 + v10) * (float)(StereoPanControlInfo_CenterValue - StereoPanControlInfo_LeftValue);
          float v13 = (float)StereoPanControlInfo_LeftValue;
        }
        unsigned int v11 = (float)(v12 + v13);
      }
    }
  }
  unsigned int v18 = 0;
  uint64_t result = CACFDictionary::GetUInt32(*v4, @"value", &v18);
  if (v11 != v18)
  {
    unsigned int v17 = 0;
    uint64_t result = HALS_IOA2UCDevice::SetControlValue((HALS_IOA2UCDevice *)(*(void *)(a1 + 64) + 1808), *(_DWORD *)(v3 + 72), v11, &v17);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    int v15 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v15)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)pthread_attr_t buf = 136315650;
        unint64_t v20 = "HALS_IOA2Control.cpp";
        __int16 v21 = 1024;
        int v22 = 1095;
        __int16 v23 = 1024;
        int v24 = v15;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::SetControlPropertyData: error setting pan control value on the device, Error: 0x%X", buf, 0x18u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 560226676;
    }
    if (v17 == v11)
    {
      CACFDictionary::AddUInt32((CFMutableDictionaryRef *)v4, @"value", v11);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 200))(v3, *(void *)(*(void *)(a1 + 40) + 8) + 40);
    }
  }
  return result;
}

void sub_1BAE13968(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    CFArrayRef v4 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) = v4[2];
    }
    else {
      *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) = 2003329396;
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAE13878);
  }
  _Unwind_Resume(a1);
}

void sub_1BAE139D4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAE139D0);
  }
  JUMPOUT(0x1BAE13990);
}

void ___ZN16HALS_IOA2Control15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_67(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void **)(v2 + 104);
  if (v3)
  {
    unsigned int v4 = *(_DWORD *)(v2 + 112);
    unsigned int v5 = *(_DWORD *)(a1 + 64);
    if (v4 >= v5) {
      size_t v6 = v5;
    }
    else {
      size_t v6 = v4;
    }
    memcpy(v3, *(const void **)(a1 + 48), v6);
    HALS_IOA2UCDevice::MoveBlockControlData((HALS_IOA2UCDevice *)(*(void *)(a1 + 56) + 1808), *(_DWORD *)(v2 + 72), 1u, v6);
  }
}

void sub_1BAE13A48(void *a1, int a2)
{
  unsigned int v4 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    int v5 = v4[2];
  }
  else {
    int v5 = 2003329396;
  }
  *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) = v5;
  __cxa_end_catch();
}

void __destroy_helper_block_e8_56c38_ZTS13HALS_ReleaserI15HALS_IOA2DeviceE(uint64_t a1, HALS_Object *a2)
{
}

void __copy_helper_block_e8_56c38_ZTS13HALS_ReleaserI15HALS_IOA2DeviceE(uint64_t a1, HALS_Object *a2)
{
  uint64_t v2 = (HALS_ObjectMap *)*((void *)a2 + 7);
  *(void *)(a1 + 56) = v2;
  HALS_ObjectMap::RetainObject(v2, a2);
}

void __destroy_helper_block_e8_64c38_ZTS13HALS_ReleaserI15HALS_IOA2DeviceE(uint64_t a1, HALS_Object *a2)
{
}

void __copy_helper_block_e8_64c38_ZTS13HALS_ReleaserI15HALS_IOA2DeviceE(uint64_t a1, HALS_Object *a2)
{
  uint64_t v2 = (HALS_ObjectMap *)*((void *)a2 + 8);
  *(void *)(a1 + 64) = v2;
  HALS_ObjectMap::RetainObject(v2, a2);
}

void __destroy_helper_block_e8_72c38_ZTS13HALS_ReleaserI15HALS_IOA2DeviceE(uint64_t a1, HALS_Object *a2)
{
}

void __copy_helper_block_e8_72c38_ZTS13HALS_ReleaserI15HALS_IOA2DeviceE(uint64_t a1, HALS_Object *a2)
{
  uint64_t v2 = (HALS_ObjectMap *)*((void *)a2 + 9);
  *(void *)(a1 + 72) = v2;
  HALS_ObjectMap::RetainObject(v2, a2);
}

void HALS_IOA2Control::GetPropertyData(HALS_IOA2Control *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, uint64_t *a6, unsigned int a7, const void *a8, HALS_Client *a9)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_IOA2Control *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a9) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1818457189)
  {
    if (mSelector <= 1935894893)
    {
      if (mSelector > 1935892840)
      {
        if (mSelector == 1935892841)
        {
          *(void *)uint64_t v96 = 0;
          *(void *)&v96[8] = v96;
          *(void *)&v96[16] = 0x2000000000;
          int v97 = 0;
          v82[0] = MEMORY[0x1E4F143A8];
          v82[1] = 0x40000000;
          v82[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2;
          v82[3] = &unk_1E6234458;
          v82[4] = v96;
          v82[5] = this;
          unsigned int v83 = a4;
          v82[6] = a6;
          int v31 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v31, (uint64_t)v82);
        }
        else
        {
          if (mSelector != 1935893353) {
            goto LABEL_77;
          }
          *(void *)uint64_t v96 = 0;
          *(void *)&v96[8] = v96;
          *(void *)&v96[16] = 0x2000000000;
          int v97 = 0;
          v84[0] = MEMORY[0x1E4F143A8];
          v84[1] = 0x40000000;
          v84[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_22;
          v84[3] = &unk_1E6234430;
          v84[5] = this;
          v84[4] = v96;
          v84[6] = a5;
          v84[7] = a6;
          int v24 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v24, (uint64_t)v84);
        }
        int v21 = 4 * *(_DWORD *)(*(void *)&v96[8] + 24);
        goto LABEL_60;
      }
      if (mSelector == 1818457190)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v96 = 136315394;
            *(void *)&v96[4] = "HALS_IOA2Control.cpp";
            *(_WORD *)&v96[12] = 1024;
            *(_DWORD *)&v96[14] = 487;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioLevelControlPropertyDecibelsToScalarTransferFunction", v96, 0x12u);
          }
          int v54 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v54 = off_1F148A5D8;
          v54[2] = 561211770;
        }
        v86[0] = MEMORY[0x1E4F143A8];
        v86[1] = 0x40000000;
        v86[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_18;
        v86[3] = &__block_descriptor_tmp_19_11259;
        v86[4] = this;
        v86[5] = a6;
        uint64_t v29 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v29, (uint64_t)v86);
        goto LABEL_81;
      }
      if (mSelector != 1852400499) {
        goto LABEL_77;
      }
    }
    else
    {
      if (mSelector > 1935962741)
      {
        if (mSelector == 1936745334)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t v96 = 136315394;
              *(void *)&v96[4] = "HALS_IOA2Control.cpp";
              *(_WORD *)&v96[12] = 1024;
              *(_DWORD *)&v96[14] = 636;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioStereoPanControlPropertyValue", v96, 0x12u);
            }
            uint64_t v59 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v59 = off_1F148A5D8;
            v59[2] = 561211770;
          }
          *(void *)uint64_t v96 = 0;
          *(void *)&v96[8] = v96;
          *(void *)&v96[16] = 0x2000000000;
          int v97 = 0;
          *(void *)pthread_attr_t buf = 0;
          *(void *)&uint8_t buf[8] = buf;
          *(void *)&buf[16] = 0x2000000000;
          int v95 = 0;
          uint64_t v75 = 0;
          int v76 = &v75;
          uint64_t v77 = 0x2000000000;
          int v78 = 0;
          uint64_t v71 = 0;
          int v72 = &v71;
          uint64_t v73 = 0x2000000000;
          int v74 = 0;
          v70[0] = MEMORY[0x1E4F143A8];
          v70[1] = 0x40000000;
          v70[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_39;
          v70[3] = &unk_1E62344D0;
          void v70[7] = &v71;
          v70[8] = this;
          v70[4] = v96;
          v70[5] = buf;
          v70[6] = &v75;
          uint64_t v36 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v36, (uint64_t)v70);
          unsigned int v37 = *((_DWORD *)v72 + 6);
          unsigned int v38 = *(_DWORD *)(*(void *)&v96[8] + 24);
          float v39 = 0.0;
          unsigned int v40 = v37 - v38;
          if (v37 < v38)
          {
            unsigned int v41 = *(_DWORD *)(*(void *)&buf[8] + 24);
            float v39 = 0.5;
            if (v37 != v41)
            {
              unsigned int v42 = *((_DWORD *)v76 + 6);
              float v39 = 1.0;
              if (v37 > v42)
              {
                BOOL v43 = v37 >= v41;
                unsigned int v44 = v37 - v41;
                if (v43) {
                  float v39 = (float)((float)((float)v44 / (float)(v42 - v41)) * 0.5) + 0.5;
                }
                else {
                  float v39 = (float)((float)v40 / (float)(v41 - v38)) * 0.5;
                }
              }
            }
          }
          *(float *)a6 = v39;
          *a5 = 4;
          _Block_object_dispose(&v71, 8);
          _Block_object_dispose(&v75, 8);
          _Block_object_dispose(buf, 8);
          goto LABEL_85;
        }
        if (mSelector != 1936745315)
        {
          if (mSelector == 1935962742)
          {
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)uint64_t v96 = 136315394;
                *(void *)&v96[4] = "HALS_IOA2Control.cpp";
                *(_WORD *)&v96[12] = 1024;
                *(_DWORD *)&v96[14] = 412;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioSliderControlPropertyValue", v96, 0x12u);
              }
              uint64_t v51 = __cxa_allocate_exception(0x10uLL);
              *(void *)uint64_t v51 = off_1F148A5D8;
              v51[2] = 561211770;
            }
            v93[0] = MEMORY[0x1E4F143A8];
            v93[1] = 0x40000000;
            v93[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
            v93[3] = &__block_descriptor_tmp_5_11243;
            v93[4] = this;
            v93[5] = a6;
            int64_t v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v19, (uint64_t)v93);
            goto LABEL_81;
          }
          goto LABEL_77;
        }
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v96 = 136315394;
            *(void *)&v96[4] = "HALS_IOA2Control.cpp";
            *(_WORD *)&v96[12] = 1024;
            *(_DWORD *)&v96[14] = 681;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioStereoPanControlPropertyPanningChannels", v96, 0x12u);
          }
          uint64_t v57 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v57 = off_1F148A5D8;
          v57[2] = 561211770;
        }
        v69[0] = MEMORY[0x1E4F143A8];
        v69[1] = 0x40000000;
        v69[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_41;
        v69[3] = &__block_descriptor_tmp_42_11275;
        v69[4] = this;
        v69[5] = a6;
        uint64_t v33 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v33, (uint64_t)v69);
        goto LABEL_66;
      }
      if (mSelector != 1935894894)
      {
        if (mSelector != 1935962738) {
          goto LABEL_77;
        }
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v96 = 136315394;
            *(void *)&v96[4] = "HALS_IOA2Control.cpp";
            *(_WORD *)&v96[12] = 1024;
            *(_DWORD *)&v96[14] = 421;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioSliderControlPropertyRange", v96, 0x12u);
          }
          int v62 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v62 = off_1F148A5D8;
          v62[2] = 561211770;
        }
        v92[0] = MEMORY[0x1E4F143A8];
        v92[1] = 0x40000000;
        v92[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_6;
        v92[3] = &__block_descriptor_tmp_7_11245;
        v92[4] = this;
        v92[5] = a6;
        int v26 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v26, (uint64_t)v92);
        goto LABEL_66;
      }
    }
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v96 = 136315394;
        *(void *)&v96[4] = "HALS_IOA2Control.cpp";
        *(_WORD *)&v96[12] = 1024;
        *(_DWORD *)&v96[14] = 565;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioSelectorControlPropertyItemName", v96, 0x12u);
      }
      __int16 v48 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v48 = off_1F148A5D8;
      v48[2] = 561211770;
    }
    if (a7 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v96 = 136315394;
        *(void *)&v96[4] = "HALS_IOA2Control.cpp";
        *(_WORD *)&v96[12] = 1024;
        *(_DWORD *)&v96[14] = 566;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad qualifier data size for kAudioSelectorControlPropertyItemName", v96, 0x12u);
      }
      uint64_t v49 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v49 = off_1F148A5D8;
      unsigned int v49[2] = 561211770;
    }
    *(void *)uint64_t v96 = 0;
    *(void *)&v96[8] = v96;
    *(void *)&v96[16] = 0x2000000000;
    LOBYTE(v97) = 0;
    v81[0] = MEMORY[0x1E4F143A8];
    v81[1] = 0x40000000;
    v81[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_26;
    v81[3] = &unk_1E6234480;
    v81[4] = v96;
    v81[5] = this;
    v81[6] = a8;
    v81[7] = a6;
    BOOL v27 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v27, (uint64_t)v81);
    *a5 = 8;
    if (!*(unsigned char *)(*(void *)&v96[8] + 24))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)pthread_attr_t buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_IOA2Control.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 594;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: item not in item dictionary for kAudioSelectorControlPropertyItemName", buf, 0x12u);
      }
      uint64_t v28 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v28 = off_1F148A5D8;
      v28[2] = 1852797029;
    }
    goto LABEL_85;
  }
  if (mSelector > 1818453105)
  {
    if (mSelector <= 1818453109)
    {
      if (mSelector == 1818453106)
      {
        if (a4 <= 0xF)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v96 = 136315394;
            *(void *)&v96[4] = "HALS_IOA2Control.cpp";
            *(_WORD *)&v96[12] = 1024;
            *(_DWORD *)&v96[14] = 453;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioLevelControlPropertyDecibelRange", v96, 0x12u);
          }
          int v60 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v60 = off_1F148A5D8;
          v60[2] = 561211770;
        }
        v89[0] = MEMORY[0x1E4F143A8];
        v89[1] = 0x40000000;
        v89[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_12;
        v89[3] = &__block_descriptor_tmp_13_11251;
        v89[4] = this;
        v89[5] = a6;
        long long v45 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v45, (uint64_t)v89);
        unsigned int v34 = 16;
        goto LABEL_82;
      }
      if (mSelector == 1818453107)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v96 = 136315394;
            *(void *)&v96[4] = "HALS_IOA2Control.cpp";
            *(_WORD *)&v96[12] = 1024;
            *(_DWORD *)&v96[14] = 477;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioLevelControlPropertyConvertDecibelsToScalar", v96, 0x12u);
          }
          uint64_t v61 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v61 = off_1F148A5D8;
          v61[2] = 561211770;
        }
        if (a7 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v96 = 136315394;
            *(void *)&v96[4] = "HALS_IOA2Control.cpp";
            *(_WORD *)&v96[12] = 1024;
            *(_DWORD *)&v96[14] = 478;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad qualifier data size for kAudioLevelControlPropertyConvertDecibelsToScalar", v96, 0x12u);
          }
          uint64_t v65 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v65 = off_1F148A5D8;
          v65[2] = 561211770;
        }
        v87[0] = MEMORY[0x1E4F143A8];
        v87[1] = 0x40000000;
        v87[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_16;
        v87[3] = &__block_descriptor_tmp_17_11257;
        v87[4] = this;
        v87[5] = a6;
        v87[6] = a8;
        uint64_t v25 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v25, (uint64_t)v87);
        goto LABEL_81;
      }
    }
    else
    {
      switch(mSelector)
      {
        case 1818453110:
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t v96 = 136315394;
              *(void *)&v96[4] = "HALS_IOA2Control.cpp";
              *(_WORD *)&v96[12] = 1024;
              *(_DWORD *)&v96[14] = 444;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioLevelControlPropertyDecibelValue", v96, 0x12u);
            }
            int v58 = __cxa_allocate_exception(0x10uLL);
            *(void *)int v58 = off_1F148A5D8;
            v58[2] = 561211770;
          }
          v90[0] = MEMORY[0x1E4F143A8];
          v90[1] = 0x40000000;
          v90[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_10;
          v90[3] = &__block_descriptor_tmp_11_11249;
          v90[4] = this;
          v90[5] = a6;
          CFMutableDictionaryRef v35 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v35, (uint64_t)v90);
          goto LABEL_81;
        case 1818456932:
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t v96 = 136315394;
              *(void *)&v96[4] = "HALS_IOA2Control.cpp";
              *(_WORD *)&v96[12] = 1024;
              *(_DWORD *)&v96[14] = 467;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioLevelControlPropertyConvertScalarToDecibels", v96, 0x12u);
            }
            uint64_t v56 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v56 = off_1F148A5D8;
            v56[2] = 561211770;
          }
          if (a7 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t v96 = 136315394;
              *(void *)&v96[4] = "HALS_IOA2Control.cpp";
              *(_WORD *)&v96[12] = 1024;
              *(_DWORD *)&v96[14] = 468;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad qualifier data size for kAudioLevelControlPropertyConvertScalarToDecibels", v96, 0x12u);
            }
            int v64 = __cxa_allocate_exception(0x10uLL);
            *(void *)int v64 = off_1F148A5D8;
            v64[2] = 561211770;
          }
          v88[0] = MEMORY[0x1E4F143A8];
          v88[1] = 0x40000000;
          v88[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_14;
          v88[3] = &__block_descriptor_tmp_15_11254;
          v88[4] = this;
          v88[5] = a6;
          v88[6] = a8;
          uint64_t v32 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v32, (uint64_t)v88);
          goto LABEL_81;
        case 1818456950:
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t v96 = 136315394;
              *(void *)&v96[4] = "HALS_IOA2Control.cpp";
              *(_WORD *)&v96[12] = 1024;
              *(_DWORD *)&v96[14] = 435;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioLevelControlPropertyScalarValue", v96, 0x12u);
            }
            uint64_t v50 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v50 = off_1F148A5D8;
            v50[2] = 561211770;
          }
          v91[0] = MEMORY[0x1E4F143A8];
          v91[1] = 0x40000000;
          v91[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_8;
          v91[3] = &__block_descriptor_tmp_9_11247;
          v91[4] = this;
          v91[5] = a6;
          unsigned int v18 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v18, (uint64_t)v91);
LABEL_81:
          unsigned int v34 = 4;
          goto LABEL_82;
      }
    }
    goto LABEL_77;
  }
  if (mSelector > 1651272547)
  {
    if (mSelector != 1651272548)
    {
      if (mSelector == 1668049771)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v96 = 136315394;
            *(void *)&v96[4] = "HALS_IOA2Control.cpp";
            *(_WORD *)&v96[12] = 1024;
            *(_DWORD *)&v96[14] = 601;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioClockSourceControlPropertyItemKind", v96, 0x12u);
          }
          int v52 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v52 = off_1F148A5D8;
          unsigned int v52[2] = 561211770;
        }
        if (a7 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v96 = 136315394;
            *(void *)&v96[4] = "HALS_IOA2Control.cpp";
            *(_WORD *)&v96[12] = 1024;
            *(_DWORD *)&v96[14] = 602;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad qualifier data size for kAudioClockSourceControlPropertyItemKind", v96, 0x12u);
          }
          long long v63 = __cxa_allocate_exception(0x10uLL);
          *(void *)long long v63 = off_1F148A5D8;
          v63[2] = 561211770;
        }
        *(void *)uint64_t v96 = 0;
        *(void *)&v96[8] = v96;
        *(void *)&v96[16] = 0x2000000000;
        LOBYTE(v97) = 0;
        v79[0] = MEMORY[0x1E4F143A8];
        v79[1] = 0x40000000;
        v79[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_31;
        v79[3] = &unk_1E62344A8;
        v79[4] = v96;
        v79[5] = this;
        int v80 = 4;
        v79[6] = a8;
        v79[7] = a6;
        int v22 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v22, (uint64_t)v79);
        *a5 = 4;
        if (!*(unsigned char *)(*(void *)&v96[8] + 24))
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)pthread_attr_t buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_IOA2Control.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 629;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: item not in item dictionary for kAudioClockSourceControlPropertyItemKind", buf, 0x12u);
          }
          __int16 v23 = __cxa_allocate_exception(0x10uLL);
          *(void *)__int16 v23 = off_1F148A5D8;
          v23[2] = 1852797029;
        }
        goto LABEL_85;
      }
      goto LABEL_77;
    }
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v96 = 136315394;
        *(void *)&v96[4] = "HALS_IOA2Control.cpp";
        *(_WORD *)&v96[12] = 1024;
        *(_DWORD *)&v96[14] = 713;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioBlockControlPropertyDescriptor", v96, 0x12u);
      }
      std::vector<unsigned int> v55 = __cxa_allocate_exception(0x10uLL);
      *(void *)std::vector<unsigned int> v55 = off_1F148A5D8;
      v55[2] = 561211770;
    }
    v66[0] = MEMORY[0x1E4F143A8];
    v66[1] = 0x40000000;
    v66[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_45;
    v66[3] = &__block_descriptor_tmp_46_11278;
    v66[4] = this;
    v66[5] = a6;
    int v30 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v30, (uint64_t)v66);
LABEL_66:
    unsigned int v34 = 8;
LABEL_82:
    *a5 = v34;
    return;
  }
  if (mSelector == 1650685548)
  {
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v96 = 136315394;
        *(void *)&v96[4] = "HALS_IOA2Control.cpp";
        *(_WORD *)&v96[12] = 1024;
        *(_DWORD *)&v96[14] = 496;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: bad property data size for kAudioBooleanControlPropertyValue", v96, 0x12u);
      }
      __int16 v53 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v53 = off_1F148A5D8;
      v53[2] = 561211770;
    }
    if (*((_DWORD *)this + 5) == 1702259059)
    {
      *(_DWORD *)a6 = HALS_ReferenceStreamControlPropertyHandler::GetReferenceStreamControlPropertyData(*(HALS_ReferenceStreamControlPropertyHandler **)(*((void *)this + 8) + 8), a9);
    }
    else
    {
      v85[0] = MEMORY[0x1E4F143A8];
      v85[1] = 0x40000000;
      v85[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_20;
      v85[3] = &__block_descriptor_tmp_21_11261;
      v85[4] = this;
      v85[5] = a6;
      unsigned int v46 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v46, (uint64_t)v85);
    }
    goto LABEL_81;
  }
  if (mSelector == 1651272546)
  {
    *(void *)uint64_t v96 = 0;
    *(void *)&v96[8] = v96;
    *(void *)&v96[16] = 0x2000000000;
    int v97 = 0;
    v67[0] = MEMORY[0x1E4F143A8];
    v67[1] = 0x40000000;
    v67[2] = ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_43;
    v67[3] = &unk_1E6234518;
    v67[4] = v96;
    v67[5] = this;
    unsigned int v68 = a4;
    void v67[6] = a6;
    unint64_t v20 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v20, (uint64_t)v67);
    int v21 = *(_DWORD *)(*(void *)&v96[8] + 24);
LABEL_60:
    *a5 = v21;
LABEL_85:
    _Block_object_dispose(v96, 8);
    return;
  }
LABEL_77:

  HALS_Control::GetPropertyData((uint64_t)this, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1BAE15784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose(&a42, 8);
  _Block_object_dispose((const void *)(v42 - 176), 8);
  _Block_object_dispose((const void *)(v42 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t result = HALS_IOA2UCDevice::GetControlInfo_Value(*(HALS_IOA2UCDevice **)(*(void *)(a1 + 32) + 80), a2);
  **(_DWORD **)(a1 + 40) = result;
  return result;
}

void sub_1BAE15814(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_6(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 80);
  unsigned int v11 = 0;
  uint64_t v9 = v3;
  __int16 v10 = 0;
  if (v3)
  {
    if (!CACFDictionary::GetUInt32(v3, @"minimum value", &v11))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)pthread_attr_t buf = 136315394;
        float v13 = "HALS_IOA2UCDevice.cpp";
        __int16 v14 = 1024;
        int v15 = 948;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetSliderControlInfoByIndex_MinimumValue: there is no minimum control value", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    unsigned int v4 = v11;
  }
  else
  {
    unsigned int v4 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v9);
  **(_DWORD **)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(v2 + 80);
  unsigned int v11 = 0;
  uint64_t v9 = v5;
  __int16 v10 = 0;
  if (v5)
  {
    if (!CACFDictionary::GetUInt32(v5, @"maximum value", &v11))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)pthread_attr_t buf = 136315394;
        float v13 = "HALS_IOA2UCDevice.cpp";
        __int16 v14 = 1024;
        int v15 = 960;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetSliderControlInfoByIndex_MaximumValue: there is no maximum control value", buf, 0x12u);
      }
      CFDictionaryRef v8 = __cxa_allocate_exception(0x10uLL);
      *(void *)CFDictionaryRef v8 = off_1F148A5D8;
      v8[2] = 1852797029;
    }
    unsigned int v6 = v11;
  }
  else
  {
    unsigned int v6 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v9);
  *(_DWORD *)(*(void *)(a1 + 40) + 4) = v6;
}

void ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_8(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int ControlInfo_Value = HALS_IOA2UCDevice::GetControlInfo_Value(*(HALS_IOA2UCDevice **)(v3 + 80), a2);
  **(float **)(a1 + 40) = CAVolumeCurve::ConvertRawToScalar((CAVolumeCurve *)(v3 + 120), ControlInfo_Value);
}

void sub_1BAE15B24(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_10(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int ControlInfo_Value = HALS_IOA2UCDevice::GetControlInfo_Value(*(HALS_IOA2UCDevice **)(v3 + 80), a2);
  uint64_t result = CAVolumeCurve::ConvertRawToDB((CAVolumeCurve *)(v3 + 120), ControlInfo_Value);
  **(_DWORD **)(a1 + 40) = v6;
  return result;
}

void sub_1BAE15B84(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

double ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_12(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1[18]) {
    double v2 = *(float *)(v1[16] + 36);
  }
  else {
    double v2 = 0.0;
  }
  uint64_t v3 = *(double **)(a1 + 40);
  double *v3 = v2;
  double MaximumDB = CAVolumeCurve::GetMaximumDB((CAVolumeCurve *)(v1 + 15));
  double result = *(float *)&MaximumDB;
  v3[1] = result;
  return result;
}

uint64_t ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_14(uint64_t a1)
{
  double v2 = (CAVolumeCurve *)(*(void *)(a1 + 32) + 120);
  int v3 = CAVolumeCurve::ConvertScalarToRaw(v2, **(float **)(a1 + 48));
  uint64_t result = CAVolumeCurve::ConvertRawToDB(v2, v3);
  **(_DWORD **)(a1 + 40) = v5;
  return result;
}

void ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_16(uint64_t a1)
{
  double v2 = (CAVolumeCurve *)(*(void *)(a1 + 32) + 120);
  int v3 = CAVolumeCurve::ConvertDBToRaw(v2, **(float **)(a1 + 48));
  **(float **)(a1 + 40) = CAVolumeCurve::ConvertRawToScalar(v2, v3);
}

uint64_t ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_18(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(_DWORD *)(*(void *)(result + 32) + 156);
  return result;
}

uint64_t ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_20(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t result = HALS_IOA2UCDevice::GetControlInfo_Value(*(HALS_IOA2UCDevice **)(*(void *)(a1 + 32) + 80), a2);
  **(_DWORD **)(a1 + 40) = result;
  return result;
}

void sub_1BAE15CD8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_22(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v3 + 96))
  {
    CFArrayRef v4 = (const __CFArray *)HALS_IOA2UCDevice::CopySelectorControlInfo_MultiSelectorValue(*(HALS_IOA2UCDevice **)(v3 + 80), a2);
    CFArrayRef v9 = v4;
    __int16 v10 = 1;
    unsigned int v5 = **(_DWORD **)(a1 + 48);
    if (v4) {
      LODWORD(v4) = CFArrayGetCount(v4);
    }
    unsigned int v6 = v5 >> 2;
    if (v4 < v5 >> 2) {
      unsigned int v6 = v4;
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v6;
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      do
      {
        CACFArray::GetUInt32(&v9, v8++, (unsigned int *)(*(void *)(a1 + 56) + v7));
        v7 += 4;
      }
      while (v8 < *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    }
    CACFArray::~CACFArray((CACFArray *)&v9);
  }
  else
  {
    **(_DWORD **)(a1 + 56) = HALS_IOA2UCDevice::GetControlInfo_Value(*(HALS_IOA2UCDevice **)(v3 + 80), a2);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
}

void sub_1BAE15DE4(void *a1)
{
}

void ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFArrayRef v3 = (const __CFArray *)HALS_IOA2UCDevice::CopySelectorControlInfo_SelectorMap(*(HALS_IOA2UCDevice **)(*(void *)(a1 + 40) + 80), a2);
  CFArrayRef v14 = v3;
  __int16 v15 = 1;
  if (!v3)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)pthread_attr_t buf = 136315394;
      unsigned int v17 = "HALS_IOA2Control.cpp";
      __int16 v18 = 1024;
      int v19 = 544;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: couldn't get the selector items for kAudioSelectorControlPropertyAvailableItems", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  unsigned int v4 = *(_DWORD *)(a1 + 56);
  unsigned int Count = CFArrayGetCount(v3);
  unsigned int v6 = v4 >> 2;
  if (v4 >> 2 >= Count) {
    unsigned int v6 = Count;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v6;
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      float v12 = 0;
      __int16 v13 = 0;
      CACFArray::GetCACFDictionary(&v14, v8, (CACFDictionary *)&v12);
      if (!v12)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)pthread_attr_t buf = 136315394;
          unsigned int v17 = "HALS_IOA2Control.cpp";
          __int16 v18 = 1024;
          int v19 = 550;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: couldn't get the item dictionary for kAudioSelectorControlPropertyAvailableItems", buf, 0x12u);
        }
        CFArrayRef v9 = __cxa_allocate_exception(0x10uLL);
        *(void *)CFArrayRef v9 = off_1F148A5D8;
        v9[2] = 1852797029;
      }
      if ((CACFDictionary::GetUInt32((uint64_t)v12, @"value", (unsigned int *)(*(void *)(a1 + 48) + v7)) & 1) == 0)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)pthread_attr_t buf = 136315394;
          unsigned int v17 = "HALS_IOA2Control.cpp";
          __int16 v18 = 1024;
          int v19 = 553;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: couldn't get the item ID for kAudioSelectorControlPropertyAvailableItems", buf, 0x12u);
        }
        __int16 v10 = __cxa_allocate_exception(0x10uLL);
        *(void *)__int16 v10 = off_1F148A5D8;
        v10[2] = 1852797029;
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v12);
      ++v8;
      v7 += 4;
    }
    while (v8 < *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  }
  CACFArray::~CACFArray((CACFArray *)&v14);
}

void sub_1BAE16144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
  {
    CACFArray::~CACFArray((CACFArray *)&a11);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAE15EF8);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_26(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CFArrayRef theArray = (CFArrayRef)HALS_IOA2UCDevice::CopySelectorControlInfo_SelectorMap(*(HALS_IOA2UCDevice **)(*(void *)(a1 + 40) + 80), a2);
  __int16 v15 = 1;
  if (!theArray)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)pthread_attr_t buf = 136315394;
      unsigned int v17 = "HALS_IOA2Control.cpp";
      __int16 v18 = 1024;
      int v19 = 572;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: couldn't get the selector items for kAudioSelectorControlPropertyItemName", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    unsigned int v3 = 0;
    do
    {
      unsigned int Count = theArray;
      if (theArray) {
        unsigned int Count = CFArrayGetCount(theArray);
      }
      if (v3 >= Count) {
        break;
      }
      float v12 = 0;
      __int16 v13 = 0;
      CACFArray::GetCACFDictionary(&theArray, v3, (CACFDictionary *)&v12);
      if (!v12)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)pthread_attr_t buf = 136315394;
          unsigned int v17 = "HALS_IOA2Control.cpp";
          __int16 v18 = 1024;
          int v19 = 577;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: couldn't get the item dictionary for kAudioSelectorControlPropertyItemName", buf, 0x12u);
        }
        unsigned int v5 = __cxa_allocate_exception(0x10uLL);
        *(void *)unsigned int v5 = off_1F148A5D8;
        v5[2] = 1852797029;
      }
      unsigned int v11 = 0;
      if ((CACFDictionary::GetUInt32((uint64_t)v12, @"value", &v11) & 1) == 0)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)pthread_attr_t buf = 136315394;
          unsigned int v17 = "HALS_IOA2Control.cpp";
          __int16 v18 = 1024;
          int v19 = 581;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: couldn't get the item ID for kAudioSelectorControlPropertyItemName", buf, 0x12u);
        }
        unsigned int v6 = __cxa_allocate_exception(0x10uLL);
        *(void *)unsigned int v6 = off_1F148A5D8;
        uint64_t v6[2] = 1852797029;
      }
      if (v11 == **(_DWORD **)(a1 + 48))
      {
        CFTypeRef cf = 0;
        char v10 = 0;
        CACFDictionary::GetCACFString(&v12, @"name", &cf);
        if (!cf)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)pthread_attr_t buf = 136315394;
            unsigned int v17 = "HALS_IOA2Control.cpp";
            __int16 v18 = 1024;
            int v19 = 586;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: couldn't get the item name for kAudioSelectorControlPropertyItemName", buf, 0x12u);
          }
          uint64_t v7 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v7 = off_1F148A5D8;
          v7[2] = 1852797029;
        }
        CFRetain(cf);
        **(void **)(a1 + 56) = cf;
        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
        CACFString::~CACFString((CACFString *)&cf);
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v12);
      ++v3;
    }
    while (!*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  }
  CACFArray::~CACFArray((CACFArray *)&theArray);
}

void sub_1BAE165DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  if (a2)
  {
    CACFArray::~CACFArray((CACFArray *)&a15);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAE162D8);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_31(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  CFTypeRef v12 = HALS_IOA2UCDevice::CopySelectorControlInfo_SelectorMap(*(HALS_IOA2UCDevice **)(*(void *)(a1 + 40) + 80), a2);
  __int16 v13 = 1;
  if (!v12)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)pthread_attr_t buf = 136315394;
      __int16 v15 = "HALS_IOA2Control.cpp";
      __int16 v16 = 1024;
      int v17 = 608;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: couldn't get the selector items for kAudioClockSourceControlPropertyItemKind", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    unsigned int v3 = 0;
    do
    {
      if (v3 >= *(_DWORD *)(a1 + 64)) {
        break;
      }
      char v10 = 0;
      __int16 v11 = 0;
      CACFArray::GetCACFDictionary((CFArrayRef *)&v12, v3, (CACFDictionary *)&v10);
      if (!v10)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)pthread_attr_t buf = 136315394;
          __int16 v15 = "HALS_IOA2Control.cpp";
          __int16 v16 = 1024;
          int v17 = 613;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: couldn't get the item dictionary for kAudioClockSourceControlPropertyItemKind", buf, 0x12u);
        }
        uint64_t v7 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v7 = off_1F148A5D8;
        v7[2] = 1852797029;
      }
      unsigned int v9 = 0;
      if ((CACFDictionary::GetUInt32((uint64_t)v10, @"IOAudioSelectorControlSelectionValue", &v9) & 1) == 0)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)pthread_attr_t buf = 136315394;
          __int16 v15 = "HALS_IOA2Control.cpp";
          __int16 v16 = 1024;
          int v17 = 617;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::GetPropertyData: couldn't get the item ID for kAudioClockSourceControlPropertyItemKind", buf, 0x12u);
        }
        unsigned int v6 = __cxa_allocate_exception(0x10uLL);
        *(void *)unsigned int v6 = off_1F148A5D8;
        uint64_t v6[2] = 1852797029;
      }
      if (v9 == **(_DWORD **)(a1 + 48))
      {
        *(_DWORD *)pthread_attr_t buf = 0;
        int UInt32 = CACFDictionary::GetUInt32((uint64_t)v10, @"IOAudioSelectorControlClockSourceKey", (unsigned int *)buf);
        int v5 = *(_DWORD *)buf;
        if (!UInt32) {
          int v5 = 0;
        }
        **(_DWORD **)(a1 + 56) = v5;
        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v10);
      ++v3;
    }
    while (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  }
  CACFArray::~CACFArray((CACFArray *)&v12);
}

void sub_1BAE169C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  if (a2)
  {
    CACFArray::~CACFArray((CACFArray *)&a13);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAE16770);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_39(void *a1, const __CFDictionary *a2)
{
  uint64_t v3 = a1[8];
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = HALS_IOA2UCDevice::GetStereoPanControlInfo_LeftValue(*(HALS_IOA2UCDevice **)(v3 + 80), a2);
  *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = HALS_IOA2UCDevice::GetStereoPanControlInfo_CenterValue(*(HALS_IOA2UCDevice **)(v3 + 80), v4);
  *(_DWORD *)(*(void *)(a1[6] + 8) + 24) = HALS_IOA2UCDevice::GetStereoPanControlInfo_RightValue(*(HALS_IOA2UCDevice **)(v3 + 80), v5);
  uint64_t result = HALS_IOA2UCDevice::GetControlInfo_Value(*(HALS_IOA2UCDevice **)(v3 + 80), v6);
  *(_DWORD *)(*(void *)(a1[7] + 8) + 24) = result;
  return result;
}

void sub_1BAE16A90(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_41(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 80);
  unsigned int v11 = 0;
  uint64_t v9 = v3;
  __int16 v10 = 0;
  if (v3)
  {
    if (!CACFDictionary::GetUInt32(v3, @"left channel", &v11))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)pthread_attr_t buf = 136315394;
        __int16 v13 = "HALS_IOA2UCDevice.cpp";
        __int16 v14 = 1024;
        int v15 = 1096;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetStereoPanControlInfoByIndex_LeftChannel: there is no left channel", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    unsigned int v4 = v11;
  }
  else
  {
    unsigned int v4 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v9);
  **(_DWORD **)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(v2 + 80);
  unsigned int v11 = 0;
  uint64_t v9 = v5;
  __int16 v10 = 0;
  if (v5)
  {
    if (!CACFDictionary::GetUInt32(v5, @"right channel", &v11))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)pthread_attr_t buf = 136315394;
        __int16 v13 = "HALS_IOA2UCDevice.cpp";
        __int16 v14 = 1024;
        int v15 = 1108;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetStereoPanControlInfoByIndex_LeftChannel: there is no right channel", buf, 0x12u);
      }
      unint64_t v8 = __cxa_allocate_exception(0x10uLL);
      *(void *)unint64_t v8 = off_1F148A5D8;
      v8[2] = 1852797029;
    }
    unsigned int v6 = v11;
  }
  else
  {
    unsigned int v6 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v9);
  *(_DWORD *)(*(void *)(a1 + 40) + 4) = v6;
}

void ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_43(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v2 + 56));
  uint64_t v5 = (HALS_ObjectMap *)v3;
  if (*(void *)(v2 + 104)) {
    BOOL v6 = v3 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    unsigned int v7 = *(_DWORD *)(v2 + 112);
    if (v7 >= *(_DWORD *)(a1 + 56)) {
      unsigned int v7 = *(_DWORD *)(a1 + 56);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v7;
    HALS_IOA2UCDevice::MoveBlockControlData((HALS_IOA2UCDevice *)(v3 + 1808), *(_DWORD *)(v2 + 72), 0, *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    memcpy(*(void **)(a1 + 48), *(const void **)(v2 + 104), *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  }
  HALS_ObjectMap::ReleaseObject(v5, v4);
}

void sub_1BAE16E00(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  HALS_ObjectMap::ReleaseObject(v14, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK16HALS_IOA2Control15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_45(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 80);
  CFTypeRef cf = 0;
  uint64_t v5 = v2;
  __int16 v6 = 0;
  if (v2)
  {
    if ((CACFDictionary::GetDictionary(v2, @"descriptor", (const __CFDictionary **)&cf) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)pthread_attr_t buf = 136315394;
        uint64_t v9 = "HALS_IOA2UCDevice.cpp";
        __int16 v10 = 1024;
        int v11 = 1120;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetBlockControlInfoByID_Descriptor: there is no descriptor", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    CFTypeRef v3 = cf;
    if (cf) {
      CFRetain(cf);
    }
  }
  else
  {
    CFTypeRef v3 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v5);
  **(void **)(a1 + 40) = v3;
}

uint64_t HALS_IOA2Control::GetPropertyDataSize(HALS_IOA2Control *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, const void *a5, HALS_Client *a6)
{
  if (((*(uint64_t (**)(HALS_IOA2Control *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a6) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if (a3->mSelector == 1651272546)
  {
    uint64_t v19 = 0;
    uint64_t v20 = &v19;
    uint64_t v21 = 0x2000000000;
    int v22 = 0;
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 0x40000000;
    void v16[2] = ___ZNK16HALS_IOA2Control19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3;
    v16[3] = &unk_1E62342E8;
    v16[4] = &v19;
    v16[5] = this;
    int v11 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v11, (uint64_t)v16);
    uint64_t v12 = *((unsigned int *)v20 + 6);
LABEL_9:
    _Block_object_dispose(&v19, 8);
    return v12;
  }
  if (mSelector == 1935892841)
  {
    uint64_t v19 = 0;
    uint64_t v20 = &v19;
    uint64_t v21 = 0x2000000000;
    int v22 = 0;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 0x40000000;
    v17[2] = ___ZNK16HALS_IOA2Control19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2;
    v17[3] = &unk_1E62342C0;
    v17[4] = &v19;
    v17[5] = this;
    __int16 v13 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v13, (uint64_t)v17);
    goto LABEL_8;
  }
  if (mSelector == 1935893353)
  {
    uint64_t v19 = 0;
    uint64_t v20 = &v19;
    uint64_t v21 = 0x2000000000;
    int v22 = 1;
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 0x40000000;
    v18[2] = ___ZNK16HALS_IOA2Control19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke;
    v18[3] = &unk_1E6234298;
    v18[4] = &v19;
    v18[5] = this;
    __int16 v10 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v10, (uint64_t)v18);
LABEL_8:
    uint64_t v12 = (4 * *((_DWORD *)v20 + 6));
    goto LABEL_9;
  }

  return HALS_Control::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
}

void sub_1BAE17310(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void ___ZNK16HALS_IOA2Control19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v2 + 96))
  {
    CFArrayRef v4 = (const __CFArray *)HALS_IOA2UCDevice::CopySelectorControlInfo_MultiSelectorValue(*(HALS_IOA2UCDevice **)(v2 + 80), a2);
    CFArrayRef v5 = v4;
    __int16 v6 = 1;
    if (v4) {
      LODWORD(v4) = CFArrayGetCount(v4);
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v4;
    CACFArray::~CACFArray((CACFArray *)&v5);
  }
}

void sub_1BAE17394(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZNK16HALS_IOA2Control19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2(uint64_t a1, const __CFDictionary *a2)
{
  CFArrayRef v3 = (const __CFArray *)HALS_IOA2UCDevice::CopySelectorControlInfo_SelectorMap(*(HALS_IOA2UCDevice **)(*(void *)(a1 + 40) + 80), a2);
  CFArrayRef v4 = v3;
  __int16 v5 = 1;
  if (v3) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayGetCount(v3);
  }
  CACFArray::~CACFArray((CACFArray *)&v4);
}

void sub_1BAE17414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ___ZNK16HALS_IOA2Control19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  if (*(void *)(v1 + 104)) {
    *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(v1 + 112);
  }
  return result;
}

BOOL HALS_IOA2Control::IsPropertySettable(HALS_IOA2Control *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  if (((*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 88))(this) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  uint64_t v12 = 0;
  __int16 v13 = &v12;
  uint64_t v14 = 0x2000000000;
  char IsPropertySettable = 0;
  char IsPropertySettable = HALS_Control::IsPropertySettable((uint64_t)this, a2, (int *)a3);
  if (*((unsigned char *)v13 + 24))
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    v11[2] = ___ZNK16HALS_IOA2Control18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke;
    void v11[3] = &unk_1E6234270;
    v11[4] = &v12;
    v11[5] = this;
    unsigned int v7 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v7, (uint64_t)v11);
    BOOL v8 = *((unsigned char *)v13 + 24) != 0;
  }
  else
  {
    BOOL v8 = 0;
  }
  _Block_object_dispose(&v12, 8);
  return v8;
}

void sub_1BAE175DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZNK16HALS_IOA2Control18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 80);
  BOOL v6 = 0;
  uint64_t v4 = v2;
  __int16 v5 = 0;
  if (v2)
  {
    CACFDictionary::GetBool(v2, @"read only", &v6);
    BOOL v3 = !v6;
  }
  else
  {
    BOOL v3 = 1;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v4);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
}

void sub_1BAE1766C(void *a1)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_IOA2Control::HasProperty(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)a1 + 176))(a1, a3, a4);
  if (result)
  {
    return HALS_Control::HasProperty(a1, a2, a3);
  }
  return result;
}

void HALS_IOA2Control::~HALS_IOA2Control(HALS_IOA2Control *this)
{
  HALS_IOA2Control::~HALS_IOA2Control(this);

  JUMPOUT(0x1C1859840);
}

{
  int v2;
  int v3;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  uint64_t v12 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F14785B0;
  uint64_t v2 = *((_DWORD *)this + 5);
  uint64_t v3 = *((_DWORD *)this + 6);
  if (v2 != v3)
  {
    if (v2 != 1651273579 && v2 != 1936028002 && v3 != 1651273579 && v3 != 1936028002) {
      goto LABEL_19;
    }
LABEL_18:
    if (!*((void *)this + 13)) {
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  if (v2 == 1936028002 || v2 == 1651273579) {
    goto LABEL_18;
  }
LABEL_19:
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    BOOL v8 = 136315394;
    uint64_t v9 = "HALS_IOA2Control.cpp";
    __int16 v10 = 1024;
    int v11 = 73;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::~HALS_IOA2Control: somebody forgot to unmap the block control buffer", (uint8_t *)&v8, 0x12u);
  }
LABEL_21:
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 17));
  CACFDictionary::~CACFDictionary((HALS_IOA2Control *)((char *)this + 80));
  HALS_Control::~HALS_Control(this);
}

void HALS_IOA2Control::Activate(HALS_IOA2Control *this)
{
  HALS_IOA2Control::SynchronizeWithDictionary(this);

  HALS_Object::Activate(this, v2);
}

void HALS_IOA2Control::SynchronizeWithDictionary(HALS_IOA2Control *this)
{
  uint64_t v2 = (CACFDictionary *)*((void *)this + 10);
  CFTypeRef cf = 0;
  CFMutableDictionaryRef v35 = v2;
  __int16 v36 = 0;
  if (v2)
  {
    CACFDictionary::GetArray((uint64_t)v2, @"property selectors", (const __CFArray **)&cf);
    CFArrayRef v3 = (const __CFArray *)cf;
    if (cf) {
      CFRetain(cf);
    }
  }
  else
  {
    CFArrayRef v3 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v35);
  CFArrayRef v25 = v3;
  __int16 v26 = 1;
  if (!v3)
  {
    *((_DWORD *)this + 42) = 0;
    goto LABEL_13;
  }
  unsigned int Count = CFArrayGetCount(v3);
  if (Count >= 6)
  {
    *((_DWORD *)this + 42) = 6;
  }
  else
  {
    *((_DWORD *)this + 42) = Count;
    if (!Count) {
      goto LABEL_13;
    }
  }
  unint64_t v5 = 0;
  BOOL v6 = (unsigned int *)((char *)this + 172);
  do
    CACFArray::GetUInt32(&v25, v5++, v6++);
  while (v5 < *((unsigned int *)this + 42));
LABEL_13:
  int v7 = *((_DWORD *)this + 5);
  if (v7 <= 1936028006)
  {
    BOOL v8 = v7 == 1818588780;
    int v9 = 1886544237;
  }
  else
  {
    BOOL v8 = v7 == 1936028007 || v7 == 1937072758;
    int v9 = 1986817381;
  }
  if (!v8 && v7 != v9)
  {
    int v20 = *((_DWORD *)this + 6);
    if (v7 == v20) {
      goto LABEL_45;
    }
    if (v20 <= 1936028006)
    {
      if (v20 != 1818588780)
      {
        int v21 = 1886544237;
LABEL_67:
        if (v20 != v21) {
          goto LABEL_45;
        }
      }
    }
    else if (v20 != 1936028007 && v20 != 1937072758)
    {
      int v21 = 1986817381;
      goto LABEL_67;
    }
  }
  int v11 = (CACFDictionary *)*((void *)this + 10);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 17));
  *((void *)this + 16) = (char *)this + 136;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  CFMutableDictionaryRef v35 = v11;
  __int16 v36 = 0;
  if (v11)
  {
    CFTypeRef cf = 0;
    __int16 v34 = 1;
    CACFDictionary::GetCACFArray(&v35, @"range map", (CACFArray *)&cf);
    CFArrayRef v12 = (const __CFArray *)cf;
    if (cf)
    {
      unsigned int v13 = 0;
LABEL_27:
      LODWORD(v12) = CFArrayGetCount(v12);
      while (v13 < v12)
      {
        int v31 = 0;
        __int16 v32 = 1;
        CACFArray::GetCACFDictionary((CFArrayRef *)&cf, v13, (CACFDictionary *)&v31);
        if (v31)
        {
          int v30 = 0;
          double v29 = 0.0;
          unsigned int v28 = 0;
          double v27 = 0.0;
          CACFDictionary::GetSInt32(v31, @"start int value", &v30);
          CACFDictionary::GetFixed64(v31, @"start db value", &v29);
          CACFDictionary::GetUInt32((uint64_t)v31, @"integer steps", &v28);
          double Fixed64 = CACFDictionary::GetFixed64(v31, @"db per step", &v27);
          *(float *)&double Fixed64 = v29;
          float v15 = v29 + (double)v28 * v27;
          CAVolumeCurve::AddRange((HALS_IOA2Control *)((char *)this + 120), v30, v28 + v30, Fixed64, v15);
        }
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v31);
        ++v13;
        CFArrayRef v12 = (const __CFArray *)cf;
        if (cf) {
          goto LABEL_27;
        }
      }
    }
    LODWORD(v31) = 0;
    if (CACFDictionary::GetUInt32((uint64_t)v35, @"transfer function", (unsigned int *)&v31))
    {
      uint64_t v16 = v31;
      *((_DWORD *)this + 39) = v31;
      if (v16 > 0xF)
      {
        float v19 = 1.0;
        float v18 = 2.0;
        char v17 = 1;
      }
      else
      {
        char v17 = byte_1BAFF96D0[v16];
        float v18 = flt_1BAFFF660[v16];
        float v19 = flt_1BAFFF6A0[v16];
      }
      *((unsigned char *)this + 152) = v17;
      *((float *)this + 40) = v18;
      *((float *)this + 41) = v19;
    }
    CACFArray::~CACFArray((CACFArray *)&cf);
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v35);
  int v7 = *((_DWORD *)this + 5);
LABEL_45:
  if (v7 > 1751740517)
  {
    if (v7 == 1751740518 || v7 == 1852601964) {
      goto LABEL_53;
    }
    int v22 = 1936483188;
  }
  else
  {
    if (v7 == 1668047723 || v7 == 1684370292) {
      goto LABEL_53;
    }
    int v22 = 1685287523;
  }
  if (v7 != v22)
  {
    int v23 = *((_DWORD *)this + 6);
    if (v7 == v23) {
      goto LABEL_54;
    }
    if (v23 > 1751740517)
    {
      if (v23 == 1751740518 || v23 == 1936483188) {
        goto LABEL_53;
      }
      int v24 = 1852601964;
    }
    else
    {
      if (v23 == 1668047723 || v23 == 1684370292) {
        goto LABEL_53;
      }
      int v24 = 1685287523;
    }
    if (v23 != v24) {
      goto LABEL_54;
    }
  }
LABEL_53:
  CACFDictionary::GetBool(*((void *)this + 10), @"multi-selector", (BOOL *)this + 96);
LABEL_54:
  CACFArray::~CACFArray((CACFArray *)&v25);
}

void sub_1BAE17D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
}

void HALS_IOA2Control::HALS_IOA2Control(HALS_Object *a1, uint64_t a2, int a3, int a4, int a5, int a6, HALS_Object *a7, int a8, int a9)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  HALS_Control::HALS_Control(a1, a2, a5, a6, a7, a8, a9);
}

void sub_1BAE17F94(_Unwind_Exception *a1)
{
  HALS_Control::~HALS_Control(v1);
  _Unwind_Resume(a1);
}

void HALS_IOA2Control::SynchronizeWithRegistry(HALS_IOA2Control *this)
{
  if (*((_DWORD *)this + 15) == 1)
  {
    *((_DWORD *)this + 43) = 1650685548;
  }
  else
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 0x40000000;
    v2[2] = ___ZN16HALS_IOA2Control23SynchronizeWithRegistryEv_block_invoke;
    v2[3] = &__block_descriptor_tmp_73_11322;
    v2[4] = this;
    uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Control *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v2);
  }
}

void ___ZN16HALS_IOA2Control23SynchronizeWithRegistryEv_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v1 + 56));
  uint64_t v4 = (HALS_ObjectMap *)v2;
  if (v2)
  {
    CFDictionaryRef v5 = (const __CFDictionary *)HALS_IOA2UCDevice::CopyControlDictionaryByID((const __CFDictionary **)(v2 + 1808), *(_DWORD *)(v1 + 72));
    CFDictionaryRef v7 = v5;
    __int16 v8 = 1;
    if (!v5)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)pthread_attr_t buf = 136315394;
        __int16 v10 = "HALS_IOA2Control.cpp";
        __int16 v11 = 1024;
        int v12 = 1253;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Control::SynchronizeWithRegistry: couldn't find the control dictionary", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    CACFDictionary::SetCFMutableDictionaryFromCopy((CACFDictionary *)(v1 + 80), v5);
    HALS_IOA2Control::SynchronizeWithDictionary((HALS_IOA2Control *)v1);
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v7);
  }
  HALS_ObjectMap::ReleaseObject(v4, v3);
}

void sub_1BAE181C4(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void ___ZN16HALS_IOA2Control12PushNewValueEi_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v2 + 56));
  uint64_t v5 = v3;
  if (v3)
  {
    if (*(unsigned char *)(v2 + 96))
    {
      (*(void (**)(uint64_t))(*(void *)(v3 + 1808) + 16))(v3 + 1808);
      HALS_IOA2Control::SynchronizeWithRegistry((HALS_IOA2Control *)v2);
    }
    else
    {
      int v6 = *(_DWORD *)(v2 + 72);
      int v7 = *(_DWORD *)(a1 + 40);
      CFArrayRef theArray = 0;
      HALB_UCObject::CopyProperty_CFArray((const __CFDictionary **)(v3 + 1808), @"controls", &theArray);
      unsigned int v8 = 0;
      CFArrayRef v9 = theArray;
      CFArrayRef v29 = theArray;
      __int16 v30 = 1;
      if (!theArray) {
        goto LABEL_6;
      }
LABEL_5:
      LODWORD(v9) = CFArrayGetCount(v9);
LABEL_6:
      while (v8 < v9)
      {
        CFDictionaryRef theDict = 0;
        __int16 v28 = 0;
        CACFArray::GetCACFDictionary(&v29, v8, (CACFDictionary *)&theDict);
        if (theDict)
        {
          unsigned int v26 = 0;
          int UInt32 = CACFDictionary::GetUInt32((uint64_t)theDict, @"control ID", &v26);
          int v11 = v26 == v6 ? UInt32 : 0;
          if (v11 == 1)
          {
            unsigned int v25 = 0;
            CACFDictionary::GetUInt32((uint64_t)theDict, @"base class", &v25);
            int v24 = 0;
            CACFDictionary::GetSInt32(theDict, @"value", &v24);
            if ((int)v25 <= 1936483441)
            {
              if (v25 != 1818588780 && v25 != 1936483188) {
                goto LABEL_40;
              }
            }
            else if (v25 != 1936483442 && v25 != 1936744814)
            {
              if (v25 != 1953458028) {
                goto LABEL_40;
              }
              int v12 = (v7 != 0) ^ (v24 == 0);
              if (!v12) {
                int v7 = v7 != 0;
              }
              if (v12) {
                goto LABEL_40;
              }
LABEL_25:
              CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
              __int16 v23 = 257;
              int valuePtr = v7;
              CFArrayRef v13 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
              CFArrayRef theArray = v13;
              LOBYTE(v32) = 1;
              if (v13 && MutableCopy) {
                CFDictionarySetValue(MutableCopy, @"value", v13);
              }
              CACFNumber::~CACFNumber((CACFNumber *)&theArray);
              if (v29)
              {
                unsigned int Count = CFArrayGetCount(v29);
                CFArrayRef v15 = v29;
                CFIndex v16 = Count;
              }
              else
              {
                CFArrayRef v15 = 0;
                CFIndex v16 = 0;
              }
              CFArrayRef v17 = CFArrayCreateMutableCopy(0, v16, v15);
              CFArrayRef theArray = v17;
              __int16 v32 = 257;
              if (v17)
              {
                unsigned int v18 = CFArrayGetCount(v17);
                CFArrayRef v19 = theArray;
                if (v8 <= v18)
                {
                  CFArraySetValueAtIndex(theArray, v8, MutableCopy);
                  CFArrayRef v19 = theArray;
                }
              }
              else
              {
                CFArrayRef v19 = 0;
              }
              if (*(unsigned char *)(v5 + 1833))
              {
                if (v19)
                {
                  int v20 = *(__CFDictionary **)(v5 + 1824);
                  if (v20) {
                    CFDictionarySetValue(v20, @"controls", v19);
                  }
                }
              }
              CACFArray::~CACFArray((CACFArray *)&theArray);
              CACFDictionary::~CACFDictionary((CACFDictionary *)&MutableCopy);
LABEL_40:
              CACFDictionary::~CACFDictionary((CACFDictionary *)&theDict);
              break;
            }
            if (v24 != v7) {
              goto LABEL_25;
            }
            goto LABEL_40;
          }
        }
        CACFDictionary::~CACFDictionary((CACFDictionary *)&theDict);
        ++v8;
        CFArrayRef v9 = v29;
        if (v29) {
          goto LABEL_5;
        }
      }
      CACFArray::~CACFArray((CACFArray *)&v29);
      CFArrayRef v21 = (const __CFArray *)HALS_IOA2UCDevice::CopyControlDictionaryByID((const __CFDictionary **)(v5 + 1808), *(_DWORD *)(v2 + 72));
      CFArrayRef theArray = v21;
      __int16 v32 = 1;
      if (v21)
      {
        CACFDictionary::SetCFMutableDictionaryFromCopy((CACFDictionary *)(v2 + 80), v21);
        HALS_IOA2Control::SynchronizeWithDictionary((HALS_IOA2Control *)v2);
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)&theArray);
    }
  }
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v5, v4);
}

void sub_1BAE18554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v13 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  CACFNumber::~CACFNumber((CACFNumber *)va3);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va1);
  CACFArray::~CACFArray((CACFArray *)va2);
  HALS_ObjectMap::ReleaseObject(v2, v4);
  _Unwind_Resume(a1);
}

void AMCP::IOAudio1::Device::Device(uint64_t a1, uint64_t a2, unsigned int *a3, const __CFDictionary **a4)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  if (*a4)
  {
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, &stru_1F148AD50);
    applesauce::CF::at_or<applesauce::CF::StringRef,__CFString const*>((void *)(a1 + 24), *a4, @"IOAudioEngineGlobalUniqueID", cf);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    *(_DWORD *)(a1 + 32) = 0;
    CFStringRef v7 = *(const __CFString **)(a1 + 24);
    if (v7)
    {
      applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v7);
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v8 = __p;
      }
      else {
        uint64_t v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      }
      caulk::make_string((caulk *)"%s Work Queue", (uint64_t)cf, v8);
      if (SHIBYTE(cf[2]) >= 0) {
        uint64_t v9 = cf;
      }
      else {
        uint64_t v9 = (CFTypeRef *)cf[0];
      }
      uint64_t v10 = dispatch_queue_create((const char *)v9, 0);
      AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(a1 + 40), v10);
      if (v10) {
        dispatch_release(v10);
      }
      if (SHIBYTE(cf[2]) < 0) {
        operator delete((void *)cf[0]);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      int v11 = (AMCP::Utility::Mach_Port *)*a3;
      *(_DWORD *)(a1 + 360) = v11;
      if (!v11 || (int v11 = (AMCP::Utility::Mach_Port *)IOObjectRetain((io_object_t)v11), v12 = v11, !v11))
      {
        *(void *)(a1 + 368) = 0;
        *(void *)(a1 + 376) = 0;
        *(_DWORD *)(a1 + 384) = AMCP::Utility::Mach_Port::create_port(v11);
        *(_WORD *)(a1 + 388) = 257;
        *(void *)(a1 + 392) = 850045863;
        *(_OWORD *)(a1 + 400) = 0u;
        *(_OWORD *)(a1 + 416) = 0u;
        *(_OWORD *)(a1 + 432) = 0u;
        *(_OWORD *)(a1 + 448) = 0u;
        *(void *)(a1 + 464) = *a4;
        *a4 = 0;
        std::string::basic_string[abi:ne180100]<0>(&v51, "IOAudioDevice");
        std::string::basic_string[abi:ne180100]<0>(&v56, "IOService");
        uint64_t v65 = 0;
        unint64_t v66 = 0;
        int v64 = 0;
        uint64_t v13 = *a3;
        LODWORD(v57) = v13;
        if (!v13 || (uint64_t v14 = IOObjectRetain(v13), !v14))
        {
          if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v53, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
          }
          else {
            std::string v53 = v56;
          }
          LODWORD(cf[0]) = v13;
          LODWORD(v57) = 0;
          *(_OWORD *)&cf[1] = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
          *(void *)&long long v62 = *((void *)&v53.__r_.__value_.__l + 2);
          memset(&v53, 0, sizeof(v53));
          object[0] = 0;
          if ((SBYTE7(v62) & 0x80u) == 0) {
            uint64_t v15 = &cf[1];
          }
          else {
            uint64_t v15 = (CFTypeRef *)cf[1];
          }
          mach_error_t v16 = MEMORY[0x1C1858A10](v13, v15, object);
          if (!v16)
          {
            io_object_t v17 = object[0];
            LODWORD(__p[0].__r_.__value_.__l.__data_) = object[0];
            LODWORD(buf.__r_.__value_.__l.__data_) = object[0];
            if (!object[0] || (uint64_t v18 = IOObjectRetain(object[0]), !v18))
            {
              applesauce::iokit::details::io_services_iterator::io_services_iterator(iterator, v17);
              if (v17)
              {
                IOObjectRelease(v17);
                IOObjectRelease(v17);
              }
              __p[0].__r_.__value_.__r.__words[0] = 0;
              io_object_t v19 = iterator[1];
              while (v19)
              {
                LODWORD(buf.__r_.__value_.__l.__data_) = v19;
                uint64_t v20 = IOObjectRetain(v19);
                if (v20)
                {
                  exception = __cxa_allocate_exception(0x20uLL);
                  __int16 v34 = std::system_category();
                  MEMORY[0x1C1859250](exception, v20, v34, "Error on Retain");
                  __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
                }
                if (v52 >= 0) {
                  CFArrayRef v21 = (const char *)&v51;
                }
                else {
                  CFArrayRef v21 = (const char *)v51;
                }
                if (IOObjectConformsTo(v19, v21))
                {
                  int v22 = v65;
                  if ((unint64_t)v65 >= v66)
                  {
                    __int16 v23 = (char *)std::vector<applesauce::iokit::io_object_holder>::__push_back_slow_path<applesauce::iokit::io_object_holder const&>(&v64, v19);
                  }
                  else
                  {
                    std::construct_at[abi:ne180100]<applesauce::iokit::io_object_holder,applesauce::iokit::io_object_holder const&,applesauce::iokit::io_object_holder*>(v65, v19);
                    __int16 v23 = v22 + 4;
                  }
                  uint64_t v65 = v23;
                }
                IOObjectRelease(v19);
                if (!iterator[1])
                {
                  CFMutableDictionaryRef v35 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::logic_error::logic_error(v35, "io_services_iterator exceeding size");
                  v35->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
                  __cxa_throw(v35, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
                }
                io_object_t v19 = IOIteratorNext(iterator[0]);
                io_object_t v24 = iterator[1];
                iterator[1] = v19;
                if (v24)
                {
                  IOObjectRelease(v24);
                  io_object_t v19 = iterator[1];
                }
              }
              if (iterator[0]) {
                IOObjectRelease(iterator[0]);
              }
              if (SBYTE7(v62) < 0) {
                operator delete((void *)cf[1]);
              }
              if (LODWORD(cf[0])) {
                IOObjectRelease((io_object_t)cf[0]);
              }
              unsigned int v25 = (_DWORD *)(a1 + 472);
              if (v64 == v65)
              {
                *unsigned int v25 = 0;
              }
              else
              {
                io_object_t v26 = *(_DWORD *)v64;
                *unsigned int v25 = *(_DWORD *)v64;
                if (v26)
                {
                  uint64_t v27 = IOObjectRetain(v26);
                  if (v27)
                  {
                    __int16 v28 = __cxa_allocate_exception(0x20uLL);
                    CFArrayRef v29 = std::system_category();
                    MEMORY[0x1C1859250](v28, v27, v29, "Error on Retain");
                    __cxa_throw(v28, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
                  }
                }
              }
              cf[0] = &v64;
              std::vector<applesauce::iokit::io_object_holder>::__destroy_vector::operator()[abi:ne180100]((void ***)cf);
              if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v56.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v52) < 0) {
                operator delete((void *)v51);
              }
              io_registry_entry_t v30 = *(_DWORD *)(a1 + 472);
              if (v30)
              {
                cf[0] = 0;
                uint64_t CFProperties = IORegistryEntryCreateCFProperties(v30, (CFMutableDictionaryRef *)cf, 0, 0);
                if (CFProperties)
                {
                  __int16 v48 = __cxa_allocate_exception(0x20uLL);
                  uint64_t v49 = std::system_category();
                  MEMORY[0x1C1859250](v48, CFProperties, v49, "Error on get_properties");
                  __cxa_throw(v48, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
                }
                applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)(a1 + 480), cf[0]);
              }
              else
              {
                *(void *)(a1 + 480) = 0;
              }
              *(_OWORD *)(a1 + 536) = 0u;
              __int16 v32 = (void **)(a1 + 536);
              *(void *)(a1 + 568) = 0;
              *(_OWORD *)(a1 + 552) = 0u;
              *(_OWORD *)(a1 + 504) = 0u;
              *(_OWORD *)(a1 + 520) = 0u;
              *(_OWORD *)(a1 + 488) = 0u;
              std::string::basic_string[abi:ne180100]<0>(cf, "IOAudioStream");
              std::string::basic_string[abi:ne180100]<0>(__p, "IOService");
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)cf;
              _ZN4AMCP5IOKit22find_child_services_ifIZNS0_33find_child_services_by_class_nameERKN10applesauce5iokit16io_object_holderERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEESF_EUlRKT_E_EENS7_6vectorIS4_NSB_IS4_EEEES6_SF_SI_((uint64_t)&v56, *a3, (uint64_t)__p, (const char **)&buf.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p[0].__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(cf[2]) < 0) {
                operator delete((void *)cf[0]);
              }
              AMCP::IOAudio1::Stream::create_from_service_list((uint64_t)cf, a1, (io_registry_entry_t *)v56.__r_.__value_.__l.__data_, (io_registry_entry_t *)v56.__r_.__value_.__l.__size_);
              std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__vdeallocate((void **)(a1 + 488));
              *(_OWORD *)(a1 + 488) = *(_OWORD *)cf;
              *(CFTypeRef *)(a1 + 504) = cf[2];
              memset(cf, 0, sizeof(cf));
              std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__vdeallocate((void **)(a1 + 512));
              *(_OWORD *)(a1 + 512) = v62;
              *(void *)(a1 + 528) = v63;
              uint64_t v63 = 0;
              long long v62 = 0uLL;
              __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v62;
              std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)cf;
              std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              std::string::basic_string[abi:ne180100]<0>(cf, "IOAudioControl");
              std::string::basic_string[abi:ne180100]<0>(__p, "IOService");
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)cf;
              _ZN4AMCP5IOKit22find_child_services_ifIZNS0_33find_child_services_by_class_nameERKN10applesauce5iokit16io_object_holderERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEESF_EUlRKT_E_EENS7_6vectorIS4_NSB_IS4_EEEES6_SF_SI_((uint64_t)iterator, *a3, (uint64_t)__p, (const char **)&buf.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p[0].__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(cf[2]) < 0) {
                operator delete((void *)cf[0]);
              }
              AMCP::IOAudio1::Control::create_from_service_list(cf, a1, *(uint64_t *)iterator, v55);
              if (*v32)
              {
                std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__clear[abi:ne180100]((void *)(a1 + 536));
                operator delete(*v32);
                HALB_Mutex *v32 = 0;
                *(void *)(a1 + 544) = 0;
                *(void *)(a1 + 552) = 0;
              }
              *(_OWORD *)__int16 v32 = *(_OWORD *)cf;
              *(CFTypeRef *)(a1 + 552) = cf[2];
              memset(cf, 0, sizeof(cf));
              __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)cf;
              std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)cf, *(dispatch_object_t *)(*(void *)(*(void *)(*(void *)(a1 + 16) + 32) + 32) + 352));
              AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)__p, *(dispatch_object_t *)(*(void *)(*(void *)(*(void *)(a1 + 16) + 32) + 32) + 672));
              AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v59, (dispatch_object_t)cf[0]);
              dispatch_set_target_queue(v59[0], (dispatch_queue_t)__p[0].__r_.__value_.__l.__data_);
              AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v59);
              operator new();
            }
            unsigned int v46 = __cxa_allocate_exception(0x20uLL);
            CFArrayRef v47 = std::system_category();
            MEMORY[0x1C1859250](v46, v18, v47, "Error on Retain");
            __cxa_throw(v46, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
          }
          unsigned int v38 = __cxa_allocate_exception(0x18uLL);
          std::string::basic_string[abi:ne180100]<0>(&buf, "Could not find any parents for plane ");
          if ((SBYTE7(v62) & 0x80u) == 0) {
            float v39 = (const std::string::value_type *)&cf[1];
          }
          else {
            float v39 = (const std::string::value_type *)cf[1];
          }
          if ((SBYTE7(v62) & 0x80u) == 0) {
            std::string::size_type v40 = BYTE7(v62);
          }
          else {
            std::string::size_type v40 = (std::string::size_type)cf[2];
          }
          unsigned int v41 = std::string::append(&buf, v39, v40);
          __p[0] = *v41;
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          applesauce::iokit::kern_return_exception::kern_return_exception((uint64_t)v38, (const void **)&__p[0].__r_.__value_.__l.__data_, v16);
        }
        unsigned int v44 = __cxa_allocate_exception(0x20uLL);
        long long v45 = std::system_category();
        MEMORY[0x1C1859250](v44, v14, v45, "Error on Retain");
        __cxa_throw(v44, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
      }
      uint64_t v42 = __cxa_allocate_exception(0x20uLL);
      BOOL v43 = std::system_category();
      MEMORY[0x1C1859250](v42, v12, v43, "Error on Retain");
      __cxa_throw(v42, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
    unsigned int v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "Could not construct");
    __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  __int16 v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v36, "Could not construct");
  __cxa_throw(v36, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1BAE1A32C()
{
  __cxa_free_exception(v0);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 - 128);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  JUMPOUT(0x1BAE1ABD0);
}

void sub_1BAE1A470(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BAE1ACA0);
}

void sub_1BAE1A478(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BAE1ACA0);
}

void sub_1BAE1A480()
{
}

void sub_1BAE1A490()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x1BAE1A5FCLL);
}

void sub_1BAE1A4CC()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x1BAE1AA8CLL);
}

void sub_1BAE1A4E0()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x1BAE1AA94);
}

void sub_1BAE1A500(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  __cxa_free_exception(v13);
  JUMPOUT(0x1BAE1AC8CLL);
}

void sub_1BAE1A518()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x1BAE1AC94);
}

void sub_1BAE1A53C(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BAE1ACA0);
}

void sub_1BAE1A548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,uint64_t a48,uint64_t a49,const void *a50)
{
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}::~Address(&a50);
  JUMPOUT(0x1BAE1A5FCLL);
}

void sub_1BAE1A574(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BAE1ACA0);
}

void sub_1BAE1A584(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BAE1ACA0);
}

void sub_1BAE1A58C(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BAE1ACA0);
}

void sub_1BAE1A594(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BAE1ACA0);
}

void sub_1BAE1A59C(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BAE1ACA0);
}

void sub_1BAE1A5A4(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BAE1ACA0);
}

void sub_1BAE1A5AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,std::__shared_weak_count *a52)
{
  if (a52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a52);
  }
  JUMPOUT(0x1BAE1AA84);
}

void sub_1BAE1A5C8()
{
}

void sub_1BAE1A5D0()
{
}

void sub_1BAE1A5D8()
{
}

void sub_1BAE1A5E0()
{
}

void sub_1BAE1A5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,char a47)
{
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a47);
  JUMPOUT(0x1BAE1AA7CLL);
}

void sub_1BAE1A608()
{
  uint64_t v1 = *(std::__shared_weak_count **)(v0 - 128);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1BAE1AA7CLL);
}

void sub_1BAE1A690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,std::__shared_weak_count *a52)
{
  if (a52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a52);
  }
  JUMPOUT(0x1BAE1AA8CLL);
}

void sub_1BAE1A6AC()
{
}

void sub_1BAE1A6B4()
{
  uint64_t v1 = *(std::__shared_weak_count **)(v0 - 128);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  JUMPOUT(0x1BAE1AA94);
}

void sub_1BAE1A738()
{
}

void sub_1BAE1A744(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,NSObject **buf,std::__shared_weak_count *a52,__int16 a53,__int16 a54,int a55,__int16 a56)
{
  if (a2)
  {
    MEMORY[0x1C1859840](v57, 0x1000C4052888210);
    int v60 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v61 = v60;
      AMCP::Log::Scope_Registry::get(v60);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      long long v62 = *buf;
      if (a52) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a52);
      }
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
        uint64_t v63 = pthread_self();
        mach_port_t v64 = pthread_mach_thread_np(v63);
        uint64_t v65 = (*(uint64_t (**)(AMCP::Log::Scope_Registry *))(*(void *)v61 + 16))(v61);
        LODWORD(buf) = 67109890;
        HIDWORD(buf) = v64;
        LOWORD(a52) = 2080;
        *(void *)(v56 + 82) = "IOAudio1_Device.cpp";
        a54 = 1024;
        a55 = 129;
        a56 = 2080;
        *(void *)(v56 + 98) = v65;
        _os_log_error_impl(&dword_1BAA78000, v62, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d failed to open a connect to the driver's engine: %s", (uint8_t *)&buf, 0x22u);
      }
      __cxa_rethrow();
    }
    AMCP::Log::Scope_Registry::get(v60);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    unint64_t v66 = *buf;
    if (a52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a52);
    }
    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
    {
      uint64_t v67 = pthread_self();
      mach_port_t v68 = pthread_mach_thread_np(v67);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v68;
      LOWORD(a52) = 2080;
      *(void *)(v56 + 82) = "IOAudio1_Device.cpp";
      a54 = 1024;
      a55 = 134;
      _os_log_error_impl(&dword_1BAA78000, v66, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d failed to open a connect to the driver's engine", (uint8_t *)&buf, 0x18u);
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x1BAE1ACA0);
}

void sub_1BAE1A918()
{
}

void sub_1BAE1A948(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BAE1ACA0);
}

void sub_1BAE1A950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
}

void sub_1BAE1A960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  std::__function::__value_func<void ()(unsigned int,void *)>::~__value_func[abi:ne180100](&a51);
  if (v52) {
    dispatch_release(v52);
  }
  MEMORY[0x1C1859840](v51, 0x1020C40DCC910D7);
  JUMPOUT(0x1BAE1A990);
}

void sub_1BAE1A99C()
{
}

void sub_1BAE1A9A4()
{
  if (SLOBYTE(STACK[0x317]) < 0) {
    operator delete((void *)STACK[0x300]);
  }
  if (SLOBYTE(STACK[0x457]) < 0) {
    operator delete((void *)STACK[0x440]);
  }
  JUMPOUT(0x1BAE1ABF0);
}

void sub_1BAE1A9E4()
{
  if (SLOBYTE(STACK[0x317]) < 0) {
    operator delete((void *)STACK[0x300]);
  }
  if (SLOBYTE(STACK[0x457]) < 0) {
    operator delete((void *)STACK[0x440]);
  }
  JUMPOUT(0x1BAE1AC00);
}

void sub_1BAE1AA20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,io_object_t a51)
{
}

void sub_1BAE1AA38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  AMCP::IOKit::Service_Parent_Range_For::~Service_Parent_Range_For((AMCP::IOKit::Service_Parent_Range_For *)&STACK[0x440]);
  STACK[0x300] = v50 - 136;
  std::vector<applesauce::iokit::io_object_holder>::__destroy_vector::operator()[abi:ne180100](&STACK[0x300]);
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  JUMPOUT(0x1BAE1AC48);
}

void sub_1BAE1AA40()
{
}

void sub_1BAE1AA48()
{
}

void sub_1BAE1AA50()
{
}

void sub_1BAE1AA58()
{
}

void sub_1BAE1AA60()
{
}

void sub_1BAE1AA78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,const void *a49)
{
}

void sub_1BAE1AAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,io_object_t a51)
{
  *(void *)(v52 - 128) = v51;
  applesauce::iokit::io_object_holder::~io_object_holder(&a51);
  applesauce::iokit::details::io_services_iterator::~io_services_iterator((applesauce::iokit::details::io_services_iterator *)&STACK[0x300]);
  applesauce::iokit::details::io_services_iterator::~io_services_iterator((applesauce::iokit::details::io_services_iterator *)&a39);
  JUMPOUT(0x1BAE1AB18);
}

void sub_1BAE1AAB8()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x1BAE1AB08);
}

void sub_1BAE1AAD0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BAE1AAD4);
  }
  JUMPOUT(0x1BAE1ACA0);
}

void sub_1BAE1AAE4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAE1AAE8);
  }
  __clang_call_terminate(a1);
}

void sub_1BAE1AAF4()
{
}

void sub_1BAE1AB5C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl((uint64_t)&a51);
  boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector((uint64_t)&a29);
  std::runtime_error::~runtime_error((std::runtime_error *)(v53 - 136));
  if (v51) {
    __cxa_free_exception(v52);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a47);
  JUMPOUT(0x1BAE1ABD0);
}

void sub_1BAE1ABCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, AMCP::Utility::Dispatch_Queue *a11, const void **a12, uint64_t a13, uint64_t a14, io_object_t *a15, uint64_t *a16, uint64_t a17, uint64_t a18, AMCP::Utility::Mach_Port *a19, const void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char a42)
{
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&STACK[0x300]);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&STACK[0x440]);
  STACK[0x440] = (unint64_t)&a39;
  std::vector<applesauce::iokit::io_object_holder>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  STACK[0x440] = (unint64_t)&a42;
  std::vector<applesauce::iokit::io_object_holder>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  __int16 v48 = (std::__shared_weak_count *)v42[71];
  if (v48) {
    std::__shared_weak_count::__release_weak(v48);
  }
  STACK[0x440] = v43;
  std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  STACK[0x440] = a14;
  std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  STACK[0x440] = v46;
  std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x440]);
  applesauce::CF::DictionaryRef::~DictionaryRef(a12);
  applesauce::iokit::io_object_holder::~io_object_holder(v44);
  applesauce::CF::DictionaryRef::~DictionaryRef(a20);
  AMCP::Utility::Mach_Port::~Mach_Port(a19);
  uint64_t v49 = (io_connect_t *)v42[47];
  v42[47] = 0;
  if (v49) {
    std::default_delete<applesauce::iokit::io_connect_holder>::operator()[abi:ne180100](v49);
  }
  uint64_t v50 = *a16;
  *a16 = 0;
  if (v50) {
    std::default_delete<applesauce::iokit::io_service_notifications>::operator()[abi:ne180100](v50);
  }
  applesauce::iokit::io_object_holder::~io_object_holder(a15);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(a11);
  applesauce::CF::StringRef::~StringRef(v45);
  int v51 = (std::__shared_weak_count *)v42[1];
  if (v51) {
    std::__shared_weak_count::__release_weak(v51);
  }
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::at_or<applesauce::CF::StringRef,__CFString const*>(void *a1, const __CFDictionary *a2, const void *a3, void *a4)
{
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(&cf, a2, a3);
  if (v9)
  {
    CFTypeRef v6 = cf;
    if (cf) {
      CFRetain(cf);
    }
    *a1 = v6;
  }
  else
  {
    *a1 = *a4;
    *a4 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

uint64_t _ZN4AMCP5IOKit22find_child_services_ifIZNS0_33find_child_services_by_class_nameERKN10applesauce5iokit16io_object_holderERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEESF_EUlRKT_E_EENS7_6vectorIS4_NSB_IS4_EEEES6_SF_SI_(uint64_t a1, uint64_t object, uint64_t a3, const char **a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  int v36 = object;
  if (object)
  {
    uint64_t v8 = IOObjectRetain(object);
    if (v8)
    {
      uint64_t v28 = v8;
      exception = __cxa_allocate_exception(0x20uLL);
      io_registry_entry_t v30 = std::system_category();
      MEMORY[0x1C1859250](exception, v28, v30, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v35 = *(std::string *)a3;
  }
  int v36 = 0;
  io_object_t v37 = object;
  std::string __p = v35;
  memset(&v35, 0, sizeof(v35));
  io_object_t v41 = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  mach_error_t v10 = MEMORY[0x1C18589F0](object, p_p, &v41);
  if (v10)
  {
    mach_error_t v23 = v10;
    io_object_t v24 = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(&v39, "Could not find any parents for plane ");
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v25 = &__p;
    }
    else {
      unsigned int v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v27 = std::string::append(&v39, (const std::string::value_type *)v25, size);
    std::string v40 = *v27;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    applesauce::iokit::kern_return_exception::kern_return_exception((uint64_t)v24, (const void **)&v40.__r_.__value_.__l.__data_, v23);
  }
  io_object_t v11 = v41;
  LODWORD(v40.__r_.__value_.__l.__data_) = v41;
  LODWORD(v39.__r_.__value_.__l.__data_) = v41;
  if (v41)
  {
    uint64_t v12 = IOObjectRetain(v41);
    if (v12)
    {
      int v31 = __cxa_allocate_exception(0x20uLL);
      __int16 v32 = std::system_category();
      MEMORY[0x1C1859250](v31, v12, v32, "Error on Retain");
      __cxa_throw(v31, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
  }
  applesauce::iokit::details::io_services_iterator::io_services_iterator(&iterator, v11);
  if (v11)
  {
    IOObjectRelease(v11);
    IOObjectRelease(v11);
  }
  v40.__r_.__value_.__r.__words[0] = 0;
LABEL_15:
  io_object_t v13 = objecta;
  while (v13)
  {
    LODWORD(v39.__r_.__value_.__l.__data_) = v13;
    uint64_t v14 = IOObjectRetain(v13);
    if (v14)
    {
      CFArrayRef v21 = __cxa_allocate_exception(0x20uLL);
      int v22 = std::system_category();
      MEMORY[0x1C1859250](v21, v14, v22, "Error on Retain");
      __cxa_throw(v21, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
    uint64_t v15 = *a4;
    if ((*a4)[23] < 0) {
      uint64_t v15 = *(const char **)v15;
    }
    if (IOObjectConformsTo(v13, v15))
    {
      unint64_t v16 = *(void *)(a1 + 8);
      if (v16 >= *(void *)(a1 + 16))
      {
        io_object_t v17 = std::vector<applesauce::iokit::io_object_holder>::__push_back_slow_path<applesauce::iokit::io_object_holder const&>((char **)a1, v13);
      }
      else
      {
        std::construct_at[abi:ne180100]<applesauce::iokit::io_object_holder,applesauce::iokit::io_object_holder const&,applesauce::iokit::io_object_holder*>(*(_DWORD **)(a1 + 8), v13);
        io_object_t v17 = (_DWORD *)(v16 + 4);
        *(void *)(a1 + 8) = v16 + 4;
      }
      *(void *)(a1 + 8) = v17;
    }
    IOObjectRelease(v13);
    if (!objecta)
    {
      uint64_t v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v20, "io_services_iterator exceeding size");
      v20->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
      __cxa_throw(v20, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
    }
    io_object_t v13 = IOIteratorNext(iterator);
    io_object_t v18 = objecta;
    io_object_t objecta = v13;
    if (v18)
    {
      IOObjectRelease(v18);
      goto LABEL_15;
    }
  }
  if (iterator) {
    IOObjectRelease(iterator);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t result = v37;
  if (v37) {
    return IOObjectRelease(v37);
  }
  return result;
}

void sub_1BAE1B0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, char a16, __int16 a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (*(char *)(v30 - 41) < 0) {
    operator delete(*(void **)(v30 - 64));
  }
  if (a27 < 0)
  {
    operator delete(__p);
    if ((v29 & 1) == 0)
    {
LABEL_8:
      AMCP::IOKit::Service_Child_Range_For::~Service_Child_Range_For(&a18);
      *(void *)(v30 - 64) = v27;
      std::vector<applesauce::iokit::io_object_holder>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 64));
      _Unwind_Resume(a1);
    }
  }
  else if (!v29)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

void std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__vdeallocate(void **a1)
{
  if (*a1)
  {
    std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__clear[abi:ne180100](a1);
    operator delete(*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<applesauce::iokit::io_object_holder>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unsigned int v6 = *((_DWORD *)v4 - 1);
        v4 -= 4;
        std::__destroy_at[abi:ne180100]<applesauce::iokit::io_object_holder,0>(v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<applesauce::iokit::io_object_holder,0>(uint64_t result)
{
  if (result) {
    return IOObjectRelease(result);
  }
  return result;
}

uint64_t AMCP::IOAudio1::Device::get_resource_bundle_url(AMCP::IOAudio1::Device *this, uint64_t a2)
{
  CFDictionaryRef v3 = *(const __CFDictionary **)(a2 + 464);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_12;
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(&v12, v3, @"IOAudioDeviceLocalizedBundle");
  if (v13) {
    goto LABEL_6;
  }
  CFDictionaryRef v5 = *(const __CFDictionary **)(a2 + 480);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_12:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(&filePath, v5, @"IOAudioDeviceLocalizedBundle");
  if (!v11)
  {
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&filePath);
    *(void *)this = 0;
    return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v12);
  }
  CFStringRef v12 = filePath;
  CFStringRef filePath = 0;
  char v13 = 1;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&filePath);
LABEL_6:
  CFStringRef v6 = CFStringCreateWithFormat(0, 0, @"/System/Library/Extensions/%@", v12);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&filePath, v6);
  CFURLRef v7 = CFURLCreateWithFileSystemPath(0, filePath, kCFURLPOSIXPathStyle, 1u);
  applesauce::CF::URLRef::URLRef(this, v7);
  if (filePath) {
    CFRelease(filePath);
  }
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v12);
}

void sub_1BAE1B420(void *a1)
{
  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

void std::__optional_destruct_base<applesauce::CF::StringRef,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (v2) {
      CFRelease(v2);
    }
    *(unsigned char *)(a1 + 8) = 0;
  }
}

void std::__optional_destruct_base<applesauce::CF::NumberRef,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (v2) {
      CFRelease(v2);
    }
    *(unsigned char *)(a1 + 8) = 0;
  }
}

uint64_t AMCP::IOAudio1::Device::update_core_common(unint64_t a1, uint64_t a2)
{
  uint64_t v257 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 464);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v4 = a1;
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(&v241, v3, @"IOAudioEngineDescription");
  if (!v242)
  {
    CFDictionaryRef v5 = *(const __CFDictionary **)(v4 + 480);
    if (!v5)
    {
      v174 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v174, "Could not construct");
      __cxa_throw(v174, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(v244, v5, @"IOAudioDeviceName");
    if (v242 == v244[8])
    {
      if (v242)
      {
        CFTypeRef v6 = v241;
        CFTypeRef v241 = *(CFTypeRef *)v244;
        *(void *)v244 = v6;
      }
    }
    else if (v242)
    {
      std::__optional_destruct_base<applesauce::CF::StringRef,false>::reset[abi:ne180100]((uint64_t)&v241);
    }
    else
    {
      CFTypeRef v241 = *(CFTypeRef *)v244;
      *(void *)v244 = 0;
      unsigned __int8 v242 = 1;
    }
    CFURLRef v7 = (AMCP::Log::Scope_Registry *)std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v244);
    if (!v242)
    {
      AMCP::Log::Scope_Registry::get(v7);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v244, "com.apple.coreaudio", "AMCP");
      unint64_t v131 = **(NSObject ***)v244;
      if (*(void *)&v244[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v244[8]);
      }
      if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
      {
        BOOL v132 = pthread_self();
        mach_port_t v133 = pthread_mach_thread_np(v132);
        *(_DWORD *)v244 = 67109890;
        *(_DWORD *)&v244[4] = v133;
        *(_WORD *)&v244[8] = 2080;
        *(void *)&v244[10] = "IOAudio1_Device.cpp";
        *(_WORD *)&v244[18] = 1024;
        *(_DWORD *)&v244[20] = 170;
        *(_WORD *)&v244[24] = 2080;
        *(void *)&v244[26] = "device_name_opt.operator BOOL() == true";
        _os_log_error_impl(&dword_1BAA78000, v131, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Devices have to have a name", v244, 0x22u);
      }
      abort();
    }
  }
  strcpy(__x, "manlbolg");
  __x[9] = 0;
  *(_WORD *)&__x[10] = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v244, (uint64_t)__x, v241);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v244 + 40), v244);
  uint64_t v8 = (CFDictionaryRef *)(v4 + 464);
  if (*(void *)&v244[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v244[8]);
  }
  if (!*v8)
  {
    v153 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v153, "Could not construct");
    __cxa_throw(v153, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(&v239, *v8, @"IOAudioDeviceManufacturerName");
  if (v240) {
    goto LABEL_23;
  }
  CFDictionaryRef v9 = *(const __CFDictionary **)(v4 + 480);
  if (!v9)
  {
    uint64_t v175 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v175, "Could not construct");
    __cxa_throw(v175, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(v244, v9, @"IOAudioDeviceManufacturerName");
  if (v240 == v244[8])
  {
    if (v240)
    {
      CFTypeRef v10 = v239;
      CFTypeRef v239 = *(CFTypeRef *)v244;
      *(void *)v244 = v10;
    }
  }
  else if (v240)
  {
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::reset[abi:ne180100]((uint64_t)&v239);
  }
  else
  {
    CFTypeRef v239 = *(CFTypeRef *)v244;
    *(void *)v244 = 0;
    unsigned __int8 v240 = 1;
  }
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v244);
  if (v240)
  {
LABEL_23:
    strcpy(__x, "kamlbolg");
    __x[9] = 0;
    *(_WORD *)&__x[10] = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v244, (uint64_t)__x, v239);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v244 + 40), v244);
    if (*(void *)&v244[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v244[8]);
    }
  }
  if (!*v8)
  {
    v154 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v154, "Could not construct");
    __cxa_throw(v154, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(&cf, *v8, @"IOAudioDeviceConfigurationApplication");
  if (v238) {
    goto LABEL_35;
  }
  CFDictionaryRef v11 = *(const __CFDictionary **)(v4 + 480);
  if (!v11)
  {
    v176 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v176, "Could not construct");
    __cxa_throw(v176, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(v244, v11, @"IOAudioDeviceConfigurationApplication");
  if (v238 == v244[8])
  {
    if (v238)
    {
      CFTypeRef v12 = cf;
      CFTypeRef cf = *(CFTypeRef *)v244;
      *(void *)v244 = v12;
    }
  }
  else if (v238)
  {
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::reset[abi:ne180100]((uint64_t)&cf);
  }
  else
  {
    CFTypeRef cf = *(CFTypeRef *)v244;
    *(void *)v244 = 0;
    unsigned __int8 v238 = 1;
  }
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v244);
  if (v238)
  {
LABEL_35:
    char v13 = cf;
    if (cf) {
      CFRetain(cf);
    }
    uint64_t valuePtr = (uint64_t)v13;
  }
  else
  {
    char v13 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.AudioMIDISetup", 30, 0x8000100u, 0);
    uint64_t valuePtr = (uint64_t)v13;
    if (!v13)
    {
      io_object_t v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v19, "Could not construct");
      __cxa_throw(v19, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  strcpy(__x, "ppacbolg");
  __x[9] = 0;
  *(_WORD *)&__x[10] = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v244, (uint64_t)__x, v13);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v244 + 40), v244);
  if (*(void *)&v244[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v244[8]);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (!*v8)
  {
    v155 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v155, "Could not construct");
    __cxa_throw(v155, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::BooleanRef,__CFString const*>(&v235, *v8, @"IOAudioEngineIsHidden");
  if (v236)
  {
    if (!v235)
    {
      v170 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v170, "Could not construct");
      __cxa_throw(v170, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    BOOL v14 = applesauce::CF::convert_to<BOOL,0>(v235);
  }
  else
  {
    if (!*v8)
    {
      v177 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v177, "Could not construct");
      __cxa_throw(v177, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    LODWORD(valuePtr) = 0;
    *(void *)__x = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!*(void *)__x)
    {
      uint64_t v178 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v178, "Could not construct");
      __cxa_throw(v178, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(v244, *v8, @"IOAudioEngineIsHidden", __x);
    uint64_t v15 = *(const void **)v244;
    if (!*(void *)v244)
    {
      uint64_t v179 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v179, "Could not construct");
      __cxa_throw(v179, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    BOOL v14 = applesauce::CF::convert_to<BOOL,0>(*(const __CFNumber **)v244);
    CFRelease(v15);
    if (*(void *)__x) {
      CFRelease(*(CFTypeRef *)__x);
    }
  }
  __x[0] = v14;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)v244, 0, __x, 1.58366008e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v244 + 40), v244);
  if (*(void *)&v244[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v244[8]);
  }
  *(void *)v244 = @"DisplayRouting";
  unsigned __int16 BOOL_from = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>((CFDictionaryRef *)(v4 + 464), (const void **)v244);
  if (BOOL_from > 0xFFu
    || (*(void *)v244 = @"DisplayRouting",
        unsigned __int16 BOOL_from = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>((CFDictionaryRef *)(v4 + 480), (const void **)v244), BOOL_from >= 0x100u))
  {
    __x[0] = BOOL_from;
    AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)v244, 0, __x, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v244 + 40), v244);
    if (*(void *)&v244[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v244[8]);
    }
  }
  if (!*v8)
  {
    v156 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v156, "Could not construct");
    __cxa_throw(v156, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v233, *v8, @"IOAudioEngineClockDomain");
  if (v234) {
    goto LABEL_69;
  }
  CFDictionaryRef v17 = *(const __CFDictionary **)(v4 + 480);
  if (!v17)
  {
    unsigned int v180 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v180, "Could not construct");
    __cxa_throw(v180, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(v244, v17, @"IOAudioEngineClockDomain");
  if (v234 == v244[8])
  {
    if (v234)
    {
      CFNumberRef v18 = v233;
      CFNumberRef v233 = *(const __CFNumber **)v244;
      *(void *)v244 = v18;
    }
  }
  else if (v234)
  {
    std::__optional_destruct_base<applesauce::CF::NumberRef,false>::reset[abi:ne180100]((uint64_t)&v233);
  }
  else
  {
    CFNumberRef v233 = *(const __CFNumber **)v244;
    *(void *)v244 = 0;
    unsigned __int8 v234 = 1;
  }
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v244);
  if (v234)
  {
LABEL_69:
    if (!v233)
    {
      v168 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v168, "Could not construct");
      __cxa_throw(v168, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v20 = applesauce::CF::convert_to<unsigned int,0>(v233);
  }
  else
  {
    int v20 = 0;
  }
  *(_DWORD *)__x = v20;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v244, 0, (int *)__x, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v244 + 40), v244);
  if (*(void *)&v244[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v244[8]);
  }
  if (!*v8)
  {
    uint64_t v157 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v157, "Could not construct");
    __cxa_throw(v157, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v231, *v8, @"IOAudioEngineInputSampleLatency");
  if (v232)
  {
    if (!v231)
    {
      uint64_t v171 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v171, "Could not construct");
      __cxa_throw(v171, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v21 = applesauce::CF::convert_to<unsigned int,0>(v231);
  }
  else
  {
    int v21 = 0;
  }
  *(_DWORD *)__x = v21;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v244, 0, (int *)__x, 7.28117498e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v244 + 40), v244);
  if (*(void *)&v244[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v244[8]);
  }
  if (!*v8)
  {
    v158 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v158, "Could not construct");
    __cxa_throw(v158, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v229, *v8, @"IOAudioEngineOutputSampleLatency");
  if (v230)
  {
    if (!v229)
    {
      uint64_t v172 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v172, "Could not construct");
      __cxa_throw(v172, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v22 = applesauce::CF::convert_to<unsigned int,0>(v229);
  }
  else
  {
    int v22 = 0;
  }
  *(_DWORD *)__x = v22;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v244, 0, (int *)__x, 8.13208691e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v244 + 40), v244);
  if (*(void *)&v244[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v244[8]);
  }
  if (!*v8)
  {
    v159 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v159, "Could not construct");
    __cxa_throw(v159, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v227, *v8, @"IOAudioEngineInputSampleOffset");
  if (v228) {
    goto LABEL_98;
  }
  if (!*v8)
  {
    unsigned int v181 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v181, "Could not construct");
    __cxa_throw(v181, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(v244, *v8, @"IOAudioEngineSampleOffset");
  if (v228 == v244[8])
  {
    if (v228)
    {
      CFNumberRef v23 = v227;
      CFNumberRef v227 = *(const __CFNumber **)v244;
      *(void *)v244 = v23;
    }
  }
  else if (v228)
  {
    std::__optional_destruct_base<applesauce::CF::NumberRef,false>::reset[abi:ne180100]((uint64_t)&v227);
  }
  else
  {
    CFNumberRef v227 = *(const __CFNumber **)v244;
    *(void *)v244 = 0;
    unsigned __int8 v228 = 1;
  }
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v244);
  if (v228)
  {
LABEL_98:
    if (!v227)
    {
      v169 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v169, "Could not construct");
      __cxa_throw(v169, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v24 = applesauce::CF::convert_to<unsigned int,0>(v227);
  }
  else
  {
    int v24 = 0;
  }
  *(_DWORD *)__x = v24;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v244, 0, (int *)__x, 7.28117508e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v244 + 40), v244);
  if (*(void *)&v244[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v244[8]);
  }
  if (!*v8)
  {
    v160 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v160, "Could not construct");
    __cxa_throw(v160, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v225, *v8, @"IOAudioEngineSampleOffset");
  if (v226)
  {
    if (!v225)
    {
      v173 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v173, "Could not construct");
      __cxa_throw(v173, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v25 = applesauce::CF::convert_to<unsigned int,0>(v225);
  }
  else
  {
    int v25 = 0;
  }
  *(_DWORD *)__x = v25;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v244, 0, (int *)__x, 8.13208706e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v244 + 40), v244);
  if (*(void *)&v244[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v244[8]);
  }
  if (!*v8)
  {
    v161 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v161, "Could not construct");
    __cxa_throw(v161, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*>(&v223, *v8, @"IOAudioSampleRate");
  if (v224) {
    double sample_rate_from_dictionary = AMCP::IOAudio1::make_sample_rate_from_dictionary(v223, 0, v26);
  }
  else {
    double sample_rate_from_dictionary = 44100.0;
  }
  int v190 = v22;
  int v191 = v21;
  int v192 = v20;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&valuePtr, 0, 1.5836601e190);
  uint64_t v28 = (unsigned int *)valuePtr;
  unint64_t v29 = AMCP::Implementation::get_type_marker<std::function<double ()(void)>>();
  *(void *)__x = &unk_1F1478998;
  *(double *)&std::vector<char>::value_type __x[8] = sample_rate_from_dictionary;
  *((void *)&v255 + 1) = __x;
  memset(v244, 0, sizeof(v244));
  std::__function::__value_func<double ()(void)>::__value_func[abi:ne180100]((uint64_t)v244, (uint64_t)__x);
  *(void *)&v244[32] = AMCP::Implementation::In_Place_Storage<std::function<double ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v28, v29, (AMCP *)v244);
  if (*(void *)&v244[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v244[32])(0, v244, 0, 0);
  }
  std::__function::__value_func<double ()(void)>::~__value_func[abi:ne180100](__x);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<double>((uint64_t)v28);
  unint64_t v30 = AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>();
  *(void *)__x = &unk_1F1478B18;
  *(void *)&std::vector<char>::value_type __x[8] = v4;
  *((void *)&v255 + 1) = __x;
  memset(v244, 0, sizeof(v244));
  std::__function::__value_func<void ()(double const&)>::__value_func[abi:ne180100]((uint64_t)v244, (uint64_t)__x);
  *(void *)&v244[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(double const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v28, v30, (AMCP *)v244);
  if (*(void *)&v244[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v244[32])(0, v244, 0, 0);
  }
  std::__function::__value_func<void ()(double const&)>::~__value_func[abi:ne180100](__x);
  AMCP::Core::Operation_Utilities::add_generic_property_setter<double>((uint64_t)v28);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, v28 + 10, &valuePtr);
  if (v252) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v252);
  }
  io_connect_t connect = **(_DWORD **)(v4 + 376);
  uint64_t v31 = IOConnectAddRef(connect);
  int v188 = v25;
  int v189 = v24;
  if (v31)
  {
    uint64_t v162 = __cxa_allocate_exception(0x20uLL);
    v163 = std::system_category();
    MEMORY[0x1C1859250](v162, v31, v163, "Error on IOConnectAddRef");
    __cxa_throw(v162, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  __int16 v32 = *(const void **)(v4 + 24);
  if (v32) {
    CFRetain(*(CFTypeRef *)(v4 + 24));
  }
  v222 = v32;
  if (!*v8)
  {
    uint64_t v164 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v164, "Could not construct");
    __cxa_throw(v164, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)v244, *v8, @"IOAudioEngineNumSampleFramesPerBuffer");
  if (!*(void *)v244)
  {
    v165 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v165, "Could not construct");
    __cxa_throw(v165, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v187 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)v244);
  if (*(void *)v244) {
    CFRelease(*(CFTypeRef *)v244);
  }
  v219 = 0;
  unint64_t v220 = 0;
  v221 = 0;
  uint64_t v33 = *(void *)(v4 + 488);
  uint64_t v34 = *(void *)(v4 + 496);
  uint64_t v193 = a2;
  v209 = (CFDictionaryRef *)(v4 + 464);
  unint64_t v195 = v32;
  if (v33 == v34
    || (std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::reserve((void **)&v219, (v34 - v33) >> 3), uint64_t v35 = *(void *)(v4 + 488), v204 = *(void *)(v4 + 496), v35 == v204))
  {
    std::vector<char>::value_type v186 = 0;
  }
  else
  {
    unint64_t v184 = v4;
    LODWORD(v4) = 0;
    unint64_t v37 = v220;
    int v36 = v221;
    unsigned int v38 = v219;
    do
    {
      AMCP::IOAudio1::Device_Sub_Object::get_registry_entries((AMCP::IOAudio1::Device_Sub_Object *)__x, *(_DWORD *)(*(void *)v35 + 20));
      if (!*(void *)__x)
      {
        unint64_t v220 = v37;
        v221 = v36;
        v219 = v38;
        uint64_t v134 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v134, "Could not construct");
        __cxa_throw(v134, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)v244, *(CFDictionaryRef *)__x, @"IOAudioStreamStartingChannelNumber");
      if (!*(void *)v244)
      {
        unint64_t v220 = v37;
        v221 = v36;
        v219 = v38;
        v135 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v135, "Could not construct");
        __cxa_throw(v135, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v39 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)v244);
      if (*(void *)v244) {
        CFRelease(*(CFTypeRef *)v244);
      }
      if (!*(void *)__x)
      {
        unint64_t v220 = v37;
        v221 = v36;
        v219 = v38;
        v136 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v136, "Could not construct");
        __cxa_throw(v136, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)v244, *(CFDictionaryRef *)__x, @"IOAudioStreamID");
      if (!*(void *)v244)
      {
        unint64_t v220 = v37;
        v221 = v36;
        v219 = v38;
        unint64_t v137 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v137, "Could not construct");
        __cxa_throw(v137, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v40 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)v244);
      if (*(void *)v244) {
        CFRelease(*(CFTypeRef *)v244);
      }
      AMCP::IOAudio1::get_stream_format((AMCP::IOAudio1 *)v244, v8, *(CFDictionaryRef *)__x);
      int v41 = *(_DWORD *)&v244[8];
      int v42 = *(_DWORD *)&v244[12];
      int v43 = *(_DWORD *)&v244[16];
      int v44 = *(_DWORD *)&v244[20];
      int v45 = *(_DWORD *)&v244[24];
      int v211 = *(_DWORD *)&v244[28];
      int v46 = *(_DWORD *)&v244[32];
      int v206 = v39;
      if (*(_DWORD *)&v244[8] == 1819304813 && (v244[12] & 0x40) == 0)
      {
        int v43 = 4 * *(_DWORD *)&v244[28];
        int v46 = 32;
        int v44 = 1;
        int v42 = 9;
        int v45 = 4 * *(_DWORD *)&v244[28];
      }
      uint64_t v47 = *(void *)v244;
      int v48 = *(_DWORD *)&v244[36];
      if (v37 >= (unint64_t)v36)
      {
        int v196 = *(_DWORD *)&v244[36];
        int v198 = v45;
        int v50 = *(_DWORD *)&v244[8];
        int v200 = v46;
        unint64_t v51 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v37 - (void)v38) >> 3) + 1;
        if (v51 > 0x492492492492492)
        {
          unint64_t v220 = v37;
          v221 = v36;
          v219 = v38;
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        if (0xDB6DB6DB6DB6DB6ELL * ((v36 - v38) >> 3) > v51) {
          unint64_t v51 = 0xDB6DB6DB6DB6DB6ELL * ((v36 - v38) >> 3);
        }
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v36 - v38) >> 3)) >= 0x249249249249249) {
          unint64_t v52 = 0x492492492492492;
        }
        else {
          unint64_t v52 = v51;
        }
        uint64_t v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v52);
        uint64_t v55 = &v53[8 * ((uint64_t)(v37 - (void)v38) >> 3)];
        *(_DWORD *)uint64_t v55 = v206;
        *((_DWORD *)v55 + 1) = v40;
        *((_DWORD *)v55 + 2) = 0;
        *((void *)v55 + 2) = v47;
        *((_DWORD *)v55 + 6) = v50;
        *((_DWORD *)v55 + 7) = v42;
        *((_DWORD *)v55 + 8) = v43;
        *((_DWORD *)v55 + 9) = v44;
        int v49 = v211;
        *((_DWORD *)v55 + 10) = v198;
        *((_DWORD *)v55 + 11) = v211;
        *((_DWORD *)v55 + 12) = v200;
        *((_DWORD *)v55 + 13) = v196;
        if ((char *)v37 == v38)
        {
          int v60 = &v53[8 * ((uint64_t)(v37 - (void)v38) >> 3)];
          uint64_t v8 = v209;
        }
        else
        {
          uint64_t v56 = &v53[8 * ((uint64_t)(v37 - (void)v38) >> 3)];
          uint64_t v8 = v209;
          do
          {
            long long v57 = *(_OWORD *)(v37 - 56);
            long long v58 = *(_OWORD *)(v37 - 40);
            long long v59 = *(_OWORD *)(v37 - 24);
            int v60 = v56 - 56;
            *((void *)v56 - 1) = *(void *)(v37 - 8);
            *(_OWORD *)(v56 - 24) = v59;
            *(_OWORD *)(v56 - 40) = v58;
            *(_OWORD *)(v56 - 56) = v57;
            v37 -= 56;
            v56 -= 56;
          }
          while ((char *)v37 != v38);
        }
        int v36 = &v53[56 * v54];
        unint64_t v37 = (unint64_t)(v55 + 56);
        if (v38) {
          operator delete(v38);
        }
        unsigned int v38 = v60;
      }
      else
      {
        *(_DWORD *)unint64_t v37 = v39;
        *(_DWORD *)(v37 + 4) = v40;
        *(_DWORD *)(v37 + 8) = 0;
        *(void *)(v37 + 16) = v47;
        *(_DWORD *)(v37 + 24) = v41;
        *(_DWORD *)(v37 + 28) = v42;
        *(_DWORD *)(v37 + 32) = v43;
        *(_DWORD *)(v37 + 36) = v44;
        int v49 = v211;
        *(_DWORD *)(v37 + 40) = v45;
        *(_DWORD *)(v37 + 44) = v211;
        *(_DWORD *)(v37 + 48) = v46;
        *(_DWORD *)(v37 + 52) = v48;
        v37 += 56;
        uint64_t v8 = v209;
      }
      if (*(void *)__x) {
        CFRelease(*(CFTypeRef *)__x);
      }
      unint64_t v4 = (v49 + v4);
      v35 += 8;
    }
    while (v35 != v204);
    unint64_t v220 = v37;
    v221 = v36;
    v219 = v38;
    if (v4)
    {
      unint64_t v61 = v4;
      unint64_t v4 = v184;
      __int16 v32 = v195;
      if (!*v8)
      {
        v182 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v182, "Could not construct");
        __cxa_throw(v182, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      CFArrayRef v62 = CFArrayCreate(0, 0, 0, MEMORY[0x1E4F1D518]);
      applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)v244, v62);
      applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&v216, *v8, @"IOAudioEngineOutputChannelLayout", v244);
      if (*(void *)v244) {
        CFRelease(*(CFTypeRef *)v244);
      }
      __x[0] = 0;
      std::vector<char>::vector((std::vector<char> *)v244, 20 * v61 + 12, __x);
      uint64_t v63 = *(void *)v244;
      **(void **)v244 = 0;
      *(_DWORD *)(v63 + 8) = v61;
      if (v61 > (*(void *)&v244[8] - v63 - 12) / 0x14uLL) {
        __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
      }
      uint64_t v64 = 0;
      unint64_t v65 = 0;
      CFArrayRef v66 = v216;
      do
      {
        if (!v66)
        {
          v142 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v142, "Could not construct");
          __cxa_throw(v142, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(v214) = -1;
        uint64_t valuePtr = (uint64_t)CFNumberCreate(0, kCFNumberIntType, &v214);
        if (!valuePtr)
        {
          uint64_t v143 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v143, "Could not construct");
          __cxa_throw(v143, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef>(__x, v66, v65, &valuePtr);
        if (!*(void *)__x)
        {
          int v144 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v144, "Could not construct");
          __cxa_throw(v144, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        int v67 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)__x);
        unint64_t v68 = *(unsigned int *)(*(void *)v244 + 8);
        if (v68 > (*(void *)&v244[8] - *(void *)v244 - 12) / 0x14uLL) {
          __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
        }
        if (v65 >= v68)
        {
          v145 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v145, "accessing a CA::ChannelLayout with an out-of-range index");
          v145->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
          __cxa_throw(v145, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
        }
        *(_DWORD *)(*(void *)v244 + v64 + 12) = v67;
        if (*(void *)__x) {
          CFRelease(*(CFTypeRef *)__x);
        }
        if (valuePtr) {
          CFRelease((CFTypeRef)valuePtr);
        }
        unint64_t v69 = *(unsigned int *)(*(void *)v244 + 8);
        if (v69 > (*(void *)&v244[8] - *(void *)v244 - 12) / 0x14uLL) {
          __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
        }
        if (v65 >= v69)
        {
          v146 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v146, "accessing a CA::ChannelLayout with an out-of-range index");
          v146->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
          __cxa_throw(v146, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
        }
        uint64_t v70 = *(void *)v244 + v64;
        ++v65;
        *(void *)(v70 + 16) = 0;
        *(void *)(v70 + 24) = 0;
        v64 += 20;
      }
      while (v65 < v69);
      uint64_t valuePtr = 0x6F75747073726E64;
      LODWORD(v252) = 0;
      AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>((uint64_t *)__x, (uint64_t)&valuePtr, *(const void **)v244, *(uint64_t *)&v244[8]);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v193, (unsigned int *)(*(void *)__x + 40), __x);
      if (*(void *)&__x[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__x[8]);
      }
      if (*(void *)v244)
      {
        *(void *)&v244[8] = *(void *)v244;
        operator delete(*(void **)v244);
      }
      CFRelease(v66);
      std::vector<char>::value_type v186 = 1;
    }
    else
    {
      std::vector<char>::value_type v186 = 0;
      unint64_t v4 = v184;
      __int16 v32 = v195;
    }
  }
  CFArrayRef v216 = 0;
  unint64_t v217 = 0;
  v218 = 0;
  uint64_t v71 = *(void *)(v4 + 512);
  uint64_t v72 = *(void *)(v4 + 520);
  if (v71 == v72)
  {
    char v108 = 0;
    goto LABEL_244;
  }
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::reserve((void **)&v216, (v72 - v71) >> 3);
  uint64_t v73 = *(void *)(v4 + 512);
  uint64_t v207 = *(void *)(v4 + 520);
  if (v73 == v207)
  {
    char v108 = 0;
LABEL_243:
    __int16 v32 = v195;
    goto LABEL_244;
  }
  unint64_t v185 = v4;
  LODWORD(v4) = 0;
  unint64_t v74 = v217;
  uint64_t v75 = v218;
  CFArrayRef v76 = v216;
  do
  {
    AMCP::IOAudio1::Device_Sub_Object::get_registry_entries((AMCP::IOAudio1::Device_Sub_Object *)__x, *(_DWORD *)(*(void *)v73 + 20));
    if (!*(void *)__x)
    {
      unint64_t v217 = v74;
      v218 = v75;
      CFArrayRef v216 = v76;
      v138 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v138, "Could not construct");
      __cxa_throw(v138, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)v244, *(CFDictionaryRef *)__x, @"IOAudioStreamStartingChannelNumber");
    if (!*(void *)v244)
    {
      unint64_t v217 = v74;
      v218 = v75;
      CFArrayRef v216 = v76;
      unint64_t v139 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v139, "Could not construct");
      __cxa_throw(v139, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v77 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)v244);
    if (*(void *)v244) {
      CFRelease(*(CFTypeRef *)v244);
    }
    if (!*(void *)__x)
    {
      unint64_t v217 = v74;
      v218 = v75;
      CFArrayRef v216 = v76;
      v140 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v140, "Could not construct");
      __cxa_throw(v140, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)v244, *(CFDictionaryRef *)__x, @"IOAudioStreamID");
    if (!*(void *)v244)
    {
      unint64_t v217 = v74;
      v218 = v75;
      CFArrayRef v216 = v76;
      uint64_t v141 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v141, "Could not construct");
      __cxa_throw(v141, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v78 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)v244);
    if (*(void *)v244) {
      CFRelease(*(CFTypeRef *)v244);
    }
    AMCP::IOAudio1::get_stream_format((AMCP::IOAudio1 *)v244, v8, *(CFDictionaryRef *)__x);
    int v79 = *(_DWORD *)&v244[8];
    int v80 = *(_DWORD *)&v244[12];
    int v81 = *(_DWORD *)&v244[16];
    int v82 = *(_DWORD *)&v244[20];
    int v83 = *(_DWORD *)&v244[24];
    int v84 = *(_DWORD *)&v244[28];
    int v85 = *(_DWORD *)&v244[32];
    if (*(_DWORD *)&v244[8] == 1819304813 && (v244[12] & 0x40) == 0)
    {
      int v83 = 4 * *(_DWORD *)&v244[28];
      int v80 = 9;
      int v82 = 1;
      int v85 = 32;
      int v81 = 4 * *(_DWORD *)&v244[28];
    }
    uint64_t v86 = *(void *)v244;
    int v87 = *(_DWORD *)&v244[36];
    int v212 = *(_DWORD *)&v244[28];
    if (v74 >= (unint64_t)v75)
    {
      int v197 = *(_DWORD *)&v244[36];
      int v199 = v81;
      int v201 = v85;
      int v202 = v83;
      unint64_t v88 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v74 - (void)v76) >> 3) + 1;
      if (v88 > 0x492492492492492)
      {
        unint64_t v217 = v74;
        v218 = v75;
        CFArrayRef v216 = v76;
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      if (0xDB6DB6DB6DB6DB6ELL * ((v75 - (char *)v76) >> 3) > v88) {
        unint64_t v88 = 0xDB6DB6DB6DB6DB6ELL * ((v75 - (char *)v76) >> 3);
      }
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v75 - (char *)v76) >> 3)) >= 0x249249249249249) {
        unint64_t v89 = 0x492492492492492;
      }
      else {
        unint64_t v89 = v88;
      }
      long long v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v89);
      uint64_t v92 = &v90[8 * ((uint64_t)(v74 - (void)v76) >> 3)];
      *(_DWORD *)uint64_t v92 = v77;
      *((_DWORD *)v92 + 1) = v78;
      *((_DWORD *)v92 + 2) = 0;
      *((void *)v92 + 2) = v86;
      *((_DWORD *)v92 + 6) = v79;
      *((_DWORD *)v92 + 7) = v80;
      *((_DWORD *)v92 + 8) = v199;
      *((_DWORD *)v92 + 9) = v82;
      *((_DWORD *)v92 + 10) = v202;
      *((_DWORD *)v92 + 11) = v212;
      *((_DWORD *)v92 + 12) = v201;
      *((_DWORD *)v92 + 13) = v197;
      if ((const __CFArray *)v74 == v76)
      {
        int v97 = &v90[8 * ((uint64_t)(v74 - (void)v76) >> 3)];
        uint64_t v8 = v209;
      }
      else
      {
        long long v93 = &v90[8 * ((uint64_t)(v74 - (void)v76) >> 3)];
        uint64_t v8 = v209;
        do
        {
          long long v94 = *(_OWORD *)(v74 - 56);
          long long v95 = *(_OWORD *)(v74 - 40);
          long long v96 = *(_OWORD *)(v74 - 24);
          int v97 = v93 - 56;
          *((void *)v93 - 1) = *(void *)(v74 - 8);
          *(_OWORD *)(v93 - 24) = v96;
          *(_OWORD *)(v93 - 40) = v95;
          *(_OWORD *)(v93 - 56) = v94;
          v74 -= 56;
          v93 -= 56;
        }
        while ((const __CFArray *)v74 != v76);
      }
      uint64_t v75 = &v90[56 * v91];
      unint64_t v74 = (unint64_t)(v92 + 56);
      if (v76) {
        operator delete(v76);
      }
      CFArrayRef v76 = (const __CFArray *)v97;
    }
    else
    {
      *(_DWORD *)unint64_t v74 = v77;
      *(_DWORD *)(v74 + 4) = v78;
      *(_DWORD *)(v74 + 8) = 0;
      *(void *)(v74 + 16) = v86;
      *(_DWORD *)(v74 + 24) = v79;
      *(_DWORD *)(v74 + 28) = v80;
      *(_DWORD *)(v74 + 32) = v81;
      *(_DWORD *)(v74 + 36) = v82;
      *(_DWORD *)(v74 + 40) = v83;
      *(_DWORD *)(v74 + 44) = v84;
      *(_DWORD *)(v74 + 48) = v85;
      *(_DWORD *)(v74 + 52) = v87;
      v74 += 56;
      uint64_t v8 = v209;
    }
    if (*(void *)__x) {
      CFRelease(*(CFTypeRef *)__x);
    }
    unint64_t v4 = (v212 + v4);
    v73 += 8;
  }
  while (v73 != v207);
  unint64_t v217 = v74;
  v218 = v75;
  CFArrayRef v216 = v76;
  if (!v4)
  {
    char v108 = 0;
    unint64_t v4 = v185;
    goto LABEL_243;
  }
  unint64_t v98 = v4;
  unint64_t v4 = v185;
  __int16 v32 = v195;
  if (!*v8)
  {
    v183 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v183, "Could not construct");
    __cxa_throw(v183, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFArrayRef v99 = CFArrayCreate(0, 0, 0, MEMORY[0x1E4F1D518]);
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)v244, v99);
  applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&v214, *v8, @"IOAudioEngineInputChannelLayout", v244);
  if (*(void *)v244) {
    CFRelease(*(CFTypeRef *)v244);
  }
  __x[0] = 0;
  std::vector<char>::vector((std::vector<char> *)v244, 20 * v98 + 12, __x);
  uint64_t v100 = *(void *)v244;
  **(void **)v244 = 0;
  *(_DWORD *)(v100 + 8) = v98;
  if (v98 > (*(void *)&v244[8] - v100 - 12) / 0x14uLL) {
    __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
  }
  uint64_t v101 = 0;
  unint64_t v102 = 0;
  CFArrayRef v103 = v214;
  do
  {
    if (!v103)
    {
      v147 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v147, "Could not construct");
      __cxa_throw(v147, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v243 = -1;
    uint64_t valuePtr = (uint64_t)CFNumberCreate(0, kCFNumberIntType, &v243);
    if (!valuePtr)
    {
      v148 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v148, "Could not construct");
      __cxa_throw(v148, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef>(__x, v103, v102, &valuePtr);
    if (!*(void *)__x)
    {
      int v149 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v149, "Could not construct");
      __cxa_throw(v149, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v104 = applesauce::CF::convert_to<unsigned int,0>(*(const __CFNumber **)__x);
    unint64_t v105 = *(unsigned int *)(*(void *)v244 + 8);
    if (v105 > (*(void *)&v244[8] - *(void *)v244 - 12) / 0x14uLL) {
      __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
    }
    if (v102 >= v105)
    {
      char v150 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v150, "accessing a CA::ChannelLayout with an out-of-range index");
      v150->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
      __cxa_throw(v150, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
    }
    *(_DWORD *)(*(void *)v244 + v101 + 12) = v104;
    if (*(void *)__x) {
      CFRelease(*(CFTypeRef *)__x);
    }
    if (valuePtr) {
      CFRelease((CFTypeRef)valuePtr);
    }
    unint64_t v106 = *(unsigned int *)(*(void *)v244 + 8);
    if (v106 > (*(void *)&v244[8] - *(void *)v244 - 12) / 0x14uLL) {
      __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
    }
    if (v102 >= v106)
    {
      v151 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v151, "accessing a CA::ChannelLayout with an out-of-range index");
      v151->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
      __cxa_throw(v151, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
    }
    uint64_t v107 = *(void *)v244 + v101;
    ++v102;
    *(void *)(v107 + 16) = 0;
    *(void *)(v107 + 24) = 0;
    v101 += 20;
  }
  while (v102 < v106);
  uint64_t valuePtr = 0x696E707473726E64;
  LODWORD(v252) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<CA::ChannelLayout>((uint64_t *)__x, (uint64_t)&valuePtr, *(const void **)v244, *(uint64_t *)&v244[8]);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v193, (unsigned int *)(*(void *)__x + 40), __x);
  if (*(void *)&__x[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__x[8]);
  }
  if (*(void *)v244)
  {
    *(void *)&v244[8] = *(void *)v244;
    operator delete(*(void **)v244);
  }
  CFRelease(v103);
  char v108 = 1;
LABEL_244:
  *(void *)v244 = @"IOAudioEngineUseHiResSampleInterval";
  unsigned __int16 v109 = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(v8, (const void **)v244);
  if ((_BYTE)v109) {
    BOOL v110 = v109 > 0xFFu;
  }
  else {
    BOOL v110 = 0;
  }
  char v111 = v110;
  *(void *)v244 = @"AllowDisplaySleep";
  unsigned __int16 v112 = AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(v8, (const void **)v244);
  if ((_BYTE)v112) {
    BOOL v113 = 0;
  }
  else {
    BOOL v113 = v112 > 0xFFu;
  }
  char v114 = v113;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v214, 0, 1.58366007e190);
  uint64_t v115 = (uint64_t)v214;
  uint64_t v116 = *(void *)(v4 + 16);
  uint64_t v118 = *(void *)(v116 + 32);
  uint64_t v117 = *(void *)(v116 + 40);
  *(void *)v244 = v4 + 560;
  *(void *)&v244[8] = v118;
  *(void *)&v244[16] = v117;
  if (v117) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v117 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)&v244[24] = connect;
  uint64_t v119 = IOConnectAddRef(connect);
  if (v119)
  {
    v166 = __cxa_allocate_exception(0x20uLL);
    int v167 = std::system_category();
    MEMORY[0x1C1859250](v166, v119, v167, "Error on IOConnectAddRef");
    __cxa_throw(v166, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  if (v32) {
    CFRetain(v32);
  }
  *(void *)&v244[32] = v32;
  LOBYTE(v245) = v111;
  *((double *)&v245 + 1) = sample_rate_from_dictionary;
  v246[0] = v114;
  *(_DWORD *)&v246[4] = v187;
  *(_DWORD *)&v246[8] = v192;
  *(_DWORD *)&v246[12] = v189;
  *(_DWORD *)&v246[16] = v188;
  *(_DWORD *)&v246[20] = v191;
  *(_DWORD *)&v246[24] = v190;
  uint64_t v248 = 0;
  long long v247 = 0uLL;
  CFArrayRef v203 = v216;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(&v247, v216, v217, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v217 - (void)v216) >> 3));
  std::vector<char>::value_type v205 = v108;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v250 = 0;
  unint64_t v120 = v219;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(__p, v219, v220, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v220 - (void)v219) >> 3));
  unint64_t v121 = AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>();
  long long v122 = *(_OWORD *)v244;
  uint64_t v123 = *(void *)&v244[16];
  memset(&v244[8], 0, 20);
  int v124 = *(_DWORD *)&v244[24];
  long long v210 = v247;
  long long v213 = v122;
  uint64_t v125 = *(void *)&v244[32];
  uint64_t v126 = v248;
  *(void *)&v244[32] = 0;
  uint64_t v248 = 0;
  long long v247 = 0uLL;
  long long v208 = *(_OWORD *)__p;
  uint64_t v127 = v250;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v250 = 0;
  v253 = 0;
  v128 = (char *)operator new(0x90uLL);
  *(void *)v128 = &unk_1F1478ED8;
  *(_OWORD *)(v128 + 8) = v213;
  *((void *)v128 + 3) = v123;
  *((_DWORD *)v128 + 8) = v124;
  *((void *)v128 + 5) = v125;
  long long v129 = *(_OWORD *)v246;
  *((_OWORD *)v128 + 3) = v245;
  *((_OWORD *)v128 + 4) = v129;
  *(_OWORD *)(v128 + 76) = *(_OWORD *)&v246[12];
  *((_OWORD *)v128 + 6) = v210;
  *((void *)v128 + 14) = v126;
  *(_OWORD *)(v128 + 120) = v208;
  *((void *)v128 + 17) = v127;
  v253 = v128;
  *(_OWORD *)__x = 0u;
  long long v255 = 0u;
  v256 = 0;
  std::__function::__value_func<std::shared_ptr<AMCP::Core::Engine> ()(void)>::__value_func[abi:ne180100]((uint64_t)__x, (uint64_t)&valuePtr);
  v256 = AMCP::Implementation::In_Place_Storage<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v115, v121, (AMCP *)__x);
  if (v256) {
    v256(0, (uint64_t)__x, 0, 0);
  }
  std::__function::__value_func<std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__value_func[abi:ne180100](&valuePtr);
  IOConnectRelease(0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((void)v247)
  {
    *((void *)&v247 + 1) = v247;
    operator delete((void *)v247);
  }
  if (*(void *)&v244[32]) {
    CFRelease(*(CFTypeRef *)&v244[32]);
  }
  IOConnectRelease(*(io_connect_t *)&v244[24]);
  if (*(void *)&v244[16]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v244[16]);
  }
  __x[0] = v205;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)v244, 0, __x, 7.28117486e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v193, (unsigned int *)(*(void *)v244 + 40), v244);
  if (*(void *)&v244[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v244[8]);
  }
  __x[0] = v186;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)v244, 0, __x, 8.13208672e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v193, (unsigned int *)(*(void *)v244 + 40), v244);
  if (*(void *)&v244[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v244[8]);
  }
  __x[0] = v186;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)v244, 0, __x, 8.13208706e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v193, (unsigned int *)(*(void *)v244 + 40), v244);
  if (*(void *)&v244[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v244[8]);
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(v193, (unsigned int *)(v115 + 40), &v214);
  if (v215) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v215);
  }
  if (v203) {
    operator delete(v203);
  }
  if (v120) {
    operator delete(v120);
  }
  if (v195) {
    CFRelease(v195);
  }
  IOConnectRelease(connect);
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v223);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v225);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v227);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v229);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v231);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v233);
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v235);
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v239);
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v241);
}

void sub_1BAE1DA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
}

void *std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_2,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_2>,void ()(applesauce::CF::DictionaryRef const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_2,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_2>,void ()(applesauce::CF::DictionaryRef const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16Device10build_coreEvE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_2,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_2>,void ()(applesauce::CF::DictionaryRef const&)>::operator()(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!*(_DWORD *)(v2 + 360))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
    goto LABEL_10;
  }
  CFStringRef v4 = CFStringCreateWithBytes(0, (const UInt8 *)"IOAudioEngineClientDescription", 30, 0x8000100u, 0);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_10:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v5 = v4;
  CFTypeRef v6 = *a2;
  if (v6) {
    CFRetain(v6);
  }
  uint64_t v8 = v6;
  applesauce::iokit::io_object_proxy::set_properties(*(_DWORD *)(v2 + 360), v5, &v8);
  if (v6) {
    CFRelease(v6);
  }
  CFRelease(v5);
}

void sub_1BAE1E2DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_2,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_2>,void ()(applesauce::CF::DictionaryRef const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1479540;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_2,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_2>,void ()(applesauce::CF::DictionaryRef const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F1479540;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_2,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_2>,void ()(applesauce::CF::DictionaryRef const&)>::~__func()
{
}

void *std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_1,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_1>,applesauce::CF::DictionaryRef ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_1,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_1>,applesauce::CF::DictionaryRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16Device10build_coreEvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_1,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_1>,applesauce::CF::DictionaryRef ()(void)>::operator()(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *a2 = 0;
  io_registry_entry_t v4 = *(_DWORD *)(v3 + 360);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v4, @"IOAudioEngineClientDescription", 0, 0);
  if (CFProperty)
  {
    CFTypeRef v6 = CFProperty;
    CFTypeID v7 = CFGetTypeID(CFProperty);
    if (v7 == CFDictionaryGetTypeID())
    {
      applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v9, v6);
      *a2 = v9;
    }
    else
    {
      CFRelease(v6);
    }
  }
}

void sub_1BAE1E4C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_1,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_1>,applesauce::CF::DictionaryRef ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1479450;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_1,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_1>,applesauce::CF::DictionaryRef ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F1479450;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_1,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_1>,applesauce::CF::DictionaryRef ()(void)>::~__func()
{
}

const void **AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}::~Address(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyIN10applesauce2CF13DictionaryRefEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

CFTypeRef std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::operator()@<X0>(CFTypeRef result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if (v3) {
    uint64_t result = CFRetain(*((CFTypeRef *)result + 1));
  }
  *a2 = v3;
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::destroy_deallocate(const void **a1)
{
  std::__function::__alloc_func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::destroy[abi:ne180100](a1[1]);

  operator delete(a1);
}

void std::__function::__alloc_func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::destroy[abi:ne180100](const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::destroy(uint64_t a1)
{
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1479340;
  return std::__compressed_pair_elem<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1} const&,0ul>(a2 + 1, (CFTypeRef *)(a1 + 8));
}

void *std::__compressed_pair_elem<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1} const&,0ul>(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *a1 = v3;
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = (CFTypeRef *)(a1 + 8);
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_1F1479340;
  std::__compressed_pair_elem<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1} const&,0ul>(v2 + 1, v1);
  return v2;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1479340;
  uint64_t v1 = (const void *)a1[1];
  if (v1) {
    CFRelease(v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,applesauce::CF::DictionaryRef const&)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1479340;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t AMCP::CF::fetch_BOOL_from_dictionary<__CFString const*>(CFDictionaryRef *a1, const void **a2)
{
  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::BooleanRef,__CFString const*>(&v13, *a1, *a2);
  if (v14)
  {
    if (!v13)
    {
      uint64_t v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v8, "Could not construct");
      __cxa_throw(v8, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    BOOL v4 = applesauce::CF::convert_to<BOOL,0>(v13);
    int v5 = 1;
  }
  else
  {
    if (!*a1)
    {
      uint64_t v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v9, "Could not construct");
      __cxa_throw(v9, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v11, *a1, *a2);
    if (v12)
    {
      if (!v11)
      {
        CFTypeRef v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v10, "Could not construct");
        __cxa_throw(v10, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      BOOL v4 = applesauce::CF::convert_to<BOOL,0>(v11);
      int v5 = 1;
    }
    else
    {
      BOOL v4 = 0;
      int v5 = 0;
    }
    std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v11);
  }
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v13);
  return v4 | (v5 << 8);
}

void sub_1BAE1E998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_free_exception(v11);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a9);
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

applesauce::CF::DictionaryRef *AMCP::IOAudio1::Device_Sub_Object::get_registry_entries(AMCP::IOAudio1::Device_Sub_Object *this, io_registry_entry_t a2)
{
  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    CFTypeRef v6 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
    std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
    CFTypeID v7 = (struct type_info *)MEMORY[0x1E4FBA338];
    goto LABEL_6;
  }
  CFMutableDictionaryRef properties = 0;
  uint64_t v3 = IORegistryEntryCreateCFProperties(a2, &properties, 0, 0);
  if (v3)
  {
    uint64_t v8 = v3;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    CFTypeRef v6 = (void (*)(void *))MEMORY[0x1E4FBA220];
    uint64_t v9 = std::system_category();
    MEMORY[0x1C1859250](exception, v8, v9, "Error on get_properties");
    CFTypeID v7 = (struct type_info *)MEMORY[0x1E4FBA2F0];
LABEL_6:
    __cxa_throw(exception, v7, v6);
  }
  return applesauce::CF::DictionaryRef::DictionaryRef(this, properties);
}

void sub_1BAE1EADC(void *a1)
{
  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

void *std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16Device18update_core_commonERNS_4Core13Operation_SetEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::operator()(uint64_t a1)
{
  v20[4] = *MEMORY[0x1E4F143B8];
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v19, *(dispatch_object_t *)(*(void *)(*(void *)(a1 + 16) + 32) + 672));
  uint64_t v2 = (char *)operator new(0x338uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_1F1478F48;
  uint64_t v3 = IOConnectAddRef(*(_DWORD *)(a1 + 32));
  if (!v3)
  {
    CFStringRef v4 = *(const __CFString **)(a1 + 40);
    if (v4) {
      CFRetain(*(CFTypeRef *)(a1 + 40));
    }
    CFStringRef v14 = v4;
    uint64_t v5 = *(void *)(a1 + 56);
    int v6 = *(unsigned __int8 *)(a1 + 64);
    uint64_t v13 = *(void *)(a1 + 68);
    long long v12 = *(_OWORD *)(a1 + 76);
    *((void *)v2 + 4) = 0;
    *((void *)v2 + 5) = 0;
    *((void *)v2 + 3) = &unk_1F1464068;
    if (v4) {
      CFRetain(v4);
    }
    long long v17 = 0uLL;
    uint64_t v18 = 0;
    std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(&v17, *(const void **)(a1 + 96), *(void *)(a1 + 104), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3));
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(&v15, *(const void **)(a1 + 120), *(void *)(a1 + 128), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 3));
    *((void *)v2 + 6) = v4;
    *((void *)v2 + 7) = v5;
    *((void *)v2 + 8) = v13;
    v2[72] = 0;
    *(_OWORD *)(v2 + 76) = v12;
    *((_OWORD *)v2 + 6) = v17;
    *((void *)v2 + 14) = v18;
    long long v17 = 0uLL;
    uint64_t v18 = 0;
    *(_OWORD *)(v2 + 120) = v15;
    *((void *)v2 + 17) = v16;
    unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 3);
    uint64_t v8 = (uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 3;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    AMCP::Core::Implementation::Simple_Engine_IO_State::Simple_Engine_IO_State((AMCP::Core::Implementation::Simple_Engine_IO_State *)(v2 + 144), &v14, v7, 0x6DB6DB6DB6DB6DB7 * v8, v6 != 0, v19, v9);
    v20[0] = &unk_1F1464220;
    v20[1] = v2 + 24;
    v20[3] = v20;
    AMCP::IO_Clock::IO_Clock((uint64_t)(v2 + 584));
  }
  exception = __cxa_allocate_exception(0x20uLL);
  CFNumberRef v11 = std::system_category();
  MEMORY[0x1C1859250](exception, v3, v11, "Error on IOConnectAddRef");
  __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
}

void sub_1BAE1EF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  *(void *)(v25 - 176) = v23 + 792;
  std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 176));
  *(void *)(v25 - 176) = v23 + 768;
  std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 176));
  uint64_t v27 = *(unsigned int **)(v23 + 752);
  *(void *)(v23 + 752) = 0;
  if (v27) {
    std::default_delete<applesauce::iokit::mapped_memory>::operator()[abi:ne180100](v27);
  }
  IOConnectRelease(*(_DWORD *)(v23 + 748));
  AMCP::IO_Clock::~IO_Clock(v24);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(v23 + 264));
  uint64_t v28 = *(std::__shared_weak_count **)(v23 + 256);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  unint64_t v29 = *(std::__shared_weak_count **)(v23 + 240);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  unint64_t v30 = *(void **)(v23 + 200);
  if (v30) {
    operator delete(v30);
  }
  uint64_t v31 = *(void **)(v23 + 168);
  if (v31) {
    operator delete(v31);
  }
  __int16 v32 = *(void **)(v23 + 120);
  if (v32)
  {
    *(void *)(v23 + 128) = v32;
    operator delete(v32);
  }
  uint64_t v33 = *(void **)(v23 + 96);
  if (v33)
  {
    *(void *)(v23 + 104) = v33;
    operator delete(v33);
  }
  uint64_t v34 = *(const void **)(v23 + 48);
  if (v34) {
    CFRelease(v34);
  }
  uint64_t v35 = *(std::__shared_weak_count **)(v23 + 40);
  if (v35) {
    std::__shared_weak_count::__release_weak(v35);
  }
  applesauce::CF::StringRef::~StringRef(&a14);
  IOConnectRelease(0);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v23);
  operator delete(v36);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a23);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<AMCP::IOAudio1::Engine>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::IOAudio1::Engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1478F48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::IOAudio1::Engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1478F48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(void *)(a1 + 120) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 88);
  if (v3)
  {
    *(void *)(a1 + 96) = v3;
    operator delete(v3);
  }
  CFStringRef v4 = *(const void **)(a1 + 32);
  if (v4) {
    CFRelease(v4);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 24));
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1478ED8;
  return std::__compressed_pair_elem<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2 const&,0ul>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  io_connect_t v5 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 24) = v5;
  uint64_t v6 = IOConnectAddRef(v5);
  if (v6)
  {
    uint64_t v12 = v6;
    exception = __cxa_allocate_exception(0x20uLL);
    CFStringRef v14 = std::system_category();
    MEMORY[0x1C1859250](exception, v12, v14, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  uint64_t v7 = *(void *)(a2 + 32);
  if (v7) {
    CFRetain(*(CFTypeRef *)(a2 + 32));
  }
  *(void *)(a1 + 32) = v7;
  long long v8 = *(_OWORD *)(a2 + 40);
  long long v9 = *(_OWORD *)(a2 + 56);
  long long v10 = *(_OWORD *)(a2 + 68);
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 68) = v10;
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 56) = v9;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>((void *)(a1 + 88), *(const void **)(a2 + 88), *(void *)(a2 + 96), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 3));
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>((void *)(a1 + 112), *(const void **)(a2 + 112), *(void *)(a2 + 120), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3));
  return a1;
}

void sub_1BAE1F398(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x90uLL);
  void *v2 = &unk_1F1478ED8;
  std::__compressed_pair_elem<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BAE1F454(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1478ED8;
  uint64_t v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(void *)(a1 + 128) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 40);
  if (v4) {
    CFRelease(v4);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 32));
  io_connect_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1478ED8;
  uint64_t v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(void *)(a1 + 128) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 96);
  if (v3)
  {
    *(void *)(a1 + 104) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 40);
  if (v4) {
    CFRelease(v4);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 32));
  io_connect_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return a1;
}

void *std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,void ()(double const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,void ()(double const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16Device18update_core_commonERNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,void ()(double const&)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(std::__shared_mutex_base **)(*(void *)(*(void *)(v3 + 16) + 32) + 16);
  uint64_t v16 = &unk_1F1478B98;
  uint64_t v17 = v3;
  io_object_t v19 = &v16;
  AMCP::Core::Broker::fetch_first_core_if (&v10, v4, (uint64_t)&v16);
  std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](&v16);
  io_connect_t v5 = v10;
  if (v10)
  {
    AMCP::Core::Core::get_simple_required_property<1718444404u>((uint64_t)&v9, v10);
    if (*(double *)&v9 != *(double *)a2)
    {
      *(void *)&long long v9 = *a2;
      uint64_t v14 = 0x676C6F62666D6174;
      int v15 = 0;
      if (AMCP::Core::Core::is_property_settable((int8x8_t *)v5, (const AMCP::Address *)&v14))
      {
        AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v12, (int8x8_t *)v5, (unsigned int *)&v14);
        uint64_t v6 = v12;
        if (v12)
        {
          unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<void ()(CA::StreamDescription const&)>>();
          if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v7))
          {
            AMCP::Core::Operation::call_function<void,CA::StreamDescription const&>(v6, (uint64_t)&v9);
          }
          else
          {
            unint64_t v8 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
            if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v8))
            {
              uint64_t v17 = 0;
              uint64_t v18 = 0;
              io_object_t v19 = 0;
              int v20 = AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
              operator new();
            }
          }
        }
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
      }
    }
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1BAE1F798(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAE1F7B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a2)
  {
    int v20 = *(void (**)(void, uint64_t, void, void))(v18 - 32);
    if (v20) {
      v20(0, v18 - 64, 0, 0);
    }
    if (a18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a18);
    }
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAE1F6DCLL);
  }
  JUMPOUT(0x1BAE1F7A0);
}

void *_ZNKSt3__110__function6__funcIZZN4AMCP8IOAudio16Device18update_core_commonERNS2_4Core13Operation_SetEENK3__0clERKdEUlRKT_E_NS_9allocatorISE_EEFbRKNS_10shared_ptrINS5_4CoreEEEEE11target_typeEv()
{
  return &_ZTIZZN4AMCP8IOAudio16Device18update_core_commonERNS_4Core13Operation_SetEENK3__0clERKdEUlRKT_E_;
}

uint64_t _ZNKSt3__110__function6__funcIZZN4AMCP8IOAudio16Device18update_core_commonERNS2_4Core13Operation_SetEENK3__0clERKdEUlRKT_E_NS_9allocatorISE_EEFbRKNS_10shared_ptrINS5_4CoreEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN4AMCP8IOAudio16Device18update_core_commonERNS_4Core13Operation_SetEENK3$_0clERKdEUlRKT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZZN4AMCP8IOAudio16Device18update_core_commonERNS2_4Core13Operation_SetEENK3__0clERKdEUlRKT_E_NS_9allocatorISE_EEFbRKNS_10shared_ptrINS5_4CoreEEEEEclESL_(uint64_t a1, AMCP::Core::Core **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int simple_required = AMCP::Core::Core::get_simple_required_property<1870098034u>(*a2);
  int v5 = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  return *(_DWORD *)(v3 + 32) == simple_required && v5 == 1634956402;
}

uint64_t _ZNKSt3__110__function6__funcIZZN4AMCP8IOAudio16Device18update_core_commonERNS2_4Core13Operation_SetEENK3__0clERKdEUlRKT_E_NS_9allocatorISE_EEFbRKNS_10shared_ptrINS5_4CoreEEEEE7__cloneEPNS0_6__baseISM_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1478B98;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZZN4AMCP8IOAudio16Device18update_core_commonERNS2_4Core13Operation_SetEENK3__0clERKdEUlRKT_E_NS_9allocatorISE_EEFbRKNS_10shared_ptrINS5_4CoreEEEEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F1478B98;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZZN4AMCP8IOAudio16Device18update_core_commonERNS2_4Core13Operation_SetEENK3__0clERKdEUlRKT_E_NS_9allocatorISE_EEFbRKNS_10shared_ptrINS5_4CoreEEEEED0Ev()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,void ()(double const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1478B18;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,void ()(double const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F1478B18;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,void ()(double const&)>::~__func()
{
}

void *std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,double ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,double ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16Device18update_core_commonERNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,double ()(void)>::operator()(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,double ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1478998;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,double ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F1478998;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio1::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,double ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_0,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_0>,CA::ValueRangeList ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_0,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_0>,CA::ValueRangeList ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16Device10build_coreEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_0,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_0>,CA::ValueRangeList ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(double ***)(a1 + 8);
  uint64_t v4 = *(std::__shared_mutex_base **)(*((void *)v3[2] + 4) + 16);
  uint64_t v12 = (double **)&unk_1F1479080;
  uint64_t v13 = v3;
  uint64_t v14 = (void **)&v12;
  AMCP::Core::Broker::fetch_first_core_if (&v9, v4, (uint64_t)&v12);
  std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](&v12);
  AMCP::Core::Core::get_simple_required_property<1718449187u>(&v12, v9);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  int v5 = v12;
  uint64_t v6 = v13;
  while (v5 != v6)
  {
    unint64_t v7 = *v5;
    unint64_t v8 = v5[1];
    while (v7 != v8)
    {
      CA::ValueRangeList::AddRange((double **)a2, v7);
      v7 += 2;
    }
    v5 += 8;
  }
  CFNumberRef v11 = &v12;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1BAE1FC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, void **a11, char a12)
{
  uint64_t v14 = *(void **)v12;
  if (*(void *)v12)
  {
    *(void *)(v12 + 8) = v14;
    operator delete(v14);
  }
  a11 = (void **)&a12;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&a11);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void *_ZNKSt3__110__function6__funcIZZN4AMCP8IOAudio16Device10build_coreEvENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE11target_typeEv()
{
  return &_ZTIZZN4AMCP8IOAudio16Device10build_coreEvENK3__0clEvEUlRKT_E_;
}

uint64_t _ZNKSt3__110__function6__funcIZZN4AMCP8IOAudio16Device10build_coreEvENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN4AMCP8IOAudio16Device10build_coreEvENK3$_0clEvEUlRKT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZZN4AMCP8IOAudio16Device10build_coreEvENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEEclESH_(uint64_t a1, AMCP::Core::Core **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int simple_required = AMCP::Core::Core::get_simple_required_property<1870098034u>(*a2);
  int v5 = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  return *(_DWORD *)(v3 + 32) == simple_required && v5 == 1634956402;
}

uint64_t _ZNKSt3__110__function6__funcIZZN4AMCP8IOAudio16Device10build_coreEvENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE7__cloneEPNS0_6__baseISI_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1479080;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZZN4AMCP8IOAudio16Device10build_coreEvENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F1479080;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZZN4AMCP8IOAudio16Device10build_coreEvENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEED0Ev()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_0,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_0>,CA::ValueRangeList ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1479000;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_0,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_0>,CA::ValueRangeList ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F1479000;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IOAudio1::Device::build_core(void)::$_0,std::allocator<AMCP::IOAudio1::Device::build_core(void)::$_0>,CA::ValueRangeList ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1,std::allocator<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1,std::allocator<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16DeviceC1ERNS0_6DriverERKN10applesauce5iokit16io_object_holderENS4_2CF13DictionaryRefEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1,std::allocator<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  v97[2] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  long long v89 = 0u;
  long long v90 = 0u;
  long long v88 = 0u;
  uint64_t v2 = (AMCP::Utility::Kernel_Error_Category *)AMCP::Utility::Mach_Port::receive_message(*((_DWORD *)v1 + 96), 0x30u, (mach_msg_header_t *)&v88, (mach_msg_header_t *)1);
  int v3 = (int)v2;
  AMCP::Utility::Kernel_Error_Category::get(v2);
  if (v3) {
    return;
  }
  switch(DWORD2(v89))
  {
    case 1:
    case 2:
      uint64_t v5 = v1[2];
      uint64_t v6 = *(void *)(*(void *)(v5 + 32) + 32);
      unsigned int v7 = *(_DWORD *)(v5 + 48);
      unsigned int v8 = *((_DWORD *)v1 + 8);
      uint64_t v10 = *v1;
      uint64_t v9 = v1[1];
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
      }
      *(void *)std::string buf = &unk_1F1479650;
      *(void *)&long long v96 = v10;
      *((void *)&v96 + 1) = v9;
      v97[0] = buf;
      AMCP::Core::Conductor::enqueue_config_change(v6, v7, v8, 1, (uint64_t)buf);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](buf);
      return;
    case 3:
      AMCP::Log::Scope_Registry::get(v4);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v93, "com.apple.coreaudio", "AMCP");
      int v21 = *(_DWORD *)(v93 + 16);
      if (v21 == 3)
      {
        AMCP::Log::Scope_Registry::get(v20);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        int v50 = **(NSObject ***)buf;
        if ((void)v96) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v96);
        }
        if (!os_log_type_enabled(v50, OS_LOG_TYPE_INFO)) {
          goto LABEL_121;
        }
        unint64_t v61 = pthread_self();
        mach_port_t v62 = pthread_mach_thread_np(v61);
        CFStringRef v63 = (const __CFString *)v1[3];
        if (!v63) {
          goto LABEL_123;
        }
        mach_port_t v64 = v62;
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v63);
        if (v92 >= 0) {
          unint64_t v65 = __p;
        }
        else {
          unint64_t v65 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v64;
        LOWORD(v96) = 2080;
        *(void *)((char *)&v96 + 2) = "IOAudio1_Device.cpp";
        WORD5(v96) = 1024;
        HIDWORD(v96) = 717;
        LOWORD(v97[0]) = 2080;
        *(void *)((char *)v97 + 2) = v65;
        io_object_t v19 = "%6u %32s:%-5d 'Started' notification for device '%s'";
LABEL_117:
        int v41 = v50;
        os_log_type_t v42 = OS_LOG_TYPE_INFO;
        goto LABEL_118;
      }
      if (v21 == 2)
      {
        AMCP::Log::Scope_Registry::get(v20);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        int v43 = **(NSObject ***)buf;
        if ((void)v96) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v96);
        }
        if (!os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_121;
        }
        uint64_t v56 = pthread_self();
        mach_port_t v57 = pthread_mach_thread_np(v56);
        CFStringRef v58 = (const __CFString *)v1[3];
        if (!v58) {
          goto LABEL_123;
        }
        mach_port_t v59 = v57;
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v58);
        if (v92 >= 0) {
          int v60 = __p;
        }
        else {
          int v60 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v59;
        LOWORD(v96) = 2080;
        *(void *)((char *)&v96 + 2) = "IOAudio1_Device.cpp";
        WORD5(v96) = 1024;
        HIDWORD(v96) = 717;
        LOWORD(v97[0]) = 2080;
        *(void *)((char *)v97 + 2) = v60;
        int v49 = "%6u %32s:%-5d 'Started' notification for device '%s'";
LABEL_100:
        _os_log_debug_impl(&dword_1BAA78000, v43, OS_LOG_TYPE_DEBUG, v49, buf, 0x22u);
        goto LABEL_119;
      }
      if (v21 != 1) {
        goto LABEL_121;
      }
      AMCP::Log::Scope_Registry::get(v20);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v13 = **(NSObject ***)buf;
      if ((void)v96) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v96);
      }
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_121;
      }
      int v22 = pthread_self();
      mach_port_t v23 = pthread_mach_thread_np(v22);
      CFStringRef v24 = (const __CFString *)v1[3];
      if (!v24) {
        goto LABEL_123;
      }
      mach_port_t v25 = v23;
      applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v24);
      if (v92 >= 0) {
        CFStringRef v26 = __p;
      }
      else {
        CFStringRef v26 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v25;
      LOWORD(v96) = 2080;
      *(void *)((char *)&v96 + 2) = "IOAudio1_Device.cpp";
      WORD5(v96) = 1024;
      HIDWORD(v96) = 717;
      LOWORD(v97[0]) = 2080;
      *(void *)((char *)v97 + 2) = v26;
      io_object_t v19 = "%6u %32s:%-5d 'Started' notification for device '%s'";
LABEL_51:
      int v41 = v13;
      os_log_type_t v42 = OS_LOG_TYPE_DEFAULT;
LABEL_118:
      _os_log_impl(&dword_1BAA78000, v41, v42, v19, buf, 0x22u);
LABEL_119:
      if (v92 < 0) {
        operator delete(__p[0]);
      }
LABEL_121:
      if (v94) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v94);
      }
      return;
    case 4:
      AMCP::Log::Scope_Registry::get(v4);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v93, "com.apple.coreaudio", "AMCP");
      int v12 = *(_DWORD *)(v93 + 16);
      if (v12 != 3)
      {
        if (v12 == 2)
        {
          AMCP::Log::Scope_Registry::get(v11);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          int v43 = **(NSObject ***)buf;
          if ((void)v96) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v96);
          }
          if (!os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_121;
          }
          int v44 = pthread_self();
          mach_port_t v45 = pthread_mach_thread_np(v44);
          CFStringRef v46 = (const __CFString *)v1[3];
          if (!v46) {
            goto LABEL_123;
          }
          mach_port_t v47 = v45;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v46);
          if (v92 >= 0) {
            int v48 = __p;
          }
          else {
            int v48 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v47;
          LOWORD(v96) = 2080;
          *(void *)((char *)&v96 + 2) = "IOAudio1_Device.cpp";
          WORD5(v96) = 1024;
          HIDWORD(v96) = 721;
          LOWORD(v97[0]) = 2080;
          *(void *)((char *)v97 + 2) = v48;
          int v49 = "%6u %32s:%-5d 'Stopped' notification for device '%s'";
          goto LABEL_100;
        }
        if (v12 != 1) {
          goto LABEL_121;
        }
        AMCP::Log::Scope_Registry::get(v11);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v13 = **(NSObject ***)buf;
        if ((void)v96) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v96);
        }
        if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_121;
        }
        uint64_t v14 = pthread_self();
        mach_port_t v15 = pthread_mach_thread_np(v14);
        CFStringRef v16 = (const __CFString *)v1[3];
        if (v16)
        {
          mach_port_t v17 = v15;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v16);
          if (v92 >= 0) {
            uint64_t v18 = __p;
          }
          else {
            uint64_t v18 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v17;
          LOWORD(v96) = 2080;
          *(void *)((char *)&v96 + 2) = "IOAudio1_Device.cpp";
          WORD5(v96) = 1024;
          HIDWORD(v96) = 721;
          LOWORD(v97[0]) = 2080;
          *(void *)((char *)v97 + 2) = v18;
          io_object_t v19 = "%6u %32s:%-5d 'Stopped' notification for device '%s'";
          goto LABEL_51;
        }
LABEL_123:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        int v87 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], v87);
      }
      AMCP::Log::Scope_Registry::get(v11);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v50 = **(NSObject ***)buf;
      if ((void)v96) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v96);
      }
      if (!os_log_type_enabled(v50, OS_LOG_TYPE_INFO)) {
        goto LABEL_121;
      }
      unint64_t v51 = pthread_self();
      mach_port_t v52 = pthread_mach_thread_np(v51);
      CFStringRef v53 = (const __CFString *)v1[3];
      if (!v53) {
        goto LABEL_123;
      }
      mach_port_t v54 = v52;
      applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v53);
      if (v92 >= 0) {
        uint64_t v55 = __p;
      }
      else {
        uint64_t v55 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v54;
      LOWORD(v96) = 2080;
      *(void *)((char *)&v96 + 2) = "IOAudio1_Device.cpp";
      WORD5(v96) = 1024;
      HIDWORD(v96) = 721;
      LOWORD(v97[0]) = 2080;
      *(void *)((char *)v97 + 2) = v55;
      io_object_t v19 = "%6u %32s:%-5d 'Stopped' notification for device '%s'";
      goto LABEL_117;
    case 5:
      AMCP::Log::Scope_Registry::get(v4);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v93, "com.apple.coreaudio", "AMCP");
      int v35 = *(_DWORD *)(v93 + 16);
      if (v35 == 3)
      {
        AMCP::Log::Scope_Registry::get(v34);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        int v50 = **(NSObject ***)buf;
        if ((void)v96) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v96);
        }
        if (!os_log_type_enabled(v50, OS_LOG_TYPE_INFO)) {
          goto LABEL_121;
        }
        int v81 = pthread_self();
        mach_port_t v82 = pthread_mach_thread_np(v81);
        CFStringRef v83 = (const __CFString *)v1[3];
        if (!v83) {
          goto LABEL_123;
        }
        mach_port_t v84 = v82;
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v83);
        if (v92 >= 0) {
          int v85 = __p;
        }
        else {
          int v85 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v84;
        LOWORD(v96) = 2080;
        *(void *)((char *)&v96 + 2) = "IOAudio1_Device.cpp";
        WORD5(v96) = 1024;
        HIDWORD(v96) = 725;
        LOWORD(v97[0]) = 2080;
        *(void *)((char *)v97 + 2) = v85;
        io_object_t v19 = "%6u %32s:%-5d 'Paused' notification for device '%s'";
        goto LABEL_117;
      }
      if (v35 == 2)
      {
        AMCP::Log::Scope_Registry::get(v34);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        int v43 = **(NSObject ***)buf;
        if ((void)v96) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v96);
        }
        if (!os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_121;
        }
        uint64_t v71 = pthread_self();
        mach_port_t v72 = pthread_mach_thread_np(v71);
        CFStringRef v73 = (const __CFString *)v1[3];
        if (!v73) {
          goto LABEL_123;
        }
        mach_port_t v74 = v72;
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v73);
        if (v92 >= 0) {
          uint64_t v75 = __p;
        }
        else {
          uint64_t v75 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v74;
        LOWORD(v96) = 2080;
        *(void *)((char *)&v96 + 2) = "IOAudio1_Device.cpp";
        WORD5(v96) = 1024;
        HIDWORD(v96) = 725;
        LOWORD(v97[0]) = 2080;
        *(void *)((char *)v97 + 2) = v75;
        int v49 = "%6u %32s:%-5d 'Paused' notification for device '%s'";
        goto LABEL_100;
      }
      if (v35 != 1) {
        goto LABEL_121;
      }
      AMCP::Log::Scope_Registry::get(v34);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v13 = **(NSObject ***)buf;
      if ((void)v96) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v96);
      }
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_121;
      }
      int v36 = pthread_self();
      mach_port_t v37 = pthread_mach_thread_np(v36);
      CFStringRef v38 = (const __CFString *)v1[3];
      if (v38)
      {
        mach_port_t v39 = v37;
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v38);
        if (v92 >= 0) {
          int v40 = __p;
        }
        else {
          int v40 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v39;
        LOWORD(v96) = 2080;
        *(void *)((char *)&v96 + 2) = "IOAudio1_Device.cpp";
        WORD5(v96) = 1024;
        HIDWORD(v96) = 725;
        LOWORD(v97[0]) = 2080;
        *(void *)((char *)v97 + 2) = v40;
        io_object_t v19 = "%6u %32s:%-5d 'Paused' notification for device '%s'";
        goto LABEL_51;
      }
      goto LABEL_123;
    case 6:
      AMCP::Log::Scope_Registry::get(v4);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v93, "com.apple.coreaudio", "AMCP");
      int v28 = *(_DWORD *)(v93 + 16);
      if (v28 == 3)
      {
        AMCP::Log::Scope_Registry::get(v27);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        int v50 = **(NSObject ***)buf;
        if ((void)v96) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v96);
        }
        if (!os_log_type_enabled(v50, OS_LOG_TYPE_INFO)) {
          goto LABEL_121;
        }
        CFArrayRef v76 = pthread_self();
        mach_port_t v77 = pthread_mach_thread_np(v76);
        CFStringRef v78 = (const __CFString *)v1[3];
        if (!v78) {
          goto LABEL_123;
        }
        mach_port_t v79 = v77;
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v78);
        if (v92 >= 0) {
          int v80 = __p;
        }
        else {
          int v80 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v79;
        LOWORD(v96) = 2080;
        *(void *)((char *)&v96 + 2) = "IOAudio1_Device.cpp";
        WORD5(v96) = 1024;
        HIDWORD(v96) = 729;
        LOWORD(v97[0]) = 2080;
        *(void *)((char *)v97 + 2) = v80;
        io_object_t v19 = "%6u %32s:%-5d 'Resumed' notification for device '%s'";
        goto LABEL_117;
      }
      if (v28 == 2)
      {
        AMCP::Log::Scope_Registry::get(v27);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        int v43 = **(NSObject ***)buf;
        if ((void)v96) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v96);
        }
        if (!os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_121;
        }
        CFArrayRef v66 = pthread_self();
        mach_port_t v67 = pthread_mach_thread_np(v66);
        CFStringRef v68 = (const __CFString *)v1[3];
        if (!v68) {
          goto LABEL_123;
        }
        mach_port_t v69 = v67;
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v68);
        if (v92 >= 0) {
          uint64_t v70 = __p;
        }
        else {
          uint64_t v70 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v69;
        LOWORD(v96) = 2080;
        *(void *)((char *)&v96 + 2) = "IOAudio1_Device.cpp";
        WORD5(v96) = 1024;
        HIDWORD(v96) = 729;
        LOWORD(v97[0]) = 2080;
        *(void *)((char *)v97 + 2) = v70;
        int v49 = "%6u %32s:%-5d 'Resumed' notification for device '%s'";
        goto LABEL_100;
      }
      if (v28 != 1) {
        goto LABEL_121;
      }
      AMCP::Log::Scope_Registry::get(v27);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v13 = **(NSObject ***)buf;
      if ((void)v96) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v96);
      }
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_121;
      }
      unint64_t v29 = pthread_self();
      mach_port_t v30 = pthread_mach_thread_np(v29);
      CFStringRef v31 = (const __CFString *)v1[3];
      if (v31)
      {
        mach_port_t v32 = v30;
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v31);
        if (v92 >= 0) {
          uint64_t v33 = __p;
        }
        else {
          uint64_t v33 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v32;
        LOWORD(v96) = 2080;
        *(void *)((char *)&v96 + 2) = "IOAudio1_Device.cpp";
        WORD5(v96) = 1024;
        HIDWORD(v96) = 729;
        LOWORD(v97[0]) = 2080;
        *(void *)((char *)v97 + 2) = v33;
        io_object_t v19 = "%6u %32s:%-5d 'Resumed' notification for device '%s'";
        goto LABEL_51;
      }
      goto LABEL_123;
    default:
      return;
  }
}

void sub_1BAE20B88(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v2);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0,std::allocator<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0,std::allocator<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16Device34handle_driver_configuration_changeEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0,std::allocator<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v167 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      unint64_t v5 = *(void *)(a1 + 8);
      if (!v5)
      {
LABEL_201:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v155, "com.apple.coreaudio", "AMCP");
      io_registry_entry_t v7 = v155[4];
      v145 = v4;
      switch(v7)
      {
        case 3u:
          AMCP::Log::Scope_Registry::get(v6);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          int v22 = **(NSObject ***)buf;
          if (*(void *)v161) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v161);
          }
          if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
          {
            mach_port_t v23 = pthread_self();
            mach_port_t v24 = pthread_mach_thread_np(v23);
            CFStringRef v25 = *(const __CFString **)(v5 + 24);
            if (!v25)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
              __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            mach_port_t v26 = v24;
            applesauce::CF::convert_to<std::string,0>((uint64_t)v166, v25);
            if (v166[23] >= 0) {
              uint64_t v27 = v166;
            }
            else {
              uint64_t v27 = *(unsigned char **)v166;
            }
            *(_DWORD *)std::string buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v26;
            *(_WORD *)v161 = 2080;
            *(void *)&v161[2] = "IOAudio1_Device.cpp";
            __int16 v162 = 1024;
            int v163 = 611;
            __int16 v164 = 2080;
            v165 = v27;
            uint64_t v14 = v22;
            os_log_type_t v15 = OS_LOG_TYPE_INFO;
            goto LABEL_31;
          }
          break;
        case 2u:
          AMCP::Log::Scope_Registry::get(v6);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          CFStringRef v16 = **(NSObject ***)buf;
          if (*(void *)v161) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v161);
          }
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          {
            mach_port_t v17 = pthread_self();
            mach_port_t v18 = pthread_mach_thread_np(v17);
            CFStringRef v19 = *(const __CFString **)(v5 + 24);
            if (!v19)
            {
              unint64_t v139 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v139, "Could not construct");
              __cxa_throw(v139, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            mach_port_t v20 = v18;
            applesauce::CF::convert_to<std::string,0>((uint64_t)v166, v19);
            if (v166[23] >= 0) {
              int v21 = v166;
            }
            else {
              int v21 = *(unsigned char **)v166;
            }
            *(_DWORD *)std::string buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v20;
            *(_WORD *)v161 = 2080;
            *(void *)&v161[2] = "IOAudio1_Device.cpp";
            __int16 v162 = 1024;
            int v163 = 611;
            __int16 v164 = 2080;
            v165 = v21;
            _os_log_debug_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Begin configuration change for device '%s'", buf, 0x22u);
            goto LABEL_32;
          }
          break;
        case 1u:
          AMCP::Log::Scope_Registry::get(v6);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          unsigned int v8 = **(NSObject ***)buf;
          if (*(void *)v161) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v161);
          }
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v9 = pthread_self();
            mach_port_t v10 = pthread_mach_thread_np(v9);
            CFStringRef v11 = *(const __CFString **)(v5 + 24);
            if (!v11)
            {
              uint64_t v141 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v141, "Could not construct");
              __cxa_throw(v141, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            mach_port_t v12 = v10;
            applesauce::CF::convert_to<std::string,0>((uint64_t)v166, v11);
            if (v166[23] >= 0) {
              uint64_t v13 = v166;
            }
            else {
              uint64_t v13 = *(unsigned char **)v166;
            }
            *(_DWORD *)std::string buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v12;
            *(_WORD *)v161 = 2080;
            *(void *)&v161[2] = "IOAudio1_Device.cpp";
            __int16 v162 = 1024;
            int v163 = 611;
            __int16 v164 = 2080;
            v165 = v13;
            uint64_t v14 = v8;
            os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
LABEL_31:
            _os_log_impl(&dword_1BAA78000, v14, v15, "%6u %32s:%-5d Begin configuration change for device '%s'", buf, 0x22u);
LABEL_32:
            if ((v166[23] & 0x80000000) != 0) {
              operator delete(*(void **)v166);
            }
          }
          break;
      }
      if (v156) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v156);
      }
      kdebug_trace();
      io_registry_entry_t v28 = *(_DWORD *)(v5 + 360);
      if (v28)
      {
        *(void *)std::string buf = 0;
        uint64_t CFProperties = IORegistryEntryCreateCFProperties(v28, (CFMutableDictionaryRef *)buf, 0, 0);
        if (!CFProperties)
        {
          applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)v166, *(CFTypeRef *)buf);
          mach_port_t v30 = *(const void **)(v5 + 464);
          *(void *)(v5 + 464) = *(void *)v166;
          *(void *)v166 = v30;
          if (v30) {
            CFRelease(v30);
          }
          io_registry_entry_t v31 = *(_DWORD *)(v5 + 472);
          if (v31)
          {
            *(void *)std::string buf = 0;
            uint64_t v32 = IORegistryEntryCreateCFProperties(v31, (CFMutableDictionaryRef *)buf, 0, 0);
            if (!v32)
            {
              applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)v166, *(CFTypeRef *)buf);
              uint64_t v33 = *(const void **)(v5 + 480);
              *(void *)(v5 + 480) = *(void *)v166;
              *(void *)v166 = v33;
              if (v33) {
                CFRelease(v33);
              }
              std::string::basic_string[abi:ne180100]<0>(buf, "IOAudioStream");
              std::string::basic_string[abi:ne180100]<0>(v166, "IOService");
              v154[0] = (const char *)buf;
              _ZN4AMCP5IOKit22find_child_services_ifIZNS0_33find_child_services_by_class_nameERKN10applesauce5iokit16io_object_holderERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEESF_EUlRKT_E_EENS7_6vectorIS4_NSB_IS4_EEEES6_SF_SI_((uint64_t)&v155, *(unsigned int *)(v5 + 360), (uint64_t)v166, v154);
              if ((v166[23] & 0x80000000) != 0) {
                operator delete(*(void **)v166);
              }
              if (SHIBYTE(v163) < 0) {
                operator delete(*(void **)buf);
              }
              AMCP::IOAudio1::Stream::create_from_service_list((uint64_t)buf, v5, v155, (io_registry_entry_t *)v156);
              atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
              _ZNSt3__16invokeB8ne180100IRZZN4AMCP8IOAudio16Device34handle_driver_configuration_changeEvENK3__0clEvEUlRT_E_JRNS_5tupleIJRNS_6vectorINS_10unique_ptrINS2_6StreamENS_14default_deleteISC_EEEENS_9allocatorISF_EEEESJ_EEEEEENS_13invoke_resultIS5_JDpT0_EE4typeEOS5_DpOSN_((uint64_t **)(v5 + 488), (uint64_t **)buf);
              _ZNSt3__16invokeB8ne180100IRZZN4AMCP8IOAudio16Device34handle_driver_configuration_changeEvENK3__0clEvEUlRT_E_JRNS_5tupleIJRNS_6vectorINS_10unique_ptrINS2_6StreamENS_14default_deleteISC_EEEENS_9allocatorISF_EEEESJ_EEEEEENS_13invoke_resultIS5_JDpT0_EE4typeEOS5_DpOSN_((uint64_t **)(v5 + 512), (uint64_t **)&v164);
              std::__shared_weak_count::__release_shared[abi:ne180100](v4);
              std::string::basic_string[abi:ne180100]<0>(v166, "IOAudioControl");
              std::string::basic_string[abi:ne180100]<0>(&__p, "IOService");
              CFMutableDictionaryRef properties = (CFMutableDictionaryRef)v166;
              _ZN4AMCP5IOKit22find_child_services_ifIZNS0_33find_child_services_by_class_nameERKN10applesauce5iokit16io_object_holderERKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEESF_EUlRKT_E_EENS7_6vectorIS4_NSB_IS4_EEEES6_SF_SI_((uint64_t)v154, *(unsigned int *)(v5 + 360), (uint64_t)&__p, (const char **)&properties);
              if (v153 < 0) {
                operator delete(__p);
              }
              if ((v166[23] & 0x80000000) != 0) {
                operator delete(*(void **)v166);
              }
              AMCP::IOAudio1::Control::create_from_service_list(&__p, v5, (uint64_t)v154[0], (uint64_t)v154[1]);
              uint64_t v34 = (char *)__p;
              *(_OWORD *)v146 = 0u;
              long long v147 = 0u;
              if (__p != v152)
              {
                unint64_t v35 = 0;
                long long v147 = 0uLL;
                do
                {
                  uint64_t v36 = *(void *)(v5 + 536);
                  uint64_t v37 = *(void *)(v5 + 544);
                  if (v36 == v37) {
                    goto LABEL_66;
                  }
                  do
                  {
                    io_object_t v38 = *(_DWORD *)(*(void *)v36 + 20);
                    io_object_t v39 = *(_DWORD *)(*(void *)v34 + 20);
                    if (v38) {
                      BOOL v40 = v39 == 0;
                    }
                    else {
                      BOOL v40 = 1;
                    }
                    if (v40)
                    {
                      if (!(v38 | v39)) {
                        goto LABEL_65;
                      }
                    }
                    else if (IOObjectIsEqualTo(v38, v39))
                    {
                      goto LABEL_65;
                    }
                    v36 += 8;
                  }
                  while (v36 != v37);
                  uint64_t v36 = v37;
LABEL_65:
                  if (v36 == *(void *)(v5 + 544))
                  {
LABEL_66:
                    int v41 = (char *)*((void *)&v147 + 1);
                    if (*((void *)&v147 + 1) >= v35)
                    {
                      uint64_t v43 = (uint64_t)(*((void *)&v147 + 1) - v147) >> 3;
                      unint64_t v44 = v43 + 1;
                      if ((unint64_t)(v43 + 1) >> 61) {
LABEL_221:
                      }
                        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                      if ((uint64_t)(v35 - v147) >> 2 > v44) {
                        unint64_t v44 = (uint64_t)(v35 - v147) >> 2;
                      }
                      if (v35 - (unint64_t)v147 >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v45 = v44;
                      }
                      if (v45) {
                        unint64_t v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v45);
                      }
                      else {
                        uint64_t v46 = 0;
                      }
                      mach_port_t v47 = (void *)(v45 + 8 * v43);
                      *mach_port_t v47 = v34;
                      uint64_t v42 = (uint64_t)(v47 + 1);
                      if (*((void *)&v147 + 1) != (void)v147)
                      {
                        do
                        {
                          uint64_t v48 = *((void *)v41 - 1);
                          v41 -= 8;
                          *--mach_port_t v47 = v48;
                        }
                        while (v41 != (char *)v147);
                        int v41 = (char *)v147;
                      }
                      unint64_t v35 = v45 + 8 * v46;
                      *(void *)&long long v147 = v47;
                      if (v41) {
                        operator delete(v41);
                      }
                    }
                    else
                    {
                      **((void **)&v147 + 1) = v34;
                      uint64_t v42 = *((void *)&v147 + 1) + 8;
                    }
                    *(void *)&long long v49 = v147;
                    *((void *)&v49 + 1) = v42;
                    long long v147 = v49;
                  }
                  v34 += 8;
                }
                while (v34 != v152);
              }
              int v50 = *(AMCP::IOAudio1::Control ***)(v5 + 536);
              if (v50 != *(AMCP::IOAudio1::Control ***)(v5 + 544))
              {
                unint64_t v51 = 0;
                *(_OWORD *)v146 = 0u;
                do
                {
                  mach_port_t v52 = (char *)__p;
                  CFStringRef v53 = v152;
                  if (__p == v152) {
                    goto LABEL_98;
                  }
                  do
                  {
                    io_object_t v54 = *(_DWORD *)(*(void *)v52 + 20);
                    io_object_t v55 = *((_DWORD *)*v50 + 5);
                    if (v54) {
                      BOOL v56 = v55 == 0;
                    }
                    else {
                      BOOL v56 = 1;
                    }
                    if (v56)
                    {
                      if (!(v54 | v55)) {
                        goto LABEL_97;
                      }
                    }
                    else if (IOObjectIsEqualTo(v54, v55))
                    {
                      goto LABEL_97;
                    }
                    v52 += 8;
                  }
                  while (v52 != v53);
                  mach_port_t v52 = v53;
LABEL_97:
                  if (v52 == v152)
                  {
LABEL_98:
                    mach_port_t v57 = (char *)v146[1];
                    if (v146[1] >= v51)
                    {
                      uint64_t v59 = ((char *)v146[1] - (char *)v146[0]) >> 3;
                      unint64_t v60 = v59 + 1;
                      if ((unint64_t)(v59 + 1) >> 61) {
                        goto LABEL_221;
                      }
                      if ((int64_t)((uint64_t)v51 - (unint64_t)v146[0]) >> 2 > v60) {
                        unint64_t v60 = (int64_t)((uint64_t)v51 - (unint64_t)v146[0]) >> 2;
                      }
                      if ((unint64_t)v51 - (unint64_t)v146[0] >= 0x7FFFFFFFFFFFFFF8) {
                        unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v61 = v60;
                      }
                      if (v61) {
                        unint64_t v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v61);
                      }
                      else {
                        uint64_t v62 = 0;
                      }
                      CFStringRef v63 = (AMCP::IOAudio1::Control ***)(v61 + 8 * v59);
                      _opaque_pthread_t *v63 = v50;
                      uint64_t v58 = (uint64_t)(v63 + 1);
                      if (v146[1] != v146[0])
                      {
                        do
                        {
                          mach_port_t v64 = (AMCP::IOAudio1::Control **)*((void *)v57 - 1);
                          v57 -= 8;
                          *--CFStringRef v63 = v64;
                        }
                        while (v57 != v146[0]);
                        mach_port_t v57 = (char *)v146[0];
                      }
                      unint64_t v51 = (void *)(v61 + 8 * v62);
                      v146[0] = v63;
                      if (v57) {
                        operator delete(v57);
                      }
                    }
                    else
                    {
                      *(void *)v146[1] = v50;
                      uint64_t v58 = (uint64_t)v146[1] + 8;
                    }
                    *(void **)&long long v65 = v146[0];
                    *((void *)&v65 + 1) = v58;
                    *(_OWORD *)v146 = v65;
                  }
                  ++v50;
                }
                while (v50 != *(AMCP::IOAudio1::Control ***)(v5 + 544));
              }
              if (v146[0] != v146[1])
              {
                CFArrayRef v66 = (uint64_t **)v146[0];
                do
                {
                  mach_port_t v67 = *v66++;
                  uint64_t v68 = *v67;
                  AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*(void *)(*(void *)(*(void *)(*v67 + 8) + 16) + 32) + 16), *(_DWORD *)(*v67 + 16));
                  *(_DWORD *)(v68 + 16) = 0;
                }
                while (v66 != v146[1]);
                int v50 = *(AMCP::IOAudio1::Control ***)(v5 + 536);
                mach_port_t v69 = *(AMCP::IOAudio1::Control ***)(v5 + 544);
                if (v50 != v69)
                {
                  while (2)
                  {
                    uint64_t v70 = (AMCP::IOAudio1::Control ***)v146[0];
                    while (*v50 != **v70)
                    {
                      if (++v70 == v146[1]) {
                        goto LABEL_125;
                      }
                    }
                    if (v146[1] == v70)
                    {
LABEL_125:
                      if (++v50 != v69) {
                        continue;
                      }
                      goto LABEL_126;
                    }
                    break;
                  }
                  if (v50 == v69) {
                    goto LABEL_126;
                  }
                  unint64_t v120 = v50 + 1;
                  if (v50 + 1 != v69)
                  {
                    do
                    {
                      unint64_t v121 = *v120;
                      long long v122 = (AMCP::IOAudio1::Control ***)v146[0];
                      while (v121 != **v122)
                      {
                        if (++v122 == v146[1]) {
                          goto LABEL_210;
                        }
                      }
                      if (v146[1] != v122) {
                        goto LABEL_213;
                      }
LABEL_210:
                      *unint64_t v120 = 0;
                      uint64_t v123 = *v50;
                      NSObject *v50 = v121;
                      if (v123) {
                        (*(void (**)(AMCP::IOAudio1::Control *))(*(void *)v123 + 8))(v123);
                      }
                      ++v50;
LABEL_213:
                      ++v120;
                    }
                    while (v120 != v69);
                    mach_port_t v69 = *(AMCP::IOAudio1::Control ***)(v5 + 544);
                  }
                  if (v50 == v69)
                  {
LABEL_126:
                    int v50 = v69;
                    goto LABEL_127;
                  }
                  while (v69 != v50)
                  {
                    uint64_t v125 = (uint64_t)*--v69;
                    uint64_t v124 = v125;
                    NSObject *v69 = 0;
                    if (v125) {
                      (*(void (**)(uint64_t))(*(void *)v124 + 8))(v124);
                    }
                  }
                  *(void *)(v5 + 544) = v50;
                }
              }
LABEL_127:
              uint64_t v71 = (AMCP::IOAudio1::Control ***)(v5 + 536);
              if ((void)v147 != *((void *)&v147 + 1))
              {
                mach_port_t v72 = (void *)(v5 + 552);
                CFStringRef v73 = (AMCP::IOAudio1::Control ***)v147;
                do
                {
                  mach_port_t v74 = *v73;
                  if ((unint64_t)v50 >= *v72)
                  {
                    uint64_t v76 = v50 - *v71;
                    if ((unint64_t)(v76 + 1) >> 61) {
                      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                    }
                    uint64_t v77 = *v72 - (void)*v71;
                    uint64_t v78 = v77 >> 2;
                    if (v77 >> 2 <= (unint64_t)(v76 + 1)) {
                      uint64_t v78 = v76 + 1;
                    }
                    if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v79 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v79 = v78;
                    }
                    *(void *)&v166[32] = v5 + 552;
                    if (v79) {
                      unint64_t v79 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v79);
                    }
                    else {
                      uint64_t v80 = 0;
                    }
                    int v81 = (void *)(v79 + 8 * v76);
                    *(void *)v166 = v79;
                    *(void *)&v166[8] = v81;
                    *(void *)&v166[24] = v79 + 8 * v80;
                    mach_port_t v82 = *v74;
                    const void *v74 = 0;
                    void *v81 = v82;
                    *(void *)&v166[16] = v81 + 1;
                    std::vector<std::unique_ptr<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine,std::default_delete<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine>>>::__swap_out_circular_buffer((void *)(v5 + 536), v166);
                    int v50 = *(AMCP::IOAudio1::Control ***)(v5 + 544);
                    std::__split_buffer<std::unique_ptr<AMCP::IOAudio1::Stream>>::~__split_buffer((uint64_t)v166);
                  }
                  else
                  {
                    uint64_t v75 = *v74;
                    const void *v74 = 0;
                    *v50++ = v75;
                    *(void *)(v5 + 544) = v50;
                  }
                  *(void *)(v5 + 544) = v50;
                  ++v73;
                }
                while (v73 != *((AMCP::IOAudio1::Control ****)&v147 + 1));
              }
              for (uint64_t i = *v71; i != v50; ++i)
              {
                mach_port_t v84 = *i;
                unsigned int v85 = *((_DWORD *)*i + 4);
                if (v85)
                {
                  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v158, *(std::__shared_mutex_base **)(*(void *)(*(void *)(*((void *)v84 + 1) + 16) + 32) + 16), v85);
                  uint64_t v86 = v158;
                  if (v158)
                  {
                    memset(v166, 0, 32);
                    *(_DWORD *)&v166[32] = 1065353216;
                    io_registry_entry_t v89 = *((_DWORD *)v84 + 5);
                    long long v88 = (io_object_t *)((char *)v84 + 20);
                    io_registry_entry_t v87 = v89;
                    if (!v89)
                    {
                      uint64_t v126 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      uint64_t v127 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
                      std::runtime_error::runtime_error(v126, "cannot create io_object_proxy from null io_object");
                      v128 = (struct type_info *)MEMORY[0x1E4FBA338];
                      goto LABEL_225;
                    }
                    CFMutableDictionaryRef properties = 0;
                    uint64_t v90 = IORegistryEntryCreateCFProperties(v87, &properties, 0, 0);
                    if (v90)
                    {
                      uint64_t v129 = v90;
                      uint64_t v126 = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
                      uint64_t v127 = (void (*)(void *))MEMORY[0x1E4FBA220];
                      v130 = std::system_category();
                      MEMORY[0x1C1859250](v126, v129, v130, "Error on get_properties");
                      v128 = (struct type_info *)MEMORY[0x1E4FBA2F0];
LABEL_225:
                      __cxa_throw(v126, v128, v127);
                    }
                    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, properties);
                    unsigned int simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>((AMCP::Core::Core *)v86);
                    AMCP::IOAudio1::update_control_value(simple_required, (uint64_t)v166, v88, (CFDictionaryRef *)&cf);
                    AMCP::IOAudio1::update_control_range(simple_required, (uint64_t)v166, (CFDictionaryRef *)&cf);
                    CFMutableDictionaryRef properties = (CFMutableDictionaryRef)(v86 + 12);
                    LOBYTE(v149) = 1;
                    caulk::concurrent::shared_spin_lock::lock(v86 + 12);
                    char v92 = *(void **)&v166[16];
                    if (*(void *)&v166[16])
                    {
                      do
                      {
                        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)(v86 + 2), (unsigned int *)(v92[4] + 40), v92 + 4);
                        char v92 = (void *)*v92;
                      }
                      while (v92);
                    }
                    std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&properties);
                    CFMutableDictionaryRef properties = (CFMutableDictionaryRef)0x676C6F626F776E72;
                    int v149 = 0;
                    v86[1] = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>((AMCP::Core::Core *)v86, (const AMCP::Address *)&properties, &AMCP::k_object_id_unknown);
                    if (cf) {
                      CFRelease(cf);
                    }
                    std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(*(void **)&v166[16]);
                    uint64_t v93 = *(void **)v166;
                    *(void *)v166 = 0;
                    if (v93) {
                      operator delete(v93);
                    }
                  }
                  if (v159) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v159);
                  }
                }
                else
                {
                  AMCP::IOAudio1::Control::build_core(*i);
                }
              }
              AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v158, *(std::__shared_mutex_base **)(*(void *)(*(void *)(v5 + 16) + 32) + 16), *(_DWORD *)(v5 + 32));
              long long v94 = v158;
              uint64_t v4 = v145;
              if (v158)
              {
                memset(v166, 0, 32);
                *(_DWORD *)&v166[32] = 1065353216;
                AMCP::IOAudio1::Device::update_core_common(v5, (uint64_t)v166);
                CFMutableDictionaryRef properties = (CFMutableDictionaryRef)(v94 + 12);
                LOBYTE(v149) = 1;
                caulk::concurrent::shared_spin_lock::lock(v94 + 12);
                long long v95 = *(void **)&v166[16];
                if (*(void *)&v166[16])
                {
                  do
                  {
                    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)(v94 + 2), (unsigned int *)(v95[4] + 40), v95 + 4);
                    long long v95 = (void *)*v95;
                  }
                  while (v95);
                }
                std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&properties);
                CFMutableDictionaryRef properties = (CFMutableDictionaryRef)0x676C6F626F776E72;
                int v149 = 0;
                v94[1] = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>((AMCP::Core::Core *)v94, (const AMCP::Address *)&properties, &AMCP::k_object_id_unknown);
                std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(*(void **)&v166[16]);
                long long v96 = *(void **)v166;
                *(void *)v166 = 0;
                if (v96) {
                  operator delete(v96);
                }
              }
              if (v159) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v159);
              }
              int v97 = (AMCP::Log::Scope_Registry *)kdebug_trace();
              AMCP::Log::Scope_Registry::get(v97);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v158, "com.apple.coreaudio", "AMCP");
              int v99 = v158[4];
              switch(v99)
              {
                case 1:
                  AMCP::Log::Scope_Registry::get(v98);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v166, "com.apple.coreaudio", "AMCP");
                  char v114 = **(NSObject ***)v166;
                  if (*(void *)&v166[8]) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v166[8]);
                  }
                  if (!os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_194;
                  }
                  uint64_t v115 = pthread_self();
                  mach_port_t v116 = pthread_mach_thread_np(v115);
                  CFStringRef v117 = *(const __CFString **)(v5 + 24);
                  if (!v117)
                  {
                    int v144 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v144, "Could not construct");
                    __cxa_throw(v144, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                  mach_port_t v118 = v116;
                  applesauce::CF::convert_to<std::string,0>((uint64_t)&properties, v117);
                  if (v150 >= 0) {
                    p_CFMutableDictionaryRef properties = &properties;
                  }
                  else {
                    p_CFMutableDictionaryRef properties = properties;
                  }
                  *(_DWORD *)v166 = 67109890;
                  *(_DWORD *)&v166[4] = v118;
                  *(_WORD *)&v166[8] = 2080;
                  *(void *)&v166[10] = "IOAudio1_Device.cpp";
                  *(_WORD *)&v166[18] = 1024;
                  *(_DWORD *)&v166[20] = 705;
                  *(_WORD *)&v166[24] = 2080;
                  *(void *)&v166[26] = p_properties;
                  unint64_t v106 = v114;
                  os_log_type_t v107 = OS_LOG_TYPE_DEFAULT;
                  break;
                case 2:
                  AMCP::Log::Scope_Registry::get(v98);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v166, "com.apple.coreaudio", "AMCP");
                  char v108 = **(NSObject ***)v166;
                  if (*(void *)&v166[8]) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v166[8]);
                  }
                  if (!os_log_type_enabled(v108, OS_LOG_TYPE_DEBUG)) {
                    goto LABEL_194;
                  }
                  unsigned __int16 v109 = pthread_self();
                  mach_port_t v110 = pthread_mach_thread_np(v109);
                  CFStringRef v111 = *(const __CFString **)(v5 + 24);
                  if (!v111)
                  {
                    v140 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v140, "Could not construct");
                    __cxa_throw(v140, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                  mach_port_t v112 = v110;
                  applesauce::CF::convert_to<std::string,0>((uint64_t)&properties, v111);
                  if (v150 >= 0) {
                    BOOL v113 = &properties;
                  }
                  else {
                    BOOL v113 = properties;
                  }
                  *(_DWORD *)v166 = 67109890;
                  *(_DWORD *)&v166[4] = v112;
                  *(_WORD *)&v166[8] = 2080;
                  *(void *)&v166[10] = "IOAudio1_Device.cpp";
                  *(_WORD *)&v166[18] = 1024;
                  *(_DWORD *)&v166[20] = 705;
                  *(_WORD *)&v166[24] = 2080;
                  *(void *)&v166[26] = v113;
                  _os_log_debug_impl(&dword_1BAA78000, v108, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d End configuration change for device '%s'", v166, 0x22u);
                  goto LABEL_192;
                case 3:
                  AMCP::Log::Scope_Registry::get(v98);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v166, "com.apple.coreaudio", "AMCP");
                  uint64_t v100 = **(NSObject ***)v166;
                  if (*(void *)&v166[8]) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v166[8]);
                  }
                  if (!os_log_type_enabled(v100, OS_LOG_TYPE_INFO)) {
                    goto LABEL_194;
                  }
                  uint64_t v101 = pthread_self();
                  mach_port_t v102 = pthread_mach_thread_np(v101);
                  CFStringRef v103 = *(const __CFString **)(v5 + 24);
                  if (!v103)
                  {
                    uint64_t v143 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v143, "Could not construct");
                    __cxa_throw(v143, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                  mach_port_t v104 = v102;
                  applesauce::CF::convert_to<std::string,0>((uint64_t)&properties, v103);
                  if (v150 >= 0) {
                    unint64_t v105 = &properties;
                  }
                  else {
                    unint64_t v105 = properties;
                  }
                  *(_DWORD *)v166 = 67109890;
                  *(_DWORD *)&v166[4] = v104;
                  *(_WORD *)&v166[8] = 2080;
                  *(void *)&v166[10] = "IOAudio1_Device.cpp";
                  *(_WORD *)&v166[18] = 1024;
                  *(_DWORD *)&v166[20] = 705;
                  *(_WORD *)&v166[24] = 2080;
                  *(void *)&v166[26] = v105;
                  unint64_t v106 = v100;
                  os_log_type_t v107 = OS_LOG_TYPE_INFO;
                  break;
                default:
                  goto LABEL_194;
              }
              _os_log_impl(&dword_1BAA78000, v106, v107, "%6u %32s:%-5d End configuration change for device '%s'", v166, 0x22u);
LABEL_192:
              if (v150 < 0) {
                operator delete(properties);
              }
LABEL_194:
              if (v159) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v159);
              }
              if (v146[0]) {
                operator delete(v146[0]);
              }
              if ((void)v147) {
                operator delete((void *)v147);
              }
              *(void *)v166 = &__p;
              std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__destroy_vector::operator()[abi:ne180100]((void ***)v166);
              *(void *)v166 = v154;
              std::vector<applesauce::iokit::io_object_holder>::__destroy_vector::operator()[abi:ne180100]((void ***)v166);
              *(void *)v166 = &v164;
              std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__destroy_vector::operator()[abi:ne180100]((void ***)v166);
              *(void *)v166 = buf;
              std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__destroy_vector::operator()[abi:ne180100]((void ***)v166);
              *(void *)std::string buf = &v155;
              std::vector<applesauce::iokit::io_object_holder>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
              goto LABEL_201;
            }
            v135 = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
            v136 = (void (*)(void *))MEMORY[0x1E4FBA220];
            v138 = std::system_category();
            MEMORY[0x1C1859250](v135, v32, v138, "Error on get_properties");
            unint64_t v137 = (struct type_info *)MEMORY[0x1E4FBA2F0];
          }
          else
          {
            v135 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            v136 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
            std::runtime_error::runtime_error(v135, "cannot create io_object_proxy from null io_object");
            unint64_t v137 = (struct type_info *)MEMORY[0x1E4FBA338];
          }
          __cxa_throw(v135, v137, v136);
        }
        unint64_t v131 = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
        BOOL v132 = (void (*)(void *))MEMORY[0x1E4FBA220];
        uint64_t v134 = std::system_category();
        MEMORY[0x1C1859250](v131, CFProperties, v134, "Error on get_properties");
        mach_port_t v133 = (struct type_info *)MEMORY[0x1E4FBA2F0];
      }
      else
      {
        unint64_t v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        BOOL v132 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
        std::runtime_error::runtime_error(v131, "cannot create io_object_proxy from null io_object");
        mach_port_t v133 = (struct type_info *)MEMORY[0x1E4FBA338];
      }
      __cxa_throw(v131, v133, v132);
    }
  }
}

void sub_1BAE21F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,void **a32,std::__shared_weak_count *a33,char *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  __cxa_free_exception(v40);
  if (a33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a33);
  }
  if (v39) {
    operator delete(v39);
  }
  if (__p) {
    operator delete(__p);
  }
  a32 = (void **)&a19;
  std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__destroy_vector::operator()[abi:ne180100](&a32);
  a19 = &a25;
  std::vector<applesauce::iokit::io_object_holder>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a19 = a9;
  std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a19 = (char *)&a34;
  std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a34 = &a28;
  std::vector<applesauce::iokit::io_object_holder>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

void _ZNSt3__16invokeB8ne180100IRZZN4AMCP8IOAudio16Device34handle_driver_configuration_changeEvENK3__0clEvEUlRT_E_JRNS_5tupleIJRNS_6vectorINS_10unique_ptrINS2_6StreamENS_14default_deleteISC_EEEENS_9allocatorISF_EEEESJ_EEEEEENS_13invoke_resultIS5_JDpT0_EE4typeEOS5_DpOSN_(uint64_t **a1, uint64_t **a2)
{
  uint64_t v4 = *a2;
  long long v72 = 0u;
  if (*a2 != a2[1])
  {
    unint64_t v5 = 0;
    long long v72 = 0uLL;
    do
    {
      uint64_t v6 = *a1;
      io_registry_entry_t v7 = a1[1];
      if (*a1 == v7)
      {
        unsigned int v8 = *a1;
      }
      else
      {
        while (!AMCP::IOAudio1::operator==(*(_DWORD *)(*v6 + 20), *(_DWORD *)(*v4 + 20)))
        {
          if (++v6 == v7)
          {
            uint64_t v6 = v7;
            break;
          }
        }
        unsigned int v8 = v6;
        uint64_t v6 = a1[1];
      }
      if (v8 == v6)
      {
        uint64_t v9 = (char *)*((void *)&v72 + 1);
        if (*((void *)&v72 + 1) >= v5)
        {
          uint64_t v11 = (uint64_t)(*((void *)&v72 + 1) - v72) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
LABEL_125:
          }
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v5 - v72) >> 2 > v12) {
            unint64_t v12 = (uint64_t)(v5 - v72) >> 2;
          }
          if (v5 - (unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v12;
          }
          if (v13) {
            unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v13);
          }
          else {
            uint64_t v14 = 0;
          }
          os_log_type_t v15 = (uint64_t **)(v13 + 8 * v11);
          *os_log_type_t v15 = v4;
          uint64_t v10 = (uint64_t)(v15 + 1);
          if (*((void *)&v72 + 1) != (void)v72)
          {
            do
            {
              CFStringRef v16 = (uint64_t *)*((void *)v9 - 1);
              v9 -= 8;
              *--os_log_type_t v15 = v16;
            }
            while (v9 != (char *)v72);
            uint64_t v9 = (char *)v72;
          }
          unint64_t v5 = v13 + 8 * v14;
          *(void *)&long long v72 = v15;
          if (v9) {
            operator delete(v9);
          }
        }
        else
        {
          **((void **)&v72 + 1) = v4;
          uint64_t v10 = *((void *)&v72 + 1) + 8;
        }
        *(void *)&long long v17 = v72;
        *((void *)&v17 + 1) = v10;
        long long v72 = v17;
      }
      ++v4;
    }
    while (v4 != a2[1]);
  }
  CFStringRef v19 = *a1;
  mach_port_t v18 = a1[1];
  if (*a1 == v18)
  {
    mach_port_t v18 = *a1;
    long long v21 = 0uLL;
  }
  else
  {
    unint64_t v20 = 0;
    long long v21 = 0uLL;
    do
    {
      int v22 = *a2;
      mach_port_t v23 = a2[1];
      if (*a2 != v23)
      {
        long long v73 = v21;
        while (!AMCP::IOAudio1::operator==(*(_DWORD *)(*v22 + 20), *(_DWORD *)(*v19 + 20)))
        {
          if (++v22 == v23)
          {
            int v22 = v23;
            break;
          }
        }
        long long v21 = v73;
        mach_port_t v18 = a1[1];
      }
      if (v22 == v18)
      {
        mach_port_t v24 = (char *)*((void *)&v21 + 1);
        if (*((void *)&v21 + 1) >= v20)
        {
          mach_port_t v26 = (char *)v21;
          uint64_t v27 = (uint64_t)(*((void *)&v21 + 1) - v21) >> 3;
          unint64_t v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 61) {
            goto LABEL_125;
          }
          if ((uint64_t)(v20 - v21) >> 2 > v28) {
            unint64_t v28 = (uint64_t)(v20 - v21) >> 2;
          }
          if (v20 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v28;
          }
          if (v29) {
            unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v29);
          }
          else {
            uint64_t v30 = 0;
          }
          io_registry_entry_t v31 = (uint64_t **)(v29 + 8 * v27);
          void *v31 = v19;
          uint64_t v25 = (uint64_t)(v31 + 1);
          if (v24 != v26)
          {
            do
            {
              uint64_t v32 = (uint64_t *)*((void *)v24 - 1);
              v24 -= 8;
              *--io_registry_entry_t v31 = v32;
            }
            while (v24 != v26);
            mach_port_t v24 = v26;
          }
          unint64_t v20 = v29 + 8 * v30;
          *(void *)&long long v21 = v31;
          if (v24)
          {
            mach_port_t v74 = v31;
            operator delete(v24);
            *(void *)&long long v21 = v74;
          }
        }
        else
        {
          **((void **)&v21 + 1) = v19;
          uint64_t v25 = *((void *)&v21 + 1) + 8;
        }
        *((void *)&v21 + 1) = v25;
        mach_port_t v18 = a1[1];
      }
      ++v19;
    }
    while (v19 != v18);
  }
  long long v33 = v21;
  if ((void)v21 != *((void *)&v21 + 1))
  {
    uint64_t v34 = (uint64_t **)v21;
    do
    {
      unint64_t v35 = *v34++;
      uint64_t v36 = *v35;
      AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*(void *)(*(void *)(*(void *)(*v35 + 8) + 16) + 32) + 16), *(_DWORD *)(*v35 + 16));
      *(_DWORD *)(v36 + 16) = 0;
    }
    while (v34 != *((uint64_t ***)&v33 + 1));
    io_object_t v38 = *a1;
    uint64_t v37 = a1[1];
    if (*a1 != v37)
    {
      mach_port_t v18 = a1[1];
      while (2)
      {
        uint64_t v39 = v33;
        while (!AMCP::IOAudio1::operator==(*(_DWORD *)(*v38 + 20), *(_DWORD *)(**(void **)v39 + 20)))
        {
          v39 += 8;
          if (v39 == *((void *)&v33 + 1)) {
            goto LABEL_67;
          }
        }
        if (*((void *)&v33 + 1) == v39)
        {
LABEL_67:
          if (++v38 != v37) {
            continue;
          }
          goto LABEL_83;
        }
        break;
      }
      if (v38 == v37) {
        goto LABEL_83;
      }
      BOOL v40 = v38 + 1;
      if (v38 + 1 != v37)
      {
        mach_port_t v18 = v38;
        do
        {
          uint64_t v41 = v33;
          while (!AMCP::IOAudio1::operator==(*(_DWORD *)(*v40 + 20), *(_DWORD *)(**(void **)v41 + 20)))
          {
            v41 += 8;
            if (v41 == *((void *)&v33 + 1)) {
              goto LABEL_77;
            }
          }
          if (*((void *)&v33 + 1) != v41) {
            goto LABEL_80;
          }
LABEL_77:
          uint64_t v42 = *v40;
          *BOOL v40 = 0;
          uint64_t v43 = *v18;
          *mach_port_t v18 = v42;
          if (v43) {
            (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
          }
          ++v18;
LABEL_80:
          ++v40;
        }
        while (v40 != v37);
        goto LABEL_83;
      }
    }
    mach_port_t v18 = v38;
LABEL_83:
    unint64_t v44 = a1[1];
    if (v18 != v44)
    {
      mach_port_t v18 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::unique_ptr<AMCP::IOAudio1::Stream> *,std::unique_ptr<AMCP::IOAudio1::Stream> *,std::unique_ptr<AMCP::IOAudio1::Stream> *,0>(v44, a1[1], v18);
      unint64_t v45 = a1[1];
      while (v45 != v18)
      {
        uint64_t v47 = *--v45;
        uint64_t v46 = v47;
        *unint64_t v45 = 0;
        if (v47) {
          (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
        }
      }
      a1[1] = v18;
    }
  }
  if ((void)v72 != *((void *)&v72 + 1))
  {
    uint64_t v48 = (uint64_t **)v72;
    do
    {
      long long v49 = *v48;
      unint64_t v51 = *a1;
      int v50 = a1[1];
      if (v50 != *a1)
      {
        unint64_t v52 = v50 - *a1;
        do
        {
          unint64_t v53 = v52 >> 1;
          io_object_t v54 = &v51[v52 >> 1];
          uint64_t v56 = *v54;
          io_object_t v55 = v54 + 1;
          v52 += ~(v52 >> 1);
          if (*(_DWORD *)(v56 + 28) < *(_DWORD *)(*v49 + 28)) {
            unint64_t v51 = v55;
          }
          else {
            unint64_t v52 = v53;
          }
        }
        while (v52);
        int v50 = v51;
      }
      std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::emplace<std::unique_ptr<AMCP::IOAudio1::Stream>>(a1, v50, v49);
      ++v48;
    }
    while (v48 != *((uint64_t ***)&v72 + 1));
    mach_port_t v18 = a1[1];
  }
  mach_port_t v57 = (AMCP::IOAudio1::Stream **)*a1;
  if (*a1 != v18)
  {
    do
    {
      uint64_t v58 = *v57;
      unsigned int v59 = *((_DWORD *)*v57 + 4);
      if (v59)
      {
        AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v80, *(std::__shared_mutex_base **)(*(void *)(*(void *)(*((void *)v58 + 1) + 16) + 32) + 16), v59);
        unint64_t v60 = v80;
        if (v80)
        {
          *(_OWORD *)std::string __p = 0u;
          *(_OWORD *)uint64_t v78 = 0u;
          int v79 = 1065353216;
          AMCP::IOAudio1::Device::get_engine_registry_entries(&v76, *(const void **)(*((void *)v58 + 1) + 464));
          io_registry_entry_t v63 = *((_DWORD *)v58 + 5);
          uint64_t v62 = (AMCP::IOAudio1::Stream *)((char *)v58 + 20);
          io_registry_entry_t v61 = v63;
          if (!v63)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            mach_port_t v69 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
            std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
            uint64_t v71 = (struct type_info *)MEMORY[0x1E4FBA338];
LABEL_124:
            __cxa_throw(exception, v71, v69);
          }
          CFMutableDictionaryRef properties = 0;
          uint64_t v64 = IORegistryEntryCreateCFProperties(v61, &properties, 0, 0);
          if (v64)
          {
            uint64_t v67 = v64;
            exception = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
            mach_port_t v69 = (void (*)(void *))MEMORY[0x1E4FBA220];
            uint64_t v70 = std::system_category();
            MEMORY[0x1C1859250](exception, v67, v70, "Error on get_properties");
            uint64_t v71 = (struct type_info *)MEMORY[0x1E4FBA2F0];
            goto LABEL_124;
          }
          applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, properties);
          AMCP::IOAudio1::update_stream_core((uint64_t)__p, v62, (AMCP::IOAudio1 **)&v76, (CFDictionaryRef *)&cf);
          if (cf) {
            CFRelease(cf);
          }
          if (v76) {
            CFRelease(v76);
          }
          CFMutableDictionaryRef properties = (CFMutableDictionaryRef)(v60 + 12);
          LOBYTE(v83) = 1;
          caulk::concurrent::shared_spin_lock::lock(v60 + 12);
          long long v65 = v78[0];
          if (v78[0])
          {
            do
            {
              std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)(v60 + 2), (unsigned int *)(v65[4] + 40), v65 + 4);
              long long v65 = (void *)*v65;
            }
            while (v65);
          }
          std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&properties);
          CFMutableDictionaryRef properties = (CFMutableDictionaryRef)0x676C6F626F776E72;
          int v83 = 0;
          v60[1] = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>((AMCP::Core::Core *)v60, (const AMCP::Address *)&properties, &AMCP::k_object_id_unknown);
          std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((void *)v78[0]);
          CFArrayRef v66 = __p[0];
          __p[0] = 0;
          if (v66) {
            operator delete(v66);
          }
        }
        if (v81) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v81);
        }
      }
      else
      {
        AMCP::IOAudio1::Stream::build_core(*v57);
      }
      ++v57;
    }
    while (v57 != (AMCP::IOAudio1::Stream **)v18);
  }
  if ((void)v33) {
    operator delete((void *)v33);
  }
  if ((void)v72) {
    operator delete((void *)v72);
  }
}

void sub_1BAE22814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (v28) {
    operator delete(v28);
  }
  if ((void)a9) {
    operator delete((void *)a9);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0,std::allocator<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0,std::allocator<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0,std::allocator<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1479650;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0,std::allocator<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F1479650;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0,std::allocator<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1479650;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0,std::allocator<AMCP::IOAudio1::Device::handle_driver_configuration_change(void)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1479650;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1,std::allocator<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1478918;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1,std::allocator<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F1478918;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1,std::allocator<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_1>,void ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0,std::allocator<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0>,void ()(unsigned int,void *)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0,std::allocator<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0>,void ()(unsigned int,void *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16DeviceC1ERNS0_6DriverERKN10applesauce5iokit16io_object_holderENS4_2CF13DictionaryRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0,std::allocator<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0>,void ()(unsigned int,void *)>::operator()(uint64_t result, _DWORD *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*a2 == -536870896)
  {
    uint64_t v2 = *(void *)(result + 8);
    uint64_t v3 = *(void **)(v2 + 64);
    uint64_t v4 = *(void **)(v2 + 72);
    if (v3 != v4)
    {
      while (*v3 != *(void *)(result + 16))
      {
        v3 += 2;
        if (v3 == v4) {
          return result;
        }
      }
    }
    uint64_t v14 = v3;
    if (v3 != v4)
    {
      unint64_t v5 = operator new(0x20uLL);
      v5[1] = 0;
      v5[2] = 0;
      void *v5 = &unk_1F1488C30;
      *((unsigned char *)v5 + 24) = 0;
      v11[0] = (uint64_t)(v5 + 3);
      v11[1] = (uint64_t)v5;
      int v12 = 0;
      int v13 = 0;
      uint64_t v6 = *(void *)(*(void *)(v2 + 32) + 32);
      unsigned int v7 = *(_DWORD *)(v2 + 48);
      AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)v9, v11);
      *(void *)&long long v10 = v2;
      *((void *)&v10 + 1) = &v14;
      CFStringRef v16 = 0;
      unsigned int v8 = (char *)operator new(0x38uLL);
      *(void *)unsigned int v8 = &unk_1F1488B38;
      AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v8 + 8), v9);
      *(_OWORD *)(v8 + 40) = v10;
      CFStringRef v16 = v8;
      AMCP::Core::Conductor::enqueue_config_change(v6, v7, v7, 9, (uint64_t)v15);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v15);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v9);
      return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v11);
    }
  }
  return result;
}

void sub_1BAE22CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2)
  {
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(v15 - 72));
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a9);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a15);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAE22C78);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0,std::allocator<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0>,void ()(unsigned int,void *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1478888;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0,std::allocator<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0>,void ()(unsigned int,void *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F1478888;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0,std::allocator<AMCP::IOAudio1::Device::Device(AMCP::IOAudio1::Driver &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef)::$_0>,void ()(unsigned int,void *)>::~__func()
{
}

_DWORD *std::construct_at[abi:ne180100]<applesauce::iokit::io_object_holder,applesauce::iokit::io_object_holder const&,applesauce::iokit::io_object_holder*>(_DWORD *a1, io_object_t object)
{
  *a1 = object;
  if (object)
  {
    uint64_t v3 = IOObjectRetain(object);
    if (v3)
    {
      uint64_t v5 = v3;
      exception = __cxa_allocate_exception(0x20uLL);
      unsigned int v7 = std::system_category();
      MEMORY[0x1C1859250](exception, v5, v7, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
  }
  return a1;
}

void sub_1BAE22E40(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_DWORD *std::vector<applesauce::iokit::io_object_holder>::__push_back_slow_path<applesauce::iokit::io_object_holder const&>(char **a1, io_object_t a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 2;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 62) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 1 > v3) {
    unint64_t v3 = v6 >> 1;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v7 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  int v22 = a1 + 2;
  if (v7)
  {
    if (v7 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unsigned int v8 = (char *)operator new(4 * v7);
  }
  else
  {
    unsigned int v8 = 0;
  }
  mach_port_t v18 = v8;
  CFStringRef v19 = &v8[4 * v2];
  unint64_t v20 = v19;
  long long v21 = &v8[4 * v7];
  std::construct_at[abi:ne180100]<applesauce::iokit::io_object_holder,applesauce::iokit::io_object_holder const&,applesauce::iokit::io_object_holder*>(v19, a2);
  long long v10 = *a1;
  uint64_t v9 = a1[1];
  int v12 = v19;
  uint64_t v11 = v19;
  if (v9 != *a1)
  {
    int v13 = a1[1];
    do
    {
      *((_DWORD *)v12 - 1) = 0;
      v12 -= 4;
      int v14 = *((_DWORD *)v13 - 1);
      v13 -= 4;
      *(_DWORD *)int v12 = v14;
      *(_DWORD *)int v13 = 0;
    }
    while (v13 != v10);
  }
  uint64_t v15 = v11 + 4;
  *a1 = v12;
  a1[1] = v11 + 4;
  CFStringRef v16 = a1[2];
  a1[2] = v21;
  unint64_t v20 = v9;
  long long v21 = v16;
  mach_port_t v18 = v10;
  CFStringRef v19 = v10;
  std::__split_buffer<applesauce::iokit::io_object_holder>::~__split_buffer((uint64_t)&v18);
  return v15;
}

void sub_1BAE22F60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<applesauce::iokit::io_object_holder>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void AMCP::IOKit::Service_Child_Range_For::~Service_Child_Range_For(void **this)
{
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  if (*(_DWORD *)this) {
    IOObjectRelease(*(_DWORD *)this);
  }
}

uint64_t std::__split_buffer<applesauce::iokit::io_object_holder>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unsigned int v4 = *(_DWORD *)(i - 4);
    *(void *)(a1 + 16) = i - 4;
    std::__destroy_at[abi:ne180100]<applesauce::iokit::io_object_holder,0>(v4);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t applesauce::iokit::kern_return_exception::kern_return_exception(uint64_t a1, const void **a2, mach_error_t a3)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  unint64_t v7 = &v14;
  std::string::basic_string[abi:ne180100]((uint64_t)&v14, v6 + 1);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v7 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      unsigned int v8 = a2;
    }
    else {
      unsigned int v8 = *a2;
    }
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 32;
  uint64_t v9 = mach_error_string(a3);
  size_t v10 = strlen(v9);
  uint64_t v11 = std::string::append(&v14, v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v15);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1F1478860;
  *(_DWORD *)(a1 + 16) = a3;
  return a1;
}

void sub_1BAE2312C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void applesauce::iokit::kern_return_exception::~kern_return_exception(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x1C1859840);
}

void AMCP::IOKit::Service_Parent_Range_For::~Service_Parent_Range_For(void **this)
{
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  if (*(_DWORD *)this) {
    IOObjectRelease(*(_DWORD *)this);
  }
}

void HALS_RemotePlugInEngine::_FreeTempBuffers(HALS_RemotePlugInEngine *this)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unsigned int v30 = *(_DWORD *)((*(uint64_t (**)(HALS_RemotePlugInEngine *))(*(void *)this + 320))(this) + 44);
  uint64_t v2 = *((void *)this + 140);
  uint64_t v4 = *(void *)(v2 + 400);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 408);
  *(void *)std::string buf = v4;
  uint64_t v36 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::dynamic_pointer_cast[abi:ne180100]<HALS_UCRemotePlugIn,HALS_UCPlugInBase>((void **)&v33, (void **)buf);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  uint64_t v5 = (uint64_t *)((char *)this + 776);
  if (*((void *)this + 97))
  {
    uint64_t v6 = v33;
    uint64_t v7 = (*(uint64_t (**)(HALS_RemotePlugInEngine *))(*(void *)this + 320))(this);
    HALS_UCRemotePlugIn::unregister_shared_buffer(v6, *(_DWORD *)(v7 + 44), 0, 0, 3u);
  }
  unsigned int v8 = (uint64_t *)((char *)this + 784);
  if (*((void *)this + 98))
  {
    uint64_t v9 = v33;
    uint64_t v10 = (*(uint64_t (**)(HALS_RemotePlugInEngine *))(*(void *)this + 320))(this);
    HALS_UCRemotePlugIn::unregister_shared_buffer(v9, *(_DWORD *)(v10 + 44), 0, 0, 4u);
  }
  HALS_IOEngine2::_GetExternalDriverStreamMixBufferInfoList(&v31, *((void *)this + 96));
  long long v12 = v31;
  uint64_t v11 = v32;
  if (v32 == v31)
  {
    int v13 = 0;
  }
  else
  {
    unint64_t v28 = (uint64_t *)((char *)this + 784);
    unint64_t v29 = (uint64_t *)((char *)this + 776);
    int v13 = 0;
    std::string v14 = 0;
    unint64_t v15 = 0;
    do
    {
      unsigned int v16 = *(_DWORD *)v12;
      uint64_t v17 = *((void *)v12 + 1);
      unsigned int v18 = *((_DWORD *)v12 + 5);
      if ((unint64_t)v14 >= v15)
      {
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v13) >> 3) + 1;
        if (v19 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(v15 - (void)v13) >> 3) > v19) {
          unint64_t v19 = 0x5555555555555556 * ((uint64_t)(v15 - (void)v13) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (void)v13) >> 3) >= 0x555555555555555) {
          unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v20 = v19;
        }
        if (v20) {
          unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v20);
        }
        else {
          uint64_t v21 = 0;
        }
        unint64_t v22 = v20 + 8 * (((char *)v14 - (char *)v13) >> 3);
        *(_DWORD *)unint64_t v22 = v16;
        *(void *)(v22 + 8) = v17;
        *(_DWORD *)(v22 + 16) = v18;
        if (v14 == v13)
        {
          mach_port_t v24 = (unsigned int *)(v20 + 8 * (((char *)v14 - (char *)v13) >> 3));
        }
        else
        {
          unint64_t v23 = v20 + 8 * (((char *)v14 - (char *)v13) >> 3);
          do
          {
            mach_port_t v24 = (unsigned int *)(v23 - 24);
            long long v25 = *(_OWORD *)(v14 - 6);
            *(void *)(v23 - 8) = *((void *)v14 - 1);
            *(_OWORD *)(v23 - 24) = v25;
            v14 -= 6;
            v23 -= 24;
          }
          while (v14 != v13);
        }
        unint64_t v15 = v20 + 24 * v21;
        std::string v14 = (unsigned int *)(v22 + 24);
        if (v13) {
          operator delete(v13);
        }
        int v13 = v24;
      }
      else
      {
        *std::string v14 = v16;
        *((void *)v14 + 1) = v17;
        uint8_t v14[4] = v18;
        v14 += 6;
      }
      v12 += 32;
    }
    while (v12 != v11);
    if (v13 != v14)
    {
      uint64_t v26 = v33;
      uint64_t v27 = v13;
      do
      {
        HALS_UCRemotePlugIn::unregister_shared_buffer(v26, v30, 0, *v27, 2u);
        v27 += 6;
      }
      while (v27 != v14);
    }
    uint64_t v11 = v31;
    unsigned int v8 = v28;
    uint64_t v5 = v29;
  }
  std::unique_ptr<HALS_IOEngine2_TempBuffer>::reset[abi:ne180100](v5, 0);
  std::unique_ptr<HALS_IOEngine2_TempBuffer>::reset[abi:ne180100](v8, 0);
  if (v11) {
    operator delete(v11);
  }
  if (v13) {
    operator delete(v13);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
}

void sub_1BAE23600(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,int buf,uint64_t a22,__int16 a23,int a24,__int16 a25,int a26,__int16 a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (v28) {
    operator delete(v28);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  _Unwind_Resume(v29);
}

uint64_t HALS_RemotePlugInEngine::_AllocateTempBuffers(HALS_RemotePlugInEngine *this)
{
  HALS_IOEngine2::_AllocateTempBuffers(this);
  int64_t v2 = *(unsigned int *)((*(uint64_t (**)(HALS_RemotePlugInEngine *))(*(void *)this + 320))(this) + 44);
  uint64_t v3 = *((void *)this + 140);
  uint64_t v5 = *(std::__shared_weak_count **)(v3 + 400);
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 408);
  uint64_t v42 = v5;
  uint64_t v43 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::dynamic_pointer_cast[abi:ne180100]<HALS_UCRemotePlugIn,HALS_UCPlugInBase>((void **)v44, (void **)&v42);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  uint64_t v6 = *(void *)v44;
  HALS_UCRemotePlugIn::register_shared_buffer(*(uint64_t *)v44, v2, 0, 0, 3u, **((void ***)this + 97), *(unsigned int *)(*((void *)this + 97) + 8));
  HALS_UCRemotePlugIn::register_shared_buffer(v6, v2, 0, 0, 4u, **((void ***)this + 98), *(unsigned int *)(*((void *)this + 98) + 8));
  HALS_IOEngine2::_GetExternalDriverStreamMixBufferInfoList((char **)&v42, *((void *)this + 96));
  unsigned int v8 = v42;
  uint64_t v7 = v43;
  if (v43 == v42)
  {
    uint64_t v9 = 0;
    if (v43) {
LABEL_60:
    }
      operator delete(v7);
  }
  else
  {
    unsigned int v41 = v2;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      int v12 = (int)v8->__vftable;
      uint64_t shared_owners = v8->__shared_owners_;
      int shared_weak_owners_high = HIDWORD(v8->__shared_weak_owners_);
      if ((unint64_t)v10 >= v11)
      {
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3) + 1;
        if (v15 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(v11 - (void)v9) >> 3) > v15) {
          unint64_t v15 = 0x5555555555555556 * ((uint64_t)(v11 - (void)v9) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v9) >> 3) >= 0x555555555555555) {
          unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v16);
        }
        else {
          uint64_t v17 = 0;
        }
        unint64_t v18 = v16 + 8 * ((v10 - v9) >> 3);
        *(_DWORD *)unint64_t v18 = v12;
        *(void *)(v18 + 8) = shared_owners;
        *(_DWORD *)(v18 + 16) = shared_weak_owners_high;
        if (v10 == v9)
        {
          unint64_t v20 = (char *)(v16 + 8 * ((v10 - v9) >> 3));
        }
        else
        {
          unint64_t v19 = v16 + 8 * ((v10 - v9) >> 3);
          do
          {
            unint64_t v20 = (char *)(v19 - 24);
            long long v21 = *(_OWORD *)(v10 - 24);
            *(void *)(v19 - 8) = *((void *)v10 - 1);
            *(_OWORD *)(v19 - 24) = v21;
            v10 -= 24;
            v19 -= 24;
          }
          while (v10 != v9);
        }
        unint64_t v11 = v16 + 24 * v17;
        uint64_t v10 = (char *)(v18 + 24);
        if (v9) {
          operator delete(v9);
        }
        uint64_t v9 = v20;
      }
      else
      {
        *(_DWORD *)uint64_t v10 = v12;
        *((void *)v10 + 1) = shared_owners;
        *((_DWORD *)v10 + 4) = shared_weak_owners_high;
        v10 += 24;
      }
      unsigned int v8 = (std::__shared_weak_count *)((char *)v8 + 32);
    }
    while (v8 != v7);
    int64_t v22 = v10 - v9;
    if (v10 != v9)
    {
      unint64_t v23 = 0;
      mach_port_t v24 = 0;
      unint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = *(void *)v44;
      uint64_t v28 = (unsigned __int128)(v22 * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
      unint64_t v29 = (v28 >> 2) + ((unint64_t)v28 >> 63);
      if (v29 <= 1) {
        uint64_t v30 = 1;
      }
      else {
        uint64_t v30 = (v28 >> 2) + ((unint64_t)v28 >> 63);
      }
      while (!HALS_UCRemotePlugIn::register_shared_buffer(v27, v41, 0, *(unsigned int *)&v9[24 * v26], 2u, *(void **)&v9[24 * v26 + 8], *(unsigned int *)&v9[24 * v26 + 16]))
      {
        if ((unint64_t)v24 >= v25)
        {
          uint64_t v32 = (v24 - v23) >> 2;
          unint64_t v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 62) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v25 - (void)v23) >> 1 > v33) {
            unint64_t v33 = (uint64_t)(v25 - (void)v23) >> 1;
          }
          if (v25 - (unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v33;
          }
          if (v34) {
            unint64_t v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v34);
          }
          else {
            uint64_t v35 = 0;
          }
          uint64_t v36 = (char *)(v34 + 4 * v32);
          *(_DWORD *)uint64_t v36 = v26;
          io_registry_entry_t v31 = v36 + 4;
          while (v24 != v23)
          {
            int v37 = *((_DWORD *)v24 - 1);
            v24 -= 4;
            *((_DWORD *)v36 - 1) = v37;
            v36 -= 4;
          }
          unint64_t v25 = v34 + 4 * v35;
          if (v23) {
            operator delete(v23);
          }
          unint64_t v23 = v36;
        }
        else
        {
          *(_DWORD *)mach_port_t v24 = v26;
          io_registry_entry_t v31 = v24 + 4;
        }
        ++v26;
        mach_port_t v24 = v31;
        if (v26 == v30) {
          goto LABEL_57;
        }
      }
      if (v23 != v24)
      {
        io_object_t v38 = v23;
        do
        {
          unint64_t v39 = *(unsigned int *)v38;
          if (v29 <= v39) {
            std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
          }
          HALS_UCRemotePlugIn::unregister_shared_buffer(v27, v41, 0, *(_DWORD *)&v9[24 * v39], 2u);
          v38 += 4;
        }
        while (v38 != v24);
      }
LABEL_57:
      if (v23) {
        operator delete(v23);
      }
    }
    uint64_t v7 = v42;
    if (v42) {
      goto LABEL_60;
    }
  }
  if (v9) {
    operator delete(v9);
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  return 0;
}

void sub_1BAE23B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_RemotePlugInEngine::CanSkipBeginEndIOOperation(HALS_RemotePlugInEngine *this)
{
  return 1;
}

void HALS_RemotePlugInEngine::UnregisterIOBuffer(HALS_RemotePlugInEngine *this, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v23 = 0;
  mach_port_t v24 = &v23;
  uint64_t v25 = 0x2020000000;
  uint64_t v26 = 0;
  uint64_t v19 = 0;
  unint64_t v20 = &v19;
  uint64_t v21 = 0x2020000000;
  int v22 = 0;
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  void v16[2] = ___ZN23HALS_RemotePlugInEngine18UnregisterIOBufferEbjjjPv_block_invoke;
  v16[3] = &unk_1E6234638;
  v16[5] = &v19;
  void v16[6] = this;
  char v18 = a2;
  int v17 = a3;
  v16[4] = &v23;
  unint64_t v11 = (HALB_Mutex *)(*(uint64_t (**)(HALS_RemotePlugInEngine *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v11, (uint64_t)v16);
  if (v24[3] && *((_DWORD *)v20 + 6))
  {
    uint64_t v12 = *((void *)this + 140);
    uint64_t v14 = *(void *)(v12 + 400);
    int v13 = *(std::__shared_weak_count **)(v12 + 408);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = (*(uint64_t (**)(HALS_RemotePlugInEngine *))(*(void *)this + 320))(this);
    (*(void (**)(uint64_t, void, void, uint64_t, uint64_t, uint64_t, void *))(*(void *)v14 + 168))(v14, *(unsigned int *)(v15 + 44), *((unsigned int *)v20 + 6), a4, a2, a5, a6);
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
}

void sub_1BAE23D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN23HALS_RemotePlugInEngine18UnregisterIOBufferEbjjjPv_block_invoke(uint64_t result)
{
  unint64_t v1 = *(unsigned int *)(result + 56);
  uint64_t v2 = *(void *)(*(void *)(*(void *)(result + 48) + 768) + 24 * *(unsigned __int8 *)(result + 60) + 48);
  unint64_t v3 = (*(void *)(*(void *)(*(void *)(result + 48) + 768) + 24 * *(unsigned __int8 *)(result + 60) + 56) - v2) >> 3;
  if (v1 >= v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    if (v3 <= v1) {
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v4 = *(void *)(v2 + 8 * v1);
  }
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(*(void *)(*(void *)(result + 32) + 8)
                                                                                          + 24)
                                                                              + 16);
  return result;
}

uint64_t HALS_RemotePlugInEngine::RegisterIOBuffer(HALS_RemotePlugInEngine *this, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v25 = 0;
  uint64_t v26 = &v25;
  uint64_t v27 = 0x2020000000;
  uint64_t v28 = 0;
  uint64_t v21 = 0;
  int v22 = &v21;
  uint64_t v23 = 0x2020000000;
  int v24 = 0;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  v18[2] = ___ZN23HALS_RemotePlugInEngine16RegisterIOBufferEbjjjPv_block_invoke;
  v18[3] = &unk_1E6234638;
  v18[5] = &v21;
  void v18[6] = this;
  char v20 = a2;
  int v19 = a3;
  v18[4] = &v25;
  uint64_t v11 = (HALB_Mutex *)(*(uint64_t (**)(HALS_RemotePlugInEngine *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v11, (uint64_t)v18);
  uint64_t v12 = 560947818;
  if (v26[3] && *((_DWORD *)v22 + 6))
  {
    uint64_t v13 = *((void *)this + 140);
    uint64_t v15 = *(void *)(v13 + 400);
    uint64_t v14 = *(std::__shared_weak_count **)(v13 + 408);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = (*(uint64_t (**)(HALS_RemotePlugInEngine *))(*(void *)this + 320))(this);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, uint64_t, void *))(*(void *)v15 + 160))(v15, *(unsigned int *)(v16 + 44), *((unsigned int *)v22 + 6), a4, a2, a5, a6);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  _Block_object_dispose(&v21, 8);
  _Block_object_dispose(&v25, 8);
  return v12;
}

void sub_1BAE24000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN23HALS_RemotePlugInEngine16RegisterIOBufferEbjjjPv_block_invoke(uint64_t result)
{
  unint64_t v1 = *(unsigned int *)(result + 56);
  uint64_t v2 = *(void *)(*(void *)(*(void *)(result + 48) + 768) + 24 * *(unsigned __int8 *)(result + 60) + 48);
  unint64_t v3 = (*(void *)(*(void *)(*(void *)(result + 48) + 768) + 24 * *(unsigned __int8 *)(result + 60) + 56) - v2) >> 3;
  if (v1 >= v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    if (v3 <= v1) {
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v4 = *(void *)(v2 + 8 * v1);
  }
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(_DWORD *)(*(void *)(*(void *)(*(void *)(result + 32) + 8)
                                                                                          + 24)
                                                                              + 16);
  return result;
}

uint64_t HALS_RemotePlugInEngine::Unregister_IOThread(HALS_RemotePlugInEngine *this, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *((void *)this + 140);
  uint64_t v6 = *(void *)(v4 + 400);
  uint64_t v5 = *(std::__shared_weak_count **)(v4 + 408);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (*(uint64_t (**)(HALS_RemotePlugInEngine *))(*(void *)this + 320))(this);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v6 + 184))(v6, *(unsigned int *)(v7 + 44), a3);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v8;
}

void sub_1BAE24164(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_RemotePlugInEngine::Register_IOThread(HALS_RemotePlugInEngine *this, unsigned int a2, uint64_t a3, double a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *((void *)this + 140);
  uint64_t v12 = *(void *)(v10 + 400);
  uint64_t v11 = *(std::__shared_weak_count **)(v10 + 408);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (*(uint64_t (**)(HALS_RemotePlugInEngine *))(*(void *)this + 320))(this);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, double))(*(void *)v12 + 176))(v12, *(unsigned int *)(v13 + 44), a3, a5, a6, a4);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return v14;
}

void sub_1BAE24254(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_RemotePlugInEngine::GetZeroTimeStamp(HALS_RemotePlugInEngine *this, int a2, double *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  int v13 = 0;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = ___ZNK23HALS_RemotePlugInEngine16GetZeroTimeStampEjRdRyS1__block_invoke;
  v8[3] = &unk_1E6234610;
  v8[4] = &v10;
  v8[5] = this;
  int v9 = a2;
  v8[6] = a3;
  v8[7] = a4;
  v8[8] = a5;
  uint64_t v5 = (HALB_Mutex *)(*(uint64_t (**)(HALS_RemotePlugInEngine *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v8);
  uint64_t v6 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v6;
}

void sub_1BAE24340(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZNK23HALS_RemotePlugInEngine16GetZeroTimeStampEjRdRyS1__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = v2[140];
  uint64_t v5 = *(void *)(v3 + 400);
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 408);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(*v2 + 320))(v2);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(uint64_t (**)(uint64_t, void, void, void, void, void))(*(void *)v5 + 208))(v5, *(unsigned int *)(v6 + 44), *(unsigned int *)(a1 + 72), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64));
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1BAE24434(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_RemotePlugInEngine::~HALS_RemotePlugInEngine(HALS_RemotePlugInEngine *this)
{
  HALS_IOEngine2::~HALS_IOEngine2(this);

  JUMPOUT(0x1C1859840);
}

void AMCP::create_device_node_uid_from_device_uid_and_direction(const __CFString **a1@<X0>, int a2@<W1>, void **a3@<X8>)
{
  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::convert_to<std::string,0>((uint64_t)__p, *a1);
  if ((v12 & 0x80u) == 0) {
    size_t v5 = v12;
  }
  else {
    size_t v5 = (size_t)__p[1];
  }
  if (a2) {
    uint64_t v6 = "-in";
  }
  else {
    uint64_t v6 = "-out";
  }
  if (a2) {
    size_t v7 = 3;
  }
  else {
    size_t v7 = 4;
  }
  std::string::basic_string[abi:ne180100]((uint64_t)a3, v5 + v7);
  if (*((char *)a3 + 23) < 0) {
    a3 = (void **)*a3;
  }
  if (v5)
  {
    if ((v12 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    memmove(a3, v8, v5);
  }
  int v9 = (char *)a3 + v5;
  memcpy(v9, v6, v7);
  v9[v7] = 0;
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1BAE24598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

uint64_t *HALS_IOEngine2::_FreeTempBuffers(HALS_IOEngine2 *this)
{
  std::unique_ptr<HALS_IOEngine2_TempBuffer>::reset[abi:ne180100]((uint64_t *)this + 97, 0);

  return std::unique_ptr<HALS_IOEngine2_TempBuffer>::reset[abi:ne180100]((uint64_t *)this + 98, 0);
}

uint64_t *std::unique_ptr<HALS_IOEngine2_TempBuffer>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *__n128 result = a2;
  if (v2)
  {
    HALB_IOBufferManager_Server::FreeBuffer(*(HALB_IOBufferManager_Server **)v2, *(_DWORD *)(v2 + 8));
    JUMPOUT(0x1C1859840);
  }
  return result;
}

uint64_t HALS_IOEngine2::_AllocateTempBuffers(HALS_IOEngine2 *this)
{
  uint64_t v1 = *((void *)this + 96);
  if (v1)
  {
    uint64_t v2 = 0;
    unsigned int v3 = 0;
    char v4 = 1;
    do
    {
      char v5 = v4;
      uint64_t v6 = v1 + 48 + 24 * v2;
      size_t v7 = *(uint64_t **)v6;
      uint64_t v8 = *(uint64_t **)(v6 + 8);
      while (v7 != v8)
      {
        uint64_t v10 = *v7++;
        uint64_t v9 = v10;
        unsigned int v11 = *(_DWORD *)(v10 + 68);
        if (v11 <= v3) {
          unsigned int v11 = v3;
        }
        unsigned int v12 = *(_DWORD *)(v9 + 108);
        if (v12 <= v11) {
          unsigned int v3 = v11;
        }
        else {
          unsigned int v3 = v12;
        }
      }
      char v4 = 0;
      uint64_t v2 = 1;
    }
    while ((v5 & 1) != 0);
    operator new();
  }
  return 0;
}

void sub_1BAE24774(void *a1)
{
  MEMORY[0x1C1859840](v1, 0x1010C40113C0ABBLL);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAE24764);
}

void HALS_IOEngine2::InitializeAudioIssueDetectorNodes(HALS_IOEngine2 *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (v1) {
    HALS_IssueDetector::Initialize(*(HALS_IssueDetector **)(v1 + 32));
  }
}

void HALS_IOEngine2::RegisterAudioIssueDetectorNode(HALS_IOEngine2 *this, CA::StreamDescription *a2, int a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 6))
  {
    memset(&v29, 0, sizeof(v29));
    unsigned int v12 = (char *)this + 796;
    if (!strncmp((const char *)this + 796, "Baseband Voice", 0x100uLL)
      || !strncmp(v12, "MaggieDebug", 0x100uLL)
      || !strncmp(v12, "Hawking", 0x100uLL)
      || !strncmp(v12, "Mikeybus Secondary", 0x100uLL)
      || !strncmp(v12, "Reference", 0x100uLL)
      || !strncmp(v12, "Speaker", 0x100uLL)
      || !strncmp(v12, "Codec", 0x100uLL)
      || !strncmp(v12, "AOP Audio-1", 0x100uLL)
      || !strncmp(v12, "Actuator", 0x100uLL))
    {
      std::string::__assign_external(&v29, v12);
    }
    std::string::append(&v29, "-", 1uLL);
    if (a3) {
      int v13 = "Input";
    }
    else {
      int v13 = "Output";
    }
    if (a3) {
      std::string::size_type v14 = 5;
    }
    else {
      std::string::size_type v14 = 6;
    }
    std::string::append(&v29, v13, v14);
    if (a6) {
      goto LABEL_44;
    }
    uint64_t v15 = (void *)*((void *)this + 6);
    uint64_t v16 = v15[4];
    if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global);
    }
    if (AudioIssueDetectorLibraryLoader(void)::libSym)
    {
      int v17 = AudioIssueDetectorLibraryLoader(void)::libSym(v16, &v29, a4, a3 ^ 1u, a2, a5);
      if (!v17)
      {
        int v19 = (void *)v15[2];
        unint64_t v18 = v15[3];
        if ((unint64_t)v19 >= v18)
        {
          uint64_t v21 = (void *)v15[1];
          uint64_t v22 = v19 - v21;
          unint64_t v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 61) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v24 = v18 - (void)v21;
          if (v24 >> 2 > v23) {
            unint64_t v23 = v24 >> 2;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25)
          {
            if (v25 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v26 = (char *)operator new(8 * v25);
          }
          else
          {
            uint64_t v26 = 0;
          }
          uint64_t v27 = &v26[8 * v22];
          *(void *)uint64_t v27 = a4;
          char v20 = v27 + 8;
          if (v19 != v21)
          {
            do
            {
              uint64_t v28 = *--v19;
              *((void *)v27 - 1) = v28;
              v27 -= 8;
            }
            while (v19 != v21);
            int v19 = (void *)v15[1];
          }
          v15[1] = v27;
          uint64_t v15[2] = v20;
          void v15[3] = &v26[8 * v25];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *int v19 = a4;
          char v20 = v19 + 1;
        }
        uint64_t v15[2] = v20;
LABEL_44:
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v29.__r_.__value_.__l.__data_);
        }
        return;
      }
    }
    else
    {
      int v17 = -1;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315650;
      io_registry_entry_t v31 = "HALS_IssueDetector.h";
      __int16 v32 = 1024;
      int v33 = 139;
      __int16 v34 = 1024;
      int v35 = v17;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  err = %d calling AudioIssueDetectorClientSetNodeFormat", buf, 0x18u);
    }
    goto LABEL_44;
  }
}

void sub_1BAE24B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOEngine2::_GetStartSample(HALS_IOEngine2 *this)
{
  uint64_t v1 = *((void *)this + 96);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = 0;
  uint64_t v3 = v1 + 48;
  for (char i = 1; ; char i = 0)
  {
    char v5 = i;
    size_t v7 = (uint64_t *)(v3 + 24 * v2);
    uint64_t v6 = *v7;
    if (v7[1] != *v7) {
      break;
    }
    uint64_t v2 = 1;
    if ((v5 & 1) == 0) {
      return 0;
    }
  }
  return *(void *)(*(void *)v6 + 464);
}

void HALS_IOEngine2::_SetStartSample(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, char a6)
{
  if (*(void *)(a1 + 768))
  {
    unsigned int v6 = atomic_load((unsigned int *)(a1 + 1072));
    if (v6 == 2)
    {
      if (!a2 || (v8 = *(uint64_t **)(a1 + 736), uint64_t v9 = *(uint64_t **)(a1 + 744), v8 == v9))
      {
LABEL_7:
        uint64_t v10 = 0;
      }
      else
      {
        while (1)
        {
          uint64_t v10 = *v8;
          if (*(_DWORD *)(*(void *)(*v8 + 32) + 16) == a2) {
            break;
          }
          if (++v8 == v9) {
            goto LABEL_7;
          }
        }
      }
      uint64_t v11 = *(void *)(a1 + 768);
      v36[0] = a3;
      v36[1] = a4;
      if (*(char *)(v10 + 159) < 0) {
        std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)(v10 + 136), *(void *)(v10 + 144));
      }
      else {
        std::string v35 = *(std::string *)(v10 + 136);
      }
      uint64_t v12 = 0;
      uint64_t v27 = v10 + 56;
      uint64_t v28 = v11 + 48;
      char v13 = 1;
      uint64_t v26 = a5;
      do
      {
        char v29 = v13;
        std::string::size_type v14 = (void *)(v28 + 24 * v12);
        unint64_t v15 = v14[1] - *v14;
        if ((v15 & 0x7FFFFFFF8) != 0)
        {
          unint64_t v16 = 0;
          int v17 = (void *)(v27 + 24 * v12);
          unint64_t v18 = v17 + 1;
          uint64_t v19 = (v15 >> 3);
          do
          {
            if (v16 >= *v18)
            {
              LODWORD(v20) = 0;
            }
            else
            {
              if (*v18 <= (unint64_t)v16) {
                std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
              }
              uint64_t v20 = (*(void *)(*v17 + (((unint64_t)v16 >> 3) & 0x1FFFFFF8)) >> v16) & 1;
            }
            if (v16 >= (uint64_t)(v14[1] - *v14) >> 3) {
              std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v21 = v36[v12];
            uint64_t v22 = *(void *)(*v14 + 8 * v16);
            if ((*(unsigned char *)(v22 + 20) || (a6 & 1) == 0) && v21 >= *(void *)(v22 + 464))
            {
              HALS_IOEngine2_DeviceInfo::get_source_id((uint64_t)v32, a2, (uint64_t)&v35, v16);
              if (*(void *)(v22 + 464) > v21) {
                *(void *)(v22 + 464) = v21;
              }
              if ((AMCP::Feature_Flags::use_mcp_coloring_mixer(0, v23) & v20) == 1
                && *(_DWORD *)(v22 + 48) == 1819304813
                && (*(unsigned char *)(v22 + 52) & 0x40) == 0
                && !*(unsigned char *)(v22 + 20))
              {
                uint64_t v24 = *(void *)(*(void *)v22 + 1080);
                unint64_t v25 = *(std::__shared_weak_count **)(*(void *)v22 + 1088);
                if (v25) {
                  atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                uint64_t v37 = v24;
                io_object_t v38 = v25;
                AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)v39, &v37, (double)v21, (double)(v21 + v26));
                if (v38) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v38);
                }
                (*(void (**)(void, unsigned char *, unsigned char *, void))(**(void **)(v22 + 208) + 96))(*(void *)(v22 + 208), v32, v39, 0);
                if (v41) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v41);
                }
                if (v40) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v40);
                }
              }
              if (v34 < 0) {
                operator delete(__p);
              }
            }
            ++v16;
          }
          while (v19 != v16);
        }
        char v13 = 0;
        uint64_t v12 = 1;
      }
      while ((v29 & 1) != 0);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1BAE24E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43)
{
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  if (a38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a38);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOEngine2_DeviceInfo::get_source_id(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v12 = *(std::string *)a3;
  }
  size_t v7 = (void *)v12.__r_.__value_.__r.__words[0];
  v13[0] = v12.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v13 + 3) = *(_DWORD *)((char *)&v12.__r_.__value_.__r.__words[2] + 3);
  int v8 = SHIBYTE(v12.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v9, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    LODWORD(v9.__r_.__value_.__r.__words[2]) = v13[0];
    *(_DWORD *)((char *)&v9.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v13 + 3);
    *((unsigned char *)&v9.__r_.__value_.__s + 23) = *((unsigned char *)&v12.__r_.__value_.__s + 23);
  }
  uint64_t v10 = a4;
  int v11 = 0;
  *(_DWORD *)a1 = a2;
  *(std::string *)(a1 + 8) = v9;
  *(void *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 40) = 0;
  if (v8 < 0)
  {
    operator delete(v7);
  }
}

void sub_1BAE24FD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL HALS_IOEngine2::_InitializePositionsForOutputStreams(HALS_IOEngine2 *this, int a2, const HALS_IOEngineInfo *a3)
{
  char v5 = (uint64_t *)*((void *)this + 92);
  uint64_t v6 = *v5;
  if (*(_DWORD *)(*(void *)(*v5 + 32) + 16) != a2)
  {
    size_t v7 = v5 + 1;
    do
    {
      uint64_t v8 = *v7++;
      uint64_t v6 = v8;
    }
    while (*(_DWORD *)(*(void *)(v8 + 32) + 16) != a2);
  }
  BOOL result = HALS_IOEngine2_IOContextInfo::HasAnActiveOutputStream(*(HALS_IOEngine2_IOContextInfo **)(v6 + 56), *(void *)(v6 + 64));
  if (result && *((unsigned char *)a3 + 424) == 0)
  {
    uint64_t v15 = *(void *)(v6 + 112);
    uint64_t v16 = *(void *)(v6 + 120);
    if (v15 != v16)
    {
      *(double *)&unint64_t v17 = (double)*((uint64_t *)a3 + 82);
      double v18 = *((double *)a3 + 45) + *(double *)&v17;
      LODWORD(v17) = *(_DWORD *)(*((void *)this + 96) + 20);
      double v19 = v18 + (double)v17;
      *(double *)&unint64_t v20 = (double)*((int *)a3 + 80);
      double v21 = v19 + *(double *)&v20;
      LODWORD(v20) = *((_DWORD *)a3 + 84);
      LODWORD(v10) = *((_DWORD *)a3 + 170);
      double v22 = (double)v10;
      double v23 = v21 + (double)v20 + round(*((double *)a3 + 86) * v22);
      uint64_t v24 = *(void *)(v6 + 112);
      do
      {
        *(void *)(v24 + 24) = (uint64_t)v23;
        v24 += 40;
      }
      while (v24 != v16);
      uint64_t v25 = (uint64_t)(v23 + v22);
      do
      {
        if (*(void *)(v15 + 32) <= v25) {
          *(void *)(v15 + 32) = v25;
        }
        v15 += 40;
      }
      while (v15 != v16);
    }
  }
  else
  {
    uint64_t v12 = *(void *)(v6 + 112);
    uint64_t v13 = *(void *)(v6 + 120);
    if (v12 != v13)
    {
      uint64_t v14 = *(void *)(v6 + 112);
      do
      {
        *(void *)(v14 + 24) = 0;
        v14 += 40;
      }
      while (v14 != v13);
      do
      {
        if (*(uint64_t *)(v12 + 32) <= 0) {
          *(void *)(v12 + 32) = 0;
        }
        v12 += 40;
      }
      while (v12 != v13);
    }
  }
  return result;
}

BOOL HALS_IOEngine2_IOContextInfo::HasAnActiveOutputStream(HALS_IOEngine2_IOContextInfo *this, unint64_t a2)
{
  if (a2 <= 0x3F && (a2 & 0x3F) == 0) {
    return 0;
  }
  int v2 = 0;
  int v3 = 0;
  char v4 = (HALS_IOEngine2_IOContextInfo *)((char *)this + 8 * (a2 >> 6));
  while (1)
  {
    BOOL v5 = (*(void *)this & (1 << v3)) != 0;
    if ((*(void *)this & (1 << v3)) != 0) {
      break;
    }
    BOOL v7 = v2 == 63;
    BOOL v6 = v2 == 63;
    int v2 = v3 + 1;
    this = (HALS_IOEngine2_IOContextInfo *)((char *)this + 8 * v6);
    if (v7) {
      int v2 = 0;
    }
    BOOL v7 = this == v4 && (a2 & 0x3F) == v2;
    int v3 = v2;
    if (v7) {
      return 0;
    }
  }
  return v5;
}

uint64_t HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  if (*(void *)a6) {
    uint64_t v12 = (void *)(*(void *)a6 + *(unsigned int *)(a6 + 8));
  }
  else {
    uint64_t v12 = 0;
  }
  bzero(v12, *(unsigned int *)(a6 + 12));
  kdebug_trace();
  double v68 = 0.0;
  double v69 = 0.0;
  uint64_t v67 = 0;
  int v63 = *(_DWORD *)(a1 + 16);
  uint64_t v64 = &v69;
  long long v65 = &v68;
  CFArrayRef v66 = &v67;
  if (!a4)
  {
    uint64_t v18 = 7;
    goto LABEL_15;
  }
  uint64_t v13 = *(void *)(a1 + 768);
  uint64_t v14 = *(void *)(v13 + 48);
  unint64_t v15 = (*(void *)(v13 + 56) - v14) >> 3;
  if (v15 <= a3) {
    goto LABEL_13;
  }
  if (v15 <= a3) {
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v16 = *(_DWORD **)(v14 + 8 * a3);
  if (!v16)
  {
LABEL_13:
    uint64_t v18 = 1;
    goto LABEL_15;
  }
  if (v16[12] != 1819304813 || (v16[13] & 0x40) != 0)
  {
    uint64_t v18 = 2;
LABEL_15:
    uint64_t v67 = v18;
    goto LABEL_16;
  }
  if (v16[16] > *(_DWORD *)(a6 + 12))
  {
    uint64_t v18 = 3;
    goto LABEL_15;
  }
  if (a2)
  {
    unint64_t v20 = *(uint64_t **)(a1 + 736);
    double v21 = *(uint64_t **)(a1 + 744);
    if (v20 != v21)
    {
      int v22 = *(_DWORD *)(v13 + 16);
      double v23 = *(uint64_t **)(a1 + 736);
      while (1)
      {
        uint64_t v24 = *v23;
        if (*(_DWORD *)(*(void *)(*v23 + 32) + 16) == a2) {
          break;
        }
        if (++v23 == v21) {
          goto LABEL_16;
        }
      }
      if ((unint64_t)((char *)v21 - (char *)v20) >= 9 && !*(unsigned char *)(a5 + 424))
      {
        uint64_t v25 = *(void *)(v24 + 112);
        if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v24 + 120) - v25) >> 3) > a3)
        {
          uint64_t v26 = v25 + 40 * a3;
          uint64_t v28 = *(void *)(v26 + 32);
          uint64_t v27 = (void *)(v26 + 32);
          if (!v28)
          {
            double v29 = *(double *)(a5 + 576);
            if (((uint64_t)v29 & 0x8000000000000000) == 0) {
              *uint64_t v27 = (uint64_t)v29;
            }
          }
        }
        double v31 = (*(double (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 1296))(a1, a2, a3);
        double v68 = v31;
        uint64_t v32 = *(void *)(v24 + 112);
        if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v24 + 120) - v32) >> 3) <= a3) {
          uint64_t v33 = 0;
        }
        else {
          uint64_t v33 = *(void *)(v32 + 40 * a3 + 32);
        }
        double v34 = (double)v33;
        double v69 = (double)v33;
        if (v31 <= 0.0 || v31 <= v34)
        {
          uint64_t v18 = 4;
          goto LABEL_15;
        }
        LODWORD(v36) = (int)(v31 - v34);
        if (v22 >= 0x2000) {
          int v37 = 0x2000;
        }
        else {
          int v37 = v22;
        }
        if (v37 <= 0)
        {
          AMCP::Log::Scope_Registry::get(v30);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v61, "com.apple.coreaudio", "AMCP");
          uint64_t v48 = *(caulk::concurrent::messenger **)(v61 + 8);
          char v60 = 16;
          long long v49 = pthread_self();
          LODWORD(v54) = pthread_mach_thread_np(v49);
          *((void *)&v54 + 1) = "HALS_IOEngine2.cpp";
          int v55 = 3709;
          int v56 = a2;
          int v57 = v36;
          int v58 = v22;
          caulk::concurrent::messenger::enqueue_call<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,int,int>>(v48, &v60, &v54);
          if (v62) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v62);
          }
          uint64_t v18 = 6;
          goto LABEL_15;
        }
        int v53 = v37 & ~(v37 >> 31);
        if ((int)v36 > v53)
        {
          int v52 = v36 - v53;
          AMCP::Log::Scope_Registry::get(v30);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v61, "com.apple.coreaudio", "AMCP");
          unint64_t v51 = *(caulk::concurrent::messenger **)(v61 + 8);
          char v60 = 16;
          io_object_t v38 = pthread_self();
          LODWORD(v54) = pthread_mach_thread_np(v38);
          *((void *)&v54 + 1) = "HALS_IOEngine2.cpp";
          int v55 = 3720;
          int v56 = a2;
          LODWORD(v36) = v53;
          int v57 = v52;
          int v58 = v53;
          int v59 = v22;
          caulk::concurrent::messenger::enqueue_call<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_2,std::tuple<unsigned int,char const*,int,unsigned int,int,int,int>>(v51, &v60, &v54);
          if (v62) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v62);
          }
          double v39 = v69 + (double)v52;
          uint64_t v40 = *(void *)(v24 + 112);
          if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v24 + 120) - v40) >> 3) <= a3)
          {
            *(double *)(a5 + 576) = v39;
          }
          else
          {
            uint64_t v41 = (uint64_t)v39;
            uint64_t v42 = v40 + 40 * a3;
            uint64_t v44 = *(void *)(v42 + 32);
            uint64_t v43 = (uint64_t *)(v42 + 32);
            if (v44 <= (uint64_t)v39) {
              *uint64_t v43 = v41;
            }
            *(double *)(a5 + 576) = v39;
            uint64_t v45 = v40 + 40 * a3;
            uint64_t v47 = *(void *)(v45 + 24);
            uint64_t v46 = (uint64_t *)(v45 + 24);
            if (v39 < (double)v47) {
              *uint64_t v46 = v41;
            }
          }
        }
        if ((int)v36 >= 1)
        {
          while (1)
          {
            int v50 = v36 - a4;
            uint64_t v36 = v36 >= a4 ? a4 : v36;
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 1184))(a1, a2, a3, v36, a5, a6, 0))
            {
              break;
            }
            *(double *)(a5 + 576) = *(double *)(a5 + 576) + (double)v36;
            LODWORD(v36) = v50;
            if (v50 <= 0) {
              goto LABEL_16;
            }
          }
          uint64_t v18 = 5;
          goto LABEL_15;
        }
      }
    }
  }
LABEL_16:
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard((uint64_t)&v63);
  return 0;
}

void sub_1BAE25614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, ...)
{
  va_start(va, a12);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  applesauce::raii::v1::detail::ScopeGuard<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,int,int>>(caulk::concurrent::messenger *a1, unsigned char *a2, long long *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = &unk_1F147A5E0;
  *(void *)(v6 + 8) = 0;
  *(unsigned char *)(v6 + 20) = *a2;
  long long v7 = *a3;
  *(_OWORD *)(v6 + 40) = a3[1];
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)uint64_t v6 = &unk_1F147A588;

  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_2,std::tuple<unsigned int,char const*,int,unsigned int,int,int,int>>(caulk::concurrent::messenger *a1, unsigned char *a2, long long *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 64, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = &unk_1F147A660;
  *(void *)(v6 + 8) = 0;
  *(unsigned char *)(v6 + 20) = *a2;
  long long v8 = *a3;
  long long v7 = a3[1];
  *(void *)(v6 + 56) = *((void *)a3 + 4);
  *(_OWORD *)(v6 + 24) = v8;
  *(_OWORD *)(v6 + 40) = v7;
  *(void *)uint64_t v6 = &unk_1F147A608;

  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(uint64_t a1)
{
  return a1;
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_2,std::tuple<unsigned int,char const*,int,unsigned int,int,int,int>>::perform(caulk::concurrent::message *a1)
{
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90]
                                                                                           + 24))(*MEMORY[0x1E4FB7E90], a1, 64, 8);
}

void caulk::concurrent::details::message_call<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_2,std::tuple<unsigned int,char const*,int,unsigned int,int,int,int>>::perform(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v11, "com.apple.coreaudio", "AMCP");
  int v2 = *v11;
  if (*(void *)v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v12);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    int v9 = *(_DWORD *)(a1 + 52);
    int v10 = *(_DWORD *)(a1 + 56);
    LODWORD(v11) = 67110658;
    HIDWORD(v11) = v4;
    *(_WORD *)uint64_t v12 = 2080;
    *(void *)&_OWORD v12[2] = v5;
    __int16 v13 = 1024;
    int v14 = v6;
    __int16 v15 = 1024;
    int v16 = v7;
    __int16 v17 = 1024;
    int v18 = v8;
    __int16 v19 = 1024;
    int v20 = v9;
    __int16 v21 = 1024;
    int v22 = v10;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d _WriteToStream_CommitTrailingSilence: the context (%u), context is too far behind, updating write position by %d frames, max size %d, rb size %d", (uint8_t *)&v11, 0x30u);
  }
}

void caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_2,std::tuple<unsigned int,char const*,int,unsigned int,int,int,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void caulk::concurrent::details::message_call<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_2,std::tuple<unsigned int,char const*,int,unsigned int,int,int,int>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,int,int>>::perform(caulk::concurrent::message *a1)
{
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90]
                                                                                           + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void caulk::concurrent::details::message_call<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,int,int>>::perform(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  int v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    int v9 = *(_DWORD *)(a1 + 52);
    LODWORD(v10) = 67110402;
    HIDWORD(v10) = v4;
    *(_WORD *)int v11 = 2080;
    *(void *)&uint64_t v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    __int16 v18 = 1024;
    int v19 = v9;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d _WriteToStream_CommitTrailingSilence: the context (%u) cannot commit trailing silence, max size is 0, wants to commit %d, rb size is %d", (uint8_t *)&v10, 0x2Au);
  }
}

void caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,int,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void caulk::concurrent::details::message_call<HALS_IOEngine2::_WriteToStream_CommitTrailingSilence(unsigned int,unsigned int,unsigned int,HALS_IOEngineInfo &,HALS_BufferInfo const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,int,int>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t HALS_IOEngine2::_WriteToStream_Write()
{
  return 0;
}

uint64_t HALS_IOEngine2::_WriteToStream_ConvertFromTempBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = *(AudioConverterRef **)(a3 + 160);
  UInt32 ioOutputDataSize = 0;
  uint64_t v10 = *a5;
  if (*(void *)a6) {
    int v11 = (const void *)(*(void *)a6 + *(unsigned int *)(a6 + 8));
  }
  else {
    int v11 = 0;
  }
  if (*(void *)a8) {
    __int16 v12 = (char *)(*(void *)a8 + *(unsigned int *)(a8 + 8));
  }
  else {
    __int16 v12 = 0;
  }
  if (v10)
  {
    int v13 = (const void *)(v10 + *((unsigned int *)a5 + 2));
    UInt32 ioOutputDataSize = *((_DWORD *)a5 + 3);
    uint64_t result = AudioConverterConvertBuffer(*v9, ioOutputDataSize, v13, &ioOutputDataSize, v12);
  }
  if (v11) {
    return AudioConverterConvertBuffer(*v9, *(_DWORD *)(a6 + 12), v11, &ioOutputDataSize, &v12[ioOutputDataSize]);
  }
  return result;
}

uint64_t HALS_IOEngine2::_WriteToStream_ConvertFromMixBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  HALS_IOEngine2_StreamInfo::GetPointersForMixBuffer((uint64_t)v13, a3, (unint64_t)*(double *)(a4 + 144), a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 1256))(a1, a2, a3, a4, v13, &v14, a5, a6);
}

HALS_IOEngine2 *HALS_IOEngine2::_WriteToStream_ApplyStreamDSP(HALS_IOEngine2 *this, unsigned int a2, HALS_IOEngine2_StreamInfo *a3, const AudioServerPlugInIOCycleInfo *a4, unsigned int a5, double a6)
{
  uint64_t v6 = **((void **)a3 + 23);
  if (v6 && *(unsigned char *)(v6 + 762))
  {
    uint64_t v10 = this;
    p_mOutputTime = &a4->mOutputTime;
    p_UInt64 mHostTime = &a4->mOutputTime.mHostTime;
    kdebug_trace();
    HALS_IOEngine2_StreamInfo::GetPointersForMixBuffer((uint64_t)&v31, (uint64_t)a3, (unint64_t)p_mOutputTime->mSampleTime, a5);
    if (v34) {
      uint64_t v14 = v34 + v35;
    }
    else {
      uint64_t v14 = 0;
    }
    if (v31)
    {
      uint64_t v15 = v36;
      uint64_t v16 = v33;
      uint64_t v17 = v31 + v32;
      HALS_IOEngine2::GetExtraInputStreamsForOutputProcessing(v10, a3, a6, v33, v13);
      HALS_IOStreamDSP::AddInputStreamAtIndex(*(void *)(*((void *)a3 + 23) + 168), *(void *)(*((void *)a3 + 23) + 176), *((unsigned int *)a3 + 17) | (unint64_t)(v16 << 32), v17, 0);
      long long v18 = *(_OWORD *)&p_mOutputTime->mRateScalar;
      v29[0] = *(_OWORD *)&p_mOutputTime->mSampleTime;
      v29[1] = v18;
      long long v19 = *(_OWORD *)&p_mOutputTime->mSMPTETime.mHours;
      v29[2] = *(_OWORD *)&p_mOutputTime->mSMPTETime.mSubframes;
      void v29[3] = v19;
      (*(void (**)(HALS_IOEngine2 *))(*(void *)v10 + 328))(v10);
      HALS_IOEngine2_StreamInfo::ApplyDSP(*((void *)a3 + 23), v29, 0, (void *)(*((void *)a3 + 23) + 168), v17, &v30);
      if (v14)
      {
        double mSampleTime = p_mOutputTime->mSampleTime;
        long long v21 = *((_OWORD *)p_mHostTime + 1);
        long long v25 = *(_OWORD *)p_mHostTime;
        long long v26 = v21;
        long long v27 = *((_OWORD *)p_mHostTime + 2);
        v22.n128_u64[1] = *((void *)&v27 + 1);
        UInt64 v28 = p_mHostTime[6];
        v22.n128_f64[0] = (double)v16;
        double v23 = mSampleTime + (double)v16;
        HALS_IOEngine2::GetExtraInputStreamsForOutputProcessing(v10, a3, (double)v16 + a6, v15, v22);
        HALS_IOStreamDSP::AddInputStreamAtIndex(*(void *)(*((void *)a3 + 23) + 168), *(void *)(*((void *)a3 + 23) + 176), *((unsigned int *)a3 + 17) | (unint64_t)(v15 << 32), v14, 0);
        double v24 = v23;
        (*(void (**)(HALS_IOEngine2 *))(*(void *)v10 + 328))(v10);
        HALS_IOEngine2_StreamInfo::ApplyDSP(*((void *)a3 + 23), (long long *)&v24, 1, (void *)(*((void *)a3 + 23) + 168), v14, &v30);
      }
    }
    return (HALS_IOEngine2 *)kdebug_trace();
  }
  return this;
}

void HALS_IOEngine2::GetExtraInputStreamsForOutputProcessing(HALS_IOEngine2 *this, HALS_IOEngine2_StreamInfo *a2, double a3, uint64_t a4, __n128 a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)a2 + 23);
  uint64_t v6 = *(unsigned int **)(v5 + 48);
  int v7 = *(unsigned int **)(v5 + 56);
  if (v6 != v7)
  {
    uint64_t v12 = 0;
    uint64_t v13 = a4 << 32;
    unint64_t v14 = 1;
    do
    {
      unint64_t v15 = *v6;
      uint64_t v16 = *(void *)(*((void *)this + 96) + 72);
      unint64_t v17 = (*(void *)(*((void *)this + 96) + 80) - v16) >> 3;
      if (v15 >= v17) {
        goto LABEL_17;
      }
      if (v17 <= v15) {
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v18 = *(void *)(v16 + 8 * v15);
      if (!v18)
      {
LABEL_17:
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)double v23 = 136315394;
          *(void *)&v23[4] = "HALS_IOEngine2.cpp";
          LOWORD(v24) = 1024;
          *(_DWORD *)((char *)&v24 + 2) = 4248;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  GetExtraInputStreamsForOutputProcessing: no such stream", v23, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = off_1F148A5D8;
        exception[2] = 1852797029;
      }
      uint64_t v19 = *(void *)(*((void *)a2 + 23) + 144);
      if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(*((void *)a2 + 23) + 152) - v19) >> 3) <= v14 - 1) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = *(void *)(v19 + v12);
      }
      unsigned int v21 = *(_DWORD *)(v18 + 64) * a4;
      *(void *)double v23 = v20;
      *(_DWORD *)&v23[8] = 0;
      unint64_t v24 = __PAIR64__(a4, v21);
      (*(void (**)(HALS_IOEngine2 *, uint64_t, uint64_t, unsigned char *, double, __n128))(*(void *)this + 1160))(this, v18, a4, v23, a3, a5);
      HALS_IOStreamDSP::AddInputStreamAtIndex(*(void *)(*((void *)a2 + 23) + 168), *(void *)(*((void *)a2 + 23) + 176), v13 | *(unsigned int *)(v18 + 68), v20, v14++);
      ++v6;
      v12 += 24;
    }
    while (v6 != v7);
  }
}

uint64_t HALS_IOEngine2::_WriteToStream_Mix(HALS_IOEngine2 *this, unsigned int a2, HALS_IOEngine2_StreamInfo *a3, double a4, unsigned int a5)
{
  unint64_t v9 = (unint64_t)a4;
  uint64_t result = HALS_IOEngine2_StreamInfo::GetPointersForMixBuffer((uint64_t)&v34, (uint64_t)a3, (unint64_t)a4, a5);
  if (v34) {
    int v11 = (void *)(v34 + v35);
  }
  else {
    int v11 = 0;
  }
  if (v37) {
    uint64_t v12 = (void *)(v37 + v38);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *((void *)this + 92);
  uint64_t v14 = *((void *)this + 93);
  if (v13 != v14)
  {
    int v29 = v36;
    int v15 = v39;
    uint64_t v16 = (uint64_t)((double)a5 + a4);
    char v17 = 1;
    do
    {
      uint64_t result = *(void *)v13;
      if (*(unsigned char *)(*(void *)v13 + 48))
      {
        __src = 0;
        int v30 = 0;
        uint64_t result = HALS_IOEngine2_IOContextInfo::GetPointersForOutputStreamAtIndex(result, *((_DWORD *)a3 + 3), v9, a5, &v33, (float **)&__src, &v31, &v30);
        if (v17)
        {
          if (__src && v11) {
            uint64_t result = (uint64_t)memcpy(v11, __src, (*((_DWORD *)a3 + 16) * v29));
          }
          if (v30 && v12) {
            uint64_t result = (uint64_t)memcpy(v12, v30, (*((_DWORD *)a3 + 16) * v15));
          }
        }
        else
        {
          int v18 = *((_DWORD *)a3 + 17);
          uint64_t v19 = (float *)__src;
          if (__src)
          {
            if (v11)
            {
              uint64_t v20 = (v18 * v29);
              if (v20)
              {
                unsigned int v21 = (float *)v11;
                do
                {
                  float v22 = *v19++;
                  *unsigned int v21 = v22 + *v21;
                  ++v21;
                  --v20;
                }
                while (v20);
              }
            }
          }
          double v23 = v30;
          if (v30) {
            BOOL v24 = v12 == 0;
          }
          else {
            BOOL v24 = 1;
          }
          uint64_t v25 = (v18 * v15);
          if (!v24 && v25 != 0)
          {
            long long v27 = (float *)v12;
            do
            {
              float v28 = *v23++;
              *long long v27 = v28 + *v27;
              ++v27;
              --v25;
            }
            while (v25);
          }
        }
        if (*((void *)a3 + 58) <= v16) {
          *((void *)a3 + 58) = v16;
        }
        char v17 = 0;
      }
      v13 += 8;
    }
    while (v13 != v14);
  }
  return result;
}

void *HALS_IOEngine2::_WriteToStream_Store(int a1, HALS_IOEngine2_IOContextInfo *this, unsigned int a3, int a4, unsigned int a5, double a6, uint64_t a7)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  unsigned int v27 = 0;
  __dst = 0;
  unsigned int v25 = 0;
  BOOL v24 = 0;
  HALS_IOEngine2_IOContextInfo::GetPointersForOutputStreamAtIndex((uint64_t)this, a3, (unint64_t)a6, a5, &v27, (float **)&__dst, &v25, (float **)&v24);
  if (*(void *)a7)
  {
    uint64_t v13 = (char *)(*(void *)a7 + *(unsigned int *)(a7 + 8));
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315394;
      int v29 = "HALS_IOEngine2.cpp";
      __int16 v30 = 1024;
      int v31 = 3818;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOEngine2::_WriteToStream_Store: ERROR: theInputBuffer is null", buf, 0x12u);
    }
    uint64_t v13 = 0;
  }
  if (__dst)
  {
    size_t v14 = v27 * a4;
    memcpy(__dst, v13, v14);
  }
  else
  {
    size_t v14 = 0;
  }
  uint64_t result = v24;
  if (v24) {
    uint64_t result = memcpy(v24, &v13[v14], v25 * a4);
  }
  uint64_t v16 = *((void *)this + 14);
  if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 15) - v16) >> 3) > a3)
  {
    uint64_t v17 = v16 + 40 * a3;
    uint64_t v19 = *(void *)(v17 + 24);
    int v18 = (void *)(v17 + 24);
    if (!v19) {
      *int v18 = (uint64_t)a6;
    }
    double v20 = (double)a5 + a6;
    uint64_t v21 = v16 + 40 * a3;
    uint64_t v23 = *(void *)(v21 + 32);
    float v22 = (void *)(v21 + 32);
    if (v23 <= (uint64_t)v20) {
      void *v22 = (uint64_t)v20;
    }
  }
  return result;
}

void HALS_IOEngine2::_WriteToStream_ProcessClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned char *a8)
{
  *a8 = 1;
}

uint64_t HALS_IOEngine2::_HandleOverload(void *a1, int a2, unsigned int a3, unsigned int a4, int32x2_t *a5)
{
  uint64_t result = 1852797029;
  if (a2)
  {
    int v7 = (HALS_IOEngine2_IOContextInfo **)a1[92];
    int v8 = (int32x2_t **)a1[93];
    if (v7 != (HALS_IOEngine2_IOContextInfo **)v8)
    {
      unint64_t v9 = (int32x2_t **)a1[92];
      while (1)
      {
        uint64_t v10 = *v9;
        if (*(_DWORD *)(*(void *)&(*v9)[4] + 16) == a2) {
          break;
        }
        if (++v9 == v8) {
          goto LABEL_14;
        }
      }
      a5[2] = vadd_s32(a5[2], v10[2]);
      if (*(void *)&v10[1] <= *(void *)&a5[1]) {
        int v11 = a5;
      }
      else {
        int v11 = v10;
      }
      *(_OWORD *)a5->i8 = *(_OWORD *)v11->i8;
      int v8 = (int32x2_t **)a1[93];
      int v7 = (HALS_IOEngine2_IOContextInfo **)a1[92];
LABEL_14:
      if ((unint64_t)((char *)v8 - (char *)v7) <= 8)
      {
        while (v7 != (HALS_IOEngine2_IOContextInfo **)v8)
        {
          uint64_t v12 = *v7;
          if (*(_DWORD *)(*((void *)*v7 + 4) + 16) == a2)
          {
            size_t v14 = (uint64_t *)(a1[96] + 48);
            uint64_t v13 = *v14;
            unint64_t v15 = (v14[1] - *v14) >> 3;
            if (v15 > a3)
            {
              if (v15 <= a3) {
                std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
              }
              unint64_t v16 = a3;
              uint64_t v17 = *(void *)(v13 + 8 * a3);
              if (v17)
              {
                if (*(_DWORD *)(v17 + 48) == 1819304813 && (*(_DWORD *)(v17 + 52) & 0x40) == 0)
                {
                  HALS_IOEngine2_IOContextInfo::AdjustOutputCountersForOverload(v12, a3, a4, *(void *)(v17 + 464));
                  uint64_t v19 = *((void *)v12 + 14);
                  uint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)v12 + 15) - v19) >> 3) <= v16
                      ? 0
                      : *(void *)(v19 + 40 * v16 + 32);
                  if (*(void *)(v17 + 464) <= v20)
                  {
                    uint64_t result = 0;
                    *(void *)(v17 + 464) = v20;
                    return result;
                  }
                }
              }
            }
            return 0;
          }
          ++v7;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  else if (a1[93] - a1[92] <= 8uLL)
  {
    return 1852797029;
  }
  else
  {
    return 0;
  }
  return result;
}

void HALS_IOEngine2_IOContextInfo::AdjustOutputCountersForOverload(HALS_IOEngine2_IOContextInfo *this, unsigned int a2, unsigned int a3, uint64_t a4)
{
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 15) - *((void *)this + 14)) >> 3) > a2)
  {
    unint64_t v8 = a2;
    memset(&v43, 0, sizeof(v43));
    v43.mFlags = 1;
    uint64_t v10 = (char *)this + 24;
    uint64_t v9 = *((void *)this + 3);
    uint64_t v11 = *(void *)(*((void *)v10 + 1) + 96);
    uint64_t v12 = *(uint64_t **)(v11 + 1528);
    uint64_t v13 = *(uint64_t **)(v11 + 1536);
    if (v12 != v13)
    {
      while (*(void *)(*v12 + 8) != v9)
      {
        if (++v12 == v13)
        {
          double mSampleTime = 0.0;
          goto LABEL_10;
        }
      }
    }
    double mSampleTime = 0.0;
    if (v12 != v13)
    {
      uint64_t v15 = *v12;
      if (v15)
      {
        if (*(void *)(v15 + 8))
        {
          HALS_IOClock::GetCurrentTime(*(HALS_IOClock **)(v15 + 288), &v43);
          uint64_t v9 = *((void *)this + 3);
          double mSampleTime = v43.mSampleTime;
        }
      }
    }
LABEL_10:
    unsigned int v16 = (*(uint64_t (**)(uint64_t, void))(*(void *)v9 + 344))(v9, 0);
    unsigned int v17 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 96) + 280))();
    uint64_t v18 = *(void *)(*((void *)this + 4) + 96);
    uint64_t v19 = *(uint64_t **)(v18 + 1528);
    uint64_t v20 = *(uint64_t **)(v18 + 1536);
    if (v19 != v20)
    {
      while (*(void *)(*v19 + 8) != *((void *)this + 3))
      {
        if (++v19 == v20)
        {
          double v21 = 0.0;
          goto LABEL_18;
        }
      }
    }
    double v21 = 0.0;
    if (v19 != v20)
    {
      uint64_t v22 = *v19;
      if (v22)
      {
        if (*(void *)(v22 + 8)) {
          double v21 = *(double *)(v22 + 792);
        }
      }
    }
LABEL_18:
    uint64_t v23 = *((void *)this + 14);
    if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 15) - v23) >> 3) > v8)
    {
      uint64_t v24 = *(void *)(v23 + 40 * v8 + 32);
      if (v24 >= 1 && v21 > 0.0 && v21 <= (double)(unint64_t)(mSampleTime - (double)v16))
      {
        int64_t v25 = (unint64_t)(mSampleTime + (double)v16 + (double)a3);
        if (a4 + (unint64_t)a3 > v25) {
          int64_t v25 = a4 + a3;
        }
        if (v24 <= v25) {
          int64_t v26 = v25;
        }
        else {
          int64_t v26 = v24;
        }
        if (v24 >= v25) {
          uint64_t v27 = v24;
        }
        else {
          uint64_t v27 = v24 + 1;
        }
        unint64_t v28 = v26 - v27;
        if (v17 <= 1uLL) {
          unint64_t v29 = 1;
        }
        else {
          unint64_t v29 = v17;
        }
        BOOL v30 = v24 < v25;
        unint64_t v31 = v28 / v29;
        if (v30) {
          LODWORD(v31) = v31 + 1;
        }
        unsigned int v32 = v31 * v17;
        kdebug_trace();
        double v33 = (double)v24;
        int v34 = *(_DWORD *)(*((void *)this + 14) + 40 * v8 + 16);
        unsigned int v47 = 0;
        uint64_t v46 = 0;
        unsigned int v45 = 0;
        uint64_t v44 = 0;
        HALS_IOEngine2_IOContextInfo::GetPointersForOutputStreamAtIndex((uint64_t)this, a2, (unint64_t)(double)v24, v32, &v47, &v46, &v45, &v44);
        if (v46) {
          bzero(v46, v47 * v34);
        }
        if (v44) {
          bzero(v44, v45 * v34);
        }
        uint64_t v35 = *((void *)this + 14);
        if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 15) - v35) >> 3) > v8)
        {
          uint64_t v36 = v35 + 40 * v8;
          uint64_t v38 = *(void *)(v36 + 24);
          uint64_t v37 = (void *)(v36 + 24);
          if (!v38) {
            *uint64_t v37 = (uint64_t)v33;
          }
          double v39 = (double)v32 + v33;
          uint64_t v40 = v35 + 40 * v8;
          uint64_t v42 = *(void *)(v40 + 32);
          uint64_t v41 = (void *)(v40 + 32);
          if (v42 <= (uint64_t)v39) {
            *uint64_t v41 = (uint64_t)v39;
          }
        }
      }
    }
  }
}

uint64_t HALS_IOEngine2::_EndWriting(HALS_IOEngine2 *this, unsigned int a2, unsigned int a3, const HALS_IOEngineInfo *a4)
{
  return 0;
}

uint64_t HALS_IOEngine2::_WriteToStream(HALS_IOEngine2 *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v6 = *((void *)a1 + 96);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = 1852797029;
  if (a2)
  {
    for (uint64_t i = *((void *)a1 + 92); i != *((void *)a1 + 93); i += 8)
    {
      if (*(_DWORD *)(*(void *)(*(void *)i + 32) + 16) == a2)
      {
        uint64_t v11 = v6 + 48;
        uint64_t v10 = *(void *)(v6 + 48);
        unint64_t v12 = (*(void *)(v11 + 8) - v10) >> 3;
        if (v12 > a3)
        {
          if (v12 <= a3) {
            std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v13 = *(void *)(v10 + 8 * a3);
          if (v13)
          {
            if (*(_DWORD *)(v13 + 48) == 1819304813 && (*(_DWORD *)(v13 + 52) & 0x40) == 0)
            {
              return HALS_IOEngine2::_WriteToStream_Mixable(a1, a2, v13, a4, a5, a6);
            }
            else
            {
              return HALS_IOEngine2::_WriteToStream_NonMixable(a1, a2, v13, a4, a5, (uint64_t)a6);
            }
          }
        }
        return v7;
      }
    }
  }
  return v7;
}

uint64_t HALS_IOEngine2::_WriteToStream_Mixable(HALS_IOEngine2 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (*(unsigned char *)(a5 + 424)) {
    return 0;
  }
  uint64_t v13 = *(unsigned int *)(a3 + 12);
  char v51 = 1;
  uint64_t v14 = *((void *)a1 + 97);
  if (v14)
  {
    v50[0] = *(void *)v14;
    LODWORD(v50[1]) = 0;
    *(int32x2_t *)((char *)&v50[1] + 4) = vmovn_s64(*(int64x2_t *)(v14 + 8));
  }
  else
  {
    memset(v50, 0, 20);
  }
  (*(void (**)(HALS_IOEngine2 *, uint64_t, uint64_t, uint64_t, uint64_t, void *, void *, char *))(*(void *)a1 + 1208))(a1, a2, a3, a5, a4, a6, v50, &v51);
  if (v51) {
    uint64_t v15 = a6;
  }
  else {
    uint64_t v15 = v50;
  }
  for (uint64_t i = (uint64_t *)*((void *)a1 + 92); i != *((uint64_t **)a1 + 93); ++i)
  {
    uint64_t v17 = *i;
    if (*(_DWORD *)(*(void *)(*i + 32) + 16) == a2) {
      goto LABEL_14;
    }
  }
  uint64_t v17 = 0;
LABEL_14:
  (*(void (**)(HALS_IOEngine2 *, uint64_t, uint64_t, void, uint64_t, void *, double))(*(void *)a1 + 1216))(a1, v17, v13, *(unsigned int *)(a3 + 64), a4, v15, *(double *)(a5 + 576));
  int v19 = AMCP::Feature_Flags::use_mcp_coloring_mixer(0, v18);
  uint64_t v20 = (uint64_t *)*((void *)a1 + 92);
  double v21 = (uint64_t *)*((void *)a1 + 93);
  if (v19)
  {
    while (v20 != v21)
    {
      uint64_t v22 = *v20;
      if (*(_DWORD *)(*(void *)(*v20 + 32) + 16) == a2) {
        goto LABEL_24;
      }
      ++v20;
    }
    uint64_t v22 = 0;
LABEL_24:
    unint64_t v30 = *(unsigned int *)(a3 + 12);
    if (*(char *)(v22 + 159) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v57, *(const std::string::value_type **)(v22 + 136), *(void *)(v22 + 144));
    }
    else
    {
      *(_OWORD *)int v57 = *(_OWORD *)(v22 + 136);
      *(void *)&v57[16] = *(void *)(v22 + 152);
    }
    HALS_IOEngine2_DeviceInfo::get_source_id((uint64_t)&v54, a2, (uint64_t)v57, v30);
    if ((v57[23] & 0x80000000) != 0) {
      operator delete(*(void **)v57);
    }
    uint64_t v37 = (void *)(*(void *)(*(void *)(a3 + 208) + 104) + 8);
    if (std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>(v37, &v54))
    {
      uint64_t v38 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>(v37, &v54);
      if (!v38) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      *(_OWORD *)int v57 = *(_OWORD *)(v38 + 15);
      uint64_t v39 = v38[18];
      *(void *)&v57[16] = v38[17];
      *(void *)&v57[24] = v39;
      uint64_t v40 = v38[19];
      *(void *)&v57[32] = v40;
      if (v40) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)&v57[40] = *((_OWORD *)v38 + 10);
      uint64_t v41 = v38[23];
      *(void *)&v57[56] = v38[22];
      *(void *)&long long v58 = v41;
      uint64_t v42 = v38[24];
      *((void *)&v58 + 1) = v42;
      if (v42) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      long long v58 = 0u;
      memset(v57, 0, sizeof(v57));
    }
    double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v57[40]);
    if (*((void *)&v58 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v58 + 1));
    }
    if (*(void *)&v57[32]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v57[32]);
    }
    unint64_t v44 = vcvtmd_s64_f64(sample_time);
    uint64_t v45 = *(void *)(v22 + 112);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v22 + 120) - v45) >> 3) <= v30) {
      LODWORD(v46) = 0;
    }
    else {
      uint64_t v46 = *(void *)(v45 + 40 * v30 + 32);
    }
    int v52 = 0;
    *(void *)int v53 = 0;
    *(void *)int v57 = 0;
    HALS_IOEngine2_IOContextInfo::GetPointersForOutputStreamAtIndex(v22, v30, v44, v46 - v44, &v53[1], (float **)v57, v53, &v52);
    if (*(void *)v57) {
      HALS_IOEngine2_StreamInfo::write_to_synchronized_mixer(a3, (int)&v54, v44, v53[1], *(uint64_t *)v57);
    }
    uint64_t v48 = v52;
    if (v52)
    {
      HALS_IOEngine2_StreamInfo::end_cycle((HALS_IOEngine2_StreamInfo *)a3, v47);
      HALS_IOEngine2_StreamInfo::write_to_synchronized_mixer(a3, (int)&v54, v44 + v53[1], v53[0], (uint64_t)v48);
    }
    if (v56 < 0) {
      operator delete(__p);
    }
    return 0;
  }
  uint64_t v23 = *v20;
  if (*(_DWORD *)(*(void *)(*v20 + 32) + 16) != a2)
  {
    uint64_t v24 = v20 + 1;
    do
    {
      uint64_t v25 = *v24++;
      uint64_t v23 = v25;
    }
    while (*(_DWORD *)(*(void *)(v25 + 32) + 16) != a2);
  }
  unint64_t v26 = *(unsigned int *)(a3 + 12);
  uint64_t v28 = v23 + 112;
  uint64_t v27 = *(void *)(v23 + 112);
  uint64_t v29 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v28 + 8) - v27) >> 3) <= v26
      ? 0
      : *(void *)(v27 + 40 * v26 + 32);
  int64x2_t v49 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  do
  {
    if (*(unsigned char *)(*v20 + 48))
    {
      uint64_t v31 = *(void *)(*(void *)(*v20 + 32) + 96);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v31 + 160))(v31))
      {
        unsigned int v32 = (HALS_IOEngine2_IOContextInfo *)*v20;
        if (*(_DWORD *)(*(void *)(*v20 + 32) + 16) != a2)
        {
          HALS_IOEngine2_IOContextInfo::AdjustOutputCountersForOverload(v32, v26, a4, v29);
          unsigned int v32 = (HALS_IOEngine2_IOContextInfo *)*v20;
        }
        uint64_t v33 = *((void *)v32 + 14);
        if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)v32 + 15) - v33) >> 3) > v26)
        {
          int64x2_t v34 = *(int64x2_t *)(v33 + 40 * v26 + 24);
          int64x2_t v49 = (int64x2_t)vbslq_s8((int8x16_t)vcgtzq_s64(v34), vbslq_s8((int8x16_t)vcgtq_s64(v49, v34), (int8x16_t)v34, (int8x16_t)v49), (int8x16_t)v49);
        }
      }
    }
    ++v20;
  }
  while (v20 != v21);
  if (v49.i64[0] <= *(void *)(a3 + 464)) {
    uint64_t v35 = *(void *)(a3 + 464);
  }
  else {
    uint64_t v35 = v49.i64[0];
  }
  float v36 = (float)a4 * 1.5;
  if (v36 < (float)(v49.i64[1] - v35))
  {
    kdebug_trace();
    uint64_t v35 = (uint64_t)(float)((float)v49.i64[1] - v36);
  }
  if (v49.i64[1] <= v35) {
    return 0;
  }
  (*(void (**)(HALS_IOEngine2 *, uint64_t, uint64_t, void, double))(*(void *)a1 + 1224))(a1, a2, a3, (v49.i32[2] - v35), (double)v35);
  return HALS_IOEngine2::_ColoringMixer_EmitRange(a1, a2, (HALS_IOEngine2_StreamInfo *)a3, v35, v49.i64[1], *(HALS_IOClock **)(a5 + 288), (const AudioServerPlugInIOCycleInfo *)(a5 + 432), *(_DWORD *)(a5 + 312));
}

void sub_1BAE27134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOEngine2::_WriteToStream_NonMixable(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = *(atomic_uint **)(a3 + 200);
  if ((*(unsigned int (**)(void *))(*a1 + 952))(a1))
  {
    uint64_t v13 = *(HALS_IOClock **)(a5 + 288);
    long long v14 = *(_OWORD *)(a5 + 592);
    *(_OWORD *)&v33.double mSampleTime = *(_OWORD *)(a5 + 576);
    *(_OWORD *)&v33.mRateScalar = v14;
    long long v15 = *(_OWORD *)(a5 + 624);
    *(_OWORD *)&v33.mSMPTETime.mSubframes = *(_OWORD *)(a5 + 608);
    *(_OWORD *)&v33.mSMPTETime.mHours = v15;
    long long v16 = *(_OWORD *)(a5 + 464);
    v32[0] = *(_OWORD *)(a5 + 448);
    v32[1] = v16;
    long long v17 = *(_OWORD *)(a5 + 496);
    if (*(void *)a6) {
      uint64_t v18 = *(void *)a6 + *(unsigned int *)(a6 + 8);
    }
    else {
      uint64_t v18 = 0;
    }
    v32[2] = *(_OWORD *)(a5 + 480);
    v32[3] = v17;
    WriteToCaptureFile(v12, v13, &v33, (uint64_t)v32, a4, v18);
  }
  CalculateSafetyViolation_Write(*(HALS_IOClock **)(a5 + 288), *(_DWORD *)(a5 + 312), (const AudioTimeStamp *)(a5 + 576));
  float v20 = v19;
  if (v20 < 0.0) {
    kdebug_trace();
  }
  kdebug_trace();
  uint64_t v21 = a3;
  uint64_t v22 = (uint64_t *)(a5 + 432);
  uint64_t v23 = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 1264))(a1, a2, v21, a5 + 432, a4, a6);
  kdebug_trace();
  CalculateSafetyViolation_Write(*(HALS_IOClock **)(a5 + 288), *(_DWORD *)(a5 + 312), (const AudioTimeStamp *)(a5 + 576));
  double v25 = v24;
  double v26 = v24;
  float v27 = v24;
  if ((int)v27 < 0) {
    kdebug_trace();
  }
  if (v26 < 0.0)
  {
    for (uint64_t i = (uint64_t *)a1[92]; ; ++i)
    {
      uint64_t v29 = *i;
      if (*(_DWORD *)(*(void *)(*i + 32) + 16) == a2) {
        break;
      }
    }
    uint64_t v30 = *v22;
    *(double *)uint64_t v29 = v25;
    *(void *)(v29 + 8) = v30;
    ++*(_DWORD *)(v29 + 20);
  }
  return v23;
}

atomic_uint *WriteToCaptureFile(atomic_uint *result, HALS_IOClock *this, AudioTimeStamp *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result)
  {
    uint64_t v10 = result;
    long long v11 = *(_OWORD *)&a3->mRateScalar;
    *(_OWORD *)&v15.double mSampleTime = *(_OWORD *)&a3->mSampleTime;
    *(_OWORD *)&v15.mRateScalar = v11;
    long long v12 = *(_OWORD *)&a3->mSMPTETime.mHours;
    *(_OWORD *)&v15.mSMPTETime.mSubframes = *(_OWORD *)&a3->mSMPTETime.mSubframes;
    *(_OWORD *)&v15.mSMPTETime.mHours = v12;
    v15.mFlags = DWORD2(v12) | 6;
    HALS_IOClock::TranslateTime((uint64_t)this, a3, &v15);
    double v13 = 0.0;
    v14[0] = 0;
    v14[1] = 0;
    HALS_IOClock::GetRaw0Time(this, &v13, v14);
    return HALB_CaptureFile::Write(v10, a4, &v15.mSampleTime, (uint64_t)&v13, a5, a6);
  }
  return result;
}

uint64_t HALS_IOEngine2::_ColoringMixer_EmitRange(HALS_IOEngine2 *this, uint64_t a2, HALS_IOEngine2_StreamInfo *a3, uint64_t a4, uint64_t a5, HALS_IOClock *a6, const AudioServerPlugInIOCycleInfo *a7, unsigned int a8)
{
  long long v16 = *(_OWORD *)&a7->mOutputTime.mSMPTETime.mSubframes;
  *(_OWORD *)&v69.mRateScalar = *(_OWORD *)&a7->mOutputTime.mRateScalar;
  *(_OWORD *)&v69.mSMPTETime.mSubframes = v16;
  long long v17 = *(_OWORD *)&a7->mMainHostTicksPerFrame;
  *(_OWORD *)&v69.mSMPTETime.mHours = *(_OWORD *)&a7->mOutputTime.mSMPTETime.mHours;
  long long v70 = v17;
  long long v18 = *(_OWORD *)&a7->mInputTime.mSMPTETime.mSubframes;
  long long v66 = *(_OWORD *)&a7->mInputTime.mRateScalar;
  long long v67 = v18;
  long long v19 = *(_OWORD *)&a7->mOutputTime.mSampleTime;
  long long v68 = *(_OWORD *)&a7->mInputTime.mSMPTETime.mHours;
  *(_OWORD *)&v69.Float64 mSampleTime = v19;
  long long v20 = *(_OWORD *)&a7->mCurrentTime.mSMPTETime.mSubframes;
  v64[1] = *(_OWORD *)&a7->mCurrentTime.mRateScalar;
  v64[2] = v20;
  long long v21 = *(_OWORD *)&a7->mInputTime.mSampleTime;
  v64[3] = *(_OWORD *)&a7->mCurrentTime.mSMPTETime.mHours;
  long long v65 = v21;
  long long v22 = *(_OWORD *)&a7->mCurrentTime.mSampleTime;
  long long v63 = *(_OWORD *)&a7->mIOCycleCounter;
  v64[0] = v22;
  DWORD2(v68) = 0;
  long long v65 = 0uLL;
  v69.Float64 mSampleTime = (double)a4;
  v69.UInt64 mHostTime = 0;
  v69.mFlags = 1;
  *(_OWORD *)&v71.Float64 mSampleTime = COERCE_UNSIGNED_INT64((double)a4);
  *(_OWORD *)&v71.mRateScalar = *(_OWORD *)&v69.mRateScalar;
  *(_OWORD *)&v71.mSMPTETime.mSubframes = *(_OWORD *)&v69.mSMPTETime.mSubframes;
  *(_OWORD *)&v71.mSMPTETime.mHours = *(_OWORD *)&v69.mSMPTETime.mHours;
  v71.mFlags = 2;
  HALS_IOClock::TranslateTime((uint64_t)a6, &v69, &v71);
  v69.UInt64 mHostTime = v71.mHostTime;
  v69.mFlags = 3;
  AudioTimeStamp v71 = v69;
  uint64_t v23 = a5 - a4;
  (*(void (**)(HALS_IOEngine2 *, uint64_t, HALS_IOEngine2_StreamInfo *, long long *, uint64_t))(*(void *)this + 1232))(this, a2, a3, &v63, v23);
  double v24 = v69.mSampleTime - (a7->mOutputTime.mSampleTime - a7->mInputTime.mSampleTime);
  if (*((void *)this + 133))
  {
    AudioTimeStamp v62 = v69;
    (*(void (**)(HALS_IOEngine2 *, HALS_IOEngine2_StreamInfo *, AudioTimeStamp *, uint64_t))(*(void *)this + 1288))(this, a3, &v62, v23);
  }
  (*(void (**)(HALS_IOEngine2 *, uint64_t, HALS_IOEngine2_StreamInfo *, long long *, uint64_t, double))(*(void *)this + 1240))(this, a2, a3, &v63, v23, v24);
  uint64_t v25 = *((void *)this + 97);
  if (v25)
  {
    uint64_t v26 = *(void *)v25;
    v61[0] = *(void *)v25;
    LODWORD(v61[1]) = 0;
    *(int32x2_t *)((char *)&v61[1] + 4) = vmovn_s64(*(int64x2_t *)(v25 + 8));
  }
  else
  {
    uint64_t v26 = 0;
    memset(v61, 0, 20);
  }
  uint64_t v27 = *((void *)this + 98);
  if (v27)
  {
    v60[0] = *(void *)v27;
    LODWORD(v60[1]) = 0;
    *(int32x2_t *)((char *)&v60[1] + 4) = vmovn_s64(*(int64x2_t *)(v27 + 8));
  }
  else
  {
    memset(v60, 0, 20);
  }
  uint64_t v28 = *((void *)a3 + 23);
  if (*(void *)v28
    && *(unsigned char *)(*(void *)v28 + 762)
    && (uint64_t v29 = *(void *)(v28 + 24), v29 != *(void *)(v28 + 32))
    && *(_DWORD *)(v28 + 96) != *(_DWORD *)(v29 + 28))
  {
    memset(&v59, 0, 24);
    (*(void (**)(HALS_IOEngine2 *, uint64_t, HALS_IOEngine2_StreamInfo *, long long *, void *, AudioTimeStamp *, uint64_t, void *))(*(void *)this + 1256))(this, a2, a3, &v63, v60, &v59, v23, v61);
  }
  else
  {
    (*(void (**)(HALS_IOEngine2 *, uint64_t, HALS_IOEngine2_StreamInfo *, long long *, uint64_t, void *))(*(void *)this + 1248))(this, a2, a3, &v63, v23, v61);
  }
  uint64_t v30 = (atomic_uint *)*((void *)a3 + 25);
  if (v30 && (*(unsigned int (**)(HALS_IOEngine2 *))(*(void *)this + 952))(this))
  {
    AudioTimeStamp v59 = v69;
    v59.mFlags = v69.mFlags | 6;
    HALS_IOClock::TranslateTime((uint64_t)a6, &v69, &v59);
    double v57 = 0.0;
    v58[0] = 0;
    v58[1] = 0;
    HALS_IOClock::GetRaw0Time(a6, &v57, v58);
    HALB_CaptureFile::Write(v30, (uint64_t)v64, &v59.mSampleTime, (uint64_t)&v57, v23, v26);
  }
  int v55 = a6;
  unsigned int v56 = a8;
  CalculateSafetyViolation_Write(a6, a8, &v71);
  double v32 = v31;
  double v33 = v31;
  float v34 = v31;
  if (v34 < 0.0) {
    double v31 = COERCE_DOUBLE(kdebug_trace());
  }
  if (v33 < 0.0)
  {
    Float64 mSampleTime = v71.mSampleTime;
    if (v71.mSampleTime < v69.mSampleTime)
    {
      uint64_t v36 = *((void *)this + 92);
      uint64_t v37 = *((void *)this + 93);
      if (v36 != v37)
      {
        unsigned int v38 = 0;
        do
        {
          if (*(unsigned char *)(*(void *)v36 + 48))
          {
            double v31 = COERCE_DOUBLE((*(uint64_t (**)(void))(**(void **)(*(void *)(*(void *)v36 + 32)
                                                                                + 96)
                                                                  + 152))(*(void *)(*(void *)(*(void *)v36 + 32)
                                                                                      + 96)));
            v38 += LODWORD(v31);
          }
          v36 += 8;
        }
        while (v36 != v37);
        if (v38 > 1)
        {
          AMCP::Log::Scope_Registry::get(*(AMCP::Log::Scope_Registry **)&v31);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v59, "com.apple.coreaudio", "AMCP");
          uint64_t v39 = *(caulk::concurrent::messenger **)(*(void *)&v59.mSampleTime + 8);
          uint64_t v40 = pthread_self();
          mach_port_t v41 = pthread_mach_thread_np(v40);
          uint64_t v42 = (*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 320))(this);
          uint64_t v54 = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 216))(v42);
          Float64 v43 = v69.mSampleTime;
          uint64_t v44 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 88, 8);
          *(_DWORD *)(v44 + 16) = 0;
          *(unsigned char *)(v44 + 20) = 16;
          *(_DWORD *)(v44 + 24) = v41;
          *(void *)(v44 + 32) = "HALS_IOEngine2.cpp";
          *(_DWORD *)(v44 + 40) = 4428;
          *(void *)(v44 + 48) = v54;
          *(Float64 *)(v44 + 56) = v43;
          *(Float64 *)(v44 + 64) = mSampleTime;
          *(double *)(v44 + 72) = v32;
          *(_DWORD *)(v44 + 80) = v38;
          *(void *)uint64_t v44 = &unk_1F147A688;
          *(void *)(v44 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v39, (caulk::concurrent::message *)v44);
          if (v59.mHostTime) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v59.mHostTime);
          }
        }
      }
    }
  }
  kdebug_trace();
  uint64_t v45 = (*(uint64_t (**)(HALS_IOEngine2 *, uint64_t, HALS_IOEngine2_StreamInfo *, long long *, uint64_t, void *))(*(void *)this + 1264))(this, a2, a3, &v63, v23, v61);
  kdebug_trace();
  CalculateSafetyViolation_Write(v55, v56, &v71);
  double v47 = v46;
  double v48 = v46;
  float v49 = v46;
  if ((int)v49 < 0) {
    kdebug_trace();
  }
  if (v48 < 0.0)
  {
    for (uint64_t i = (uint64_t *)*((void *)this + 92); ; ++i)
    {
      uint64_t v51 = *i;
      if (*(_DWORD *)(*(void *)(*i + 32) + 16) == a2) {
        break;
      }
    }
    uint64_t v52 = v63;
    *(double *)uint64_t v51 = v47;
    *(void *)(v51 + 8) = v52;
    ++*(_DWORD *)(v51 + 20);
  }
  return v45;
}

void sub_1BAE27B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOEngine2::CheckForColoringMixerGlitches(AudioTimeStamp const&,AudioTimeStamp const&,double)::$_0,std::tuple<unsigned int,char const*,int,char const*,double,double,double,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
  int v2 = *v13;
  if (*(void *)v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 64);
    uint64_t v10 = *(void *)(a1 + 72);
    int v11 = *(_DWORD *)(a1 + 80);
    LODWORD(v13) = 67110914;
    HIDWORD(v13) = v4;
    *(_WORD *)long long v14 = 2080;
    *(void *)&unint64_t v14[2] = v5;
    __int16 v15 = 1024;
    int v16 = v6;
    __int16 v17 = 2082;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = v8;
    __int16 v21 = 2048;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = v10;
    __int16 v25 = 1024;
    int v26 = v11;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Detected possible coloring mixer glitch on %{public}s: buffer time: %.0f  actual time: %.0f  safety violation: %.0lf  with %d running contexts", (uint8_t *)&v13, 0x46u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 88, 8);
}

void sub_1BAE27D08(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOEngine2::CheckForColoringMixerGlitches(AudioTimeStamp const&,AudioTimeStamp const&,double)::$_0,std::tuple<unsigned int,char const*,int,char const*,double,double,double,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t HALS_IOEngine2::_BeginWriting(HALS_IOEngine2 *this, unsigned int a2, unsigned int a3, const HALS_IOEngineInfo *a4)
{
  return 0;
}

void *HALS_IOEngine2::_ReadFromStream_Fetch(double a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t result = (void *)HALS_IOEngine2_StreamInfo::GetPointersForMixBuffer((uint64_t)&v14, a3, (unint64_t)a1, a4);
  if (v17) {
    uint64_t v8 = (const void *)(v17 + v18);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v14)
  {
    int v9 = v16;
    uint64_t v10 = (const void *)(v14 + v15);
    int v11 = v19;
    if (*(void *)a5)
    {
      long long v12 = (char *)(*(void *)a5 + *(unsigned int *)(a5 + 8));
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315394;
        __int16 v21 = "HALS_IOEngine2.cpp";
        __int16 v22 = 1024;
        int v23 = 3279;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOEngine2::_ReadFromStream_Fetch: ERROR: theOutputBuffer is null", buf, 0x12u);
      }
      long long v12 = 0;
    }
    size_t v13 = (*(_DWORD *)(a3 + 64) * v9);
    uint64_t result = memcpy(v12, v10, v13);
    if (v8) {
      return memcpy(&v12[v13], v8, (*(_DWORD *)(a3 + 64) * v11));
    }
  }
  return result;
}

uint64_t HALS_IOEngine2::_ReadFromStream_ApplyStreamDSP(uint64_t this, unsigned int a2, HALS_IOEngine2_StreamInfo *a3, const AudioServerPlugInIOCycleInfo *a4, unsigned int a5)
{
  uint64_t v5 = **((void **)a3 + 23);
  if (v5 && *(unsigned char *)(v5 + 762))
  {
    uint64_t v8 = this;
    p_mInputTime = &a4->mInputTime;
    p_UInt64 mHostTime = &a4->mInputTime.mHostTime;
    kdebug_trace();
    HALS_IOEngine2_StreamInfo::GetPointersForMixBuffer((uint64_t)&v27, (uint64_t)a3, (unint64_t)p_mInputTime->mSampleTime, a5);
    unsigned int v26 = v29;
    if (v30) {
      uint64_t v11 = v30 + v31;
    }
    else {
      uint64_t v11 = 0;
    }
    if (v27)
    {
      uint64_t v12 = v32;
      uint64_t v13 = v27 + v28;
      HALS_IOStreamDSP::AddInputStreamAtIndex(*(void *)(*((void *)a3 + 23) + 168), *(void *)(*((void *)a3 + 23) + 176), *((unsigned int *)a3 + 17) | ((unint64_t)v29 << 32), v13, 0);
      long long v14 = *(_OWORD *)&p_mInputTime->mRateScalar;
      v24[0] = *(_OWORD *)&p_mInputTime->mSampleTime;
      v24[1] = v14;
      long long v15 = *(_OWORD *)&p_mInputTime->mSMPTETime.mHours;
      _OWORD v24[2] = *(_OWORD *)&p_mInputTime->mSMPTETime.mSubframes;
      v24[3] = v15;
      (*(void (**)(uint64_t))(*(void *)v8 + 328))(v8);
      HALS_IOEngine2_StreamInfo::ApplyDSP(*((void *)a3 + 23), v24, 0, (void *)(*((void *)a3 + 23) + 168), v13, &v26);
      if (v11)
      {
        long long v16 = *((_OWORD *)p_mHostTime + 1);
        long long v20 = *(_OWORD *)p_mHostTime;
        double mSampleTime = p_mInputTime->mSampleTime;
        long long v21 = v16;
        long long v22 = *((_OWORD *)p_mHostTime + 2);
        UInt64 v23 = p_mHostTime[6];
        double v18 = mSampleTime + (double)__PAIR64__(DWORD1(v22), v26);
        HALS_IOStreamDSP::AddInputStreamAtIndex(*(void *)(*((void *)a3 + 23) + 168), *(void *)(*((void *)a3 + 23) + 176), *((unsigned int *)a3 + 17) | (unint64_t)(v12 << 32), v11, 0);
        double v19 = v18;
        (*(void (**)(uint64_t))(*(void *)v8 + 328))(v8);
        HALS_IOEngine2_StreamInfo::ApplyDSP(*((void *)a3 + 23), (long long *)&v19, 1, (void *)(*((void *)a3 + 23) + 168), v11, &v25);
      }
    }
    return kdebug_trace();
  }
  return this;
}

uint64_t HALS_IOEngine2::_ReadFromStream_ConvertToTempBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = *(AudioConverterRef **)(a3 + 160);
  if (*(void *)a8) {
    uint64_t v10 = (char *)(*(void *)a8 + *(unsigned int *)(a8 + 8));
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *a5;
  if (*(void *)a6) {
    uint64_t v12 = (void *)(*(void *)a6 + *(unsigned int *)(a6 + 8));
  }
  else {
    uint64_t v12 = 0;
  }
  int v13 = *(_DWORD *)(a6 + 16);
  if (v11)
  {
    long long v14 = (void *)(v11 + *((unsigned int *)a5 + 2));
    int v15 = *((_DWORD *)a5 + 4);
    uint64_t v16 = (*(_DWORD *)(a3 + 144) * v15);
    UInt32 ioOutputDataSize = *(_DWORD *)(a3 + 64) * v15;
    uint64_t result = AudioConverterConvertBuffer(*v9, v16, v10, &ioOutputDataSize, v14);
    if (!v12) {
      return result;
    }
  }
  else
  {
    uint64_t v16 = 0;
    if (!v12) {
      return result;
    }
  }
  UInt32 v18 = *(_DWORD *)(a3 + 144) * v13;
  UInt32 ioOutputDataSize = *(_DWORD *)(a3 + 64) * v13;
  return AudioConverterConvertBuffer(*v9, v18, &v10[v16], &ioOutputDataSize, v12);
}

uint64_t HALS_IOEngine2::_ReadFromStream_ConvertToMixBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  HALS_IOEngine2_StreamInfo::GetPointersForMixBuffer((uint64_t)v13, a3, (unint64_t)*(double *)(a4 + 80), a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 1136))(a1, a2, a3, a4, v13, &v14, a5, a6);
}

uint64_t HALS_IOEngine2::_EndReading(HALS_IOEngine2 *this, unsigned int a2, unsigned int a3, const HALS_IOEngineInfo *a4)
{
  return 0;
}

uint64_t HALS_IOEngine2::_IsolatedReadFromStream(HALS_IOEngine2 *this, unsigned int a2, uint64_t a3, HALS_IOClock **a4, uint64_t a5)
{
  uint64_t v5 = *((void *)this + 96);
  if (v5)
  {
    uint64_t v11 = v5 + 72;
    uint64_t v10 = *(void *)(v5 + 72);
    unint64_t v12 = (*(void *)(v11 + 8) - v10) >> 3;
    if (v12 <= a2)
    {
      uint64_t v13 = 0;
    }
    else
    {
      if (v12 <= a2) {
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v13 = *(void *)(v10 + 8 * a2);
    }
    CalculateSafetyViolation_Read(a4, a3);
    float v15 = v14;
    if (v15 <= -5.0) {
      kdebug_trace();
    }
    kdebug_trace();
    (*(void (**)(HALS_IOEngine2 *, uint64_t, char *, uint64_t, uint64_t))(*(void *)this + 1104))(this, v13, (char *)a4 + 432, a3, a5);
    kdebug_trace();
    CalculateSafetyViolation_Read(a4, a3);
    float v17 = v16;
    if ((int)v17 <= -5) {
      kdebug_trace();
    }
  }
  return 0;
}

uint64_t HALS_IOEngine2::_ReadFromStream(void *a1, uint64_t a2, unsigned int a3, uint64_t a4, HALS_IOClock **a5, uint64_t a6)
{
  uint64_t v6 = a1[96];
  if (!v6) {
    return 0;
  }
  uint64_t result = 1852797029;
  if (a2)
  {
    for (uint64_t i = a1[92]; i != a1[93]; i += 8)
    {
      if (*(_DWORD *)(*(void *)(*(void *)i + 32) + 16) == a2)
      {
        uint64_t v11 = v6 + 72;
        uint64_t v10 = *(void *)(v6 + 72);
        unint64_t v12 = (*(void *)(v11 + 8) - v10) >> 3;
        if (v12 > a3)
        {
          if (v12 <= a3) {
            std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v13 = *(void *)(v10 + 8 * a3);
          if (v13)
          {
            if (*(_DWORD *)(v13 + 48) == 1819304813 && (*(_DWORD *)(v13 + 52) & 0x40) == 0) {
              HALS_IOEngine2::_ReadFromStream_Mixable(a1, a2, v13, a4, (uint64_t)a5, a6);
            }
            else {
              HALS_IOEngine2::_ReadFromStream_NonMixable(a1, a2, v13, a4, a5, a6);
            }
            return 0;
          }
        }
        return result;
      }
    }
  }
  return result;
}

void HALS_IOEngine2::_ReadFromStream_Mixable(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a6;
  if (*(void *)a6) {
    unint64_t v12 = (void *)(*(void *)a6 + *(unsigned int *)(a6 + 8));
  }
  else {
    unint64_t v12 = 0;
  }
  uint64_t v13 = *(void *)(a3 + 464);
  double v14 = *(double *)(a5 + 512);
  double v15 = fmax(v14, 0.0);
  if (!v13) {
    uint64_t v13 = (uint64_t)v15;
  }
  double v16 = (double)a4;
  double v17 = v14 + (double)a4;
  if (v17 > (double)v13)
  {
    double v46 = v12;
    long long v18 = *(_OWORD *)(a5 + 512);
    long long v56 = *(_OWORD *)(a5 + 496);
    *(_OWORD *)&v57.double mSampleTime = v18;
    long long v19 = *(_OWORD *)(a5 + 480);
    long long v54 = *(_OWORD *)(a5 + 464);
    long long v55 = v19;
    long long v20 = *(_OWORD *)(a5 + 576);
    *(_OWORD *)&v57.mSMPTETime.mHours = *(_OWORD *)(a5 + 560);
    long long v58 = v20;
    long long v21 = *(_OWORD *)(a5 + 544);
    *(_OWORD *)&v57.mRateScalar = *(_OWORD *)(a5 + 528);
    *(_OWORD *)&v57.mSMPTETime.mSubframes = v21;
    long long v22 = *(_OWORD *)(a5 + 640);
    long long v61 = *(_OWORD *)(a5 + 624);
    long long v62 = v22;
    long long v23 = *(_OWORD *)(a5 + 608);
    long long v59 = *(_OWORD *)(a5 + 592);
    long long v60 = v23;
    long long v24 = *(_OWORD *)(a5 + 448);
    long long v52 = *(_OWORD *)(a5 + 432);
    long long v53 = v24;
    unsigned int v25 = (v17 - (double)v13);
    unsigned int v26 = *(_DWORD *)(a1[96] + 16);
    if (v26 >= v25) {
      uint64_t v27 = v25;
    }
    else {
      uint64_t v27 = v26;
    }
    if (v26 < v25) {
      uint64_t v13 = (uint64_t)(v17 - (double)v26);
    }
    uint64_t v28 = *(void *)(a5 + 288);
    DWORD2(v61) = 0;
    long long v58 = 0uLL;
    v57.double mSampleTime = (double)v13;
    v57.UInt64 mHostTime = 0;
    v57.mFlags = 1;
    *(_OWORD *)&v63.double mSampleTime = COERCE_UNSIGNED_INT64((double)v13);
    *(_OWORD *)&v63.mRateScalar = *(_OWORD *)&v57.mRateScalar;
    *(_OWORD *)&v63.mSMPTETime.mSubframes = *(_OWORD *)&v57.mSMPTETime.mSubframes;
    *(_OWORD *)&v63.mSMPTETime.mHours = *(_OWORD *)&v57.mSMPTETime.mHours;
    v63.mFlags = 2;
    HALS_IOClock::TranslateTime(v28, &v57, &v63);
    v57.UInt64 mHostTime = v63.mHostTime;
    v57.mFlags = 3;
    CalculateSafetyViolation_Read((HALS_IOClock **)a5, a4);
    if ((int)v29 <= -5) {
      kdebug_trace();
    }
    kdebug_trace();
    uint64_t v30 = a1[97];
    if (v30)
    {
      uint64_t v44 = *(void **)v30;
      v63.double mSampleTime = *(Float64 *)v30;
      LODWORD(v63.mHostTime) = 0;
      *(int32x2_t *)((char *)&v63.mHostTime + 4) = vmovn_s64(*(int64x2_t *)(v30 + 8));
    }
    else
    {
      uint64_t v44 = 0;
      memset(&v63, 0, 20);
    }
    uint64_t v31 = v27;
    (*(void (**)(void *, uint64_t, uint64_t, long long *, uint64_t, AudioTimeStamp *))(*a1 + 1096))(a1, a2, a3, &v52, v27, &v63);
    kdebug_trace();
    CalculateSafetyViolation_Read((HALS_IOClock **)a5, a4);
    double v33 = v32;
    double v34 = v32;
    if ((int)v32 <= -5) {
      kdebug_trace();
    }
    uint64_t v6 = a6;
    if (v34 <= -5.0)
    {
      for (uint64_t i = (uint64_t *)a1[92]; ; ++i)
      {
        uint64_t v36 = *i;
        if (*(_DWORD *)(*(void *)(*i + 32) + 16) == a2) {
          break;
        }
      }
      uint64_t v37 = *(void *)(a5 + 432);
      *(double *)uint64_t v36 = v33;
      *(void *)(v36 + 8) = v37;
      ++*(_DWORD *)(v36 + 16);
    }
    unsigned int v38 = *(atomic_uint **)(a3 + 200);
    if ((*(unsigned int (**)(void *))(*a1 + 952))(a1))
    {
      uint64_t v39 = *(HALS_IOClock **)(a5 + 288);
      AudioTimeStamp v51 = v57;
      v50[0] = v53;
      v50[1] = v54;
      v50[2] = v55;
      void v50[3] = v56;
      WriteToCaptureFile(v38, v39, &v51, (uint64_t)v50, v31, (uint64_t)v44);
    }
    uint64_t v40 = *(void *)(a3 + 184);
    if (*(void *)v40
      && *(unsigned char *)(*(void *)v40 + 762)
      && (uint64_t v41 = *(void *)(v40 + 24), v41 != *(void *)(v40 + 32))
      && *(_DWORD *)(v40 + 96) != *(_DWORD *)(v41 + 28))
    {
      uint64_t v42 = a1[98];
      if (v42)
      {
        v49[0] = *(void *)v42;
        LODWORD(v49[1]) = 0;
        *(int32x2_t *)((char *)&v49[1] + 4) = vmovn_s64(*(int64x2_t *)(v42 + 8));
      }
      else
      {
        memset(v49, 0, 20);
      }
      memset(v48, 0, sizeof(v48));
      (*(void (**)(void *, uint64_t, uint64_t, long long *, void *, void *, uint64_t, AudioTimeStamp *))(*a1 + 1136))(a1, a2, a3, &v52, v49, v48, v31, &v63);
      (*(void (**)(void *, uint64_t, uint64_t, long long *, uint64_t))(*a1 + 1152))(a1, a2, a3, &v52, v31);
    }
    else if (v57.mSampleTime >= 0.0)
    {
      (*(void (**)(void *, uint64_t, uint64_t, long long *, uint64_t, AudioTimeStamp *, Float64))(*a1 + 1128))(a1, a2, a3, &v52, v31, &v63, v57.mSampleTime);
    }
    else
    {
      bzero(v44, (*(_DWORD *)(a3 + 64) * v31));
    }
    if (a1[133])
    {
      AudioTimeStamp v47 = v57;
      (*(void (**)(void *, uint64_t, AudioTimeStamp *, uint64_t))(*a1 + 1288))(a1, a3, &v47, v31);
    }
    (*(void (**)(void *, uint64_t, uint64_t, long long *, uint64_t))(*a1 + 1144))(a1, a2, a3, &v52, v31);
    double v14 = *(double *)(a5 + 512);
    uint64_t v43 = (uint64_t)(v14 + v16);
    if (*(void *)(a3 + 464) <= v43) {
      *(void *)(a3 + 464) = v43;
    }
    unint64_t v12 = v46;
  }
  if (v14 >= 0.0)
  {
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*a1 + 1160))(a1, a3, a4, v6);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*a1 + 1168))(a1, a2, a3, a5, a4, v6);
  }
  else
  {
    bzero(v12, (*(_DWORD *)(a3 + 64) * a4));
  }
}

atomic_uint *HALS_IOEngine2::_ReadFromStream_NonMixable(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, HALS_IOClock **a5, uint64_t a6)
{
  CalculateSafetyViolation_Read(a5, a4);
  float v13 = v12;
  if (v13 <= -5.0) {
    kdebug_trace();
  }
  kdebug_trace();
  (*(void (**)(void *, uint64_t, uint64_t, char *, uint64_t, uint64_t))(*a1 + 1096))(a1, a2, a3, (char *)a5 + 432, a4, a6);
  kdebug_trace();
  CalculateSafetyViolation_Read(a5, a4);
  double v15 = v14;
  double v16 = v14;
  float v17 = v14;
  if ((int)v17 <= -5) {
    kdebug_trace();
  }
  if (v16 < -5.0)
  {
    for (uint64_t i = (uint64_t *)a1[92]; ; ++i)
    {
      uint64_t v19 = *i;
      if (*(_DWORD *)(*(void *)(*i + 32) + 16) == a2) {
        break;
      }
    }
    long long v20 = a5[54];
    *(double *)uint64_t v19 = v15;
    *(void *)(v19 + 8) = v20;
    ++*(_DWORD *)(v19 + 16);
  }
  long long v21 = *(atomic_uint **)(a3 + 200);
  uint64_t result = (atomic_uint *)(*(uint64_t (**)(void *))(*a1 + 952))(a1);
  if (result)
  {
    long long v23 = a5[36];
    long long v24 = *((_OWORD *)a5 + 33);
    *(_OWORD *)&v30.double mSampleTime = *((_OWORD *)a5 + 32);
    *(_OWORD *)&v30.mRateScalar = v24;
    long long v25 = *((_OWORD *)a5 + 35);
    *(_OWORD *)&v30.mSMPTETime.mSubframes = *((_OWORD *)a5 + 34);
    *(_OWORD *)&v30.mSMPTETime.mHours = v25;
    long long v26 = *((_OWORD *)a5 + 29);
    v29[0] = *((_OWORD *)a5 + 28);
    v29[1] = v26;
    long long v27 = *((_OWORD *)a5 + 31);
    if (*(void *)a6) {
      uint64_t v28 = *(void *)a6 + *(unsigned int *)(a6 + 8);
    }
    else {
      uint64_t v28 = 0;
    }
    v29[2] = *((_OWORD *)a5 + 30);
    void v29[3] = v27;
    return WriteToCaptureFile(v21, v23, &v30, (uint64_t)v29, a4, v28);
  }
  return result;
}

uint64_t HALS_IOEngine2::_BeginReading(HALS_IOEngine2 *this, unsigned int a2, unsigned int a3, const HALS_IOEngineInfo *a4)
{
  return 0;
}

uint64_t HALS_IOEngine2::_EndIOCycle(HALS_IOEngine2 *this, const BOOL *a2, const HALS_IOEngineInfo *a3)
{
  uint64_t v3 = *((void *)this + 96);
  uint64_t v4 = *(void *)(v3 + 48);
  uint64_t v5 = *(void *)(v3 + 56) - v4;
  if ((v5 & 0x7FFFFFFF8) != 0)
  {
    unint64_t v7 = 0;
    do
    {
      unint64_t v8 = v5 >> 3;
      if (v7 < v8)
      {
        if (v8 <= v7) {
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        }
        int v9 = *(HALS_IOEngine2_StreamInfo **)(v4 + 8 * v7);
        if (v9)
        {
          HALS_IOEngine2_StreamInfo::end_cycle(v9, a2);
          uint64_t v3 = *((void *)this + 96);
        }
      }
      ++v7;
      uint64_t v4 = *(void *)(v3 + 48);
      uint64_t v5 = *(void *)(v3 + 56) - v4;
    }
    while (v7 < ((unint64_t)v5 >> 3));
  }
  return 0;
}

uint64_t HALS_IOEngine2::_BeginIOCycle(HALS_IOEngine2 *this, unsigned int a2, const HALS_IOEngineInfo *a3)
{
  uint64_t v3 = *((void *)this + 96);
  uint64_t v4 = *(void *)(v3 + 48);
  uint64_t v5 = *(void *)(v3 + 56) - v4;
  if ((v5 & 0x7FFFFFFF8) != 0)
  {
    unint64_t v6 = 0;
    do
    {
      unint64_t v7 = v5 >> 3;
      if (v6 < v7)
      {
        if (v7 <= v6) {
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v8 = *(void *)(v4 + 8 * v6);
        if (v8)
        {
          int v9 = *((_DWORD *)a3 + 78);
          long long v10 = *((_OWORD *)a3 + 38);
          long long v12 = *((_OWORD *)a3 + 39);
          long long v11 = *((_OWORD *)a3 + 40);
          *(_OWORD *)(v8 + 392) = *((_OWORD *)a3 + 37);
          *(_OWORD *)(v8 + 408) = v10;
          *(_OWORD *)(v8 + 424) = v12;
          *(_OWORD *)(v8 + 440) = v11;
          long long v13 = *((_OWORD *)a3 + 27);
          *(_OWORD *)(v8 + 248) = *((_OWORD *)a3 + 28);
          *(_OWORD *)(v8 + 232) = v13;
          long long v14 = *((_OWORD *)a3 + 29);
          long long v15 = *((_OWORD *)a3 + 30);
          long long v16 = *((_OWORD *)a3 + 32);
          *(_OWORD *)(v8 + 296) = *((_OWORD *)a3 + 31);
          *(_OWORD *)(v8 + 312) = v16;
          *(_OWORD *)(v8 + 264) = v14;
          *(_OWORD *)(v8 + 280) = v15;
          long long v17 = *((_OWORD *)a3 + 33);
          long long v18 = *((_OWORD *)a3 + 34);
          long long v19 = *((_OWORD *)a3 + 36);
          *(_OWORD *)(v8 + 360) = *((_OWORD *)a3 + 35);
          *(_OWORD *)(v8 + 376) = v19;
          *(_OWORD *)(v8 + 328) = v17;
          *(_OWORD *)(v8 + 344) = v18;
          *(_DWORD *)(v8 + 456) = v9;
          uint64_t v3 = *((void *)this + 96);
        }
      }
      ++v6;
      uint64_t v4 = *(void *)(v3 + 48);
      uint64_t v5 = *(void *)(v3 + 56) - v4;
    }
    while (v6 < ((unint64_t)v5 >> 3));
  }
  return 0;
}

uint64_t HALS_IOEngine2::_LastIOThreadStopped(HALS_IOEngine2 *this, unsigned int a2, const HALS_IOEngineInfo *a3)
{
  return 0;
}

uint64_t HALS_IOEngine2::_FirstIOThreadStarted(HALS_IOEngine2 *this, unsigned int a2, const HALS_IOEngineInfo *a3)
{
  return 0;
}

uint64_t HALS_IOEngine2::_EndIOThread(HALS_IOEngine2 *this, uint64_t a2, const HALS_IOEngineInfo *a3, const applesauce::CF::DictionaryRef *a4)
{
  int v4 = *((_DWORD *)this + 198);
  if (v4)
  {
    int v5 = v4 - 1;
    *((_DWORD *)this + 198) = v5;
    if (!v5) {
      (*(void (**)(HALS_IOEngine2 *, uint64_t, const HALS_IOEngineInfo *, const applesauce::CF::DictionaryRef *))(*(void *)this + 1040))(this, a2, a3, a4);
    }
  }
  return 0;
}

uint64_t HALS_IOEngine2::_BeginIOThread(HALS_IOEngine2 *this, uint64_t a2, const HALS_IOEngineInfo *a3, const applesauce::CF::DictionaryRef *a4)
{
  uint64_t v5 = *(void *)this;
  if (!*((_DWORD *)this + 198))
  {
    uint64_t result = (*(uint64_t (**)(HALS_IOEngine2 *, uint64_t, const HALS_IOEngineInfo *, const applesauce::CF::DictionaryRef *))(v5 + 1032))(this, a2, a3, a4);
    if (result) {
      return result;
    }
    int v7 = 1;
    goto LABEL_6;
  }
  (*(void (**)(HALS_IOEngine2 *, uint64_t, const HALS_IOEngineInfo *, const applesauce::CF::DictionaryRef *))(v5 + 1280))(this, a2, a3, a4);
  int v6 = *((_DWORD *)this + 198);
  if (v6 != -1)
  {
    int v7 = v6 + 1;
LABEL_6:
    uint64_t result = 0;
    *((_DWORD *)this + 198) = v7;
    return result;
  }
  return 1852797029;
}

uint64_t HALS_IOEngine2::_TellHardwareToStart()
{
  return 0;
}

uint64_t HALS_IOEngine2::_StopIO(AMCP::Log::Scope_Registry *a1, uint64_t a2, int a3, unsigned char *a4)
{
  int v6 = a1;
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7)
  {
    for (uint64_t i = (uint64_t *)*((void *)a1 + 92); i != *((uint64_t **)a1 + 93); ++i)
    {
      uint64_t v9 = *i;
      if (*(_DWORD *)(*(void *)(*i + 32) + 16) == v7)
      {
        if (!a3 && *(unsigned char *)(v9 + 48))
        {
          uint64_t v10 = *((void *)a1 + 96);
          if (*(char *)(v9 + 159) < 0) {
            std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)(v9 + 136), *(void *)(v9 + 144));
          }
          else {
            std::string v59 = *(std::string *)(v9 + 136);
          }
          HALS_IOEngine2_DeviceInfo::StopContext(v10, v7, (uint64_t)&v59);
          long long v11 = a4;
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v59.__r_.__value_.__l.__data_);
          }
          *(_DWORD *)(v9 + 104) = 0;
          uint64_t v13 = *(void *)(v9 + 112);
          for (uint64_t j = *(void *)(v9 + 120);
                j != v13;
          *(void *)(v9 + 120) = v13;
          *(unsigned char *)(v9 + 48) = 0;
          a1 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(AMCP::Log::Scope_Registry *))(*(void *)v6 + 704))(v6);
          int v7 = *(_DWORD *)(a2 + 16);
          a4 = v11;
        }
        break;
      }
    }
  }
  int v14 = *((_DWORD *)v6 + 4);
  uint64_t v15 = *((void *)v6 + 133);
  uint64_t v16 = *((void *)v6 + 132);
  long long v17 = "Prewarmed";
  if (!v16) {
    long long v17 = "Stopped";
  }
  if (v15) {
    long long v18 = "Running";
  }
  else {
    long long v18 = v17;
  }
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v59, "com.apple.coreaudio", "AMCP");
  long long v19 = *(caulk::concurrent::messenger **)(v59.__r_.__value_.__r.__words[0] + 8);
  long long v20 = pthread_self();
  mach_port_t v21 = pthread_mach_thread_np(v20);
  uint64_t v22 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 80, 8);
  *(_DWORD *)(v22 + 16) = 0;
  *(_DWORD *)(v22 + 24) = v21;
  *(unsigned char *)(v22 + 20) = 0;
  *(void *)(v22 + 32) = "HALS_IOEngine2.cpp";
  *(_DWORD *)(v22 + 40) = 2635;
  *(_DWORD *)(v22 + 44) = v14;
  *(_DWORD *)(v22 + 48) = v7;
  *(void *)(v22 + 56) = v16;
  *(void *)(v22 + 64) = v15;
  *(void *)(v22 + 72) = v18;
  *(void *)uint64_t v22 = &unk_1F147A530;
  *(void *)(v22 + 8) = 0;
  caulk::concurrent::messenger::enqueue(v19, (caulk::concurrent::message *)v22);
  long long v23 = (void *)((char *)v6 + 1056);
  if (v59.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v59.__r_.__value_.__l.__size_);
  }
  uint64_t result = HALS_IOPrewarmManager::Stop((void *)v6 + 132, *(_DWORD *)(*(void *)(a2 + 96) + 1060));
  unsigned int v25 = result;
  unsigned int v26 = atomic_load((unsigned int *)v6 + 268);
  if (result == v26)
  {
    uint64_t v27 = *((void *)v6 + 96);
    uint64_t v28 = *(unint64_t **)(v27 + 72);
    double v29 = *(unint64_t **)(v27 + 80);
    int64_t v30 = (char *)v29 - (char *)v28;
    if ((((char *)v29 - (char *)v28) & 0x7FFFFFFF8) != 0)
    {
      unsigned int v31 = 0;
      while ((v30 & 0x7FFFFFFF8) != 0)
      {
        if (v29 == v28) {
          goto LABEL_72;
        }
        unint64_t v32 = *v28;
        if (!*v28) {
          goto LABEL_41;
        }
        unint64_t v32 = *(unsigned int *)(v32 + 12);
        double v33 = (uint64_t *)*((void *)v6 + 92);
        double v34 = (uint64_t *)*((void *)v6 + 93);
        if (v33 == v34) {
          goto LABEL_41;
        }
        while (1)
        {
          uint64_t result = *v33;
          unint64_t v35 = *(void *)(*v33 + 88);
          if (v35)
          {
            if (v35 <= v32) {
              std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
            }
            int v36 = *(unsigned __int8 *)(result + 48);
            uint64_t result = *(void *)(*(void *)(result + 80) + 8 * (v32 >> 6)) & (1 << v32);
            if (v36 && result != 0) {
              break;
            }
          }
          if (++v33 == v34) {
            goto LABEL_41;
          }
        }
LABEL_44:
        ++v31;
        uint64_t v28 = *(unint64_t **)(v27 + 72);
        double v29 = *(unint64_t **)(v27 + 80);
        int64_t v30 = (char *)v29 - (char *)v28;
        if (v31 >= ((unint64_t)((char *)v29 - (char *)v28) >> 3)) {
          goto LABEL_71;
        }
      }
      unint64_t v32 = 0;
LABEL_41:
      unint64_t v38 = v29 - v28;
      if (v32 < v38)
      {
        if (v38 <= v32) {
          goto LABEL_72;
        }
        *(void *)(v28[v32] + 464) = 0;
      }
      goto LABEL_44;
    }
  }
  else
  {
    atomic_store(result != 0, (unsigned __int8 *)v6 + 1076);
    unsigned int v39 = atomic_load((unsigned int *)v6 + 268);
    if (*((void *)v6 + 133)) {
      BOOL v40 = 0;
    }
    else {
      BOOL v40 = *v23 == 0;
    }
    if (v39) {
      BOOL v41 = v40;
    }
    else {
      BOOL v41 = 0;
    }
    uint64_t result = (*(uint64_t (**)(AMCP::Log::Scope_Registry *, uint64_t, uint64_t, BOOL))(*(void *)v6 + 1008))(v6, a2, result, v41);
    unsigned int v42 = atomic_load((unsigned int *)v6 + 268);
    if (!*((void *)v6 + 133) && v42 && !*v23)
    {
      long long v58 = a4;
      uint64_t result = (*(uint64_t (**)(AMCP::Log::Scope_Registry *))(*(void *)v6 + 1352))(v6);
      uint64_t v43 = *((void *)v6 + 96);
      if (v43)
      {
        uint64_t v44 = 0;
        uint64_t v45 = v43 + 48;
        char v46 = 1;
        do
        {
          char v47 = v46;
          double v48 = (void *)(v45 + 24 * v44);
          unint64_t v49 = v48[1] - *v48;
          if ((v49 & 0x7FFFFFFF8) != 0)
          {
            unint64_t v50 = 0;
            uint64_t v51 = (v49 >> 3);
            do
            {
              if (v50 >= (uint64_t)(v48[1] - *v48) >> 3) {
LABEL_72:
              }
                std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
              uint64_t v52 = *(void *)(*v48 + 8 * v50);
              uint64_t v53 = *(void *)(v52 + 472);
              if (*(void *)(v52 + 480) != v53) {
                *(void *)(v52 + 480) = v53;
              }
              std::vector<float,HALB_IOBufferManager_Server::Allocator<float>>::shrink_to_fit((uint64_t *)(v52 + 472));
              long long v54 = *(AudioConverterRef **)(v52 + 160);
              *(void *)(v52 + 160) = 0;
              if (v54) {
                std::default_delete<FormatConverter>::operator()[abi:ne180100](v54);
              }
              std::unique_ptr<HALB_CaptureFile>::reset[abi:ne180100]((unsigned __int8 ***)(v52 + 200), 0);
              long long v55 = *(uint64_t **)(v52 + 184);
              uint64_t result = *v55;
              if (*v55)
              {
                uint64_t result = DSPGraph::Graph::reset((DSPGraph::Graph *)result);
                uint64_t v56 = v55[3];
                uint64_t v57 = v55[4];
                while (v56 != v57)
                {
                  uint64_t result = (uint64_t)std::unique_ptr<HALB_CaptureFile>::reset[abi:ne180100]((unsigned __int8 ***)(v56 + 80), 0);
                  v56 += 88;
                }
              }
              ++v50;
            }
            while (v50 != v51);
          }
          char v46 = 0;
          uint64_t v44 = 1;
        }
        while ((v47 & 1) != 0);
      }
      unsigned char *v58 = 1;
    }
  }
LABEL_71:
  atomic_store(v25, (unsigned int *)v6 + 268);
  return result;
}

void sub_1BAE29490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOEngine2_DeviceInfo::StopContext(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a1 + 48;
  char v7 = 1;
  do
  {
    char v8 = v7;
    uint64_t v9 = (void *)(v6 + 24 * v5);
    uint64_t v10 = v9 + 1;
    unint64_t v11 = v9[1] - *v9;
    if ((v11 & 0x7FFFFFFF8) != 0)
    {
      unint64_t v12 = 0;
      uint64_t v13 = (v11 >> 3);
      do
      {
        if (v12 >= (uint64_t)(*v10 - *v9) >> 3) {
LABEL_18:
        }
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        uint64_t v14 = *(void *)(*v9 + 8 * v12);
        HALS_IOEngine2_DeviceInfo::get_source_id((uint64_t)&v17, a2, a3, v12);
        if (*(unsigned char *)(v14 + 20) || !AMCP::Feature_Flags::use_mcp_coloring_mixer(0, v15)) {
          int v16 = 0;
        }
        else {
          int v16 = (*(uint64_t (**)(void, uint64_t *, void))(**(void **)(v14 + 208) + 192))(*(void *)(v14 + 208), &v17, 0);
        }
        if (v19 < 0)
        {
          operator delete(__p);
          if (v16)
          {
LABEL_13:
            if (v12 >= (uint64_t)(*v10 - *v9) >> 3) {
              goto LABEL_18;
            }
            HALS_IOEngine2_StreamInfo::end_cycle(*(HALS_IOEngine2_StreamInfo **)(*v9 + 8 * v12), v15);
          }
        }
        else if (v16)
        {
          goto LABEL_13;
        }
        ++v12;
      }
      while (v13 != v12);
    }
    char v7 = 0;
    uint64_t v5 = 1;
  }
  while ((v8 & 1) != 0);
}

void sub_1BAE29618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOEngine2_IOContextInfo::BufferInfo::~BufferInfo(HALS_IOEngine2_IOContextInfo::BufferInfo *this)
{
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StopIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int,unsigned long long,unsigned long long,char const*>>::perform(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
  int v2 = *v13;
  if (*(void *)v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = *(void *)(a1 + 64);
    uint64_t v11 = *(void *)(a1 + 72);
    LODWORD(v13) = 67110914;
    HIDWORD(v13) = v4;
    *(_WORD *)uint64_t v14 = 2080;
    *(void *)&unint64_t v14[2] = v5;
    __int16 v15 = 1024;
    int v16 = v6;
    __int16 v17 = 1024;
    int v18 = v7;
    __int16 v19 = 1024;
    int v20 = v8;
    __int16 v21 = 2048;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = v10;
    __int16 v25 = 2080;
    uint64_t v26 = v11;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d HALS_IOEngine2::_StopIO(%d) called on Context %d  current state: Prewarm: %llu Play: %llu State: %s", (uint8_t *)&v13, 0x42u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 80, 8);
}

void sub_1BAE297D8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StopIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int,unsigned long long,unsigned long long,char const*>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

AMCP::Log::Scope_Registry *HALS_IOEngine2::_StartIO(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v111 = *MEMORY[0x1E4F143B8];
  int v5 = *(_DWORD *)(a1 + 16);
  int v94 = *(_DWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 1064);
  uint64_t v7 = *(void *)(a1 + 1056);
  if (v7) {
    int v8 = "Prewarmed";
  }
  else {
    int v8 = "Stopped";
  }
  if (v6) {
    uint64_t v9 = "Running";
  }
  else {
    uint64_t v9 = v8;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v107, "com.apple.coreaudio", "AMCP");
  uint64_t shared_owners = (caulk::concurrent::messenger *)v107->__shared_owners_;
  uint64_t v11 = pthread_self();
  mach_port_t v12 = pthread_mach_thread_np(v11);
  uint64_t v13 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 80, 8);
  *(_DWORD *)(v13 + 16) = 0;
  *(unsigned char *)(v13 + 20) = 2;
  *(_DWORD *)(v13 + 24) = v12;
  *(void *)(v13 + 32) = "HALS_IOEngine2.cpp";
  *(_DWORD *)(v13 + 40) = 2535;
  *(_DWORD *)(v13 + 44) = v5;
  *(_DWORD *)(v13 + 48) = v94;
  *(void *)(v13 + 56) = v7;
  *(void *)(v13 + 64) = v6;
  *(void *)(v13 + 72) = v9;
  *(void *)uint64_t v13 = &unk_1F147A2F8;
  *(void *)(v13 + 8) = 0;
  caulk::concurrent::messenger::enqueue(shared_owners, (caulk::concurrent::message *)v13);
  if (v108 != 0.0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v108);
  }
  uint64_t v14 = (AMCP::Log::Scope_Registry *)HALS_IOPrewarmManager::Start((void *)(a1 + 1056), *(_DWORD *)(*(void *)(a2 + 96) + 1060));
  unsigned int v15 = atomic_load((unsigned int *)(a1 + 1072));
  if (v14 == v15)
  {
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v107, "com.apple.coreaudio", "AMCP");
    int v16 = (caulk::concurrent::messenger *)v107->__shared_owners_;
    __int16 v17 = pthread_self();
    mach_port_t v18 = pthread_mach_thread_np(v17);
    uint64_t v19 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
    *(_DWORD *)(v19 + 16) = 0;
    *(unsigned char *)(v19 + 20) = 0;
    *(_DWORD *)(v19 + 24) = v18;
    *(void *)(v19 + 32) = "HALS_IOEngine2.cpp";
    *(_DWORD *)(v19 + 40) = 2543;
    *(_DWORD *)(v19 + 44) = v5;
    *(_DWORD *)(v19 + 48) = v94;
    *(void *)uint64_t v19 = &unk_1F147A350;
    *(void *)(v19 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v16, (caulk::concurrent::message *)v19);
    if (v108 != 0.0) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v108);
    }
LABEL_85:
    __int16 v25 = 0;
    goto LABEL_86;
  }
  unsigned int v20 = v14;
  unsigned int v21 = atomic_load((unsigned int *)(a1 + 1072));
  if (*(void *)(a1 + 1064)) {
    BOOL v22 = 1;
  }
  else {
    BOOL v22 = *(void *)(a1 + 1056) != 0;
  }
  if (v21) {
    BOOL v23 = 0;
  }
  else {
    BOOL v23 = v22;
  }
  uint64_t v24 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t, uint64_t, AMCP::Log::Scope_Registry *, BOOL))(*(void *)a1 + 1000))(a1, a2, v14, v23);
  __int16 v25 = v24;
  if (v24)
  {
    AMCP::Log::Scope_Registry::get(v24);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v107, "com.apple.coreaudio", "AMCP");
    uint64_t v26 = (caulk::concurrent::messenger *)v107->__shared_owners_;
    uint64_t v27 = pthread_self();
    mach_port_t v28 = pthread_mach_thread_np(v27);
    uint64_t v29 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
    *(_DWORD *)(v29 + 16) = 0;
    *(unsigned char *)(v29 + 20) = 16;
    *(_DWORD *)(v29 + 24) = v28;
    *(void *)(v29 + 32) = "HALS_IOEngine2.cpp";
    *(_DWORD *)(v29 + 40) = 2558;
    *(_DWORD *)(v29 + 44) = v94;
    *(_DWORD *)(v29 + 48) = v25;
    *(void *)uint64_t v29 = &unk_1F147A3A8;
    *(void *)(v29 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v26, (caulk::concurrent::message *)v29);
    goto LABEL_20;
  }
  uint64_t v30 = *(void *)(a1 + 1064);
  uint64_t v31 = *(void *)(a1 + 1056);
  if (v31) {
    unint64_t v32 = "Prewarmed";
  }
  else {
    unint64_t v32 = "Stopped";
  }
  if (v30) {
    double v33 = "Running";
  }
  else {
    double v33 = v32;
  }
  AMCP::Log::Scope_Registry::get(v24);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v107, "com.apple.coreaudio", "AMCP");
  double v34 = (caulk::concurrent::messenger *)v107->__shared_owners_;
  unint64_t v35 = pthread_self();
  mach_port_t v36 = pthread_mach_thread_np(v35);
  uint64_t v37 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 80, 8);
  *(_DWORD *)(v37 + 16) = 0;
  *(unsigned char *)(v37 + 20) = 0;
  *(_DWORD *)(v37 + 24) = v36;
  *(void *)(v37 + 32) = "HALS_IOEngine2.cpp";
  *(_DWORD *)(v37 + 40) = 2567;
  *(_DWORD *)(v37 + 44) = v5;
  *(_DWORD *)(v37 + 48) = v94;
  *(void *)(v37 + 56) = v31;
  *(void *)(v37 + 64) = v30;
  *(void *)(v37 + 72) = v33;
  *(void *)uint64_t v37 = &unk_1F147A400;
  *(void *)(v37 + 8) = 0;
  caulk::concurrent::messenger::enqueue(v34, (caulk::concurrent::message *)v37);
  if (v108 != 0.0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v108);
  }
  atomic_store(v20, (unsigned int *)(a1 + 1072));
  if (!v23) {
    goto LABEL_85;
  }
  uint64_t v38 = *(void *)(a1 + 768);
  if (v38)
  {
    HALS_IOContext::GetAudioCaptureMode((HALS_IOContext *)a2);
    uint64_t v39 = 0;
    char v40 = 1;
    do
    {
      char v96 = v40;
      BOOL v41 = (void *)(v38 + 48 + 24 * v39);
      unint64_t v42 = v41[1] - *v41;
      if ((v42 & 0x7FFFFFFF8) != 0)
      {
        unint64_t v43 = 0;
        uint64_t v97 = (v42 >> 3);
        do
        {
          if (v43 >= (uint64_t)(v41[1] - *v41) >> 3) {
            std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v44 = *(void **)(*v41 + 8 * v43);
          *((_DWORD *)v44 + 9) = (*(uint64_t (**)(void))(*(void *)*v44 + 336))(*v44);
          v44[58] = 0;
          if (!*((unsigned char *)v44 + 20) && AMCP::Feature_Flags::use_mcp_coloring_mixer(0, v45))
          {
            LODWORD(v46) = *((_DWORD *)v44 + 9);
            uint64_t v47 = *(void *)(*v44 + 1080);
            uint64_t v48 = *(void *)(*v44 + 1088);
            if (v48) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v48 + 8), 1uLL, memory_order_relaxed);
            }
            *(void *)&long long v49 = v47;
            *((void *)&v49 + 1) = v48;
            LODWORD(v107) = 2;
            double v108 = (double)v46;
            unsigned __int16 v109 = 0;
            long long v110 = v49;
            uint64_t v50 = (*(uint64_t (**)(void))(*(void *)*v44 + 320))();
            uint64_t v51 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v50 + 216))(v50);
            std::string::basic_string[abi:ne180100]<0>(v99, v51);
            uint64_t v52 = *((unsigned int *)v44 + 3);
            *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)v99;
            std::string::size_type v53 = v100;
            v99[1] = 0;
            std::string::size_type v100 = 0;
            v98[1] = 0;
            v99[0] = 0;
            v104.__r_.__value_.__r.__words[2] = v53;
            uint64_t v105 = v52;
            int v106 = 0;
            v98[0] = 0;
            HALS_System::GetInstance(__p, 0, v98);
            uint64_t v54 = *((void *)__p[0] + 167);
            long long v55 = (std::__shared_weak_count *)*((void *)__p[0] + 168);
            if (v55) {
              atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (__p[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
            }
            AMCP::Graph::Synchronized_Mixer_Manager::get_mixer((unint64_t)__p, v54, (unsigned __int8 **)&v104, (uint64_t)(v44 + 5), (const AMCP::DAL::DAL_Time_Delta *)&v107);
            uint64_t v56 = __p[0];
            uint64_t v57 = (std::__shared_weak_count *)v44[27];
            *((_OWORD *)v44 + 13) = *(_OWORD *)__p;
            if (v57)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v57);
              uint64_t v58 = v44[26];
            }
            else
            {
              uint64_t v58 = (uint64_t)v56;
            }
            std::string v59 = (void *)*v44;
            __p[0] = &unk_1F147CB78;
            __p[1] = v59;
            mach_port_t v102 = v44;
            CFStringRef v103 = __p;
            AMCP::DAL::Synchronized_Mixer::add_emission_handler(v58, __p);
            std::__function::__value_func<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::~__value_func[abi:ne180100](__p);
            if (v55) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v55);
            }
            if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v104.__r_.__value_.__l.__data_);
            }
            if (*((void *)&v110 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v110 + 1));
            }
          }
          if (*((_DWORD *)v44 + 12) == 1819304813)
          {
            int v60 = *((_DWORD *)v44 + 13);
            if ((v60 & 0x40) == 0)
            {
              if ((v60 & 0x20) != 0) {
                int v61 = 1;
              }
              else {
                int v61 = *((_DWORD *)v44 + 17);
              }
              unint64_t v62 = (v61 * *((_DWORD *)v44 + 9));
              uint64_t v64 = v44[59];
              AudioTimeStamp v63 = (_DWORD *)v44[60];
              unint64_t v65 = ((uint64_t)v63 - v64) >> 2;
              if (v62 <= v65)
              {
                if (v62 < v65) {
                  v44[60] = v64 + 4 * v62;
                }
              }
              else
              {
                uint64_t v66 = v44[61];
                if (v62 - v65 <= (v66 - (uint64_t)v63) >> 2)
                {
                  int v79 = &v63[v62 - v65];
                  uint64_t v80 = 4 * v62 - 4 * v65;
                  do
                  {
                    *v63++ = 0;
                    v80 -= 4;
                  }
                  while (v80);
                  v44[60] = v79;
                }
                else
                {
                  uint64_t v67 = v66 - v64;
                  uint64_t v68 = v67 >> 1;
                  if (v67 >> 1 <= v62) {
                    uint64_t v68 = v62;
                  }
                  if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL) {
                    uint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    uint64_t v69 = v68;
                  }
                  *((void *)&v110 + 1) = v44 + 61;
                  vm_address_t Buffer = HALB_IOBufferManager_Server::AllocateBuffer((4 * v69));
                  AudioTimeStamp v71 = (_DWORD *)(Buffer + 4 * v65);
                  long long v72 = v71;
                  uint64_t v73 = 4 * v62 - 4 * v65;
                  do
                  {
                    *v72++ = 0;
                    v73 -= 4;
                  }
                  while (v73);
                  mach_port_t v74 = (std::__shared_weak_count *)v44[59];
                  uint64_t v75 = (std::__shared_weak_count *)v44[60];
                  if (v75 != v74)
                  {
                    CFTypeRef v76 = (std::__shared_weak_count *)v44[60];
                    do
                    {
                      int shared_weak_owners_high = HIDWORD(v76[-1].__shared_weak_owners_);
                      CFTypeRef v76 = (std::__shared_weak_count *)((char *)v76 - 4);
                      *--AudioTimeStamp v71 = shared_weak_owners_high;
                    }
                    while (v76 != v74);
                  }
                  v44[59] = v71;
                  v44[60] = Buffer + 4 * v62;
                  double v108 = *(double *)&v74;
                  unsigned __int16 v109 = v75;
                  uint64_t v78 = v44[61];
                  v44[61] = Buffer + 4 * v69;
                  *(void *)&long long v110 = v78;
                  os_log_type_t v107 = v74;
                  std::__split_buffer<float,HALB_IOBufferManager_Server::Allocator<float> &>::~__split_buffer((uint64_t)&v107);
                }
              }
              std::vector<float,HALB_IOBufferManager_Server::Allocator<float>>::shrink_to_fit(v44 + 59);
              if (*((unsigned char *)v44 + 20)) {
                operator new();
              }
              operator new();
            }
          }
          if ((*(unsigned int (**)(void))(*(void *)*v44 + 576))(*v44)) {
            HALS_IOEngine2_StreamInfo::CreateCaptureFile((uint64_t)v44);
          }
          ++v43;
        }
        while (v43 != v97);
      }
      char v40 = 0;
      uint64_t v39 = 1;
    }
    while ((v96 & 1) != 0);
  }
  int v81 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 1344))(a1);
  __int16 v25 = v81;
  if (v81)
  {
    AMCP::Log::Scope_Registry::get(v81);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v107, "com.apple.coreaudio", "AMCP");
    mach_port_t v82 = (caulk::concurrent::messenger *)v107->__shared_owners_;
    int v83 = pthread_self();
    mach_port_t v84 = pthread_mach_thread_np(v83);
    uint64_t v85 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
    *(_DWORD *)(v85 + 16) = 0;
    *(unsigned char *)(v85 + 20) = 16;
    *(_DWORD *)(v85 + 24) = v84;
    *(void *)(v85 + 32) = "HALS_IOEngine2.cpp";
    *(_DWORD *)(v85 + 40) = 2583;
    *(_DWORD *)(v85 + 44) = v94;
    *(_DWORD *)(v85 + 48) = v25;
    *(void *)uint64_t v85 = &unk_1F147A458;
    *(void *)(v85 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v82, (caulk::concurrent::message *)v85);
LABEL_20:
    if (v108 != 0.0) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v108);
    }
  }
LABEL_86:
  int v86 = *(_DWORD *)(a2 + 16);
  if (v86)
  {
    for (uint64_t i = *(HALS_IOEngine2_IOContextInfo ***)(a1 + 736); i != *(HALS_IOEngine2_IOContextInfo ***)(a1 + 744); ++i)
    {
      long long v88 = *i;
      if (*(_DWORD *)(*((void *)*i + 4) + 16) == v86)
      {
        if (!v25 && !*((unsigned char *)v88 + 48))
        {
          HALS_IOEngine2_IOContextInfo::StartIO(*i);
          (*(void (**)(uint64_t))(*(void *)a1 + 704))(a1);
          uint64_t v89 = *(void *)(a1 + 768);
          int v90 = *(_DWORD *)(a2 + 16);
          if (*((char *)v88 + 159) < 0) {
            std::string::__init_copy_ctor_external(&v104, *((const std::string::value_type **)v88 + 17), *((void *)v88 + 18));
          }
          else {
            std::string v104 = *(std::string *)((char *)v88 + 136);
          }
          HALS_IOEngine2_DeviceInfo::StartContext(v89, v90, (uint64_t)&v104);
          if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v104.__r_.__value_.__l.__data_);
          }
          *a4 = 1;
        }
        break;
      }
    }
  }
  unsigned int v91 = atomic_load((unsigned int *)(a1 + 1072));
  atomic_store(v91 != 0, (unsigned __int8 *)(a1 + 1076));
  return v25;
}

void sub_1BAE2A8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (*(char *)(v36 - 169) < 0) {
    operator delete(*(void **)(v36 - 192));
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAE2A968(uint64_t a1, int a2)
{
  if (a2)
  {
    MEMORY[0x1C1859840](v2, 0x20C4093837F09);
    JUMPOUT(0x1BAE2AA50);
  }
  JUMPOUT(0x1BAE2A960);
}

void sub_1BAE2A990(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a2)
  {
    std::__function::__value_func<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::~__value_func[abi:ne180100](&a34);
    if (v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    }
    if (*(char *)(v40 - 169) < 0) {
      operator delete(*(void **)(v40 - 192));
    }
    if (*(void *)(v40 - 112)) {
      JUMPOUT(0x1BAE2A9F4);
    }
    JUMPOUT(0x1BAE2AA50);
  }
  JUMPOUT(0x1BAE2A960);
}

void sub_1BAE2A9FC(uint64_t a1, int a2)
{
  if (a2)
  {
    *(void *)(v3 - 184) = v2;
    JUMPOUT(0x1BAE2AA80);
  }
  JUMPOUT(0x1BAE2A960);
}

void sub_1BAE2AA10(uint64_t a1, int a2)
{
  if (a2)
  {
    *(void *)(v3 + 152) = v2;
    JUMPOUT(0x1BAE2AAD8);
  }
  JUMPOUT(0x1BAE2A960);
}

void sub_1BAE2AA20(uint64_t a1, int a2)
{
  if (a2)
  {
    std::__split_buffer<std::vector<float>>::~__split_buffer(v2 - 144);
    JUMPOUT(0x1BAE2AAD8);
  }
  JUMPOUT(0x1BAE2A960);
}

void sub_1BAE2AA34(uint64_t a1, int a2)
{
  if (a2)
  {
    std::__split_buffer<HALB_CaptureFile_NameBuilder::ComponentBase>::~__split_buffer(v2 - 144);
    JUMPOUT(0x1BAE2AA80);
  }
  JUMPOUT(0x1BAE2A960);
}

void sub_1BAE2AA64(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BAE2AABCLL);
  }
  JUMPOUT(0x1BAE2A960);
}

void sub_1BAE2AA78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a2)
  {
    if (a39 < 0) {
      operator delete(__p);
    }
    std::string __p = (void *)(v39 - 192);
    std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (a33 < 0) {
      operator delete(a28);
    }
    JUMPOUT(0x1BAE2AB00);
  }
  JUMPOUT(0x1BAE2A960);
}

void sub_1BAE2AA98(uint64_t a1, int a2)
{
  if (a2)
  {
    MEMORY[0x1C1859840](v2, 0x1020C40C1DD3C34);
    JUMPOUT(0x1BAE2AAB8);
  }
  JUMPOUT(0x1BAE2A960);
}

void sub_1BAE2AAD0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BAE2AADCLL);
  }
  JUMPOUT(0x1BAE2A960);
}

void sub_1BAE2AAF0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BAE2AAF8);
  }
  JUMPOUT(0x1BAE2A960);
}

void sub_1BAE2AB80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAE2A960);
}

void sub_1BAE2AB9C(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BAE2A960);
}

void sub_1BAE2ABAC()
{
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,int>>(caulk::concurrent::messenger *a1, unsigned char *a2, long long *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = &unk_1F147A508;
  *(void *)(v6 + 8) = 0;
  *(unsigned char *)(v6 + 20) = *a2;
  long long v7 = *a3;
  *(_OWORD *)(v6 + 40) = a3[1];
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)uint64_t v6 = &unk_1F147A4B0;

  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

void HALS_IOEngine2_IOContextInfo::StartIO(HALS_IOEngine2_IOContextInfo *this)
{
  int v2 = (*(uint64_t (**)(void))(**((void **)this + 3) + 336))(*((void *)this + 3));
  uint64_t v3 = (void *)((char *)this + 112);
  uint64_t v4 = *((void *)this + 14);
  *((_DWORD *)this + 26) = v2;
  for (uint64_t i = *((void *)this + 15);
        i != v4;
  *((void *)this + 15) = v4;
  int v6 = (*(uint64_t (**)(void, void))(**((void **)this + 3) + 400))(*((void *)this + 3), 0);
  if (v6)
  {
    int v7 = v6;
    uint64_t v8 = 0;
    int v34 = v6;
    do
    {
      uint64_t v37 = 0;
      long long v35 = 0u;
      long long v36 = 0u;
      (*(void (**)(void, void, uint64_t, long long *))(**((void **)this + 3) + 432))(*((void *)this + 3), 0, v8, &v35);
      if (DWORD2(v35) == 1819304813)
      {
        int v9 = HIDWORD(v36);
        vm_size_t v10 = (4 * *((_DWORD *)this + 26) * HIDWORD(v36));
        int v11 = 4 * HIDWORD(v36);
        unint64_t v13 = *((void *)this + 15);
        unint64_t v12 = *((void *)this + 16);
        if (v13 >= v12)
        {
          unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - *v3) >> 3);
          unint64_t v20 = v19 + 1;
          if (v19 + 1 > 0x666666666666666) {
            goto LABEL_33;
          }
          unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - *v3) >> 3);
          if (2 * v21 > v20) {
            unint64_t v20 = 2 * v21;
          }
          if (v21 >= 0x333333333333333) {
            unint64_t v22 = 0x666666666666666;
          }
          else {
            unint64_t v22 = v20;
          }
          unint64_t v42 = (char *)this + 128;
          if (v22)
          {
            uint64_t v24 = std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v22);
            int v9 = HIDWORD(v36);
          }
          else
          {
            uint64_t v24 = 0;
            uint64_t v23 = 0;
          }
          uint64_t v38 = v24;
          uint64_t v39 = (char *)&v24[5 * v19];
          uint64_t v40 = v39;
          BOOL v41 = (char *)&v24[5 * v23];
          vm_address_t Buffer = (void *)HALB_IOBufferManager_Server::AllocateBuffer(v10);
          v24[5 * v19] = Buffer;
          uint64_t v31 = (char *)&v24[5 * v19];
          *((_DWORD *)v31 + 2) = v10;
          *((_DWORD *)v31 + 3) = v9;
          *((_DWORD *)v31 + 4) = v11;
          *((void *)v31 + 3) = 0;
          *((void *)v31 + 4) = 0;
          bzero(Buffer, v10);
          v40 += 40;
          std::vector<HALS_IOEngine2_IOContextInfo::BufferInfo>::__swap_out_circular_buffer((uint64_t *)this + 14, &v38);
          unint64_t v15 = *((void *)this + 15);
          std::__split_buffer<HALS_IOEngine2_IOContextInfo::BufferInfo>::~__split_buffer((uint64_t)&v38);
          int v7 = v34;
        }
        else
        {
          uint64_t v14 = (void *)HALB_IOBufferManager_Server::AllocateBuffer((4
                                                                                 * *((_DWORD *)this + 26)
                                                                                 * HIDWORD(v36)));
          *(void *)unint64_t v13 = v14;
          *(_DWORD *)(v13 + 8) = v10;
          *(_DWORD *)(v13 + 12) = v9;
          *(_DWORD *)(v13 + 16) = v11;
          *(void *)(v13 + 24) = 0;
          *(void *)(v13 + 32) = 0;
          bzero(v14, v10);
          unint64_t v15 = v13 + 40;
          *((void *)this + 15) = v13 + 40;
        }
      }
      else
      {
        unint64_t v16 = *((void *)this + 15);
        unint64_t v17 = *((void *)this + 16);
        if (v16 >= v17)
        {
          unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16 - *v3) >> 3);
          unint64_t v26 = v25 + 1;
          if (v25 + 1 > 0x666666666666666) {
LABEL_33:
          }
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - *v3) >> 3);
          if (2 * v27 > v26) {
            unint64_t v26 = 2 * v27;
          }
          if (v27 >= 0x333333333333333) {
            unint64_t v28 = 0x666666666666666;
          }
          else {
            unint64_t v28 = v26;
          }
          unint64_t v42 = (char *)this + 128;
          if (v28) {
            unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v28);
          }
          else {
            uint64_t v29 = 0;
          }
          unint64_t v32 = v28 + 40 * v25;
          uint64_t v38 = (void *)v28;
          uint64_t v39 = (char *)v32;
          BOOL v41 = (char *)(v28 + 40 * v29);
          unsigned int v33 = HIDWORD(v36);
          *(void *)unint64_t v32 = 0;
          *(_DWORD *)(v32 + 8) = 0;
          *(void *)(v32 + 12) = v33;
          *(void *)(v32 + 24) = 0;
          *(void *)(v32 + 32) = 0;
          uint64_t v40 = (char *)(v32 + 40);
          std::vector<HALS_IOEngine2_IOContextInfo::BufferInfo>::__swap_out_circular_buffer((uint64_t *)this + 14, &v38);
          unint64_t v15 = *((void *)this + 15);
          std::__split_buffer<HALS_IOEngine2_IOContextInfo::BufferInfo>::~__split_buffer((uint64_t)&v38);
        }
        else
        {
          unsigned int v18 = HIDWORD(v36);
          *(void *)unint64_t v16 = 0;
          *(_DWORD *)(v16 + 8) = 0;
          *(void *)(v16 + 12) = v18;
          *(void *)(v16 + 24) = 0;
          *(void *)(v16 + 32) = 0;
          unint64_t v15 = v16 + 40;
        }
      }
      *((void *)this + 15) = v15;
      uint64_t v8 = (v8 + 1);
    }
    while (v7 != v8);
  }
  *((unsigned char *)this + 48) = 1;
}

void sub_1BAE2B004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__split_buffer<HALS_IOEngine2_IOContextInfo::BufferInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void HALS_IOEngine2_DeviceInfo::StartContext(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a1 + 48;
  char v7 = 1;
  do
  {
    char v8 = v7;
    int v9 = (void *)(v6 + 24 * v5);
    unint64_t v10 = v9[1] - *v9;
    if ((v10 & 0x7FFFFFFF8) != 0)
    {
      unint64_t v11 = 0;
      uint64_t v12 = (v10 >> 3);
      do
      {
        if (v11 >= (uint64_t)(v9[1] - *v9) >> 3) {
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v13 = *(void *)(*v9 + 8 * v11);
        HALS_IOEngine2_DeviceInfo::get_source_id((uint64_t)&v15, a2, a3, v11);
        if (!*(unsigned char *)(v13 + 20) && AMCP::Feature_Flags::use_mcp_coloring_mixer(0, v14)) {
          (*(void (**)(void, uint64_t *, void))(**(void **)(v13 + 208) + 184))(*(void *)(v13 + 208), &v15, 0);
        }
        if (v17 < 0) {
          operator delete(__p);
        }
        ++v11;
      }
      while (v12 != v11);
    }
    char v7 = 0;
    uint64_t v5 = 1;
  }
  while ((v8 & 1) != 0);
}

void sub_1BAE2B144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<HALS_IOEngine2_IOContextInfo::BufferInfo>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(void *)(v6 - 40) = *(void *)(v2 + v5 - 40);
      *(void *)(v6 - 32) = *(void *)(v2 + v5 - 32);
      *(_DWORD *)(v6 - 24) = *(_DWORD *)(v2 + v5 - 24);
      *(_OWORD *)(v6 - 16) = *(_OWORD *)(v2 + v5 - 16);
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(_DWORD *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      v5 -= 40;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *uint64_t result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<HALS_IOEngine2_IOContextInfo::BufferInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    HALS_IOEngine2_IOContextInfo::BufferInfo::~BufferInfo((HALS_IOEngine2_IOContextInfo::BufferInfo *)(i - 40));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,int>>::perform(caulk::concurrent::message *a1)
{
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90]
                                                                                           + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void caulk::concurrent::details::message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,int>>::perform(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    LODWORD(v9) = 67110146;
    HIDWORD(v9) = v4;
    *(_WORD *)uint64_t v10 = 2080;
    *(void *)&v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    __int16 v15 = 1024;
    int v16 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d HALS_IOEngine2::_StartIO: Caught exception while starting IO on Context %d  result: %d", (uint8_t *)&v9, 0x24u);
  }
}

void caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void caulk::concurrent::details::message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,int>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_4,std::tuple<unsigned int,char const*,int,unsigned int,int>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)__int16 v11 = 2080;
    *(void *)&uint64_t v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d HALS_IOEngine2::_StartIO: _AllocateTempBuffers on Context %d  returned error: %d", (uint8_t *)&v10, 0x24u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAE2B580(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_4,std::tuple<unsigned int,char const*,int,unsigned int,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_3,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int,unsigned long long,unsigned long long,char const*>>::perform(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v13;
  if (*(void *)v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = *(void *)(a1 + 64);
    uint64_t v11 = *(void *)(a1 + 72);
    LODWORD(v13) = 67110914;
    HIDWORD(v13) = v4;
    *(_WORD *)__int16 v14 = 2080;
    *(void *)&unint64_t v14[2] = v5;
    __int16 v15 = 1024;
    int v16 = v6;
    __int16 v17 = 1024;
    int v18 = v7;
    __int16 v19 = 1024;
    int v20 = v8;
    __int16 v21 = 2048;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = v10;
    __int16 v25 = 2080;
    uint64_t v26 = v11;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d \t\tHALS_IOEngine2::_StartIO(%d) succeeded on Context %d  new state: Prewarm: %llu Play: %llu State: %s", (uint8_t *)&v13, 0x42u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 80, 8);
}

void sub_1BAE2B738(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_3,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int,unsigned long long,unsigned long long,char const*>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_2,std::tuple<unsigned int,char const*,int,unsigned int,int>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)uint64_t v11 = 2080;
    *(void *)&uint64_t v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d HALS_IOEngine2::_StartIO: _TellHardwareToStart on Context %d  returned error: 0x%X", (uint8_t *)&v10, 0x24u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAE2B8CC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_2,std::tuple<unsigned int,char const*,int,unsigned int,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)uint64_t v11 = 2080;
    *(void *)&uint64_t v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d HALS_IOEngine2::_StartIO(%d): play state has not changed on Context %d", (uint8_t *)&v10, 0x24u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAE2BA60(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int,unsigned long long,unsigned long long,char const*>>::perform(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v13;
  if (*(void *)v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = *(void *)(a1 + 64);
    uint64_t v11 = *(void *)(a1 + 72);
    LODWORD(v13) = 67110914;
    HIDWORD(v13) = v4;
    *(_WORD *)__int16 v14 = 2080;
    *(void *)&unint64_t v14[2] = v5;
    __int16 v15 = 1024;
    int v16 = v6;
    __int16 v17 = 1024;
    int v18 = v7;
    __int16 v19 = 1024;
    int v20 = v8;
    __int16 v21 = 2048;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = v10;
    __int16 v25 = 2080;
    uint64_t v26 = v11;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d >>> HALS_IOEngine2::_StartIO(%d) called on Context %d  current state: Prewarm: %llu Play: %llu State: %s", (uint8_t *)&v13, 0x42u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 80, 8);
}

void sub_1BAE2BC18(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOEngine2::_StartIO(HALS_IOContext *,HALS_IOPrewarmManager::EngineState,BOOL &)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int,unsigned long long,unsigned long long,char const*>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t HALS_IOEngine2::_RegisterIOBuffer(HALS_IOEngine2 *this, BOOL a2, unsigned int a3, unsigned int a4, unsigned int a5, void *a6)
{
  return 0;
}

_DWORD *HALS_IOEngine2::_SetAudioCaptureMode(_DWORD *result, int a2)
{
  int v2 = result[191];
  if (a2)
  {
    result[191] = v2 + 1;
    if (!v2) {
      return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 592))();
    }
  }
  else if (v2)
  {
    int v3 = v2 - 1;
    result[191] = v3;
    if (!v3) {
      return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 600))();
    }
  }
  return result;
}

BOOL HALS_IOEngine2::_IsCaptureFileEnabled(HALS_IOEngine2 *this)
{
  return *((_DWORD *)this + 191) != 0;
}

uint64_t HALS_IOEngine2::CalculateBufferByteSizeForStreamDomainObjectID(HALS_IOEngine2 *this, char a2, int a3, int a4)
{
  uint64_t v11 = 0;
  __int16 v12 = &v11;
  uint64_t v13 = 0x2000000000;
  int v14 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK14HALS_IOEngine246CalculateBufferByteSizeForStreamDomainObjectIDEbjj_block_invoke;
  v7[3] = &unk_1E6234A88;
  v7[4] = &v11;
  v7[5] = this;
  char v10 = a2;
  int v8 = a3;
  int v9 = a4;
  int v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  uint64_t v5 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v5;
}

void sub_1BAE2BDCC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14HALS_IOEngine246CalculateBufferByteSizeForStreamDomainObjectIDEbjj_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 768);
  if (v1)
  {
    uint64_t v2 = v1 + 24 * *(unsigned __int8 *)(result + 56);
    uint64_t v3 = *(void *)(v2 + 48);
    uint64_t v4 = *(void *)(v2 + 56);
    if (v3 == v4)
    {
      int v5 = 0;
    }
    else
    {
      int v5 = 0;
      do
      {
        int v6 = *(_DWORD **)v3;
        if (*(_DWORD *)(*(void *)v3 + 16) == *(_DWORD *)(result + 48))
        {
          int v7 = v6[12];
          int v8 = v6[14];
          int v9 = v6[16] * *(_DWORD *)(result + 52);
          if (v7 == 1819304813) {
            int v5 = v9;
          }
          else {
            int v5 = v8;
          }
        }
        v3 += 8;
      }
      while (v3 != v4);
    }
    *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
  }
  return result;
}

void HALS_IOEngine2::GatherDeviceInfo(HALS_IOEngine2 *this)
{
  uint64_t v2 = (*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 320))(this);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZN14HALS_IOEngine216GatherDeviceInfoEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_40_11924;
  v4[4] = this;
  v4[5] = v2;
  uint64_t v3 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v4);
}

void ___ZN14HALS_IOEngine216GatherDeviceInfoEv_block_invoke(__n128 *a1)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZN14HALS_IOEngine216GatherDeviceInfoEv_block_invoke_2;
  v2[3] = &__block_descriptor_tmp_39_11925;
  __n128 v3 = a1[2];
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v3.n128_u64[0] + 56))(v3.n128_u64[0], v3);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v2);
}

void ___ZN14HALS_IOEngine216GatherDeviceInfoEv_block_invoke_2()
{
}

void sub_1BAE2CA28(_Unwind_Exception *a1)
{
  std::default_delete<HALS_IOEngine2_DeviceInfo>::operator()[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::default_delete<HALS_IOEngine2_DeviceInfo>::operator()[abi:ne180100](uint64_t a1)
{
  for (uint64_t i = 72; i != 24; i -= 24)
  {
    __n128 v3 = (void **)(a1 + i);
    std::vector<std::unique_ptr<HALS_IOEngine2_StreamInfo>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }

  JUMPOUT(0x1C1859840);
}

void std::vector<std::unique_ptr<HALS_IOEngine2_StreamInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          std::default_delete<HALS_IOEngine2_StreamInfo>::operator()[abi:ne180100](v6);
        }
      }
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<HALS_IOEngine2_StreamInfo>::operator()[abi:ne180100](uint64_t a1)
{
  std::vector<float,HALB_IOBufferManager_Server::Allocator<float>>::__destroy_vector::operator()[abi:ne180100](a1 + 472);
  uint64_t v2 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = 0;
  if (v2) {
    std::default_delete<AMCP::DAL::Container>::operator()[abi:ne180100](v2);
  }
  __n128 v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::unique_ptr<HALB_CaptureFile>::reset[abi:ne180100]((unsigned __int8 ***)(a1 + 200), 0);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 192);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  int v5 = *(AudioConverterRef **)(a1 + 160);
  *(void *)(a1 + 160) = 0;
  if (v5)
  {
    AudioConverterDispose(*v5);
    MEMORY[0x1C1859840](v5, 0x20C4093837F09);
  }

  JUMPOUT(0x1C1859840);
}

void std::vector<float,HALB_IOBufferManager_Server::Allocator<float>>::__destroy_vector::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(HALB_IOBufferManager_Server **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    HALB_IOBufferManager_Server::FreeBuffer(v2, (*(_DWORD *)(a1 + 16) - v2) & 0xFFFFFFFC);
  }
}

void std::default_delete<AMCP::DAL::Container>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__split_buffer<std::unique_ptr<HALS_IOEngine2_StreamInfo>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      std::default_delete<HALS_IOEngine2_StreamInfo>::operator()[abi:ne180100](v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t HALS_IOEngine2::_UnregisterIOContext(uint64_t this, HALS_IOContext *a2)
{
  if (a2)
  {
    uint64_t v3 = this;
    kdebug_trace();
    uint64_t v4 = *(uint64_t **)(v3 + 736);
    int v5 = *(uint64_t **)(v3 + 744);
    while (v4 != v5)
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = *(HALS_IOContext **)(v6 + 32);
      if (v7 == a2)
      {
        uint64_t v8 = (uint64_t)&v4[(v7 != a2) - 1];
        int v9 = &v4[v7 != a2];
        if (v9 != v5)
        {
          do
          {
            uint64_t v8 = (uint64_t)v9;
            uint64_t v10 = *(v9 - 1);
            *(v9 - 1) = *v9;
            *int v9 = 0;
            if (v10) {
              std::default_delete<HALS_IOEngine2_IOContextInfo>::operator()[abi:ne180100](v10);
            }
            int v9 = (uint64_t *)(v8 + 8);
          }
          while ((uint64_t *)(v8 + 8) != v5);
          int v5 = *(uint64_t **)(v3 + 744);
        }
        while (v5 != (uint64_t *)v8)
        {
          uint64_t v12 = *--v5;
          uint64_t v11 = v12;
          uint64_t *v5 = 0;
          if (v12) {
            std::default_delete<HALS_IOEngine2_IOContextInfo>::operator()[abi:ne180100](v11);
          }
        }
        *(void *)(v3 + 744) = v8;
        if (*(_DWORD *)(v3 + 760))
        {
          unsigned __int8 v13 = atomic_load((unsigned __int8 *)(v3 + 416));
          if (v13) {
            atomic_store(1u, (unsigned __int8 *)(v3 + 417));
          }
          operator new();
        }
        HALS_IOEngine2::_UpdateTotalStreamUsage((HALS_IOEngine2 *)v3, 0);
        HALS_IOEngine2::_UpdateTotalStreamUsage((HALS_IOEngine2 *)v3, 1u);
        break;
      }
    }
    return kdebug_trace();
  }
  return this;
}

void HALS_IOEngine2::_UpdateTotalStreamUsage(HALS_IOEngine2 *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 96);
  if (v2)
  {
    unint64_t v3 = *(void *)(v2 + 24 * a2 + 56) - *(void *)(v2 + 24 * a2 + 48);
    if ((v3 & 0x7FFFFFFF8) != 0)
    {
      unint64_t v5 = 0;
      uint64_t v7 = (v3 >> 3);
      while (1)
      {
        uint64_t v8 = *(void *)(*((void *)this + 96) + 24 * a2 + 48);
        unint64_t v9 = (*(void *)(*((void *)this + 96) + 24 * a2 + 56) - v8) >> 3;
        if (v5 >= v9)
        {
          uint64_t v10 = 0;
        }
        else
        {
          if (v9 <= v5) {
            std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v10 = *(void *)(v8 + 8 * v5);
        }
        uint64_t v11 = (void *)*((void *)this + 92);
        uint64_t v12 = (void *)*((void *)this + 93);
        if (v11 != v12) {
          break;
        }
LABEL_13:
        int v15 = 0;
        if (v10) {
          goto LABEL_16;
        }
LABEL_20:
        if (++v5 == v7) {
          return;
        }
      }
      while (1)
      {
        uint64_t v13 = *v11 + 56;
        unint64_t v14 = *(void *)(v13 + 24 * a2 + 8);
        if (v5 < v14)
        {
          if (v14 <= v5) {
            std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
          }
          if ((*(void *)(*(void *)(v13 + 24 * a2) + 8 * (v5 >> 6)) & (1 << v5)) != 0) {
            break;
          }
        }
        if (++v11 == v12) {
          goto LABEL_13;
        }
      }
      int v15 = 1;
      if (!v10) {
        goto LABEL_20;
      }
LABEL_16:
      if (v15 != (*(unsigned char *)(v10 + 32) != 0))
      {
        *(unsigned char *)(v10 + 32) = v15;
        int v16 = *(_DWORD *)(v10 + 8);
        uint64_t v17 = *((void *)this + 91);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = ___ZN14HALS_IOEngine223_UpdateTotalStreamUsageEb_block_invoke;
        block[3] = &__block_descriptor_tmp_33_11928;
        int v20 = v16;
        char v21 = v15;
        unsigned __int8 v18 = atomic_load((unsigned __int8 *)(v17 + 32));
        if (v18) {
          atomic_store(1u, (unsigned __int8 *)(v17 + 33));
        }
        dispatch_async(*(dispatch_queue_t *)v17, block);
      }
      goto LABEL_20;
    }
  }
}

void ___ZN14HALS_IOEngine223_UpdateTotalStreamUsageEb_block_invoke(uint64_t a1)
{
  v12[0] = 0;
  v12[1] = 0;
  HALS_System::GetInstance(&v13, 0, v12);
  uint64_t v2 = v13;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v2)
  {
    unint64_t v3 = (unsigned int *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 32));
    unint64_t v5 = (HALS_ObjectMap *)v3;
    if (v3)
    {
      unsigned int v7 = v3[5];
      unsigned int v6 = v3[6];
      if (v7 == v6 || v7 == 1634956402)
      {
        if (v7 == 1634956402 || v7 != v6) {
          goto LABEL_17;
        }
      }
      else if (v6 == 1634956402)
      {
LABEL_17:
        int v10 = *(unsigned __int8 *)(a1 + 36);
        uint64_t v11 = v3[4];
        uint64_t v13 = 0x676C6F6273616374;
        LODWORD(v14) = 0;
        int v15 = v10;
        (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, int *, void, void, void))(*(void *)v3 + 120))(v3, v11, &v13, 4, &v15, 0, 0, 0);
        goto LABEL_18;
      }
      HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v3, v4);
      unint64_t v5 = 0;
    }
LABEL_18:
    HALS_ObjectMap::ReleaseObject(v5, v4);
  }
}

void sub_1BAE2D26C(void *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAE2D25CLL);
}

void applesauce::dispatch::v1::async<HALS_IOEngine2::_UnregisterIOContext(HALS_IOContext *)::$_0 &>(dispatch_queue_s *,HALS_IOEngine2::_UnregisterIOContext(HALS_IOContext *)::$_0 &)::{lambda(void *)#1}::__invoke(unsigned int *a1)
{
  unint64_t v3 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)a1[1]);
  if (v3 && *a1)
  {
    unsigned int v4 = 0;
    do
    {
      (*(void (**)(void *, void))(**((void **)v3 + 12) + 200))(*((void **)v3 + 12), a1[2]);
      ++v4;
    }
    while (v4 < *a1);
  }
  HALS_ObjectMap::ReleaseObject(v3, v2);

  JUMPOUT(0x1C1859840);
}

void sub_1BAE2D34C(_Unwind_Exception *a1)
{
  MEMORY[0x1C1859840](v1, 0x1000C403E1C8BA9);
  _Unwind_Resume(a1);
}

void std::default_delete<HALS_IOEngine2_IOContextInfo>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  unint64_t v5 = (void **)(a1 + 112);
  std::vector<HALS_IOEngine2_IOContextInfo::BufferInfo>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v3 = 80;
  while (1)
  {
    unsigned int v4 = *(void **)(a1 + v3);
    if (v4) {
      operator delete(v4);
    }
    v3 -= 24;
    if (v3 == 32)
    {
      HALS_ObjectMap::ReleaseObject_LongTerm(*(HALS_ObjectMap **)(a1 + 32), v2);
      JUMPOUT(0x1C1859840);
    }
  }
}

void std::vector<HALS_IOEngine2_IOContextInfo::BufferInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unsigned int v4 = (char *)v1[1];
    unint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        HALS_IOEngine2_IOContextInfo::BufferInfo::~BufferInfo((HALS_IOEngine2_IOContextInfo::BufferInfo *)(v4 - 40));
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

HALS_ObjectMap **HALS_Releaser_LongTerm<HALS_IOContext>::~HALS_Releaser_LongTerm(HALS_ObjectMap **a1, HALS_Object *a2)
{
  return a1;
}

uint64_t HALS_IOEngine2::_RegisterIOContext(uint64_t this, HALS_IOContext *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v3 = this;
    kdebug_trace();
    unsigned int v4 = *(uint64_t **)(v3 + 736);
    do
    {
      if (v4 == *(uint64_t **)(v3 + 744)) {
        operator new();
      }
      uint64_t v5 = *v4++;
    }
    while (*(HALS_IOContext **)(v5 + 32) != a2);
    return kdebug_trace();
  }
  return this;
}

void sub_1BAE2DBE8(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  HALS_ObjectMap::ReleaseObject(v29, a2);
  if (a27 < 0) {
    operator delete(a22);
  }
  HALS_ObjectMap::ReleaseObject(v28, v31);
  if (*(char *)(v27 + 159) < 0) {
    operator delete(*(void **)(v27 + 136));
  }
  std::vector<HALS_IOEngine2_IOContextInfo::BufferInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  uint64_t v33 = 80;
  while (1)
  {
    int v34 = *(void **)(v27 + v33);
    if (v34) {
      operator delete(v34);
    }
    v33 -= 24;
    if (v33 == 32)
    {
      HALS_Releaser_LongTerm<HALS_IOContext>::~HALS_Releaser_LongTerm((HALS_ObjectMap **)(v27 + 32), v32);
      MEMORY[0x1C1859840](v27, 0x1032C4028AA3196);
      _Unwind_Resume(a1);
    }
  }
}

void applesauce::dispatch::v1::async<HALS_IOEngine2::_RegisterIOContext(HALS_IOContext *)::$_0 &>(dispatch_queue_s *,HALS_IOEngine2::_RegisterIOContext(HALS_IOContext *)::$_0 &)::{lambda(void *)#1}::__invoke(unsigned int *a1)
{
  uint64_t v3 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)a1[1]);
  if (v3 && *a1)
  {
    unsigned int v4 = 0;
    do
    {
      (*(void (**)(void *, void))(**((void **)v3 + 12) + 192))(*((void **)v3 + 12), a1[2]);
      ++v4;
    }
    while (v4 < *a1);
  }
  HALS_ObjectMap::ReleaseObject(v3, v2);

  JUMPOUT(0x1C1859840);
}

void sub_1BAE2DE08(_Unwind_Exception *a1)
{
  MEMORY[0x1C1859840](v1, 0x1000C403E1C8BA9);
  _Unwind_Resume(a1);
}

void HALS_IOEngine2::_GetAllRunningContextClientInfos(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 736);
  for (uint64_t i = *(void *)(a1 + 744); v2 != i; v2 += 8)
  {
    uint64_t v5 = *(void *)(*(void *)v2 + 32);
    if (v5)
    {
      char v6 = (*(uint64_t (**)(void))(*(void *)v5 + 224))(*(void *)(*(void *)v2 + 32));
      char v7 = v6;
      int v8 = *(_DWORD *)(v5 + 16);
      int v9 = **(_DWORD **)(v5 + 64);
      uint64_t v11 = *(_DWORD **)(a2 + 8);
      unint64_t v10 = *(void *)(a2 + 16);
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v13 = *(_DWORD **)a2;
        unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - *(void *)a2) >> 2);
        unint64_t v15 = v14 + 1;
        if (v14 + 1 > 0x1555555555555555) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)v13) >> 2);
        if (2 * v16 > v15) {
          unint64_t v15 = 2 * v16;
        }
        if (v16 >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v17 = 0x1555555555555555;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v17);
          uint64_t v13 = *(_DWORD **)a2;
          uint64_t v11 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          uint64_t v18 = 0;
        }
        unint64_t v19 = v17 + 12 * v14;
        *(unsigned char *)unint64_t v19 = v7;
        *(_DWORD *)(v19 + 4) = v8;
        *(_DWORD *)(v19 + 8) = v9;
        unint64_t v20 = v19;
        if (v11 != v13)
        {
          do
          {
            uint64_t v21 = *(void *)(v11 - 3);
            v11 -= 3;
            int v22 = v11[2];
            *(void *)(v20 - 12) = v21;
            v20 -= 12;
            *(_DWORD *)(v20 + 8) = v22;
          }
          while (v11 != v13);
          uint64_t v13 = *(_DWORD **)a2;
        }
        uint64_t v12 = (_DWORD *)(v19 + 12);
        *(void *)a2 = v20;
        *(void *)(a2 + 8) = v19 + 12;
        *(void *)(a2 + 16) = v17 + 12 * v18;
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(unsigned char *)uint64_t v11 = v6;
        uint64_t v12 = v11 + 3;
        v11[1] = v8;
        uint64_t v11[2] = v9;
      }
      *(void *)(a2 + 8) = v12;
    }
  }
}

void HALS_IOEngine2::_GetAllContextIDs(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 736);
  uint64_t v3 = *(void *)(a1 + 744);
  if (v2 != v3)
  {
    uint64_t v5 = *(_DWORD **)(a2 + 8);
    do
    {
      int v6 = *(_DWORD *)(*(void *)(*(void *)v2 + 32) + 16);
      unint64_t v7 = *(void *)(a2 + 16);
      if ((unint64_t)v5 >= v7)
      {
        int v9 = *(_DWORD **)a2;
        uint64_t v10 = ((uint64_t)v5 - *(void *)a2) >> 2;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v7 - (void)v9;
        if (v12 >> 1 > v11) {
          unint64_t v11 = v12 >> 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v13);
          int v9 = *(_DWORD **)a2;
          uint64_t v5 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          uint64_t v14 = 0;
        }
        unint64_t v15 = (_DWORD *)(v13 + 4 * v10);
        *unint64_t v15 = v6;
        int v8 = v15 + 1;
        while (v5 != v9)
        {
          int v16 = *--v5;
          *--unint64_t v15 = v16;
        }
        *(void *)a2 = v15;
        *(void *)(a2 + 8) = v8;
        *(void *)(a2 + 16) = v13 + 4 * v14;
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        _DWORD *v5 = v6;
        int v8 = v5 + 1;
      }
      *(void *)(a2 + 8) = v8;
      v2 += 8;
      uint64_t v5 = v8;
    }
    while (v2 != v3);
  }
}

uint64_t HALS_IOEngine2::_CopyIOContextList(uint64_t result, HALS_Object *a2)
{
  uint64_t v2 = *(void *)(result + 736);
  uint64_t v3 = *(void *)(result + 744);
  if (v2 != v3)
  {
    uint64_t v5 = (void *)((char *)a2 + 16);
    do
    {
      int v6 = *(HALS_ObjectMap **)(*(void *)v2 + 32);
      HALS_ObjectMap::RetainObject(v6, a2);
      int v8 = (HALS_ObjectMap **)*((void *)a2 + 1);
      unint64_t v7 = *((void *)a2 + 2);
      if ((unint64_t)v8 >= v7)
      {
        uint64_t v10 = ((uint64_t)v8 - *(void *)a2) >> 3;
        if ((unint64_t)(v10 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = v7 - *(void *)a2;
        uint64_t v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
          uint64_t v12 = v10 + 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        v17[4] = v5;
        if (v13) {
          unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        unint64_t v15 = (HALS_ObjectMap **)(v13 + 8 * v10);
        v17[0] = v13;
        v17[1] = v15;
        v17[3] = v13 + 8 * v14;
        *unint64_t v15 = v6;
        v17[2] = v15 + 1;
        std::vector<HALS_Releaser<HALS_IOContext>>::__swap_out_circular_buffer((uint64_t *)a2, (HALS_Object *)v17);
        int v9 = (void *)*((void *)a2 + 1);
        std::__split_buffer<HALS_Releaser<HALS_IOContext>>::~__split_buffer((uint64_t)v17, v16);
      }
      else
      {
        _DWORD *v8 = v6;
        int v9 = v8 + 1;
        *((void *)a2 + 1) = v9;
      }
      *((void *)a2 + 1) = v9;
      uint64_t result = pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
      v2 += 8;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1BAE2E20C(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void HALS_IOEngine2::_CopyAllContexts(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 736);
  uint64_t v3 = *(void *)(a1 + 744);
  if (v2 != v3)
  {
    unsigned int v4 = a2;
    do
    {
      uint64_t v5 = *(HALS_ObjectMap **)(*(void *)v2 + 32);
      HALS_ObjectMap::RetainObject(v5, (HALS_Object *)a2);
      unint64_t v7 = (HALS_ObjectMap **)v4[1];
      unint64_t v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v9 = ((char *)v7 - (unsigned char *)*v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v6 - (void)*v4;
        uint64_t v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
          uint64_t v11 = v9 + 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        }
        else {
          a2 = 0;
        }
        unint64_t v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        *unint64_t v13 = v5;
        int v8 = v13 + 1;
        unint64_t v15 = (char *)*v4;
        uint64_t v14 = (char *)v4[1];
        if (v14 != *v4)
        {
          do
          {
            int v16 = (HALS_ObjectMap *)*((void *)v14 - 1);
            v14 -= 8;
            *--unint64_t v13 = v16;
          }
          while (v14 != v15);
          uint64_t v14 = (char *)*v4;
        }
        *unsigned int v4 = v13;
        v4[1] = v8;
        v4[2] = (void *)(v12 + 8 * (void)a2);
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *unint64_t v7 = v5;
        int v8 = v7 + 1;
      }
      v4[1] = v8;
      v2 += 8;
    }
    while (v2 != v3);
  }
}

uint64_t HALS_IOEngine2::IsEngineMixing(HALS_IOEngine2 *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 1096);
  return v1 & 1;
}

uint64_t HALS_IOEngine2::HandleOverload(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v12 = 0;
  unint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000;
  int v15 = 0;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  v8[2] = ___ZN14HALS_IOEngine214HandleOverloadEjjjRN22HALS_IOContextReporter13EngineMetricsE_block_invoke;
  v8[3] = &unk_1E6234E20;
  v8[4] = &v12;
  v8[5] = a1;
  int v9 = a2;
  int v10 = a3;
  int v11 = a4;
  v8[6] = a5;
  uint64_t v5 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v8);
  uint64_t v6 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v12, 8);
  return v6;
}

void sub_1BAE2E430(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14HALS_IOEngine214HandleOverloadEjjjRN22HALS_IOContextReporter13EngineMetricsE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, void, void))(**(void **)(a1 + 40) + 1200))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(unsigned int *)(a1 + 64), *(void *)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t HALS_IOEngine2::EndWriting(HALS_IOEngine2 *this, int a2, int a3, const HALS_IOEngineInfo *a4)
{
  uint64_t v10 = 0;
  int v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZN14HALS_IOEngine210EndWritingEjjRK17HALS_IOEngineInfo_block_invoke;
  v7[3] = &unk_1E6234E70;
  v7[4] = &v10;
  v7[5] = this;
  int v8 = a2;
  int v9 = a3;
  void v7[6] = a4;
  unsigned int v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  uint64_t v5 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v5;
}

void sub_1BAE2E580(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14HALS_IOEngine210EndWritingEjjRK17HALS_IOEngineInfo_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, void))(**(void **)(a1 + 40) + 1192))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(void *)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t HALS_IOEngine2::WriteToStream_CommitTrailingSilence(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2000000000;
  int v16 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = ___ZN14HALS_IOEngine235WriteToStream_CommitTrailingSilenceEjjjR17HALS_IOEngineInfoRK15HALS_BufferInfo_block_invoke;
  v9[3] = &unk_1E6234E48;
  uint64_t v9[4] = &v13;
  v9[5] = a1;
  int v10 = a2;
  int v11 = a3;
  int v12 = a4;
  v9[6] = a5;
  void v9[7] = a6;
  uint64_t v6 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v9);
  uint64_t v7 = *((unsigned int *)v14 + 6);
  _Block_object_dispose(&v13, 8);
  return v7;
}

void sub_1BAE2E6D0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14HALS_IOEngine235WriteToStream_CommitTrailingSilenceEjjjR17HALS_IOEngineInfoRK15HALS_BufferInfo_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, void, void, void))(**(void **)(a1 + 40) + 1272))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 64), *(unsigned int *)(a1 + 68), *(unsigned int *)(a1 + 72), *(void *)(a1 + 48), *(void *)(a1 + 56));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t HALS_IOEngine2::WriteToStream(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2000000000;
  int v16 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = ___ZN14HALS_IOEngine213WriteToStreamEjjjRK17HALS_IOEngineInfoRK15HALS_BufferInfo_block_invoke;
  v9[3] = &unk_1E6234DF8;
  uint64_t v9[4] = &v13;
  v9[5] = a1;
  int v10 = a2;
  int v11 = a3;
  int v12 = a4;
  v9[6] = a5;
  void v9[7] = a6;
  uint64_t v6 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v9);
  uint64_t v7 = *((unsigned int *)v14 + 6);
  _Block_object_dispose(&v13, 8);
  return v7;
}

void sub_1BAE2E824(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14HALS_IOEngine213WriteToStreamEjjjRK17HALS_IOEngineInfoRK15HALS_BufferInfo_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, void, void, void, uint64_t))(**(void **)(a1 + 40)
                                                                                              + 1184))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 64), *(unsigned int *)(a1 + 68), *(unsigned int *)(a1 + 72), *(void *)(a1 + 48), *(void *)(a1 + 56), 1);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t HALS_IOEngine2::BeginWriting(HALS_IOEngine2 *this, int a2, int a3, const HALS_IOEngineInfo *a4)
{
  uint64_t v10 = 0;
  int v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZN14HALS_IOEngine212BeginWritingEjjRK17HALS_IOEngineInfo_block_invoke;
  v7[3] = &unk_1E6234DD0;
  v7[4] = &v10;
  v7[5] = this;
  int v8 = a2;
  int v9 = a3;
  void v7[6] = a4;
  unsigned int v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  uint64_t v5 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v5;
}

void sub_1BAE2E978(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14HALS_IOEngine212BeginWritingEjjRK17HALS_IOEngineInfo_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, void))(**(void **)(a1 + 40) + 1176))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(void *)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t HALS_IOEngine2::EndReading(HALS_IOEngine2 *this, int a2, int a3, const HALS_IOEngineInfo *a4)
{
  uint64_t v10 = 0;
  int v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZN14HALS_IOEngine210EndReadingEjjRK17HALS_IOEngineInfo_block_invoke;
  v7[3] = &unk_1E6234DA8;
  v7[4] = &v10;
  v7[5] = this;
  int v8 = a2;
  int v9 = a3;
  void v7[6] = a4;
  unsigned int v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  uint64_t v5 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v5;
}

void sub_1BAE2EAC4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14HALS_IOEngine210EndReadingEjjRK17HALS_IOEngineInfo_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, void))(**(void **)(a1 + 40) + 1088))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(void *)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t HALS_IOEngine2::TeardownForIsolatedIO(HALS_IOEngine2 *this, int a2, int a3)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2000000000;
  int v12 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  uint64_t v6[2] = ___ZN14HALS_IOEngine221TeardownForIsolatedIOEjj_block_invoke;
  v6[3] = &unk_1E6234D30;
  v6[4] = &v9;
  v6[5] = this;
  int v7 = a2;
  int v8 = a3;
  uint64_t v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  uint64_t v4 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1BAE2EC0C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void *___ZN14HALS_IOEngine221TeardownForIsolatedIOEjj_block_invoke(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 40);
  uint64_t v3 = result[96];
  if (v3)
  {
    unint64_t v4 = *(unsigned int *)(a1 + 48);
    uint64_t v6 = v3 + 72;
    uint64_t v5 = *(void *)(v3 + 72);
    unint64_t v7 = (*(void *)(v6 + 8) - v5) >> 3;
    if (v4 >= v7)
    {
      uint64_t v8 = 0;
    }
    else
    {
      if (v7 <= v4) {
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v8 = *(void *)(v5 + 8 * v4);
    }
    uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, void))(*result + 1120))(result, v8, *(unsigned int *)(a1 + 52));
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  return result;
}

uint64_t HALS_IOEngine2::SetupForIsolatedIO(HALS_IOEngine2 *this, int a2, int a3, int a4)
{
  uint64_t v11 = 0;
  int v12 = &v11;
  uint64_t v13 = 0x2000000000;
  int v14 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZN14HALS_IOEngine218SetupForIsolatedIOEjjj_block_invoke;
  v7[3] = &unk_1E6234D08;
  v7[4] = &v11;
  v7[5] = this;
  int v8 = a2;
  int v9 = a3;
  int v10 = a4;
  unint64_t v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  uint64_t v5 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v5;
}

void sub_1BAE2ED88(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void *___ZN14HALS_IOEngine218SetupForIsolatedIOEjjj_block_invoke(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 40);
  uint64_t v3 = result[96];
  if (v3)
  {
    unint64_t v4 = *(unsigned int *)(a1 + 48);
    uint64_t v6 = v3 + 72;
    uint64_t v5 = *(void *)(v3 + 72);
    unint64_t v7 = (*(void *)(v6 + 8) - v5) >> 3;
    if (v4 >= v7)
    {
      uint64_t v8 = 0;
    }
    else
    {
      if (v7 <= v4) {
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v8 = *(void *)(v5 + 8 * v4);
    }
    uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, void, void))(*result + 1112))(result, v8, *(unsigned int *)(a1 + 52), *(unsigned int *)(a1 + 56));
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  return result;
}

uint64_t HALS_IOEngine2::IsolatedReadFromStream(HALS_IOEngine2 *this, int a2, int a3, const HALS_IOEngineInfo *a4, int a5)
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000;
  int v15 = 0;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  v8[2] = ___ZN14HALS_IOEngine222IsolatedReadFromStreamEjjRK17HALS_IOEngineInfoj_block_invoke;
  v8[3] = &unk_1E6234D58;
  v8[4] = &v12;
  v8[5] = this;
  int v9 = a2;
  int v10 = a3;
  v8[6] = a4;
  int v11 = a5;
  uint64_t v5 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v8);
  uint64_t v6 = *((unsigned int *)v13 + 6);
  _Block_object_dispose(&v12, 8);
  return v6;
}

void sub_1BAE2EF0C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN14HALS_IOEngine222IsolatedReadFromStreamEjjRK17HALS_IOEngineInfoj_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(uint64_t (**)(void *, void, void, void, void))(*v2 + 1080))(v2, *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(void *)(a1 + 48), *(unsigned int *)(a1 + 64));
  unint64_t v3 = *(unsigned int *)(a1 + 56);
  uint64_t v4 = *(void *)(v2[96] + 72);
  unint64_t v5 = (*(void *)(v2[96] + 80) - v4) >> 3;
  if (v3 < v5)
  {
    if (v5 <= v3) {
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v6 = *(void *)(v4 + 8 * v3);
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 48);
      uint64_t v8 = *(unsigned int *)(a1 + 60);
      uint64_t v9 = *(void *)(v6 + 200);
      uint64_t v15 = 0;
      long long v14 = 0uLL;
      if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 320))(v7))
      {
        long long v10 = *(_OWORD *)(v7 + 560);
        *(_OWORD *)&v13.mSMPTETime.mSubframes = *(_OWORD *)(v7 + 544);
        *(_OWORD *)&v13.mSMPTETime.mHours = v10;
        long long v11 = *(_OWORD *)(v7 + 528);
        *(_OWORD *)&v13.double mSampleTime = *(_OWORD *)(v7 + 512);
        *(_OWORD *)&v13.mRateScalar = v11;
        v13.mFlags = DWORD2(v10) | 6;
        HALS_IOClock::TranslateTime(*(void *)(v7 + 288), (const AudioTimeStamp *)(v7 + 512), &v13);
        uint64_t v12 = *(HALS_IOClock **)(v7 + 288);
        uint64_t v17 = 0;
        long long v16 = 0uLL;
        HALS_IOClock::GetRaw0Time(v12, (double *)&v16, (unint64_t *)&v16 + 1);
        long long v14 = v16;
        uint64_t v15 = v17;
        if (v9) {
          HALB_CaptureFile::WriteTimestamps(v9, v7 + 448, (uint64_t)&v13, (uint64_t)&v14, v8);
        }
      }
    }
  }
}

uint64_t HALS_IOEngine2::ReadFromStream(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = 0;
  long long v14 = &v13;
  uint64_t v15 = 0x2000000000;
  int v16 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = ___ZN14HALS_IOEngine214ReadFromStreamEjjjRK17HALS_IOEngineInfoRK15HALS_BufferInfo_block_invoke;
  v9[3] = &unk_1E6234D80;
  uint64_t v9[4] = &v13;
  v9[5] = a1;
  int v10 = a3;
  int v11 = a2;
  int v12 = a4;
  v9[6] = a5;
  void v9[7] = a6;
  uint64_t v6 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v9);
  uint64_t v7 = *((unsigned int *)v14 + 6);
  _Block_object_dispose(&v13, 8);
  return v7;
}

void sub_1BAE2F17C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

atomic_uint *___ZN14HALS_IOEngine214ReadFromStreamEjjjRK17HALS_IOEngineInfoRK15HALS_BufferInfo_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  unint64_t v3 = (void *)v2[96];
  unint64_t v4 = *(unsigned int *)(a1 + 64);
  uint64_t v5 = v3[9];
  unint64_t v6 = (v3[10] - v5) >> 3;
  if (v4 >= v6) {
    goto LABEL_37;
  }
  if (v6 <= v4) {
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v7 = *(void *)(v5 + 8 * v4);
  if (!v7 || *(_DWORD *)(v7 + 24) != 1)
  {
LABEL_37:
    uint64_t result = (atomic_uint *)(*(uint64_t (**)(void, void))(*v2 + 1072))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 68));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    return result;
  }
  uint64_t v8 = *(void *)(a1 + 56);
  int v10 = (uint64_t *)v3[6];
  uint64_t v9 = (uint64_t *)v3[7];
  if (v10 == v9)
  {
LABEL_8:
    uint64_t v11 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v11 = *v10;
      if (*(_DWORD *)(*v10 + 16) == *(_DWORD *)(v7 + 16)) {
        break;
      }
      if (++v10 == v9) {
        goto LABEL_8;
      }
    }
  }
  uint64_t v12 = *(void *)(a1 + 48);
  unsigned int v13 = *(_DWORD *)(a1 + 72);
  if (((*(uint64_t (**)(void))(*v2 + 672))(*(void *)(a1 + 40)) & 1) == 0)
  {
    if (*(void *)v8) {
      uint64_t v33 = (char *)(*(void *)v8 + *(unsigned int *)(v8 + 8));
    }
    else {
      uint64_t v33 = 0;
    }
    goto LABEL_56;
  }
  double v14 = *(double *)(v12 + 512);
  double v15 = (double)v13;
  uint64_t v16 = v2[92];
  uint64_t v17 = v2[93];
  if (v16 == v17)
  {
    BOOL v31 = 0;
    double v28 = 0.0;
  }
  else
  {
    double v18 = v14 + v15;
    unint64_t v19 = *(unsigned int *)(v11 + 12);
    double v20 = 0.0;
    double v21 = 0.0;
    do
    {
      if (*(unsigned char *)(*(void *)v16 + 48))
      {
        uint64_t v22 = *(void *)(*(void *)(*(void *)v16 + 32) + 96);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v22 + 152))(v22))
        {
          uint64_t v23 = *(void *)(*(void *)v16 + 112);
          if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(*(void *)v16 + 120) - v23) >> 3) <= v19)
          {
            uint64_t v26 = 0;
            double v25 = 0.0;
          }
          else
          {
            uint64_t v24 = v23 + 40 * v19;
            double v25 = (double)*(uint64_t *)(v24 + 24);
            uint64_t v26 = *(void *)(v24 + 32);
          }
          double v27 = (double)v26;
          if (v21 <= v20)
          {
            double v21 = (double)v26;
            double v20 = v25;
          }
          else if (v25 < v27)
          {
            if (v25 < v20) {
              double v20 = v25;
            }
            if (v21 < v27) {
              double v21 = (double)v26;
            }
          }
        }
      }
      v16 += 8;
    }
    while (v16 != v17);
    double v28 = 0.0;
    if (v21 > v20)
    {
      if (v20 >= v14) {
        double v29 = v20;
      }
      else {
        double v29 = v14;
      }
      if (v18 >= v21) {
        double v30 = v21;
      }
      else {
        double v30 = v14 + v15;
      }
      if (v18 <= v14)
      {
        double v30 = v14 + v15;
        double v29 = v14;
      }
      if (v30 > v29)
      {
        BOOL v31 = v14 != 0.0;
        double v28 = v29;
        goto LABEL_44;
      }
    }
    BOOL v31 = 0;
  }
  double v30 = 0.0;
LABEL_44:
  if (*(void *)v8)
  {
    uint64_t v33 = (char *)(*(void *)v8 + *(unsigned int *)(v8 + 8));
    if (!v31) {
      goto LABEL_56;
    }
LABEL_49:
    double v34 = v30 - v28;
    double v35 = 0.0;
    if (v30 - v28 < v15)
    {
      bzero(v33, *(unsigned int *)(v8 + 12));
      double v35 = v28 - v14;
    }
    HALS_IOEngine2_StreamInfo::GetPointersForMixBuffer((uint64_t)&v51, v11, (unint64_t)v28, v34);
    size_t mCounter = v51.mSMPTETime.mCounter;
    if (v51.mWordClockTime) {
      uint64_t v38 = (const void *)(v51.mWordClockTime + *(unsigned int *)&v51.mSMPTETime.mSubframes);
    }
    else {
      uint64_t v38 = 0;
    }
    if (*(void *)&v51.mSampleTime)
    {
      uint64_t mHostTime_high = HIDWORD(v51.mHostTime);
      LODWORD(v36) = *(_DWORD *)(v11 + 64);
      v33 += (v35 * (double)v36);
      memcpy(v33, (const void *)(*(void *)&v51.mSampleTime + LODWORD(v51.mHostTime)), HIDWORD(v51.mHostTime));
    }
    else
    {
      uint64_t mHostTime_high = 0;
    }
    if (v38) {
      memcpy(&v33[mHostTime_high], v38, mCounter);
    }
    goto LABEL_57;
  }
  uint64_t v33 = 0;
  if (v31) {
    goto LABEL_49;
  }
LABEL_56:
  bzero(v33, *(unsigned int *)(v8 + 12));
LABEL_57:
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  uint64_t v41 = *(void *)(a1 + 48);
  uint64_t v40 = *(void *)(a1 + 56);
  if (*(void *)v40) {
    uint64_t v42 = *(void *)v40 + *(unsigned int *)(v40 + 8);
  }
  else {
    uint64_t v42 = 0;
  }
  uint64_t v43 = *(unsigned int *)(a1 + 72);
  uint64_t v44 = *(atomic_uint **)(v7 + 200);
  uint64_t result = (atomic_uint *)(*(uint64_t (**)(uint64_t))(*(void *)v41 + 320))(v41);
  if (result)
  {
    uint64_t v45 = *(HALS_IOClock **)(v41 + 288);
    long long v46 = *(_OWORD *)(v41 + 528);
    *(_OWORD *)&v51.double mSampleTime = *(_OWORD *)(v41 + 512);
    *(_OWORD *)&v51.mRateScalar = v46;
    long long v47 = *(_OWORD *)(v41 + 560);
    *(_OWORD *)&v51.mSMPTETime.mSubframes = *(_OWORD *)(v41 + 544);
    *(_OWORD *)&v51.mSMPTETime.mHours = v47;
    long long v48 = *(_OWORD *)(v41 + 464);
    v50[0] = *(_OWORD *)(v41 + 448);
    v50[1] = v48;
    long long v49 = *(_OWORD *)(v41 + 496);
    v50[2] = *(_OWORD *)(v41 + 480);
    void v50[3] = v49;
    return WriteToCaptureFile(v44, v45, &v51, (uint64_t)v50, v43, v42);
  }
  return result;
}

uint64_t HALS_IOEngine2::BeginReading(HALS_IOEngine2 *this, int a2, int a3, const HALS_IOEngineInfo *a4)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZN14HALS_IOEngine212BeginReadingEjjRK17HALS_IOEngineInfo_block_invoke;
  v7[3] = &unk_1E6234CE0;
  v7[4] = &v10;
  v7[5] = this;
  int v8 = a2;
  int v9 = a3;
  void v7[6] = a4;
  unint64_t v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  uint64_t v5 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v5;
}

void sub_1BAE2F674(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14HALS_IOEngine212BeginReadingEjjRK17HALS_IOEngineInfo_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, void))(**(void **)(a1 + 40) + 1064))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(void *)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t HALS_IOEngine2::EndIOCycle(HALS_IOEngine2 *this, int a2, const HALS_IOEngineInfo *a3)
{
  uint64_t v8 = 0;
  int v9 = &v8;
  uint64_t v10 = 0x2000000000;
  int v11 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  uint64_t v6[2] = ___ZN14HALS_IOEngine210EndIOCycleEjRK17HALS_IOEngineInfo_block_invoke;
  v6[3] = &unk_1E6234CB8;
  v6[4] = &v8;
  v6[5] = this;
  int v7 = a2;
  void v6[6] = a3;
  unint64_t v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  uint64_t v4 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1BAE2F7C0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14HALS_IOEngine210EndIOCycleEjRK17HALS_IOEngineInfo_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 40) + 1056))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 56), *(void *)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t HALS_IOEngine2::BeginIOCycle(HALS_IOEngine2 *this, int a2, const HALS_IOEngineInfo *a3)
{
  uint64_t v8 = 0;
  int v9 = &v8;
  uint64_t v10 = 0x2000000000;
  int v11 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  uint64_t v6[2] = ___ZN14HALS_IOEngine212BeginIOCycleEjRK17HALS_IOEngineInfo_block_invoke;
  v6[3] = &unk_1E6234C90;
  v6[4] = &v8;
  v6[5] = this;
  int v7 = a2;
  void v6[6] = a3;
  unint64_t v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  uint64_t v4 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1BAE2F90C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14HALS_IOEngine212BeginIOCycleEjRK17HALS_IOEngineInfo_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 40) + 1048))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 56), *(void *)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t HALS_IOEngine2::EndIOThread(HALS_IOEngine2 *this, int a2, const HALS_IOEngineInfo *a3, const applesauce::CF::DictionaryRef *a4)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2000000000;
  int v12 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZN14HALS_IOEngine211EndIOThreadEjRK17HALS_IOEngineInfoRKN10applesauce2CF13DictionaryRefE_block_invoke;
  v7[3] = &unk_1E6234C68;
  v7[4] = &v9;
  v7[5] = this;
  int v8 = a2;
  void v7[6] = a3;
  void v7[7] = a4;
  uint64_t v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  uint64_t v5 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_1BAE2FA58(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14HALS_IOEngine211EndIOThreadEjRK17HALS_IOEngineInfoRKN10applesauce2CF13DictionaryRefE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, void))(**(void **)(a1 + 40) + 1024))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 64), *(void *)(a1 + 48), *(void *)(a1 + 56));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t HALS_IOEngine2::BeginIOThread(HALS_IOEngine2 *this, int a2, const HALS_IOEngineInfo *a3, const applesauce::CF::DictionaryRef *a4)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2000000000;
  int v12 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZN14HALS_IOEngine213BeginIOThreadEjRK17HALS_IOEngineInfoRKN10applesauce2CF13DictionaryRefE_block_invoke;
  v7[3] = &unk_1E6234C40;
  v7[4] = &v9;
  v7[5] = this;
  int v8 = a2;
  void v7[6] = a3;
  void v7[7] = a4;
  uint64_t v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  uint64_t v5 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v5;
}

void sub_1BAE2FBA4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14HALS_IOEngine213BeginIOThreadEjRK17HALS_IOEngineInfoRKN10applesauce2CF13DictionaryRefE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, void, void))(**(void **)(a1 + 40) + 1016))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 64), *(void *)(a1 + 48), *(void *)(a1 + 56), 0);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void HALS_IOEngine2::UpdateEngineIsMixing(HALS_IOEngine2 *this)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZN14HALS_IOEngine220UpdateEngineIsMixingEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_91_11998;
  void v2[4] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v2);
}

uint64_t ___ZN14HALS_IOEngine220UpdateEngineIsMixingEv_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  uint64_t v2 = *(uint64_t **)(v1 + 736);
  unint64_t v3 = *(uint64_t **)(v1 + 744);
  if (v2 == v3)
  {
    int v4 = 0;
  }
  else
  {
    int v4 = 0;
    do
    {
      uint64_t v5 = *v2;
      if (*(unsigned char *)(*v2 + 48))
      {
        uint64_t result = HALS_IOEngine2_IOContextInfo::HasAnActiveOutputStream(*(HALS_IOEngine2_IOContextInfo **)(v5 + 56), *(void *)(v5 + 64));
        if (result)
        {
          uint64_t result = (*(uint64_t (**)(void))(**(void **)(*(void *)(v5 + 32) + 96) + 160))(*(void *)(*(void *)(v5 + 32) + 96));
          v4 += result;
        }
      }
      ++v2;
    }
    while (v2 != v3);
  }
  atomic_store(v4 > 1, (unsigned __int8 *)(v1 + 1096));
  return result;
}

void HALS_IOEngine2::StopIO(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315650;
    uint64_t v10 = "HALS_IOEngine2.cpp";
    __int16 v11 = 1024;
    int v12 = 2239;
    __int16 v13 = 2080;
    uint64_t v14 = a1 + 796;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOEngine2::StopIO: stopping IO on device %s", buf, 0x1Cu);
  }
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZN14HALS_IOEngine26StopIOEP14HALS_IOContextN21HALS_IOPrewarmManager11EngineStateE_block_invoke;
  v7[3] = &__block_descriptor_tmp_73_12002;
  v7[4] = a1;
  v7[5] = a2;
  int v8 = a3;
  unint64_t v6 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v7);
}

void ___ZN14HALS_IOEngine26StopIOEP14HALS_IOContextN21HALS_IOPrewarmManager11EngineStateE_block_invoke(uint64_t a1)
{
  BOOL v2 = 0;
  uint64_t v1 = *(HALS_IOEngine2 **)(a1 + 32);
  (*(void (**)(HALS_IOEngine2 *, void, void, BOOL *))(*(void *)v1 + 992))(v1, *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), &v2);
  HALS_IOEngine2::_SendIsRunningNotifications(v1, v2);
}

void HALS_IOEngine2::_SendIsRunningNotifications(HALS_IOEngine2 *this, char a2)
{
  unint64_t v6 = 0;
  int v7 = 0;
  uint64_t v8 = 0;
  (*(void (**)(HALS_IOEngine2 *, unsigned char **))(*(void *)this + 912))(this, &v6);
  if ((a2 & 1) != 0 || v6 != v7)
  {
    int v4 = *((_DWORD *)this + 7);
    memset(v9, 0, sizeof(v9));
    std::vector<RunningIOContextClientInfo>::__init_with_size[abi:ne180100]<RunningIOContextClientInfo*,RunningIOContextClientInfo*>(v9, v6, (uint64_t)v7, 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 2));
    int v10 = v4;
    char v11 = a2;
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)this + 96);
    if (v5) {
      atomic_store(1u, (unsigned __int8 *)this + 97);
    }
    operator new();
  }
  if (v6)
  {
    int v7 = v6;
    operator delete(v6);
  }
}

void sub_1BAE30098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOEngine2::StartIO(HALS_IOEngine2 *this, HALS_IOContext *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "HALS_IOEngine2.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2225;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = (char *)this + 796;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOEngine2::StartIO: starting IO on device %s", buf, 0x1Cu);
  }
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&buf[16] = 0x2000000000;
  *(_DWORD *)&unsigned char buf[24] = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZN14HALS_IOEngine27StartIOEP14HALS_IOContext_block_invoke;
  v7[3] = &unk_1E6234BD8;
  v7[4] = buf;
  v7[5] = this;
  void v7[6] = a2;
  int v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  uint64_t v5 = *(unsigned int *)(*(void *)&buf[8] + 24);
  _Block_object_dispose(buf, 8);
  return v5;
}

void sub_1BAE3022C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN14HALS_IOEngine27StartIOEP14HALS_IOContext_block_invoke(void *a1)
{
  BOOL v2 = 0;
  uint64_t v1 = (HALS_IOEngine2 *)a1[5];
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = (*(uint64_t (**)(HALS_IOEngine2 *, void, uint64_t, BOOL *))(*(void *)v1 + 984))(v1, a1[6], 2, &v2);
  HALS_IOEngine2::_SendIsRunningNotifications(v1, v2);
}

uint64_t HALS_IOEngine2::IsIORunningForReferenceStream(HALS_IOEngine2 *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 1076);
  return v1 & 1;
}

BOOL HALS_IOEngine2::IsIORunning(HALS_IOEngine2 *this)
{
  unsigned int v1 = atomic_load((unsigned int *)this + 268);
  return v1 != 0;
}

void HALS_IOEngine2::UnregisterIOBuffer(HALS_IOEngine2 *this, char a2, int a3, int a4, int a5, void *a6)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZN14HALS_IOEngine218UnregisterIOBufferEbjjjPv_block_invoke;
  v7[3] = &__block_descriptor_tmp_69_12013;
  char v11 = a2;
  int v8 = a3;
  int v9 = a4;
  int v10 = a5;
  v7[4] = this;
  v7[5] = a6;
  unint64_t v6 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v7);
}

uint64_t ___ZN14HALS_IOEngine218UnregisterIOBufferEbjjjPv_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void, void))(**(void **)(a1 + 32) + 976))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 60), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), *(unsigned int *)(a1 + 56), *(void *)(a1 + 40));
}

uint64_t HALS_IOEngine2::RegisterIOBuffer(HALS_IOEngine2 *this, char a2, int a3, int a4, int a5, void *a6)
{
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2000000000;
  int v17 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = ___ZN14HALS_IOEngine216RegisterIOBufferEbjjjPv_block_invoke;
  void v9[3] = &unk_1E6234B48;
  uint64_t v9[4] = &v14;
  v9[5] = this;
  char v13 = a2;
  int v10 = a3;
  int v11 = a4;
  int v12 = a5;
  v9[6] = a6;
  unint64_t v6 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v9);
  uint64_t v7 = *((unsigned int *)v15 + 6);
  _Block_object_dispose(&v14, 8);
  return v7;
}

void sub_1BAE3049C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN14HALS_IOEngine216RegisterIOBufferEbjjjPv_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, void, void, void))(**(void **)(a1 + 40) + 968))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 68), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(unsigned int *)(a1 + 64), *(void *)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t HALS_IOEngine2::Unregister_IOThread(HALS_IOEngine2 *this)
{
  return 0;
}

uint64_t HALS_IOEngine2::Register_IOThread(HALS_IOEngine2 *this, double a2)
{
  return 0;
}

void HALS_IOEngine2::TimelineWasReset(HALS_IOEngine2 *this, int a2, int a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZN14HALS_IOEngine216TimelineWasResetEjj_block_invoke;
  v4[3] = &__block_descriptor_tmp_74_12019;
  v4[4] = this;
  int v5 = a3;
  int v6 = a2;
  unint64_t v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v4);
}

uint64_t ___ZN14HALS_IOEngine216TimelineWasResetEjj_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(v1 + 1096));
  uint64_t v3 = *(void *)(v1 + 768);
  if (v3 && ((*(_DWORD *)(result + 40) & 1) != 0 || (v2 & 1) == 0))
  {
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 48;
    char v6 = 1;
    do
    {
      char v7 = v6;
      uint64_t v9 = v5 + 24 * v4;
      int v8 = *(uint64_t **)v9;
      uint64_t v10 = *(void *)(v9 + 8) - *(void *)v9;
      if ((v10 & 0x7FFFFFFF8) != 0)
      {
        uint64_t v11 = ((unint64_t)v10 >> 3);
        uint64_t v12 = v10 >> 3;
        do
        {
          if (!v12) {
            std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v13 = *v8++;
          *(void *)(v13 + 464) = 0;
          --v12;
          --v11;
        }
        while (v11);
      }
      char v6 = 0;
      uint64_t v4 = 1;
    }
    while ((v7 & 1) != 0);
  }
  uint64_t v14 = *(uint64_t **)(v1 + 736);
  uint64_t v15 = *(uint64_t **)(v1 + 744);
  if (v14 != v15)
  {
    int v16 = *(_DWORD *)(result + 44);
    do
    {
      uint64_t v17 = *v14;
      if (*(_DWORD *)(*(void *)(*v14 + 32) + 16) == v16)
      {
        uint64_t v18 = *(void *)(v17 + 112);
        uint64_t v19 = *(void *)(v17 + 120);
        if (v18 != v19)
        {
          uint64_t v20 = v18;
          do
          {
            *(void *)(v20 + 24) = 0;
            v20 += 40;
          }
          while (v20 != v19);
          do
          {
            *(void *)(v18 + 32) = 0;
            v18 += 40;
          }
          while (v18 != v19);
        }
      }
      ++v14;
    }
    while (v14 != v15);
  }
  return result;
}

void HALS_IOEngine2::UpdateIssueReporters(HALS_IOEngine2 *this)
{
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x4002000000;
  uint64_t v13 = __Block_byref_object_copy__65;
  uint64_t v14 = __Block_byref_object_dispose__66;
  std::string __p = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = ___ZN14HALS_IOEngine220UpdateIssueReportersEv_block_invoke;
  void v9[3] = &unk_1E6234B20;
  uint64_t v9[4] = &v10;
  v9[5] = this;
  unsigned __int8 v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v9);
  uint64_t v3 = v11;
  uint64_t v5 = *((void *)this + 6);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v6 = (const void *)v3[5];
  uint64_t v7 = v3[6];
  if (v6 != (const void *)v7 && v5)
  {
    memset(v18, 0, 24);
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v18, v6, v7, (v7 - (uint64_t)v6) >> 2);
    v18[3] = v5;
    v18[4] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned __int8 v8 = atomic_load((unsigned __int8 *)this + 96);
    if (v8) {
      atomic_store(1u, (unsigned __int8 *)this + 97);
    }
    operator new();
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Block_object_dispose(&v10, 8);
  if (__p)
  {
    int v16 = __p;
    operator delete(__p);
  }
}

void sub_1BAE308C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Block_object_dispose(&a15, 8);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__65(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__66(uint64_t a1)
{
  unsigned __int8 v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZN14HALS_IOEngine220UpdateIssueReportersEv_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 904))(*(void *)(a1 + 40), *(void *)(*(void *)(a1 + 32) + 8) + 40);
}

void HALS_IOEngine2::DestroyCaptureFiles(HALS_IOEngine2 *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 136315650;
    uint64_t v12 = "HALS_IOEngine2.cpp";
    __int16 v13 = 1024;
    int v14 = 2160;
    __int16 v15 = 2080;
    int v16 = (char *)this + 796;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOEngine2::DestroyCaptureFiles() device %s", (uint8_t *)&v11, 0x1Cu);
  }
  uint64_t v2 = *((void *)this + 96);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 136315394;
    uint64_t v12 = "HALS_IOEngine2.cpp";
    __int16 v13 = 1024;
    int v14 = 969;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOEngine2_DeviceInfo::DestroyCaptureFiles()", (uint8_t *)&v11, 0x12u);
  }
  uint64_t v3 = 0;
  uint64_t v4 = v2 + 48;
  char v5 = 1;
  do
  {
    char v6 = v5;
    uint64_t v7 = (uint64_t **)(v4 + 24 * v3);
    unsigned __int8 v8 = *v7;
    uint64_t v9 = v7[1];
    while (v8 != v9)
    {
      uint64_t v10 = *v8++;
      std::unique_ptr<HALB_CaptureFile>::reset[abi:ne180100]((unsigned __int8 ***)(v10 + 200), 0);
    }
    char v5 = 0;
    uint64_t v3 = 1;
  }
  while ((v6 & 1) != 0);
}

void HALS_IOEngine2::CreateCaptureFiles(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 136315650;
    uint64_t v12 = "HALS_IOEngine2.cpp";
    __int16 v13 = 1024;
    int v14 = 2154;
    __int16 v15 = 2080;
    uint64_t v16 = a1 + 796;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOEngine2::CreateCaptureFiles() device %s", (uint8_t *)&v11, 0x1Cu);
  }
  uint64_t v2 = *(void *)(a1 + 768);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 136315394;
    uint64_t v12 = "HALS_IOEngine2.cpp";
    __int16 v13 = 1024;
    int v14 = 957;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOEngine2_DeviceInfo::CreateCaptureFiles()", (uint8_t *)&v11, 0x12u);
  }
  uint64_t v3 = 0;
  uint64_t v4 = v2 + 48;
  char v5 = 1;
  do
  {
    char v6 = v5;
    uint64_t v7 = (uint64_t **)(v4 + 24 * v3);
    unsigned __int8 v8 = *v7;
    uint64_t v9 = v7[1];
    while (v8 != v9)
    {
      uint64_t v10 = *v8++;
      HALS_IOEngine2_StreamInfo::CreateCaptureFile(v10);
    }
    char v5 = 0;
    uint64_t v3 = 1;
  }
  while ((v6 & 1) != 0);
}

void HALS_IOEngine2::SetAudioCaptureMode(uint64_t a1, int a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN14HALS_IOEngine219SetAudioCaptureModeE17AudioCapturerMode_block_invoke;
  v3[3] = &__block_descriptor_tmp_64_12035;
  v3[4] = a1;
  int v4 = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

uint64_t ___ZN14HALS_IOEngine219SetAudioCaptureModeE17AudioCapturerMode_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 960))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t HALS_IOEngine2::IsCaptureFileEnabled(HALS_IOEngine2 *this)
{
  uint64_t v5 = 0;
  char v6 = &v5;
  uint64_t v7 = 0x2000000000;
  char v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK14HALS_IOEngine220IsCaptureFileEnabledEv_block_invoke;
  v4[3] = &unk_1E6234AD8;
  v4[4] = &v5;
  void v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BAE30E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14HALS_IOEngine220IsCaptureFileEnabledEv_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 952))(*(void *)(a1 + 40));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t HALS_IOEngine2::HasDSPParameterForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3)
{
  HALS_IOEngine2::GetDSPForStreamAtIndex((HALS_IOEngine2 *)&v6, (uint64_t)this, a2, a3);
  if (v6 && (uint64_t v3 = *v6) != 0 && *((unsigned char *)v3 + 762)) {
    uint64_t hasParameter = DSPGraph::Graph::hasParameter(v3);
  }
  else {
    uint64_t hasParameter = 0;
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return hasParameter;
}

void HALS_IOEngine2::GetDSPForStreamAtIndex(HALS_IOEngine2 *this, uint64_t a2, char a3, int a4)
{
  uint64_t v10 = 0;
  int v11 = &v10;
  uint64_t v12 = 0x3802000000;
  __int16 v13 = __Block_byref_object_copy__57;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int v14 = __Block_byref_object_dispose__58;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK14HALS_IOEngine222GetDSPForStreamAtIndexEbj_block_invoke;
  v7[3] = &unk_1E6234A38;
  char v9 = a3;
  int v8 = a4;
  v7[4] = &v10;
  v7[5] = a2;
  uint64_t v5 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v7);
  uint64_t v6 = v11[6];
  *(void *)this = v11[5];
  *((void *)this + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  _Block_object_dispose(&v10, 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
}

void sub_1BAE31014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__57(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose__58(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZNK14HALS_IOEngine222GetDSPForStreamAtIndexEbj_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 40) + 768);
  if (v1)
  {
    unint64_t v2 = *(unsigned int *)(a1 + 48);
    int v4 = (uint64_t *)(v1 + 24 * *(unsigned __int8 *)(a1 + 52) + 48);
    uint64_t v3 = *v4;
    unint64_t v5 = (v4[1] - *v4) >> 3;
    if (v2 < v5)
    {
      if (v5 <= v2) {
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v6 = *(void *)(v3 + 8 * v2);
      if (v6)
      {
        uint64_t v8 = *(void *)(v6 + 184);
        uint64_t v7 = *(void *)(v6 + 192);
        if (v7) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
        uint64_t v10 = *(std::__shared_weak_count **)(v9 + 48);
        *(void *)(v9 + 40) = v8;
        *(void *)(v9 + 48) = v7;
        if (v10)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
      }
    }
  }
}

uint64_t HALS_IOEngine2::GetDSPParameterForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3, uint64_t a4, float *a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  HALS_IOEngine2::GetDSPForStreamAtIndex((HALS_IOEngine2 *)&v11, (uint64_t)this, a2, a3);
  uint64_t v7 = v11;
  if (v11
    && (uint64_t v8 = (DSPGraph::Graph *)*v11) != 0
    && *((unsigned char *)v8 + 762)
    && DSPGraph::Graph::hasParameter(v8))
  {
    v13[0] = BYTE3(a4);
    v13[1] = BYTE2(a4);
    _DWORD v13[2] = BYTE1(a4);
    v13[3] = a4;
    v13[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315650;
      *(void *)&buf[1] = "HALS_IOStreamDSP.cpp";
      __int16 v15 = 1024;
      int v16 = 379;
      __int16 v17 = 2080;
      uint64_t v18 = v13;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOStreamDSP::GetDSPParameter parameter %s", (uint8_t *)buf, 0x1Cu);
    }
    *a5 = (*(float (**)(void, uint64_t))(*(void *)*v7 + 48))(*v7, a4);
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v9;
}

void sub_1BAE31468(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::SetDSPParameterForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3, uint64_t a4, float a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  HALS_IOEngine2::GetDSPForStreamAtIndex((HALS_IOEngine2 *)&v11, (uint64_t)this, a2, a3);
  uint64_t v7 = v11;
  if (v11
    && (uint64_t v8 = (DSPGraph::Graph *)*v11) != 0
    && *((unsigned char *)v8 + 762)
    && DSPGraph::Graph::hasParameter(v8))
  {
    v13[0] = BYTE3(a4);
    v13[1] = BYTE2(a4);
    _DWORD v13[2] = BYTE1(a4);
    v13[3] = a4;
    v13[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315650;
      *(void *)&buf[1] = "HALS_IOStreamDSP.cpp";
      __int16 v15 = 1024;
      int v16 = 348;
      __int16 v17 = 2080;
      uint64_t v18 = v13;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOStreamDSP::SetDSPParameter parameter %s", (uint8_t *)buf, 0x1Cu);
    }
    (*(void (**)(void, uint64_t, float))(*(void *)*v7 + 40))(*v7, a4, a5);
    uint64_t v9 = 1;
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v9;
}

void sub_1BAE317F4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::HasDSPPropertyForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3)
{
  HALS_IOEngine2::GetDSPForStreamAtIndex((HALS_IOEngine2 *)&v6, (uint64_t)this, a2, a3);
  if (v6 && (uint64_t v3 = *v6) != 0 && *((unsigned char *)v3 + 762)) {
    uint64_t hasProperty = DSPGraph::Graph::hasProperty(v3);
  }
  else {
    uint64_t hasProperty = 0;
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return hasProperty;
}

uint64_t HALS_IOEngine2::GetDSPPropertyForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3, uint64_t a4, unsigned int *a5, void *a6)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  HALS_IOEngine2::GetDSPForStreamAtIndex((HALS_IOEngine2 *)&v13, (uint64_t)this, a2, a3);
  uint64_t v9 = v13;
  if (v13
    && (uint64_t v10 = (DSPGraph::Graph *)*v13) != 0
    && *((unsigned char *)v10 + 762)
    && DSPGraph::Graph::hasProperty(v10))
  {
    v15[0] = BYTE3(a4);
    v15[1] = BYTE2(a4);
    uint64_t v15[2] = BYTE1(a4);
    void v15[3] = a4;
    v15[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315650;
      *(void *)&buf[1] = "HALS_IOStreamDSP.cpp";
      __int16 v17 = 1024;
      int v18 = 309;
      __int16 v19 = 2080;
      uint64_t v20 = v15;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOStreamDSP::GetDSPProperty property %s", (uint8_t *)buf, 0x1Cu);
    }
    buf[0] = *a5;
    (*(void (**)(void, uint64_t, _DWORD *, void *))(*(void *)*v9 + 72))(*v9, a4, buf, a6);
    *a5 = buf[0];
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  return v11;
}

void sub_1BAE31C10(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

BOOL HALS_IOEngine2::GetDSPPropertyInfoForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3, uint64_t a4, unsigned int *a5, BOOL *a6)
{
  *(void *)&v24[5] = *MEMORY[0x1E4F143B8];
  HALS_IOEngine2::GetDSPForStreamAtIndex((HALS_IOEngine2 *)&v16, (uint64_t)this, a2, a3);
  uint64_t v9 = v16;
  if (v16
    && (uint64_t v10 = (DSPGraph::Graph *)*v16) != 0
    && *((unsigned char *)v10 + 762)
    && DSPGraph::Graph::hasProperty(v10))
  {
    v18[0] = BYTE3(a4);
    v18[1] = BYTE2(a4);
    v18[2] = BYTE1(a4);
    v18[3] = a4;
    v18[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315650;
      uint64_t v20 = "HALS_IOStreamDSP.cpp";
      __int16 v21 = 1024;
      int v22 = 284;
      __int16 v23 = 2080;
      *(void *)uint64_t v24 = v18;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOStreamDSP::GetDSPPropertyInfo property %s", buf, 0x1Cu);
    }
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t))(*(void *)*v9 + 64))(*v9, a4);
    int v12 = v11;
    BOOL v14 = v13 != 0;
    if (v13)
    {
      *a5 = v11;
      *a6 = BYTE4(v11);
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315906;
      uint64_t v20 = "HALS_IOStreamDSP.cpp";
      __int16 v21 = 1024;
      int v22 = 288;
      __int16 v23 = 1024;
      v24[0] = v12;
      LOWORD(v24[1]) = 2080;
      *(void *)((char *)&v24[1] + 2) = v18;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  error %d while getting property info %s in HALS_IOStreamDSP::GetDSPPropertyInfo()", buf, 0x22u);
    }
  }
  else
  {
    BOOL v14 = 0;
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  return v14;
}

uint64_t HALS_IOEngine2::SetDSPPropertyForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3, uint64_t a4, uint64_t a5, const void *a6)
{
  HALS_IOEngine2::GetDSPForStreamAtIndex((HALS_IOEngine2 *)&v11, (uint64_t)this, a2, a3);
  if (v11 && *(void *)v11 && *(unsigned char *)(*(void *)v11 + 762)) {
    uint64_t v9 = HALS_IOStreamDSP::SetDSPProperty(v11, a4, a5, a6);
  }
  else {
    uint64_t v9 = 0;
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v9;
}

uint64_t HALS_IOEngine2::GetDSPLatencyForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3)
{
  HALS_IOEngine2::GetDSPForStreamAtIndex((HALS_IOEngine2 *)&v14, (uint64_t)this, a2, a3);
  int v4 = v14;
  if (v14 && *v14 && *((unsigned char *)*v14 + 762))
  {
    double v5 = (*(double (**)(HALS_IOEngine2 *))(*(void *)this + 328))(this);
    uint64_t v6 = *v4;
    if (*v4)
    {
      unsigned int v7 = 0;
      double v8 = 0.0;
      while (v7 < DSPGraph::Graph::numOutputs(v6))
      {
        uint64_t v9 = (DSPGraph::Box *)DSPGraph::Graph::out(*v4);
        DSPGraph::Box::totalLatencyInSeconds(v9);
        if (v10 >= v8) {
          double v8 = v10;
        }
        ++v7;
        uint64_t v6 = *v4;
      }
    }
    else
    {
      double v8 = 0.0;
    }
    float v12 = v5;
    uint64_t v11 = (v8 * v12);
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  return v11;
}

void sub_1BAE31FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOEngine2::HasSoftwareReferenceStream(HALS_IOEngine2 *this)
{
  int HasSoftwareReferenceStreamInScope = HALS_IOEngine2::HasSoftwareReferenceStreamInScope(this, 1);
  return HasSoftwareReferenceStreamInScope | HALS_IOEngine2::HasSoftwareReferenceStreamInScope(this, 0);
}

uint64_t HALS_IOEngine2::HasSoftwareReferenceStreamInScope(HALS_IOEngine2 *this, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 400))(this);
  if (result)
  {
    unsigned int v5 = result;
    if ((*(uint64_t (**)(HALS_IOEngine2 *, uint64_t, void))(*(void *)this + 488))(this, a2, 0))
    {
      return 1;
    }
    else
    {
      uint64_t v6 = 1;
      while (v5 != v6)
      {
        int v7 = (*(uint64_t (**)(HALS_IOEngine2 *, uint64_t, uint64_t))(*(void *)this + 488))(this, a2, v6);
        uint64_t v6 = (v6 + 1);
        if (v7)
        {
          unsigned int v8 = v6 - 1;
          return v8 < v5;
        }
      }
      unsigned int v8 = v5;
      return v8 < v5;
    }
  }
  return result;
}

BOOL HALS_IOEngine2::HasSoftwareReferenceStreamAtIndex(HALS_IODevice **this, char a2, int a3)
{
  uint64_t v3 = (HALS_ObjectMap *)HALS_IODevice::CopyStreamByIndex(this[88], a2, a3);
  if (v3) {
    BOOL v5 = *((_DWORD *)v3 + 14) == 1;
  }
  else {
    BOOL v5 = 0;
  }
  HALS_ObjectMap::ReleaseObject(v3, v4);
  return v5;
}

BOOL HALS_IOEngine2::SetDSPForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3, const HALS_DSPSettings *a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v44 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  if (!(*(unsigned int (**)(HALS_IOEngine2 *, void))(*(void *)this + 400))(this, 0))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      long long v46 = "HALS_IOEngine2.cpp";
      __int16 v47 = 1024;
      int v48 = 1857;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  GetInputStreamChannelCountsForOutputDSP: bad stream index", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1970171760;
  }
  (*(void (**)(HALS_IOEngine2 *, void, void, long long *))(*(void *)this + 432))(this, 0, 0, &v42);
  unsigned int v8 = std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(1uLL);
  char v35 = a2;
  long long v10 = v42;
  long long v11 = v43;
  v8[4] = v44;
  *(_OWORD *)unsigned int v8 = v10;
  *((_OWORD *)v8 + 1) = v11;
  unint64_t v12 = (unint64_t)(v8 + 5);
  char v13 = (unsigned int *)*((void *)a4 + 9);
  BOOL v14 = (unsigned int *)*((void *)a4 + 10);
  if (v13 == v14)
  {
    int v16 = v8;
  }
  else
  {
    __int16 v15 = (char *)&v8[5 * v9];
    int v16 = v8;
    do
    {
      uint64_t v17 = *v13;
      if (v17 >= (*(unsigned int (**)(HALS_IOEngine2 *, uint64_t))(*(void *)this + 400))(this, 1))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          long long v46 = "HALS_IOEngine2.cpp";
          __int16 v47 = 1024;
          int v48 = 1863;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  GetInputStreamChannelCountsForOutputDSP: bad stream index", buf, 0x12u);
        }
        uint64_t v33 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v33 = off_1F148A5D8;
        v33[2] = 1970171760;
      }
      (*(void (**)(HALS_IOEngine2 *, uint64_t, uint64_t, long long *))(*(void *)this + 432))(this, 1, v17, &v42);
      if (v12 >= (unint64_t)v15)
      {
        unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - (void)v16) >> 3) + 1;
        if (v20 > 0x666666666666666) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((v15 - v16) >> 3) > v20) {
          unint64_t v20 = 0x999999999999999ALL * ((v15 - v16) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((v15 - v16) >> 3) >= 0x333333333333333) {
          unint64_t v21 = 0x666666666666666;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21) {
          unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v21);
        }
        else {
          uint64_t v22 = 0;
        }
        unint64_t v23 = v21 + 8 * ((uint64_t)(v12 - (void)v16) >> 3);
        long long v24 = v42;
        long long v25 = v43;
        *(void *)(v23 + 32) = v44;
        *(_OWORD *)unint64_t v23 = v24;
        *(_OWORD *)(v23 + 16) = v25;
        if ((unsigned char *)v12 == v16)
        {
          double v29 = (unsigned char *)(v21 + 8 * ((uint64_t)(v12 - (void)v16) >> 3));
        }
        else
        {
          unint64_t v26 = v21 + 8 * ((uint64_t)(v12 - (void)v16) >> 3);
          do
          {
            long long v27 = *(_OWORD *)(v12 - 40);
            long long v28 = *(_OWORD *)(v12 - 24);
            double v29 = (unsigned char *)(v26 - 40);
            *(void *)(v26 - 8) = *(void *)(v12 - 8);
            *(_OWORD *)(v26 - 24) = v28;
            *(_OWORD *)(v26 - 40) = v27;
            v12 -= 40;
            v26 -= 40;
          }
          while ((unsigned char *)v12 != v16);
        }
        __int16 v15 = (char *)(v21 + 40 * v22);
        unint64_t v12 = v23 + 40;
        if (v16) {
          operator delete(v16);
        }
        int v16 = v29;
      }
      else
      {
        long long v18 = v42;
        long long v19 = v43;
        *(void *)(v12 + 32) = v44;
        *(_OWORD *)unint64_t v12 = v18;
        *(_OWORD *)(v12 + 16) = v19;
        v12 += 40;
      }
      ++v13;
    }
    while (v13 != v14);
  }
  *(void *)&long long v42 = 0;
  *((void *)&v42 + 1) = &v42;
  *(void *)&long long v43 = 0x2000000000;
  BYTE8(v43) = 0;
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 1174405120;
  void v36[2] = ___ZN14HALS_IOEngine222SetDSPForStreamAtIndexEbjRK16HALS_DSPSettings_block_invoke;
  v36[3] = &unk_1F147A1E8;
  v36[4] = &v42;
  v36[5] = this;
  char v41 = v35;
  int v40 = a3;
  v36[6] = a4;
  std::string __p = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  std::vector<CA::StreamDescription>::__init_with_size[abi:ne180100]<CA::StreamDescription*,CA::StreamDescription*>(&__p, v16, v12, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - (void)v16) >> 3));
  double v30 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v30, (uint64_t)v36);
  int v31 = *(unsigned __int8 *)(*((void *)&v42 + 1) + 24);
  if (__p)
  {
    uint64_t v38 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v42, 8);
  if (v16) {
    operator delete(v16);
  }
  return v31 != 0;
}

void sub_1BAE326AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  _Block_object_dispose(&a23, 8);
  if (v23) {
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void ___ZN14HALS_IOEngine222SetDSPForStreamAtIndexEbjRK16HALS_DSPSettings_block_invoke(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v241 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = v2[96];
  if (v3)
  {
    unsigned int v4 = *(unsigned __int8 *)(v1 + 84);
    unint64_t v5 = *(unsigned int *)(v1 + 80);
    uint64_t v213 = *(void *)(v1 + 48);
    (*(void (**)(void *))(*v2 + 336))(v2);
    unsigned int v6 = v5;
    uint64_t v7 = *(void *)(v3 + 24 * v4 + 48);
    unint64_t v8 = (*(void *)(v3 + 24 * v4 + 56) - v7) >> 3;
    if (v5 >= v8) {
      goto LABEL_291;
    }
    uint64_t v209 = (*(void *)(v3 + 24 * v4 + 56) - v7) >> 3;
    if (v8 <= v5) {
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    }
    unsigned int v208 = v5;
    uint64_t v9 = *(void *)(v7 + 8 * v5);
    long long v10 = (char *)operator new(0xD8uLL);
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    *(void *)long long v10 = &unk_1F147CB28;
    *(_OWORD *)(v10 + 24) = 0u;
    long long v11 = (HALS_IOStreamDSP *)(v10 + 24);
    *((void *)v10 + 16) = 0;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *((_DWORD *)v10 + 30) = 0;
    *((_OWORD *)v10 + 10) = 0u;
    *((_OWORD *)v10 + 11) = 0u;
    *((_OWORD *)v10 + 12) = 0u;
    *((void *)v10 + 26) = 0;
    *(void *)&long long v12 = v10 + 24;
    *((void *)&v12 + 1) = v10;
    char v13 = *(std::__shared_weak_count **)(v9 + 192);
    *(_OWORD *)(v9 + 184) = v12;
    uint64_t v14 = v213;
    if (v13)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      long long v11 = *(HALS_IOStreamDSP **)(v9 + 184);
    }
    uint64_t v15 = *(unsigned __int8 *)(v213 + 23);
    if ((v15 & 0x80u) != 0) {
      uint64_t v15 = *(void *)(v213 + 8);
    }
    if (v15)
    {
      int v16 = (AMCP::Log::Scope_Registry *)DSPGraph::ABIVersion((DSPGraph *)v13);
      if (v16 == 4)
      {
        if ((HALS_IOStreamDSP *)((char *)v11 + 48) != (HALS_IOStreamDSP *)(v213 + 72)) {
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v11 + 48, *(char **)(v213 + 72), *(void *)(v213 + 80), (uint64_t)(*(void *)(v213 + 80) - *(void *)(v213 + 72)) >> 2);
        }
        uint64_t v17 = *((void *)v11 + 3);
        for (uint64_t i = *((void *)v11 + 4); i != v17; std::__destroy_at[abi:ne180100]<HALS_IOStreamDSP::InputChannelData,0>(i))
          i -= 88;
        *((void *)v11 + 4) = v17;
        uint64_t v28 = v1;
        double v29 = *(long long **)(v1 + 56);
        uint64_t v207 = v28;
        double v30 = *(long long **)(v28 + 64);
        int v212 = v11;
        if (v29 != v30)
        {
          long long v210 = *(long long **)(v28 + 64);
          do
          {
            long long v31 = v29[1];
            long long v217 = *v29;
            long long v218 = v31;
            uint64_t v219 = *((void *)v29 + 4);
            *(_OWORD *)std::string buf = v217;
            *(_OWORD *)&buf[16] = v31;
            uint64_t v227 = v219;
            uint64_t v228 = 0;
            v229[3] = 0;
            char v230 = 0;
            unint64_t v33 = *((void *)v11 + 4);
            unint64_t v32 = *((void *)v11 + 5);
            if (v33 >= v32)
            {
              uint64_t v38 = *((void *)v11 + 3);
              uint64_t v39 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v33 - v38) >> 3);
              unint64_t v40 = v39 + 1;
              if ((unint64_t)(v39 + 1) > 0x2E8BA2E8BA2E8BALL) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v41 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v32 - v38) >> 3);
              if (2 * v41 > v40) {
                unint64_t v40 = 2 * v41;
              }
              if (v41 >= 0x1745D1745D1745DLL) {
                unint64_t v42 = 0x2E8BA2E8BA2E8BALL;
              }
              else {
                unint64_t v42 = v40;
              }
              if (v42)
              {
                if (v42 > 0x2E8BA2E8BA2E8BALL) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                long long v43 = (char *)operator new(88 * v42);
              }
              else
              {
                long long v43 = 0;
              }
              uint64_t v44 = &v43[88 * v39];
              uint64_t v45 = &v43[88 * v42];
              long long v46 = v218;
              *(_OWORD *)uint64_t v44 = v217;
              *((_OWORD *)v44 + 1) = v46;
              *((void *)v44 + 4) = v219;
              *((void *)v44 + 5) = 0;
              std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100]((uint64_t)(v44 + 48), (uint64_t)v229);
              __int16 v47 = v230;
              char v230 = 0;
              *((void *)v44 + 10) = v47;
              uint64_t v37 = v44 + 88;
              int v48 = v11;
              AudioTimeStamp v51 = (char *)v11 + 24;
              uint64_t v50 = (char *)*((void *)v11 + 3);
              uint64_t v49 = (char *)*((void *)v51 + 1);
              if (v49 == v50)
              {
                *((void *)v48 + 3) = v44;
                *((void *)v48 + 4) = v37;
                *((void *)v48 + 5) = v45;
                long long v11 = v48;
              }
              else
              {
                uint64_t v52 = (uint64_t)&v43[88 * v39 - 40];
                uint64_t v53 = (uint64_t)(v49 - 40);
                do
                {
                  uint64_t v54 = v52;
                  uint64_t v55 = v53 - 48;
                  long long v56 = *(_OWORD *)(v53 - 48);
                  long long v57 = *(_OWORD *)(v53 - 32);
                  *(void *)(v52 - 16) = *(void *)(v53 - 16);
                  *(_OWORD *)(v52 - 48) = v56;
                  *(_OWORD *)(v52 - 32) = v57;
                  uint64_t v58 = *(void *)(v53 - 8);
                  *(void *)(v53 - 8) = 0;
                  *(void *)(v54 - 8) = v58;
                  uint64_t v59 = std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100](v54, v53);
                  uint64_t v60 = *(void *)(v53 + 32);
                  *(void *)(v53 + 32) = 0;
                  *(void *)(v59 + 32) = v60;
                  uint64_t v52 = v59 - 88;
                  v53 -= 88;
                }
                while ((char *)v55 != v50);
                long long v11 = v212;
                int v61 = (char *)*((void *)v212 + 3);
                uint64_t v49 = (char *)*((void *)v212 + 4);
                *((void *)v212 + 3) = v59 - 48;
                *((void *)v212 + 4) = v37;
                *((void *)v212 + 5) = v45;
                if (v49 != v61)
                {
                  do
                  {
                    v49 -= 88;
                    std::__destroy_at[abi:ne180100]<HALS_IOStreamDSP::InputChannelData,0>((uint64_t)v49);
                  }
                  while (v49 != v61);
                  uint64_t v49 = v61;
                }
              }
              uint64_t v14 = v213;
              if (v49) {
                operator delete(v49);
              }
              double v30 = v210;
            }
            else
            {
              long long v34 = v218;
              *(_OWORD *)unint64_t v33 = v217;
              *(_OWORD *)(v33 + 16) = v34;
              *(void *)(v33 + 32) = v219;
              uint64_t v35 = v228;
              uint64_t v228 = 0;
              *(void *)(v33 + 40) = v35;
              std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100](v33 + 48, (uint64_t)v229);
              unint64_t v36 = v230;
              char v230 = 0;
              *(void *)(v33 + 80) = v36;
              uint64_t v37 = (char *)(v33 + 88);
            }
            *((void *)v11 + 4) = v37;
            unint64_t v62 = (unsigned __int8 **)v230;
            char v230 = 0;
            if (v62)
            {
              HALB_CaptureFile::~HALB_CaptureFile(v62);
              MEMORY[0x1C1859840]();
            }
            std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100](&v228, 0);
            std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](v229);
            double v29 = (long long *)((char *)v29 + 40);
          }
          while (v29 != v30);
          double v29 = *(long long **)(v207 + 56);
        }
        if ((*((unsigned char *)v29 + 12) & 0x20) != 0) {
          int v63 = 1;
        }
        else {
          int v63 = *((_DWORD *)v29 + 7);
        }
        *((_DWORD *)v11 + 24) = v63;
        int v64 = *(_DWORD *)(v14 + 64);
        if (!v64)
        {
LABEL_65:
          unint64_t v71 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v207 + 64) - (void)v29) >> 3);
          uint64_t v72 = *((void *)v11 + 9);
          uint64_t v73 = *((void *)v11 + 10);
          unint64_t v74 = 0xCCCCCCCCCCCCCCCDLL * ((v73 - v72) >> 4);
          unint64_t v75 = v71 - v74;
          if (v71 <= v74)
          {
            uint64_t v85 = v207;
            if (v71 < v74) {
              *((void *)v11 + 10) = v72 + 80 * v71;
            }
          }
          else
          {
            uint64_t v76 = *((void *)v11 + 11);
            if (0xCCCCCCCCCCCCCCCDLL * ((v76 - v73) >> 4) >= v75)
            {
              bzero(*((void **)v11 + 10), 80 * ((80 * v75 - 80) / 0x50) + 80);
              *((void *)v11 + 10) = v73 + 80 * ((80 * v75 - 80) / 0x50) + 80;
              uint64_t v85 = v207;
            }
            else
            {
              if (v71 > 0x333333333333333) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v77 = 0xCCCCCCCCCCCCCCCDLL * ((v76 - v72) >> 4);
              if (2 * v77 > v71) {
                unint64_t v71 = 2 * v77;
              }
              if (v77 >= 0x199999999999999) {
                unint64_t v78 = 0x333333333333333;
              }
              else {
                unint64_t v78 = v71;
              }
              if (v78 > 0x333333333333333) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              int v79 = (char *)operator new(80 * v78);
              uint64_t v80 = &v79[80 * v74];
              int v81 = &v79[80 * v78];
              bzero(v80, 80 * ((80 * v75 - 80) / 0x50) + 80);
              mach_port_t v82 = &v80[80 * ((80 * v75 - 80) / 0x50) + 80];
              mach_port_t v84 = (char *)*((void *)v11 + 9);
              int v83 = (char *)*((void *)v11 + 10);
              if (v83 == v84)
              {
                uint64_t v85 = v207;
              }
              else
              {
                uint64_t v85 = v207;
                do
                {
                  *((_OWORD *)v80 - 5) = *((_OWORD *)v83 - 5);
                  long long v86 = *((_OWORD *)v83 - 4);
                  long long v87 = *((_OWORD *)v83 - 3);
                  long long v88 = *((_OWORD *)v83 - 1);
                  *((_OWORD *)v80 - 2) = *((_OWORD *)v83 - 2);
                  *((_OWORD *)v80 - 1) = v88;
                  *((_OWORD *)v80 - 4) = v86;
                  *((_OWORD *)v80 - 3) = v87;
                  v80 -= 80;
                  v83 -= 80;
                }
                while (v83 != v84);
                int v83 = (char *)*((void *)v11 + 9);
              }
              *((void *)v11 + 9) = v80;
              *((void *)v11 + 10) = v82;
              *((void *)v11 + 11) = v81;
              if (v83) {
                operator delete(v83);
              }
            }
          }
          unint64_t v89 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v85 + 64) - *(void *)(v85 + 56)) >> 3);
          uint64_t v90 = *((void *)v11 + 21);
          uint64_t v91 = *((void *)v11 + 22);
          unint64_t v92 = (v91 - v90) >> 4;
          if (v89 <= v92)
          {
            long long v95 = (const __CFDictionary **)v213;
            if (v89 >= v92) {
              goto LABEL_103;
            }
            uint64_t v105 = v90 + 16 * v89;
          }
          else
          {
            unint64_t v93 = v89 - v92;
            uint64_t v94 = *((void *)v11 + 23);
            long long v95 = (const __CFDictionary **)v213;
            if (v89 - v92 > (v94 - v91) >> 4)
            {
              if (v89 >> 60) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v96 = v94 - v90;
              if (v96 >> 3 > v89) {
                unint64_t v89 = v96 >> 3;
              }
              if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v97 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v97 = v89;
              }
              unint64_t v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v97);
              int v99 = &v98[16 * v92];
              uint64_t v101 = &v98[16 * v100];
              bzero(v99, 16 * v93);
              mach_port_t v102 = &v99[16 * v93];
              std::string v104 = (char *)*((void *)v11 + 21);
              CFStringRef v103 = (char *)*((void *)v11 + 22);
              if (v103 == v104)
              {
                long long v95 = (const __CFDictionary **)v213;
              }
              else
              {
                long long v95 = (const __CFDictionary **)v213;
                do
                {
                  *((_OWORD *)v99 - 1) = *((_OWORD *)v103 - 1);
                  v99 -= 16;
                  v103 -= 16;
                }
                while (v103 != v104);
                CFStringRef v103 = (char *)*((void *)v11 + 21);
              }
              *((void *)v11 + 21) = v99;
              *((void *)v11 + 22) = v102;
              *((void *)v11 + 23) = v101;
              if (v103) {
                operator delete(v103);
              }
LABEL_103:
              *(_OWORD *)std::string __p = 0u;
              long long v215 = 0u;
              float v216 = 1.0;
              CFDictionaryRef v106 = v95[14];
              if (v106)
              {
                unint64_t v220 = 0;
                v221 = 0;
                v222 = 0;
                CFIndex Count = CFDictionaryGetCount(v106);
                std::vector<__CFString const*>::vector(buf, Count);
                CFDictionaryGetKeysAndValues(v95[14], *(const void ***)buf, 0);
                unsigned __int16 v109 = *(CFTypeRef **)buf;
                double v108 = *(CFTypeRef **)&buf[8];
                if (*(void *)buf != *(void *)&buf[8])
                {
                  do
                  {
                    CFTypeRef v110 = *v109;
                    if (*v109) {
                      CFRetain(*v109);
                    }
                    v240.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489A20;
                    v240.__r_.__value_.__l.__size_ = (std::string::size_type)v110;
                    uint64_t v111 = v221;
                    if (v221 >= v222)
                    {
                      uint64_t v113 = (uint64_t)v220;
                      uint64_t v114 = (v221 - v220) >> 4;
                      unint64_t v115 = v114 + 1;
                      if ((unint64_t)(v114 + 1) >> 60) {
                        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                      }
                      uint64_t v116 = v222 - v220;
                      if ((v222 - v220) >> 3 > v115) {
                        unint64_t v115 = v116 >> 3;
                      }
                      if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF0) {
                        unint64_t v117 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v117 = v115;
                      }
                      if (v117)
                      {
                        if (v117 >> 60) {
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        }
                        mach_port_t v118 = (char *)operator new(16 * v117);
                      }
                      else
                      {
                        mach_port_t v118 = 0;
                      }
                      uint64_t v119 = &v118[16 * v114];
                      v240.__r_.__value_.__l.__size_ = 0;
                      *(void *)uint64_t v119 = &unk_1F1489A20;
                      *((void *)v119 + 1) = v110;
                      mach_port_t v112 = v119 + 16;
                      if (v111 == (char *)v113)
                      {
                        unint64_t v220 = v119;
                        v221 = v119 + 16;
                        v222 = &v118[16 * v117];
                      }
                      else
                      {
                        unint64_t v120 = v119 - 16;
                        do
                        {
                          *((void *)v119 - 2) = &unk_1F1489A20;
                          v119 -= 16;
                          *((void *)v119 + 1) = *((void *)v111 - 1);
                          *((void *)v111 - 1) = 0;
                          v120 -= 16;
                          v111 -= 16;
                        }
                        while (v111 != (char *)v113);
                        uint64_t v111 = v220;
                        unint64_t v121 = v221;
                        unint64_t v220 = v119;
                        v221 = v112;
                        v222 = &v118[16 * v117];
                        if (v121 == v111)
                        {
                          uint64_t v111 = v121;
                        }
                        else
                        {
                          long long v122 = v121 - 16;
                          uint64_t v123 = v121 - 16;
                          uint64_t v124 = v121 - 16;
                          do
                          {
                            uint64_t v125 = *(void (***)(char *))v124;
                            v124 -= 16;
                            (*v125)(v123);
                            v122 -= 16;
                            BOOL v126 = v123 == v111;
                            uint64_t v123 = v124;
                          }
                          while (!v126);
                        }
                      }
                      long long v95 = (const __CFDictionary **)v213;
                      if (v111) {
                        operator delete(v111);
                      }
                    }
                    else
                    {
                      *((void *)v221 + 1) = v110;
                      v240.__r_.__value_.__l.__size_ = 0;
                      *(void *)uint64_t v111 = &unk_1F1489A20;
                      mach_port_t v112 = v111 + 16;
                    }
                    v221 = v112;
                    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v240);
                    ++v109;
                  }
                  while (v109 != v108);
                  unsigned __int16 v109 = *(CFTypeRef **)buf;
                  long long v11 = v212;
                }
                if (v109)
                {
                  *(void *)&uint8_t buf[8] = v109;
                  operator delete(v109);
                }
                uint64_t v127 = (uint64_t)v220;
                int v211 = v221;
                if (v220 != v221)
                {
                  while (1)
                  {
                    OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)cf, *(CFTypeRef *)(v127 + 8));
                    cf[0] = &unk_1F1489A20;
                    OS::CF::String::AsStdString(&v240, (uint64_t)cf);
                    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v224, v95[14], (void *)cf[1]);
                    if (v224[1]) {
                      break;
                    }
                    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
                    {
                      uint64_t v141 = &v240;
                      if ((v240.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        uint64_t v141 = (std::string *)v240.__r_.__value_.__r.__words[0];
                      }
                      *(_DWORD *)std::string buf = 136315650;
                      *(void *)&uint8_t buf[4] = "HALS_IOStreamDSP.cpp";
                      *(_WORD *)&unsigned char buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 134;
                      *(_WORD *)&unsigned char buf[18] = 2080;
                      *(void *)&buf[20] = v141;
                      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  DSP Property not valid: the value for key %s, in given StringToString substitution dictionary, is not a string.", buf, 0x1Cu);
                    }
LABEL_221:
                    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v224);
                    if (SHIBYTE(v240.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v240.__r_.__value_.__l.__data_);
                    }
                    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)cf);
                    v127 += 16;
                    if ((char *)v127 == v211) {
                      goto LABEL_234;
                    }
                  }
                  OS::CF::String::AsStdString(&v223, (uint64_t)v224);
                  int v128 = SHIBYTE(v240.__r_.__value_.__r.__words[2]);
                  std::string::size_type v129 = v240.__r_.__value_.__r.__words[0];
                  if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v130 = &v223;
                  }
                  else {
                    v130 = (std::string *)v223.__r_.__value_.__r.__words[0];
                  }
                  unint64_t v131 = operator new(0x40uLL);
                  BOOL v132 = v131;
                  if (v128 >= 0) {
                    mach_port_t v133 = &v240;
                  }
                  else {
                    mach_port_t v133 = (std::string *)v129;
                  }
                  *(void *)std::string buf = v131;
                  *(void *)&uint8_t buf[8] = &v215;
                  buf[16] = 0;
                  uint64_t v134 = (unsigned __int8 *)(v131 + 2);
                  *unint64_t v131 = 0;
                  v131[1] = 0;
                  std::string::basic_string[abi:ne180100]<0>(v131 + 2, (char *)v133);
                  std::string::basic_string[abi:ne180100]<0>(v132 + 5, (char *)v130);
                  long long v95 = (const __CFDictionary **)v213;
                  buf[16] = 1;
                  v132[1] = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v134);
                  unint64_t v135 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v134);
                  v132[1] = v135;
                  int8x8_t v136 = (int8x8_t)__p[1];
                  if (__p[1])
                  {
                    unint64_t v137 = v135;
                    uint8x8_t v138 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
                    v138.i16[0] = vaddlv_u8(v138);
                    unint64_t v139 = v138.u32[0];
                    if (v138.u32[0] > 1uLL)
                    {
                      unint64_t v140 = v135;
                      if (__p[1] <= (void *)v135) {
                        unint64_t v140 = v135 % (unint64_t)__p[1];
                      }
                    }
                    else
                    {
                      unint64_t v140 = ((unint64_t)__p[1] - 1) & v135;
                    }
                    v142 = (unsigned __int8 **)*((void *)__p[0] + v140);
                    if (v142)
                    {
                      for (uint64_t j = *v142; j; uint64_t j = *(unsigned __int8 **)j)
                      {
                        unint64_t v144 = *((void *)j + 1);
                        if (v144 == v137)
                        {
                          if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(j + 16, v134)) {
                            goto LABEL_218;
                          }
                        }
                        else
                        {
                          if (v139 > 1)
                          {
                            if ((void *)v144 >= __p[1]) {
                              v144 %= (unint64_t)__p[1];
                            }
                          }
                          else
                          {
                            v144 &= (unint64_t)__p[1] - 1;
                          }
                          if (v144 != v140) {
                            break;
                          }
                        }
                      }
                    }
                  }
                  float v145 = (float)(unint64_t)(*((void *)&v215 + 1) + 1);
                  if (!__p[1] || (float)(v216 * (float)(unint64_t)__p[1]) < v145)
                  {
                    BOOL v146 = ((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0;
                    if (__p[1] < (void *)3) {
                      BOOL v146 = 1;
                    }
                    unint64_t v147 = v146 | (2 * (uint64_t)__p[1]);
                    unint64_t v148 = vcvtps_u32_f32(v145 / v216);
                    if (v147 <= v148) {
                      int8x8_t prime = (int8x8_t)v148;
                    }
                    else {
                      int8x8_t prime = (int8x8_t)v147;
                    }
                    if (*(void *)&prime == 1)
                    {
                      int8x8_t prime = (int8x8_t)2;
                    }
                    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
                    {
                      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
                      int8x8_t v136 = (int8x8_t)__p[1];
                    }
                    if (*(void *)&prime > *(void *)&v136) {
                      goto LABEL_318;
                    }
                    if (*(void *)&prime >= *(void *)&v136) {
                      goto LABEL_204;
                    }
                    unint64_t v156 = vcvtps_u32_f32((float)*((unint64_t *)&v215 + 1) / v216);
                    if (*(void *)&v136 < 3uLL
                      || (uint8x8_t v157 = (uint8x8_t)vcnt_s8(v136), v157.i16[0] = vaddlv_u8(v157), v157.u32[0] > 1uLL))
                    {
                      unint64_t v156 = std::__next_prime(v156);
                    }
                    else
                    {
                      uint64_t v158 = 1 << -(char)__clz(v156 - 1);
                      if (v156 >= 2) {
                        unint64_t v156 = v158;
                      }
                    }
                    if (*(void *)&prime <= v156) {
                      int8x8_t prime = (int8x8_t)v156;
                    }
                    if (*(void *)&prime >= *(void *)&v136)
                    {
                      int8x8_t v136 = (int8x8_t)__p[1];
                      goto LABEL_204;
                    }
                    if (prime)
                    {
LABEL_318:
                      if (*(void *)&prime >> 61) {
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      }
                      char v150 = operator new(8 * *(void *)&prime);
                      v151 = __p[0];
                      __p[0] = v150;
                      if (v151) {
                        operator delete(v151);
                      }
                      uint64_t v152 = 0;
                      __p[1] = (void *)prime;
                      do
                        *((void *)__p[0] + v152++) = 0;
                      while (*(void *)&prime != v152);
                      char v153 = (void **)v215;
                      if ((void)v215)
                      {
                        unint64_t v154 = *(void *)(v215 + 8);
                        uint8x8_t v155 = (uint8x8_t)vcnt_s8(prime);
                        v155.i16[0] = vaddlv_u8(v155);
                        if (v155.u32[0] > 1uLL)
                        {
                          if (v154 >= *(void *)&prime) {
                            v154 %= *(void *)&prime;
                          }
                        }
                        else
                        {
                          v154 &= *(void *)&prime - 1;
                        }
                        *((void *)__p[0] + v154) = &v215;
                        for (k = *v153; k; unint64_t v154 = v160)
                        {
                          unint64_t v160 = k[1];
                          if (v155.u32[0] > 1uLL)
                          {
                            if (v160 >= *(void *)&prime) {
                              v160 %= *(void *)&prime;
                            }
                          }
                          else
                          {
                            v160 &= *(void *)&prime - 1;
                          }
                          if (v160 != v154)
                          {
                            if (!*((void *)__p[0] + v160))
                            {
                              *((void *)__p[0] + v160) = v153;
                              goto LABEL_200;
                            }
                            std::runtime_error *v153 = (void *)*k;
                            void *k = **((void **)__p[0] + v160);
                            **((void **)__p[0] + v160) = k;
                            k = v153;
                          }
                          unint64_t v160 = v154;
LABEL_200:
                          char v153 = (void **)k;
                          k = (void *)*k;
                        }
                      }
                      int8x8_t v136 = prime;
                    }
                    else
                    {
                      v165 = __p[0];
                      __p[0] = 0;
                      if (v165) {
                        operator delete(v165);
                      }
                      int8x8_t v136 = 0;
                      __p[1] = 0;
                    }
                  }
LABEL_204:
                  unint64_t v161 = v132[1];
                  uint8x8_t v162 = (uint8x8_t)vcnt_s8(v136);
                  v162.i16[0] = vaddlv_u8(v162);
                  if (v162.u32[0] > 1uLL)
                  {
                    if (v161 >= *(void *)&v136) {
                      v161 %= *(void *)&v136;
                    }
                  }
                  else
                  {
                    v161 &= *(void *)&v136 - 1;
                  }
                  int v163 = (void *)*((void *)__p[0] + v161);
                  if (v163)
                  {
                    *BOOL v132 = *v163;
                  }
                  else
                  {
                    *BOOL v132 = v215;
                    *(void *)&long long v215 = v132;
                    *((void *)__p[0] + v161) = &v215;
                    if (!*v132) {
                      goto LABEL_217;
                    }
                    unint64_t v164 = *(void *)(*v132 + 8);
                    if (v162.u32[0] > 1uLL)
                    {
                      if (v164 >= *(void *)&v136) {
                        v164 %= *(void *)&v136;
                      }
                    }
                    else
                    {
                      v164 &= *(void *)&v136 - 1;
                    }
                    int v163 = (char *)__p[0] + 8 * v164;
                  }
                  void *v163 = v132;
LABEL_217:
                  ++*((void *)&v215 + 1);
                  *(void *)std::string buf = 0;
LABEL_218:
                  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
                  if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v223.__r_.__value_.__l.__data_);
                  }
                  long long v11 = v212;
                  goto LABEL_221;
                }
LABEL_234:
                *(void *)std::string buf = &v220;
                std::vector<OS::CF::String>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
              }
              unint64_t v220 = 0;
              v221 = 0;
              HALS_System::GetInstance(&v223, 0, (uint64_t *)&v220);
              *(void *)std::string buf = MEMORY[0x1E4F4EAE8] + 16;
              *(void *)&uint8_t buf[8] = 0;
              MEMORY[0x1C1858ED0](&buf[16]);
              uint64_t v233 = 0;
              long long v231 = 0u;
              long long v232 = 0u;
              int v234 = 1;
              uint64_t v235 = 0;
              char v236 = 0;
              uint64_t v238 = 0;
              uint64_t v239 = 0;
              uint64_t v237 = 0;
              memset(&v240, 0, sizeof(v240));
              DSPGraph::Interpreter::compileText();
              if (v224[0]) {
                operator new();
              }
              v224[0] = 0;
              v166 = (std::__shared_weak_count *)*((void *)v11 + 1);
              *(_OWORD *)long long v11 = 0u;
              if (v166)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100](v166);
                uint64_t v167 = v224[0];
                v224[0] = 0;
                if (v167) {
                  (*(void (**)(uint64_t))(*(void *)v167 + 8))(v167);
                }
              }
              else
              {
                v224[0] = 0;
              }
              cf[0] = &v240;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)cf);
              DSPGraph::Graph::setSliceDuration();
              CFDictionaryRef v168 = v95[4];
              if (v168) {
                DSPGraph::Graph::setAUStrip(*(DSPGraph::Graph **)v11, v168);
              }
              CFDictionaryRef v169 = v95[6];
              if (v169) {
                DSPGraph::Graph::setPropertyStrip(*(DSPGraph::Graph **)v11, v169);
              }
              CFArrayRef v170 = v95[7];
              if (v170 && *(void *)v11)
              {
                if (*(unsigned char *)(*(void *)v11 + 762))
                {
                  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(v240.__r_.__value_.__l.__data_) = 136315394;
                    *(std::string::size_type *)((char *)v240.__r_.__value_.__r.__words + 4) = (std::string::size_type)"HALS_IOStreamDSP.cpp";
                    WORD2(v240.__r_.__value_.__r.__words[1]) = 1024;
                    *(_DWORD *)((char *)&v240.__r_.__value_.__r.__words[1] + 6) = 213;
                    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  SetGraphInitializationProperties() should not be called for initialized graph", (uint8_t *)&v240, 0x12u);
                  }
                }
                else
                {
                  CFIndex v171 = CFArrayGetCount(v95[7]);
                  CFArrayRef v172 = v95[7];
                  if (v172) {
                    CFIndex v173 = CFArrayGetCount(v95[7]);
                  }
                  else {
                    CFIndex v173 = 0;
                  }
                  if (v171)
                  {
                    for (unint64_t m = 0; v171 != m; ++m)
                    {
                      if (v170 == v172 && v173 == m) {
                        break;
                      }
                      applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v240, v170, m);
                      CFDictionaryRef v175 = (const __CFDictionary *)v240.__r_.__value_.__r.__words[0];
                      if (!v240.__r_.__value_.__r.__words[0]) {
                        goto LABEL_310;
                      }
                      CFStringRef v176 = CFStringCreateWithBytes(0, (const UInt8 *)"ID", 2, 0x8000100u, 0);
                      if (!v176)
                      {
                        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::runtime_error::runtime_error(exception, "Could not construct");
                        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                      }
                      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v175, v176);
                      CFRelease(v176);
                      if (!Value) {
                        goto LABEL_314;
                      }
                      unint64_t v178 = applesauce::CF::convert_to<unsigned int,0>(Value);
                      CFDictionaryRef v179 = (const __CFDictionary *)v240.__r_.__value_.__r.__words[0];
                      if (!v240.__r_.__value_.__r.__words[0]) {
                        goto LABEL_310;
                      }
                      uint64_t v180 = v178;
                      CFStringRef v181 = CFStringCreateWithBytes(0, (const UInt8 *)"data", 4, 0x8000100u, 0);
                      if (!v181)
                      {
LABEL_301:
                        uint64_t v204 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::runtime_error::runtime_error(v204, "Could not construct");
                        goto LABEL_315;
                      }
                      int v182 = CFDictionaryContainsKey(v179, v181);
                      CFRelease(v181);
                      if (v182)
                      {
                        CFDictionaryRef v183 = (const __CFDictionary *)v240.__r_.__value_.__r.__words[0];
                        if (!v240.__r_.__value_.__r.__words[0]) {
                          goto LABEL_310;
                        }
                        CFStringRef v184 = CFStringCreateWithBytes(0, (const UInt8 *)"data", 4, 0x8000100u, 0);
                        if (!v184)
                        {
                          std::vector<char>::value_type v205 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                          std::runtime_error::runtime_error(v205, "Could not construct");
                          __cxa_throw(v205, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                        }
                        unint64_t v185 = CFDictionaryGetValue(v183, v184);
                        CFRelease(v184);
                        if (!v185) {
                          goto LABEL_314;
                        }
                        CFRetain(v185);
                        applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)cf, v185);
                        CFTypeRef v186 = cf[0];
                        if (!cf[0]) {
                          goto LABEL_310;
                        }
                        CFTypeID TypeID = CFDataGetTypeID();
                        if (TypeID != CFGetTypeID(v186))
                        {
                          uint64_t v204 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                          std::runtime_error::runtime_error(v204, "Could not convert");
                          goto LABEL_315;
                        }
                        BytePtr = CFDataGetBytePtr((CFDataRef)v186);
                        CFIndex Length = CFDataGetLength((CFDataRef)v186);
                        size_t v190 = Length;
                        if (Length)
                        {
                          if (Length < 0) {
                            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                          }
                          int v191 = operator new(Length);
                          memmove(v191, BytePtr, v190);
                          HALS_IOStreamDSP::SetDSPProperty(v212, v180, v190, v191);
                          operator delete(v191);
                        }
                        else
                        {
                          HALS_IOStreamDSP::SetDSPProperty(v212, v180, 0, 0);
                        }
                        if (cf[0]) {
                          CFRelease(cf[0]);
                        }
                      }
                      else
                      {
                        CFDictionaryRef v192 = (const __CFDictionary *)v240.__r_.__value_.__r.__words[0];
                        if (!v240.__r_.__value_.__r.__words[0]) {
                          goto LABEL_310;
                        }
                        CFStringRef v193 = CFStringCreateWithBytes(0, (const UInt8 *)"cfobject", 8, 0x8000100u, 0);
                        if (!v193) {
                          goto LABEL_301;
                        }
                        int v194 = CFDictionaryContainsKey(v192, v193);
                        CFRelease(v193);
                        if (v194)
                        {
                          if (!v240.__r_.__value_.__r.__words[0])
                          {
LABEL_310:
                            int v206 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                            std::runtime_error::runtime_error(v206, "Could not construct");
                            __cxa_throw(v206, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                          }
                          unint64_t v195 = applesauce::CF::details::at_key<char const(&)[9]>((const __CFDictionary *)v240.__r_.__value_.__l.__data_, "cfobject");
                          if (!v195)
                          {
LABEL_314:
                            uint64_t v204 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                            std::runtime_error::runtime_error(v204, "Could not find item");
LABEL_315:
                            __cxa_throw(v204, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                          }
                          int v196 = v195;
                          CFRetain(v195);
                          cf[0] = v196;
                          HALS_IOStreamDSP::SetDSPProperty(v212, v180, 8, cf);
                          CFRelease(v196);
                        }
                      }
                      if (v240.__r_.__value_.__r.__words[0]) {
                        CFRelease(v240.__r_.__value_.__l.__data_);
                      }
                      long long v11 = v212;
                    }
                  }
                }
              }
              DSPGraph::Graph::configure(*(DSPGraph::Graph **)v11);
              DSPGraph::Graph::initialize(*(DSPGraph::Graph **)v11);
              operator new();
            }
            bzero(*((void **)v11 + 22), 16 * v93);
            uint64_t v105 = v91 + 16 * v93;
          }
          *((void *)v11 + 22) = v105;
          goto LABEL_103;
        }
        unint64_t v65 = (_DWORD *)*((void *)v11 + 3);
        int v66 = v65[3];
        if ((v66 & 0x20) != 0)
        {
          unsigned int v67 = 1;
          uint64_t v68 = v207;
        }
        else
        {
          unsigned int v67 = v65[7];
          uint64_t v68 = v207;
          if (!v67)
          {
            unsigned int v69 = (v65[8] + 7) >> 3;
LABEL_64:
            v65[7] = v64;
            int v70 = v69 * v64;
            v65[5] = 1;
            void v65[6] = v70;
            v65[3] = v66 & 0xFFFFFFDF;
            v65[4] = v70;
            double v29 = *(long long **)(v68 + 56);
            goto LABEL_65;
          }
        }
        unsigned int v69 = v65[6] / v67;
        goto LABEL_64;
      }
      AMCP::Log::Scope_Registry::get(v16);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      long long v25 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        unint64_t v26 = pthread_self();
        mach_port_t v27 = pthread_mach_thread_np(v26);
        *(_DWORD *)std::string buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v27;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "HALS_IOStreamDSP.cpp";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = 152;
        _os_log_error_impl(&dword_1BAA78000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d DSPGraph ABI runtime/compile-time mismatch", buf, 0x18u);
      }
    }
    else
    {
      long long v19 = (std::__shared_weak_count *)*((void *)v11 + 1);
      *(void *)long long v11 = 0;
      *((void *)v11 + 1) = 0;
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      uint64_t v20 = v9;
      uint64_t v21 = v1;
      uint64_t v22 = *((void *)v11 + 2);
      *((void *)v11 + 2) = 0;
      if (v22) {
        (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
      }
      uint64_t v23 = *((void *)v11 + 3);
      for (uint64_t n = *((void *)v11 + 4); n != v23; std::__destroy_at[abi:ne180100]<HALS_IOStreamDSP::InputChannelData,0>(n))
        n -= 88;
      *((void *)v11 + 4) = v23;
      std::vector<std::vector<std::byte>>::__clear[abi:ne180100]((uint64_t *)v11 + 18);
      *((void *)v11 + 10) = *((void *)v11 + 9);
      *((void *)v11 + 7) = *((void *)v11 + 6);
      *((void *)v11 + 22) = *((void *)v11 + 21);
      uint64_t v1 = v21;
      uint64_t v9 = v20;
    }
    long long v197 = *(_OWORD *)(v9 + 96);
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(v9 + 80);
    *(_OWORD *)(v9 + 56) = v197;
    *(void *)(v9 + 72) = *(void *)(v9 + 112);
    int v198 = *(_DWORD *)(v213 + 64);
    unsigned int v6 = v208;
    LODWORD(v8) = v209;
    if (!v198) {
      goto LABEL_291;
    }
    int v199 = *(_DWORD *)(v9 + 52);
    if ((v199 & 0x20) != 0)
    {
      unsigned int v200 = 1;
    }
    else
    {
      unsigned int v200 = *(_DWORD *)(v9 + 68);
      if (!v200)
      {
        unsigned int v201 = (*(_DWORD *)(v9 + 72) + 7) >> 3;
LABEL_290:
        *(_DWORD *)(v9 + 68) = v198;
        int v202 = v201 * v198;
        *(_DWORD *)(v9 + 60) = 1;
        *(_DWORD *)(v9 + 64) = v202;
        *(_DWORD *)(v9 + 52) = v199 & 0xFFFFFFDF;
        *(_DWORD *)(v9 + 56) = v202;
LABEL_291:
        *(unsigned char *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = v6 < v8;
        return;
      }
    }
    unsigned int v201 = *(_DWORD *)(v9 + 64) / v200;
    goto LABEL_290;
  }
}

void sub_1BAE34148()
{
  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100](v0, 0);
  std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](v1);
  JUMPOUT(0x1BAE34220);
}

void sub_1BAE34154()
{
}

void sub_1BAE3415C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,char a44,uint64_t a45,char a46)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&a46);
  if (a41 < 0) {
    operator delete(__p);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a42);
  if (*(char *)(v46 - 121) < 0) {
    operator delete(*(void **)(v46 - 144));
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a44);
  *(void *)(v46 - 144) = &a33;
  std::vector<OS::CF::String>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 144));
  JUMPOUT(0x1BAE341C0);
}

void sub_1BAE341D4(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAE341E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,unsigned __int8 **a53)
{
  if (a53)
  {
    HALB_CaptureFile::~HALB_CaptureFile(a53);
    MEMORY[0x1C1859840]();
  }
  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100](v53, 0);
  std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](v54);
  JUMPOUT(0x1BAE34220);
}

void __destroy_helper_block_e8_56c64_ZTSNSt3__16vectorIN2CA17StreamDescriptionENS_9allocatorIS2_EEEE(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

void *__copy_helper_block_e8_56c64_ZTSNSt3__16vectorIN2CA17StreamDescriptionENS_9allocatorIS2_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  unint64_t v2 = (void *)(a1 + 56);
  v2[2] = 0;
  return std::vector<CA::StreamDescription>::__init_with_size[abi:ne180100]<CA::StreamDescription*,CA::StreamDescription*>(v2, *(const void **)(a2 + 56), *(void *)(a2 + 64), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
}

uint64_t HALS_IOEngine2::GetStartSample(HALS_IOEngine2 *this)
{
  uint64_t v5 = 0;
  unsigned int v6 = &v5;
  uint64_t v7 = 0x2000000000;
  uint64_t v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK14HALS_IOEngine214GetStartSampleEv_block_invoke;
  v4[3] = &unk_1E6234B90;
  v4[4] = &v5;
  void v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BAE34330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14HALS_IOEngine214GetStartSampleEv_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 1312))(*(void *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void HALS_IOEngine2::SetStartSample(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZN14HALS_IOEngine214SetStartSampleEjN4AMCP11Index_GroupIxNS0_9DirectionEEEjb_block_invoke;
  v7[3] = &__block_descriptor_tmp_71_12070;
  v7[4] = a1;
  v7[5] = a3;
  void v7[6] = a4;
  int v8 = a2;
  int v9 = a5;
  char v10 = a6;
  unsigned int v6 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v7);
}

uint64_t ___ZN14HALS_IOEngine214SetStartSampleEjN4AMCP11Index_GroupIxNS0_9DirectionEEEjb_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void, void))(**(void **)(a1 + 32) + 1304))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 56), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned int *)(a1 + 60), *(unsigned __int8 *)(a1 + 64));
}

uint64_t HALS_IOEngine2::HasAnyNonMixableFormats(HALS_IOEngine2 *this)
{
  uint64_t v5 = 0;
  unsigned int v6 = &v5;
  uint64_t v7 = 0x2000000000;
  char v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK14HALS_IOEngine223HasAnyNonMixableFormatsEv_block_invoke;
  v4[3] = &unk_1E6234AB0;
  v4[4] = &v5;
  void v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BAE34548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14HALS_IOEngine223HasAnyNonMixableFormatsEv_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 768);
  if (v1)
  {
    char v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = v1 + 48;
    do
    {
      char v5 = v2;
      unsigned int v6 = (uint64_t *)(v4 + 24 * v3);
      uint64_t v7 = *v6;
      uint64_t v8 = v6[1];
      if (v7 != v8)
      {
        uint64_t v9 = v7;
        do
        {
          uint64_t v10 = v7;
          do
          {
            if (*(_DWORD *)(*(void *)v10 + 128) != 1819304813 || (*(_DWORD *)(*(void *)v10 + 132) & 0x40) != 0)
            {
              char v12 = 1;
              goto LABEL_15;
            }
            v10 += 8;
          }
          while (v10 != v8);
          v9 += 8;
        }
        while (v9 != v8);
      }
      char v2 = 1;
      uint64_t v3 = 1;
    }
    while ((v5 & 1) == 0);
    char v12 = 0;
LABEL_15:
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v12;
  }
  return result;
}

uint64_t HALS_IOEngine2::CalculateBufferByteSizeForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3, int a4)
{
  uint64_t v11 = 0;
  char v12 = &v11;
  uint64_t v13 = 0x2000000000;
  int v14 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZNK14HALS_IOEngine239CalculateBufferByteSizeForStreamAtIndexEbjj_block_invoke;
  v7[3] = &unk_1E6234A60;
  v7[4] = &v11;
  v7[5] = this;
  char v10 = a2;
  int v8 = a3;
  int v9 = a4;
  uint64_t v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  uint64_t v5 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v5;
}

void sub_1BAE346C8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14HALS_IOEngine239CalculateBufferByteSizeForStreamAtIndexEbjj_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 768);
  if (v1)
  {
    unint64_t v2 = *(unsigned int *)(result + 48);
    uint64_t v4 = (uint64_t *)(v1 + 24 * *(unsigned __int8 *)(result + 56) + 48);
    uint64_t v3 = *v4;
    unint64_t v5 = (v4[1] - *v4) >> 3;
    if (v2 >= v5)
    {
      int v9 = 0;
    }
    else
    {
      if (v5 <= v2) {
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      }
      unsigned int v6 = *(_DWORD **)(v3 + 8 * v2);
      int v7 = v6[12];
      int v8 = v6[14];
      int v9 = v6[16] * *(_DWORD *)(result + 52);
      if (v7 != 1819304813) {
        int v9 = v8;
      }
    }
    *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v9;
  }
  return result;
}

__n128 HALS_IOEngine2::GetPhysicalFormatForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3, CA::StreamDescription *a4)
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x5002000000;
  uint64_t v15 = __Block_byref_object_copy__52;
  int v16 = __Block_byref_object_dispose__53;
  long long v18 = 0u;
  uint64_t v19 = 0;
  long long v17 = 0u;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK14HALS_IOEngine233GetPhysicalFormatForStreamAtIndexEbjRN2CA17StreamDescriptionE_block_invoke;
  void v9[3] = &unk_1E6234A10;
  char v11 = a2;
  int v10 = a3;
  uint64_t v9[4] = &v12;
  v9[5] = this;
  unint64_t v5 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v9);
  uint64_t v6 = v13[9];
  long long v7 = *(_OWORD *)(v13 + 7);
  *(_OWORD *)a4 = *(_OWORD *)(v13 + 5);
  *((_OWORD *)a4 + 1) = v7;
  *((void *)a4 + 4) = v6;
  _Block_object_dispose(&v12, 8);
  return result;
}

void sub_1BAE34880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__52(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  long long v3 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v3;
  *(__n128 *)(a1 + 40) = result;
  return result;
}

__n128 ___ZNK14HALS_IOEngine233GetPhysicalFormatForStreamAtIndexEbjRN2CA17StreamDescriptionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 40) + 768);
  if (v1)
  {
    unint64_t v2 = *(unsigned int *)(a1 + 48);
    uint64_t v4 = (uint64_t *)(v1 + 24 * *(unsigned __int8 *)(a1 + 52) + 48);
    uint64_t v3 = *v4;
    unint64_t v5 = (v4[1] - *v4) >> 3;
    if (v2 < v5)
    {
      if (v5 <= v2) {
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8) + 40;
      uint64_t v7 = *(void *)(v3 + 8 * v2);
      __n128 result = *(__n128 *)(v7 + 120);
      long long v9 = *(_OWORD *)(v7 + 136);
      *(void *)(v6 + 32) = *(void *)(v7 + 152);
      *(__n128 *)uint64_t v6 = result;
      *(_OWORD *)(v6 + 16) = v9;
    }
  }
  return result;
}

__n128 HALS_IOEngine2::GetVirtualFormatForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3, CA::StreamDescription *a4)
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x5002000000;
  uint64_t v15 = __Block_byref_object_copy__52;
  int v16 = __Block_byref_object_dispose__53;
  long long v18 = 0u;
  uint64_t v19 = 0;
  long long v17 = 0u;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK14HALS_IOEngine232GetVirtualFormatForStreamAtIndexEbjRN2CA17StreamDescriptionE_block_invoke;
  void v9[3] = &unk_1E62349E8;
  char v11 = a2;
  int v10 = a3;
  uint64_t v9[4] = &v12;
  v9[5] = this;
  unint64_t v5 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v9);
  uint64_t v6 = v13[9];
  long long v7 = *(_OWORD *)(v13 + 7);
  *(_OWORD *)a4 = *(_OWORD *)(v13 + 5);
  *((_OWORD *)a4 + 1) = v7;
  *((void *)a4 + 4) = v6;
  _Block_object_dispose(&v12, 8);
  return result;
}

void sub_1BAE34A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 ___ZNK14HALS_IOEngine232GetVirtualFormatForStreamAtIndexEbjRN2CA17StreamDescriptionE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 40) + 768);
  if (v1)
  {
    unint64_t v2 = *(unsigned int *)(a1 + 48);
    uint64_t v4 = (uint64_t *)(v1 + 24 * *(unsigned __int8 *)(a1 + 52) + 48);
    uint64_t v3 = *v4;
    unint64_t v5 = (v4[1] - *v4) >> 3;
    if (v2 < v5)
    {
      if (v5 <= v2) {
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8) + 40;
      uint64_t v7 = *(void *)(v3 + 8 * v2);
      __n128 result = *(__n128 *)(v7 + 40);
      long long v9 = *(_OWORD *)(v7 + 56);
      *(void *)(v6 + 32) = *(void *)(v7 + 72);
      *(__n128 *)uint64_t v6 = result;
      *(_OWORD *)(v6 + 16) = v9;
    }
  }
  return result;
}

uint64_t HALS_IOEngine2::IsStreamAtIndexActive(HALS_IOEngine2 *this, char a2, int a3)
{
  uint64_t v9 = 0;
  int v10 = &v9;
  uint64_t v11 = 0x2000000000;
  char v12 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  uint64_t v6[2] = ___ZNK14HALS_IOEngine221IsStreamAtIndexActiveEbj_block_invoke;
  v6[3] = &unk_1E6234998;
  v6[4] = &v9;
  v6[5] = this;
  char v8 = a2;
  int v7 = a3;
  uint64_t v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  uint64_t v4 = *((unsigned __int8 *)v10 + 24);
  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1BAE34B9C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14HALS_IOEngine221IsStreamAtIndexActiveEbj_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 768);
  if (v1)
  {
    unint64_t v2 = *(unsigned int *)(result + 48);
    uint64_t v4 = (uint64_t *)(v1 + 24 * *(unsigned __int8 *)(result + 52) + 48);
    uint64_t v3 = *v4;
    unint64_t v5 = (v4[1] - *v4) >> 3;
    if (v2 >= v5)
    {
      BOOL v6 = 0;
    }
    else
    {
      if (v5 <= v2) {
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      }
      BOOL v6 = *(unsigned char *)(*(void *)(v3 + 8 * v2) + 32) != 0;
    }
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v6;
  }
  return result;
}

uint64_t HALS_IOEngine2::GetNumberStreamsVisibleToClient(HALS_IOEngine2 *this, char a2, int a3)
{
  uint64_t v9 = 0;
  int v10 = &v9;
  uint64_t v11 = 0x2000000000;
  int v12 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  uint64_t v6[2] = ___ZNK14HALS_IOEngine231GetNumberStreamsVisibleToClientEbj_block_invoke;
  v6[3] = &unk_1E6234970;
  v6[4] = &v9;
  v6[5] = this;
  char v8 = a2;
  int v7 = a3;
  uint64_t v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  uint64_t v4 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1BAE34CF8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZNK14HALS_IOEngine231GetNumberStreamsVisibleToClientEbj_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 40) + 768);
  if (v1)
  {
    if (*(unsigned char *)(a1 + 52))
    {
      int v3 = *(_DWORD *)(a1 + 48);
      uint64_t v4 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)v1);
      BOOL v6 = (HALS_ObjectMap *)v4;
      if (!v4) {
        goto LABEL_17;
      }
      int v7 = *(_DWORD *)(v4 + 20);
      if (v7 <= 1701078389)
      {
        BOOL v8 = v7 == 1633773415;
        int v9 = 1633969526;
      }
      else
      {
        BOOL v8 = v7 == 1701078390 || v7 == 1701733488;
        int v9 = 1919182198;
      }
      if (!v8 && v7 != v9)
      {
        int v15 = *(_DWORD *)(v4 + 24);
        if (v7 == v15) {
          goto LABEL_17;
        }
        if (v15 <= 1701078389)
        {
          BOOL v16 = v15 == 1633773415;
          int v17 = 1633969526;
        }
        else
        {
          BOOL v16 = v15 == 1701078390 || v15 == 1701733488;
          int v17 = 1919182198;
        }
        if (!v16 && v15 != v17) {
          goto LABEL_17;
        }
      }
      if (!HALS_ReferenceStreamStateManager::GetReferenceStreamStateForClient(*(std::__shared_mutex_base **)(v4 + 440), v3))
      {
        int v12 = (uint64_t *)v1[9];
        uint64_t v13 = (uint64_t *)v1[10];
        if (v12 == v13)
        {
          LODWORD(v10) = 0;
        }
        else
        {
          LODWORD(v10) = 0;
          do
          {
            uint64_t v14 = *v12++;
            if (!*(unsigned char *)(v14 + 21)) {
              LODWORD(v10) = v10 + 1;
            }
          }
          while (v12 != v13);
        }
      }
      else
      {
LABEL_17:
        uint64_t v10 = (v1[10] - v1[9]) >> 3;
      }
      HALS_ObjectMap::ReleaseObject(v6, v5);
    }
    else
    {
      uint64_t v10 = (v1[7] - v1[6]) >> 3;
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v10;
  }
}

void sub_1BAE34E88(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void HALS_IOEngine2::TransitionContextFromCatchupToRealtime(HALS_IOEngine2 *this, int a2, const HALS_IOEngineInfo *a3)
{
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZN14HALS_IOEngine238TransitionContextFromCatchupToRealtimeEjRK17HALS_IOEngineInfo_block_invoke;
  v4[3] = &__block_descriptor_tmp_47_12096;
  int v5 = a2;
  v4[4] = this;
  void v4[5] = a3;
  int v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v4);
}

uint64_t ___ZN14HALS_IOEngine238TransitionContextFromCatchupToRealtimeEjRK17HALS_IOEngineInfo_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 32) + 1280))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 48), *(void *)(a1 + 40));
}

uint64_t HALS_IOEngine2::GetDataStartByteOffset(HALS_IOEngine2 *this)
{
  return 0;
}

uint64_t HALS_IOEngine2::IsClockStable(HALS_IOEngine2 *this)
{
  uint64_t v5 = 0;
  BOOL v6 = &v5;
  uint64_t v7 = 0x2000000000;
  char v8 = 1;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK14HALS_IOEngine213IsClockStableEv_block_invoke;
  v4[3] = &unk_1E6234900;
  v4[4] = &v5;
  void v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BAE35044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14HALS_IOEngine213IsClockStableEv_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 768);
  if (v1) {
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(v1 + 40);
  }
  return result;
}

uint64_t HALS_IOEngine2::GetClockAlgorithm(HALS_IOEngine2 *this)
{
  uint64_t v5 = 0;
  BOOL v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 1768518246;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK14HALS_IOEngine217GetClockAlgorithmEv_block_invoke;
  v4[3] = &unk_1E62348D8;
  v4[4] = &v5;
  void v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BAE3514C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14HALS_IOEngine217GetClockAlgorithmEv_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 768);
  if (v1) {
    *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(v1 + 36);
  }
  return result;
}

uint64_t HALS_IOEngine2::GetLatency(HALS_IOEngine2 *this, char a2)
{
  uint64_t v7 = 0;
  int v8 = &v7;
  uint64_t v9 = 0x2000000000;
  int v10 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK14HALS_IOEngine210GetLatencyEb_block_invoke;
  v5[3] = &unk_1E62348B0;
  v5[4] = &v7;
  v5[5] = this;
  char v6 = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  uint64_t v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1BAE35250(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14HALS_IOEngine210GetLatencyEb_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 768);
  if (v1) {
    *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(v1
  }
                                                                                + 4
                                                                                * *(unsigned __int8 *)(result + 48)
                                                                                + 28);
  return result;
}

uint64_t HALS_IOEngine2::GetRingBufferFrameSize(HALS_IOEngine2 *this)
{
  uint64_t v5 = 0;
  char v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK14HALS_IOEngine222GetRingBufferFrameSizeEv_block_invoke;
  v4[3] = &unk_1E6234860;
  v4[4] = &v5;
  void v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BAE35358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14HALS_IOEngine222GetRingBufferFrameSizeEv_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 768);
  if (v1) {
    *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(v1 + 16);
  }
  return result;
}

double HALS_IOEngine2::GetNominalSampleRate(HALS_IOEngine2 *this)
{
  uint64_t v5 = 0;
  char v6 = (double *)&v5;
  uint64_t v7 = 0x2000000000;
  uint64_t v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK14HALS_IOEngine220GetNominalSampleRateEv_block_invoke;
  v4[3] = &unk_1E6234838;
  v4[4] = &v5;
  void v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  double v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BAE35460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double ___ZNK14HALS_IOEngine220GetNominalSampleRateEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 40) + 768);
  if (v1)
  {
    double result = *(double *)(v1 + 8);
    *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

uint64_t HALS_IOEngine2::GetOwningDevice(HALS_IOEngine2 *this)
{
  return *((void *)this + 88);
}

uint64_t HALS_IOEngine2::DoAnyQueuesHaveWorkAfterFlush(HALS_IOEngine2 *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 97);
  if (v1) {
    return 1;
  }
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)this + 417);
  if (v2) {
    return 1;
  }
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(*((void *)this + 91) + 33));
  return v3 & 1;
}

void HALS_IOEngine2::FlushAllQueues(HALS_IOEngine2 *this)
{
  AMCP::Utility::Dispatch_Queue::flush_all_work((HALS_IOEngine2 *)((char *)this + 64));
  AMCP::Utility::Dispatch_Queue::flush_all_work((HALS_IOEngine2 *)((char *)this + 384));
  unsigned __int8 v2 = (AMCP::Utility::Dispatch_Queue *)*((void *)this + 91);

  AMCP::Utility::Dispatch_Queue::flush_all_work(v2);
}

void HALS_IOEngine2::HogModeOwnerChanged(HALS_IOEngine2 *this, int a2)
{
  uint64_t v9 = 0;
  int v10 = &v9;
  uint64_t v11 = 0x4002000000;
  int v12 = __Block_byref_object_copy__12125;
  uint64_t v13 = __Block_byref_object_dispose__12126;
  memset(v14, 0, sizeof(v14));
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  v8[2] = ___ZN14HALS_IOEngine219HogModeOwnerChangedEi_block_invoke;
  v8[3] = &unk_1E62347B0;
  v8[4] = &v9;
  v8[5] = this;
  unsigned __int8 v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v8);
  uint64_t v4 = v10;
  for (uint64_t i = v10[5]; i != v4[6]; i += 8)
  {
    int v6 = *(_DWORD *)(*(void *)(*(void *)i + 64) + 4);
    if (v6)
    {
      uint64_t v7 = **(void **)(*(void *)i + 96);
      if (a2 == -1 || v6 == a2) {
        (*(void (**)(void))(v7 + 200))();
      }
      else {
        (*(void (**)(void))(v7 + 192))();
      }
    }
    uint64_t v4 = v10;
  }
  _Block_object_dispose(&v9, 8);
  int v15 = (void **)v14;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v15);
}

void sub_1BAE356AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  *(void *)(v9 - 40) = v8;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v9 - 40));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__12125(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__12126(uint64_t a1)
{
  unsigned __int8 v1 = (void **)(a1 + 40);
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t ___ZN14HALS_IOEngine219HogModeOwnerChangedEi_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 896))(*(void *)(a1 + 40), *(void *)(*(void *)(a1 + 32) + 8) + 40);
}

void HALS_IOEngine2::DuckIOContextVolumeScalarForClient(HALS_IOEngine2 *this, double a2, double a3)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  (*(void (**)(HALS_IOEngine2 *, char **))(*(void *)this + 240))(this, &v13);
  int v6 = v13;
  uint64_t v7 = v14;
  if (v13 != v14)
  {
    do
    {
      uint64_t v8 = *(HALS_ObjectMap **)v6;
      float v9 = (*(float (**)(void, void, void))(**((void **)this + 88) + 248))(*((void *)this + 88), **(unsigned int **)(*(void *)v6 + 64), 0);
      uint64_t v10 = *((void *)v8 + 12);
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 0x40000000;
      void v16[2] = ___ZN26HALS_IOContext_Legacy_Impl19RampVolumeForEngineEP13HALS_IOEnginebfdd_block_invoke;
      v16[3] = &__block_descriptor_tmp_22_12399;
      v16[4] = v10;
      v16[5] = this;
      char v18 = 0;
      float v17 = v9;
      *(double *)&void v16[6] = a2;
      *(double *)&void v16[7] = a3;
      uint64_t v11 = (HALB_Mutex *)(*(uint64_t (**)(void))(**(void **)(v10 + 24) + 56))(*(void *)(v10 + 24));
      HALB_CommandGate::ExecuteCommand(v11, (uint64_t)v16);
      HALS_ObjectMap::ReleaseObject(v8, v12);
      v6 += 8;
    }
    while (v6 != v7);
    int v6 = v13;
  }
  if (v6)
  {
    uint64_t v14 = v6;
    operator delete(v6);
  }
}

void sub_1BAE358DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOEngine2::SetIOContextVolumeScalarForClient(HALS_IOEngine2 *this, int a2, char a3)
{
  float v6 = (*(float (**)(void))(**((void **)this + 88) + 248))(*((void *)this + 88));
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  (*(void (**)(HALS_IOEngine2 *, char **))(*(void *)this + 240))(this, &v13);
  uint64_t v8 = v13;
  float v9 = v14;
  if (v13 != v14)
  {
    do
    {
      uint64_t v10 = *(HALS_ObjectMap **)v8;
      if (**(_DWORD **)(*(void *)v8 + 64) == a2)
      {
        uint64_t v11 = *((void *)v10 + 12);
        v16[0] = MEMORY[0x1E4F143A8];
        v16[1] = 0x40000000;
        void v16[2] = ___ZN26HALS_IOContext_Legacy_Impl18SetVolumeForEngineEP13HALS_IOEnginebf_block_invoke;
        v16[3] = &__block_descriptor_tmp_21_12396;
        v16[4] = v11;
        v16[5] = this;
        char v18 = a3;
        float v17 = v6;
        int v12 = (HALB_Mutex *)(*(uint64_t (**)(void))(**(void **)(v11 + 24) + 56))(*(void *)(v11 + 24));
        HALB_CommandGate::ExecuteCommand(v12, (uint64_t)v16);
      }
      HALS_ObjectMap::ReleaseObject(v10, v7);
      v8 += 8;
    }
    while (v8 != v9);
    uint64_t v8 = v13;
  }
  if (v8)
  {
    uint64_t v14 = v8;
    operator delete(v8);
  }
}

void sub_1BAE35A80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOEngine2::GetCombinedIOContextVolumeScalarForClient(HALS_IOEngine2 *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 88) + 248))();
}

void *HALS_IOEngine2::_GetIOContextStreamUsage(void *this, int a2, unsigned int a3, unsigned int *a4, BOOL *a5)
{
  if (a2)
  {
    for (uint64_t i = (uint64_t *)this[92]; i != (uint64_t *)this[93]; ++i)
    {
      uint64_t v6 = *i;
      if (*(_DWORD *)(*(void *)(*i + 32) + 16) == a2)
      {
        uint64_t v7 = (*(void *)(this[96] + 24 * a3 + 56) - *(void *)(this[96] + 24 * a3 + 48)) >> 3;
        if (*a4 >= v7) {
          uint64_t v7 = v7;
        }
        else {
          uint64_t v7 = *a4;
        }
        if (v7)
        {
          uint64_t v8 = 0;
          uint64_t v9 = v6 + 24 * a3;
          uint64_t v10 = (void *)(v9 + 56);
          unint64_t v11 = *(void *)(v9 + 64);
          do
          {
            if (v11 <= v8) {
              std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
            }
            a5[v8] = (*(void *)(*v10 + (((unint64_t)v8 >> 3) & 0x1FFFFFF8)) >> v8) & 1;
            ++v8;
          }
          while (v7 != v8);
        }
        goto LABEL_7;
      }
    }
  }
  LODWORD(v7) = 0;
LABEL_7:
  *a4 = v7;
  return this;
}

HALS_IOEngine2 *HALS_IOEngine2::_SetIOContextStreamUsage(HALS_IOEngine2 *this, int a2, unsigned int a3, unsigned int a4, BOOL *a5)
{
  if (a2)
  {
    uint64_t v5 = this;
    uint64_t v6 = (uint64_t *)*((void *)this + 92);
    uint64_t v7 = (uint64_t *)*((void *)this + 93);
    if (v6 != v7)
    {
      while (1)
      {
        uint64_t v11 = *v6;
        if (*(_DWORD *)(*(void *)(*v6 + 32) + 16) == a2) {
          break;
        }
        if (++v6 == v7) {
          return this;
        }
      }
      uint64_t v12 = v11 + 56 + 24 * a3;
      *(void *)(v12 + 8) = 0;
      uint64_t v13 = (void *)(v12 + 8);
      if (a4)
      {
        uint64_t v14 = v11 + 56 + 24 * a3;
        uint64_t v15 = *(char **)v14;
        uint64_t v16 = a4;
        uint64_t v17 = *(void *)(v14 + 16);
        if (v17 << 6 >= (unint64_t)a4)
        {
          *uint64_t v13 = a4;
          v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15[((unint64_t)a4 >> 3) & 0x1FFFFFF8];
          if ((a4 & 0x3F) != 0)
          {
            LODWORD(v44.__r_.__value_.__r.__words[1]) = a4 & 0x3F;
            std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>((uint64_t)&v45, (uint64_t)v15, 0, v15, 0, (uint64_t)&v44);
          }
          else
          {
            LODWORD(v44.__r_.__value_.__r.__words[1]) = 0;
            std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>((uint64_t)&v45, (uint64_t)v15, 0, v15, 0, (uint64_t)&v44);
          }
          unint64_t v29 = 8 * (void)&v15[-*(void *)v14];
          if ((uint64_t)&v15[-*(void *)v14] < 0)
          {
            uint64_t v31 = v29 - 63;
            if ((uint64_t)(v29 - 63) < 0) {
              uint64_t v31 = 8 * (void)&v15[-*(void *)v14];
            }
            uint64_t v30 = v31 >> 6;
          }
          else
          {
            uint64_t v30 = v29 >> 6;
          }
          uint64_t v23 = (uint64_t *)(*(void *)v14 + 8 * v30);
          int v25 = v29 & 0x38;
        }
        else
        {
          memset(&v44, 0, sizeof(v44));
          if ((unint64_t)(v17 << 6) > 0x3FFFFFFFFFFFFFFELL)
          {
            unint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            unint64_t v18 = v17 << 7;
            if (v18 <= ((a4 + 63) & 0x1FFFFFFC0uLL)) {
              unint64_t v19 = (a4 + 63) & 0x1FFFFFFC0;
            }
            else {
              unint64_t v19 = v18;
            }
          }
          std::vector<BOOL>::reserve((uint64_t)&v44, v19);
          v44.__r_.__value_.__l.__size_ = *v13 + v16;
          std::string::size_type size = v44.__r_.__value_.__l.__size_;
          uint64_t v20 = *(char **)v14;
          std::string::size_type v21 = v44.__r_.__value_.__r.__words[0];
          std::string::size_type v45 = v44.__r_.__value_.__r.__words[0];
          int v46 = 0;
          std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>((unint64_t *)&v42, v20, 0, (uint64_t)v15, 0, (uint64_t)&v45);
          uint64_t v22 = (uint64_t)v15;
          uint64_t v23 = v42;
          long long v24 = (void **)v14;
          int v25 = v43;
          unint64_t v41 = v24;
          unint64_t v26 = (char *)*v24 + 8 * (*v13 >> 6);
          uint64_t v27 = *v13 & 0x3FLL;
          std::string::size_type v45 = v21 + 8 * (size >> 6);
          int v46 = size & 0x3F;
          if (v46 == v27) {
            std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>((uint64_t)&v42, v22, 0, v26, v27, (uint64_t)&v45);
          }
          else {
            std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>((uint64_t)&v42, v22, 0, v26, v27, (uint64_t)&v45);
          }
          uint64_t v28 = *v41;
          *unint64_t v41 = (void *)v21;
          *(_OWORD *)uint64_t v13 = *(_OWORD *)&v44.__r_.__value_.__r.__words[1];
          if (v28) {
            operator delete(v28);
          }
        }
        do
        {
          uint64_t v32 = 1 << v25;
          if (*a5) {
            uint64_t v33 = *v23 | v32;
          }
          else {
            uint64_t v33 = *v23 & ~v32;
          }
          uint64_t *v23 = v33;
          ++a5;
          v23 += v25 == 63;
          if (v25 == 63) {
            int v25 = 0;
          }
          else {
            ++v25;
          }
          --v16;
        }
        while (v16);
      }
      HALS_IOEngine2::_UpdateTotalStreamUsage(v5, a3);
      if (*(unsigned char *)(v11 + 48))
      {
        uint64_t v34 = *((void *)v5 + 96);
        uint64_t v35 = (_OWORD *)(v11 + 136);
        if (*(char *)(v11 + 159) < 0)
        {
          std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)(v11 + 136), *(void *)(v11 + 144));
        }
        else
        {
          *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *v35;
          v44.__r_.__value_.__r.__words[2] = *(void *)(v11 + 152);
        }
        HALS_IOEngine2_DeviceInfo::StopContext(v34, a2, (uint64_t)&v44);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
        *(_DWORD *)(v11 + 104) = 0;
        uint64_t v37 = *(void *)(v11 + 112);
        for (uint64_t i = *(void *)(v11 + 120);
              i != v37;
        *(void *)(v11 + 120) = v37;
        *(unsigned char *)(v11 + 48) = 0;
        HALS_IOEngine2_IOContextInfo::StartIO((HALS_IOEngine2_IOContextInfo *)v11);
        uint64_t v38 = *((void *)v5 + 96);
        if (*(char *)(v11 + 159) < 0)
        {
          std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)(v11 + 136), *(void *)(v11 + 144));
        }
        else
        {
          *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *v35;
          v44.__r_.__value_.__r.__words[2] = *(void *)(v11 + 152);
        }
        HALS_IOEngine2_DeviceInfo::StartContext(v38, a2, (uint64_t)&v44);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v39 = *(uint64_t (**)(HALS_IOEngine2 *))(*(void *)v5 + 704);
      return (HALS_IOEngine2 *)v39(v5);
    }
  }
  return this;
}

void sub_1BAE35F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__copy_backward_aligned[abi:ne180100]<std::vector<BOOL>,true>(uint64_t a1, uint64_t a2, unsigned int a3, void *a4, unsigned int a5, uint64_t a6)
{
  int64_t v8 = a5 - (unint64_t)a3 + 8 * ((void)a4 - a2);
  __n128 result = *(void **)a6;
  if (v8 >= 1)
  {
    if (a5)
    {
      if (v8 >= (unint64_t)a5) {
        unint64_t v10 = a5;
      }
      else {
        unint64_t v10 = a5 - (unint64_t)a3 + 8 * ((void)a4 - a2);
      }
      v8 -= v10;
      unint64_t v11 = (-1 << (a5 - v10)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)a5);
      *__n128 result = *result & ~v11 | *a4 & v11;
      *(_DWORD *)(a6 + 8) = (*(_DWORD *)(a6 + 8) - (_BYTE)v10) & 0x3F;
    }
    if (v8 >= 0) {
      uint64_t v12 = v8;
    }
    else {
      uint64_t v12 = v8 + 63;
    }
    uint64_t v13 = v12 >> 6;
    result -= v12 >> 6;
    *(void *)a6 = result;
    uint64_t v14 = &a4[-(v12 >> 6)];
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(result, &a4[-(v12 >> 6)], 8 * v13);
      __n128 result = *(void **)a6;
    }
    if (v8 - (v13 << 6) >= 1)
    {
      uint64_t v15 = -1 << (((_BYTE)v13 << 6) - v8);
      uint64_t v16 = *(v14 - 1) & v15;
      uint64_t v17 = *--result;
      *(void *)a6 = result;
      *__n128 result = v17 & ~v15 | v16;
      *(_DWORD *)(a6 + 8) = -(int)v8 & 0x3F;
    }
  }
  *(void *)a1 = result;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a6 + 8);
  return result;
}

uint64_t std::__copy_backward_unaligned[abi:ne180100]<std::vector<BOOL>,true>(uint64_t result, uint64_t a2, unsigned int a3, void *a4, unsigned int a5, uint64_t a6)
{
  int64_t v6 = a5 - (unint64_t)a3 + 8 * ((void)a4 - a2);
  if (v6 <= 0)
  {
    unint64_t v11 = *(unint64_t **)a6;
    LODWORD(v9) = *(_DWORD *)(a6 + 8);
  }
  else
  {
    if (a5)
    {
      if (v6 >= (unint64_t)a5) {
        int64_t v7 = a5;
      }
      else {
        int64_t v7 = a5 - (unint64_t)a3 + 8 * ((void)a4 - a2);
      }
      v6 -= v7;
      unint64_t v8 = (-1 << (a5 - v7)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)a5) & *a4;
      unint64_t v9 = *(unsigned int *)(a6 + 8);
      if (v7 >= v9) {
        int64_t v10 = *(unsigned int *)(a6 + 8);
      }
      else {
        int64_t v10 = v7;
      }
      unint64_t v11 = *(unint64_t **)a6;
      if (v10)
      {
        unint64_t v12 = v8 >> (a5 - v9);
        if (v9 > a5) {
          unint64_t v12 = v8 << (v9 - a5);
        }
        *unint64_t v11 = *v11 & ~((-1 << (v9 - v10)) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v9)) | v12;
        LODWORD(v9) = ((_BYTE)v9 - (_BYTE)v10) & 0x3F;
        *(_DWORD *)(a6 + 8) = v9;
        v7 -= v10;
      }
      if (v7 >= 1)
      {
        uint64_t v13 = *--v11;
        *(void *)a6 = v11;
        LODWORD(v9) = -(int)v7 & 0x3F;
        *(_DWORD *)(a6 + 8) = v9;
        *unint64_t v11 = v13 & ~(-1 << -(char)v7) | (v8 << (v7 + v10 - a5 + (-(char)v7 & 0x3F)));
      }
    }
    else
    {
      LODWORD(v9) = *(_DWORD *)(a6 + 8);
      unint64_t v11 = *(unint64_t **)a6;
    }
    char v14 = 64 - v9;
    unint64_t v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
    if (v6 >= 64)
    {
      unint64_t v16 = *v11;
      do
      {
        unint64_t v17 = v6;
        unint64_t v19 = *--a4;
        unint64_t v18 = v19;
        *unint64_t v11 = v16 & ~v15 | (v19 >> v14);
        uint64_t v20 = *--v11;
        unint64_t v16 = v20 & v15 | (v18 << v9);
        *unint64_t v11 = v16;
        int64_t v6 = v17 - 64;
      }
      while (v17 > 0x7F);
      *(void *)a6 = v11;
    }
    if (v6 >= 1)
    {
      unint64_t v21 = *(a4 - 1) & (-1 << -(char)v6);
      if (v6 >= (unint64_t)v9) {
        int64_t v22 = v9;
      }
      else {
        int64_t v22 = v6;
      }
      *unint64_t v11 = *v11 & ~((-1 << (v9 - v22)) & v15) | (v21 >> v14);
      LODWORD(v9) = ((_BYTE)v9 - (_BYTE)v22) & 0x3F;
      *(_DWORD *)(a6 + 8) = v9;
      if (v6 - v22 >= 1)
      {
        uint64_t v23 = *--v11;
        *(void *)a6 = v11;
        *(_DWORD *)(a6 + 8) = (v22 - v6) & 0x3F;
        *unint64_t v11 = v23 & ~(-1 << (v22 - v6)) | (v21 << (v6 + ((v22 - v6) & 0x3F)));
        LODWORD(v9) = (v22 - v6) & 0x3F;
      }
    }
  }
  *(void *)__n128 result = v11;
  *(_DWORD *)(result + 8) = v9;
  return result;
}

void HALS_IOEngine2::CopyAllContexts(uint64_t a1, char **a2)
{
  uint64_t v23 = 0;
  long long v24 = &v23;
  uint64_t v25 = 0x4002000000;
  unint64_t v26 = __Block_byref_object_copy__17;
  uint64_t v27 = __Block_byref_object_dispose__18;
  std::string __p = 0;
  unint64_t v29 = 0;
  uint64_t v30 = 0;
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 0x40000000;
  v22[2] = ___ZNK14HALS_IOEngine215CopyAllContextsERNSt3__16vectorIP14HALS_IOContextNS0_9allocatorIS3_EEEE_block_invoke;
  void v22[3] = &unk_1E6234768;
  v22[4] = &v23;
  v22[5] = a1;
  unsigned __int8 v3 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v22);
  if (v24 + 5 == (uint64_t *)a2) {
    goto LABEL_24;
  }
  uint64_t v4 = (char *)v24[5];
  uint64_t v5 = (unsigned char *)v24[6];
  size_t v6 = v5 - v4;
  unint64_t v7 = (v5 - v4) >> 3;
  uint64_t v8 = (uint64_t)a2[2];
  unint64_t v9 = *a2;
  if (v7 > (v8 - (uint64_t)*a2) >> 3)
  {
    if (v9)
    {
      a2[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    if ((v6 & 0x8000000000000000) != 0) {
      goto LABEL_27;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= v7) {
      uint64_t v10 = (v5 - v4) >> 3;
    }
    unint64_t v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 61) {
LABEL_27:
    }
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v11);
    unint64_t v9 = v12;
    *a2 = v12;
    a2[1] = v12;
    a2[2] = &v12[8 * v13];
    if (v5 != v4) {
      memmove(v12, v4, v5 - v4);
    }
    char v14 = (void **)(a2 + 1);
    goto LABEL_23;
  }
  unint64_t v16 = a2[1];
  char v14 = (void **)(a2 + 1);
  unint64_t v15 = v16;
  size_t v17 = v16 - v9;
  unint64_t v18 = (v16 - v9) >> 3;
  if (v18 < v7)
  {
    unint64_t v19 = &v4[8 * v18];
    if (v15 != v9)
    {
      memmove(v9, v4, v17);
      unint64_t v9 = (char *)*v14;
    }
    size_t v6 = v5 - v19;
    if (v5 == v19) {
      goto LABEL_23;
    }
    uint64_t v20 = v9;
    unint64_t v21 = v19;
    goto LABEL_22;
  }
  if (v5 != v4)
  {
    uint64_t v20 = v9;
    unint64_t v21 = (char *)v24[5];
LABEL_22:
    memmove(v20, v21, v6);
  }
LABEL_23:
  *char v14 = &v9[v6];
LABEL_24:
  _Block_object_dispose(&v23, 8);
  if (__p)
  {
    unint64_t v29 = __p;
    operator delete(__p);
  }
}

void sub_1BAE364D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__17(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
  unsigned __int8 v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZNK14HALS_IOEngine215CopyAllContextsERNSt3__16vectorIP14HALS_IOContextNS0_9allocatorIS3_EEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 888))(*(void *)(a1 + 40), *(void *)(*(void *)(a1 + 32) + 8) + 40);
}

void sub_1BAE36584(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_IOEngine2::AssessAllContexts(HALS_IOEngine2 *this, const AudioObjectPropertyAddress **a2)
{
  uint64_t v13 = 0;
  char v14 = &v13;
  uint64_t v15 = 0x4002000000;
  unint64_t v16 = __Block_byref_object_copy__12125;
  size_t v17 = __Block_byref_object_dispose__12126;
  memset(v18, 0, sizeof(v18));
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  uint64_t v12[2] = ___ZN14HALS_IOEngine217AssessAllContextsERK21CAPropertyAddressList_block_invoke;
  v12[3] = &unk_1E6234740;
  v12[4] = &v13;
  v12[5] = this;
  unsigned __int8 v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v12);
  uint64_t v10 = 0x676C6F6261657245;
  int v11 = 0;
  uint64_t v5 = *a2;
  size_t v6 = a2[1];
  if (v5 == v6)
  {
    size_t v6 = v5;
  }
  else
  {
    while (!CAPropertyAddress::IsCongruentAddress((CAPropertyAddress *)&v10, v5, v4))
    {
      if (++v5 == v6)
      {
        uint64_t v5 = v6;
        break;
      }
    }
  }
  unint64_t v7 = v14;
  for (uint64_t i = (uint64_t *)v14[5]; i != (uint64_t *)v7[6]; ++i)
  {
    uint64_t v9 = *i;
    if (v5 != v6) {
      (*(void (**)(void))(**(void **)(v9 + 96) + 224))(*(void *)(v9 + 96));
    }
    (*(void (**)(void))(**(void **)(v9 + 96) + 216))(*(void *)(v9 + 96));
    unint64_t v7 = v14;
  }
  _Block_object_dispose(&v13, 8);
  uint64_t v10 = (uint64_t)v18;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
}

void sub_1BAE36768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

uint64_t ___ZN14HALS_IOEngine217AssessAllContextsERK21CAPropertyAddressList_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 40) + 896))(*(void *)(a1 + 40), *(void *)(*(void *)(a1 + 32) + 8) + 40);
}

void HALS_IOEngine2::ResumeAllContexts(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  kdebug_trace();
  v15[0] = 0;
  v15[1] = v15;
  uint64_t v15[2] = 0x4002000000;
  void v15[3] = __Block_byref_object_copy__12125;
  v15[4] = __Block_byref_object_dispose__12126;
  memset(v16, 0, sizeof(v16));
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x3002000000;
  unint64_t v12 = __Block_byref_object_copy__9;
  uint64_t v13 = __Block_byref_object_dispose__10;
  uint64_t v14 = 0;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  v8[2] = ___ZN14HALS_IOEngine217ResumeAllContextsERKNSt3__16vectorIjNS0_9allocatorIjEEEE_block_invoke;
  v8[3] = &unk_1E6234718;
  v8[5] = &v9;
  void v8[6] = a1;
  v8[4] = v15;
  unsigned __int8 v2 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v8);
  int v3 = 1;
  uint64_t v4 = MEMORY[0x1E4F14500];
  while (1)
  {
    uint64_t v5 = v10[5];
    dispatch_time_t v6 = dispatch_time(0, 2000000000);
    if (!dispatch_block_wait(v5, v6)) {
      break;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315650;
      unint64_t v18 = "HALS_IOEngine2.cpp";
      __int16 v19 = 1024;
      int v20 = 1182;
      __int16 v21 = 1024;
      int v22 = 2 * v3;
      _os_log_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOEngine2::ResumeAllContexts: still waiting after %d seconds", buf, 0x18u);
      ++v3;
    }
  }
  unint64_t v7 = v10[5];
  if (v7) {
    _Block_release(v7);
  }
  kdebug_trace();
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(v15, 8);
  uint64_t v9 = (void **)v16;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v9);
}

void sub_1BAE36A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  unint64_t v12 = va_arg(va1, void **);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  unint64_t v12 = a4;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

void ___ZN14HALS_IOEngine217ResumeAllContextsERKNSt3__16vectorIjNS0_9allocatorIjEEEE_block_invoke(void *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[6];
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 896))(v2, *(void *)(a1[4] + 8) + 40);
  if (*(_DWORD *)(v2 + 760))
  {
    --*(_DWORD *)(v2 + 760);
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315394;
    unint64_t v7 = "HALS_IOEngine2.cpp";
    __int16 v8 = 1024;
    int v9 = 1159;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOEngine2::ResumeAllContexts: extra resume", (uint8_t *)&v6, 0x12u);
  }
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZN14HALS_IOEngine217ResumeAllContextsERKNSt3__16vectorIjNS0_9allocatorIjEEEE_block_invoke_13;
  v5[3] = &unk_1E62346F0;
  v5[4] = a1[4];
  v5[5] = v2;
  *(void *)(*(void *)(a1[5] + 8) + 40) = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, v5);
  int v3 = *(void **)(*(void *)(a1[5] + 8) + 40);
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(v2 + 416));
  if (v4) {
    atomic_store(1u, (unsigned __int8 *)(v2 + 417));
  }
  dispatch_async(*(dispatch_queue_t *)(v2 + 384), v3);
}

uint64_t ___ZN14HALS_IOEngine217ResumeAllContextsERKNSt3__16vectorIjNS0_9allocatorIjEEEE_block_invoke_13(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 8);
  uint64_t v2 = *(uint64_t **)(v1 + 40);
  if (v2 != *(uint64_t **)(v1 + 48))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(result + 40);
    do
    {
      uint64_t v5 = *v2++;
      __n128 result = (*(uint64_t (**)(void, void))(**(void **)(v5 + 96) + 200))(*(void *)(v5 + 96), *(unsigned int *)(v4 + 16));
    }
    while (v2 != *(uint64_t **)(*(void *)(*(void *)(v3 + 32) + 8) + 48));
  }
  return result;
}

void HALS_IOEngine2::PauseAllContexts(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  kdebug_trace();
  v17[0] = 0;
  v17[1] = v17;
  v17[2] = 0x4002000000;
  v17[3] = __Block_byref_object_copy__12125;
  v17[4] = __Block_byref_object_dispose__12126;
  memset(v18, 0, sizeof(v18));
  uint64_t v11 = 0;
  unint64_t v12 = &v11;
  uint64_t v13 = 0x3002000000;
  uint64_t v14 = __Block_byref_object_copy__9;
  uint64_t v15 = __Block_byref_object_dispose__10;
  uint64_t v16 = 0;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  v10[2] = ___ZN14HALS_IOEngine216PauseAllContextsERNSt3__16vectorIjNS0_9allocatorIjEEEE_block_invoke;
  v10[3] = &unk_1E62346C8;
  v10[4] = v17;
  v10[5] = &v11;
  v10[6] = a1;
  v10[7] = a2;
  uint64_t v4 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v10);
  int v5 = 1;
  int v6 = MEMORY[0x1E4F14500];
  while (1)
  {
    unint64_t v7 = v12[5];
    dispatch_time_t v8 = dispatch_time(0, 2000000000);
    if (!dispatch_block_wait(v7, v8)) {
      break;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315650;
      int v20 = "HALS_IOEngine2.cpp";
      __int16 v21 = 1024;
      int v22 = 1134;
      __int16 v23 = 1024;
      int v24 = 2 * v5;
      _os_log_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOEngine2::PauseAllContexts: still waiting after %d seconds", buf, 0x18u);
      ++v5;
    }
  }
  int v9 = v12[5];
  if (v9) {
    _Block_release(v9);
  }
  kdebug_trace();
  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(v17, 8);
  uint64_t v11 = (void **)v18;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v11);
}

void sub_1BAE36FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  a21 = a12;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&a21);
  _Unwind_Resume(a1);
}

void ___ZN14HALS_IOEngine216PauseAllContextsERNSt3__16vectorIjNS0_9allocatorIjEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[6];
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 896))(v2, *(void *)(a1[4] + 8) + 40);
  ++*(_DWORD *)(v2 + 760);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN14HALS_IOEngine216PauseAllContextsERNSt3__16vectorIjNS0_9allocatorIjEEEE_block_invoke_2;
  block[3] = &unk_1E62346A0;
  void block[4] = a1[4];
  void block[5] = v2;
  void block[6] = a1[7];
  *(void *)(*(void *)(a1[5] + 8) + 40) = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  uint64_t v3 = *(void **)(*(void *)(a1[5] + 8) + 40);
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(v2 + 416));
  if (v4) {
    atomic_store(1u, (unsigned __int8 *)(v2 + 417));
  }
  dispatch_async(*(dispatch_queue_t *)(v2 + 384), v3);
}

void sub_1BAE37110(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZN14HALS_IOEngine216PauseAllContextsERNSt3__16vectorIjNS0_9allocatorIjEEEE_block_invoke_2(void *a1)
{
  uint64_t v1 = *(void *)(a1[4] + 8);
  uint64_t v2 = *(uint64_t **)(v1 + 40);
  if (v2 != *(uint64_t **)(v1 + 48))
  {
    uint64_t v4 = a1[5];
    do
    {
      uint64_t v5 = *v2;
      if ((*(unsigned int (**)(void, void))(**(void **)(*v2 + 96) + 192))(*(void *)(*v2 + 96), *(unsigned int *)(v4 + 16)))
      {
        uint64_t v6 = a1[6];
        int v7 = *(_DWORD *)(v5 + 16);
        int v9 = *(_DWORD **)(v6 + 8);
        unint64_t v8 = *(void *)(v6 + 16);
        if ((unint64_t)v9 >= v8)
        {
          uint64_t v11 = *(_DWORD **)v6;
          uint64_t v12 = ((uint64_t)v9 - *(void *)v6) >> 2;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 62) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v14 = v8 - (void)v11;
          if (v14 >> 1 > v13) {
            unint64_t v13 = v14 >> 1;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15)
          {
            unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v15);
            uint64_t v11 = *(_DWORD **)v6;
            int v9 = *(_DWORD **)(v6 + 8);
          }
          else
          {
            uint64_t v16 = 0;
          }
          uint64_t v17 = (_DWORD *)(v15 + 4 * v12);
          *uint64_t v17 = v7;
          uint64_t v10 = v17 + 1;
          while (v9 != v11)
          {
            int v18 = *--v9;
            *--uint64_t v17 = v18;
          }
          *(void *)uint64_t v6 = v17;
          *(void *)(v6 + 8) = v10;
          *(void *)(v6 + 16) = v15 + 4 * v16;
          if (v11) {
            operator delete(v11);
          }
        }
        else
        {
          *int v9 = v7;
          uint64_t v10 = v9 + 1;
        }
        *(void *)(v6 + 8) = v10;
      }
      ++v2;
    }
    while (v2 != *(uint64_t **)(*(void *)(a1[4] + 8) + 48));
  }
}

void HALS_IOEngine2::UnregisterIOContext(HALS_IOEngine2 *this, HALS_IOContext *a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN14HALS_IOEngine219UnregisterIOContextEP14HALS_IOContext_block_invoke;
  v3[3] = &__block_descriptor_tmp_8_12157;
  v3[4] = this;
  void v3[5] = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

uint64_t ___ZN14HALS_IOEngine219UnregisterIOContextEP14HALS_IOContext_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 928))(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

void HALS_IOEngine2::RegisterIOContext(HALS_IOEngine2 *this, HALS_IOContext *a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN14HALS_IOEngine217RegisterIOContextEP14HALS_IOContext_block_invoke;
  v3[3] = &__block_descriptor_tmp_12160;
  v3[4] = this;
  void v3[5] = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

uint64_t ___ZN14HALS_IOEngine217RegisterIOContextEP14HALS_IOContext_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 920))(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t HALS_IOEngine2::GetMIGDispatchQueue(HALS_IOEngine2 *this)
{
  return *((void *)this + 90);
}

{
  return *((void *)this + 90);
}

void HALS_IOEngine2::_Deactivate(HALS_IOEngine2 *this)
{
  *((_DWORD *)this + 2) = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  (*(void (**)(HALS_IOEngine2 *, void **))(*(void *)this + 896))(this, &v5);
  uint64_t v2 = v5;
  uint64_t v3 = v6;
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(HALS_IOEngine2 *))(*(void *)this + 208))(this);
    }
    ++v2;
  }
  uint64_t v4 = *((void *)this + 96);
  *((void *)this + 96) = 0;
  if (v4) {
    std::default_delete<HALS_IOEngine2_DeviceInfo>::operator()[abi:ne180100](v4);
  }
  *((void *)this + 88) = 0;
  unint64_t v8 = (void **)&v5;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v8);
}

void sub_1BAE374F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOEngine2::Activate(HALS_IOEngine2 *this, HALS_Object *a2)
{
  HALS_Object::Activate(this, a2);
  uint64_t v3 = *(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 936);

  return v3(this);
}

void HALS_IOEngine2::HALS_IOEngine2(HALS_IOEngine2 *this, HALS_IODevice *a2, uint64_t a3, uint64_t a4, HALS_Object *a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  HALS_IOEngine::HALS_IOEngine(this, a2, a3, a4, a5);
  *(void *)uint64_t v7 = &unk_1F1479C90;
  *(void *)(v7 + 704) = a2;
  *(_OWORD *)(v7 + 712) = 0u;
  *(_OWORD *)(v7 + 728) = 0u;
  *(_OWORD *)(v7 + 744) = 0u;
  *(_DWORD *)(v7 + 760) = 0;
  *(_DWORD *)(v7 + 1104) = 0;
  *(void *)(v7 + 1112) = 0;
  *(_OWORD *)(v7 + 1056) = 0u;
  *(void *)(v7 + 1069) = 0;
  *(_OWORD *)(v7 + 1080) = 0u;
  *(unsigned char *)(v7 + 1096) = 0;
  *(_OWORD *)(v7 + 764) = 0u;
  *(_OWORD *)(v7 + 780) = 0u;
  *(_OWORD *)(v7 + 796) = 0u;
  *(_OWORD *)(v7 + 812) = 0u;
  *(_OWORD *)(v7 + 828) = 0u;
  *(_OWORD *)(v7 + 844) = 0u;
  *(_OWORD *)(v7 + 860) = 0u;
  *(_OWORD *)(v7 + 876) = 0u;
  *(_OWORD *)(v7 + 892) = 0u;
  *(_OWORD *)(v7 + 908) = 0u;
  *(_OWORD *)(v7 + 924) = 0u;
  *(_OWORD *)(v7 + 940) = 0u;
  *(_OWORD *)(v7 + 956) = 0u;
  *(_OWORD *)(v7 + 972) = 0u;
  *(_OWORD *)(v7 + 988) = 0u;
  *(_OWORD *)(v7 + 1004) = 0u;
  *(_OWORD *)(v7 + 1020) = 0u;
  *(_OWORD *)(v7 + 1036) = 0u;
  if (g_static_start_options != 1)
  {
    unint64_t v8 = operator new(0x58uLL);
    v8[1] = 0;
    v8[2] = 0;
    void *v8 = &unk_1F147A228;
    *((_OWORD *)v8 + 2) = 0u;
    *((_OWORD *)v8 + 4) = 0u;
    v8[3] = &unk_1F147A278;
    *((_OWORD *)v8 + 3) = 0u;
    v8[10] = 0;
    if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
      dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global);
    }
    if (AudioIssueDetectorLibraryLoader(void)::libSym) {
      uint64_t v9 = AudioIssueDetectorLibraryLoader(void)::libSym(1, v8 + 8);
    }
    else {
      uint64_t v9 = 0;
    }
    void v8[7] = v9;
    *(void *)&long long v10 = v8 + 3;
    *((void *)&v10 + 1) = v8;
    uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 7);
    *((_OWORD *)this + 3) = v10;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  CFStringRef v12 = (const __CFString *)(*(uint64_t (**)(HALS_IODevice *))(*(void *)a2 + 208))(a2);
  CFStringRef v15 = v12;
  char v16 = 1;
  if (v12)
  {
    CFStringGetLength(v12);
    CFStringRef v12 = v15;
  }
  *(_DWORD *)uint64_t v14 = 256;
  CACFString::GetCString(v12, (__CFString *)((char *)this + 796), v14, v13);
  operator new[]();
}

void sub_1BAE37D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, AMCP::Utility::Dispatch_Queue **a12, AMCP::Utility::Dispatch_Queue **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  int v66 = (std::__shared_weak_count_vtbl *)*v63;
  if (*v63)
  {
    v62[3].__vftable = v66;
    operator delete(v66);
  }
  unsigned int v67 = *v61;
  if (*v61)
  {
    v62[1].__shared_weak_owners_ = (uint64_t)v67;
    operator delete(v67);
  }
  std::__shared_weak_count::~__shared_weak_count(v62);
  operator delete(v68);
  unsigned int v69 = (std::__shared_weak_count *)v60[136];
  if (v69) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v69);
  }
  std::unique_ptr<HALS_IOEngine2_TempBuffer>::reset[abi:ne180100](v60 + 98, 0);
  std::unique_ptr<HALS_IOEngine2_TempBuffer>::reset[abi:ne180100](v60 + 97, 0);
  uint64_t v70 = v60[96];
  v60[96] = 0;
  if (v70) {
    std::default_delete<HALS_IOEngine2_DeviceInfo>::operator()[abi:ne180100](v70);
  }
  std::string __p = v60 + 92;
  std::vector<std::unique_ptr<HALS_IOEngine2_IOContextInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100](a12, 0);
  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100](a13, 0);
  std::unique_ptr<HALB_CommandGate>::reset[abi:ne180100](v64, 0);
  HALS_IOEngine::~HALS_IOEngine((HALS_IOEngine *)v60);
  _Unwind_Resume(a1);
}

void std::stringbuf::str[abi:ne180100](uint64_t a1, long long *a2)
{
  uint64_t v4 = a1 + 64;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)v4);
  }
  long long v5 = *a2;
  *(void *)(v4 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v4 = v5;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;

  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
}

void std::vector<std::unique_ptr<HALS_IOEngine2_IOContextInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          std::default_delete<HALS_IOEngine2_IOContextInfo>::operator()[abi:ne180100](v6);
        }
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<HALS_LegacyTimebase>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<HALS_LegacyTimebase>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147A2A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALS_LegacyTimebase>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147A2A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void HALS_IOEngine2::~HALS_IOEngine2(HALS_IOEngine2 *this)
{
  *(void *)this = &unk_1F1479C90;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 136);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::unique_ptr<HALS_IOEngine2_TempBuffer>::reset[abi:ne180100]((uint64_t *)this + 98, 0);
  std::unique_ptr<HALS_IOEngine2_TempBuffer>::reset[abi:ne180100]((uint64_t *)this + 97, 0);
  uint64_t v3 = *((void *)this + 96);
  *((void *)this + 96) = 0;
  if (v3) {
    std::default_delete<HALS_IOEngine2_DeviceInfo>::operator()[abi:ne180100](v3);
  }
  uint64_t v4 = (void **)((char *)this + 736);
  std::vector<std::unique_ptr<HALS_IOEngine2_IOContextInfo>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100]((AMCP::Utility::Dispatch_Queue **)this + 91, 0);
  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100]((AMCP::Utility::Dispatch_Queue **)this + 90, 0);
  std::unique_ptr<HALB_CommandGate>::reset[abi:ne180100]((HALB_Mutex **)this + 89, 0);

  HALS_IOEngine::~HALS_IOEngine(this);
}

void ___ZN14HALS_IOEngine239ClearOutputStreamsUsedOnlyByThisContextEj_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1[96];
  if (v2)
  {
    int v3 = *(_DWORD *)(a1 + 40);
    unint64_t v4 = *(void *)(v2 + 56) - *(void *)(v2 + 48);
    std::vector<int>::size_type v5 = (v4 >> 3);
    std::vector<int>::vector(&v20, v5);
    std::vector<int>::vector(&__p, v5);
    if ((v4 & 0x7FFFFFFF8) != 0)
    {
      unint64_t v6 = 0;
      uint64_t v7 = (uint64_t *)v1[92];
      unint64_t v8 = (uint64_t *)v1[93];
      do
      {
        if (v7 != v8)
        {
          std::vector<int>::pointer begin = v20.__begin_;
          std::vector<int>::pointer v10 = __p.__begin_;
          uint64_t v11 = v7;
          do
          {
            uint64_t v12 = *v11;
            unint64_t v13 = *(void *)(*v11 + 64);
            if (v6 < v13)
            {
              if (v13 <= v6) {
                std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
              }
              if ((*(void *)(*(void *)(v12 + 56) + 8 * (v6 >> 6)) & (1 << v6)) != 0)
              {
                if (*(_DWORD *)(*(void *)(v12 + 32) + 16) == v3) {
                  std::vector<int>::pointer v14 = v10;
                }
                else {
                  std::vector<int>::pointer v14 = begin;
                }
                ++v14[v6];
              }
            }
            ++v11;
          }
          while (v11 != v8);
        }
        ++v6;
      }
      while (v6 != v5);
      unint64_t v15 = 0;
      do
      {
        if (__p.__begin_[v15] == 1 && !v20.__begin_[v15])
        {
          uint64_t v16 = *(void *)(v1[96] + 48);
          if (v15 >= (*(void *)(v1[96] + 56) - v16) >> 3) {
            std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v17 = *(void *)(v16 + 8 * v15);
          int v18 = *(void **)(v17 + 168);
          if (v18) {
            bzero(v18, *(unsigned int *)(v17 + 176));
          }
        }
        ++v15;
      }
      while (v5 != v15);
    }
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (v20.__begin_)
    {
      v20.__end_ = v20.__begin_;
      operator delete(v20.__begin_);
    }
  }
}

void sub_1BAE382B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (v21) {
    operator delete(v21);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1BAE38378(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char **HALS_IOEngine2::_GetExternalDriverStreamMixBufferInfoList(char **this, uint64_t a2)
{
  uint64_t v2 = 0;
  int v3 = 0;
  unint64_t v4 = 0;
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  std::vector<int>::size_type v5 = (uint64_t **)(a2 + 48);
  __int16 v21 = (uint64_t **)(a2 + 96);
  __int16 v23 = this;
  do
  {
    unint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    uint64_t v22 = v5;
    while (v6 != v7)
    {
      uint64_t v8 = *v6;
      if (!*(_DWORD *)(*v6 + 24))
      {
        uint64_t v9 = *(void *)(v8 + 472);
        if (v9)
        {
          int v10 = *(_DWORD *)(v8 + 36);
          int v11 = *(_DWORD *)(v8 + 64) * v10;
          int v12 = *(_DWORD *)(v8 + 16);
          if (v4 >= v3)
          {
            uint64_t v13 = (v4 - v2) >> 5;
            unint64_t v14 = v13 + 1;
            if ((unint64_t)(v13 + 1) >> 59) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            if ((v3 - v2) >> 4 > v14) {
              unint64_t v14 = (v3 - v2) >> 4;
            }
            if ((unint64_t)(v3 - v2) >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v15 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v15 = v14;
            }
            if (v15)
            {
              if (v15 >> 59) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v16 = (char *)operator new(32 * v15);
            }
            else
            {
              uint64_t v16 = 0;
            }
            uint64_t v17 = &v16[32 * v13];
            *(_DWORD *)uint64_t v17 = v12;
            *((void *)v17 + 1) = v9;
            *((_DWORD *)v17 + 4) = 0;
            *((_DWORD *)v17 + 5) = v11;
            *((_DWORD *)v17 + 6) = v10;
            if (v4 == v2)
            {
              __int16 v19 = &v16[32 * v13];
            }
            else
            {
              int v18 = &v16[32 * v13];
              do
              {
                __int16 v19 = v18 - 32;
                long long v20 = *((_OWORD *)v4 - 1);
                *((_OWORD *)v18 - 2) = *((_OWORD *)v4 - 2);
                *((_OWORD *)v18 - 1) = v20;
                v4 -= 32;
                v18 -= 32;
              }
              while (v4 != v2);
            }
            int v3 = &v16[32 * v15];
            unint64_t v4 = v17 + 32;
            uint64_t *v23 = v19;
            v23[1] = v17 + 32;
            v23[2] = v3;
            if (v2) {
              operator delete(v2);
            }
            uint64_t v2 = v19;
            this = v23;
          }
          else
          {
            *(_DWORD *)unint64_t v4 = v12;
            *((void *)v4 + 1) = v9;
            *((_DWORD *)v4 + 4) = 0;
            *((_DWORD *)v4 + 5) = v11;
            *((_DWORD *)v4 + 6) = v10;
            v4 += 32;
          }
          this[1] = v4;
        }
      }
      ++v6;
    }
    std::vector<int>::size_type v5 = v22 + 3;
  }
  while (v22 + 3 != v21);
  return this;
}

void sub_1BAE3853C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = *(void **)a12;
  if (*(void *)a12)
  {
    *(void *)(a12 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALB_InstrumentedEvent_RealtimeDuration::getEventIndex(HALB_InstrumentedEvent_RealtimeDuration *this)
{
  return *((void *)this + 2);
}

uint64_t HALB_InstrumentedEvent_RealtimeDuration::getEventID(HALB_InstrumentedEvent_RealtimeDuration *this)
{
  return *((unsigned int *)this + 2);
}

void HALB_InstrumentedEvent_RealtimeDuration::~HALB_InstrumentedEvent_RealtimeDuration(HALB_InstrumentedEvent_RealtimeDuration *this)
{
}

void HALB_RealtimeDuration_Collection::enumSubDurations(uint64_t **a1, uint64_t a2)
{
  if (*(void *)(a2 + 24))
  {
    uint64_t v2 = *a1;
    int v3 = a1[1];
    if (*a1 != v3)
    {
      do
      {
        uint64_t v5 = *v2;
        unint64_t v6 = (std::__shared_weak_count *)v2[1];
        if (v6)
        {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v9 = v6;
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        else
        {
          uint64_t v9 = 0;
        }
        uint64_t v8 = v5;
        uint64_t v7 = *(void *)(a2 + 24);
        if (!v7) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 48))(v7, &v8);
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        v2 += 2;
      }
      while (v2 != v3);
    }
  }
}

void sub_1BAE3865C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void HALS_AHPManager::ObjectsPublishedAndDied(HALS_AHPManager *this, HALS_ObjectMap *a2, int a3, const unsigned int *a4, unsigned int a5, const unsigned int *a6, HALS_Client *a7)
{
  int v12 = this;
  if (a2 == 1)
  {
    HALS_ObjectMap::RetainObject(this, a2);
    uint64_t v13 = v12;
  }
  else
  {
    uint64_t v13 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(a2);
  }
  memset(&v75, 0, sizeof(v75));
  if (a5)
  {
    int v59 = a3;
    uint64_t v60 = a4;
    int v61 = a7;
    unint64_t v62 = v12;
    int v63 = v13;
    uint64_t v14 = 0;
    uint64_t v15 = a5;
    do
    {
      uint64_t v16 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)a6[v14]);
      int v18 = (HALS_ObjectMap *)v16;
      if (v16)
      {
        int v19 = *(_DWORD *)(v16 + 20);
        if (v19 <= 1701078389)
        {
          BOOL v20 = v19 == 1633773415;
          int v21 = 1633969526;
        }
        else
        {
          BOOL v20 = v19 == 1701078390 || v19 == 1701733488;
          int v21 = 1919182198;
        }
        BOOL v22 = v20 || v19 == v21;
        if (v22
          || (int v49 = *(_DWORD *)(v16 + 24), v19 != v49)
          && (v49 <= 1701078389
            ? (v50 = v49 == 1633773415, int v51 = 1633969526)
            : (v49 != 1701078390 ? (v50 = v49 == 1919182198) : (v50 = 1), int v51 = 1701733488),
              !v50 ? (BOOL v52 = v49 == v51) : (BOOL v52 = 1),
              v52))
        {
          unsigned int v23 = a6[v14];
          pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
          if (v23)
          {
            unint64_t v71 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
            LODWORD(v72) = HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
            long long v64 = 0u;
            if (HALS_ObjectMap::sObjectInfoList)
            {
              uint64_t v25 = *(void *)HALS_ObjectMap::sObjectInfoList;
              uint64_t v24 = *(void *)(HALS_ObjectMap::sObjectInfoList + 8);
              if (*(void *)HALS_ObjectMap::sObjectInfoList != v24)
              {
                unint64_t v26 = 0;
                uint64_t v27 = 0;
                long long v64 = 0uLL;
                do
                {
                  if (*(_DWORD *)(*(void *)(v25 + 8) + 28) == v23)
                  {
                    if ((unint64_t)v27 >= v26)
                    {
                      unint64_t v29 = (void *)v64;
                      uint64_t v30 = (uint64_t)((uint64_t)v27 - v64) >> 2;
                      unint64_t v31 = v30 + 1;
                      if ((unint64_t)(v30 + 1) >> 62) {
                        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                      }
                      if ((uint64_t)(v26 - v64) >> 1 > v31) {
                        unint64_t v31 = (uint64_t)(v26 - v64) >> 1;
                      }
                      if (v26 - (unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v32 = v31;
                      }
                      if (v32)
                      {
                        unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v32);
                        uint64_t v27 = (_DWORD *)*((void *)&v64 + 1);
                      }
                      else
                      {
                        uint64_t v33 = 0;
                      }
                      uint64_t v34 = (_DWORD *)(v32 + 4 * v30);
                      *uint64_t v34 = *(_DWORD *)(v25 + 16);
                      uint64_t v28 = v34 + 1;
                      while (v27 != (_DWORD *)v64)
                      {
                        int v35 = *--v27;
                        *--uint64_t v34 = v35;
                      }
                      unint64_t v26 = v32 + 4 * v33;
                      *(void *)&long long v64 = v34;
                      if (v29) {
                        operator delete(v29);
                      }
                    }
                    else
                    {
                      *uint64_t v27 = *(_DWORD *)(v25 + 16);
                      uint64_t v28 = v27 + 1;
                    }
                    *(void *)&long long v36 = v64;
                    *((void *)&v36 + 1) = v28;
                    long long v64 = v36;
                    uint64_t v27 = v28;
                  }
                  v25 += 24;
                }
                while (v25 != v24);
              }
            }
            HALB_Mutex::Locker::~Locker(&v71);
            long long v37 = v64;
          }
          else
          {
            long long v37 = 0uLL;
          }
          uint64_t v38 = (void *)v37;
          std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(&v75, v75.__end_, (char *)v37, *((char **)&v37 + 1), (uint64_t)(*((void *)&v37 + 1) - v37) >> 2);
          if (v38) {
            operator delete(v38);
          }
        }
        std::vector<unsigned int>::pointer end = v75.__end_;
        if (v75.__end_ >= v75.__end_cap_.__value_)
        {
          std::vector<unsigned int>::pointer begin = v75.__begin_;
          int64_t v42 = v75.__end_ - v75.__begin_;
          unint64_t v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 62) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          int64_t v44 = (char *)v75.__end_cap_.__value_ - (char *)v75.__begin_;
          if (((char *)v75.__end_cap_.__value_ - (char *)v75.__begin_) >> 1 > v43) {
            unint64_t v43 = v44 >> 1;
          }
          BOOL v45 = (unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v45) {
            unint64_t v46 = v43;
          }
          if (v46)
          {
            unint64_t v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v46);
            std::vector<unsigned int>::pointer begin = v75.__begin_;
            std::vector<unsigned int>::pointer end = v75.__end_;
          }
          else
          {
            uint64_t v17 = 0;
          }
          __int16 v47 = (unsigned int *)(v46 + 4 * v42);
          *__int16 v47 = a6[v14];
          unint64_t v40 = v47 + 1;
          while (end != begin)
          {
            unsigned int v48 = *--end;
            *--__int16 v47 = v48;
          }
          v75.__begin_ = v47;
          v75.__end_ = v40;
          v75.__end_cap_.__value_ = (unsigned int *)(v46 + 4 * (void)v17);
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          *v75.__end_ = a6[v14];
          unint64_t v40 = end + 1;
        }
        v75.__end_ = v40;
      }
      HALS_ObjectMap::ReleaseObject(v18, v17);
      ++v14;
    }
    while (v14 != v15);
    std::vector<unsigned int>::pointer v53 = v75.__begin_;
    std::vector<unsigned int>::pointer v54 = v75.__end_;
    int v12 = v62;
    uint64_t v13 = v63;
    a4 = v60;
    a7 = v61;
    a3 = v59;
  }
  else
  {
    std::vector<unsigned int>::pointer v54 = 0;
    std::vector<unsigned int>::pointer v53 = 0;
  }
  unint64_t v71 = 0;
  uint64_t v72 = &v71;
  uint64_t v73 = 0x2000000000;
  char v74 = 0;
  v65[0] = MEMORY[0x1E4F143A8];
  v65[1] = 1174405120;
  v65[2] = ___ZN15HALS_AHPManager23ObjectsPublishedAndDiedEjjPKjjS1_P11HALS_Client_block_invoke;
  v65[3] = &unk_1F147A870;
  v65[5] = v12;
  std::vector<int> __p = 0;
  unsigned int v67 = 0;
  uint64_t v68 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v53, (uint64_t)v54, v54 - v53);
  int v70 = a3;
  v65[4] = &v71;
  unsigned int v69 = a4;
  uint64_t v55 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Object *))(*(void *)v12 + 56))(v12);
  HALB_CommandGate::ExecuteCommand(v55, (uint64_t)v65);
  if (*((unsigned char *)v72 + 24))
  {
    long long v56 = (HALS_NotificationManager *)*((unsigned int *)v12 + 4);
    if (a7) {
      uint64_t v57 = *((unsigned int *)a7 + 4);
    }
    else {
      uint64_t v57 = 0;
    }
    *(void *)&v76.AudioObjectPropertySelector mSelector = 0x676C6F6264657623;
    v76.mElement = 0;
    HALS_Object::PropertiesChanged(v12, v56, v57, 1u, &v76);
  }
  if (__p)
  {
    unsigned int v67 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v71, 8);
  if (v75.__begin_)
  {
    v75.__end_ = v75.__begin_;
    operator delete(v75.__begin_);
  }
  HALS_ObjectMap::ReleaseObject(v13, v58);
}

void sub_1BAE38B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, HALS_ObjectMap *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v34 = v29;
  if (__p) {
    operator delete(__p);
  }
  _Block_object_dispose(&a29, 8);
  uint64_t v33 = *(void **)(v30 - 128);
  if (v33)
  {
    *(void *)(v30 - 120) = v33;
    operator delete(v33);
  }
  HALS_ObjectMap::ReleaseObject(v34, v32);
  _Unwind_Resume(a1);
}

void ___ZN15HALS_AHPManager23ObjectsPublishedAndDiedEjjPKjjS1_P11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = *(__int32 **)(a1 + 48);
  for (uint64_t i = *(__int32 **)(a1 + 56); v2 != i; ++v2)
  {
    uint64_t v5 = *(__int32 **)(v3 + 440);
    unint64_t v6 = wmemchr(*(__int32 **)(v3 + 432), *v2, ((uint64_t)v5 - *(void *)(v3 + 432)) >> 2);
    if (v6) {
      uint64_t v5 = v6;
    }
    uint64_t v7 = *(__int32 **)(v3 + 440);
    if (v5 != v7)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      int64_t v8 = (char *)v7 - (char *)(v5 + 1);
      if (v7 != v5 + 1) {
        memmove(v5, v5 + 1, (char *)v7 - (char *)(v5 + 1));
      }
      *(void *)(v3 + 440) = (char *)v5 + v8;
    }
    uint64_t v9 = *(__int32 **)(v3 + 416);
    int v10 = wmemchr(*(__int32 **)(v3 + 408), *v2, ((uint64_t)v9 - *(void *)(v3 + 408)) >> 2);
    if (v10) {
      uint64_t v9 = v10;
    }
    int v11 = *(__int32 **)(v3 + 416);
    if (v9 != v11)
    {
      int64_t v12 = (char *)v11 - (char *)(v9 + 1);
      if (v11 != v9 + 1) {
        memmove(v9, v9 + 1, (char *)v11 - (char *)(v9 + 1));
      }
      *(void *)(v3 + 416) = (char *)v9 + v12;
    }
    uint64_t v13 = *(__int32 **)(v3 + 392);
    uint64_t v14 = wmemchr(*(__int32 **)(v3 + 384), *v2, ((uint64_t)v13 - *(void *)(v3 + 384)) >> 2);
    if (v14) {
      uint64_t v13 = v14;
    }
    uint64_t v15 = *(__int32 **)(v3 + 392);
    if (v13 != v15)
    {
      int64_t v16 = (char *)v15 - (char *)(v13 + 1);
      if (v15 != v13 + 1) {
        memmove(v13, v13 + 1, (char *)v15 - (char *)(v13 + 1));
      }
      *(void *)(v3 + 392) = (char *)v13 + v16;
    }
    uint64_t v17 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v2);
    int v19 = (HALS_ObjectMap *)v17;
    if (v17)
    {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      HALS_ObjectMap::ObjectIsDead(v19, v20);
    }
    HALS_ObjectMap::ReleaseObject(v19, v18);
  }
  if (*(_DWORD *)(a1 + 80))
  {
    uint64_t v21 = 0;
    while (1)
    {
      BOOL v22 = (HALS_ObjectMap *)*(unsigned int *)(*(void *)(a1 + 72) + 4 * v21);
      unsigned int v23 = *(__int32 **)(v3 + 416);
      uint64_t v24 = wmemchr(*(__int32 **)(v3 + 408), *(_DWORD *)(*(void *)(a1 + 72) + 4 * v21), ((uint64_t)v23 - *(void *)(v3 + 408)) >> 2);
      if (v24) {
        unsigned int v23 = v24;
      }
      uint64_t v25 = *(__int32 **)(v3 + 416);
      if (v23 == v25) {
        goto LABEL_63;
      }
      int64_t v26 = (char *)v25 - (char *)(v23 + 1);
      if (v25 != v23 + 1) {
        memmove(v23, v23 + 1, (char *)v25 - (char *)(v23 + 1));
      }
      *(void *)(v3 + 416) = (char *)v23 + v26;
      uint64_t v27 = HALS_ObjectMap::CopyObjectByObjectID(v22);
      unint64_t v29 = (HALS_ObjectMap *)v27;
      if (v27) {
        break;
      }
LABEL_62:
      HALS_ObjectMap::ReleaseObject(v29, v28);
LABEL_63:
      if (++v21 >= (unint64_t)*(unsigned int *)(a1 + 80)) {
        return;
      }
    }
    int v30 = *(_DWORD *)(v27 + 20);
    if (v30 <= 1701078389)
    {
      if (v30 == 1633773415 || v30 == 1633969526) {
        goto LABEL_45;
      }
    }
    else if (v30 == 1701078390 || v30 == 1701733488 || v30 == 1919182198)
    {
      goto LABEL_45;
    }
    int v46 = *(_DWORD *)(v27 + 24);
    if (v30 == v46)
    {
LABEL_61:
      (**(void (***)(HALS_ObjectMap *))v29)(v29);
      goto LABEL_62;
    }
    if (v46 <= 1701078389)
    {
      if (v46 != 1633773415 && v46 != 1633969526) {
        goto LABEL_61;
      }
    }
    else if (v46 != 1701078390 && v46 != 1919182198 && v46 != 1701733488)
    {
      goto LABEL_61;
    }
LABEL_45:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    int v35 = *(char **)(v3 + 440);
    unint64_t v34 = *(void *)(v3 + 448);
    if ((unint64_t)v35 >= v34)
    {
      long long v37 = *(char **)(v3 + 432);
      uint64_t v38 = (v35 - v37) >> 2;
      unint64_t v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 62) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v40 = v34 - (void)v37;
      if (v40 >> 1 > v39) {
        unint64_t v39 = v40 >> 1;
      }
      BOOL v41 = (unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v41) {
        unint64_t v42 = v39;
      }
      if (v42)
      {
        unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v42);
        long long v37 = *(char **)(v3 + 432);
        int v35 = *(char **)(v3 + 440);
      }
      else
      {
        uint64_t v43 = 0;
      }
      int64_t v44 = (_DWORD *)(v42 + 4 * v38);
      _DWORD *v44 = v22;
      long long v36 = v44 + 1;
      while (v35 != v37)
      {
        int v45 = *((_DWORD *)v35 - 1);
        v35 -= 4;
        *--int64_t v44 = v45;
      }
      *(void *)(v3 + 432) = v44;
      *(void *)(v3 + 440) = v36;
      *(void *)(v3 + 448) = v42 + 4 * v43;
      if (v37) {
        operator delete(v37);
      }
    }
    else
    {
      *(_DWORD *)int v35 = v22;
      long long v36 = v35 + 4;
    }
    *(void *)(v3 + 440) = v36;
    goto LABEL_61;
  }
}

void sub_1BAE38FD4(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void HALS_AHPManager::CreateObject(HALS_AHPManager *this, HALS_Object *a2, HALS_ObjectMap *a3, HALS_Client *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a3 == 1)
  {
    HALS_ObjectMap::RetainObject(this, a2);
    unint64_t v6 = this;
  }
  else
  {
    unint64_t v6 = (HALS_AHPManager *)HALS_ObjectMap::CopyObjectByObjectID(a3);
  }
  if ((int)a2 > 1701078389)
  {
    if (a2 != 1701078390 && a2 != 1919182198 && a2 != 1701733488) {
      goto LABEL_16;
    }
  }
  else if (a2 != 1633773415 && a2 != 1633969526)
  {
    if (a2 == 1634956402)
    {
      int v7 = *((_DWORD *)v6 + 5);
      if (v7 <= 1701078389)
      {
        if (v7 == 1633773415) {
          goto LABEL_25;
        }
        int v8 = 1633969526;
      }
      else
      {
        if (v7 == 1701078390 || v7 == 1701733488) {
          goto LABEL_25;
        }
        int v8 = 1919182198;
      }
      if (v7 == v8) {
        goto LABEL_25;
      }
      int v11 = *((_DWORD *)v6 + 6);
      if (v7 == v11) {
        goto LABEL_43;
      }
      if (v11 <= 1701078389)
      {
        if (v11 == 1633773415) {
          goto LABEL_25;
        }
        int v12 = 1633969526;
      }
      else
      {
        if (v11 == 1701078390 || v11 == 1701733488) {
          goto LABEL_25;
        }
        int v12 = 1919182198;
      }
      if (v11 != v12)
      {
LABEL_43:
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_51;
        }
        *(_DWORD *)std::string buf = 136315394;
        int v19 = "HALS_AHPManager.cpp";
        __int16 v20 = 1024;
        int v21 = 257;
        uint64_t v15 = MEMORY[0x1E4F14500];
        int64_t v16 = "%25s:%-5d  HALS_AHPManager::CreateObject: a stream needs to be owned by a device";
        goto LABEL_50;
      }
LABEL_25:
      operator new();
    }
LABEL_16:
    if (!HALB_Info::IsSubClass(a2, 1633907820)) {
      operator new();
    }
    int v9 = *((_DWORD *)v6 + 5);
    if (v9 <= 1701078389)
    {
      if (v9 == 1633773415) {
        goto LABEL_29;
      }
      int v10 = 1633969526;
    }
    else
    {
      if (v9 == 1701078390 || v9 == 1701733488) {
        goto LABEL_29;
      }
      int v10 = 1919182198;
    }
    if (v9 == v10) {
      goto LABEL_29;
    }
    int v13 = *((_DWORD *)v6 + 6);
    if (v9 == v13)
    {
LABEL_48:
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_51;
      }
      *(_DWORD *)std::string buf = 136315394;
      int v19 = "HALS_AHPManager.cpp";
      __int16 v20 = 1024;
      int v21 = 262;
      uint64_t v15 = MEMORY[0x1E4F14500];
      int64_t v16 = "%25s:%-5d  HALS_AHPManager::CreateObject: a control needs to be owned by a device";
LABEL_50:
      _os_log_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_ERROR, v16, buf, 0x12u);
LABEL_51:
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = 560947818;
    }
    if (v13 <= 1701078389)
    {
      if (v13 == 1633773415) {
        goto LABEL_29;
      }
      int v14 = 1633969526;
    }
    else
    {
      if (v13 == 1701078390 || v13 == 1701733488) {
        goto LABEL_29;
      }
      int v14 = 1919182198;
    }
    if (v13 != v14) {
      goto LABEL_48;
    }
LABEL_29:
    operator new();
  }
  operator new();
}

void sub_1BAE395B4(_Unwind_Exception *a1)
{
  MEMORY[0x1C1859840](v2, 0x10E1C40337F670ALL);
  HALS_ObjectMap::ReleaseObject(v1, v4);
  _Unwind_Resume(a1);
}

void ___ZN15HALS_AHPManager12CreateObjectEjjP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  unint64_t v4 = (char *)v2[49];
  unint64_t v3 = v2[50];
  if ((unint64_t)v4 >= v3)
  {
    unint64_t v6 = (char *)v2[48];
    uint64_t v7 = (v4 - v6) >> 2;
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 62) {
      goto LABEL_32;
    }
    uint64_t v9 = v3 - (void)v6;
    if (v9 >> 1 > v8) {
      unint64_t v8 = v9 >> 1;
    }
    BOOL v10 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v10) {
      unint64_t v11 = v8;
    }
    if (v11)
    {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v11);
      unint64_t v6 = (char *)v2[48];
      unint64_t v4 = (char *)v2[49];
    }
    else
    {
      uint64_t v12 = 0;
    }
    int v13 = (_DWORD *)(v11 + 4 * v7);
    unint64_t v14 = v11 + 4 * v12;
    *int v13 = *(_DWORD *)(a1 + 40);
    uint64_t v5 = v13 + 1;
    while (v4 != v6)
    {
      int v15 = *((_DWORD *)v4 - 1);
      v4 -= 4;
      *--int v13 = v15;
    }
    v2[48] = v13;
    v2[49] = v5;
    v2[50] = v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v4 = *(_DWORD *)(a1 + 40);
    uint64_t v5 = v4 + 4;
  }
  v2[49] = v5;
  uint64_t v17 = (char *)v2[52];
  unint64_t v16 = v2[53];
  if ((unint64_t)v17 < v16)
  {
    *(_DWORD *)uint64_t v17 = *(_DWORD *)(a1 + 40);
    int v18 = v17 + 4;
    goto LABEL_31;
  }
  int v19 = (char *)v2[51];
  uint64_t v20 = (v17 - v19) >> 2;
  unint64_t v21 = v20 + 1;
  if ((unint64_t)(v20 + 1) >> 62) {
LABEL_32:
  }
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  uint64_t v22 = v16 - (void)v19;
  if (v22 >> 1 > v21) {
    unint64_t v21 = v22 >> 1;
  }
  BOOL v10 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL;
  unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
  if (!v10) {
    unint64_t v23 = v21;
  }
  if (v23)
  {
    unint64_t v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v23);
    int v19 = (char *)v2[51];
    uint64_t v17 = (char *)v2[52];
  }
  else
  {
    uint64_t v24 = 0;
  }
  uint64_t v25 = (_DWORD *)(v23 + 4 * v20);
  unint64_t v26 = v23 + 4 * v24;
  *uint64_t v25 = *(_DWORD *)(a1 + 40);
  int v18 = v25 + 1;
  while (v17 != v19)
  {
    int v27 = *((_DWORD *)v17 - 1);
    v17 -= 4;
    *--uint64_t v25 = v27;
  }
  v2[51] = v25;
  v2[52] = v18;
  v2[53] = v26;
  if (v19) {
    operator delete(v19);
  }
LABEL_31:
  v2[52] = v18;
}

void HALS_AHPManager::_CopyDeviceList(HALS_AHPManager *this, HALS_DeviceManager::BasicDeviceList *a2)
{
  uint64_t v2 = (unsigned int *)*((void *)this + 54);
  for (uint64_t i = (unsigned int *)*((void *)this + 55); v2 != i; ++v2)
  {
    uint64_t v5 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v2);
    uint64_t v7 = v5;
    if (v5)
    {
      HALS_ObjectMap::RetainObject(v5, v6);
      uint64_t v9 = (HALS_ObjectMap **)*((void *)a2 + 1);
      unint64_t v8 = *((void *)a2 + 2);
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v11 = ((uint64_t)v9 - *(void *)a2) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v8 - *(void *)a2;
        uint64_t v13 = v12 >> 2;
        if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
          uint64_t v13 = v11 + 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v14);
        }
        else {
          unint64_t v6 = 0;
        }
        int v15 = (HALS_ObjectMap **)(v14 + 8 * v11);
        *int v15 = v7;
        BOOL v10 = v15 + 1;
        uint64_t v17 = *(char **)a2;
        unint64_t v16 = (char *)*((void *)a2 + 1);
        if (v16 != *(char **)a2)
        {
          do
          {
            int v18 = (HALS_ObjectMap *)*((void *)v16 - 1);
            v16 -= 8;
            *--int v15 = v18;
          }
          while (v16 != v17);
          unint64_t v16 = *(char **)a2;
        }
        *(void *)a2 = v15;
        *((void *)a2 + 1) = v10;
        *((void *)a2 + 2) = v14 + 8 * (void)v6;
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *uint64_t v9 = v7;
        BOOL v10 = v9 + 1;
      }
      *((void *)a2 + 1) = v10;
    }
    HALS_ObjectMap::ReleaseObject(v7, v6);
  }
}

void sub_1BAE398E4(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_AHPManager::SetPropertyData(HALS_AHPPlugIn **this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  if (((*((uint64_t (**)(HALS_AHPPlugIn **, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))*this
         + 12))(this, a2, a3, a8) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  int v15 = this[47];

  return HALS_AHPPlugIn::ObjectSetPropertyData(v15, a2, a3, a6, a7, a4, a5);
}

void HALS_AHPManager::GetPropertyData(HALS_AHPPlugIn **this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, uint64_t *a6, uint64_t a7, const __CFString **a8, HALS_Client *a9)
{
  if (((*((uint64_t (**)(HALS_AHPPlugIn **, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))*this + 11))(this, a2, a3, a9) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1870098019)
  {
    BOOL v18 = mSelector == 1870098020 || mSelector == 1937007734;
    int v19 = 1885956452;
  }
  else
  {
    BOOL v18 = mSelector == 1650682995 || mSelector == 1668047219;
    int v19 = 1869638759;
  }
  if (v18 || mSelector == v19)
  {
    HALS_DeviceManager::GetPropertyData((HALS_DeviceManager *)this, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    *a5 = a4;
    unint64_t v21 = this[47];
    HALS_AHPPlugIn::ObjectGetPropertyData(v21, a2, a3, a7, a8, a5, a6);
  }
}

uint64_t HALS_AHPManager::GetPropertyDataSize(HALS_AHPPlugIn **this, HALS_Client *a2, AudioObjectPropertyAddress *a3, uint64_t a4, _DWORD *a5, HALS_Client *a6)
{
  if (((*((uint64_t (**)(HALS_AHPPlugIn **, HALS_Client *, AudioObjectPropertyAddress *, HALS_Client *))*this
         + 11))(this, a2, a3, a6) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1870098019)
  {
    BOOL v13 = mSelector == 1870098020 || mSelector == 1937007734;
    int v14 = 1885956452;
  }
  else
  {
    BOOL v13 = mSelector == 1650682995 || mSelector == 1668047219;
    int v14 = 1869638759;
  }
  if (v13 || mSelector == v14)
  {
    return HALS_DeviceManager::GetPropertyDataSize((HALS_DeviceManager *)this, a2, a3, a4, a5, a6);
  }
  else
  {
    uint64_t v17 = this[47];
    return HALS_AHPPlugIn::ObjectGetPropertyDataSize(v17, (uint64_t)a2, a3, a4, a5);
  }
}

uint64_t HALS_AHPManager::IsPropertySettable(HALS_AHPPlugIn **this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  if (((*((uint64_t (**)(HALS_AHPPlugIn **))*this + 11))(this) & 1) == 0)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1870098019)
  {
    BOOL v8 = mSelector == 1870098020 || mSelector == 1937007734;
    int v9 = 1885956452;
  }
  else
  {
    BOOL v8 = mSelector == 1650682995 || mSelector == 1668047219;
    int v9 = 1869638759;
  }
  if (v8 || mSelector == v9)
  {
    return HALS_DeviceManager::IsPropertySettable((uint64_t)this, a2, (int *)a3);
  }
  else
  {
    uint64_t v12 = this[47];
    return HALS_AHPPlugIn::ObjectIsPropertySettable(v12, a2, a3);
  }
}

BOOL HALS_AHPManager::HasProperty(HALS_AHPManager *this, HALS_Client *a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1870098019)
  {
    BOOL v5 = mSelector == 1870098020 || mSelector == 1937007734;
    int v6 = 1885956452;
  }
  else
  {
    BOOL v5 = mSelector == 1650682995 || mSelector == 1668047219;
    int v6 = 1869638759;
  }
  if (!v5 && mSelector != v6) {
    return (*(unsigned int (**)(void))(**((void **)this + 47) + 184))(*((void *)this + 47)) != 0;
  }

  return HALS_DeviceManager::HasProperty(this, a2, a3, a4);
}

uint64_t HALS_AHPManager::GetMIGDispatchQueue(HALS_AHPManager *this)
{
  return *((void *)this + 42);
}

{
  return *((void *)this + 42);
}

uint64_t HALS_AHPManager::_Deactivate(HALS_AHPManager *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 47) + 40))(*((void *)this + 47));
  *((_DWORD *)this + 2) = 0;
  return result;
}

void HALS_AHPManager::~HALS_AHPManager(HALS_AHPManager *this)
{
  HALS_AHPManager::~HALS_AHPManager(this);

  JUMPOUT(0x1C1859840);
}

{
  HALB_Mutex *v2;
  AMCP::Utility::Dispatch_Queue *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1F147A738;
  uint64_t v2 = (HALB_Mutex *)*((void *)this + 41);
  if (v2)
  {
    HALB_Mutex::~HALB_Mutex(v2);
    MEMORY[0x1C1859840]();
  }
  unint64_t v3 = (AMCP::Utility::Dispatch_Queue *)*((void *)this + 42);
  if (v3)
  {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v3);
    MEMORY[0x1C1859840]();
  }
  unint64_t v4 = (void *)*((void *)this + 54);
  if (v4)
  {
    *((void *)this + 55) = v4;
    operator delete(v4);
  }
  BOOL v5 = (void *)*((void *)this + 51);
  if (v5)
  {
    *((void *)this + 52) = v5;
    operator delete(v5);
  }
  int v6 = (void *)*((void *)this + 48);
  if (v6)
  {
    *((void *)this + 49) = v6;
    operator delete(v6);
  }
  HALS_AHPPlugIn::~HALS_AHPPlugIn((HALS_AHPManager *)((char *)this + 344));
  *(void *)this = &unk_1F14725F8;
  CACFString::~CACFString((HALS_AHPManager *)((char *)this + 48));

  HALS_Object::~HALS_Object(this);
}

uint64_t HALS_AHPManager::Activate(HALS_AHPManager *this, HALS_Object *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  HALS_Object::Activate(this, a2);
  uint64_t result = (*(uint64_t (**)(void, void))(**((void **)this + 47) + 168))(*((void *)this + 47), *((unsigned int *)this + 4));
  if (result)
  {
    v6[0] = BYTE3(result);
    v6[1] = BYTE2(result);
    uint64_t v6[2] = BYTE1(result);
    int v4 = result;
    v6[3] = result;
    v6[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315906;
      BOOL v8 = "HALS_AHPPlugIn.cpp";
      __int16 v9 = 1024;
      int v10 = 80;
      __int16 v11 = 1024;
      int v12 = v4;
      __int16 v13 = 2080;
      int v14 = v6;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_AHPPlugIn::Initialize: got an error from the plug-in routine, Error: %d (%s)", buf, 0x22u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v4;
  }
  return result;
}

uint64_t IOContextViewForIOPerformer::mute_state(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 8) + a2 + 1378);
}

uint64_t IOContextViewForIOPerformer::hosted_dsp(IOContextViewForIOPerformer *this)
{
  return *((void *)this + 1) + 2080;
}

uint64_t IOContextViewForIOPerformer::now_time(IOContextViewForIOPerformer *this)
{
  return *((void *)this + 1) + 1104;
}

uint64_t IOContextViewForIOPerformer::output_time(IOContextViewForIOPerformer *this)
{
  return *((void *)this + 1) + 1232;
}

uint64_t IOContextViewForIOPerformer::input_time(IOContextViewForIOPerformer *this)
{
  return *((void *)this + 1) + 1168;
}

uint64_t IOContextViewForIOPerformer::context(IOContextViewForIOPerformer *this)
{
  return *(void *)(*((void *)this + 1) + 24);
}

uint64_t IOContextViewForIOPerformer::tap_input_is_enabled(IOContextViewForIOPerformer *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 1377);
}

uint64_t IOContextViewForIOPerformer::mic_input_is_enabled(IOContextViewForIOPerformer *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 1376);
}

uint64_t IOContextViewForIOPerformer::owning_device_id(IOContextViewForIOPerformer *this)
{
  return *(unsigned int *)(*((void *)this + 1) + 1512);
}

uint64_t IOContextViewForIOPerformer::owner_object_id(IOContextViewForIOPerformer *this)
{
  return *(unsigned int *)(*(void *)(*((void *)this + 1) + 24) + 16);
}

uint64_t IOContextViewForIOPerformer::update_output_rate_scalar_for_taps(uint64_t this, double a2)
{
  uint64_t v2 = *(void *)(this + 8);
  for (uint64_t i = *(uint64_t **)(v2 + 1992); i; uint64_t i = (uint64_t *)*i)
  {
    if (*((unsigned char *)i + 40))
    {
      uint64_t v5 = i[3];
      unsigned int v6 = *(_DWORD *)(*(void *)(v2 + 24) + 16);
      uint64_t v12 = v5 + 152;
      BOOL v7 = std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)(v5 + 152));
      BOOL v13 = v7;
      if (v7)
      {
        HALS_MultiTap::fetch_writer_state((HALS_MultiTap *)&v10, v5, v6);
        uint64_t v8 = v10;
        if (v10)
        {
          os_unfair_lock_lock((os_unfair_lock_t)(v5 + 120));
          double v9 = *(double *)(v5 + 144);
          os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 120));
          (*(void (**)(void, double, double))(**(void **)(v8 + 128) + 32))(*(void *)(v8 + 128), a2, v9);
        }
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
      }
      this = std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v12);
    }
  }
  return this;
}

uint64_t IOContextViewForIOPerformer::dsp_is_enabled(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  BOOL v3 = (a2 & 0xFF00000000) == 0;
  if (a2 == 1869968496) {
    BOOL v3 = 1;
  }
  if ((a2 & 0xFF00000000) == 0 || a2 == 1768845428)
  {
    BOOL v4 = *(void *)(v2 + 1856) != 0;
    if (!v3) {
      goto LABEL_6;
    }
LABEL_8:
    BOOL v5 = *(void *)(v2 + 1888) != 0;
    return v5 | v4;
  }
  BOOL v4 = 0;
  if (v3) {
    goto LABEL_8;
  }
LABEL_6:
  BOOL v5 = 0;
  return v5 | v4;
}

BOOL IOContextViewForIOPerformer::has_active_streams(IOContextViewForIOPerformer *this, int a2)
{
  return HALS_IOContextDescription::GetNumberActiveStreams((HALS_IOContextDescription *)(*((void *)this + 1) + 1496), a2) != 0;
}

uint64_t IOContextViewForIOPerformer::io_cycle_counter(IOContextViewForIOPerformer *this)
{
  return *(unsigned int *)(*((void *)this + 1) + 1304);
}

float IOContextViewForIOPerformer::io_cycle_usage(IOContextViewForIOPerformer *this)
{
  return *(float *)(*((void *)this + 1) + 1328);
}

BOOL IOContextViewForIOPerformer::reference_stream_only_engine_state_is_running_and_anchored(IOContextViewForIOPerformer *this)
{
  unsigned int v1 = atomic_load((unsigned int *)(*((void *)this + 1) + 1464));
  return v1 == 2;
}

double IOContextViewForIOPerformer::master_engine_nominal_host_ticks_per_frame(IOContextViewForIOPerformer *this)
{
  return *(double *)(*(void *)(*(void *)(*((void *)this + 1) + 1520) + 288) + 112);
}

double IOContextViewForIOPerformer::master_engine_actual_host_ticks_per_frame(IOContextViewForIOPerformer *this)
{
  uint64_t v1 = *(void *)(*(void *)(*((void *)this + 1) + 1520) + 288);
  return *(double *)(v1 + 40 * *(unsigned int *)(v1 + 192) + 200);
}

void IOContextViewForIOPerformer::~IOContextViewForIOPerformer(IOContextViewForIOPerformer *this)
{
}

uint64_t HALS_IOContext_Legacy_Impl::HandleClientTimeout(uint64_t this, int a2)
{
  if (a2)
  {
    if (!*(unsigned char *)(this + 2032))
    {
      *(unsigned char *)(this + 2032) = 1;
      *(void *)(this + 2040) = *(unsigned int *)(this + 1304);
    }
  }
  else if (*(unsigned char *)(this + 2032))
  {
    *(unsigned char *)(this + 2032) = 0;
    *(void *)(this + 2048) = *(unsigned int *)(this + 1304);
  }
  return this;
}

void HALS_IOContext_Legacy_Impl::Stop_DeactivateDSP(HALS_IOContext_Legacy_Impl *this)
{
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = ___ZN26HALS_IOContext_Legacy_Impl18Stop_DeactivateDSPEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_69_12249;
  void v2[4] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(void))(**((void **)this + 3) + 56))(*((void *)this + 3));
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v2);
}

void ___ZN26HALS_IOContext_Legacy_Impl18Stop_DeactivateDSPEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v7 = v1 + 312;
  int v8 = HALB_Mutex::Lock((HALB_Mutex *)(v1 + 328));
  uint64_t v2 = *(uint64_t **)(v1 + 2080);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  while (v3 != v4)
  {
    uint64_t v5 = *(void *)(v3 + 16);
    uint64_t v6 = *(void *)(v5 + 304);
    if (v6) {
      std::function<void ()>::operator()(v6, *(_DWORD *)(v5 + 316));
    }
    v3 += 24;
  }
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v7);
}

void sub_1BAE3A5A0(void *a1)
{
}

BOOL HALS_IOContext_Legacy_Impl::Start_ActivateDSP(uint64_t **this)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)this[236] | (unint64_t)this[232])
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v2 = **(NSObject ***)buf;
    if ((void)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v43);
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = pthread_self();
      mach_port_t v4 = pthread_mach_thread_np(v3);
      int v5 = *((_DWORD *)this[3] + 4);
      HALS_IOContextDescription::HostedDSPDescription::DebugString_DSPTypes((HALS_IOContextDescription::HostedDSPDescription *)&__p, (uint64_t)(this + 219));
      uint64_t v6 = v40 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)std::string buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v4;
      LOWORD(v43) = 2080;
      *(void *)((char *)&v43 + 2) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD5(v43) = 1024;
      HIDWORD(v43) = 5838;
      __int16 v44 = 1024;
      int v45 = v5;
      __int16 v46 = 2080;
      __int16 v47 = v6;
      _os_log_impl(&dword_1BAA78000, v2, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d HALS_IOContext_Legacy_Impl::Start_ActivateDSP [hal_dsp] (Context ID: %d) - HOSTED DSP ENABLED %s", buf, 0x28u);
      if (SHIBYTE(v40) < 0) {
        operator delete(__p);
      }
    }
    uint64_t v7 = this[3];
    int v8 = *(_DWORD *)v7[8];
    int v9 = *((_DWORD *)v7 + 4);
    v48[0] = 0;
    v48[1] = 0;
    *(void *)std::string buf = 0;
    long long v43 = 0uLL;
    __int16 v44 = 0;
    __int16 v47 = (void **)v48;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    int v52 = v8;
    int v53 = v9;
    std::vector<int> __p = 0;
    p_p = &__p;
    uint64_t v40 = 0x2000000000;
    int v41 = 0;
    uint64_t v34 = 0;
    int v35 = &v34;
    uint64_t v36 = 0x2000000000;
    long long v37 = buf;
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 0x40000000;
    v33[2] = ___ZN26HALS_IOContext_Legacy_Impl17Start_ActivateDSPEv_block_invoke;
    void v33[3] = &unk_1E62352B8;
    v33[5] = &v34;
    v33[6] = this;
    void v33[4] = &__p;
    uint64_t v10 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t *))(*v7 + 56))(v7);
    HALB_CommandGate::ExecuteCommand(v10, (uint64_t)v33);
    if (*((_DWORD *)p_p + 6))
    {
      BOOL v11 = 0;
LABEL_31:
      v27[0] = MEMORY[0x1E4F143A8];
      v27[1] = 0x40000000;
      v27[2] = ___ZN26HALS_IOContext_Legacy_Impl17Start_ActivateDSPEv_block_invoke_2;
      v27[3] = &__block_descriptor_tmp_68_12258;
      v27[4] = this;
      uint64_t v22 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t *))(*this[3] + 56))(this[3]);
      HALB_CommandGate::ExecuteCommand(v22, (uint64_t)v27);
      _Block_object_dispose(&v34, 8);
      _Block_object_dispose(&__p, 8);
      HALS_MutationChangeSynchronizer::~HALS_MutationChangeSynchronizer((HALS_MutationChangeSynchronizer *)buf);
      return v11;
    }
    HALS_MutationChangeSynchronizer::Wait(*(atomic_uint ***)buf, (HALS_MutationChangeSynchronizer *)v43);
    int v13 = *((_DWORD *)p_p + 6);
    BOOL v11 = v13 == 0;
    if (*(unsigned __int8 *)(v35[3] + 25) | v13)
    {
      if (!*(unsigned char *)(v35[3] + 25)) {
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v29 = 0;
      int v30 = &v29;
      uint64_t v31 = 0x2000000000;
      int v32 = 0;
      v28[0] = MEMORY[0x1E4F143A8];
      v28[1] = 0x40000000;
      v28[2] = ___ZN26HALS_IOContext_Legacy_Impl17Start_ActivateDSPEv_block_invoke_66;
      v28[3] = &unk_1E62352E0;
      v28[4] = &v29;
      CFTypeRef v28[5] = &v34;
      v28[6] = this;
      int v14 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t *))(*this[3] + 56))(this[3]);
      HALB_CommandGate::ExecuteCommand(v14, (uint64_t)v28);
      int v15 = *((_DWORD *)v30 + 6);
      _Block_object_dispose(&v29, 8);
      if (v15 != 1685285985)
      {
        BOOL v11 = 1;
        goto LABEL_31;
      }
    }
    unint64_t v16 = this[260];
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    if (v18 != v17)
    {
      uint64_t v19 = v18 + 24;
      do
      {
        BOOL v20 = *(_DWORD *)(v19 - 24) == 1768845428 || v19 == v17;
        v19 += 24;
      }
      while (!v20);
    }
    pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
    unsigned __int8 v21 = atomic_load((unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 32));
    if (v21) {
      atomic_store(1u, (unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 33));
    }
    operator new();
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  uint64_t v12 = **(NSObject ***)buf;
  if ((void)v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v43);
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v24 = pthread_self();
    mach_port_t v25 = pthread_mach_thread_np(v24);
    int v26 = *((_DWORD *)this[3] + 4);
    *(_DWORD *)std::string buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v25;
    LOWORD(v43) = 2080;
    *(void *)((char *)&v43 + 2) = "HALS_IOContext_Legacy_Impl.cpp";
    WORD5(v43) = 1024;
    HIDWORD(v43) = 5832;
    __int16 v44 = 1024;
    int v45 = v26;
    _os_log_debug_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_Legacy_Impl::Start_ActivateDSP [hal_dsp] >>>> (Context ID: %d) - HOSTED DSP IS NOT ENABLED <<<<", buf, 0x1Eu);
  }
  return 0;
}

void sub_1BAE3AB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN26HALS_IOContext_Legacy_Impl17Start_ActivateDSPEv_block_invoke(void *a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[6];
  uint64_t v23 = v2 + 312;
  int v24 = HALB_Mutex::Lock((HALB_Mutex *)(v2 + 328));
  uint64_t v3 = (uint64_t *)(v2 + 1496);
  HALS_IOContextHostedDSP::Initialize(*(HALS_IOContextHostedDSP **)(v2 + 2080), (HALS_IOContextDescription *)(v2 + 1496), **(_DWORD **)(*(void *)(v2 + 24) + 64), *(_DWORD *)(*(void *)(v2 + 24) + 16));
  mach_port_t v4 = *(unsigned char **)(v2 + 2080);
  int v5 = *(_DWORD *)(v2 + 1320);
  uint64_t v6 = *(HALS_MutationChangeSynchronizer **)(*(void *)(a1[5] + 8) + 24);
  uint64_t v7 = HALS_IOContextHostedDSP::Negotiate_Internal(v4, v3, v5, (uint64_t)v6, 1);
  int v8 = v7;
  if (v7 == 1685287013)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    int v9 = *buf;
    if (*(void *)buf_8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)buf_8);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v19 = pthread_self();
      mach_port_t v20 = pthread_mach_thread_np(v19);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v20;
      *(_WORD *)buf_8 = 2080;
      *(void *)&buf_8[2] = "HALS_IOContextHostedDSP.cpp";
      *(_WORD *)&buf_8[10] = 1024;
      *(_DWORD *)&buf_8[12] = 996;
      _os_log_debug_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Attempting to negotiate 'bypass' with hosted DSP.", (uint8_t *)&buf, 0x18u);
    }
    int v10 = HALS_IOContextHostedDSP::Negotiate_Internal(v4, v3, v5, (uint64_t)v6, 5);
    std::string buf = 0;
    memset(&buf_8[8], 0, 32);
    *(void *)buf_8 = &buf_8[8];
    *(_OWORD *)std::vector<int> __p = 0u;
    long long v29 = 0u;
    HALS_MutationChangeSynchronizer::SetItinerary(v6, (const MutationItinerary *)&buf);
    if (v10) {
      int v8 = v10;
    }
    else {
      int v8 = 1685283449;
    }
    if (__p[1])
    {
      *(void **)&long long v29 = __p[1];
      operator delete(__p[1]);
    }
    mach_port_t v25 = (void **)&buf_8[24];
    std::vector<MutationItinerary::Device>::__destroy_vector::operator()[abi:ne180100](&v25);
    std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(*(void **)&buf_8[8]);
  }
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = v8;
  if (!*(_DWORD *)(*(void *)(a1[4] + 8) + 24))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    BOOL v11 = *buf;
    if (*(void *)buf_8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)buf_8);
    }
    uint64_t v7 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      unsigned __int8 v21 = pthread_self();
      mach_port_t v22 = pthread_mach_thread_np(v21);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v22;
      *(_WORD *)buf_8 = 2080;
      *(void *)&buf_8[2] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&buf_8[10] = 1024;
      *(_DWORD *)&buf_8[12] = 5854;
      _os_log_debug_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Start DSP - Negotiate ok.", (uint8_t *)&buf, 0x18u);
    }
  }
  int v12 = *(_DWORD *)(*(void *)(a1[4] + 8) + 24);
  if (v12 == 1685283449)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    unint64_t v16 = *buf;
    if (*(void *)buf_8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)buf_8);
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = pthread_self();
      mach_port_t v18 = pthread_mach_thread_np(v17);
      LODWORD(buf) = 67109891;
      HIDWORD(buf) = v18;
      *(_WORD *)buf_8 = 2080;
      *(void *)&buf_8[2] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&buf_8[10] = 1024;
      *(_DWORD *)&buf_8[12] = 5861;
      *(_WORD *)&buf_8[16] = 2081;
      *(void *)&buf_8[18] = "[hal_dsp] Start DSP - Negotiated for BYPASS.";
      _os_log_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d %{private}s", (uint8_t *)&buf, 0x22u);
    }
    goto LABEL_27;
  }
  if (v12 == 1685287789)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    int v13 = *buf;
    if (*(void *)buf_8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)buf_8);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      int v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v15;
      *(_WORD *)buf_8 = 2080;
      *(void *)&buf_8[2] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&buf_8[10] = 1024;
      *(_DWORD *)&buf_8[12] = 5857;
      _os_log_debug_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Start DSP - Negotiate OK, but same as previous request.", (uint8_t *)&buf, 0x18u);
    }
LABEL_27:
    *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = 0;
  }
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v23);
}

void sub_1BAE3AFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
  {
    HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&a10);
    unint64_t v16 = __cxa_begin_catch(exception_object);
    if (a2 == 2) {
      *(_DWORD *)(*(void *)(*(void *)(v13 + 32) + 8) + 24) = v16[2];
    }
    else {
      *(_DWORD *)(*(void *)(*(void *)(v13 + 32) + 8) + 24) = 2003329396;
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAE3AEE4);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN26HALS_IOContext_Legacy_Impl17Start_ActivateDSPEv_block_invoke_66(void *a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[6];
  uint64_t v17 = v2 + 312;
  int v18 = HALB_Mutex::Lock((HALB_Mutex *)(v2 + 328));
  uint64_t v3 = *(uint8_t **)(v2 + 2080);
  int v4 = *(_DWORD *)(v2 + 1320);
  int v5 = *(HALS_MutationChangeSynchronizer **)(*(void *)(a1[5] + 8) + 24);
  int v25 = 0;
  char v24 = 0;
  v20[0] = &v25;
  v20[1] = &v24;
  int v21 = 1;
  int v22 = v4;
  uint64_t v23 = v3;
  *(void *)std::string buf = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_0>;
  *(void *)long long v29 = v20;
  active = (AMCP::Log::Scope_Registry *)VisitableVector<HALS_IOStreamInfo>::apply<>(*(void *)(v2 + 1552), *(void *)(v2 + 1560), (long long *)buf);
  if (!v25 || (int v7 = (int)active) == 0)
  {
    *(void *)std::string buf = &v25;
    *(void *)long long v29 = &v24;
    *(_DWORD *)&v29[8] = 1;
    uint64_t v31 = v3;
    int v32 = v4;
    v19[0] = &unk_1F14809E0;
    v19[1] = v2 + 1496;
    v26[0] = caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContextHostedDSP::Adapt_Internal(HALS_IOContextDescription &,unsigned int,HALS_IOContextHostedDSP::DSPStreamInstance::RequestFlags)::$_1>;
    v26[1] = buf;
    v27[0] = (uint64_t (*)(void, void *))caulk::function_ref<int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::functor_invoker<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription&,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}>;
    v27[1] = (uint64_t (*)(void, void *))v26;
    active = (AMCP::Log::Scope_Registry *)VisitableVector<HALS_IOStackDescription>::do_apply<std::vector<HALS_IOStackDescription>,VisitableVector<HALS_IOStackDescription>::ItemWithIndex,HALS_IOContextDescription::ActiveOutputsOnly>(*(void *)(v2 + 1576), *(void *)(v2 + 1584), v27, (uint64_t)v19);
    int v7 = (int)active;
  }
  AMCP::Log::Scope_Registry::get(active);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  int v8 = **(NSObject ***)buf;
  if (*(void *)v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    int v10 = pthread_self();
    mach_port_t v11 = pthread_mach_thread_np(v10);
    *(_DWORD *)std::string buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v11;
    *(_WORD *)long long v29 = 2080;
    *(void *)&v29[2] = "HALS_IOContextHostedDSP.cpp";
    *(_WORD *)&unsigned char v29[10] = 1024;
    int v30 = 1340;
    LOWORD(v31) = 1024;
    *(_DWORD *)((char *)&v31 + 2) = v25;
    _os_log_debug_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] %d streams with DSP adapted.", buf, 0x1Eu);
    if (v7) {
      goto LABEL_8;
    }
  }
  else if (v7)
  {
LABEL_8:
    if (v5) {
      BOOL v9 = v7 == 1685287013;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      HALS_IOContextHostedDSP::Remove_Internal((HALS_IOContextHostedDSP *)v3, (HALS_IOContextDescription *)(v2 + 1496), v4, v5);
      int v7 = 1685287013;
    }
    goto LABEL_28;
  }
  if (v24)
  {
    uint64_t v12 = *(void *)v3;
    uint64_t v13 = *((void *)v3 + 1);
    if (*(void *)v3 == v13)
    {
LABEL_24:
      int v16 = 0;
    }
    else
    {
      uint64_t v14 = *(void *)v3;
      while (1)
      {
        if (*(_DWORD *)v14 == 1768845428)
        {
          uint64_t v15 = *(void *)(v14 + 16);
          if (v15) {
            break;
          }
        }
        v14 += 24;
        if (v14 == v13)
        {
          while (1)
          {
            if (*(_DWORD *)v12 == 1869968496)
            {
              uint64_t v15 = *(void *)(v12 + 16);
              if (v15) {
                goto LABEL_26;
              }
            }
            v12 += 24;
            if (v12 == v13) {
              goto LABEL_24;
            }
          }
        }
      }
LABEL_26:
      int v16 = *(_DWORD *)(v15 + 312);
    }
    *(_DWORD *)(v2 + 1928) = v16;
    *(unsigned char *)(v2 + 1932) = 1;
    *(void *)std::string buf = &unk_1F1480C38;
    *(_DWORD *)long long v29 = v16;
    uint64_t v31 = buf;
    HALS_IOContextDescription::DiscoverDSPStreams(v2 + 1496, (uint64_t)buf);
    std::__function::__value_func<void ()(HALS_DSPStream *)>::~__value_func[abi:ne180100](buf);
    int v7 = 1685285985;
  }
  else
  {
    int v7 = 0;
  }
LABEL_28:
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = v7;
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v17);
}

void sub_1BAE3B3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a2)
  {
    std::__function::__value_func<void ()(HALS_DSPStream *)>::~__value_func[abi:ne180100](&a25);
    HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&a10);
    uint64_t v28 = __cxa_begin_catch(exception_object);
    if (a2 == 2) {
      *(_DWORD *)(*(void *)(*(void *)(v25 + 32) + 8) + 24) = v28[2];
    }
    else {
      *(_DWORD *)(*(void *)(*(void *)(v25 + 32) + 8) + 24) = 2003329396;
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAE3B390);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN26HALS_IOContext_Legacy_Impl17Start_ActivateDSPEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v7 = v1 + 312;
  int v8 = HALB_Mutex::Lock((HALB_Mutex *)(v1 + 328));
  uint64_t v2 = *(uint64_t **)(v1 + 2080);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  while (v3 != v4)
  {
    uint64_t v5 = *(void *)(v3 + 16);
    uint64_t v6 = *(void *)(v5 + 272);
    if (v6) {
      std::function<void ()>::operator()(v6, *(_DWORD *)(v5 + 316));
    }
    v3 += 24;
  }
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v7);
}

void sub_1BAE3B4D8(void *a1)
{
}

uint64_t applesauce::dispatch::v1::async<HALS_IOContext_Legacy_Impl::Start_ActivateDSP(void)::$_0 &>(dispatch_queue_s *,HALS_IOContext_Legacy_Impl::Start_ActivateDSP(void)::$_0 &)::{lambda(void *)#1}::__invoke(AMCP::Log::Scope_Registry *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = **(NSObject ***)buf;
  if (*(void *)v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    int v8 = pthread_self();
    mach_port_t v9 = pthread_mach_thread_np(v8);
    unsigned int v10 = *((_DWORD *)a1 + 2);
    mach_port_t v11 = "config and latency";
    if (!*((unsigned char *)a1 + 12)) {
      mach_port_t v11 = "config";
    }
    *(_DWORD *)std::string buf = 67110146;
    *(_DWORD *)&uint8_t buf[4] = v9;
    *(_WORD *)uint64_t v14 = 2080;
    *(void *)&unint64_t v14[2] = "HALS_IOContext_Legacy_Impl.cpp";
    __int16 v15 = 1024;
    int v16 = 5926;
    __int16 v17 = 1024;
    unsigned int v18 = v10;
    __int16 v19 = 2080;
    mach_port_t v20 = v11;
    _os_log_debug_impl(&dword_1BAA78000, v2, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Start DSP - (%d) Refresh/notify client due to DSP-related %s change.", buf, 0x28u);
  }
  uint64_t v4 = (HALS_Client *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)a1);
  if (v4)
  {
    v12[0] = 0;
    v12[1] = 0;
    HALS_System::GetInstance(buf, 0, v12);
    uint64_t v6 = HALS_System::CopyDeviceByObjectID(*(HALS_System **)buf, *((_DWORD *)a1 + 1), v4);
    if (*(void *)v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
    }
    HALS_ObjectMap::ReleaseObject(v6, v5);
  }
  HALS_ObjectMap::ReleaseObject(v4, v3);
  return MEMORY[0x1C1859840](a1, 0x1000C4099076E91);
}

void sub_1BAE3B694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContext_Legacy_Impl::CountTapsForUnitTests(HALS_IOContext_Legacy_Impl *this)
{
  return *((void *)this + 250);
}

uint64_t HALS_IOContext_Legacy_Impl::ShouldBlockStartOnTapStart(HALS_IOContext_Legacy_Impl *this)
{
  return *((unsigned __int8 *)this + 1715);
}

void HALS_IOContext_Legacy_Impl::notify_waiting_tap_consumers_that_producer_has_fully_started(HALS_IOContext_Legacy_Impl *this)
{
  if (!*((unsigned char *)this + 1300)) {
    HALB_Guard::Notify((pthread_cond_t *)((char *)this + 328));
  }
}

void HALS_IOContext_Legacy_Impl::notify_any_waiting_autostart_contexts(HALS_IOContext_Legacy_Impl *this)
{
}

void HALS_IOContext_Legacy_Impl::RemoveTap(int8x8_t *a1, unint64_t *a2)
{
  int v16 = a1 + 39;
  int v17 = HALB_Mutex::Lock((HALB_Mutex *)&a1[41]);
  uint64_t v4 = a1 + 247;
  uint64_t v5 = (unsigned __int8 *)std::__hash_table<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::__unordered_map_hasher<HALS_MultiTap *,std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::hash<HALS_MultiTap *>,std::equal_to<HALS_MultiTap *>,true>,std::__unordered_map_equal<HALS_MultiTap *,std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::equal_to<HALS_MultiTap *>,std::hash<HALS_MultiTap *>,true>,std::allocator<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>>>::find<HALS_MultiTap *>(&a1[247], *a2);
  if (v5)
  {
    uint64_t v6 = v5;
    if (a1[162].i8[4])
    {
      HALS_MultiTap::writer_stop(*((HALS_MultiTap **)v5 + 3), *(_DWORD *)(*(void *)&a1[3] + 16));
      atomic_store(0, v6 + 42);
      atomic_store(0, v6 + 41);
    }
    int8x8_t v7 = a1[248];
    unint64_t v8 = *((void *)v6 + 1);
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      if (v8 >= *(void *)&v7) {
        v8 %= *(void *)&v7;
      }
    }
    else
    {
      v8 &= *(void *)&v7 - 1;
    }
    unsigned int v10 = *(unsigned __int8 **)(*(void *)v4 + 8 * v8);
    do
    {
      mach_port_t v11 = (int8x8_t *)v10;
      unsigned int v10 = *(unsigned __int8 **)v10;
    }
    while (v10 != v6);
    if (v11 == &a1[249]) {
      goto LABEL_21;
    }
    unint64_t v12 = (unint64_t)v11[1];
    if (v9.u32[0] > 1uLL)
    {
      if (v12 >= *(void *)&v7) {
        v12 %= *(void *)&v7;
      }
    }
    else
    {
      v12 &= *(void *)&v7 - 1;
    }
    if (v12 != v8)
    {
LABEL_21:
      if (!*(void *)v6) {
        goto LABEL_22;
      }
      unint64_t v13 = *(void *)(*(void *)v6 + 8);
      if (v9.u32[0] > 1uLL)
      {
        if (v13 >= *(void *)&v7) {
          v13 %= *(void *)&v7;
        }
      }
      else
      {
        v13 &= *(void *)&v7 - 1;
      }
      if (v13 != v8) {
LABEL_22:
      }
        *(void *)(*(void *)v4 + 8 * v8) = 0;
    }
    int8x8_t v14 = *(int8x8_t *)v6;
    if (*(void *)v6)
    {
      unint64_t v15 = *(void *)(*(void *)&v14 + 8);
      if (v9.u32[0] > 1uLL)
      {
        if (v15 >= *(void *)&v7) {
          v15 %= *(void *)&v7;
        }
      }
      else
      {
        v15 &= *(void *)&v7 - 1;
      }
      if (v15 != v8)
      {
        *(void *)(*(void *)v4 + 8 * v15) = v11;
        int8x8_t v14 = *(int8x8_t *)v6;
      }
    }
    *mach_port_t v11 = v14;
    *(void *)uint64_t v6 = 0;
    --*(void *)&a1[250];
    v18[0] = v6;
    v18[1] = a1 + 249;
    char v19 = 1;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v16);
}

void *std::__hash_table<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::__unordered_map_hasher<HALS_MultiTap *,std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::hash<HALS_MultiTap *>,std::equal_to<HALS_MultiTap *>,true>,std::__unordered_map_equal<HALS_MultiTap *,std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::equal_to<HALS_MultiTap *>,std::hash<HALS_MultiTap *>,true>,std::allocator<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>>>::find<HALS_MultiTap *>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<HALS_MultiTap * const,HALS_IOContext_Legacy_Impl::ActiveTap>,0>(v1 + 2);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<HALS_MultiTap * const,HALS_IOContext_Legacy_Impl::ActiveTap>,0>(void *a1)
{
  int8x8_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void HALS_IOContext_Legacy_Impl::AddTap(uint64_t a1, unint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  if (!*a2)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v51 = **(NSObject ***)buf;
    if (*(void *)v58) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v58);
    }
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      int v52 = pthread_self();
      mach_port_t v53 = pthread_mach_thread_np(v52);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v53;
      *(_WORD *)uint64_t v58 = 2080;
      *(void *)&unint64_t v58[2] = "HALS_IOContext_Legacy_Impl.cpp";
      __int16 v59 = 1024;
      int v60 = 5732;
      __int16 v61 = 2080;
      unint64_t v62 = "tap.get() != nullptr";
      _os_log_error_impl(&dword_1BAA78000, v51, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Invalid Tap", buf, 0x22u);
    }
    abort();
  }
  uint64_t v54 = a1 + 312;
  int v55 = HALB_Mutex::Lock((HALB_Mutex *)(a1 + 328));
  unint64_t v8 = *a2;
  uint8x8_t v9 = (char *)operator new(0x58uLL);
  unint64_t v10 = (void *)(a1 + 1992);
  *(void *)std::string buf = v9;
  *(void *)uint64_t v58 = a1 + 1992;
  v58[8] = 0;
  *(void *)uint8x8_t v9 = 0;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = v8;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  std::vector<char>::value_type __x = 0;
  std::vector<char>::vector((std::vector<char> *)v9 + 2, 8uLL, &__x);
  mach_port_t v11 = (void **)(a1 + 1976);
  **((_DWORD **)v9 + 6) = 0;
  v9[72] = 0;
  v9[76] = 0;
  v58[8] = 1;
  unint64_t v12 = *((void *)v9 + 2);
  unint64_t v13 = 0x9DDFEA08EB382D69 * (((8 * v12) + 8) ^ HIDWORD(v12));
  unint64_t v14 = 0x9DDFEA08EB382D69 * (HIDWORD(v12) ^ (v13 >> 47) ^ v13);
  unint64_t v15 = 0x9DDFEA08EB382D69 * (v14 ^ (v14 >> 47));
  *((void *)v9 + 1) = v15;
  unint64_t v16 = *(void *)(a1 + 1984);
  if (v16)
  {
    uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] > 1uLL)
    {
      unint64_t v18 = v15;
      if (v16 <= v15) {
        unint64_t v18 = v15 % v16;
      }
    }
    else
    {
      unint64_t v18 = (v16 - 1) & v15;
    }
    char v19 = (void *)*((void *)*v11 + v18);
    if (v19)
    {
      for (uint64_t i = (void *)*v19; i; uint64_t i = (void *)*i)
      {
        unint64_t v21 = i[1];
        if (v21 == v15)
        {
          if (i[2] == v12) {
            goto LABEL_73;
          }
        }
        else
        {
          if (v17.u32[0] > 1uLL)
          {
            if (v21 >= v16) {
              v21 %= v16;
            }
          }
          else
          {
            v21 &= v16 - 1;
          }
          if (v21 != v18) {
            break;
          }
        }
      }
    }
  }
  float v22 = (float)(unint64_t)(*(void *)(a1 + 2000) + 1);
  float v23 = *(float *)(a1 + 2008);
  if (!v16 || (float)(v23 * (float)v16) < v22)
  {
    BOOL v24 = 1;
    if (v16 >= 3) {
      BOOL v24 = (v16 & (v16 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v16);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    else {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v16 = *(void *)(a1 + 1984);
    }
    if (*(void *)&prime > v16) {
      goto LABEL_102;
    }
    if (*(void *)&prime >= v16) {
      goto LABEL_59;
    }
    unint64_t v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 2000) / *(float *)(a1 + 2008));
    if (v16 < 3 || (uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)v16), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
    {
      unint64_t v34 = std::__next_prime(v34);
    }
    else
    {
      uint64_t v36 = 1 << -(char)__clz(v34 - 1);
      if (v34 >= 2) {
        unint64_t v34 = v36;
      }
    }
    if (*(void *)&prime <= v34) {
      int8x8_t prime = (int8x8_t)v34;
    }
    if (*(void *)&prime >= v16)
    {
      unint64_t v16 = *(void *)(a1 + 1984);
      goto LABEL_59;
    }
    if (prime)
    {
LABEL_102:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v28 = operator new(8 * *(void *)&prime);
      long long v29 = *v11;
      *mach_port_t v11 = v28;
      if (v29) {
        operator delete(v29);
      }
      uint64_t v30 = 0;
      *(int8x8_t *)(a1 + 1984) = prime;
      do
        *((void *)*v11 + v30++) = 0;
      while (*(void *)&prime != v30);
      uint64_t v31 = (void *)*v10;
      if (*v10)
      {
        unint64_t v32 = v31[1];
        uint8x8_t v33 = (uint8x8_t)vcnt_s8(prime);
        v33.i16[0] = vaddlv_u8(v33);
        if (v33.u32[0] > 1uLL)
        {
          if (v32 >= *(void *)&prime) {
            v32 %= *(void *)&prime;
          }
        }
        else
        {
          v32 &= *(void *)&prime - 1;
        }
        *((void *)*v11 + v32) = v10;
        long long v37 = (void *)*v31;
        if (*v31)
        {
          do
          {
            unint64_t v38 = v37[1];
            if (v33.u32[0] > 1uLL)
            {
              if (v38 >= *(void *)&prime) {
                v38 %= *(void *)&prime;
              }
            }
            else
            {
              v38 &= *(void *)&prime - 1;
            }
            if (v38 != v32)
            {
              if (!*((void *)*v11 + v38))
              {
                *((void *)*v11 + v38) = v31;
                goto LABEL_55;
              }
              void *v31 = *v37;
              *long long v37 = **((void **)*v11 + v38);
              **((void **)*v11 + v38) = v37;
              long long v37 = v31;
            }
            unint64_t v38 = v32;
LABEL_55:
            uint64_t v31 = v37;
            long long v37 = (void *)*v37;
            unint64_t v32 = v38;
          }
          while (v37);
        }
      }
      unint64_t v16 = (unint64_t)prime;
    }
    else
    {
      long long v50 = *v11;
      *mach_port_t v11 = 0;
      if (v50) {
        operator delete(v50);
      }
      unint64_t v16 = 0;
      *(void *)(a1 + 1984) = 0;
    }
  }
LABEL_59:
  unint64_t v39 = *((void *)v9 + 1);
  uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
  v40.i16[0] = vaddlv_u8(v40);
  if (v40.u32[0] > 1uLL)
  {
    if (v39 >= v16) {
      v39 %= v16;
    }
  }
  else
  {
    v39 &= v16 - 1;
  }
  int v41 = *v11;
  unint64_t v42 = (void *)*((void *)*v11 + v39);
  if (v42)
  {
    *(void *)uint8x8_t v9 = *v42;
LABEL_71:
    *unint64_t v42 = v9;
    goto LABEL_72;
  }
  *(void *)uint8x8_t v9 = *v10;
  *unint64_t v10 = v9;
  v41[v39] = v10;
  if (*(void *)v9)
  {
    unint64_t v43 = *(void *)(*(void *)v9 + 8);
    if (v40.u32[0] > 1uLL)
    {
      if (v43 >= v16) {
        v43 %= v16;
      }
    }
    else
    {
      v43 &= v16 - 1;
    }
    unint64_t v42 = (char *)*v11 + 8 * v43;
    goto LABEL_71;
  }
LABEL_72:
  ++*(void *)(a1 + 2000);
  *(void *)std::string buf = 0;
LABEL_73:
  std::unique_ptr<std::__hash_node<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
  unint64_t v44 = *a2;
  int v45 = std::__hash_table<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::__unordered_map_hasher<HALS_MultiTap *,std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::hash<HALS_MultiTap *>,std::equal_to<HALS_MultiTap *>,true>,std::__unordered_map_equal<HALS_MultiTap *,std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::equal_to<HALS_MultiTap *>,std::hash<HALS_MultiTap *>,true>,std::allocator<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>>>::find<HALS_MultiTap *>((void *)(a1 + 1976), *a2);
  if (!v45) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  __int16 v46 = v45;
  unint64_t v47 = a2[1];
  if (v47) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v48 = (std::__shared_weak_count *)v45[4];
  v46[3] = v44;
  void v46[4] = v47;
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  *((unsigned char *)v46 + 40) = 1;
  if (a4)
  {
    *((_DWORD *)v46 + 18) = a3;
    *((unsigned char *)v46 + 76) = 1;
    *((_DWORD *)v46 + 20) = HIDWORD(a3);
  }
  if (*(unsigned char *)(a1 + 1300))
  {
    unsigned __int8 v49 = atomic_load((unsigned __int8 *)v46 + 42);
    if ((v49 & 1) == 0) {
      HALS_IOContext_Legacy_Impl::StartTapOutput(a1, (uint64_t)(v46 + 3));
    }
  }
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v54);
}

void sub_1BAE3C0A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)va);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Legacy_Impl::StartTapOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  std::vector<int> __p = 0;
  mach_port_t v82 = 0;
  uint64_t v83 = 0;
  unint64_t v78 = 0;
  int v79 = 0;
  uint64_t v80 = 0;
  unint64_t v4 = (int *)(a2 + 48);
  char v5 = *(unsigned char *)(a2 + 52);
  if (v5) {
    char v5 = *v4 == *(_DWORD *)(a1 + 1512);
  }
  char v77 = 0;
  v95[0] = &__p;
  v95[1] = (void **)&v78;
  v95[2] = (void **)&v77;
  int v96 = *v4;
  char v97 = *(unsigned char *)(a2 + 52);
  int v98 = *(_DWORD *)(a2 + 56);
  char v99 = v5;
  *(void *)&long long v88 = caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContext_Legacy_Impl::StartTapOutput(HALS_IOContext_Legacy_Impl::ActiveTap &)::$_0>;
  *((void *)&v88 + 1) = v95;
  *(void *)std::vector<char>::value_type __x = _ZN5caulk12function_refIFiRN15VisitableVectorI23HALS_IOStackDescriptionE13ItemWithIndexEEE15functor_invokerIZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS0_IFijRS2_jjR17HALS_IOStreamInfoEEEDpRKT_EUlS5_E_EEiRKNS_7details15erased_callableIS6_EES5_;
  *(void *)&std::vector<char>::value_type __x[8] = &v88;
  VisitableVector<HALS_IOStackDescription>::apply<>(*(void *)(a1 + 1576), *(void *)(a1 + 1584), (long long *)__x);
  BOOL v6 = __p != v82 && v77 == 0;
  char v7 = v6;
  *(unsigned char *)(a2 + 16) = v7;
  if (v6)
  {
    unsigned int NumberStreams = HALS_IOContextDescription::GetNumberStreams((HALS_IOContextDescription *)(a1 + 1496), 0);
    unint64_t v9 = (16 * NumberStreams) | 8;
    __x[0] = 0;
    unint64_t v10 = *(unsigned int **)(a2 + 24);
    unint64_t v11 = *(void *)(a2 + 32) - (void)v10;
    if (v9 <= v11)
    {
      if (v9 < v11) {
        *(void *)(a2 + 32) = (char *)v10 + v9;
      }
    }
    else
    {
      std::vector<char>::__append((std::vector<char> *)(a2 + 24), v9 - v11, __x);
      unint64_t v10 = *(unsigned int **)(a2 + 24);
    }
    *unint64_t v10 = NumberStreams;
    if (*(unsigned char *)(a2 + 52)) {
      int v12 = 2;
    }
    else {
      int v12 = (*(unsigned char *)(*(void *)a2 + 36) & 0x20) == 0 && *(_DWORD *)(*(void *)a2 + 52) != 1;
    }
    uint64_t v13 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 1512));
    unint64_t v15 = (HALS_ObjectMap *)v13;
    if (v13)
    {
      uint64_t v16 = *(void *)a2;
      unsigned int v74 = *(_DWORD *)(*(void *)(a1 + 24) + 16);
      (*(void (**)(uint64_t))(*(void *)v13 + 216))(v13);
      memset(&v76, 0, sizeof(v76));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v76, v78, v79, 0xAAAAAAAAAAAAAAABLL * (((char *)v79 - (char *)v78) >> 3));
      uint64_t v86 = v16 + 152;
      char v87 = 1;
      std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v16 + 152));
      HALS_MultiTap::fetch_writer_state((HALS_MultiTap *)&v84, v16, v74);
      if (!v84)
      {
        uint8x8_t v17 = (char *)operator new(0x138uLL);
        *(_OWORD *)(v17 + 8) = 0u;
        *((_DWORD *)v17 + 6) = v74;
        *((void *)v17 + 4) = 0;
        std::vector<unsigned int> v75 = (char **)(v17 + 32);
        *(void *)uint8x8_t v17 = &unk_1F1484CF8;
        *(_OWORD *)(v17 + 40) = 0u;
        *((_DWORD *)v17 + 16) = v12;
        uint64_t v73 = (HALS_MultiChannelMixer *)(v17 + 64);
        v17[56] = 1;
        *((void *)v17 + 9) = 0;
        unint64_t v18 = v17 + 72;
        *((_OWORD *)v17 + 5) = 0u;
        long long v19 = *(_OWORD *)(v16 + 24);
        long long v20 = *(_OWORD *)(v16 + 40);
        *((void *)v17 + 16) = *(void *)(v16 + 56);
        *((_OWORD *)v17 + 6) = v19;
        *((_OWORD *)v17 + 7) = v20;
        *(_OWORD *)(v17 + 136) = 0u;
        MEMORY[0x1C1858C00]();
        uint64_t v72 = v16 + 24;
        unint64_t v21 = (char *)__p;
        float v22 = v82;
        if (__p != v82)
        {
          do
          {
            long long v106 = 0uLL;
            uint64_t v107 = 0;
            *(_DWORD *)std::vector<char>::value_type __x = *(_DWORD *)v21;
            uint64_t v23 = *((void *)v21 + 5);
            long long v24 = *(_OWORD *)(v21 + 24);
            *(_OWORD *)&std::vector<char>::value_type __x[8] = *(_OWORD *)(v21 + 8);
            *(_OWORD *)&__x[24] = v24;
            *(void *)&__x[40] = v23;
            char v105 = v21[48];
            long long v106 = 0uLL;
            uint64_t v107 = 0;
            long long v101 = 0uLL;
            *(void *)std::string buf = 0;
            uint64_t v94 = buf;
            std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
            long long v88 = *(_OWORD *)__x;
            long long v89 = *(_OWORD *)&__x[16];
            long long v90 = *(_OWORD *)&__x[32];
            char v91 = v105;
            long long v92 = v106;
            uint64_t v93 = v107;
            uint64_t v107 = 0;
            long long v106 = 0uLL;
            *(void *)std::string buf = &v106;
            std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
            unint64_t v26 = (_OWORD *)*((void *)v17 + 10);
            unint64_t v25 = *((void *)v17 + 11);
            if ((unint64_t)v26 >= v25)
            {
              uint64_t v31 = (_OWORD *)*v18;
              unint64_t v32 = 0xCCCCCCCCCCCCCCCDLL * (v26 - v31) + 1;
              if (v32 > 0x333333333333333) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v25 - (void)v31) >> 4);
              if (2 * v33 > v32) {
                unint64_t v32 = 2 * v33;
              }
              if (v33 >= 0x199999999999999) {
                unint64_t v34 = 0x333333333333333;
              }
              else {
                unint64_t v34 = v32;
              }
              if (v34 > 0x333333333333333) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint8x8_t v35 = (char *)operator new(80 * v34);
              long long v36 = v89;
              long long v37 = &v35[16 * (v26 - v31)];
              *(_OWORD *)long long v37 = v88;
              *((_OWORD *)v37 + 1) = v36;
              unint64_t v38 = &v35[80 * v34];
              *((_OWORD *)v37 + 2) = v90;
              v37[48] = v91;
              *(_OWORD *)(v37 + 56) = v92;
              *((void *)v37 + 9) = v93;
              uint64_t v93 = 0;
              uint64_t v30 = v37 + 80;
              long long v92 = 0uLL;
              if (v26 == v31)
              {
                *((void *)v17 + 9) = v37;
                *((void *)v17 + 10) = v30;
                *((void *)v17 + 11) = v38;
              }
              else
              {
                do
                {
                  long long v39 = *(v26 - 5);
                  long long v40 = *(v26 - 4);
                  long long v41 = *(v26 - 3);
                  *(v37 - 32) = *((unsigned char *)v26 - 32);
                  *((_OWORD *)v37 - 4) = v40;
                  *((_OWORD *)v37 - 3) = v41;
                  *((_OWORD *)v37 - 5) = v39;
                  *((void *)v37 - 2) = 0;
                  *((void *)v37 - 1) = 0;
                  *((void *)v37 - 3) = 0;
                  *(_OWORD *)(v37 - 24) = *(_OWORD *)((char *)v26 - 24);
                  *((void *)v37 - 1) = *((void *)v26 - 1);
                  v37 -= 80;
                  *((void *)v26 - 3) = 0;
                  *((void *)v26 - 2) = 0;
                  *((void *)v26 - 1) = 0;
                  v26 -= 5;
                }
                while (v26 != v31);
                unint64_t v42 = (_OWORD *)*((void *)v17 + 9);
                unint64_t v26 = (_OWORD *)*((void *)v17 + 10);
                *((void *)v17 + 9) = v37;
                *((void *)v17 + 10) = v30;
                *((void *)v17 + 11) = v38;
                if (v26 != v42)
                {
                  do
                  {
                    *(void *)std::vector<char>::value_type __x = (char *)v26 - 24;
                    std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
                    v26 -= 5;
                  }
                  while (v26 != v42);
                  unint64_t v26 = v42;
                }
              }
              unint64_t v18 = v17 + 72;
              if (v26) {
                operator delete(v26);
              }
            }
            else
            {
              long long v27 = v88;
              long long v28 = v89;
              long long v29 = v90;
              *((unsigned char *)v26 + 48) = v91;
              v26[1] = v28;
              void v26[2] = v29;
              _OWORD *v26 = v27;
              *((void *)v26 + 8) = 0;
              *((void *)v26 + 9) = 0;
              *((void *)v26 + 7) = 0;
              *(_OWORD *)((char *)v26 + 56) = v92;
              *((void *)v26 + 9) = v93;
              long long v92 = 0uLL;
              uint64_t v93 = 0;
              uint64_t v30 = v26 + 5;
            }
            *((void *)v17 + 10) = v30;
            *(void *)std::vector<char>::value_type __x = &v92;
            std::vector<std::vector<std::byte>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
            v21 += 56;
          }
          while (v21 != v22);
        }
        if (*((void *)v17 + 10) != *((void *)v17 + 9))
        {
          unint64_t v43 = 0;
          uint64_t v44 = 3;
          do
          {
            HALS_MultiChannelMixer::SetupGainTable(v73, v43);
            int v45 = (_OWORD *)*v18;
            if (*(_DWORD *)v73 == 2 && LOBYTE(v45[v44]))
            {
              uint64_t v46 = *((void *)v17 + 18) + 1;
              *((void *)v17 + 17) = v43;
              *((void *)v17 + 18) = v46;
            }
            ++v43;
            v44 += 5;
          }
          while (v43 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)v17 + 10) - (void)v45) >> 4));
        }
        *(_OWORD *)(v17 + 152) = 0u;
        *(_OWORD *)(v17 + 168) = 0u;
        *(_OWORD *)(v17 + 184) = 0u;
        long long v47 = *(_OWORD *)v72;
        long long v48 = *(_OWORD *)(v72 + 16);
        *((void *)v17 + 29) = *(void *)(v72 + 32);
        *(_OWORD *)(v17 + 200) = v47;
        *(_OWORD *)(v17 + 216) = v48;
        *((_OWORD *)v17 + 15) = 0u;
        *((_OWORD *)v17 + 16) = 0u;
        *((_OWORD *)v17 + 17) = 0u;
        *((_OWORD *)v17 + 18) = 0u;
        *((void *)v17 + 38) = 0;
        unsigned __int8 v49 = (char *)__p;
        long long v50 = v82;
        if (__p == v82)
        {
          unint64_t v51 = *((void *)v17 + 5);
        }
        else
        {
          unint64_t v51 = *((void *)v17 + 5);
          do
          {
            *(_OWORD *)std::vector<char>::value_type __x = *(_OWORD *)(v49 + 8);
            *(_OWORD *)&std::vector<char>::value_type __x[16] = *(_OWORD *)(v49 + 24);
            *(void *)&__x[32] = *((void *)v49 + 5);
            unint64_t v52 = *((void *)v17 + 6);
            if (v51 >= v52)
            {
              unint64_t v55 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v51 - (void)*v75) >> 3);
              unint64_t v56 = v55 + 1;
              if (v55 + 1 > 0x666666666666666) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v57 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - (void)*v75) >> 3);
              if (2 * v57 > v56) {
                unint64_t v56 = 2 * v57;
              }
              if (v57 >= 0x333333333333333) {
                unint64_t v58 = 0x666666666666666;
              }
              else {
                unint64_t v58 = v56;
              }
              if (v58) {
                unint64_t v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v58);
              }
              else {
                uint64_t v59 = 0;
              }
              unint64_t v60 = v58 + 40 * v55;
              *(_OWORD *)unint64_t v60 = *(_OWORD *)__x;
              *(_OWORD *)(v60 + 16) = *(_OWORD *)&__x[16];
              *(void *)(v60 + 32) = *(void *)&__x[32];
              unint64_t v62 = (char *)*((void *)v17 + 4);
              __int16 v61 = (char *)*((void *)v17 + 5);
              unint64_t v63 = v60;
              if (v61 != v62)
              {
                do
                {
                  long long v64 = *(_OWORD *)(v61 - 40);
                  long long v65 = *(_OWORD *)(v61 - 24);
                  *(void *)(v63 - 8) = *((void *)v61 - 1);
                  *(_OWORD *)(v63 - 24) = v65;
                  *(_OWORD *)(v63 - 40) = v64;
                  v63 -= 40;
                  v61 -= 40;
                }
                while (v61 != v62);
                __int16 v61 = *v75;
              }
              unint64_t v51 = v60 + 40;
              *((void *)v17 + 4) = v63;
              *((void *)v17 + 5) = v60 + 40;
              *((void *)v17 + 6) = v58 + 40 * v59;
              if (v61) {
                operator delete(v61);
              }
            }
            else
            {
              long long v53 = *(_OWORD *)(v49 + 8);
              long long v54 = *(_OWORD *)(v49 + 24);
              *(void *)(v51 + 32) = *((void *)v49 + 5);
              *(_OWORD *)unint64_t v51 = v53;
              *(_OWORD *)(v51 + 16) = v54;
              v51 += 40;
            }
            *((void *)v17 + 5) = v51;
            v49 += 56;
          }
          while (v49 != v50);
        }
        if (*v75 != (char *)v51) {
          HALS_MultiTap_Writer_State::initialize((HALS_MultiTap_Writer_State *)(v17 + 24));
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::vector<char>::value_type __x = 136315394;
          *(void *)&__x[4] = "HALS_MultiTap.cpp";
          *(_WORD *)&__x[12] = 1024;
          *(_DWORD *)&__x[14] = 70;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MultiTap_Writer_State::HALS_MultiTap_Writer_State: A writer has to have at least 1 stream", __x, 0x12u);
        }
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = off_1F148A5D8;
        exception[2] = 1852797029;
      }
      if (v85) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v85);
      }
      std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v86);
      *(void *)std::string buf = &v76;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      AMCP::Log::Scope_Registry::get(v66);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unsigned int v67 = **(NSObject ***)buf;
      if ((void)v101) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v101);
      }
      if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
      {
        uint64_t v68 = pthread_self();
        mach_port_t v69 = pthread_mach_thread_np(v68);
        int v70 = *(_DWORD *)(*(void *)(a1 + 24) + 16);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v69;
        LOWORD(v101) = 2080;
        *(void *)((char *)&v101 + 2) = "HALS_IOContext_Legacy_Impl.cpp";
        WORD5(v101) = 1024;
        HIDWORD(v101) = 5517;
        __int16 v102 = 1024;
        int v103 = v70;
        _os_log_error_impl(&dword_1BAA78000, v67, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Failed to start an ActiveTap for context: %u:", buf, 0x1Eu);
      }
    }
    HALS_ObjectMap::ReleaseObject(v15, v14);
  }
  atomic_store(1u, (unsigned __int8 *)(a2 + 18));
  v95[0] = (void **)&v78;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v95);
  if (__p)
  {
    mach_port_t v82 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1BAE3CE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint8_t buf,uint64_t a48,__int16 a49,__int16 a50,int a51,__int16 a52,uint64_t a53,uint64_t a54,uint64_t a55,long long a56,uint64_t a57)
{
  if (a2)
  {
    std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&a35);
    os_unfair_lock_unlock(v57);
    if (a30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a30);
    }
    __int16 v61 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      int v62 = *((_DWORD *)v61 + 66);
      AMCP::Log::Scope_Registry::get(v61);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)(v58 - 240), "com.apple.coreaudio", "AMCP");
      unint64_t v63 = *(std::__shared_weak_count **)(v58 - 232);
      long long v64 = **(NSObject ***)(v58 - 240);
      if (v63) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v63);
      }
      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
      {
        unsigned int v67 = pthread_self();
        mach_port_t v68 = pthread_mach_thread_np(v67);
        *(_DWORD *)(v58 - 240) = 67110146;
        *(_DWORD *)(v58 - 236) = v68;
        *(_WORD *)(v58 - 232) = 2080;
        *(void *)((char *)&a56 + 2) = "HALS_MultiTap.cpp";
        *(_WORD *)(v58 - 222) = 1024;
        *(_DWORD *)(v58 - 220) = 547;
        *(_WORD *)(v58 - 216) = 1024;
        *(_DWORD *)((char *)&a57 + 2) = a16;
        *(_WORD *)(v58 - 210) = 1024;
        *(_DWORD *)(v58 - 208) = v62;
        _os_log_error_impl(&dword_1BAA78000, v64, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception trying to start multi tap for object %u, error %d", (uint8_t *)(v58 - 240), 0x24u);
      }
    }
    else
    {
      AMCP::Log::Scope_Registry::get(v61);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)(v58 - 240), "com.apple.coreaudio", "AMCP");
      long long v65 = *(std::__shared_weak_count **)(v58 - 232);
      int v66 = **(NSObject ***)(v58 - 240);
      if (v65) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v65);
      }
      if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
      {
        mach_port_t v69 = pthread_self();
        mach_port_t v70 = pthread_mach_thread_np(v69);
        *(_DWORD *)(v58 - 240) = 67109890;
        *(_DWORD *)(v58 - 236) = v70;
        *(_WORD *)(v58 - 232) = 2080;
        *(void *)((char *)&a56 + 2) = "HALS_MultiTap.cpp";
        *(_WORD *)(v58 - 222) = 1024;
        *(_DWORD *)(v58 - 220) = 552;
        *(_WORD *)(v58 - 216) = 1024;
        *(_DWORD *)((char *)&a57 + 2) = a16;
        _os_log_error_impl(&dword_1BAA78000, v66, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception trying to start multi tap for object %u", (uint8_t *)(v58 - 240), 0x1Eu);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAE3CC18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZN5caulk12function_refIFiRN15VisitableVectorI23HALS_IOStackDescriptionE13ItemWithIndexEEE15functor_invokerIZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS0_IFijRS2_jjR17HALS_IOStreamInfoEEEDpRKT_EUlS5_E_EEiRKNS_7details15erased_callableIS6_EES5_(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = *(uint64_t **)(*(void *)a2 + 8);
  uint64_t v5 = *(void *)(*(void *)a2 + 16);
  if ((uint64_t *)v5 == v4
    || ((uint64_t v6 = *v4, -1944890851 * ((unint64_t)(v4[1] - *v4) >> 3)) ? (v7 = v6 == 0) : (v7 = 1), v7))
  {
    int v8 = 0;
  }
  else
  {
    if (!*(_DWORD *)(v6 + 108)
      || ((uint64_t v9 = *(void *)(v6 + 112), *(void *)(v6 + 120) != v9) ? (v10 = v9 == 0) : (v10 = 1), v10))
    {
      uint64_t v9 = v6 + 408;
    }
    int v8 = *(_DWORD *)(*(void *)v9 + 308);
  }
  v14[0] = a2;
  v14[1] = v3;
  int v15 = v8;
  uint64_t v13 = v14;
  *(void *)&long long v12 = _ZN5caulk12function_refIFiRN15VisitableVectorI18HALS_IOStreamGroupE13ItemWithIndexEEE15functor_invokerIZZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS0_IFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_ENKUlRNS1_ISB_E13ItemWithIndexEE_clESN_EUlS5_E_EEiRKNS_7details15erased_callableIS6_EES5_;
  *((void *)&v12 + 1) = &v13;
  return VisitableVector<HALS_IOStreamGroup>::apply<>((uint64_t)v4, v5, &v12);
}

uint64_t VisitableVector<HALS_IOStreamGroup>::apply<>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v9 = *a3;
  uint64_t v10 = *((void *)a3 + 2);
  if (a1 == a2) {
    return 0;
  }
  uint64_t v4 = a1;
  uint64_t v5 = 0;
  char v6 = 1;
  do
  {
    if (v6) {
      uint64_t v5 = 0;
    }
    else {
      ++v5;
    }
    v11[0] = v4;
    v11[1] = v5;
    uint64_t result = ((uint64_t (*)(char *, void *))v9)((char *)&v9 + 8, v11);
    char v6 = 0;
    v4 += 24;
    if (result) {
      BOOL v8 = 1;
    }
    else {
      BOOL v8 = v4 == a2;
    }
  }
  while (!v8);
  return result;
}

uint64_t _ZN5caulk12function_refIFiRN15VisitableVectorI18HALS_IOStreamGroupE13ItemWithIndexEEE15functor_invokerIZZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS0_IFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEEEDpRKT_ENKUlRNS1_ISB_E13ItemWithIndexEE_clESN_EUlS5_E_EEiRKNS_7details15erased_callableIS6_EES5_(uint64_t **a1, uint64_t **a2)
{
  int8x8_t v2 = *a2;
  uint64_t v3 = **a1;
  *(void *)&long long v5 = _ZN5caulk12function_refIFiRN15VisitableVectorI17HALS_IOStreamInfoE13ItemWithIndexEEE15functor_invokerIZZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS0_IFijR23HALS_IOStackDescriptionjjRS2_EEEDpRKT_ENKUlRNS1_ISB_E13ItemWithIndexEE_clESM_EUlS5_E_EEiRKNS_7details15erased_callableIS6_EES5_;
  *((void *)&v5 + 1) = v3;
  return VisitableVector<HALS_IOStreamInfo>::apply<>(*v2, v2[1], &v5);
}

uint64_t _ZN5caulk12function_refIFiRN15VisitableVectorI17HALS_IOStreamInfoE13ItemWithIndexEEE15functor_invokerIZZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS0_IFijR23HALS_IOStackDescriptionjjRS2_EEEDpRKT_ENKUlRNS1_ISB_E13ItemWithIndexEE_clESM_EUlS5_E_EEiRKNS_7details15erased_callableIS6_EES5_(void ***a1, uint64_t a2)
{
  return ((uint64_t (*)(void *, void, void, void, void, void))*(*a1)[1])((*a1)[1] + 1, *((unsigned int *)**a1 + 2), ***a1, *((unsigned int *)*a1 + 4), *(unsigned int *)(a2 + 8), *(void *)a2);
}

uint64_t caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContext_Legacy_Impl::StartTapOutput(HALS_IOContext_Legacy_Impl::ActiveTap &)::$_0>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v8 = *a1;
  if (*(_DWORD *)(a6 + 108))
  {
    HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&__v, (uint64_t *)(a6 + 112));
  }
  else
  {
    long long v9 = *(_OWORD *)(a6 + 384);
    *(_OWORD *)&__v.__first_ = *(_OWORD *)(a6 + 368);
    *(_OWORD *)&__v.__end_ = v9;
    __v.__end_cap_.__value_ = *(std::allocator<std::string> **)(a6 + 400);
  }
  if (LODWORD(__v.__begin_) != 1819304813 || (BYTE4(__v.__begin_) & 0x40) != 0) {
    **(unsigned char **)(v8 + 16) = 1;
  }
  if (!*(_DWORD *)(a6 + 108) || (unint64_t v11 = *(uint64_t **)(a6 + 112), *(uint64_t **)(a6 + 120) == v11) || !v11) {
    unint64_t v11 = (uint64_t *)(a6 + 408);
  }
  uint64_t v12 = *v11;
  uint64_t v13 = *(void *)(*v11 + 8);
  if (v13) {
    int DeviceIDFromEngineID = HALS_IOContextDescription::GetDeviceIDFromEngineID((HALS_IOContextDescription *)*(unsigned int *)(v13 + 16));
  }
  else {
    int DeviceIDFromEngineID = 0;
  }
  if (*(unsigned char *)(v8 + 28))
  {
    if (*(unsigned char *)(v8 + 36))
    {
      BOOL v15 = *(_DWORD *)(v8 + 32) == a5;
      goto LABEL_21;
    }
    if (*(_DWORD *)(v8 + 24) == DeviceIDFromEngineID)
    {
      BOOL v15 = *(_DWORD *)(v8 + 32) == *(_DWORD *)(a6 + 12);
LABEL_21:
      char v16 = v15;
      goto LABEL_25;
    }
  }
  char v16 = 0;
LABEL_25:
  if (*(_DWORD *)(a6 + 108))
  {
    HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&__v, (uint64_t *)(a6 + 112));
  }
  else
  {
    long long v17 = *(_OWORD *)(a6 + 384);
    *(_OWORD *)&__v.__first_ = *(_OWORD *)(a6 + 368);
    *(_OWORD *)&__v.__end_ = v17;
    __v.__end_cap_.__value_ = *(std::allocator<std::string> **)(a6 + 400);
  }
  std::__split_buffer<std::string>::pointer first = __v.__first_;
  long long v43 = *(_OWORD *)&__v.__begin_;
  std::__compressed_pair<std::string *> end_cap = __v.__end_cap_;
  if (*(double *)&__v.__first_ != 0.0)
  {
    long long v19 = *(char ***)v8;
    unint64_t v21 = *(char **)(*(void *)v8 + 8);
    unint64_t v20 = *(void *)(*(void *)v8 + 16);
    if ((unint64_t)v21 >= v20)
    {
      uint64_t v23 = *v19;
      uint64_t v24 = 0x6DB6DB6DB6DB6DB7 * ((v21 - *v19) >> 3);
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) > 0x492492492492492) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v26 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v20 - (void)v23) >> 3);
      if (2 * v26 > v25) {
        unint64_t v25 = 2 * v26;
      }
      if (v26 >= 0x249249249249249) {
        unint64_t v27 = 0x492492492492492;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        if (v27 > 0x492492492492492) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        long long v28 = (char *)operator new(56 * v27);
      }
      else
      {
        long long v28 = 0;
      }
      long long v29 = &v28[56 * v24];
      *(_DWORD *)long long v29 = DeviceIDFromEngineID;
      *((void *)v29 + 1) = first;
      *((_OWORD *)v29 + 1) = v43;
      *((std::__compressed_pair<std::string *> *)v29 + 2) = end_cap;
      v29[48] = v16;
      float v22 = v29 + 56;
      if (v21 != v23)
      {
        do
        {
          long long v30 = *(_OWORD *)(v21 - 56);
          long long v31 = *(_OWORD *)(v21 - 40);
          long long v32 = *(_OWORD *)(v21 - 24);
          *(v29 - 8) = *(v21 - 8);
          *(_OWORD *)(v29 - 24) = v32;
          *(_OWORD *)(v29 - 40) = v31;
          *(_OWORD *)(v29 - 56) = v30;
          v29 -= 56;
          v21 -= 56;
        }
        while (v21 != v23);
        unint64_t v21 = *v19;
      }
      *long long v19 = v29;
      v19[1] = v22;
      void v19[2] = &v28[56 * v27];
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v21 = DeviceIDFromEngineID;
      *((void *)v21 + 1) = first;
      *((_OWORD *)v21 + 1) = v43;
      *((std::__compressed_pair<std::string *> *)v21 + 2) = end_cap;
      v21[48] = v16;
      float v22 = v21 + 56;
    }
    v19[1] = v22;
    uint64_t v33 = *(void *)(v8 + 8);
    unint64_t v34 = *(void *)(v33 + 8);
    unint64_t v35 = *(void *)(v33 + 16);
    if (v34 >= v35)
    {
      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *(void *)v33) >> 3);
      if (v37 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *(void *)v33) >> 3);
      uint64_t v39 = 2 * v38;
      if (2 * v38 <= v37 + 1) {
        uint64_t v39 = v37 + 1;
      }
      if (v38 >= 0x555555555555555) {
        unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v40 = v39;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v33 + 16);
      if (v40) {
        unint64_t v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v40);
      }
      else {
        uint64_t v41 = 0;
      }
      __v.__first_ = (std::__split_buffer<std::string>::pointer)v40;
      __v.__begin_ = (std::__split_buffer<std::string>::pointer)(v40 + 24 * v37);
      __v.__end_ = __v.__begin_;
      __v.__end_cap_.__value_ = (std::string *)(v40 + 24 * v41);
      std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, (char *)(v12 + 32));
      ++__v.__end_;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v33, &__v);
      unint64_t v36 = *(void *)(v33 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(*(void **)(v33 + 8), (char *)(v12 + 32));
      unint64_t v36 = v34 + 24;
      *(void *)(v33 + 8) = v34 + 24;
    }
    *(void *)(v33 + 8) = v36;
  }
  return 0;
}

void sub_1BAE3D7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__split_buffer<std::string> *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

void HALS_IOContext_Legacy_Impl::GetHostedDSPProcessorPropertySetInterface(HALS_IOContext_Legacy_Impl *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if (*((void *)this + 260))
  {
    uint64_t v8 = 0;
    long long v9 = &v8;
    uint64_t v10 = 0x3802000000;
    unint64_t v11 = __Block_byref_object_copy__59;
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v12 = __Block_byref_object_dispose__60;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 0x40000000;
    uint64_t v6[2] = ___ZN26HALS_IOContext_Legacy_Impl41GetHostedDSPProcessorPropertySetInterfaceEj_block_invoke;
    v6[3] = &unk_1E6235290;
    v6[4] = &v8;
    unsigned char v6[5] = this;
    int v7 = a2;
    uint64_t v4 = (HALB_Mutex *)(*(uint64_t (**)(void))(**((void **)this + 3) + 56))(*((void *)this + 3));
    HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v6);
    uint64_t v5 = v9[6];
    *a3 = v9[5];
    a3[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    _Block_object_dispose(&v8, 8);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_1BAE3D900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__59(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose__60(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZN26HALS_IOContext_Legacy_Impl41GetHostedDSPProcessorPropertySetInterfaceEj_block_invoke(uint64_t a1)
{
  int8x8_t v2 = *(uint64_t **)(*(void *)(a1 + 40) + 2080);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 == v4)
  {
LABEL_9:
    long long v7 = 0uLL;
    long long v10 = 0u;
    goto LABEL_11;
  }
  int v5 = *(_DWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *(void *)(v3 + 16);
    if (*(_DWORD *)(v6 + 4) == v5 || *(_DWORD *)(v6 + 8) == v5) {
      break;
    }
LABEL_8:
    v3 += 24;
    if (v3 == v4) {
      goto LABEL_9;
    }
  }
  (*(void (**)(long long *__return_ptr))(**(void **)(v6 + 136) + 40))(&v10);
  if (!(void)v10)
  {
    if (*((void *)&v10 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
    }
    goto LABEL_8;
  }
  long long v7 = v10;
LABEL_11:
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  long long v10 = 0uLL;
  long long v9 = *(std::__shared_weak_count **)(v8 + 48);
  *(_OWORD *)(v8 + 40) = v7;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    if (*((void *)&v10 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
    }
  }
}

uint64_t HALS_IOContext_Legacy_Impl::GetOwningDeviceID(HALS_IOContext_Legacy_Impl *this)
{
  return *((unsigned int *)this + 378);
}

uint64_t HALS_IOContext_Legacy_Impl::GetSafetyOffset(HALS_IOContext_Legacy_Impl *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 190);
  if (v2 && *(void *)(v2 + 8)) {
    return (*(_DWORD *)(v2 + 4 * a2 + 320)
  }
                        + *(_DWORD *)(v2 + 4 * a2 + 312)
                        + *(_DWORD *)(v2 + 4 * a2 + 336)
                        + *(_DWORD *)(v2 + 4 * a2 + 344));
  else {
    return 0;
  }
}

double HALS_IOContext_Legacy_Impl::GetActualSampleRate(HALS_IOContext_Legacy_Impl *this)
{
  uint64_t v1 = *((void *)this + 190);
  double result = 0.0;
  if (v1)
  {
    if (*((unsigned char *)this + 1300) && (uint64_t v3 = *(void *)(v1 + 288)) != 0)
    {
      double v4 = *(double *)(v3 + 40 * *(unsigned int *)(v3 + 192) + 200);
      double v5 = 24000000.0 / v4;
      BOOL v6 = v4 == 0.0;
      double result = 0.0;
      if (!v6) {
        return v5;
      }
    }
    else if (*(void *)(v1 + 8))
    {
      return *(double *)(v1 + 768);
    }
  }
  return result;
}

void HALS_IOContext_Legacy_Impl::GetStreamInfo(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, int a5)
{
  unsigned int v8 = a3 / 0x38;
  long long v9 = (void *)(a1 + 1496);
  unsigned int NumberStreams = HALS_IOContextDescription::GetNumberStreams((HALS_IOContextDescription *)(a1 + 1496), a5);
  if (NumberStreams >= v8) {
    unsigned int v11 = v8;
  }
  else {
    unsigned int v11 = NumberStreams;
  }
  *a4 = v11;
  if (v11)
  {
    unint64_t v12 = 0;
    do
    {
      HALS_IOContextDescription::GetStreamInfoAtIndex(v9, a5, v12++, a2);
      a2 += 56;
    }
    while (v12 < *a4);
  }
}

uint64_t HALS_IOContext_Legacy_Impl::GetHandleOverloadWithCatchup(HALS_IOContext_Legacy_Impl *this)
{
  return *((unsigned __int8 *)this + 1469);
}

uint64_t HALS_IOContext_Legacy_Impl::SetHandleOverloadWithCatchup(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1469) = a2;
  return this;
}

uint64_t HALS_IOContext_Legacy_Impl::GetIdentifySpeechDeviceToAllowDeviceRestart(HALS_IOContext_Legacy_Impl *this)
{
  return *((unsigned __int8 *)this + 1336);
}

void HALS_IOContext_Legacy_Impl::SetIdentifySpeechDeviceToAllowDeviceRestart(HALS_IOContext_Legacy_Impl *this, char a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 1300))
  {
    *((unsigned char *)this + 1336) = a2;
    HALS_IOContext_Legacy_Impl::UpdatePowerAssertions((int8x8_t **)this);
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v3 = 136315394;
    double v4 = "HALS_IOContext_Legacy_Impl.cpp";
    __int16 v5 = 1024;
    int v6 = 5102;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::_SetPropertyData: can't set kAudioDevicePropertyIdentifySpeechDeviceToAllowDeviceRestart while playing", (uint8_t *)&v3, 0x12u);
  }
  exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
  *(void *)exceptiouint64_t n = off_1F148A5D8;
  exception[2] = 1852797029;
}

void HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(int8x8_t **this)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)v20);
  if (!*((unsigned char *)this + 1713))
  {
    if (std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(this[203], 0, (uint64_t)&this[203][(unint64_t)this[204] >> 6], this[204] & 0x3F, 1))
    {
      unint64_t v18 = &unk_1F1489A20;
      long long v19 = @"audio-in";
      OS::CF::MutableArray::AppendValue<OS::CF::String>((__CFArray *)cf, @"audio-in");
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v18);
    }
    if (std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(this[200], 0, (uint64_t)&this[200][(unint64_t)this[201] >> 6], this[201] & 0x3F, 1))
    {
      unint64_t v18 = &unk_1F1489A20;
      long long v19 = @"audio-out";
      OS::CF::MutableArray::AppendValue<OS::CF::String>((__CFArray *)cf, @"audio-out");
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v18);
    }
    uint64_t v2 = this[190];
    if (v2)
    {
      OS::CF::String::String((OS::CF::String *)&v18, (const char *)&v2[4]);
      OS::CF::MutableArray::AppendValue<OS::CF::String>((__CFArray *)cf, v19);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v18);
    }
  }
  BOOL v3 = *((unsigned char *)this + 1336) == 0;
  double v4 = this[3];
  int v5 = *(_DWORD *)(*(void *)&v4[8] + 4);
  BOOL v6 = v5 <= 0;
  BOOL v7 = v5 > 0;
  unsigned int v8 = v5 & 0xFFFFFF00;
  int v9 = v5 & ~(v5 >> 31);
  __int32 v10 = v4[2].i32[0];
  if (v6) {
    unsigned int v8 = 0;
  }
  LODWORD(v13) = v10;
  HIDWORD(v13) = v8 & 0xFFFFFF00 | v9;
  BOOL v14 = v7;
  OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)&v15, cf);
  BOOL v15 = &unk_1F1480558;
  BOOL v17 = v3;
  uint64_t v23 = 0;
  unsigned int v11 = operator new(0x30uLL);
  *unsigned int v11 = &unk_1F147B0F0;
  v11[1] = v13;
  *((unsigned char *)v11 + 16) = v14;
  uint64_t v12 = v16;
  uint64_t v16 = 0;
  void v11[3] = &unk_1F1480558;
  v11[4] = v12;
  *((_DWORD *)v11 + 10) = v3;
  uint64_t v23 = v11;
  HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(this, (uint64_t)v22);
}

void sub_1BAE3DED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  std::__function::__value_func<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  OS::CF::UntypedObject::~UntypedObject(v8);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(void *a1, uint64_t a2)
{
  v8[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[170];
  BOOL v3 = (std::__shared_weak_count *)a1[171];
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v4 = a1[168];
    uint64_t v6 = v2;
    BOOL v7 = v3;
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v4 = a1[168];
    uint64_t v6 = a1[170];
    BOOL v7 = 0;
  }
  std::__function::__value_func<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::__value_func[abi:ne180100]((uint64_t)v8, a2);
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v4 + 32));
  if (v5) {
    atomic_store(1u, (unsigned __int8 *)(v4 + 33));
  }
  operator new();
}

void sub_1BAE3E038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a2)
  {
    uint64_t v13 = *(std::__shared_weak_count **)(v11 + 8);
    if (v13) {
      std::__shared_weak_count::__release_weak(v13);
    }
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t *std::unique_ptr<HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(std::function<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>)::$_0,std::default_delete<HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(std::function<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::__function::__value_func<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::~__value_func[abi:ne180100]((void *)(v2 + 16));
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    MEMORY[0x1C1859840](v2, 0x1020C407A7143E5);
  }
  return a1;
}

uint64_t *applesauce::dispatch::v1::async<HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(std::function<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>)::$_0 &>(dispatch_queue_s *,HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(std::function<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>)::$_0 &)::{lambda(void *)#1}::__invoke(void *a1)
{
  unsigned __int8 v5 = a1;
  uint64_t v6 = 0;
  BOOL v7 = 0;
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    BOOL v7 = std::__shared_weak_count::lock(v2);
    if (v7)
    {
      uint64_t v6 = *a1;
      if (v6)
      {
        uint64_t v3 = a1[5];
        if (!v3) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v6);
      }
    }
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return std::unique_ptr<HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(std::function<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>)::$_0,std::default_delete<HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(std::function<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v5);
}

void sub_1BAE3E298(void *a1)
{
}

void sub_1BAE3E2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::unique_ptr<HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(std::function<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>)::$_0,std::default_delete<HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(std::function<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl21UpdatePowerAssertionsEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  v4[2] = &unk_1F1489A20;
  v4[3] = @"PreventUserIdleSystemSleep";
  OS::CF::String::String<int>(v4, @"com.apple.audio.context%d.preventuseridlesleep", v3);
  operator new();
}

void sub_1BAE3E578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a13);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a15);
  MEMORY[0x1C1859840](v16, 0x10C0C40D06D8F89);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a9);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a11);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(a1);
}

void *OS::CF::String::String<int>(void *a1, CFStringRef format, uint64_t a3)
{
  CFStringRef v4 = CFStringCreateWithFormat(0, 0, format, a3);
  *a1 = &unk_1F1489A20;
  a1[1] = v4;
  return a1;
}

IOPMAssertionID **std::unique_ptr<HALB_PowerAssertion>::reset[abi:ne180100](IOPMAssertionID **result, IOPMAssertionID *a2)
{
  uint64_t v2 = *result;
  *double result = a2;
  if (v2)
  {
    if (*v2) {
      IOPMAssertionRelease(*v2);
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v2 + 8));
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v2 + 4));
    JUMPOUT(0x1C1859840);
  }
  return result;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::destroy_deallocate(uint64_t a1)
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 24));

  operator delete((void *)a1);
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::destroy(uint64_t a1)
{
}

OS::CF::UntypedObject *std::__function::__func<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F147B0F0;
  uint64_t v4 = *(void *)(a1 + 8);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  *(void *)(a2 + 8) = v4;
  double result = OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(a2 + 24), *(CFTypeRef *)(a1 + 32));
  *(void *)(a2 + 24) = &unk_1F1480558;
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
  return result;
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = &unk_1F147B0F0;
  v2[1] = v3;
  *((unsigned char *)v2 + 16) = *(unsigned char *)(a1 + 16);
  OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(v2 + 3), *(CFTypeRef *)(a1 + 32));
  v2[3] = &unk_1F1480558;
  *((_DWORD *)v2 + 10) = *(_DWORD *)(a1 + 40);
  return v2;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F147B0F0;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 3));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdatePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F147B0F0;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 3));
  return a1;
}

uint64_t HALS_IOContext_Legacy_Impl::CopyIOThreadOSWorkgroup(HALS_IOContext_Legacy_Impl *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  HALS_IOThread::GetIOThreadOSWorkgroup((HALS_IOThread *)v4, (uint64_t)this + 312);
  uint64_t v2 = caulk::mach::details::retain_os_object(v5, v1);
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v4);
  return v2;
}

uint64_t HALS_IOContext_Legacy_Impl::GetIOThreadOSWorkgroup(HALS_IOContext_Legacy_Impl *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  HALS_IOThread::GetIOThreadOSWorkgroup((HALS_IOThread *)v3, (uint64_t)this + 312);
  uint64_t v1 = v4;
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v3);
  return v1;
}

void HALS_IOContext_Legacy_Impl::SetIOThreadOSWorkgroup(HALS_IOContext_Legacy_Impl *this, os_workgroup_s *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  caulk::mach::os_workgroup_interval_managed::from_get((caulk::mach::os_workgroup_interval_managed *)v7, a2);
  uint64_t v5 = (char *)this + 328;
  int v6 = HALB_Mutex::Lock((HALS_IOContext_Legacy_Impl *)((char *)this + 328));
  uint64_t v12 = MEMORY[0x1E4FB7EA0] + 16;
  uint64_t v4 = caulk::mach::details::retain_os_object(v8, v3);
  long long v14 = v9;
  *(_OWORD *)BOOL v15 = *(_OWORD *)v10;
  *(_OWORD *)&v15[9] = *(_OWORD *)&v10[9];
  uint64_t v12 = MEMORY[0x1E4FB7EA8] + 16;
  uint64_t v13 = v4;
  char v16 = v11;
  operator new();
}

void sub_1BAE3EB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void HALS_IOContext_Legacy_Impl::GetIOProcStreamUsage(HALS_IOContext_Legacy_Impl *this, AudioHardwareIOProcStreamUsage *a2, unsigned int *a3, char a4)
{
  uint64_t v14 = 0;
  BOOL v15 = &v14;
  uint64_t v16 = 0x2000000000;
  int v17 = 0;
  uint64_t v10 = 0;
  char v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  v8[2] = ___ZNK26HALS_IOContext_Legacy_Impl20GetIOProcStreamUsageER30AudioHardwareIOProcStreamUsageRjb_block_invoke;
  v8[3] = &unk_1E6235268;
  char v9 = a4;
  void v8[6] = this;
  void v8[7] = a3;
  v8[8] = a2;
  v8[4] = &v14;
  void v8[5] = &v10;
  uint64_t v5 = (HALB_Mutex *)(*(uint64_t (**)(void))(**((void **)this + 3) + 56))(*((void *)this + 3));
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v8);
  if (*((_DWORD *)v11 + 6))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    int v7 = *((_DWORD *)v11 + 6);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v7;
  }
  *a3 = *((_DWORD *)v15 + 6);
  _Block_object_dispose(&v10, 8);
  _Block_object_dispose(&v14, 8);
}

void sub_1BAE3ED04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK26HALS_IOContext_Legacy_Impl20GetIOProcStreamUsageER30AudioHardwareIOProcStreamUsageRjb_block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (HALS_IOContextDescription *)(*(void *)(a1 + 48) + 1496);
  uint64_t result = HALS_IOContextDescription::GetNumberStreams(v2, *(unsigned __int8 *)(a1 + 72));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 4 * result + 12;
  if (**(_DWORD **)(a1 + 56) < *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      uint64_t v11 = "HALS_IOContext_Legacy_Impl.cpp";
      __int16 v12 = 1024;
      int v13 = 5060;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::GetIOProcStreamUsage: bad property data size for kAudioDevicePropertyIOProcStreamUsage", (uint8_t *)&v10, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 561211770;
  }
  uint64_t v4 = *(void *)(a1 + 64);
  *(_DWORD *)(v4 + 8) = result;
  if (result)
  {
    uint64_t v5 = 0;
    int v6 = *(unsigned __int8 *)(a1 + 72);
    uint64_t v7 = result;
    uint64_t v8 = v4 + 12;
    do
    {
      uint64_t result = HALS_IOContextDescription::IsStreamEnabledAtIndex(v2, v6 != 0, v5);
      *(_DWORD *)(v8 + 4 * v5++) = result;
    }
    while (v7 != v5);
  }
  return result;
}

void sub_1BAE3EEC4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    uint64_t v4 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      int v5 = v4[2];
    }
    else {
      int v5 = 2003329396;
    }
    *(_DWORD *)(*(void *)(*(void *)(v2 + 40) + 8) + 24) = v5;
    __cxa_end_catch();
    JUMPOUT(0x1BAE3EDDCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContext_Legacy_Impl::SetIOProcStreamUsage(HALS_IOContext_Legacy_Impl *this, const AudioHardwareIOProcStreamUsage *a2, unsigned int a3, int a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a3 <= 0xB)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v17 = 136315394;
      *(void *)&v17[4] = "HALS_IOContext_Legacy_Impl.cpp";
      __int16 v18 = 1024;
      int v19 = 5007;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::SetIOProcStreamUsage: bad property data size for kAudioDevicePropertyIOProcStreamUsage", v17, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 561211770;
  }
  munsigned int NumberStreams = a2->mNumberStreams;
  char v9 = (HALS_IOContext_Legacy_Impl *)((char *)this + 1496);
  unsigned int NumberStreams = HALS_IOContextDescription::GetNumberStreams((HALS_IOContext_Legacy_Impl *)((char *)this + 1496), a4);
  unint64_t v11 = ((unint64_t)a3 + 0x3FFFFFFF4) >> 2;
  if (mNumberStreams < v11) {
    LODWORD(v11) = mNumberStreams;
  }
  if (NumberStreams >= v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = NumberStreams;
  }
  *(void *)int v17 = (char *)this + 312;
  *(_DWORD *)&v17[8] = HALB_Mutex::Lock((HALS_IOContext_Legacy_Impl *)((char *)this + 328));
  HALS_IOContextDescription::UnregisterBuffers(v9);
  if (v12)
  {
    uint64_t v13 = 0;
    mStreamIsOuint64_t n = a2->mStreamIsOn;
    do
    {
      HALS_IOContextDescription::SetStreamIsEnabledAtIndex(v9, a4, v13, mStreamIsOn[v13] != 0);
      ++v13;
    }
    while (v12 != v13);
  }
  if ((a4 & 1) == 0) {
    HALS_IOContextDescription::PushStreamUsageToEngines(v9, 1);
  }
  HALS_IOContextDescription::PushStreamUsageToEngines(v9, a4);
  HALS_IOContextDescription::RegisterBuffers(v9);
  HALS_IOContext_Legacy_Impl::_SetProcStreamUsage_ForDSP(this, a4);
  HALS_IOContextDescription::ClearInactiveInputSharedBuffers((uint64_t)v9, *((_DWORD *)this + 330));
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)v17);
  return 0;
}

void sub_1BAE3F0FC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAE3F010);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *HALS_IOContext_Legacy_Impl::_SetProcStreamUsage_ForDSP(_DWORD *this, int a2)
{
  if (this[118] != 1735552612)
  {
    uint64_t v2 = (HALS_IOContext_Legacy_Impl *)this;
    if (this[118] != 1718185577)
    {
      uint64_t v3 = 472;
      if (a2) {
        uint64_t v3 = 464;
      }
      if (*(void *)&this[v3])
      {
        this = (_DWORD *)HALS_IOContextDescription::GetNumberActiveStreams((HALS_IOContextDescription *)(this + 374), a2);
        if (this)
        {
          HALS_IOContext_Legacy_Impl::PauseIO(v2);
          return (_DWORD *)HALS_IOContext_Legacy_Impl::ResumeIO(v2);
        }
      }
    }
  }
  return this;
}

uint64_t HALS_IOContext_Legacy_Impl::PauseIO(HALS_IOContext_Legacy_Impl *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (HALS_IOContext_Legacy_Impl *)((char *)this + 312);
  __p[0] = (char *)this + 312;
  uint64_t v3 = (HALS_IOContext_Legacy_Impl *)((char *)this + 328);
  LODWORD(__p[1]) = HALB_Mutex::Lock((HALS_IOContext_Legacy_Impl *)((char *)this + 328));
  *((unsigned char *)this + 304) = 1;
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)__p);
  os_unfair_recursive_lock_lock_with_options();
  kdebug_trace();
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v11 = 0;
  uint64_t v8 = v2;
  int v9 = HALB_Mutex::Lock(v3);
  if (*((_DWORD *)this + 324) == -1)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 788;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::PauseIO: pause count at maximum", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  if (++*((_DWORD *)this + 324) == 1
    && ((uint64_t v4 = (unint64_t *)((char *)this + 1472), *((void *)this + 185)) || *v4))
  {
    HALS_IOPrewarmManager::GetState((HALS_IOPrewarmManager *)buf, v4);
    *(_OWORD *)std::vector<int> __p = *(_OWORD *)buf;
    uint64_t v11 = *(void *)&buf[16];
    HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v8);
    HALS_IOContext_Legacy_Impl::ResetEngineState_Off(this, (int **)__p);
    uint64_t v5 = 1;
  }
  else
  {
    HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v8);
    uint64_t v5 = 0;
  }
  HALB_IOThread::WaitForState(v2, 1735552612);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  kdebug_trace();
  os_unfair_recursive_lock_unlock();
  return v5;
}

void sub_1BAE3F460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (a2)
  {
    if (__p) {
      operator delete(__p);
    }
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAE3F34CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContext_Legacy_Impl::ResumeIO(HALS_IOContext_Legacy_Impl *this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  os_unfair_recursive_lock_lock_with_options();
  kdebug_trace();
  int v9 = (char *)this + 312;
  int v10 = HALB_Mutex::Lock((HALS_IOContext_Legacy_Impl *)((char *)this + 328));
  if (*((_DWORD *)this + 324)
    && (--*((_DWORD *)this + 324), !*((_DWORD *)this + 324))
    && ((uint64_t v3 = (unint64_t *)((char *)this + 1472), *((void *)this + 185)) || *v3))
  {
    HALS_IOPrewarmManager::GetState((HALS_IOPrewarmManager *)buf, v3);
    long long v8 = *(_OWORD *)buf;
    HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v9);
    uint64_t v4 = (int *)v8;
    if ((void)v8 == *((void *)&v8 + 1))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 955;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::ResetEngineState_On: Unexpected state for prewarming", buf, 0x12u);
      }
    }
    else
    {
      int v5 = *(_DWORD *)(*((void *)&v8 + 1) - 4);
      while (v4 != (int *)(*((void *)&v8 + 1) - 4))
        HALS_IOContext_Legacy_Impl::ChangeEngineState_On((uint64_t)this, *v4++);
      *((_DWORD *)this + 265) = v5;
    }
    HALS_IOContext_Legacy_Impl::StartIOThread((HALS_IOContext_Legacy_Impl *)&v9, (uint64_t)this);
    *(_DWORD *)std::string buf = v10;
    *(_WORD *)&uint8_t buf[4] = 1;
    *(void *)&uint8_t buf[8] = 850045863;
    *(_OWORD *)&buf[16] = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    if (!(_BYTE)v9)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *((_DWORD *)this + 324);
        *(_DWORD *)uint64_t v11 = 136315650;
        uint64_t v12 = "HALS_IOContext_Legacy_Impl.cpp";
        __int16 v13 = 1024;
        int v14 = 972;
        __int16 v15 = 1024;
        int v16 = v6;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContext_Legacy_Impl::ResetEngineState_On: IO is disabled (%d)", v11, 0x18u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    AMCP::Utility::Mach_Port::~Mach_Port((AMCP::Utility::Mach_Port *)buf);
    if ((void)v8) {
      operator delete((void *)v8);
    }
  }
  else
  {
    HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v9);
  }
  kdebug_trace();
  return os_unfair_recursive_lock_unlock();
}

void sub_1BAE3F7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
  {
    AMCP::Utility::Mach_Port::~Mach_Port((AMCP::Utility::Mach_Port *)&a18);
    if ((void)a9) {
      operator delete((void *)a9);
    }
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAE3F570);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContext_Legacy_Impl::ChangeEngineState_On(uint64_t a1, int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 1060) = a2;
  v8[0] = &unk_1F147AFA8;
  v8[1] = HALS_IOContext_Legacy_Impl::StartHardware_Helper;
  v8[2] = a1;
  v8[3] = v8;
  uint64_t v4 = &unk_1F147D4B0;
  v6[0] = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
  v6[1] = v8;
  int v5 = &off_1F147D460;
  uint64_t v7 = v6;
  *(void *)std::string buf = caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
  *(void *)&uint8_t buf[8] = &v7;
  uint64_t v2 = VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(*(void *)(a1 + 1528), *(void *)(a1 + 1536), (uint64_t (**)(void, void *))buf, (uint64_t)&v5, (uint64_t)&v4);
  std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v8);
  if (v2 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1036;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::ChangeEngineState_On: Unexpected error when changing engine prewarming state", buf, 0x12u);
  }
  return v2;
}

void sub_1BAE3F9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Legacy_Impl::StartIOThread(HALS_IOContext_Legacy_Impl *this, uint64_t a2)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**(unsigned int **)(*(void *)(a2 + 24)
                                                                                                  + 64));
  mach_port_t v68 = v4;
  int v5 = (HALS_IOThread *)(a2 + 312);
  uint64_t v66 = a2 + 312;
  int v67 = HALB_Mutex::Lock((HALB_Mutex *)(a2 + 328));
  HasBeenDeactivated = (AMCP::Log::Scope_Registry *)HALS_IOThread::HasBeenDeactivated((HALS_IOThread *)(a2 + 312));
  if (HasBeenDeactivated)
  {
    AMCP::Log::Scope_Registry::get(HasBeenDeactivated);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v32 = **(NSObject ***)&buf[0];
    if (*((void *)&buf[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf[0] + 1));
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = pthread_self();
      mach_port_t v34 = pthread_mach_thread_np(v33);
      LODWORD(buf[0]) = 67109890;
      DWORD1(buf[0]) = v34;
      WORD4(buf[0]) = 2080;
      *(void *)((char *)buf + 10) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD1(buf[1]) = 1024;
      DWORD1(buf[1]) = 632;
      WORD4(buf[1]) = 2080;
      *(void *)((char *)&buf[1] + 10) = "mIOThread.HasBeenDeactivated() == true";
      _os_log_error_impl(&dword_1BAA78000, v32, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Cannot start IO Thread since it has been deactivated", (uint8_t *)buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v65);
    __cxa_allocate_exception(0x40uLL);
    uint64_t v58 = off_1F148A5D8;
    int v59 = 1852797029;
    *(_DWORD *)&v60[8] = 1852797029;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    int v64 = -1;
    *(void *)unint64_t v60 = &unk_1F1487130;
    *(void *)&v60[16] = &unk_1F1487158;
    uint64_t v61 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v60);
    *(void *)&buf[2] = "StartIOResult HALS_IOContext_Legacy_Impl::StartIOThread(mach_port_t, mach_port_t, mach_port_t)";
    *((void *)&buf[2] + 1) = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOContext_Legacy_Impl.cpp";
    LODWORD(buf[3]) = 632;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v53);
    long long v56 = v53;
    uint64_t v57 = v54;
    long long v53 = 0uLL;
    uint64_t v54 = 0;
    unint64_t v55 = (unint64_t)&unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
  }
  *(unsigned char *)(a2 + 304) = 0;
  if (*(_DWORD *)(a2 + 1296))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD6(buf[0]) = 1024;
      *(_DWORD *)((char *)buf + 14) = 713;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContext_Legacy_Impl::StartIOThread: mIODisableCount != 0. IO thread need not be started.", (uint8_t *)buf, 0x12u);
    }
    *(unsigned char *)this = 0;
LABEL_6:
    *(void *)((char *)this + 12) = 0;
    *(void *)((char *)this + 4) = 0;
    *((_DWORD *)this + 5) = 0;
    goto LABEL_61;
  }
  if (!*(void *)(a2 + 1480) && !*(void *)(a2 + 1472))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD6(buf[0]) = 1024;
      *(_DWORD *)((char *)buf + 14) = 650;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContext_Legacy_Impl::StartIOThread: Stop interrupted resume - IO thread need not be started.", (uint8_t *)buf, 0x12u);
    }
    *(unsigned char *)this = 1;
    goto LABEL_6;
  }
  uint64_t v7 = *(void *)(a2 + 1520);
  if (!v7)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_75;
    }
    LODWORD(buf[0]) = 136315394;
    *(void *)((char *)buf + 4) = "HALS_IOContext_Legacy_Impl.cpp";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 655;
    unint64_t v35 = MEMORY[0x1E4F14500];
    unint64_t v36 = "%25s:%-5d  HALS_IOContext_Legacy_Impl::StartIOThread: no master engine info";
    goto LABEL_74;
  }
  if (!*(void *)(v7 + 8))
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_75;
    }
    LODWORD(buf[0]) = 136315394;
    *(void *)((char *)buf + 4) = "HALS_IOContext_Legacy_Impl.cpp";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 656;
    unint64_t v35 = MEMORY[0x1E4F14500];
    unint64_t v36 = "%25s:%-5d  HALS_IOContext_Legacy_Impl::StartIOThread: no master engine";
LABEL_74:
    _os_log_impl(&dword_1BAA78000, v35, OS_LOG_TYPE_ERROR, v36, (uint8_t *)buf, 0x12u);
LABEL_75:
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  uint64_t v8 = *(void *)(*(void *)(a2 + 24) + 80);
  if (v8) {
    (*(void (**)(uint64_t, void))(*(void *)v8 + 24))(v8, 0);
  }
  unsigned int v9 = *(_DWORD *)(a2 + 1320);
  memset((char *)buf + 4, 0, 56);
  long long v10 = buf[1];
  *(_OWORD *)(a2 + 44) = buf[0];
  memset(&v60[4], 0, 18);
  *(_DWORD *)(a2 + 40) = v9;
  *(_OWORD *)(a2 + 60) = v10;
  *(_OWORD *)(a2 + 76) = buf[2];
  *(_OWORD *)(a2 + 88) = *(_OWORD *)((char *)&buf[2] + 12);
  *(_DWORD *)(a2 + 104) = 7;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 140) = 0u;
  *(_OWORD *)(a2 + 124) = 0u;
  *(_OWORD *)(a2 + 108) = 0u;
  *(_DWORD *)(a2 + 168) = 3;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 204) = 0u;
  *(_OWORD *)(a2 + 188) = 0u;
  *(_OWORD *)(a2 + 172) = 0u;
  *(void *)(a2 + 232) = 3;
  *(_DWORD *)(a2 + 240) = 0;
  *(void *)(a2 + 248) = 0;
  *(_DWORD *)(a2 + 256) = v9;
  *(void *)(a2 + 260) = 0;
  long long v11 = *(_OWORD *)v60;
  *(void *)(a2 + 282) = *(void *)&v60[14];
  *(_OWORD *)(a2 + 268) = v11;
  LOBYTE(v53) = 0;
  unint64_t v55 = 0;
  int RealtimePriorityThreadParameters = HALS_IOContext_Legacy_Impl::GetRealtimePriorityThreadParameters((HALS_IOContext_Legacy_Impl *)a2, v9, &v55, (BOOL *)&v53);
  if (RealtimePriorityThreadParameters)
  {
    int v38 = RealtimePriorityThreadParameters;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 136315650;
      *(void *)((char *)buf + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD6(buf[0]) = 1024;
      *(_DWORD *)((char *)buf + 14) = 675;
      WORD1(buf[1]) = 1024;
      DWORD1(buf[1]) = v38;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::GetRealtimePriorityThreadParameters: got an error from calculating the thread parameters, Error: 0x%X", (uint8_t *)buf, 0x18u);
    }
    uint64_t v39 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v39 = off_1F148A5D8;
    v39[2] = v38;
  }
  *(_DWORD *)(a2 + 1056) = 0;
  char v13 = v53;
  *(void *)(a2 + 648) = v55;
  *(unsigned char *)(a2 + 656) = v13;
  std::string::operator=((std::string *)(a2 + 696), (const std::string *)(a2 + 1944));
  if (g_static_start_options == 1 && *(_DWORD *)(a2 + 1380))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD6(buf[0]) = 1024;
      *(_DWORD *)((char *)buf + 14) = 685;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Throwing exception in response to test configuration", (uint8_t *)buf, 0x12u);
    }
    uint64_t v46 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v46 = off_1F148A5D8;
    v46[2] = 1852797029;
  }
  *(void *)unint64_t v60 = a2 + 328;
  *(_DWORD *)&v60[8] = HALB_Mutex::Lock((HALB_Mutex *)(a2 + 328));
  int v14 = *(_opaque_pthread_t **)(a2 + 400);
  if (v14 != pthread_self() && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf[0]) = 136315394;
    *(void *)((char *)buf + 4) = "HALB_IOThread.cpp";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 247;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::_Start: this thread ought to lock the lock", (uint8_t *)buf, 0x12u);
  }
  if (*(unsigned char *)(a2 + 485))
  {
    int v20 = 58;
LABEL_80:
    HALB_Guard::Locker::~Locker((HALB_Mutex **)v60);
    goto LABEL_81;
  }
  if (*(void *)(a2 + 320) && *(unsigned char *)(a2 + 484)) {
    HALB_IOThread::_WaitForState((HALB_IOThread *)(a2 + 312), 1735552612);
  }
  *(unsigned char *)(a2 + 484) = 0;
  if (*(_DWORD *)(a2 + 488))
  {
    unsigned int v15 = 0;
    *(_DWORD *)(a2 + 472) = 2002872692;
    while (!*(unsigned char *)(a2 + 484))
    {
      if (!*(_DWORD *)(a2 + 488) || v15 > 0x13) {
        break;
      }
      int v17 = HALB_Guard::WaitFor((HALB_Guard *)(a2 + 328), 0x5F5E100uLL);
      ++v15;
      if (*(_DWORD *)(a2 + 488) && v17 && v17 != 60)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf[0]) = 136315394;
          *(void *)((char *)buf + 4) = "HALB_IOThread.cpp";
          WORD6(buf[0]) = 1024;
          *(_DWORD *)((char *)buf + 14) = 286;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::_Start: wait failed while waiting for IO to become enabled", (uint8_t *)buf, 0x12u);
        }
        long long v18 = __cxa_allocate_exception(0x10uLL);
        *(void *)long long v18 = off_1F148A5D8;
        void v18[2] = 1852797029;
      }
    }
    if (!*(unsigned char *)(a2 + 484) && *(_DWORD *)(a2 + 488))
    {
      BOOL v47 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
      if (v47)
      {
        LODWORD(buf[0]) = 136315394;
        *(void *)((char *)buf + 4) = "HALB_IOThread.cpp";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 290;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALB_IOThread::_Start: IO is still disabled after waiting", (uint8_t *)buf, 0x12u);
      }
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v47);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      long long v48 = (AMCP::Log::Scope_Registry *)*((void *)&buf[0] + 1);
      unsigned __int8 v49 = **(NSObject ***)&buf[0];
      if (*((void *)&buf[0] + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf[0] + 1));
      }
      AMCP::Log::Scope_Registry::get(v48);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      os_signpost_id_t v50 = os_signpost_id_make_with_pointer(**(os_log_t **)&buf[0], (const void *)(a2 + 312));
      if (*((void *)&buf[0] + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf[0] + 1));
      }
      if (v50 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v49))
      {
        LOWORD(buf[0]) = 0;
        _os_signpost_emit_with_name_impl(&dword_1BAA78000, v49, OS_SIGNPOST_EVENT, v50, "Error", "HALB_IOThread::_Start: IO is still disabled after waiting", (uint8_t *)buf, 2u);
      }
      *(_DWORD *)(a2 + 472) = 1735552612;
      HALB_Guard::NotifyAll((pthread_cond_t *)(a2 + 328));
      int v20 = 35;
      goto LABEL_80;
    }
  }
  if (*(unsigned char *)(a2 + 484)
    || ((int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(a2 + 312), v20 = v19, v19 != 37)
      ? (BOOL v21 = v19 == 0)
      : (BOOL v21 = 1),
        v21))
  {
    int v20 = HALB_IOThread::_WaitForState((HALB_IOThread *)(a2 + 312), 1735354734);
  }
  HALB_Guard::Locker::~Locker((HALB_Mutex **)v60);
  if (v20 && v20 != 89)
  {
LABEL_81:
    AMCP::Log::Scope_Registry::get(v22);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v40 = (AMCP::Log::Scope_Registry *)*((void *)&buf[0] + 1);
    uint64_t v41 = **(NSObject ***)&buf[0];
    if (*((void *)&buf[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf[0] + 1));
    }
    AMCP::Log::Scope_Registry::get(v40);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    os_signpost_id_t v42 = os_signpost_id_make_with_pointer(**(os_log_t **)&buf[0], (const void *)a2);
    if (*((void *)&buf[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf[0] + 1));
    }
    if (v42 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v41))
    {
      LODWORD(buf[0]) = 67109120;
      DWORD1(buf[0]) = v20;
      _os_signpost_emit_with_name_impl(&dword_1BAA78000, v41, OS_SIGNPOST_EVENT, v42, "Error", "HALS_IOContext_Legacy_Impl::StartIOThread: got an error from starting the IO thread, Error: 0x%X", (uint8_t *)buf, 8u);
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 136315650;
      *(void *)((char *)buf + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD6(buf[0]) = 1024;
      *(_DWORD *)((char *)buf + 14) = 695;
      WORD1(buf[1]) = 1024;
      DWORD1(buf[1]) = v20;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::StartIOThread: got an error from starting the IO thread, Error: 0x%X", (uint8_t *)buf, 0x18u);
    }
    long long v43 = __cxa_allocate_exception(0x10uLL);
    *(void *)long long v43 = off_1F148A5D8;
    v43[2] = v20;
  }
  int v23 = *(_DWORD *)(a2 + 1056);
  if (v23)
  {
    v60[0] = HIBYTE(*(_DWORD *)(a2 + 1056));
    v60[1] = BYTE2(v23);
    v60[2] = BYTE1(v23);
    void v60[3] = v23;
    v60[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 136315906;
      *(void *)((char *)buf + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD6(buf[0]) = 1024;
      *(_DWORD *)((char *)buf + 14) = 697;
      WORD1(buf[1]) = 1024;
      DWORD1(buf[1]) = v23;
      WORD4(buf[1]) = 2080;
      *(void *)((char *)&buf[1] + 10) = v60;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::StartIOThread: the IO thread failed to start, Error: %d (%s)", (uint8_t *)buf, 0x22u);
    }
    uint64_t v44 = __cxa_allocate_exception(0x10uLL);
    int v45 = *(_DWORD *)(a2 + 1056);
    *(void *)uint64_t v44 = off_1F148A5D8;
    int v44[2] = v45;
  }
  HALS_IOContext_Legacy_Impl::CreateMicrophoneInfo(a2, (uint64_t *)&v68);
  TapInfo = (HALS_PlatformBehaviors *)HALS_IOContext_Legacy_Impl::CreateTapInfo(a2);
  HALS_IOContext::UpdateInputStreamUsageStatus(TapInfo);
  uint64_t v25 = *(void *)(a2 + 1704);
  if (v25)
  {
    if (*(void *)(v25 + 8))
    {
      int v26 = *(_DWORD *)(v25 + 60);
      if (!v26)
      {
LABEL_56:
        uint64_t v25 = 0;
        goto LABEL_57;
      }
      if (*(void *)(v25 + 16))
      {
        uint64_t v27 = mach_port_mod_refs(*MEMORY[0x1E4F14960], *(_DWORD *)(v25 + 60), 0, 1);
        if (v27)
        {
          uint64_t v51 = v27;
          unint64_t v52 = __cxa_allocate_exception(0x20uLL);
          *(void *)&buf[0] = &unk_1F147E6C0;
          MEMORY[0x1C1859250](v52, v51, buf, "failed to add the send right");
          __cxa_throw(v52, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
        }
        uint64_t v25 = *(unsigned int *)(v25 + 16);
        goto LABEL_57;
      }
    }
    int v26 = 0;
    goto LABEL_56;
  }
  int v26 = 0;
LABEL_57:
  uint64_t v28 = *(void *)(*(void *)(a2 + 24) + 80);
  if (v28) {
    int v29 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 96))(v28);
  }
  else {
    int v29 = 0;
  }
  int v30 = HALS_IOThread::CopyWorkgroupIntervalPort(v5);
  *(unsigned char *)this = 1;
  *((_DWORD *)this + 1) = v29;
  *((_DWORD *)this + 2) = v30;
  *((_DWORD *)this + 3) = v26;
  *((void *)this + 2) = v25;
LABEL_61:
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v66);
  HALS_ObjectMap::ReleaseObject(v4, v31);
}

void sub_1BAE40838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, std::exception a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&a29);
  HALS_ObjectMap::ReleaseObject(v29, v31);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContext_Legacy_Impl::GetRealtimePriorityThreadParameters(HALS_IOContext_Legacy_Impl *this, unsigned int a2, unint64_t *a3, BOOL *a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 190);
  if (!v4 || !*(void *)(v4 + 8)) {
    return 4;
  }
  if (!a2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      unsigned int v9 = "HALS_IOContext_Legacy_Impl.cpp";
      __int16 v10 = 1024;
      int v11 = 2714;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ConfigureThreadForRealtimePriority - inIOBufferFrameSize must be nonzero", (uint8_t *)&v8, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  uint64_t result = 0;
  *a3 = (unint64_t)(*(double *)(*(void *)(v4 + 288)
                                     + 40 * *(unsigned int *)(*(void *)(v4 + 288) + 192)
                                     + 200)
                         * (double)a2);
  *a4 = *((_DWORD *)this + 346) == 1;
  return result;
}

unint64_t HALS_IOContext_Legacy_Impl::CreateMicrophoneInfo(uint64_t a1, uint64_t *a2)
{
  int NumberStreams = HALS_IOContextDescription::GetNumberStreams((HALS_IOContextDescription *)(a1 + 1496), 1);
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 24) + 16);
  int v6 = *(_DWORD *)(a1 + 1716);
  BOOL active = HALS_IOContext_Legacy_Impl::ActiveInputStreamsSecurelyMuted(a1, 0);
  uint64_t v8 = *a2;
  if (*a2)
  {
    platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors((HALS_PlatformBehaviors *)active);
    uint64_t v10 = (*(uint64_t (**)(uint64_t *))(*platform_behaviors + 64))(platform_behaviors);
    if ((*(unsigned __int16 (**)(uint64_t))(*(void *)v10 + 40))(v10) < 0x100u) {
      HALS_ClientEntitlements::HasEntitlementWithBooleanValue((HALS_ClientEntitlements *)(v8 + 288), @"com.apple.private.audio.suppress-mic-indicator");
    }
  }
  return (NumberStreams - v6) | (unint64_t)(v5 << 32);
}

uint64_t HALS_IOContext_Legacy_Impl::CreateTapInfo(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 1716);
  uint64_t v2 = *(unsigned int *)(*(void *)(a1 + 24) + 16);
  HALS_IOContext_Legacy_Impl::ActiveInputStreamsSecurelyMuted(a1, 1);
  return v1 | (v2 << 32);
}

BOOL HALS_IOContext_Legacy_Impl::ActiveInputStreamsSecurelyMuted(uint64_t a1, int a2)
{
  if (!a2)
  {
    int v4 = *(unsigned __int8 *)(a1 + 1376);
    goto LABEL_5;
  }
  if (a2 == 1)
  {
    int v4 = *(unsigned __int8 *)(a1 + 1377);
LABEL_5:
    BOOL v5 = v4 != 0;
    goto LABEL_7;
  }
  BOOL v5 = 0;
LABEL_7:
  uint64_t v6 = 1;
  if (HALS_IOContextDescription::GetNumberStreams((HALS_IOContextDescription *)(a1 + 1496), 1))
  {
    int v7 = std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(*(int8x8_t **)(a1 + 1624), 0, *(void *)(a1 + 1624) + 8 * (*(void *)(a1 + 1632) >> 6), *(void *)(a1 + 1632) & 0x3F, 1);
    char v8 = !v5;
    if (!v7) {
      char v8 = 1;
    }
    if ((v8 & 1) == 0)
    {
      if (a2) {
        BOOL v9 = 1;
      }
      else {
        BOOL v9 = *(unsigned char *)(a1 + 32) == 0;
      }
      return !v9;
    }
  }
  return v6;
}

uint64_t VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, void *), uint64_t a4, uint64_t a5)
{
  if (a1 == a2) {
    return 0;
  }
  v17[10] = v5;
  v17[11] = v6;
  uint64_t v11 = a1;
  uint64_t v12 = 0;
  char v13 = (uint64_t (**)(void, void))(a3 + 1);
  for (char i = 1; ; char i = 0)
  {
    if (i) {
      uint64_t v12 = 0;
    }
    else {
      ++v12;
    }
    v17[0] = v11;
    v17[1] = v12;
    if (((*(uint64_t (**)(uint64_t, void *))(*(void *)a4 + 16))(a4, v17) & 1) == 0
      && ((*(uint64_t (**)(uint64_t, void *))(*(void *)a5 + 16))(a5, v17) & 1) == 0)
    {
      v16[0] = v11;
      v16[1] = v12;
      uint64_t result = (*a3)(v13, v16);
      if (result) {
        break;
      }
    }
    v11 += 8;
    if (v11 == a2) {
      return 0;
    }
  }
  return result;
}

void *std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>(uint64_t (****a1)(uint64_t, uint64_t), uint64_t **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)**a2 + 16))(**a2);
  if (result)
  {
    uint64_t v5 = *v3;
    uint64_t v6 = (uint64_t)(*v2 + 1);
    int v7 = **v2;
    return v7(v6, v5);
  }
  return result;
}

uint64_t caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void *std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__16__bindIRFiP26HALS_IOContext_Legacy_ImplR17HALS_IOEngineInfoEJS2_RKNS_12placeholders4__phILi1EEEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(void *)(a1 + 16));
}

__n128 std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F147AFA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F147AFA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::~__func()
{
}

uint64_t HALS_IOContext_Legacy_Impl::StartHardware_Helper(HALS_IOContext_Legacy_Impl *this, HALS_IOContext_Legacy_Impl *a2, HALS_IOEngineInfo *a3)
{
  uint64_t result = *((void *)a2 + 1);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, HALS_IOEngineInfo *))(*(void *)result + 688))(result, *((void *)this + 3), a3);
  }
  return result;
}

void sub_1BAE410E8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315394;
      *(void *)((char *)&a9 + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 3438;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::StartHardware_Helper: Caught exception trying to start hardware", (uint8_t *)&a9, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAE410C0);
  }
  _Unwind_Resume(a1);
}

void HALS_IOContext_Legacy_Impl::ResetEngineState_Off(HALS_IOContext_Legacy_Impl *a1, int **a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    int v9 = 136315394;
    uint64_t v10 = "HALS_IOContext_Legacy_Impl.cpp";
    __int16 v11 = 1024;
    int v12 = 984;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::ResetEngineState_Off: Unexpected state for prewarming", (uint8_t *)&v9, 0x12u);
    int v4 = *a2;
    uint64_t v5 = a2[1];
  }
  if (v4 != v5)
  {
    int v8 = *(v5 - 1);
    uint64_t v6 = v5 - 1;
    int v7 = v8;
    a2[1] = v6;
    while (v4 != v6)
      HALS_IOContext_Legacy_Impl::ChangeEngineState_Off((uint64_t)a1, *v4++, 0);
    *((_DWORD *)a1 + 265) = v7;
  }
LABEL_9:
  HALS_IOContext_Legacy_Impl::StopIOThread(a1);
}

uint64_t HALS_IOContext_Legacy_Impl::ChangeEngineState_Off(uint64_t a1, int a2, int a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 1060) = a2;
  uint64_t v5 = operator new(0x20uLL);
  void *v5 = &unk_1F147B058;
  v5[1] = HALS_IOContext_Legacy_Impl::StopHardware_Helper;
  v5[2] = a1;
  *((_DWORD *)v5 + 6) = a3;
  v12[3] = v5;
  int v8 = &unk_1F147D4B0;
  v10[0] = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
  v10[1] = v12;
  int v9 = &off_1F147D460;
  __int16 v11 = v10;
  *(void *)std::string buf = caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
  *(void *)&uint8_t buf[8] = &v11;
  uint64_t v6 = VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(*(void *)(a1 + 1528), *(void *)(a1 + 1536), (uint64_t (**)(void, void *))buf, (uint64_t)&v9, (uint64_t)&v8);
  std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v12);
  if (v6 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&_OWORD buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1046;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::ChangeEngineState_Off: Unexpected error when changing engine prewarming state", buf, 0x12u);
  }
  return v6;
}

void sub_1BAE4141C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Legacy_Impl::StopIOThread(HALS_IOContext_Legacy_Impl *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**(unsigned int **)(*((void *)this + 3)
                                                                                                  + 64));
  int v9 = v2;
  int v7 = (char *)this + 312;
  int v8 = HALB_Mutex::Lock((HALS_IOContext_Legacy_Impl *)((char *)this + 328));
  uint64_t v3 = *(void *)(*((void *)this + 3) + 80);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 120))(v3);
  }
  uint64_t v10 = (HALS_IOContext_Legacy_Impl *)((char *)this + 328);
  int v11 = HALB_Mutex::Lock((HALS_IOContext_Legacy_Impl *)((char *)this + 328));
  int v4 = (_opaque_pthread_t *)*((void *)this + 50);
  if (v4 != pthread_self() && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v13 = "HALB_IOThread.cpp";
    __int16 v14 = 1024;
    int v15 = 313;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::_Stop: this thread ought to lock the lock", buf, 0x12u);
  }
  HALB_Guard::NotifyAll((pthread_cond_t *)((char *)this + 328));
  *((unsigned char *)this + 484) = 1;
  if (!HALB_IOThread::IsCurrentThread((HALS_IOContext_Legacy_Impl *)((char *)this + 312), 1)) {
    HALB_IOThread::_WaitForState((HALS_IOContext_Legacy_Impl *)((char *)this + 312), 1735552612);
  }
  HALB_Guard::Locker::~Locker(&v10);
  HALS_IOContext_Legacy_Impl::CreateMicrophoneInfo((uint64_t)this, (uint64_t *)&v9);
  TapInfo = (HALS_PlatformBehaviors *)HALS_IOContext_Legacy_Impl::CreateTapInfo((uint64_t)this);
  HALS_IOContext::UpdateInputStreamUsageStatus(TapInfo);
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v7);
  HALS_ObjectMap::ReleaseObject(v2, v6);
}

void sub_1BAE415DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t HALS_IOContext_Legacy_Impl::StopHardware_Helper(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 696))(v3, *(void *)(a1 + 24));
  }
  return 0;
}

void sub_1BAE416B8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315394;
      *(void *)((char *)&a9 + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 3456;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::StopHardware_Helper: Caught exception trying to stop hardware", (uint8_t *)&a9, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAE4168CLL);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,HALS_IOPrewarmManager::EngineState),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,HALS_IOPrewarmManager::EngineState&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,HALS_IOPrewarmManager::EngineState),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,HALS_IOPrewarmManager::EngineState&>>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,HALS_IOPrewarmManager::EngineState),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,HALS_IOPrewarmManager::EngineState&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,HALS_IOPrewarmManager::EngineState),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,HALS_IOPrewarmManager::EngineState&>>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__16__bindIRFiP26HALS_IOContext_Legacy_ImplR17HALS_IOEngineInfoN21HALS_IOPrewarmManager11EngineStateEEJS2_RKNS_12placeholders4__phILi1EEERS6_EEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,HALS_IOPrewarmManager::EngineState),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,HALS_IOPrewarmManager::EngineState&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,HALS_IOPrewarmManager::EngineState),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,HALS_IOPrewarmManager::EngineState&>>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(a1 + 8))(*(void *)(a1 + 16), a2, *(unsigned int *)(a1 + 24));
}

__n128 std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,HALS_IOPrewarmManager::EngineState),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,HALS_IOPrewarmManager::EngineState&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,HALS_IOPrewarmManager::EngineState),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,HALS_IOPrewarmManager::EngineState&>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F147B058;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,HALS_IOPrewarmManager::EngineState),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,HALS_IOPrewarmManager::EngineState&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,HALS_IOPrewarmManager::EngineState),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,HALS_IOPrewarmManager::EngineState&>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F147B058;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,HALS_IOPrewarmManager::EngineState),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,HALS_IOPrewarmManager::EngineState&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,HALS_IOPrewarmManager::EngineState),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,HALS_IOPrewarmManager::EngineState&>>,int ()(HALS_IOEngineInfo &)>::~__func()
{
}

uint64_t HALS_IOContext_Legacy_Impl::GetStreamUsage(uint64_t a1, unsigned int *a2, unsigned int a3, int a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v7 = (HALS_IOContextDescription *)(a1 + 1496);
  unsigned int NumberStreams = HALS_IOContextDescription::GetNumberStreams((HALS_IOContextDescription *)(a1 + 1496), a4);
  uint64_t v9 = 4 * NumberStreams + 4;
  if (v9 > a3)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      uint64_t v16 = "HALS_IOContext_Legacy_Impl.cpp";
      __int16 v17 = 1024;
      int v18 = 4963;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::GetStreamUsage: bad property data size for kAudioIOContextProperty_StreamUsage", (uint8_t *)&v15, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 561211770;
  }
  *a2 = NumberStreams;
  if (NumberStreams)
  {
    uint64_t v10 = 0;
    uint64_t v11 = NumberStreams;
    int v12 = a2 + 1;
    do
    {
      v12[v10] = HALS_IOContextDescription::IsStreamEnabledAtIndex(v7, a4, v10);
      ++v10;
    }
    while (v11 != v10);
  }
  return v9;
}

uint64_t HALS_IOContext_Legacy_Impl::SetStreamUsage(_DWORD *a1, unsigned int *a2, unsigned int a3, int a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a3 <= 3)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v19 = 136315394;
      *(void *)&v19[4] = "HALS_IOContext_Legacy_Impl.cpp";
      __int16 v20 = 1024;
      int v21 = 4880;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::SetStreamUsage: bad property data size for kAudioIOContextProperty_StreamUsage", v19, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 561211770;
  }
  unsigned int v8 = *a2;
  uint64_t v9 = (HALS_IOContextDescription *)(a1 + 374);
  unsigned int NumberStreams = HALS_IOContextDescription::GetNumberStreams((HALS_IOContextDescription *)(a1 + 374), a4);
  unint64_t v11 = ((unint64_t)a3 + 0x3FFFFFFFCLL) >> 2;
  if (v8 < v11) {
    LODWORD(v11) = v8;
  }
  if (NumberStreams >= v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = NumberStreams;
  }
  *(void *)uint64_t v19 = a1 + 78;
  *(_DWORD *)&v19[8] = HALB_Mutex::Lock((HALB_Mutex *)(a1 + 82));
  if (v12)
  {
    uint64_t v13 = 0;
    char v14 = 0;
    do
    {
      while (1)
      {
        int IsStreamEnabledAtIndex = HALS_IOContextDescription::IsStreamEnabledAtIndex(v9, a4, v13);
        unsigned int v16 = a2[v13 + 1];
        if (v16 == IsStreamEnabledAtIndex) {
          break;
        }
        HALS_IOContextDescription::SetStreamIsEnabledAtIndex(v9, a4, v13, v16 != 0);
        kdebug_trace();
        ++v13;
        char v14 = 1;
        if (v13 == v12) {
          goto LABEL_15;
        }
      }
      ++v13;
    }
    while (v12 != v13);
    if ((v14 & 1) == 0) {
      goto LABEL_18;
    }
LABEL_15:
    HALS_IOContextDescription::UnregisterBuffers(v9);
    if ((a4 & 1) == 0) {
      HALS_IOContextDescription::PushStreamUsageToEngines(v9, 1);
    }
    HALS_IOContextDescription::PushStreamUsageToEngines(v9, a4);
    HALS_IOContextDescription::RegisterBuffers(v9);
    HALS_IOContext_Legacy_Impl::_SetProcStreamUsage_ForDSP(a1, a4);
    HALS_IOContextDescription::ClearInactiveInputSharedBuffers((uint64_t)v9, a1[330]);
  }
LABEL_18:
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)v19);
  return 0;
}

void sub_1BAE41C04(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAE41C1C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAE41B10);
  }
  JUMPOUT(0x1BAE41C0CLL);
}

void sub_1BAE41C7C()
{
}

uint64_t HALS_IOContext_Legacy_Impl::GetMasterDevice(HALS_IOContext_Legacy_Impl *this)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK26HALS_IOContext_Legacy_Impl15GetMasterDeviceEv_block_invoke;
  v4[3] = &unk_1E6235240;
  void v4[4] = &v5;
  void v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(void))(**((void **)this + 3) + 56))(*((void *)this + 3));
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BAE41D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK26HALS_IOContext_Legacy_Impl15GetMasterDeviceEv_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 1520);
  if (v1)
  {
    uint64_t v2 = result;
    __n128 result = *(void *)(v1 + 8);
    if (result)
    {
      __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 320))(result);
      if (result) {
        *(_DWORD *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) = *(_DWORD *)(result + 16);
      }
    }
  }
  return result;
}

float HALS_IOContext_Legacy_Impl::GetIOCycleUsage(HALS_IOContext_Legacy_Impl *this)
{
  return *((float *)this + 332);
}

void HALS_IOContext_Legacy_Impl::SetIOCycleUsage(HALS_IOContext_Legacy_Impl *this, float a2)
{
  uint64_t v15 = 0;
  unsigned int v16 = &v15;
  uint64_t v17 = 0x2000000000;
  char v18 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2000000000;
  int v14 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = ___ZN26HALS_IOContext_Legacy_Impl15SetIOCycleUsageEf_block_invoke;
  void v9[3] = &unk_1E6235218;
  v9[5] = &v11;
  void v9[6] = this;
  float v10 = a2;
  uint64_t v9[4] = &v15;
  uint64_t v3 = (HALB_Mutex *)(*(uint64_t (**)(void))(**((void **)this + 3) + 56))(*((void *)this + 3));
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v9);
  if (*((_DWORD *)v12 + 6))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    int v8 = *((_DWORD *)v12 + 6);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v8;
  }
  if (*((unsigned char *)v16 + 24))
  {
    uint64_t v4 = *((void *)this + 3);
    uint64_t v5 = (HALS_NotificationManager *)*(unsigned int *)(v4 + 72);
    if (!v5) {
      uint64_t v5 = (HALS_NotificationManager *)*(unsigned int *)(v4 + 16);
    }
    uint64_t v6 = **(unsigned int **)(v4 + 64);
    *(void *)&v19.AudioObjectPropertySelector mSelector = 0x676C6F626E637963;
    v19.mElement = 0;
    HALS_Object::PropertiesChanged((HALS_Object *)v4, v5, v6, 1u, &v19);
  }
  _Block_object_dispose(&v11, 8);
  _Block_object_dispose(&v15, 8);
}

void sub_1BAE41F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void ___ZN26HALS_IOContext_Legacy_Impl15SetIOCycleUsageEf_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v5 = v2 + 312;
  int v6 = HALB_Mutex::Lock((HALB_Mutex *)(v2 + 328));
  float v3 = *(float *)(a1 + 56);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(float *)(v2 + 1328) != v3;
  *(float *)(v2 + 1328) = v3;
  uint64_t v4 = *(void *)(*(void *)(v2 + 24) + 80);
  if (v4) {
    (*(void (**)(uint64_t, double))(*(void *)v4 + 48))(v4, *(float *)(a1 + 56));
  }
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v5);
}

void sub_1BAE42038(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&a9);
  uint64_t v12 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    *(_DWORD *)(*(void *)(*(void *)(v9 + 40) + 8) + 24) = v12[2];
  }
  else {
    *(_DWORD *)(*(void *)(*(void *)(v9 + 40) + 8) + 24) = 2003329396;
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAE42024);
}

void HALS_IOContext_Legacy_Impl::SetBufferFrameSize(HALS_IOContext_Legacy_Impl *this, int a2, char a3)
{
  uint64_t v17 = 0;
  char v18 = &v17;
  uint64_t v19 = 0x2000000000;
  char v20 = 0;
  uint64_t v13 = 0;
  int v14 = &v13;
  uint64_t v15 = 0x2000000000;
  int v16 = 0;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  void v11[2] = ___ZN26HALS_IOContext_Legacy_Impl18SetBufferFrameSizeEjb_block_invoke;
  void v11[3] = &unk_1E62351F0;
  v11[5] = &v13;
  void v11[6] = this;
  int v12 = a2;
  uint8_t v11[4] = &v17;
  uint64_t v5 = (HALB_Mutex *)(*(uint64_t (**)(void))(**((void **)this + 3) + 56))(*((void *)this + 3));
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v11);
  if (*((_DWORD *)v14 + 6))
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    int v10 = *((_DWORD *)v14 + 6);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v10;
  }
  if (*((unsigned char *)v18 + 24) && (a3 & 1) == 0)
  {
    uint64_t v6 = *((void *)this + 3);
    uint64_t v7 = (HALS_NotificationManager *)*(unsigned int *)(v6 + 72);
    if (!v7) {
      uint64_t v7 = (HALS_NotificationManager *)*(unsigned int *)(v6 + 16);
    }
    uint64_t v8 = **(unsigned int **)(v6 + 64);
    *(void *)&v21.AudioObjectPropertySelector mSelector = 0x676C6F626673697ALL;
    v21.mElement = 0;
    HALS_Object::PropertiesChanged((HALS_Object *)v6, v7, v8, 1u, &v21);
  }
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
}

void sub_1BAE42220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN26HALS_IOContext_Legacy_Impl18SetBufferFrameSizeEjb_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  *(unsigned char *)(v1 + 1325) = 1;
  if (!*(unsigned char *)(v1 + 1324))
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(v1 + 1520);
    double v4 = 13.23;
    if (v3 && *(void *)(v3 + 8)) {
      double v4 = *(double *)(v3 + 768) * 0.0003;
    }
    HALS_IOContextDescription::CalculateMaximumIOBufferFrameSize((HALS_IOContextDescription *)(v1 + 1496));
    double v6 = v5;
    __n128 result = HALS_IOContext_Legacy_Impl::_GetDevicesDesiredIOBufferFrameSize((HALS_IOContext_Legacy_Impl *)v1, (HALS_IOEngineInfo *)*(unsigned int *)(v2 + 56));
    unsigned int v7 = vcvtpd_u64_f64(v4);
    if (result > v7) {
      unsigned int v7 = result;
    }
    if (v7 >= v6) {
      unsigned int v7 = v6;
    }
    *(unsigned char *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) = *(_DWORD *)(v1 + 1320) != v7;
    *(_DWORD *)(v1 + 1320) = v7;
  }
  return result;
}

void sub_1BAE422F8(void *a1, int a2)
{
  double v4 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    *(_DWORD *)(*(void *)(*(void *)(v2 + 40) + 8) + 24) = v4[2];
  }
  else {
    *(_DWORD *)(*(void *)(*(void *)(v2 + 40) + 8) + 24) = 2003329396;
  }
  __cxa_end_catch();
}

uint64_t HALS_IOContext_Legacy_Impl::_GetDevicesDesiredIOBufferFrameSize(HALS_IOContext_Legacy_Impl *this, HALS_IOEngineInfo *a2)
{
  void v12[4] = *MEMORY[0x1E4F143B8];
  unsigned int v7 = a2;
  double v4 = (unsigned int *)*((void *)this + 190);
  if (!v4
    || !HALS_IOContext_Legacy_Impl::GetDevicesDesiredIOBufferFrameSize_EngineHelper((HALS_IOContext_Legacy_Impl *)&v7, v4, a2))
  {
    uint64_t v5 = operator new(0x20uLL);
    void *v5 = &unk_1F147C300;
    v5[1] = HALS_IOContext_Legacy_Impl::GetDevicesDesiredIOBufferFrameSize_EngineHelper;
    v5[2] = &v7;
    *((_DWORD *)v5 + 6) = a2;
    v12[3] = v5;
    v9[0] = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
    v9[1] = v12;
    uint64_t v8 = &off_1F147D460;
    int v10 = v9;
    v11[0] = (uint64_t (*)(void, void *))caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
    v11[1] = (uint64_t (*)(void, void *))&v10;
    VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine>(*((void *)this + 191), *((void *)this + 192), v11, (uint64_t)&v8);
    std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v12);
  }
  return v7;
}

void sub_1BAE4247C(_Unwind_Exception *a1)
{
  std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100]((void *)(v1 - 56));
  _Unwind_Resume(a1);
}

unsigned int *HALS_IOContext_Legacy_Impl::GetDevicesDesiredIOBufferFrameSize_EngineHelper(HALS_IOContext_Legacy_Impl *this, unsigned int *a2, HALS_IOEngineInfo *a3)
{
  int v9 = (int)a3;
  uint64_t v7 = *(void *)"zsfcbolg";
  int v8 = 0;
  __n128 result = (unsigned int *)*((void *)a2 + 1);
  if (result)
  {
    __n128 result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 320))(result);
    if (result)
    {
      uint64_t v5 = result;
      __n128 result = (unsigned int *)(*(uint64_t (**)(unsigned int *, void, uint64_t *, void))(*(void *)result + 88))(result, result[4], &v7, 0);
      if (result)
      {
        int v6 = 0;
        (*(void (**)(unsigned int *, void, uint64_t *, uint64_t, int *, HALS_IOContext_Legacy_Impl *, uint64_t, int *, void))(*(void *)v5 + 112))(v5, v5[4], &v7, 4, &v6, this, 4, &v9, 0);
        return (unsigned int *)*(unsigned int *)this;
      }
    }
  }
  return result;
}

uint64_t VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine>(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, void *), uint64_t a4)
{
  if (a1 == a2) {
    return 0;
  }
  v15[8] = v4;
  v15[9] = v5;
  uint64_t v9 = a1;
  uint64_t v10 = 0;
  uint64_t v11 = (uint64_t (**)(void, void))(a3 + 1);
  for (char i = 1; ; char i = 0)
  {
    if (i) {
      uint64_t v10 = 0;
    }
    else {
      ++v10;
    }
    v15[0] = v9;
    v15[1] = v10;
    if (((*(uint64_t (**)(uint64_t, void *))(*(void *)a4 + 16))(a4, v15) & 1) == 0)
    {
      v14[0] = v9;
      v14[1] = v10;
      uint64_t result = (*a3)(v11, v14);
      if (result) {
        break;
      }
    }
    v9 += 8;
    if (v9 == a2) {
      return 0;
    }
  }
  return result;
}

uint64_t caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>(uint64_t (****a1)(uint64_t, uint64_t), uint64_t **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)**a2 + 16))(**a2);
  if (result)
  {
    uint64_t v5 = *v3;
    uint64_t v6 = (uint64_t)(*v2 + 1);
    uint64_t v7 = **v2;
    return v7(v6, v5);
  }
  return result;
}

void *std::__function::__func<std::__bind<int (&)(unsigned int &,HALS_IOEngineInfo &,unsigned int),std::reference_wrapper<unsigned int>,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(unsigned int &,HALS_IOEngineInfo &,unsigned int),std::reference_wrapper<unsigned int>,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t std::__function::__func<std::__bind<int (&)(unsigned int &,HALS_IOEngineInfo &,unsigned int),std::reference_wrapper<unsigned int>,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(unsigned int &,HALS_IOEngineInfo &,unsigned int),std::reference_wrapper<unsigned int>,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__16__bindIRFiRjR17HALS_IOEngineInfojEJNS_17reference_wrapperIjEERKNS_12placeholders4__phILi1EEES1_EEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::__bind<int (&)(unsigned int &,HALS_IOEngineInfo &,unsigned int),std::reference_wrapper<unsigned int>,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(unsigned int &,HALS_IOEngineInfo &,unsigned int),std::reference_wrapper<unsigned int>,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(a1 + 8))(*(void *)(a1 + 16), a2, *(unsigned int *)(a1 + 24));
}

__n128 std::__function::__func<std::__bind<int (&)(unsigned int &,HALS_IOEngineInfo &,unsigned int),std::reference_wrapper<unsigned int>,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(unsigned int &,HALS_IOEngineInfo &,unsigned int),std::reference_wrapper<unsigned int>,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F147C300;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<int (&)(unsigned int &,HALS_IOEngineInfo &,unsigned int),std::reference_wrapper<unsigned int>,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(unsigned int &,HALS_IOEngineInfo &,unsigned int),std::reference_wrapper<unsigned int>,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F147C300;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<std::__bind<int (&)(unsigned int &,HALS_IOEngineInfo &,unsigned int),std::reference_wrapper<unsigned int>,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(unsigned int &,HALS_IOEngineInfo &,unsigned int),std::reference_wrapper<unsigned int>,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::~__func()
{
}

void HALS_IOContext_Legacy_Impl::GetBufferFrameSizeRange(HALS_IOContext_Legacy_Impl *this, AudioValueRange *a2, double a3)
{
  if (*((unsigned char *)this + 1324))
  {
    LODWORD(a3) = *((_DWORD *)this + 330);
    Float64 v4 = (double)*(unint64_t *)&a3;
    a2->mMinimuunint64_t m = v4;
    LODWORD(v4) = *((_DWORD *)this + 330);
    double v5 = (double)*(unint64_t *)&v4;
  }
  else
  {
    uint64_t v6 = *((void *)this + 190);
    double v7 = 13.23;
    if (v6 && *(void *)(v6 + 8)) {
      double v7 = *(double *)(v6 + 768) * 0.0003;
    }
    a2->mMinimuunint64_t m = ceil(v7);
    HALS_IOContextDescription::CalculateMaximumIOBufferFrameSize((HALS_IOContext_Legacy_Impl *)((char *)this + 1496));
  }
  a2->mMaximuunint64_t m = v5;
}

const void *HALS_IOContext_Legacy_Impl::GetComposition(HALS_IOContext_Legacy_Impl *this)
{
  __n128 result = (const void *)*((void *)this + 188);
  if (result)
  {
    CFRetain(result);
    return (const void *)*((void *)this + 188);
  }
  return result;
}

void HALS_IOContext_Legacy_Impl::SetComposition(HALS_IOContext_Legacy_Impl *this, CFDictionaryRef theDict)
{
  v69[3] = *(HALS_ObjectMap ***)MEMORY[0x1E4F143B8];
  if (theDict) {
    CFRetain(theDict);
  }
  uint64_t v58 = &unk_1F14898A0;
  CFTypeRef cf = theDict;
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v56, theDict, @"device id");
  Float64 v4 = (HALS_ObjectMap *)OS::CF::Number::GetValue<unsigned int>(v57, 0);
  uint64_t v5 = HALS_ObjectMap::CopyObjectByObjectID(v4);
  if (v5) {
    uint64_t v6 = *(void *)(v5 + 144);
  }
  else {
    uint64_t v6 = 0x200000001;
  }
  v54[0] = 0;
  v54[1] = v54;
  v54[2] = 0x2000000000;
  int v55 = 0;
  v51[0] = 0;
  v51[1] = v51;
  v51[2] = 0x4802000000;
  v51[3] = __Block_byref_object_copy__15_12319;
  v51[4] = __Block_byref_object_dispose__16_12320;
  long long __p = 0u;
  long long v53 = 0u;
  uint64_t v35 = 0;
  unint64_t v36 = &v35;
  uint64_t v37 = 0x9802000000;
  int v38 = __Block_byref_object_copy__12321;
  uint64_t v39 = __Block_byref_object_dispose__12322;
  uint64_t v7 = *((void *)this + 3);
  int v8 = **(_DWORD **)(v7 + 64);
  int v9 = *(_DWORD *)(v7 + 16);
  v45[0] = 0;
  v45[1] = 0;
  __int16 v43 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = 0;
  uint64_t v44 = v45;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  int v49 = v8;
  int v50 = v9;
  HALS_IOContext_Legacy_Impl::PauseIO(this);
  v33[0] = MEMORY[0x1E4F143A8];
  v33[1] = 1174405120;
  v33[2] = ___ZN26HALS_IOContext_Legacy_Impl14SetCompositionEPK14__CFDictionary_block_invoke;
  void v33[3] = &unk_1F147ACD0;
  void v33[7] = this;
  OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v34, cf);
  void v34[2] = v6;
  void v33[4] = &v35;
  v33[5] = v51;
  v34[0] = &unk_1F14898A0;
  v33[6] = v54;
  uint64_t v10 = (HALB_Mutex *)(*(uint64_t (**)(void))(**((void **)this + 3) + 56))(*((void *)this + 3));
  HALB_CommandGate::ExecuteCommand(v10, (uint64_t)v33);
  HALS_MutationChangeSynchronizer::Wait((atomic_uint **)v36[5], (HALS_MutationChangeSynchronizer *)v36[6]);
  v30[0] = 0;
  v30[1] = 0;
  HALS_System::GetInstance(&v31, 0, v30);
  uint64_t v11 = (unsigned int **)*((void *)this + 3);
  uint64_t v64 = 0;
  char v65 = &v64;
  uint64_t v66 = 0x4002000000;
  int v67 = __Block_byref_object_copy__160;
  mach_port_t v68 = __Block_byref_object_dispose__161;
  memset(v69, 0, 24);
  v60[0] = MEMORY[0x1E4F143A8];
  v60[1] = 0x40000000;
  v60[2] = ___ZNK11HALS_System23UpdateTapsForNewContextEP14HALS_IOContext_block_invoke;
  void v60[3] = &unk_1E62330D8;
  v60[4] = &v64;
  v60[5] = v31;
  int v12 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v31 + 56))(v31);
  HALB_CommandGate::ExecuteCommand(v12, (uint64_t)v60);
  uint64_t v14 = v65[5];
  uint64_t v13 = v65[6];
  while (1)
  {
    if (v14 == v13)
    {
      _Block_object_dispose(&v64, 8);
      HALS_ArrayReleaser<HALS_Tap>::~HALS_ArrayReleaser(v69, v21);
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
      uint64_t v22 = (_DWORD *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**(unsigned int **)(*((void *)this + 3)
                                                                                               + 64));
      if (v22)
      {
        int v23 = (HALS_ObjectMap *)*(unsigned int *)(*((void *)this + 3) + 16);
        uint64_t v25 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v23);
        if (v25)
        {
          char v26 = 0;
          uint64_t v27 = 0;
          uint64_t v64 = 1;
          do
          {
            char v28 = v26;
            uint64_t v29 = *((unsigned int *)&v64 + v27);
            if (HALS_Client::ShouldMuteContext(v22, *((_DWORD *)&v64 + v27), v23)) {
              (*(void (**)(void *, uint64_t, uint64_t))(**((void **)v25 + 12) + 552))(*((void **)v25 + 12), v29, 1);
            }
            char v26 = 1;
            uint64_t v27 = 1;
          }
          while ((v28 & 1) == 0);
        }
        HALS_ObjectMap::ReleaseObject(v25, v24);
      }
      HALS_IOContext_Legacy_Impl::UpdatePowerAssertions((int8x8_t **)this);
    }
    uint64_t v15 = *(void *)v14;
    __int32 v16 = *v11[8];
    if (!*(unsigned char *)(*(void *)v14 + 81)) {
      break;
    }
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v61, *(const void **)(v15 + 208), *(void *)(v15 + 216), (uint64_t)(*(void *)(v15 + 216) - *(void *)(v15 + 208)) >> 2);
    char v18 = v61;
    uint64_t v17 = v62;
    uint64_t v19 = wmemchr(v61, v16, v62 - v61);
    if (v19) {
      char v20 = v19;
    }
    else {
      char v20 = v17;
    }
    if (v18) {
      operator delete(v18);
    }
    if (v20 != v17) {
      goto LABEL_17;
    }
LABEL_18:
    v14 += 8;
  }
  if (!std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)(v15 + 88), *v11[8]))goto LABEL_18; {
LABEL_17:
  }
  HALS_Tap::AddTapToContext((HALS_Tap *)v15, (HALS_IOContext *)v11);
  goto LABEL_18;
}

void sub_1BAE42E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, HALS_MutationChangeSynchronizer *a9, HALS_ObjectMap *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,char a60)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

char *__Block_byref_object_copy__15_12319(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v3 = a1 + 40;
  *(void *)(a1 + 56) = 0;
  __n128 result = std::vector<CAPropertyAddress>::__init_with_size[abi:ne180100]<CAPropertyAddress*,CAPropertyAddress*>((char *)(a1 + 40), *(uint64_t **)(a2 + 40), *(uint64_t **)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 2));
  *(void *)(v3 + 24) = *(void *)(a2 + 64);
  return result;
}

void __Block_byref_object_dispose__16_12320(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void *__Block_byref_object_copy__12321(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  Float64 v4 = (void *)(a1 + 40);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = a1 + 80;
  uint64_t v5 = a1 + 72;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  if (a1 != a2)
  {
    std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *> *,long>>(v5, *(void **)(a2 + 72), (void *)(a2 + 80));
    std::vector<MutationItinerary::Device>::__assign_with_size[abi:ne180100]<MutationItinerary::Device*,MutationItinerary::Device*>(a1 + 96, *(void *)(a2 + 96), *(void *)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 4));
    std::vector<CAStreamBasicDescription>::__assign_with_size[abi:ne180100]<CAStreamBasicDescription*,CAStreamBasicDescription*>((void *)(a1 + 120), *(char **)(a2 + 120), *(char **)(a2 + 128), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 128) - *(void *)(a2 + 120)) >> 3));
  }
  if (*(void *)(a2 + 40) != *(void *)(a2 + 48)) {
    __assert_rtn("HALS_MutationChangeSynchronizer", "HALS_MutationChangeSynchronizer.cpp", 28, "that.mChangeList.empty()");
  }

  return std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__clear[abi:ne180100](v4);
}

void sub_1BAE43090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = *(void **)(v2 + 120);
  if (v5)
  {
    *(void *)(v2 + 128) = v5;
    operator delete(v5);
  }
  std::vector<MutationItinerary::Device>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(*v3);
  std::vector<std::unique_ptr<HALB_ChangeSynchronizer>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void __Block_byref_object_dispose__12322(uint64_t a1)
{
}

void ___ZN26HALS_IOContext_Legacy_Impl14SetCompositionEPK14__CFDictionary_block_invoke(uint64_t a1)
{
  uint64_t v133 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v103 = v2 + 312;
  int v104 = HALB_Mutex::Lock((HALB_Mutex *)(v2 + 328));
  if (*(unsigned char *)(v2 + 1715))
  {
    int v3 = *(_DWORD *)(*(void *)(v2 + 24) + 16);
    CFDictionaryRef v4 = *(const __CFDictionary **)(v2 + 1504);
    *(void *)uint64_t v119 = &unk_1F1480E58;
    *(_DWORD *)&v119[8] = v3;
    *(void *)&v119[24] = v119;
    for_all_taps(v4, (uint64_t)v119);
    std::__function::__value_func<BOOL ()(HALS_Releaser<HALS_Tap>)>::~__value_func[abi:ne180100](v119);
  }
  uint64_t v5 = *(const void **)(a1 + 72);
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  if (v5) {
    CFRetain(*(CFTypeRef *)(a1 + 72));
  }
  *(void *)std::string buf = &unk_1F14898A0;
  *(void *)&uint8_t buf[8] = v5;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(void **)(v2 + 1848));
  *(void *)(v2 + 1856) = 0;
  uint64_t v7 = *(void *)(v2 + 1864);
  *(void *)(v2 + 1864) = 0;
  *(void *)(v2 + 1840) = v2 + 1848;
  *(void *)(v2 + 1848) = 0;
  if (v7) {
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v7);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(void **)(v2 + 1880));
  *(void *)(v2 + 1872) = v2 + 1880;
  *(void *)(v2 + 1888) = 0;
  *(void *)(v2 + 1880) = 0;
  int v8 = (unsigned char *)(v2 + 1896);
  if (*(unsigned char *)(v2 + 1920))
  {
    int v9 = *(void **)v8;
    if (*(void *)v8)
    {
      *(void *)(v2 + 1904) = v9;
      operator delete(v9);
    }
    *(unsigned char *)(v2 + 1920) = 0;
  }
  {
    HALS_IOContextDescription::SetFromCFRepresentation_ProcessDSPTypes(__CFDictionary const*)::isAppleInternal = os_variant_has_internal_diagnostics();
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v114, *(CFDictionaryRef *)&buf[8], @"vocal isolation type");
  if (v115)
  {
    *(_DWORD *)uint64_t v119 = OS::CF::Number::GetValue<unsigned int>(v115, 0);
    unint64_t v10 = HALS_IOContextDescription::SetFromCFRepresentation_ProcessDSPTypes(__CFDictionary const*)::$_0::operator()((unsigned int *)v119);
    if (HIDWORD(v10)) {
      std::__tree<DSP_Host_Types::AudioProcessingType>::__emplace_unique_key_args<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::AudioProcessingType const&>((uint64_t **)(v2 + 1840), v10, v10);
    }
  }
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v112, *(CFDictionaryRef *)&buf[8], @"voice activity detection enable");
  if (v113)
  {
    if (OS::CF::Number::GetValue<unsigned int>(v113, 0))
    {
      *(_DWORD *)uint64_t v119 = 6;
      unint64_t v11 = HALS_IOContextDescription::SetFromCFRepresentation_ProcessDSPTypes(__CFDictionary const*)::$_0::operator()((unsigned int *)v119);
      if (HIDWORD(v11)) {
        std::__tree<DSP_Host_Types::AudioProcessingType>::__emplace_unique_key_args<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::AudioProcessingType const&>((uint64_t **)(v2 + 1840), v11, v11);
      }
    }
  }
  unint64_t v12 = IsolatedUseCaseID_FromDescription(*(CFDictionaryRef *)&buf[8]);
  int v14 = v12;
  if (HIDWORD(v12))
  {
    if (v12)
    {
      *(_DWORD *)uint64_t v119 = 7;
      unint64_t v13 = HALS_IOContextDescription::SetFromCFRepresentation_ProcessDSPTypes(__CFDictionary const*)::$_0::operator()((unsigned int *)v119);
      if (HIDWORD(v13))
      {
        std::__tree<DSP_Host_Types::AudioProcessingType>::__emplace_unique_key_args<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::AudioProcessingType const&>((uint64_t **)(v2 + 1840), v13, v13);
        *(_DWORD *)(v2 + 1832) = v14;
        *(unsigned char *)(v2 + 1836) = 1;
      }
    }
  }
  if ((AMCP::Feature_Flags::force_mock_dsp_type(0, (const BOOL *)v13) & 1) != 0
    || (AMCP::Feature_Flags::allow_adm_dsp_offloads(0, v15) & 1) != 0
    || g_static_start_options == 1)
  {
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Dictionary>((uint64_t)v119, *(CFDictionaryRef *)&buf[8], @"device dsp offloads input");
    if (*(void *)&v119[8]) {
      operator new();
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v119);
  }
  if ((AMCP::Feature_Flags::force_mock_dsp_type(0, v16) & 1) != 0
    || AMCP::Feature_Flags::allow_adm_dsp_spatial(0, v17))
  {
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v110, *(CFDictionaryRef *)&buf[8], @"spatialization type");
    if (theDict)
    {
      *(_DWORD *)uint64_t v119 = OS::CF::Number::GetValue<unsigned int>(theDict, 0);
      unint64_t v18 = HALS_IOContextDescription::SetFromCFRepresentation_ProcessDSPTypes(__CFDictionary const*)::$_0::operator()((unsigned int *)v119);
      if (HIDWORD(v18)) {
        std::__tree<DSP_Host_Types::AudioProcessingType>::__emplace_unique_key_args<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::AudioProcessingType const&>((uint64_t **)(v2 + 1872), v18, v18);
      }
    }
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Dictionary>((uint64_t)v108, *(CFDictionaryRef *)&buf[8], @"spatialization virtual channel layout");
    if (cf)
    {
      CFTypeRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
      CFTypeRef v106 = Mutable;
      LOWORD(v107) = 257;
      CFTypeRef v20 = cf;
      if (cf)
      {
        CFRetain(cf);
        CFTypeRef Mutable = v106;
      }
      if (Mutable != v20)
      {
        if (Mutable) {
          CFRelease(Mutable);
        }
        CFTypeRef v106 = v20;
        BYTE1(v107) = 0;
      }
      LOBYTE(v107) = 1;
      LODWORD(v116) = 0;
      CACFDictionary::GetUInt32((uint64_t)v20, @"number channels", (unsigned int *)&v116);
      std::vector<char>::value_type __x = 0;
      std::vector<char>::vector((std::vector<char> *)v119, 0x20uLL, &__x);
      uint64_t v22 = *(_DWORD **)v119;
      **(void **)uint64_t v119 = 0;
      v22[2] = 0;
      unsigned int v23 = v116;
      if (v116 <= 1) {
        unsigned int v24 = 1;
      }
      else {
        unsigned int v24 = v116;
      }
      unint64_t v25 = 20 * v24 + 12;
      std::vector<char>::value_type __x = 0;
      if (v25 <= *(void *)&v119[8] - (void)v22)
      {
        if (v25 < *(void *)&v119[8] - (void)v22) {
          *(void *)&v119[8] = (char *)v22 + v25;
        }
      }
      else
      {
        std::vector<char>::__append((std::vector<char> *)v119, v25 - (*(void *)&v119[8] - (void)v22), &__x);
        uint64_t v22 = *(_DWORD **)v119;
        unsigned int v23 = v116;
      }
      *(void *)uint64_t v22 = 0;
      v22[2] = v23;
      if (v23)
      {
        uint64_t v26 = v23;
        uint64_t v27 = v22 + 4;
        do
        {
          *((_DWORD *)v27 - 1) = -1;
          *uint64_t v27 = 0;
          v27[1] = 0;
          uint64_t v27 = (void *)((char *)v27 + 20);
          --v26;
        }
        while (v26);
        uint64_t v22 = *(_DWORD **)v119;
      }
      HALS_Device::ConstructLayoutFromDictionary((HALS_Device *)&v106, (const CACFDictionary *)v22, v21);
      if (*(unsigned char *)(v2 + 1920))
      {
        if (v8 != v119) {
          std::vector<char>::__assign_with_size[abi:ne180100]<char *,char *>((void *)(v2 + 1896), *(char **)v119, *(char **)&v119[8], *(void *)&v119[8] - *(void *)v119);
        }
      }
      else
      {
        *(void *)int v8 = 0;
        *(void *)(v2 + 1904) = 0;
        *(void *)(v2 + 1912) = 0;
        std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((void *)(v2 + 1896), *(const void **)v119, *(uint64_t *)&v119[8], *(void *)&v119[8] - *(void *)v119);
        *(unsigned char *)(v2 + 1920) = 1;
      }
      if (*(void *)v119)
      {
        *(void *)&v119[8] = *(void *)v119;
        operator delete(*(void **)v119);
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v106);
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v108);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v110);
  }
  __int16 v102 = (HALS_IOContextDescription *)(v2 + 1496);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v112);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v114);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
  if (!(*(void *)(v2 + 1888) | *(void *)(v2 + 1856))) {
    goto LABEL_81;
  }
  if (v5)
  {
    HALS_IOContextDescription::SetFromCFRepresentation_ClearAllState(v102);
    HALS_IOContextDescription::SetFromCFRepresentation_FindMaster(v102, v5);
    HALS_IOContextDescription::SetFromCFRepresentation_ProcessInputStreams(v102, (const __CFDictionary *)v5);
    HALS_IOContextDescription::SetFromCFRepresentation_ProcessOutputStreams(v102, v5);
    HALS_IOContextDescription::SetFromCFRepresentation_ProcessEngines(v102);
    uint64_t v29 = *(void *)(v2 + 1584);
    uint64_t v30 = *(void *)(v2 + 1576);
    std::vector<BOOL>::resize(v2 + 1624, 0x21CFB2B78C13521DLL * ((uint64_t)(*(void *)(v2 + 1560) - *(void *)(v2 + 1552)) >> 3), 1);
    std::vector<BOOL>::resize(v2 + 1600, (v29 - v30) >> 5, 1);
  }
  HALS_IOContextHostedDSP::Initialize(*(HALS_IOContextHostedDSP **)(v2 + 2080), v102, **(_DWORD **)(*(void *)(v2 + 24) + 64), *(_DWORD *)(*(void *)(v2 + 24) + 16));
  uint64_t v31 = *(unsigned char **)(v2 + 2080);
  int v32 = *(_DWORD *)(v2 + 1320);
  memset(v119, 0, 26);
  *(void *)&v119[32] = v120;
  v120[0] = 0;
  long long v121 = 0u;
  long long v122 = 0u;
  long long v123 = 0u;
  v120[1] = 0;
  uint64_t v124 = 0;
  uint64_t v33 = (AMCP::Log::Scope_Registry *)HALS_IOContextHostedDSP::Negotiate_Internal(v31, (uint64_t *)v102, v32, (uint64_t)v119, 3);
  int v34 = (int)v33;
  if (v33 == 1685287013)
  {
    AMCP::Log::Scope_Registry::get(v33);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v35 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v36 = pthread_self();
      mach_port_t v37 = pthread_mach_thread_np(v36);
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v37;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "HALS_IOContextHostedDSP.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 1029;
      _os_log_impl(&dword_1BAA78000, v35, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d [hal_dsp] Attempting to negotiate 'bypass' with hosted DSP.", buf, 0x18u);
    }
    int v34 = HALS_IOContextHostedDSP::Negotiate_Internal(v31, (uint64_t *)v102, v32, (uint64_t)v119, 7);
    if (!v34)
    {
      HALS_MutationChangeSynchronizer::~HALS_MutationChangeSynchronizer((HALS_MutationChangeSynchronizer *)v119);
      goto LABEL_83;
    }
  }
  HALS_MutationChangeSynchronizer::~HALS_MutationChangeSynchronizer((HALS_MutationChangeSynchronizer *)v119);
  if (v34 <= 1685286514)
  {
    if (!v34)
    {
      AMCP::Log::Scope_Registry::get(v38);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v119, "com.apple.coreaudio", "AMCP");
      long long v47 = **(NSObject ***)v119;
      if (*(void *)&v119[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v119[8]);
      }
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
      {
        long long v48 = pthread_self();
        mach_port_t v49 = pthread_mach_thread_np(v48);
        *(_DWORD *)uint64_t v119 = 67109634;
        *(_DWORD *)&v119[4] = v49;
        *(_WORD *)&v119[8] = 2080;
        *(void *)&v119[10] = "HALS_IOContext_Legacy_Impl.cpp";
        *(_WORD *)&v119[18] = 1024;
        *(_DWORD *)&v119[20] = 4666;
        _os_log_debug_impl(&dword_1BAA78000, v47, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Negotiate simulate ok, retaining DSP types in description.", v119, 0x18u);
      }
      goto LABEL_100;
    }
    if (v34 != 1685283449) {
      goto LABEL_87;
    }
LABEL_83:
    AMCP::Log::Scope_Registry::get(v38);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v119, "com.apple.coreaudio", "AMCP");
    uint64_t v40 = **(NSObject ***)v119;
    if (*(void *)&v119[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v119[8]);
    }
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      uint64_t v41 = pthread_self();
      mach_port_t v42 = pthread_mach_thread_np(v41);
      *(_DWORD *)uint64_t v119 = 67109634;
      *(_DWORD *)&v119[4] = v42;
      *(_WORD *)&v119[8] = 2080;
      *(void *)&v119[10] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&v119[18] = 1024;
      *(_DWORD *)&v119[20] = 4660;
      _os_log_error_impl(&dword_1BAA78000, v40, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] Negotiate simulate failed, DSP will process in bypass, retaining DSP types in description.", v119, 0x18u);
    }
    goto LABEL_100;
  }
  if (v34 != 1685286515)
  {
    if (v34 != 1685287013)
    {
LABEL_87:
      AMCP::Log::Scope_Registry::get(v38);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v119, "com.apple.coreaudio", "AMCP");
      __int16 v43 = **(NSObject ***)v119;
      if (*(void *)&v119[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v119[8]);
      }
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v44 = pthread_self();
        mach_port_t v45 = pthread_mach_thread_np(v44);
        *(_DWORD *)uint64_t v119 = 67109634;
        *(_DWORD *)&v119[4] = v45;
        *(_WORD *)&v119[8] = 2080;
        *(void *)&v119[10] = "HALS_IOContext_Legacy_Impl.cpp";
        *(_WORD *)&v119[18] = 1024;
        *(_DWORD *)&v119[20] = 4669;
        long long v46 = "%6u %32s:%-5d [hal_dsp] Negotiate simulate has other result, retaining DSP types in description.";
LABEL_99:
        _os_log_impl(&dword_1BAA78000, v43, OS_LOG_TYPE_DEFAULT, v46, v119, 0x18u);
        goto LABEL_100;
      }
      goto LABEL_100;
    }
    AMCP::Log::Scope_Registry::get(v38);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v119, "com.apple.coreaudio", "AMCP");
    uint64_t v39 = **(NSObject ***)v119;
    if (*(void *)&v119[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v119[8]);
    }
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      char v99 = pthread_self();
      mach_port_t v100 = pthread_mach_thread_np(v99);
      *(_DWORD *)uint64_t v119 = 67109634;
      *(_DWORD *)&v119[4] = v100;
      *(_WORD *)&v119[8] = 2080;
      *(void *)&v119[10] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&v119[18] = 1024;
      *(_DWORD *)&v119[20] = 4655;
      _os_log_error_impl(&dword_1BAA78000, v39, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] Negotiate simulate failed, dropping DSP types from description.", v119, 0x18u);
    }
    HALS_IOContextDescription::HostedDSPDescription::ResetRequests((HALS_IOContextDescription::HostedDSPDescription *)(v2 + 1752));
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(void **)(v2 + 1848));
    *(void *)(v2 + 1840) = v2 + 1848;
    *(_OWORD *)(v2 + 1848) = 0u;
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(void **)(v2 + 1880));
    *(void *)(v2 + 1872) = v2 + 1880;
    *(_OWORD *)(v2 + 1880) = 0u;
LABEL_81:
    HALS_IOContextHostedDSP::Remove(*(HALS_IOContextHostedDSP **)(v2 + 2080), v102, *(_DWORD *)(v2 + 1320), **(_DWORD **)(*(void *)(v2 + 24) + 64), *(_DWORD *)(*(void *)(v2 + 24) + 16), (HALS_MutationChangeSynchronizer *)(v6 + 40), v28);
    goto LABEL_100;
  }
  AMCP::Log::Scope_Registry::get(v38);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v119, "com.apple.coreaudio", "AMCP");
  __int16 v43 = **(NSObject ***)v119;
  if (*(void *)&v119[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v119[8]);
  }
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
  {
    int v50 = pthread_self();
    mach_port_t v51 = pthread_mach_thread_np(v50);
    *(_DWORD *)uint64_t v119 = 67109634;
    *(_DWORD *)&v119[4] = v51;
    *(_WORD *)&v119[8] = 2080;
    *(void *)&v119[10] = "HALS_IOContext_Legacy_Impl.cpp";
    *(_WORD *)&v119[18] = 1024;
    *(_DWORD *)&v119[20] = 4663;
    long long v46 = "%6u %32s:%-5d [hal_dsp] Negotiate simulate, no streams to negotiate, retaining DSP types in description.";
    goto LABEL_99;
  }
LABEL_100:
  CFDictionaryRef v52 = *(const __CFDictionary **)(a1 + 72);
  if (v52)
  {
    CFRetain(*(CFTypeRef *)(a1 + 72));
    CFTypeRef v106 = &unk_1F14898A0;
    CFDictionaryRef v107 = v52;
    HALS_IOContextDescription::SetFromCFRepresentation_ClearAllState(v102);
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)v119, v107, @"device id");
    int v53 = OS::CF::Number::GetValue<unsigned int>(*(const __CFNumber **)&v119[8], 0);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v119);
    int v54 = *(_DWORD *)(v2 + 1512);
    if (v54 && v53 != v54 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v119 = 136315394;
      *(void *)&v119[4] = "HALS_IOContextDescription.cpp";
      *(_WORD *)&v119[12] = 1024;
      *(_DWORD *)&v119[14] = 305;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContextDescription::SetFromCFRepresentation: the owning device is different", v119, 0x12u);
    }
    *(_DWORD *)(v2 + 1512) = v53;
    if (OS::CF::DictionaryBase<__CFDictionary const*>::HasKey(v107, @"use corrected reference stream offset"))
    {
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(v119, v107, @"use corrected reference stream offset");
      *(unsigned char *)(v2 + 1714) = OS::CF::Boolean::AsBool(*(const __CFBoolean **)&v119[8]);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v119);
    }
    HALS_IOContextDescription::SetFromCFRepresentation_FindMaster(v102, v52);
    HALS_IOContextDescription::SetFromCFRepresentation_ProcessInputStreams(v102, v52);
    CFRetain(v52);
    CFTypeRef v114 = &unk_1F14898A0;
    CFDictionaryRef v115 = v52;
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Array>((uint64_t)v112, v52, @"taps");
    CFArrayRef v55 = v113;
    if (v113)
    {
      unsigned int v56 = 0;
      while ((unint64_t)OS::CF::ArrayBase<__CFArray const*>::GetSize(v55) > v56)
      {
        unsigned int v57 = v56;
        OS::CF::ArrayBase<__CFArray const*>::GetValueAtIndex<OS::CF::Dictionary>((const __CFArray *)v110, (uint64_t)v112, v56);
        if (theDict)
        {
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v108, theDict, @"uid");
          CFTypeRef v58 = cf;
          uint64_t EngineInfo = HALS_IOContextDescription::SetFromCFRepresentation_MakeEngineInfo(v102, (const __CFString *)cf);
          unint64_t v60 = (void *)EngineInfo;
          if (EngineInfo)
          {
            *(unsigned char *)(EngineInfo + 297) = 1;
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
            {
              if (!v58)
              {
                CFTypeRef v116 = 0;
LABEL_181:
                exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "Could not construct");
                __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              CFRetain(v58);
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v116, v58);
              if (!v116) {
                goto LABEL_181;
              }
              applesauce::CF::convert_to<std::string,0>((uint64_t)buf, (const __CFString *)v116);
              uint64_t v61 = buf;
              if ((buf[23] & 0x80u) != 0) {
                uint64_t v61 = *(uint8_t **)buf;
              }
              int v62 = *(_DWORD *)(v2 + 1936);
              *(_DWORD *)uint64_t v119 = 136315906;
              *(void *)&v119[4] = "HALS_IOContextDescription.cpp";
              *(_WORD *)&v119[12] = 1024;
              *(_DWORD *)&v119[14] = 858;
              *(_WORD *)&v119[18] = 2080;
              *(void *)&v119[20] = v61;
              *(_WORD *)&v119[28] = 1024;
              *(_DWORD *)&v119[30] = v62;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContextDescription::SetFromCFRepresentation_ProcessInputStreams: Turning on drift correction for tap: %s [IOC: %d]", v119, 0x22u);
              if ((char)buf[23] < 0) {
                operator delete(*(void **)buf);
              }
              if (v116) {
                CFRelease(v116);
              }
            }
            *(void *)((char *)v60 + 300) = 0x4000000000;
            v60[41] = 0;
            HALS_IOStreamInfo::HALS_IOStreamInfo((HALS_IOStreamInfo *)v119);
            BOOL v132 = v60;
            v119[8] = 1;
            *(_DWORD *)&v119[12] = 0;
            uint64_t v63 = v60[1];
            if (v63)
            {
              uint64_t v118 = 0;
              memset(buf, 0, sizeof(buf));
              (*(void (**)(uint64_t, uint64_t, void, uint8_t *))(*(void *)v63 + 432))(v63, 1, 0, buf);
              long long v129 = *(_OWORD *)buf;
              long long v130 = *(_OWORD *)&buf[16];
              uint64_t v131 = v118;
              if (HIDWORD(v124))
              {
                long long v125 = *(_OWORD *)buf;
                long long v126 = *(_OWORD *)&buf[16];
                uint64_t v127 = v118;
                if (!v128) {
                  char v128 = 1;
                }
              }
              LODWORD(v124) = (*(uint64_t (**)(void, void, void))(*(void *)v60[1] + 424))(v60[1], v119[8], *(unsigned int *)&v119[12]);
            }
            HALS_IOStreamGroup::push_back((HALS_IOStreamGroup *)(v2 + 1552), (HALS_IOStreamInfo *)v119);
            ++*(_DWORD *)(v2 + 1716);
            HALS_IOStreamInfo::~HALS_IOStreamInfo((HALS_IOStreamInfo *)v119);
          }
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v108);
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v110);
        unsigned int v56 = v57 + 1;
        CFArrayRef v55 = v113;
      }
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(v119, v115, @"tapautostart");
      *(unsigned char *)(v2 + 1715) = OS::CF::Boolean::AsBool(*(const __CFBoolean **)&v119[8]);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v119);
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v112);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v114);
    HALS_IOContextDescription::SetFromCFRepresentation_ProcessOutputStreams(v102, v52);
    HALS_IOContextDescription::SetFromCFRepresentation_ProcessEngines(v102);
    CFRetain(v52);
    uint64_t v64 = *(void *)(v2 + 1528);
    uint64_t v65 = *(void *)(v2 + 1536);
    while (v64 != v65)
    {
      uint64_t v66 = *(void *)(*(void *)v64 + 8);
      if (v66 && (*(unsigned int (**)(uint64_t))(*(void *)v66 + 296))(v66))
      {
        *(unsigned char *)(v2 + 1712) = 1;
        break;
      }
      v64 += 8;
    }
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Boolean>(v119, v107, @"LDCM");
    *(unsigned char *)(v2 + 1713) = OS::CF::Boolean::AsBool(*(const __CFBoolean **)&v119[8]);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v119);
    mach_port_t v68 = *(const void **)(v2 + 1504);
    if (v68) {
      CFRelease(v68);
    }
    *(void *)(v2 + 1504) = v52;
    uint64_t v69 = *(void *)(v2 + 1584);
    uint64_t v70 = *(void *)(v2 + 1576);
    std::vector<BOOL>::resize(v2 + 1624, 0x21CFB2B78C13521DLL * ((uint64_t)(*(void *)(v2 + 1560) - *(void *)(v2 + 1552)) >> 3), 1);
    std::vector<BOOL>::resize(v2 + 1600, (v69 - v70) >> 5, 1);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v106);
  }
  else
  {
    HALS_IOContextDescription::SetToEmpty(v102);
    int v67 = *(const void **)(v2 + 1504);
    if (v67) {
      CFRelease(v67);
    }
    *(void *)(v2 + 1504) = 0;
  }
  HALS_IOContextDescription::PushStreamUsageToEngines(v102, 0);
  HALS_IOContextDescription::PushStreamUsageToEngines(v102, 1);
  HALS_IOContextDescription::CalculateEngineSynchOffsets(v102);
  if (0x21CFB2B78C13521DLL * ((uint64_t)(*(void *)(v2 + 1560) - *(void *)(v2 + 1552)) >> 3) != *(_DWORD *)(v2 + 1632)
    && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t v119 = 136315394;
    *(void *)&v119[4] = "HALS_IOContextDescription.cpp";
    *(_WORD *)&v119[12] = 1024;
    *(_DWORD *)&v119[14] = 377;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Extra items in mStreamActiveState", v119, 0x12u);
  }
  if (*(_DWORD *)(v2 + 1608) != (uint64_t)(*(void *)(v2 + 1584) - *(void *)(v2 + 1576)) >> 5
    && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t v119 = 136315394;
    *(void *)&v119[4] = "HALS_IOContextDescription.cpp";
    *(_WORD *)&v119[12] = 1024;
    *(_DWORD *)&v119[14] = 378;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Extra items in mStreamActiveState", v119, 0x12u);
  }
  unint64_t v71 = *(const void **)(v2 + 1504);
  if (v71)
  {
    CFRetain(*(CFTypeRef *)(v2 + 1504));
    uint64_t v72 = applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v114, v71);
    if (v114)
    {
      AMCP::Log::Scope_Registry::get(v72);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v119, "com.apple.coreaudio", "AMCP");
      uint64_t v73 = *(AMCP::Log::Scope_Registry **)&v119[8];
      unsigned int v74 = **(NSObject ***)v119;
      if (*(void *)&v119[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v119[8]);
      }
      AMCP::Log::Scope_Registry::get(v73);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v119, "com.apple.coreaudio", "AMCP");
      os_signpost_id_t v75 = os_signpost_id_generate(**(os_log_t **)v119);
      if (*(void *)&v119[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v119[8]);
      }
      if (v75 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v74))
      {
        int v76 = *(_DWORD *)(v2 + 1512);
        int v77 = *(_DWORD *)(v2 + 1936);
        CFStringRef v78 = CFCopyDescription(v114);
        applesauce::CF::details::CFString_get_value<true>((uint64_t)buf, v78);
        if (v78) {
          CFRelease(v78);
        }
        int v79 = buf;
        if ((buf[23] & 0x80u) != 0) {
          int v79 = *(uint8_t **)buf;
        }
        *(_DWORD *)uint64_t v119 = 67109634;
        *(_DWORD *)&v119[4] = v76;
        *(_WORD *)&v119[8] = 1024;
        *(_DWORD *)&v119[10] = v77;
        *(_WORD *)&v119[14] = 2080;
        *(void *)&v119[16] = v79;
        _os_signpost_emit_with_name_impl(&dword_1BAA78000, v74, OS_SIGNPOST_EVENT, v75, "Device Description", "Device %u, Context %u\n%s", v119, 0x18u);
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
      }
      if (v114) {
        CFRelease(v114);
      }
    }
  }
  *(_DWORD *)(v2 + 1968) = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(v2 + 1972) = *(_DWORD *)(a1 + 84);
  HALS_IOContext_Legacy_Impl::AssessIOBufferSize((HALS_IOContext_Legacy_Impl *)v2, (CAPropertyAddressList *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  uint64_t v80 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v2 + 1512));
  int v81 = (HALS_ObjectMap *)v80;
  if (v80)
  {
    mach_port_t v82 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v80 + 216))(v80);
    snprintf(v119, 0x12CuLL, "audio IO: %s", v82);
    strlcpy((char *)(v2 + 492), v119, 0x40uLL);
  }
  else
  {
    strlcpy((char *)(v2 + 492), "audio IO thread", 0x40uLL);
  }
  HALS_ObjectMap::ReleaseObject(v81, v83);
  *(unsigned char *)(v2 + 1377) = 0;
  uint64_t v84 = *(void *)(v2 + 24);
  uint64_t v85 = *(void **)(v84 + 120);
  if (v85)
  {
    free(v85);
    int v86 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v84 + 96) + 32))(*(void *)(v84 + 96), 1);
    char v87 = malloc_type_calloc(1uLL, (16 * v86) | 8u, 0xC517D68uLL);
    if (v87) {
      *char v87 = v86;
    }
    *(void *)(v84 + 120) = v87;
  }
  long long v88 = *(void **)(v84 + 128);
  if (v88)
  {
    free(v88);
    int v89 = (*(uint64_t (**)(void, void))(**(void **)(v84 + 96) + 32))(*(void *)(v84 + 96), 0);
    long long v90 = malloc_type_calloc(1uLL, (16 * v89) | 8u, 0xC517D68uLL);
    if (v90) {
      *long long v90 = v89;
    }
    *(void *)(v84 + 128) = v90;
  }
  uint64_t v91 = *(void *)(v2 + 24);
  if (*(unsigned char *)(v2 + 1715))
  {
    int v92 = *(_DWORD *)(v91 + 16);
    CFDictionaryRef v93 = *(const __CFDictionary **)(v2 + 1504);
    *(void *)uint64_t v119 = &unk_1F1480DD8;
    *(_DWORD *)&v119[8] = v92;
    *(void *)&v119[24] = v119;
    for_all_taps(v93, (uint64_t)v119);
    std::__function::__value_func<BOOL ()(HALS_Releaser<HALS_Tap>)>::~__value_func[abi:ne180100](v119);
    uint64_t v91 = *(void *)(v2 + 24);
  }
  uint64_t v94 = (HALS_ObjectMap *)(*(uint64_t (**)(void))(**(void **)(v91 + 96) + 728))(*(void *)(v91 + 96));
  long long v95 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v94);
  char v97 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**(unsigned int **)(*(void *)(v2 + 24) + 64));
  if (v95) {
    *(unsigned char *)(v2 + 32) = (*(uint64_t (**)(HALS_ObjectMap *, HALS_ObjectMap *))(*(void *)v95 + 704))(v95, v97);
  }
  HALS_ObjectMap::ReleaseObject(v97, v96);
  HALS_ObjectMap::ReleaseObject(v95, v98);
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v103);
}

void sub_1BAE446AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39)
{
  if (a2)
  {
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a30);
    HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&a15);
    uint64_t v41 = __cxa_begin_catch(exception_object);
    if (a2 == 2) {
      *(_DWORD *)(*(void *)(*(void *)(a10 + 48) + 8) + 24) = v41[2];
    }
    else {
      *(_DWORD *)(*(void *)(*(void *)(a10 + 48) + 8) + 24) = 2003329396;
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAE4458CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAE44A70()
{
}

void __destroy_helper_block_e8_64c24_ZTSN2OS2CF10DictionaryE(uint64_t a1)
{
}

OS::CF::UntypedObject *__copy_helper_block_e8_64c24_ZTSN2OS2CF10DictionaryE(uint64_t a1, uint64_t a2)
{
  __n128 result = OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(a1 + 64), *(CFTypeRef *)(a2 + 72));
  *(void *)(a1 + 64) = &unk_1F14898A0;
  return result;
}

void HALS_IOContext_Legacy_Impl::AssessIOBufferSize(HALS_IOContext_Legacy_Impl *this, CAPropertyAddressList *a2)
{
  uint64_t v4 = *((void *)this + 3);
  unsigned int v5 = *(_DWORD *)(v4 + 72);
  if (!v5) {
    unsigned int v5 = *(_DWORD *)(v4 + 16);
  }
  *((void *)a2 + 3) = v5;
  uint64_t v17 = caulk::function_ref<int ()(unsigned int,HALS_IOStreamInfo &)>::function_invoker;
  unint64_t v18 = HALS_IOContext_Legacy_Impl::AssessIOBufferSize_InputHelper;
  *(void *)&long long v19 = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOContextDescription::ApplyToInput(caulk::function_ref<int ()(unsigned int,HALS_IOStreamInfo&)>)::$_0>;
  *((void *)&v19 + 1) = &v17;
  int v6 = VisitableVector<HALS_IOStreamInfo>::apply<>(*((void *)this + 194), *((void *)this + 195), &v19);
  if (v6
    || (uint64_t v17 = caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::function_invoker,
        unint64_t v18 = HALS_IOContext_Legacy_Impl::AssessIOBufferSize_OutputHelper,
        *(void *)&long long v19 = _ZN5caulk12function_refIFiRN15VisitableVectorI23HALS_IOStackDescriptionE13ItemWithIndexEEE15functor_invokerIZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS0_IFijRS2_jjR17HALS_IOStreamInfoEEEDpRKT_EUlS5_E_EEiRKNS_7details15erased_callableIS6_EES5_,
        *((void *)&v19 + 1) = &v17,
        (int v6 = VisitableVector<HALS_IOStackDescription>::apply<>(*((void *)this + 197), *((void *)this + 198), &v19)) != 0))
  {
    if (!*((unsigned char *)this + 1324) || *((_DWORD *)this + 330) != v6)
    {
      *((unsigned char *)this + 1324) = 1;
      *((_DWORD *)this + 330) = v6;
      *(void *)&long long v19 = 0x676C6F6266737A23;
      DWORD2(v19) = 0;
      CAPropertyAddressList::AppendUniqueItem(a2, (AudioObjectPropertyAddress *)&v19, v7);
      uint64_t v8 = 0x676C6F626673697ALL;
LABEL_8:
      *(void *)&long long v19 = v8;
      DWORD2(v19) = 0;
      CAPropertyAddressList::AppendUniqueItem(a2, (AudioObjectPropertyAddress *)&v19, v7);
    }
  }
  else if (*((unsigned char *)this + 1324))
  {
    *((unsigned char *)this + 1324) = 0;
    uint64_t v8 = 0x676C6F6266737A23;
    goto LABEL_8;
  }
  if (!*((unsigned char *)this + 1324))
  {
    uint64_t v9 = *((void *)this + 190);
    double v10 = 13.23;
    if (v9 && *(void *)(v9 + 8)) {
      double v10 = *(double *)(v9 + 768) * 0.0003;
    }
    unsigned int v11 = vcvtpd_u64_f64(v10);
    HALS_IOContextDescription::CalculateMaximumIOBufferFrameSize((HALS_IOContext_Legacy_Impl *)((char *)this + 1496));
    unsigned int v13 = v12;
    unsigned int DevicesDesiredIOBufferFrameSize = HALS_IOContext_Legacy_Impl::_GetDevicesDesiredIOBufferFrameSize(this, (HALS_IOEngineInfo *)*((unsigned int *)this + 330));
    if (DevicesDesiredIOBufferFrameSize <= v11) {
      unsigned int v16 = v11;
    }
    else {
      unsigned int v16 = DevicesDesiredIOBufferFrameSize;
    }
    if (v16 >= v13) {
      unsigned int v16 = v13;
    }
    if (*((_DWORD *)this + 330) != v16)
    {
      *((_DWORD *)this + 330) = v16;
      *(void *)&long long v19 = 0x676C6F626673697ALL;
      DWORD2(v19) = 0;
      CAPropertyAddressList::AppendUniqueItem(a2, (AudioObjectPropertyAddress *)&v19, v15);
    }
  }
}

uint64_t HALS_IOContext_Legacy_Impl::AssessIOBufferSize_OutputHelper(HALS_IOContext_Legacy_Impl *this, unsigned int a2, HALS_IOStackDescription *a3, unsigned int a4, uint64_t a5, HALS_IOStreamInfo *a6)
{
  if (!*(_DWORD *)(a5 + 108)
    || ((uint64_t v7 = *(void *)(a5 + 112), *(void *)(a5 + 120) != v7) ? (v8 = v7 == 0) : (v8 = 1), v8))
  {
    uint64_t v7 = a5 + 408;
  }
  uint64_t result = *(void *)(*(void *)v7 + 8);
  if (result)
  {
    unsigned int v10 = *(_DWORD *)(a5 + 12);
    if (v10 >= (*(unsigned int (**)(uint64_t, void, HALS_IOStackDescription *))(*(void *)result + 400))(result, *(unsigned __int8 *)(a5 + 8), a3))return 0; {
    if (*(_DWORD *)(a5 + 108))
    }
    {
      HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v13, (uint64_t *)(a5 + 112));
    }
    else
    {
      long long v11 = *(_OWORD *)(a5 + 384);
      long long v13 = *(_OWORD *)(a5 + 368);
      long long v14 = v11;
      uint64_t v15 = *(void *)(a5 + 400);
    }
    if (DWORD2(v13) == 1819304813)
    {
      return 0;
    }
    else
    {
      if (*(_DWORD *)(a5 + 108))
      {
        HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v13, (uint64_t *)(a5 + 112));
      }
      else
      {
        long long v12 = *(_OWORD *)(a5 + 384);
        long long v13 = *(_OWORD *)(a5 + 368);
        long long v14 = v12;
        uint64_t v15 = *(void *)(a5 + 400);
      }
      return DWORD1(v14);
    }
  }
  return result;
}

void sub_1BAE44D94(void *a1)
{
}

uint64_t caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::function_invoker(uint64_t (**a1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*a1)(a2, a3, a4, a5, a6);
}

uint64_t HALS_IOContext_Legacy_Impl::AssessIOBufferSize_InputHelper(HALS_IOContext_Legacy_Impl *this, uint64_t a2, HALS_IOStreamInfo *a3)
{
  if (!*(_DWORD *)(a2 + 108)
    || ((uint64_t v4 = *(void *)(a2 + 112), *(void *)(a2 + 120) != v4) ? (v5 = v4 == 0) : (v5 = 1), v5))
  {
    uint64_t v4 = a2 + 408;
  }
  uint64_t result = *(void *)(*(void *)v4 + 8);
  if (result)
  {
    unsigned int v7 = *(_DWORD *)(a2 + 12);
    if (v7 >= (*(unsigned int (**)(uint64_t, void, HALS_IOStreamInfo *))(*(void *)result + 400))(result, *(unsigned __int8 *)(a2 + 8), a3))return 0; {
    if (*(_DWORD *)(a2 + 108))
    }
    {
      HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v10, (uint64_t *)(a2 + 112));
    }
    else
    {
      long long v8 = *(_OWORD *)(a2 + 384);
      long long v10 = *(_OWORD *)(a2 + 368);
      long long v11 = v8;
      uint64_t v12 = *(void *)(a2 + 400);
    }
    if (DWORD2(v10) == 1819304813)
    {
      return 0;
    }
    else
    {
      if (*(_DWORD *)(a2 + 108))
      {
        HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v10, (uint64_t *)(a2 + 112));
      }
      else
      {
        long long v9 = *(_OWORD *)(a2 + 384);
        long long v10 = *(_OWORD *)(a2 + 368);
        long long v11 = v9;
        uint64_t v12 = *(void *)(a2 + 400);
      }
      return DWORD1(v11);
    }
  }
  return result;
}

void sub_1BAE44EB8(void *a1)
{
}

uint64_t caulk::function_ref<int ()(unsigned int,HALS_IOStreamInfo &)>::function_invoker(uint64_t (**a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return (*a1)(a2, a3);
}

void HALS_IOContext_Legacy_Impl::SetMuteState(uint64_t a1, unsigned int a2, char a3)
{
  uint64_t v6 = a1 + 312;
  int v7 = HALB_Mutex::Lock((HALB_Mutex *)(a1 + 328));
  *(unsigned char *)(a1 + a2 + 1378) = a3;
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v6);
}

uint64_t HALS_IOContext_Legacy_Impl::GetMuteState(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int8 *)(a1 + a2 + 1378);
}

uint64_t HALS_IOContext_Legacy_Impl::GetTransportState(HALS_IOContext_Legacy_Impl *this)
{
  int v1 = *((_DWORD *)this + 372);
  if (v1 == 1) {
    return 1;
  }
  else {
    return 2 * (v1 == 2);
  }
}

void *HALS_IOContext_Legacy_Impl::EnableCaptureFiles(uint64_t a1, int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZN26HALS_IOContext_Legacy_Impl18EnableCaptureFilesE17AudioCapturerMode_block_invoke;
  v4[3] = &__block_descriptor_tmp_34_12333;
  int v5 = a2;
  long long v11 = 0;
  v10[0] = &unk_1F147C768;
  v10[1] = _Block_copy(v4);
  long long v11 = v10;
  v7[0] = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
  v7[1] = v10;
  uint64_t v6 = &off_1F147D460;
  long long v8 = v7;
  v9[0] = (uint64_t (*)(void, void *))caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
  v9[1] = (uint64_t (*)(void, void *))&v8;
  VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine>(*(void *)(a1 + 1528), *(void *)(a1 + 1536), v9, (uint64_t)&v6);
  return std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v10);
}

void sub_1BAE45094(_Unwind_Exception *a1)
{
  std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100]((void *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t ___ZN26HALS_IOContext_Legacy_Impl18EnableCaptureFilesE17AudioCapturerMode_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 584))(v3, *(unsigned int *)(a1 + 32));
  }
  return 0;
}

void *std::__function::__func<int({block_pointer})(HALS_IOEngineInfo &),std::allocator<int({block_pointer})(HALS_IOEngineInfo &)>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t std::__function::__func<int({block_pointer})(HALS_IOEngineInfo &),std::allocator<int({block_pointer})(HALS_IOEngineInfo &)>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"U13block_pointerFiR17HALS_IOEngineInfoE")) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t std::__function::__func<int({block_pointer})(HALS_IOEngineInfo &),std::allocator<int({block_pointer})(HALS_IOEngineInfo &)>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

void std::__function::__func<int({block_pointer})(HALS_IOEngineInfo &),std::allocator<int({block_pointer})(HALS_IOEngineInfo &)>,int ()(HALS_IOEngineInfo &)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  *(void *)(a1 + 8) = 0;
}

void *std::__function::__func<int({block_pointer})(HALS_IOEngineInfo &),std::allocator<int({block_pointer})(HALS_IOEngineInfo &)>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F147C768;
  uint64_t result = *(void **)(a1 + 8);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a2[1] = result;
  return result;
}

uint64_t std::__function::__func<int({block_pointer})(HALS_IOEngineInfo &),std::allocator<int({block_pointer})(HALS_IOEngineInfo &)>,int ()(HALS_IOEngineInfo &)>::__clone()
{
  return 0;
}

void std::__function::__func<int({block_pointer})(HALS_IOEngineInfo &),std::allocator<int({block_pointer})(HALS_IOEngineInfo &)>,int ()(HALS_IOEngineInfo &)>::~__func()
{
}

uint64_t HALS_IOContext_Legacy_Impl::SleepingIsAllowedChanged(uint64_t this, int a2)
{
  uint64_t v2 = *(void *)(*(void *)(this + 24) + 64);
  if (*(unsigned __int8 *)(v2 + 44) != a2)
  {
    *(unsigned char *)(v2 + 44) = a2;
    if (a2) {
      HALS_IOContext_Legacy_Impl::ReleasePowerAssertions((HALS_IOContext_Legacy_Impl *)this);
    }
    if (*(unsigned char *)(this + 1300)) {
      HALS_IOContext_Legacy_Impl::TakePowerAssertions((HALS_IOContext_Legacy_Impl *)this);
    }
  }
  return this;
}

void sub_1BAE45244(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(HALS_IOContext_Legacy_Impl *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  char v1 = *((unsigned char *)this + 1712);
  uint64_t v2 = &unk_1F147B200;
  char v3 = v1;
  uint64_t v4 = &v2;
  HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(this, (uint64_t)&v2);
}

void sub_1BAE452EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Legacy_Impl::TakePowerAssertions(HALS_IOContext_Legacy_Impl *this)
{
  void v2[4] = *MEMORY[0x1E4F143B8];
  unint64_t v1 = *((unsigned int *)this + 378) | ((unint64_t)*((unsigned __int8 *)this + 1712) << 32);
  v2[0] = &unk_1F147B180;
  v2[1] = v1;
  v2[3] = v2;
  HALS_IOContext_Legacy_Impl::DoPowerAssertionTask(this, (uint64_t)v2);
}

void sub_1BAE45390(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::TakePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::TakePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::TakePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::TakePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl19TakePowerAssertionsEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::TakePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::TakePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(std::chrono::system_clock::time_point ***)a2;
  char v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 8));
  uint64_t v6 = (HALS_ObjectMap *)v5;
  if (v5)
  {
    int v7 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 216))(v5);
    std::string::basic_string[abi:ne180100]<0>(__p, v7);
    long long v8 = *v4;
    long long v9 = v15 >= 0 ? __p : (void **)__p[0];
    OS::CF::String::String<char const*>(v17, @"com.apple.audio.%s.context.preventuseridlesleep", (uint64_t)v9);
    HALB_PowerAssertion::Rename((IOPMAssertionID *)v8, (uint64_t)v17);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v17);
    long long v10 = (IOPMAssertionID *)v4[1];
    long long v11 = v15 >= 0 ? __p : (void **)__p[0];
    OS::CF::String::String<char const*>(v16, @"com.apple.audio.%s.context.preventuseridledisplaysleep", (uint64_t)v11);
    HALB_PowerAssertion::Rename(v10, (uint64_t)v16);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v16);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }
  int v12 = *(unsigned __int8 *)(a1 + 12);
  HALB_PowerAssertion::Take(*v4);
  if (v12) {
    HALB_PowerAssertion::Take(v4[1]);
  }
  HALS_ObjectMap::ReleaseObject(v6, v13);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1BAE45530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a16);
  if (a15 < 0) {
    operator delete(__p);
  }
  HALS_ObjectMap::ReleaseObject(v19, v21);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(a1);
}

void *OS::CF::String::String<char const*>(void *a1, CFStringRef format, uint64_t a3)
{
  CFStringRef v4 = CFStringCreateWithFormat(0, 0, format, a3);
  *a1 = &unk_1F1489A20;
  a1[1] = v4;
  return a1;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::TakePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::TakePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1F147B180;
  a2[1] = *(void *)(result + 8);
  return result;
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::TakePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::TakePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F147B180;
  result[1] = v3;
  return result;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::TakePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::TakePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::~__func()
{
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl22ReleasePowerAssertionsEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const std::chrono::system_clock::time_point ***)a2;
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v4 = *(unsigned __int8 *)(a1 + 8);
  HALB_PowerAssertion::Release(*v3);
  if (v4) {
    HALB_PowerAssertion::Release(v3[1]);
  }
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1BAE45744(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F147B200;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

unsigned char *std::__function::__func<HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F147B200;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(void)::$_0>,void ()(std::shared_ptr<HALS_IOContext_PowerAssertions> const&)>::~__func()
{
}

BOOL HALS_IOContext_Legacy_Impl::PowerHintChanged(HALS_IOContext_Legacy_Impl *this, int a2)
{
  if (*((unsigned char *)this + 1325)) {
    return 0;
  }
  if (a2 == 1) {
    uint64_t v4 = 4096;
  }
  else {
    uint64_t v4 = 512;
  }
  if (*((unsigned char *)this + 1324))
  {
    BOOL result = 0;
  }
  else
  {
    uint64_t v5 = *((void *)this + 190);
    double v6 = 13.23;
    if (v5 && *(void *)(v5 + 8)) {
      double v6 = *(double *)(v5 + 768) * 0.0003;
    }
    HALS_IOContextDescription::CalculateMaximumIOBufferFrameSize((HALS_IOContext_Legacy_Impl *)((char *)this + 1496));
    double v8 = v7;
    unsigned int DevicesDesiredIOBufferFrameSize = HALS_IOContext_Legacy_Impl::_GetDevicesDesiredIOBufferFrameSize(this, (HALS_IOEngineInfo *)v4);
    unsigned int v10 = vcvtpd_u64_f64(v6);
    if (DevicesDesiredIOBufferFrameSize > v10) {
      unsigned int v10 = DevicesDesiredIOBufferFrameSize;
    }
    if (v10 >= v8) {
      unsigned int v10 = v8;
    }
    BOOL result = *((_DWORD *)this + 330) != v10;
    *((_DWORD *)this + 330) = v10;
  }
  *((unsigned char *)this + 1325) = 0;
  return result;
}

void sub_1BAE458B4(void *a1)
{
}

void HALS_IOContext_Legacy_Impl::PowerChanged(HALS_IOContext_Legacy_Impl *this, int a2)
{
  int v2 = *((_DWORD *)this + 333);
  *((_DWORD *)this + 333) = a2;
  if (v2 == a2) {
    return;
  }
  uint64_t v4 = *((void *)this + 3);
  if ((a2 & 0xFFFFFFFD) == 0)
  {
    *((unsigned char *)this + 1337) = 1;
    if (!a2) {
      HALS_IOContext_Legacy_Impl::ReleasePowerAssertions(this);
    }
    goto LABEL_12;
  }
  if (a2 == 1)
  {
    int v5 = *(unsigned __int8 *)(*(void *)(v4 + 64) + 43);
  }
  else
  {
    if (a2 != 3)
    {
      BOOL v6 = 0;
      goto LABEL_11;
    }
    int v5 = *(unsigned __int8 *)(*(void *)(v4 + 64) + 42);
  }
  BOOL v6 = v5 == 0;
LABEL_11:
  *((unsigned char *)this + 1337) = v6;
LABEL_12:
  if (!v2) {
    HALS_IOContext_Legacy_Impl::ResumeIO(this);
  }
  if (*((unsigned char *)this + 1300) && !*(unsigned char *)(*(void *)(*((void *)this + 3) + 64) + 44)) {
    HALS_IOContext_Legacy_Impl::TakePowerAssertions(this);
  }

  HALB_Guard::NotifyAll((pthread_cond_t *)((char *)this + 328));
}

void HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(HALS_IOContext_Legacy_Impl *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (char *)this + 312;
  int v5 = (_opaque_pthread_t *)*((void *)this + 40);
  BOOL v6 = pthread_self();
  int v7 = pthread_equal(v5, v6);
  if (!v7) {
    os_unfair_recursive_lock_lock_with_options();
  }
  int v32 = v4;
  int v33 = HALB_Mutex::Lock((HALS_IOContext_Legacy_Impl *)((char *)this + 328));
  double v8 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 378));
  uint64_t v9 = *((void *)this + 190);
  BOOL v10 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
  if (v8 && v9)
  {
    if (!v10) {
      goto LABEL_10;
    }
    int v11 = *(_DWORD *)(*((void *)this + 3) + 16);
    uint64_t v12 = (*(uint64_t (**)(HALS_ObjectMap *))(*(void *)v8 + 216))(v8);
    *(_DWORD *)std::string buf = 136316162;
    *(void *)&uint8_t buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 486;
    __int16 v35 = 1024;
    *(_DWORD *)unint64_t v36 = v11;
    *(_WORD *)&v36[4] = 2082;
    *(void *)&v36[6] = v9 + 32;
    *(_WORD *)&v36[14] = 2082;
    *(void *)&v36[16] = v12;
    long long v13 = MEMORY[0x1E4F14500];
    long long v14 = "%25s:%-5d  HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID: %d %{public}s (%{public}s):";
    uint32_t v15 = 44;
  }
  else
  {
    if (!v10) {
      goto LABEL_10;
    }
    int v16 = *(_DWORD *)(*((void *)this + 3) + 16);
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 490;
    __int16 v35 = 1024;
    *(_DWORD *)unint64_t v36 = v16;
    long long v13 = MEMORY[0x1E4F14500];
    long long v14 = "%25s:%-5d  HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID: %d:";
    uint32_t v15 = 24;
  }
  _os_log_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_DEFAULT, v14, buf, v15);
LABEL_10:
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    AMCP::IO_Core::Play_State_Manager::get_debug_string((AMCP::IO_Core::Play_State_Manager *)__p, *((void *)this + 184), *((void *)this + 185));
    if (v40 >= 0) {
      uint64_t v17 = __p;
    }
    else {
      uint64_t v17 = (void **)__p[0];
    }
    uint64_t v18 = *((void *)this + 3);
    uint64_t v19 = *(void *)(v18 + 136);
    uint64_t v20 = *(void *)(v18 + 112);
    AudioObjectPropertyAddress v21 = "no";
    if (v20 && *(unsigned char *)(v20 + 32)) {
      AudioObjectPropertyAddress v21 = "yes";
    }
    *(_DWORD *)std::string buf = 136316418;
    *(void *)&uint8_t buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 492;
    __int16 v35 = 2048;
    *(void *)unint64_t v36 = a2;
    *(_WORD *)&v36[8] = 2082;
    *(void *)&v36[10] = v17;
    *(_WORD *)&v36[18] = 2048;
    *(void *)&v36[20] = v19;
    __int16 v37 = 2082;
    int v38 = v21;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID: stopping %p state: %{public}s IOProc %p: %{public}s", buf, 0x3Au);
    if (v40 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v22 = *((void *)this + 3);
  if (a2
    && *(void *)(v22 + 112)
    && *(int (**)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(v22 + 136) != a2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 497;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID: failed to stop because the IOProcID wasn't nullptr or wasn't registered", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  kdebug_trace();
  uint64_t v23 = HALS_IOPrewarmManager::Stop((void *)this + 184, a2 == 0);
  int v25 = v23;
  if (v23 != 2)
  {
    uint64_t v26 = *(void *)(*((void *)this + 3) + 112);
    if (v26)
    {
      if (*(unsigned char *)(v26 + 32)) {
        *(unsigned char *)(v26 + 32) = 0;
      }
    }
  }
  int v27 = *((_DWORD *)this + 372);
  if (*((void *)this + 185) || !v27 || *((void *)this + 184))
  {
    if (!*((_DWORD *)this + 324) && v23 | v27)
    {
      if (v7)
      {
        BOOL v28 = a2 == 0;
        uint64_t v29 = (char *)this + 1064;
        *(void *)std::string buf = &unk_1F147AE68;
        *(void *)&uint8_t buf[8] = v28 | (v23 << 32);
        *(void *)&v36[4] = buf;
        if ((char *)this + 1064 != buf)
        {
          if (*((char **)this + 136) == v29)
          {
            std::__function::__func<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(HALS_IOContext_Legacy_Impl*)>::__clone((uint64_t)buf, __p);
            (*(void (**)(void))(**(void **)&v36[4] + 32))(*(void *)&v36[4]);
            *(void *)&v36[4] = 0;
            (*(void (**)(void, unsigned char *))(**((void **)this + 136) + 24))(*((void *)this + 136), buf);
            (*(void (**)(void))(**((void **)this + 136) + 32))(*((void *)this + 136));
            *((void *)this + 136) = 0;
            *(void *)&v36[4] = buf;
            (*((void (**)(void **, char *))__p[0] + 3))(__p, (char *)this + 1064);
            (*((void (**)(void **))__p[0] + 4))(__p);
          }
          else
          {
            std::__function::__func<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(HALS_IOContext_Legacy_Impl*)>::__clone((uint64_t)buf, (void *)this + 133);
            (*(void (**)(void))(**(void **)&v36[4] + 32))(*(void *)&v36[4]);
            *(void *)&v36[4] = *((void *)this + 136);
          }
          *((void *)this + 136) = v29;
        }
        std::__function::__value_func<void ()(HALS_IOContext_Legacy_Impl *)>::~__value_func[abi:ne180100](buf);
      }
      else
      {
        HALS_IOContext_Legacy_Impl::ChangeFromPlayingToPrewarming((uint64_t)this, a2 == 0, v23);
      }
    }
    int v30 = 0;
  }
  else
  {
    *((_DWORD *)this + 265) = a2 == 0;
    HALS_IOContext_Legacy_Impl::StopIOThread(this);
    int v30 = 1;
  }
  *((_DWORD *)this + 372) = v25;
  HALS_ObjectMap::ReleaseObject(v8, v24);
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v32);
  if (v30) {
    HALS_IOContext_Legacy_Impl::Stop_DeactivateDSP(this);
  }
  if (!v7) {
    os_unfair_recursive_lock_unlock();
  }
}

void sub_1BAE45FB4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *std::__function::__value_func<void ()(HALS_IOContext_Legacy_Impl *)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void HALS_IOContext_Legacy_Impl::ChangeFromPlayingToPrewarming(uint64_t a1, int a2, int a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  BOOL v6 = (_opaque_pthread_t **)(a1 + 312);
  int v7 = HALB_IOThread::WaitForState((HALB_IOThread *)(a1 + 312), 1735354734);
  if (HALB_IOThread::IsCurrentThread((HALB_IOThread *)v6, 1))
  {
    double v8 = HALS_IOThread::ClearAllSyscallMasks(v6);
    if (v8)
    {
      int v9 = (int)v8;
      AMCP::Log::Scope_Registry::get(v8);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      BOOL v10 = *(caulk::concurrent::messenger **)(*(void *)buf + 8);
      int v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      long long v13 = __error();
      long long v14 = strerror(*v13);
      uint64_t v15 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
      *(_DWORD *)(v15 + 16) = 0;
      *(unsigned char *)(v15 + 20) = 16;
      *(_DWORD *)(v15 + 24) = v12;
      *(void *)(v15 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
      *(_DWORD *)(v15 + 40) = 580;
      *(_DWORD *)(v15 + 44) = v9;
      *(void *)(v15 + 48) = v14;
      *(void *)uint64_t v15 = &unk_1F147AEF8;
      *(void *)(v15 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v10, (caulk::concurrent::message *)v15);
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
    }
  }
  int v16 = HALS_IOContext_Legacy_Impl::ChangeEngineState_Off(a1, a2, a3);
  int v17 = v16;
  if (v7 && v7 != 89)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 591;
      __int16 v36 = 1024;
      int v37 = v7;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::ChangeFromPlayingToPrewarming: got a kernel error while waiting for the thread to be running, Error: 0x%X", buf, 0x18u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v7;
  }
  int v18 = *(_DWORD *)(a1 + 1056);
  if (v18)
  {
    char v30 = HIBYTE(*(_DWORD *)(a1 + 1056));
    char v31 = BYTE2(v18);
    char v32 = BYTE1(v18);
    char v33 = v18;
    char v34 = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 593;
      __int16 v36 = 1024;
      int v37 = v18;
      __int16 v38 = 2080;
      uint64_t v39 = &v30;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::ChangeFromPlayingToPrewarming returned a thread error waiting for IO thread to run, Error: %d (%s)", buf, 0x22u);
    }
    uint64_t v26 = __cxa_allocate_exception(0x10uLL);
    int v27 = *(_DWORD *)(a1 + 1056);
    *(void *)uint64_t v26 = off_1F148A5D8;
    void v26[2] = v27;
  }
  if (v16)
  {
    char v30 = HIBYTE(v16);
    char v31 = BYTE2(v16);
    char v32 = BYTE1(v16);
    char v33 = v16;
    char v34 = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 595;
      __int16 v36 = 1024;
      int v37 = v17;
      __int16 v38 = 2080;
      uint64_t v39 = &v30;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::ChangeFromPlayingToPrewarming: got an error from ChangeEngineState_Off, possibly indicating a driver failure, Error: %d (%s)", buf, 0x22u);
    }
    BOOL v28 = __cxa_allocate_exception(0x10uLL);
    *(void *)BOOL v28 = off_1F148A5D8;
    v28[2] = v17;
  }
  if (!HALS_IOContext::GetAudioCaptureMode(*(HALS_IOContext **)(a1 + 24))
    && HALB_IOThread::IsCurrentThread((HALB_IOThread *)v6, 1))
  {
    uint64_t v19 = HALS_IOThread::EnableRTSafeSyscallMasks(v6);
    if (v19)
    {
      AMCP::Log::Scope_Registry::get(v19);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v20 = *(caulk::concurrent::messenger **)(*(void *)buf + 8);
      AudioObjectPropertyAddress v21 = pthread_self();
      mach_port_t v22 = pthread_mach_thread_np(v21);
      uint64_t v23 = __error();
      unsigned int v24 = strerror(*v23);
      uint64_t v25 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
      *(_DWORD *)(v25 + 16) = 0;
      *(unsigned char *)(v25 + 20) = 16;
      *(_DWORD *)(v25 + 24) = v22;
      *(void *)(v25 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
      *(_DWORD *)(v25 + 40) = 607;
      *(_DWORD *)(v25 + 44) = v7;
      *(void *)(v25 + 48) = v24;
      *(void *)uint64_t v25 = &unk_1F147AF50;
      *(void *)(v25 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v20, (caulk::concurrent::message *)v25);
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
    }
  }
}

void sub_1BAE465D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::ChangeFromPlayingToPrewarming(HALS_IOPrewarmManager::PlayRequest,HALS_IOPrewarmManager::EngineState)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  int v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    uint64_t v8 = *(void *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)int v11 = 2080;
    *(void *)&void v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 2080;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Failed to set the RT safe syscall masks: %d - %s", (uint8_t *)&v10, 0x28u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAE46748(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::ChangeFromPlayingToPrewarming(HALS_IOPrewarmManager::PlayRequest,HALS_IOPrewarmManager::EngineState)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::ChangeFromPlayingToPrewarming(HALS_IOPrewarmManager::PlayRequest,HALS_IOPrewarmManager::EngineState)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  int v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    uint64_t v8 = *(void *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)int v11 = 2080;
    *(void *)&void v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 2080;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Failed to clear the syscall masks: %d - %s", (uint8_t *)&v10, 0x28u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAE468DC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::ChangeFromPlayingToPrewarming(HALS_IOPrewarmManager::PlayRequest,HALS_IOPrewarmManager::EngineState)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(HALS_IOContext_Legacy_Impl*)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(HALS_IOContext_Legacy_Impl*)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl28Server_Internal_StopIOProcIDEPFijPK14AudioTimeStampPK15AudioBufferListS2_PS3_S2_PvEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(HALS_IOContext_Legacy_Impl*)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  HALS_IOContext_Legacy_Impl::ChangeFromPlayingToPrewarming(*a2, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  *(unsigned char *)(v2 + 1468) = 1;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(HALS_IOContext_Legacy_Impl*)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1F147AE68;
  a2[1] = *(void *)(result + 8);
  return result;
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(HALS_IOContext_Legacy_Impl*)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F147AE68;
  result[1] = v3;
  return result;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0,std::allocator<HALS_IOContext_Legacy_Impl::Server_Internal_StopIOProcID(int (*)(unsigned int,AudioTimeStamp const*,AudioBufferList const*,AudioTimeStamp const*,AudioBufferList*,AudioTimeStamp const*,void *))::$_0>,void ()(HALS_IOContext_Legacy_Impl*)>::~__func()
{
}

uint64_t HALS_IOContext_Legacy_Impl::Server_Internal_StartIOProcID(HALS_IOContext_Legacy_Impl *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), AudioTimeStamp *a3, unsigned int a4)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v72 = (char *)this + 312;
  int v73 = HALB_Mutex::Lock((HALS_IOContext_Legacy_Impl *)((char *)this + 328));
  HasBeenDeactivated = (AMCP::Log::Scope_Registry *)HALS_IOThread::HasBeenDeactivated((HALS_IOContext_Legacy_Impl *)((char *)this + 312));
  if (HasBeenDeactivated)
  {
    AMCP::Log::Scope_Registry::get(HasBeenDeactivated);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v47 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      long long v48 = pthread_self();
      mach_port_t v49 = pthread_mach_thread_np(v48);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v49;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 350;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "mIOThread.HasBeenDeactivated() == true";
      _os_log_error_impl(&dword_1BAA78000, v47, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Cannot start IO Thread since it has been deactivated", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v71);
    __cxa_allocate_exception(0x40uLL);
    int v62 = off_1F148A5D8;
    int v63 = 1852797029;
    LODWORD(v65) = 1852797029;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    int v70 = -1;
    long long __p = &unk_1F1487130;
    uint64_t v66 = &unk_1F1487158;
    uint64_t v67 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(void *)&uint8_t buf[32] = "virtual void HALS_IOContext_Legacy_Impl::Server_Internal_StartIOProcID(AudioDeviceIOProcID, Au"
                          "dioTimeStamp *, UInt32)";
    *(void *)&uint8_t buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOContext_Legacy_Impl.cpp";
    LODWORD(v76) = 350;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v57);
    int v59 = (void **)&unk_1F148AA90;
    long long v60 = v57;
    uint64_t v61 = v58;
    long long v57 = 0uLL;
    uint64_t v58 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
  }
  if (a3) {
    int v9 = (a4 >> 3) & 1;
  }
  else {
    int v9 = 0;
  }
  if (v9 == 1)
  {
    unsigned int NumberStreams = (AMCP::Log::Scope_Registry *)HALS_IOContextDescription::GetNumberStreams((HALS_IOContext_Legacy_Impl *)((char *)this + 1496), 1);
    if (!NumberStreams) {
      goto LABEL_65;
    }
    unint64_t v11 = 0;
    BOOL v12 = 1;
    do
    {
      if (*((void *)this + 204) == v11) {
        break;
      }
      if ((*(void *)(*((void *)this + 203) + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11)) {
        break;
      }
      BOOL v12 = ++v11 < NumberStreams;
    }
    while (NumberStreams != v11);
    if (!v12)
    {
LABEL_65:
      AMCP::Log::Scope_Registry::get(NumberStreams);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v50 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      {
        mach_port_t v51 = pthread_self();
        mach_port_t v52 = pthread_mach_thread_np(v51);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v52;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "HALS_IOContext_Legacy_Impl.cpp";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = 358;
        *(_WORD *)&unsigned char buf[24] = 2080;
        *(void *)&buf[26] = "IsAnyInputStreamEnabled() == false";
        _os_log_error_impl(&dword_1BAA78000, v50, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Cannot start IO for catch up if input streams are disabled", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v71);
      __cxa_allocate_exception(0x40uLL);
      int v62 = off_1F148A5D8;
      int v63 = 1852797029;
      LODWORD(v65) = 1852797029;
      uint64_t v68 = 0;
      uint64_t v69 = 0;
      int v70 = -1;
      long long __p = &unk_1F1487130;
      uint64_t v66 = &unk_1F1487158;
      uint64_t v67 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
      *(void *)&uint8_t buf[32] = "virtual void HALS_IOContext_Legacy_Impl::Server_Internal_StartIOProcID(AudioDeviceIOProcID, "
                            "AudioTimeStamp *, UInt32)";
      *(void *)&uint8_t buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOContext_Legacy_Impl.cpp";
      LODWORD(v76) = 358;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v57);
      int v59 = (void **)&unk_1F148AA90;
      long long v60 = v57;
      uint64_t v61 = v58;
      long long v57 = 0uLL;
      uint64_t v58 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
    }
  }
  int v13 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 378));
  uint64_t v14 = *((void *)this + 190);
  BOOL v15 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
  if (v13 && v14)
  {
    if (!v15) {
      goto LABEL_19;
    }
    int v16 = *(_DWORD *)(*((void *)this + 3) + 16);
    uint64_t v17 = (*(uint64_t (**)(HALS_ObjectMap *))(*(void *)v13 + 216))(v13);
    *(_DWORD *)std::string buf = 136316162;
    *(void *)&uint8_t buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 366;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = v16;
    *(_WORD *)&unsigned char buf[24] = 2082;
    *(void *)&buf[26] = v14 + 32;
    *(_WORD *)&buf[34] = 2082;
    *(void *)&buf[36] = v17;
    uint64_t v18 = MEMORY[0x1E4F14500];
    uint64_t v19 = "%25s:%-5d  HALS_IOContext_Legacy_Impl::Server_Internal_StartIOProcID: %d %{public}s (%{public}s):";
    uint32_t v20 = 44;
  }
  else
  {
    if (!v15) {
      goto LABEL_19;
    }
    int v21 = *(_DWORD *)(*((void *)this + 3) + 16);
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 370;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = v21;
    uint64_t v18 = MEMORY[0x1E4F14500];
    uint64_t v19 = "%25s:%-5d  HALS_IOContext_Legacy_Impl::Server_Internal_StartIOProcID: %d:";
    uint32_t v20 = 24;
  }
  _os_log_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_DEFAULT, v19, buf, v20);
LABEL_19:
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    AMCP::IO_Core::Play_State_Manager::get_debug_string((AMCP::IO_Core::Play_State_Manager *)&__p, *((void *)this + 184), *((void *)this + 185));
    if (SHIBYTE(v66) >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    uint64_t v23 = *((void *)this + 3);
    uint64_t v24 = *(void *)(v23 + 136);
    uint64_t v25 = *(void *)(v23 + 112);
    uint64_t v26 = "no";
    if (v25 && *(unsigned char *)(v25 + 32)) {
      uint64_t v26 = "yes";
    }
    *(_DWORD *)std::string buf = 136316418;
    *(void *)&uint8_t buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 372;
    *(_WORD *)&unsigned char buf[18] = 2048;
    *(void *)&buf[20] = a2;
    *(_WORD *)&unsigned char buf[28] = 2082;
    *(void *)&buf[30] = p_p;
    *(_WORD *)&buf[38] = 2048;
    *(void *)&uint8_t buf[40] = v24;
    LOWORD(v76) = 2082;
    *(void *)((char *)&v76 + 2) = v26;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  \t\t\t\tstarting ProcID %p state: %{public}s IOProc %p: %{public}s", buf, 0x3Au);
    if (SHIBYTE(v66) < 0) {
      operator delete(__p);
    }
  }
  HALS_IOContext_Legacy_Impl::Start_ActivateDSP((uint64_t **)this);
  kdebug_trace();
  BOOL v27 = a2 == 0;
  int v28 = HALS_IOPrewarmManager::Start((void *)this + 184, v27);
  int v30 = v28;
  if ((v28 - 1) >= 2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 381;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::Server_Internal_StartIOProcID: Start failed to change the prewarming state in a reasonable way", buf, 0x12u);
    }
  }
  else if (v28 == 2)
  {
    uint64_t v31 = *(void *)(*((void *)this + 3) + 112);
    if (v31)
    {
      if (!*(unsigned char *)(v31 + 32)) {
        *(unsigned char *)(v31 + 32) = 1;
      }
    }
  }
  int v32 = *((_DWORD *)this + 372);
  if (*((void *)this + 185))
  {
    BOOL v33 = 1;
    if (v32) {
      goto LABEL_45;
    }
  }
  else
  {
    BOOL v33 = *((void *)this + 184) != 0;
    if (v32) {
      goto LABEL_45;
    }
  }
  if (v33)
  {
    if (v9)
    {
      UInt64 mHostTime = a3->mHostTime;
      *((void *)this + 178) = mHostTime;
      *((_DWORD *)this + 346) = 1;
      __int16 v35 = (AMCP::Log::Scope_Registry *)*((void *)this + 177);
      if (v35) {
        __int16 v35 = (AMCP::Log::Scope_Registry *)std::function<void ()(IORunningState)>::operator()((uint64_t)v35, 1);
      }
      AMCP::Log::Scope_Registry::get(v35);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      __int16 v36 = *(caulk::concurrent::messenger **)(*(void *)buf + 8);
      int v37 = pthread_self();
      mach_port_t v38 = pthread_mach_thread_np(v37);
      uint64_t v39 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
      *(_DWORD *)(v39 + 16) = 0;
      *(unsigned char *)(v39 + 20) = 0;
      *(_DWORD *)(v39 + 24) = v38;
      *(void *)(v39 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
      *(_DWORD *)(v39 + 40) = 3819;
      *(void *)(v39 + 48) = mHostTime;
      *(void *)uint64_t v39 = &unk_1F147C4F0;
      *(void *)(v39 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v36, (caulk::concurrent::message *)v39);
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
    }
    else
    {
      *((_DWORD *)this + 346) = 0;
      uint64_t v45 = *((void *)this + 177);
      if (v45) {
        std::function<void ()(IORunningState)>::operator()(v45, 0);
      }
    }
    *((_DWORD *)this + 265) = v27;
    HALS_IOContext_Legacy_Impl::StartIOThread((HALS_IOContext_Legacy_Impl *)&__p, (uint64_t)this);
    *(_DWORD *)std::string buf = v65;
    *(_WORD *)&uint8_t buf[4] = 1;
    *(void *)&uint8_t buf[8] = 850045863;
    memset(&buf[16], 0, 32);
    long long v76 = 0u;
    long long v77 = 0u;
    AMCP::Utility::Mach_Port::~Mach_Port((AMCP::Utility::Mach_Port *)buf);
    goto LABEL_56;
  }
LABEL_45:
  if (*((_DWORD *)this + 324)) {
    goto LABEL_56;
  }
  int v40 = HALB_IOThread::WaitForState((HALS_IOContext_Legacy_Impl *)((char *)this + 312), 1735354734);
  int v41 = HALS_IOContext_Legacy_Impl::ChangeEngineState_On((uint64_t)this, v27);
  int v42 = v41;
  if (v40 && v40 != 89)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 423;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v40;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::Server_Internal_StartIOProcID: got a kernel error waiting for IO thread to run, Error: 0x%X", buf, 0x18u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v40;
  }
  int v43 = *((_DWORD *)this + 264);
  if (v43)
  {
    LOBYTE(__p) = HIBYTE(*((_DWORD *)this + 264));
    BYTE1(__p) = BYTE2(v43);
    BYTE2(__p) = BYTE1(v43);
    *(_WORD *)((char *)&__p + 3) = v43;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 425;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v43;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = &__p;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::Server_Internal_StartIOProcID returned a thread error waiting for IO thread to run, Error: %d (%s)", buf, 0x22u);
    }
    int v53 = __cxa_allocate_exception(0x10uLL);
    int v54 = *((_DWORD *)this + 264);
    *(void *)int v53 = off_1F148A5D8;
    unsigned int v53[2] = v54;
  }
  if (v41)
  {
    LOBYTE(__p) = HIBYTE(v41);
    BYTE1(__p) = BYTE2(v41);
    BYTE2(__p) = BYTE1(v41);
    *(_WORD *)((char *)&__p + 3) = v41;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 427;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v42;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = &__p;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::Server_Internal_StartIOProcID: got an error from ChangeEngineState_On, possibly indicating a driver failure, Error: %d (%s)", buf, 0x22u);
    }
    CFArrayRef v55 = __cxa_allocate_exception(0x10uLL);
    *(void *)CFArrayRef v55 = off_1F148A5D8;
    v55[2] = v42;
  }
  if (v30 == *((_DWORD *)this + 372))
  {
LABEL_56:
    *((_DWORD *)this + 372) = v30;
    HALS_ObjectMap::ReleaseObject(v13, v29);
    goto LABEL_57;
  }
  LOBYTE(v62) = 0;
  v74[0] = &unk_1F147ADA8;
  v74[1] = HALS_IOContext_Legacy_Impl::IsAnyEngineMixing_Helper;
  v74[2] = &v62;
  v74[3] = v74;
  long long __p = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
  uint64_t v65 = v74;
  *(void *)&long long v57 = &off_1F147D460;
  int v59 = &__p;
  *(void *)std::string buf = caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
  *(void *)&uint8_t buf[8] = &v59;
  VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine>(*((void *)this + 191), *((void *)this + 192), (uint64_t (**)(void, void *))buf, (uint64_t)&v57);
  std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v74);
  if (!(_BYTE)v62)
  {
    *((unsigned char *)this + 1301) = 1;
    *((_DWORD *)this + 372) = v30;
    HALS_ObjectMap::ReleaseObject(v13, v44);
    HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v72);
    HALB_Guard::Notify((pthread_cond_t *)((char *)this + 328));
    return os_unfair_recursive_lock_unlock();
  }
  *((_DWORD *)this + 372) = v30;
  HALS_ObjectMap::ReleaseObject(v13, v44);
LABEL_57:
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v72);
  return os_unfair_recursive_lock_unlock();
}

void sub_1BAE4775C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, std::exception a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    *(_DWORD *)(v34 + 1488) = HALS_IOPrewarmManager::Stop((void *)(v34 + 1472), *(_DWORD *)(v34 + 1060));
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAE478CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, std::exception a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (__p) {
    operator delete(__p);
  }
  if (a11) {
    operator delete(a11);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::~clone_impl(v33 - 192);
  boost::exception_detail::error_info_injector<CAException>::~error_info_injector((uint64_t)&a21);
  std::exception::~exception(&a19);
  if (v31) {
    __cxa_free_exception(v32);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a31);
  JUMPOUT(0x1BAE47950);
}

void sub_1BAE47930()
{
}

uint64_t std::function<void ()(IORunningState)>::operator()(uint64_t a1, int a2)
{
  int v3 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 48))(a1, &v3);
}

void *std::__function::__func<std::__bind<int (&)(BOOL &,HALS_IOEngineInfo &),std::reference_wrapper<BOOL>,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(BOOL &,HALS_IOEngineInfo &),std::reference_wrapper<BOOL>,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t std::__function::__func<std::__bind<int (&)(BOOL &,HALS_IOEngineInfo &),std::reference_wrapper<BOOL>,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(BOOL &,HALS_IOEngineInfo &),std::reference_wrapper<BOOL>,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__16__bindIRFiRbR17HALS_IOEngineInfoEJNS_17reference_wrapperIbEERKNS_12placeholders4__phILi1EEEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::__bind<int (&)(BOOL &,HALS_IOEngineInfo &),std::reference_wrapper<BOOL>,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(BOOL &,HALS_IOEngineInfo &),std::reference_wrapper<BOOL>,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(void *)(a1 + 16));
}

__n128 std::__function::__func<std::__bind<int (&)(BOOL &,HALS_IOEngineInfo &),std::reference_wrapper<BOOL>,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(BOOL &,HALS_IOEngineInfo &),std::reference_wrapper<BOOL>,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F147ADA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<int (&)(BOOL &,HALS_IOEngineInfo &),std::reference_wrapper<BOOL>,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(BOOL &,HALS_IOEngineInfo &),std::reference_wrapper<BOOL>,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F147ADA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<std::__bind<int (&)(BOOL &,HALS_IOEngineInfo &),std::reference_wrapper<BOOL>,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(BOOL &,HALS_IOEngineInfo &),std::reference_wrapper<BOOL>,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::~__func()
{
}

uint64_t HALS_IOContext_Legacy_Impl::IsAnyEngineMixing_Helper(HALS_IOContext_Legacy_Impl *this, BOOL *a2, HALS_IOEngineInfo *a3)
{
  if (*(unsigned char *)this) {
    return 1;
  }
  if ((*(unsigned int (**)(BOOL *))(*(void *)a2 + 16))(a2)) {
    *(unsigned char *)this = (*(uint64_t (**)(BOOL *))(*(void *)a2 + 312))(a2);
  }
  return *(unsigned __int8 *)this;
}

void sub_1BAE47B6C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315394;
      *(void *)((char *)&a9 + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 5998;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IsAnyEngineMixing_Helper: Caught exception trying to stop hardware", (uint8_t *)&a9, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAE47B3CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::SaveAnchorTime(unsigned long long,unsigned int)::$_0,std::tuple<unsigned int,char const*,int,unsigned long long>>::perform(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    LODWORD(v9) = 67109890;
    HIDWORD(v9) = v4;
    *(_WORD *)BOOL v10 = 2080;
    *(void *)&v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 2048;
    uint64_t v14 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d HALS_IOContext_Legacy_Impl::SaveAnchorTime:  %llu", (uint8_t *)&v9, 0x22u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAE47D2C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::SaveAnchorTime(unsigned long long,unsigned int)::$_0,std::tuple<unsigned int,char const*,int,unsigned long long>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t HALS_IOContext_Legacy_Impl::TranslateTime(uint64_t this, const AudioTimeStamp *a2, AudioTimeStamp *a3)
{
  uint64_t v3 = *(void *)(this + 1520);
  if (v3)
  {
    if (*(void *)(v3 + 8)) {
      return HALS_IOClock::TranslateTime(*(void *)(v3 + 288), a2, a3);
    }
  }
  return this;
}

HALS_IOClock *HALS_IOContext_Legacy_Impl::GetCurrentTime(HALS_IOClock *this, AudioTimeStamp *a2)
{
  uint64_t v2 = *((void *)this + 190);
  if (v2 && *(void *)(v2 + 8))
  {
    this = *(HALS_IOClock **)(v2 + 288);
    if (this) {
      return (HALS_IOClock *)HALS_IOClock::GetCurrentTime(this, a2);
    }
  }
  return this;
}

uint64_t HALS_IOContext_Legacy_Impl::FinishWaitingForTapStart(uint64_t this)
{
  return this;
}

uint64_t HALS_IOContext_Legacy_Impl::StopWaitingForTapStart(HALS_IOContext_Legacy_Impl *this)
{
  HALS_IOContext_Legacy_Impl::StopIOThread(this);
  int v4 = (char *)this + 312;
  int v5 = HALB_Mutex::Lock((HALS_IOContext_Legacy_Impl *)((char *)this + 328));
  uint64_t v2 = HALB_IOThread::HasBeenStopped((HALS_IOContext_Legacy_Impl *)((char *)this + 312)) ^ 1;
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v4);
  return v2;
}

void sub_1BAE47E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t HALS_IOContext_Legacy_Impl::BlockStartOnTapStart(HALS_IOContext_Legacy_Impl *this)
{
  void v12[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (HALS_IOContext_Legacy_Impl *)((char *)this + 312);
  HALB_IOThread::WaitForState((HALS_IOContext_Legacy_Impl *)((char *)this + 312), 1735552612);
  int v9 = v2;
  int v10 = HALB_Mutex::Lock((HALS_IOContext_Legacy_Impl *)((char *)this + 328));
  *((unsigned char *)this + 484) = 0;
  while (1)
  {
    __int16 v11 = 0;
    CFDictionaryRef v3 = (const __CFDictionary *)*((void *)this + 188);
    v12[0] = &unk_1F1480D48;
    v12[1] = (char *)&v11 + 1;
    uint64_t v12[2] = &v11;
    v12[3] = v12;
    int v4 = for_all_taps(v3, (uint64_t)v12);
    std::__function::__value_func<BOOL ()(HALS_Releaser<HALS_Tap>)>::~__value_func[abi:ne180100](v12);
    int v5 = HIBYTE(v11) | v11 ? 0 : v4;
    if (v5 != 1 || (HALB_IOThread::HasBeenStopped(v2) & 1) != 0) {
      break;
    }
    uint64_t v6 = mach_absolute_time();
    HALS_IOContext_Legacy_Impl::IOWorkLoop_SleepUntilWakeTime(this, v6 + 2400000);
  }
  int HasBeenStopped = HALB_IOThread::HasBeenStopped(v2);
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v9);
  return HasBeenStopped ^ 1u;
}

void sub_1BAE47F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a2)
  {
    HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&a9);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAE47F34);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOContext_Legacy_Impl::IOWorkLoop_SleepUntilWakeTime(HALS_IOContext_Legacy_Impl *this, unint64_t a2)
{
  BOOL v12 = 0;
  unint64_t v4 = __udivti3();
  int v5 = (HALS_IOContext_Legacy_Impl *)((char *)this + 328);
  HALB_Guard::WaitUntil((HALS_IOContext_Legacy_Impl *)((char *)this + 328), v4, &v12);
  uint64_t v6 = mach_absolute_time();
  if (v12)
  {
    unint64_t v8 = v6;
    if ((HALB_IOThread::HasBeenStopped((HALS_IOContext_Legacy_Impl *)((char *)this + 312)) & 1) == 0
      && (double)v8 - (double)a2 < 0.0)
    {
      HALB_Guard::WaitUntil((HALS_IOContext_Legacy_Impl *)((char *)this + 328), v4, &v12);
    }
  }
  else
  {
    uint64_t v9 = *((void *)this + 190);
    double v10 = 44100.0;
    if (v9 && *(void *)(v9 + 8) && (double v10 = *(double *)(v9 + 768), v10 <= 0.0))
    {
      LODWORD(v11) = 100;
    }
    else
    {
      LODWORD(v7) = *((_DWORD *)this + 330);
      unint64_t v11 = (unint64_t)((double)v7 / v10 * 0.05 * 1000.0 * 1000.0);
    }
    HALB_Mutex::Unlock(v5);
    usleep(v11);
    HALB_Mutex::Lock(v5);
  }
}

uint64_t HALS_IOContext_Legacy_Impl::IsWaitingForTapStart(HALS_IOContext_Legacy_Impl *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 2024);
  return v1 & 1;
}

void HALS_IOContext_Legacy_Impl::WaitForTapStart(HALS_IOContext_Legacy_Impl *this)
{
  uint64_t v2 = (std::thread *)((char *)this + 2016);
  if (*((void *)this + 252))
  {
    HALS_IOContext_Legacy_Impl::StopWaitingForTapStart(this);
    std::thread::join(v2);
  }
  atomic_store(1u, (unsigned __int8 *)this + 2024);
  operator new();
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,HALS_IOContext_Legacy_Impl::WaitForTapStart(void)::$_0>>::~unique_ptr[abi:ne180100](uint64_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v2);
    MEMORY[0x1C1859840](v2, 0x1020C403A5D3213);
  }
  return a1;
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,HALS_IOContext_Legacy_Impl::WaitForTapStart(void)::$_0>>(uint64_t *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  unint64_t v11 = a1;
  unsigned __int8 v1 = std::__thread_local_data();
  uint64_t v2 = (const void *)*v11;
  *unint64_t v11 = 0;
  pthread_setspecific(v1->__key_, v2);
  unint64_t v4 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)v11 + 2));
  if (v4)
  {
    kdebug_trace();
    int v5 = (*(uint64_t (**)(void *))(**((void **)v4 + 12) + 728))(*((void **)v4 + 12));
    snprintf(__str, 0x12CuLL, "Tap wait thread: %u", v5);
    pthread_setname_np(__str);
    int v6 = (*(uint64_t (**)(void *))(**((void **)v4 + 12) + 432))(*((void **)v4 + 12));
    kdebug_trace();
    if (v6) {
      (*(void (**)(void *))(**((void **)v4 + 12) + 448))(*((void **)v4 + 12));
    }
  }
  HALS_ObjectMap::ReleaseObject(v4, v3);
  uint64_t v7 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)v11 + 2));
  uint64_t v9 = (HALS_ObjectMap *)v7;
  if (v7) {
    (*(void (**)(void))(**(void **)(v7 + 96) + 456))(*(void *)(v7 + 96));
  }
  HALS_ObjectMap::ReleaseObject(v9, v8);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,HALS_IOContext_Legacy_Impl::WaitForTapStart(void)::$_0>>::~unique_ptr[abi:ne180100](&v11);
  return 0;
}

void sub_1BAE4848C(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, __int16 buf, char a12, uint8_t a13, uint64_t a14, __int16 a15, __int16 a16, int a17)
{
  HALS_ObjectMap::ReleaseObject(v17, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,HALS_IOContext_Legacy_Impl::WaitForTapStart(void)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContext_Legacy_Impl::TapInputIsEnabled(HALS_IOContext_Legacy_Impl *this)
{
  return *((unsigned __int8 *)this + 1377);
}

uint64_t HALS_IOContext_Legacy_Impl::EnableTapInput(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1377) = a2;
  return this;
}

uint64_t HALS_IOContext_Legacy_Impl::MicInputIsEnabled(HALS_IOContext_Legacy_Impl *this)
{
  return *((unsigned __int8 *)this + 1376);
}

uint64_t HALS_IOContext_Legacy_Impl::EnableMicInput(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1376) = a2;
  return this;
}

void HALS_IOContext_Legacy_Impl::LogState(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    int v6 = (void *)(a2 + 16);
    int v7 = a3;
    do
    {
      int v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"    ", 4);
      --v7;
    }
    while (v7);
  }
  unint64_t v8 = (void *)(a2 + 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"IO Context ", 11);
  uint64_t v9 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(void *)(*v9 - 24)));
  double v10 = std::locale::use_facet(&v29, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v29);
  std::ostream::put();
  std::ostream::flush();
  v27[0] = 0;
  v27[1] = v27;
  v27[2] = 0x2000000000;
  v27[3] = &v29;
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x2000000000;
  char v26 = 0;
  v23[0] = 0;
  v23[1] = v23;
  v23[2] = 0x2000000000;
  int v24 = 0;
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 0x40000000;
  v22[2] = ___ZNK26HALS_IOContext_Legacy_Impl8LogStateERNSt3__118basic_stringstreamIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj_block_invoke;
  void v22[3] = &unk_1E6234F50;
  v22[4] = v27;
  v22[5] = v25;
  void v22[6] = v23;
  void v22[7] = a1;
  unint64_t v11 = (HALB_Mutex *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 56))(*(void *)(a1 + 24));
  HALB_CommandGate::ExecuteCommand(v11, (uint64_t)v22);
  if (a3 != -1)
  {
    int v12 = a3 + 1;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"    ", 4);
      --v12;
    }
    while (v12);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Client ID:      ", 16);
  uint64_t v13 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
  uint64_t v14 = std::locale::use_facet(&v28, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v28);
  std::ostream::put();
  std::ostream::flush();
  if (a3 != -1)
  {
    int v15 = a3 + 1;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"    ", 4);
      --v15;
    }
    while (v15);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"IO Thread Name: ", 16);
  size_t v16 = strlen((const char *)&v29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v29, v16);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
  uint64_t v17 = std::locale::use_facet(&v28, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v28);
  std::ostream::put();
  std::ostream::flush();
  if (a3 != -1)
  {
    int v18 = a3 + 1;
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"    ", 4);
      --v18;
    }
    while (v18);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Is Running:     ", 16);
  if (*(unsigned char *)(a1 + 1300)) {
    uint64_t v19 = "yes";
  }
  else {
    uint64_t v19 = "no";
  }
  if (*(unsigned char *)(a1 + 1300)) {
    uint64_t v20 = 3;
  }
  else {
    uint64_t v20 = 2;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v19, v20);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(void *)(*v8 - 24)));
  int v21 = std::locale::use_facet(&v28, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale(&v28);
  std::ostream::put();
  std::ostream::flush();
  _Block_object_dispose(v23, 8);
  _Block_object_dispose(v25, 8);
  _Block_object_dispose(v27, 8);
}

void sub_1BAE48A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,std::locale a29,std::locale a30)
{
}

size_t ___ZNK26HALS_IOContext_Legacy_Impl8LogStateERNSt3__118basic_stringstreamIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj_block_invoke(void *a1)
{
  uint64_t v2 = a1[7];
  size_t result = strlcpy(*(char **)(*(void *)(a1[4] + 8) + 24), (const char *)(v2 + 492), 0x80uLL);
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = *(unsigned char *)(v2 + 1300);
  *(_DWORD *)(*(void *)(a1[6] + 8) + 24) = **(_DWORD **)(*(void *)(v2 + 24) + 64);
  return result;
}

uint64_t HALS_IOContext_Legacy_Impl::CopyWorkIntervalPort(HALS_IOContext_Legacy_Impl *this)
{
  return HALS_IOThread::CopyWorkgroupIntervalPort((HALS_IOContext_Legacy_Impl *)((char *)this + 312));
}

void *HALS_IOContext_Legacy_Impl::UpdateIssueReportersOnEngines(HALS_IOContext_Legacy_Impl *this)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  v7[0] = &unk_1F147C768;
  v7[1] = _Block_copy(&__block_literal_global_12374);
  void v7[3] = v7;
  v4[0] = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
  v4[1] = v7;
  CFDictionaryRef v3 = &off_1F147D460;
  int v5 = v4;
  v6[0] = (uint64_t (*)(void, void *))caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
  v6[1] = (uint64_t (*)(void, void *))&v5;
  VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine>(*((void *)this + 191), *((void *)this + 192), v6, (uint64_t)&v3);
  return std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v7);
}

void sub_1BAE48C30(_Unwind_Exception *a1)
{
  std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100]((void *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t ___ZN26HALS_IOContext_Legacy_Impl29UpdateIssueReportersOnEnginesEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 608))(v2);
  }
  return 0;
}

uint64_t HALS_IOContext_Legacy_Impl::ThreadHasBeenStopped(HALS_IOContext_Legacy_Impl *this)
{
  return HALB_IOThread::HasBeenStopped((HALS_IOContext_Legacy_Impl *)((char *)this + 312));
}

uint64_t HALS_IOContext_Legacy_Impl::InjectFailureStateForTest(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1380) = a2;
  return result;
}

void HALS_IOContext_Legacy_Impl::ExecuteWorkWithControlAndIOThreadLocker(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 312;
  int v5 = *(_opaque_pthread_t **)(a1 + 320);
  int v6 = pthread_self();
  int v7 = pthread_equal(v5, v6);
  if (!v7) {
    os_unfair_recursive_lock_lock_with_options();
  }
  uint64_t v9 = v4;
  int v10 = HALB_Mutex::Lock((HALB_Mutex *)(a1 + 328));
  uint64_t v8 = *(void *)(a2 + 24);
  if (!v8) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v8 + 48))(v8);
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v9);
  if (!v7) {
    os_unfair_recursive_lock_unlock();
  }
}

void sub_1BAE48D74(_Unwind_Exception *exception_object)
{
  if (!v1) {
    os_unfair_recursive_lock_unlock();
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOContext_Legacy_Impl::ExecuteWorkWithIOThreadUnlocker(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 312;
  int v5 = HALB_Mutex::Unlock((HALB_Mutex *)(a1 + 328));
  uint64_t v3 = *(void *)(a2 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 48))(v3);
  HALB_IOThread::Unlocker::~Unlocker((HALB_IOThread::Unlocker *)&v4);
}

void sub_1BAE48E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void HALS_IOContext_Legacy_Impl::ExecuteWorkWithIOThreadLocker(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 312;
  int v5 = HALB_Mutex::Lock((HALB_Mutex *)(a1 + 328));
  uint64_t v3 = *(void *)(a2 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 48))(v3);
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v4);
}

void sub_1BAE48EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t HALS_IOContext_Legacy_Impl::SetIOIsRunning(uint64_t this)
{
  *(unsigned char *)(this + 1300) = 1;
  return this;
}

uint64_t HALS_IOContext_Legacy_Impl::GetIORunningState(HALS_IOContext_Legacy_Impl *this)
{
  return *((unsigned int *)this + 346);
}

void *HALS_IOContext_Legacy_Impl::SetIORunningStateObserver(uint64_t a1, void *a2)
{
  void v10[3] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      uint64_t v9 = v8;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v8);
    }
    else
    {
      uint64_t v9 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v4 = a1 + 1392;
  if ((void *)(a1 + 1392) != v8)
  {
    int v5 = v9;
    uint64_t v6 = *(void *)(a1 + 1416);
    if (v9 == v8)
    {
      if (v6 == v4)
      {
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, v10);
        (*(void (**)(void *))(*v9 + 32))(v9);
        uint64_t v9 = 0;
        (*(void (**)(void, void *))(**(void **)(a1 + 1416) + 24))(*(void *)(a1 + 1416), v8);
        (*(void (**)(void))(**(void **)(a1 + 1416) + 32))(*(void *)(a1 + 1416));
        *(void *)(a1 + 1416) = 0;
        uint64_t v9 = v8;
        (*(void (**)(void *, uint64_t))(v10[0] + 24))(v10, a1 + 1392);
        (*(void (**)(void *))(v10[0] + 32))(v10);
      }
      else
      {
        (*(void (**)(void *, uint64_t))(v8[0] + 24))(v8, a1 + 1392);
        (*(void (**)(void *))(*v9 + 32))(v9);
        uint64_t v9 = *(void **)(a1 + 1416);
      }
      *(void *)(a1 + 1416) = v4;
    }
    else if (v6 == v4)
    {
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 24))(a1 + 1392, v8);
      (*(void (**)(void))(**(void **)(a1 + 1416) + 32))(*(void *)(a1 + 1416));
      *(void *)(a1 + 1416) = v9;
      uint64_t v9 = v8;
    }
    else
    {
      uint64_t v9 = *(void **)(a1 + 1416);
      *(void *)(a1 + 1416) = v5;
    }
  }
  return std::__function::__value_func<void ()(IORunningState)>::~__value_func[abi:ne180100](v8);
}

void sub_1BAE491CC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(IORunningState)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t HALS_IOContext_Legacy_Impl::GetIOBufferForStreamAtIndex(HALS_IOContext_Legacy_Impl *this, int a2, unsigned int a3)
{
  return HALS_IOContextDescription::GetIOBufferForStreamAtIndex((HALS_IOContext_Legacy_Impl *)((char *)this + 1496), a2, a3);
}

uint64_t HALS_IOContext_Legacy_Impl::GetIOBufferFrameSize(HALS_IOContext_Legacy_Impl *this)
{
  return *((unsigned int *)this + 330);
}

uint64_t HALS_IOContext_Legacy_Impl::GetServerIOStatusTimestamps(HALS_IOContext_Legacy_Impl *this)
{
  return (uint64_t)this + 1104;
}

BOOL HALS_IOContext_Legacy_Impl::AreClientBuffersEmpty(HALS_IOContext_Legacy_Impl *this)
{
  unsigned int v1 = 0;
  unint64_t v2 = *((unsigned int *)this + 330);
  uint64_t v3 = *((void *)this + 197);
  unint64_t v4 = (*((void *)this + 198) - v3) >> 5;
  while (1)
  {
    unint64_t v5 = v1;
    if (v4 <= v1) {
      break;
    }
    uint64_t v6 = *(uint64_t **)(v3 + 32 * v1 + 8);
    if (*(uint64_t **)(v3 + 32 * v5 + 16) != v6)
    {
      uint64_t v7 = *v6;
      if (-1944890851 * ((unint64_t)(*(void *)(*(void *)(v3 + 32 * v5 + 8) + 8) - v7) >> 3)
        && v7 != 0)
      {
        if (!*(_DWORD *)(v7 + 108)
          || ((uint64_t v9 = *(uint64_t **)(v7 + 112), *(uint64_t **)(v7 + 120) != v9) ? (v10 = v9 == 0) : (v10 = 1), v10))
        {
          uint64_t v9 = (uint64_t *)(v7 + 408);
        }
        uint64_t v11 = *v9;
        uint64_t v12 = *(void *)(v11 + 8) ? *(unsigned int *)(v11 + 308) : 0;
        uint64_t v13 = *(void *)(v7 + 56);
        if (v13 && v2 != 0)
        {
          unint64_t v15 = 0;
          uint64_t v16 = v13 + v12;
          do
            float v17 = *(float *)(v16 + 4 * v15++);
          while (v17 == 0.0 && v15 < v2);
          if (v17 != 0.0) {
            break;
          }
        }
      }
    }
    unsigned int v1 = v5 + 1;
  }
  return v4 <= v5;
}

uint64_t HALS_IOContext_Legacy_Impl::ClearInactiveInputBuffers(HALS_IOContext_Legacy_Impl *this)
{
  return HALS_IOContextDescription::ClearInactiveInputSharedBuffers((uint64_t)this + 1496, *((_DWORD *)this + 330));
}

uint64_t HALS_IOContext_Legacy_Impl::ClearInputBuffers(HALS_IOContext_Legacy_Impl *this)
{
  int v2 = *((_DWORD *)this + 330);
  v3[0] = caulk::function_ref<int ()(unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_0>;
  v3[1] = &v2;
  *(void *)&long long v4 = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOContextDescription::ApplyToInput(caulk::function_ref<int ()(unsigned int,HALS_IOStreamInfo&)>)::$_0>;
  *((void *)&v4 + 1) = v3;
  return VisitableVector<HALS_IOStreamInfo>::apply<>(*((void *)this + 194), *((void *)this + 195), &v4);
}

uint64_t HALS_IOContext_Legacy_Impl::ClearOutputBuffers(HALS_IOContext_Legacy_Impl *this)
{
  int v2 = *((_DWORD *)this + 330);
  *(void *)&long long v3 = caulk::function_ref<int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::functor_invoker<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_1>;
  *((void *)&v3 + 1) = &v2;
  return VisitableVector<HALS_IOStackDescription>::apply<>(*((void *)this + 197), *((void *)this + 198), &v3);
}

void HALS_IOContext_Legacy_Impl::RefreshComposition(HALS_IOContext_Legacy_Impl *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x3002000000;
  uint64_t v8 = __Block_byref_object_copy__18;
  uint64_t v9 = __Block_byref_object_dispose__19;
  CFTypeRef cf = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZN26HALS_IOContext_Legacy_Impl18RefreshCompositionEv_block_invoke;
  void v4[3] = &unk_1E6234FA0;
  void v4[4] = &v5;
  void v4[5] = this;
  int v2 = (HALB_Mutex *)(*(uint64_t (**)(void))(**((void **)this + 3) + 56))(*((void *)this + 3));
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v4);
  CFDictionaryRef v3 = (const __CFDictionary *)v6[5];
  if (v3) {
    HALS_IOContext_Legacy_Impl::SetComposition(this, v3);
  }
  _Block_object_dispose(&v5, 8);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BAE495E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
  unsigned int v1 = *(const void **)(a1 + 40);
  if (v1) {
    CFRelease(v1);
  }
}

void ___ZN26HALS_IOContext_Legacy_Impl18RefreshCompositionEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  CFDictionaryRef v3 = *(const void **)(v2 + 1504);
  if (v3)
  {
    CFRetain(v3);
    long long v4 = *(const void **)(v2 + 1504);
  }
  else
  {
    long long v4 = 0;
  }
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v7, v4);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v6 = *(const void **)(v5 + 40);
  *(void *)(v5 + 40) = v7;
  uint64_t v7 = v6;
  if (v6) {
    CFRelease(v6);
  }
}

void HALS_IOContext_Legacy_Impl::AssessIOBufferSize(HALS_IOContext_Legacy_Impl *this)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x4802000000;
  uint64_t v9 = __Block_byref_object_copy__15_12319;
  BOOL v10 = __Block_byref_object_dispose__16_12320;
  *(_OWORD *)long long __p = 0u;
  long long v12 = 0u;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZN26HALS_IOContext_Legacy_Impl18AssessIOBufferSizeEv_block_invoke;
  v5[3] = &unk_1E6234F78;
  v5[4] = &v6;
  v5[5] = this;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(void))(**((void **)this + 3) + 56))(*((void *)this + 3));
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  CFDictionaryRef v3 = (const AudioObjectPropertyAddress *)v7[5];
  unsigned int v4 = -1431655765 * ((v7[6] - (uint64_t)v3) >> 2);
  if (v4) {
    HALS_Object::PropertiesChanged(*((HALS_Object **)this + 3), (HALS_NotificationManager *)*((unsigned int *)v7 + 16), **(unsigned int **)(*((void *)this + 3) + 64), v4, v3);
  }
  _Block_object_dispose(&v6, 8);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1BAE497F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ___ZN26HALS_IOContext_Legacy_Impl18AssessIOBufferSizeEv_block_invoke(uint64_t a1)
{
}

void sub_1BAE49844(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_IOContext_Legacy_Impl::ResumeAllIO(HALS_IOContext_Legacy_Impl *this)
{
  uint64_t v2 = (char *)this + 312;
  int v3 = HALB_Mutex::Lock((HALS_IOContext_Legacy_Impl *)((char *)this + 328));
  while (*((_DWORD *)this + 324))
    --*((_DWORD *)this + 324);
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v2);
}

BOOL HALS_IOContext_Legacy_Impl::HasThreadError(HALS_IOContext_Legacy_Impl *this)
{
  return *((_DWORD *)this + 264) != 0;
}

BOOL HALS_IOContext_Legacy_Impl::IsIOThreadRunning(HALS_IOContext_Legacy_Impl *this)
{
  return *((_DWORD *)this + 118) != 1735552612 && *((_DWORD *)this + 118) != 1718185577;
}

BOOL HALS_IOContext_Legacy_Impl::IsIORunningNotInCatchupMode(HALS_IOContext_Legacy_Impl *this)
{
  if (*((unsigned char *)this + 1300)) {
    BOOL v1 = (*((_DWORD *)this + 346) - 5) >= 0xFFFFFFFD;
  }
  else {
    BOOL v1 = 1;
  }
  return !v1;
}

uint64_t HALS_IOContext_Legacy_Impl::IsIORunning(HALS_IOContext_Legacy_Impl *this)
{
  return *((unsigned __int8 *)this + 1300);
}

void HALS_IOContext_Legacy_Impl::DeviceDied(HALS_IOContext_Legacy_Impl *this, const __CFString *a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  char v11 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZN26HALS_IOContext_Legacy_Impl10DeviceDiedEPK10__CFString_block_invoke;
  void v7[3] = &unk_1E62351A8;
  v7[4] = &v8;
  void v7[5] = this;
  void v7[6] = a2;
  unsigned int v4 = (HALB_Mutex *)(*(uint64_t (**)(void))(**((void **)this + 3) + 56))(*((void *)this + 3));
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  if (*((unsigned char *)v9 + 24))
  {
    HALS_IOContext_Legacy_Impl::PauseIO(this);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 0x40000000;
    uint64_t v6[2] = ___ZN26HALS_IOContext_Legacy_Impl10DeviceDiedEPK10__CFString_block_invoke_2;
    void v6[3] = &__block_descriptor_tmp_50_12381;
    v6[4] = this;
    unsigned char v6[5] = a2;
    uint64_t v5 = (HALB_Mutex *)(*(uint64_t (**)(void))(**((void **)this + 3) + 56))(*((void *)this + 3));
    HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v6);
    (*(void (**)(void))(**(void **)(*((void *)this + 3) + 96) + 216))(*(void *)(*((void *)this + 3) + 96));
    HALS_IOContext_Legacy_Impl::ResumeIO(this);
  }
  _Block_object_dispose(&v8, 8);
}

void sub_1BAE49AC4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN26HALS_IOContext_Legacy_Impl10DeviceDiedEPK10__CFString_block_invoke(uint64_t a1)
{
  uint64_t result = HALS_IOContextDescription::GetEngineInfoForDeviceUID((HALS_IOContextDescription *)(*(void *)(a1 + 40) + 1496), *(CFStringRef *)(a1 + 48));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result != 0;
  return result;
}

void ___ZN26HALS_IOContext_Legacy_Impl10DeviceDiedEPK10__CFString_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v4 = v2 + 312;
  int v5 = HALB_Mutex::Lock((HALB_Mutex *)(v2 + 328));
  int v3 = (HALS_IOContextDescription *)(v2 + 1496);
  if (HALS_IOContextDescription::GetEngineInfoForDeviceUID(v3, *(CFStringRef *)(a1 + 40))) {
    HALS_IOContextDescription::DeviceDied(v3, *(const __CFString **)(a1 + 40));
  }
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v4);
}

void sub_1BAE49B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void HALS_IOContext_Legacy_Impl::DeviceArrived(HALS_IOContext_Legacy_Impl *this, HALS_Device *a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  char v11 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZN26HALS_IOContext_Legacy_Impl13DeviceArrivedEP11HALS_Device_block_invoke;
  void v7[3] = &unk_1E6235160;
  void v7[5] = this;
  void v7[6] = a2;
  v7[4] = &v8;
  uint64_t v4 = (HALB_Mutex *)(*(uint64_t (**)(void))(**((void **)this + 3) + 56))(*((void *)this + 3));
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  if (*((unsigned char *)v9 + 24))
  {
    HALS_IOContext_Legacy_Impl::PauseIO(this);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 0x40000000;
    uint64_t v6[2] = ___ZN26HALS_IOContext_Legacy_Impl13DeviceArrivedEP11HALS_Device_block_invoke_2;
    void v6[3] = &__block_descriptor_tmp_48_12383;
    v6[4] = this;
    unsigned char v6[5] = a2;
    int v5 = (HALB_Mutex *)(*(uint64_t (**)(void))(**((void **)this + 3) + 56))(*((void *)this + 3));
    HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v6);
    (*(void (**)(void))(**(void **)(*((void *)this + 3) + 96) + 216))(*(void *)(*((void *)this + 3) + 96));
    HALS_IOContext_Legacy_Impl::ResumeIO(this);
  }
  _Block_object_dispose(&v8, 8);
}

void sub_1BAE49D34(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void ___ZN26HALS_IOContext_Legacy_Impl13DeviceArrivedEP11HALS_Device_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  CFStringRef v3 = (CFStringRef)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 208))(*(void *)(a1 + 48));
  char v4 = 1;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALS_IOContextDescription::GetEngineInfoForDeviceUID((HALS_IOContextDescription *)(v2 + 1496), v3) != 0;
  CACFString::~CACFString((CACFString *)&v3);
}

void sub_1BAE49DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ___ZN26HALS_IOContext_Legacy_Impl13DeviceArrivedEP11HALS_Device_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CFStringRef theString1 = (CFStringRef)(*(uint64_t (**)(void))(**(void **)(a1 + 40) + 208))(*(void *)(a1 + 40));
  char v14 = 1;
  uint64_t v11 = v2 + 312;
  int v12 = HALB_Mutex::Lock((HALB_Mutex *)(v2 + 328));
  if (HALS_IOContextDescription::GetEngineInfoForDeviceUID((HALS_IOContextDescription *)(v2 + 1496), theString1))
  {
    CFStringRef v3 = *(HALS_IODevice **)(a1 + 40);
    CFStringRef v15 = (CFStringRef)(*(uint64_t (**)(HALS_IODevice *))(*(void *)v3 + 208))(v3);
    char v16 = 1;
    uint64_t EngineInfoForDeviceUID = HALS_IOContextDescription::GetEngineInfoForDeviceUID((HALS_IOContextDescription *)(v2 + 1496), v15);
    if (EngineInfoForDeviceUID)
    {
      uint64_t v5 = HALS_IODevice::CopyIOEngine(v3);
      uint64_t v6 = (HALS_ObjectMap *)v5;
      if (v5)
      {
        uint64_t v7 = *(HALS_ObjectMap **)(EngineInfoForDeviceUID + 8);
        *(void *)(EngineInfoForDeviceUID + 8) = v5;
        *(unsigned char *)(EngineInfoForDeviceUID + 860) = 0;
        *(unsigned char *)(EngineInfoForDeviceUID + 749) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 856))(v5);
        HALS_ObjectMap::RetainObject(*(HALS_ObjectMap **)(EngineInfoForDeviceUID + 8), v8);
        HALS_ObjectMap::ReleaseObject(v7, v9);
        HALS_ObjectMap::ReleaseObject(v6, v10);
        operator new();
      }
    }
    CACFString::~CACFString((CACFString *)&v15);
  }
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v11);
  CACFString::~CACFString((CACFString *)&theString1);
}

void sub_1BAE4A02C(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  HALS_ObjectMap::ReleaseObject(v21, a2);
  CACFString::~CACFString((CACFString *)&a14);
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&a10);
  CACFString::~CACFString((CACFString *)&a12);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Legacy_Impl::ClockDeviceDied(HALS_IOContext_Legacy_Impl *this, const __CFString *a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  char v11 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = ___ZN26HALS_IOContext_Legacy_Impl15ClockDeviceDiedEPK10__CFString_block_invoke;
  void v7[3] = &unk_1E6235118;
  v7[4] = &v8;
  void v7[5] = this;
  void v7[6] = a2;
  char v4 = (HALB_Mutex *)(*(uint64_t (**)(void))(**((void **)this + 3) + 56))(*((void *)this + 3));
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  if (*((unsigned char *)v9 + 24))
  {
    HALS_IOContext_Legacy_Impl::PauseIO(this);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 0x40000000;
    uint64_t v6[2] = ___ZN26HALS_IOContext_Legacy_Impl15ClockDeviceDiedEPK10__CFString_block_invoke_2;
    void v6[3] = &__block_descriptor_tmp_46_12385;
    v6[4] = this;
    unsigned char v6[5] = a2;
    uint64_t v5 = (HALB_Mutex *)(*(uint64_t (**)(void))(**((void **)this + 3) + 56))(*((void *)this + 3));
    HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v6);
    HALS_IOContext_Legacy_Impl::ResumeIO(this);
  }
  _Block_object_dispose(&v8, 8);
}

void sub_1BAE4A230(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN26HALS_IOContext_Legacy_Impl15ClockDeviceDiedEPK10__CFString_block_invoke(uint64_t a1)
{
  uint64_t result = HALS_IOContextDescription::HasClockDevice(*(HALS_IOContextDescription **)(*(void *)(a1 + 40) + 1504), *(const __CFString **)(a1 + 48));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void ___ZN26HALS_IOContext_Legacy_Impl15ClockDeviceDiedEPK10__CFString_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = v2 + 312;
  int v4 = HALB_Mutex::Lock((HALB_Mutex *)(v2 + 328));
  HALS_IOContextDescription::DeviceDied((HALS_IOContextDescription *)(v2 + 1496), *(const __CFString **)(a1 + 40));
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v3);
}

void sub_1BAE4A2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void HALS_IOContext_Legacy_Impl::ClockDeviceArrived(HALS_IOContext_Legacy_Impl *this, const __CFString *a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  char v10 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  uint64_t v6[2] = ___ZN26HALS_IOContext_Legacy_Impl18ClockDeviceArrivedEPK10__CFString_block_invoke;
  void v6[3] = &unk_1E62350D0;
  v6[4] = &v7;
  unsigned char v6[5] = this;
  void v6[6] = a2;
  uint64_t v3 = (HALB_Mutex *)(*(uint64_t (**)(void))(**((void **)this + 3) + 56))(*((void *)this + 3));
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  if (*((unsigned char *)v8 + 24))
  {
    HALS_IOContext_Legacy_Impl::PauseIO(this);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 0x40000000;
    v5[2] = ___ZN26HALS_IOContext_Legacy_Impl18ClockDeviceArrivedEPK10__CFString_block_invoke_2;
    v5[3] = &__block_descriptor_tmp_44_12387;
    v5[4] = this;
    int v4 = (HALB_Mutex *)(*(uint64_t (**)(void))(**((void **)this + 3) + 56))(*((void *)this + 3));
    HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v5);
    HALS_IOContext_Legacy_Impl::ResumeIO(this);
  }
  _Block_object_dispose(&v7, 8);
}

void sub_1BAE4A454(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN26HALS_IOContext_Legacy_Impl18ClockDeviceArrivedEPK10__CFString_block_invoke(uint64_t a1)
{
  uint64_t result = HALS_IOContextDescription::HasClockDevice(*(HALS_IOContextDescription **)(*(void *)(a1 + 40) + 1504), *(const __CFString **)(a1 + 48));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void ___ZN26HALS_IOContext_Legacy_Impl18ClockDeviceArrivedEPK10__CFString_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = v1 + 312;
  int v3 = HALB_Mutex::Lock((HALB_Mutex *)(v1 + 328));
  HALS_IOContextDescription::PickMasterEngine((HALS_IOContextDescription *)(v1 + 1496));
  HALB_IOThread::Locker::~Locker((HALB_IOThread::Locker *)&v2);
}

void sub_1BAE4A4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void HALS_IOContext_Legacy_Impl::SetProcessInputMuteState(HALS_IOContext_Legacy_Impl *this, char a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  void v3[2] = ___ZN26HALS_IOContext_Legacy_Impl24SetProcessInputMuteStateEb_block_invoke;
  v3[3] = &__block_descriptor_tmp_42_12388;
  v3[4] = this;
  char v4 = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(void))(**((void **)this + 3) + 56))(*((void *)this + 3));
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

uint64_t ___ZN26HALS_IOContext_Legacy_Impl24SetProcessInputMuteStateEb_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 32) = *(unsigned char *)(result + 40);
  return result;
}

uint64_t HALS_IOContext_Legacy_Impl::GetSimpleStreamUsage(int8x8_t **this)
{
  int v2 = std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(this[203], 0, (uint64_t)&this[203][(unint64_t)this[204] >> 6], this[204] & 0x3F, 1);
  int v3 = std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(this[200], 0, (uint64_t)&this[200][(unint64_t)this[201] >> 6], this[201] & 0x3F, 1);
  int v4 = *((_DWORD *)this + 429);
  BOOL v5 = v2 == v4;
  if (!((v2 - v4) | v3))
  {
    BOOL v8 = v4 == 0;
    unsigned int v9 = 3;
    goto LABEL_9;
  }
  if (v3) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v2 == v4;
  }
  if (!v6 && !v4) {
    return 2;
  }
  if (!v3) {
    BOOL v5 = 0;
  }
  if (v5 && !v4) {
    return 1;
  }
  if (!v6 && v4 != 0) {
    return 4;
  }
  if (v2 == v4 || !v3)
  {
    BOOL v8 = !v5 || v4 == 0;
    unsigned int v9 = 5;
LABEL_9:
    if (v8) {
      return 0;
    }
    else {
      return v9;
    }
  }
  if (v5) {
    unsigned int v10 = 5;
  }
  else {
    unsigned int v10 = 7;
  }
  if (v4) {
    return v10;
  }
  else {
    return 6;
  }
}

double HALS_IOContext_Legacy_Impl::GetStreamInfoAtIndex(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  return HALS_IOContextDescription::GetStreamInfoAtIndex((void *)(a1 + 1496), a2, a3, a4);
}

uint64_t HALS_IOContext_Legacy_Impl::GetStreamLatencyAtIndex(HALS_IOContext_Legacy_Impl *this, int a2, unsigned int a3)
{
  if (a2
    && (uint64_t v3 = *((void *)this + 194), 0x21CFB2B78C13521DLL * ((*((void *)this + 195) - v3) >> 3) > (unint64_t)a3)
    && *(_DWORD *)(v3 + 424 * a3 + 108) == 1
    && (uint64_t v4 = v3 + 424 * a3, *(unsigned char *)(v4 + 164)))
  {
    return *(unsigned int *)(v4 + 160);
  }
  else
  {
    return 0;
  }
}

uint64_t HALS_IOContext_Legacy_Impl::IsStreamEnabledAtIndex(HALS_IOContext_Legacy_Impl *this, int a2, unsigned int a3)
{
  return HALS_IOContextDescription::IsStreamEnabledAtIndex((HALS_IOContext_Legacy_Impl *)((char *)this + 1496), a2, a3);
}

uint64_t HALS_IOContext_Legacy_Impl::GetNumberActiveStreams(HALS_IOContext_Legacy_Impl *this, int a2)
{
  return HALS_IOContextDescription::GetNumberActiveStreams((HALS_IOContext_Legacy_Impl *)((char *)this + 1496), a2);
}

uint64_t HALS_IOContext_Legacy_Impl::GetNumberInputStreamsOfType(uint64_t a1, int a2)
{
  if (a2 == 1) {
    return *(unsigned int *)(a1 + 1716);
  }
  if (a2) {
    return 0;
  }
  return HALS_IOContextDescription::GetNumberStreams((HALS_IOContextDescription *)(a1 + 1496), 1)
       - *(_DWORD *)(a1 + 1716);
}

uint64_t HALS_IOContext_Legacy_Impl::GetNumberStreams(HALS_IOContext_Legacy_Impl *this, int a2)
{
  return HALS_IOContextDescription::GetNumberStreams((HALS_IOContext_Legacy_Impl *)((char *)this + 1496), a2);
}

void HALS_IOContext_Legacy_Impl::Deactivate(HALS_IOContext_Legacy_Impl *this)
{
  int v2 = (unint64_t *)((char *)this + 1472);
  if (*((void *)this + 185) || *v2)
  {
    HALS_IOPrewarmManager::GetState((HALS_IOPrewarmManager *)&__p, v2);
    HALS_IOContext_Legacy_Impl::ResetEngineState_Off(this, (int **)&__p);
    if (__p) {
      operator delete(__p);
    }
  }
  long long __p = (char *)this + 328;
  LODWORD(p_p) = HALB_Mutex::Lock((HALS_IOContext_Legacy_Impl *)((char *)this + 328));
  HALB_IOThread::_WaitForState((HALS_IOContext_Legacy_Impl *)((char *)this + 312), 1735552612);
  *((unsigned char *)this + 485) = 1;
  HALB_Guard::Locker::~Locker((HALB_Mutex **)&__p);
  long long __p = 0;
  p_p = &__p;
  uint64_t v14 = 0x9802000000;
  CFStringRef v15 = __Block_byref_object_copy__12321;
  char v16 = __Block_byref_object_dispose__12322;
  uint64_t v3 = *((void *)this + 3);
  int v4 = **(_DWORD **)(v3 + 64);
  int v5 = *(_DWORD *)(v3 + 16);
  v20[0] = 0;
  v20[1] = 0;
  __int16 v18 = 0;
  memset(v17, 0, sizeof(v17));
  uint64_t v19 = v20;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  int v24 = v4;
  int v25 = v5;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  void v11[2] = ___ZN26HALS_IOContext_Legacy_Impl10DeactivateEv_block_invoke;
  void v11[3] = &unk_1E6234F28;
  uint8_t v11[4] = &__p;
  v11[5] = this;
  BOOL v6 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 56))(v3);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v11);
  HALS_MutationChangeSynchronizer::Wait((atomic_uint **)p_p[5], (HALS_MutationChangeSynchronizer *)p_p[6]);
  HALS_IOContextDescription::SetToEmpty((HALS_IOContext_Legacy_Impl *)((char *)this + 1496));
  uint64_t v7 = *((void *)this + 168);
  unsigned int v10 = this;
  unsigned __int8 v8 = atomic_load((unsigned __int8 *)(v7 + 32));
  if (v8) {
    atomic_store(1u, (unsigned __int8 *)(v7 + 33));
  }
  unsigned int v9 = *(NSObject **)v7;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN10applesauce8dispatch2v19sync_implIRZN26HALS_IOContext_Legacy_Impl10DeactivateEvE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke;
  block[3] = &__block_descriptor_tmp_142_12390;
  void block[4] = &v10;
  dispatch_sync(v9, block);
  *((_DWORD *)this + 372) = 0;
  _Block_object_dispose(&__p, 8);
  HALS_MutationChangeSynchronizer::~HALS_MutationChangeSynchronizer((HALS_MutationChangeSynchronizer *)v17);
}

void sub_1BAE4A9CC(void *a1)
{
}

void sub_1BAE4A9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN26HALS_IOContext_Legacy_Impl10DeactivateEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, HALS_MutationChangeSynchronizer *a7)
{
  uint64_t v7 = *(void *)(a1 + 40);
  HALS_IOContextHostedDSP::Remove(*(HALS_IOContextHostedDSP **)(v7 + 2080), (HALS_IOContextDescription *)(v7 + 1496), *(_DWORD *)(v7 + 1320), **(_DWORD **)(*(void *)(v7 + 24) + 64), *(_DWORD *)(*(void *)(v7 + 24) + 16), (HALS_MutationChangeSynchronizer *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a7);
}

void ___ZN10applesauce8dispatch2v19sync_implIRZN26HALS_IOContext_Legacy_Impl10DeactivateEvE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 32);
  int v2 = *(std::__shared_weak_count **)(v1 + 1368);
  *(_OWORD *)(v1 + 1360) = 0u;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

double HALS_IOContext_Legacy_Impl::Initialize(HALS_IOContext_Legacy_Impl *this, int a2)
{
  *((_DWORD *)this + 330) = a2;
  *(void *)&double result = 0x200000001;
  *((void *)this + 246) = 0x200000001;
  return result;
}

void HALS_IOContext_Legacy_Impl::~HALS_IOContext_Legacy_Impl(HALS_IOContext_Legacy_Impl *this)
{
  HALS_IOContext_Legacy_Impl::~HALS_IOContext_Legacy_Impl(this);

  JUMPOUT(0x1C1859840);
}

{
  std::thread *v2;
  int AudioCaptureMode;
  void *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;

  int v2 = (std::thread *)((char *)this + 2016);
  if (*((void *)this + 252)) {
    std::thread::join((std::thread *)this + 252);
  }
  int AudioCaptureMode = HALS_IOContext::GetAudioCaptureMode(*((HALS_IOContext **)this + 3));
  HALS_IOContext_Legacy_Impl::EnableCaptureFiles((uint64_t)this, AudioCaptureMode);
  std::unique_ptr<HALS_IOContextHostedDSP>::reset[abi:ne180100]((uint64_t *)this + 260);
  if (*((char *)this + 2079) < 0) {
    operator delete(*((void **)this + 257));
  }
  std::thread::~thread(v2);
  std::__hash_table<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::__unordered_map_hasher<HALS_MultiTap *,std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::hash<HALS_MultiTap *>,std::equal_to<HALS_MultiTap *>,true>,std::__unordered_map_equal<HALS_MultiTap *,std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::equal_to<HALS_MultiTap *>,std::hash<HALS_MultiTap *>,true>,std::allocator<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>>>::~__hash_table((uint64_t)this + 1976);
  HALS_IOContextDescription::~HALS_IOContextDescription((HALS_IOContext_Legacy_Impl *)((char *)this + 1496));
  int v4 = (void *)*((void *)this + 179);
  if (v4)
  {
    *((void *)this + 180) = v4;
    operator delete(v4);
  }
  std::__function::__value_func<void ()(IORunningState)>::~__value_func[abi:ne180100]((void *)this + 174);
  int v5 = (std::__shared_weak_count *)*((void *)this + 171);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  BOOL v6 = (std::__shared_weak_count *)*((void *)this + 169);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::__function::__value_func<void ()(HALS_IOContext_Legacy_Impl *)>::~__value_func[abi:ne180100]((void *)this + 133);
  HALS_IOThread::~HALS_IOThread((HALS_IOContext_Legacy_Impl *)((char *)this + 312));
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t *std::unique_ptr<HALS_IOContextHostedDSP>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *double result = 0;
  if (v1)
  {
    int v2 = *(std::__shared_weak_count **)(v1 + 32);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    uint64_t v3 = (void **)v1;
    std::vector<HALS_IOContextHostedDSP::HostedDSPList::ExtendedInstanceInfo>::__destroy_vector::operator()[abi:ne180100](&v3);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::__unordered_map_hasher<HALS_MultiTap *,std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::hash<HALS_MultiTap *>,std::equal_to<HALS_MultiTap *>,true>,std::__unordered_map_equal<HALS_MultiTap *,std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::equal_to<HALS_MultiTap *>,std::hash<HALS_MultiTap *>,true>,std::allocator<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>>>::~__hash_table(uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<HALS_MultiTap * const,HALS_IOContext_Legacy_Impl::ActiveTap>,0>(v2 + 2);
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
  int v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::vector<HALS_IOContextHostedDSP::HostedDSPList::ExtendedInstanceInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (uint64_t *)**a1;
  if (v2)
  {
    int v4 = (uint64_t *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        BOOL v6 = v4 - 3;
        std::unique_ptr<HALS_IOContextHostedDSP::DSPStreamInstance>::reset[abi:ne180100](v4 - 1, 0);
        int v4 = v6;
      }
      while (v6 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::unique_ptr<HALS_IOContextHostedDSP::DSPStreamInstance>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *double result = a2;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 2000);
    *(_OWORD *)(v2 + 1992) = 0u;
    if (v3)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      int v4 = *(std::__shared_weak_count **)(v2 + 2000);
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
    }
    *(void *)(v2 + 1312) = &unk_1F14867D0;
    unsigned int v10 = (void **)(v2 + 1968);
    std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v10);
    DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)(v2 + 1384));
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)(v2 + 1360));
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)(v2 + 1336));
    *(void *)(v2 + 1312) = &unk_1F1486820;
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](v2 + 1320);
    int v5 = *(void **)(v2 + 1280);
    if (v5)
    {
      *(void *)(v2 + 1288) = v5;
      operator delete(v5);
    }
    unsigned int v10 = (void **)(v2 + 1256);
    std::vector<MutationItinerary::Device>::__destroy_vector::operator()[abi:ne180100](&v10);
    std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(*(void **)(v2 + 1240));
    *(void *)(v2 + 544) = &unk_1F14867D0;
    unsigned int v10 = (void **)(v2 + 1200);
    std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v10);
    DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)(v2 + 616));
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)(v2 + 592));
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)(v2 + 568));
    *(void *)(v2 + 544) = &unk_1F1486820;
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](v2 + 552);
    std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)(v2 + 512));
    std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)(v2 + 480));
    std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)(v2 + 448));
    std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100]((void *)(v2 + 416));
    std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)(v2 + 384));
    BOOL v6 = *(std::__shared_weak_count **)(v2 + 376);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    uint64_t v7 = *(std::__shared_weak_count **)(v2 + 360);
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    unsigned __int8 v8 = *(std::__shared_weak_count **)(v2 + 344);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    std::unique_ptr<HALS_DSPCaptureFiles>::reset[abi:ne180100]((uint64_t *)(v2 + 328), 0);
    std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)(v2 + 280));
    std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)(v2 + 248));
    std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)(v2 + 216));
    std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100]((void *)(v2 + 184));
    std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)(v2 + 152));
    unsigned int v9 = *(std::__shared_weak_count **)(v2 + 144);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    *(void *)(v2 + 16) = &unk_1F147ED68;
    *(void *)(v2 + 88) = &unk_1F147F0A0;
    if (*(unsigned char *)(v2 + 128) && *(char *)(v2 + 127) < 0) {
      operator delete(*(void **)(v2 + 104));
    }
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)(v2 + 88));
    *(void *)(v2 + 40) = &unk_1F147F0A0;
    if (*(unsigned char *)(v2 + 80) && *(char *)(v2 + 79) < 0) {
      operator delete(*(void **)(v2 + 56));
    }
    DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)(v2 + 40));
    *(void *)(v2 + 16) = &unk_1F147F280;
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](v2 + 24);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

uint64_t ___ZN26HALS_IOContext_Legacy_Impl18SetVolumeForEngineEP13HALS_IOEnginebf_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  float v2 = *(float *)(result + 48);
  uint64_t v3 = *(uint64_t **)(v1 + 1528);
  int v4 = *(uint64_t **)(v1 + 1536);
  if (v3 != v4)
  {
    while (*(void *)(*v3 + 8) != *(void *)(result + 40))
    {
      if (++v3 == v4) {
        return result;
      }
    }
  }
  if (v3 != v4)
  {
    uint64_t v5 = *v3;
    if (v5)
    {
      if (*(void *)(v5 + 8))
      {
        uint64_t v6 = 0;
        uint64_t v7 = v5 + 24 * *(unsigned __int8 *)(result + 52);
        uint64_t v8 = *(void *)(v7 + 704);
        uint64_t v9 = *(void *)(v7 + 696);
        unint64_t v10 = v8 - v9;
        if (v2 < 0.0) {
          float v2 = 0.0;
        }
        if (v2 > 1.0) {
          float v2 = 1.0;
        }
        uint64_t v11 = (v10 >> 3);
        while (v11 != v6)
        {
          uint64_t v12 = *(void *)(*(void *)(v9 + 8 * v6) + 112);
          if (v12)
          {
            double v13 = round(*(double *)(v5 + 768) * 0.05);
            *(void *)(v12 + 32) = 0;
            if (v13 < 1.0) {
              double v13 = 1.0;
            }
            double v14 = floor(v13);
            *(double *)(v12 + 40) = v14;
            *(float *)&double v14 = (float)(v2 - *(float *)(v12 + 20)) / v14;
            *(float *)(v12 + 24) = v2;
            *(_DWORD *)(v12 + 28) = LODWORD(v14);
          }
          ++v6;
        }
      }
    }
  }
  return result;
}

uint64_t ___ZN26HALS_IOContext_Legacy_Impl19RampVolumeForEngineEP13HALS_IOEnginebfdd_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  float v2 = *(float *)(result + 64);
  uint64_t v3 = *(void *)(result + 48);
  double v4 = *(double *)(result + 56);
  uint64_t v5 = *(uint64_t **)(v1 + 1528);
  uint64_t v6 = *(uint64_t **)(v1 + 1536);
  if (v5 != v6)
  {
    while (*(void *)(*v5 + 8) != *(void *)(result + 40))
    {
      if (++v5 == v6) {
        return result;
      }
    }
  }
  if (v5 != v6)
  {
    uint64_t v7 = *v5;
    if (*v5)
    {
      uint64_t v8 = 0;
      uint64_t v9 = v7 + 24 * *(unsigned __int8 *)(result + 68);
      uint64_t v10 = *(void *)(v9 + 704);
      uint64_t v11 = *(void *)(v9 + 696);
      unint64_t v12 = v10 - v11;
      if (v4 < 1.0) {
        double v4 = 1.0;
      }
      double v13 = floor(v4);
      if (v2 < 0.0) {
        float v2 = 0.0;
      }
      if (v2 > 1.0) {
        float v2 = 1.0;
      }
      uint64_t v14 = (v12 >> 3);
      while (v14 != v8)
      {
        uint64_t v15 = *(void *)(*(void *)(v11 + 8 * v8) + 112);
        if (v15)
        {
          *(void *)(v15 + 32) = v3;
          *(double *)(v15 + 40) = v13;
          float v16 = (float)(v2 - *(float *)(v15 + 20)) / v13;
          *(float *)(v15 + 24) = v2;
          *(float *)(v15 + 28) = v16;
        }
        ++v8;
      }
    }
  }
  return result;
}

uint64_t HALS_IOContext_Legacy_Impl::IOWorkLoop_CalculateOverloadTime(uint64_t result, unsigned int a2, AudioTimeStamp *a3, double a4)
{
  memset(&v5.mHostTime, 0, 48);
  *(void *)&v5.mFlags = 1;
  uint64_t v4 = *(void *)(result + 1520);
  if (v4)
  {
    v5.double mSampleTime = *(double *)(v4 + 360)
                   + (double)*(uint64_t *)(result + 1312)
                   + (float)(*(float *)(result + 1328) * (float)a2)
                   + a4;
    if (*(void *)(v4 + 8)) {
      return HALS_IOClock::TranslateTime(*(void *)(v4 + 288), &v5, a3);
    }
  }
  return result;
}

void *HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(HALS_IOContext_Legacy_Impl *this, AudioTimeStamp *a2)
{
  uint64_t v9[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned int *)(*((void *)this + 3) + 16);
  v9[0] = &unk_1F147C200;
  v9[1] = a2;
  v9[2] = v2;
  void v9[3] = v9;
  uint64_t v4 = &unk_1F147D4B0;
  v6[0] = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
  v6[1] = v9;
  AudioTimeStamp v5 = &off_1F147D460;
  uint64_t v7 = v6;
  v8[0] = (uint64_t (*)(void, void *))caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
  v8[1] = (uint64_t (*)(void, void *))&v7;
  VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(*((void *)this + 191), *((void *)this + 192), v8, (uint64_t)&v5, (uint64_t)&v4);
  return std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v9);
}

void sub_1BAE4B330(_Unwind_Exception *a1)
{
  std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100]((void *)(v1 - 56));
  _Unwind_Resume(a1);
}

BOOL HALS_IOContext_Legacy_Impl::PerformIO(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t *a6)
{
  v112[4] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(unint64_t **)(a1 + 1520);
  *a6 = 0;
  BOOL v92 = 0;
  v112[0] = &unk_1F147ADA8;
  v112[1] = HALS_IOContext_Legacy_Impl::IsAnyEngineMixing_Helper;
  v112[2] = &v92;
  v112[3] = v112;
  *(void *)&v94.mSampleRate = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
  *(void *)&v94.mFormatID = v112;
  long long v95 = &off_1F147D460;
  char v99 = &v94;
  *(void *)&v88.double mSampleTime = caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
  v88.UInt64 mHostTime = (UInt64)&v99;
  VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine>(*(void *)(a1 + 1528), *(void *)(a1 + 1536), &v88, (uint64_t)&v95);
  std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v112);
  int v10 = std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(*(int8x8_t **)(a1 + 1624), 0, *(void *)(a1 + 1624) + 8 * (*(void *)(a1 + 1632) >> 6), *(void *)(a1 + 1632) & 0x3F, 1);
  unsigned int v11 = std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(*(int8x8_t **)(a1 + 1600), 0, *(void *)(a1 + 1600) + 8 * (*(void *)(a1 + 1608) >> 6), *(void *)(a1 + 1608) & 0x3F, 1);
  int v86 = (HALS_IOContextDescription *)(a1 + 1496);
  BOOL v12 = HALS_IOContextDescription::GetNumberStreams((HALS_IOContextDescription *)(a1 + 1496), 0) != 0;
  uint64_t v82 = v11;
  if (v11) {
    BOOL v13 = 0;
  }
  else {
    BOOL v13 = v12;
  }
  v108[0] = &unk_1F147BDC0;
  v108[1] = a1;
  int v109 = a4;
  int v110 = a3;
  uint64_t v111 = v108;
  *(void *)long long v90 = &off_1F147D4F0;
  *(void *)&v94.mSampleRate = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
  *(void *)&v94.mFormatID = v108;
  long long v95 = &off_1F147D460;
  char v99 = &v94;
  *(void *)&v88.double mSampleTime = caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
  v88.UInt64 mHostTime = (UInt64)&v99;
  int active = VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(*(void *)(a1 + 1528), *(void *)(a1 + 1536), &v88, (uint64_t)&v95, (uint64_t)v90);
  std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v108);
  if (active || !v9) {
    return active || v9 == 0;
  }
  int v15 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 24) + 64) + 40);
  AudioFormatID v85 = a3;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 24) + 64) + 40))
  {
    *(void *)(a1 + 1104) = bswap64(*(void *)a2);
    *(void *)(a1 + 1112) = bswap64(*(void *)(a2 + 8));
    *(void *)(a1 + 1120) = bswap64(*(void *)(a2 + 16));
    *(_DWORD *)(a1 + 1160) = bswap32(*(_DWORD *)(a2 + 56));
    float v16 = (long long *)(a1 + 1168);
    *(void *)(a1 + 1168) = bswap64(v9[64]);
    *(void *)(a1 + 1176) = bswap64(v9[65]);
    *(void *)(a1 + 1184) = bswap64(*(void *)(a2 + 16));
    *(_DWORD *)(a1 + 1224) = bswap32(*(_DWORD *)(a2 + 56));
    float v17 = (long long *)(a1 + 1232);
    *(void *)(a1 + 1232) = bswap64(v9[72]);
    unint64_t v18 = bswap64(v9[73]);
  }
  else
  {
    *(void *)(a1 + 1104) = *(void *)a2;
    *(void *)(a1 + 1112) = *(void *)(a2 + 8);
    *(void *)(a1 + 1120) = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 1160) = *(_DWORD *)(a2 + 56);
    float v16 = (long long *)(a1 + 1168);
    *(void *)(a1 + 1168) = v9[64];
    *(void *)(a1 + 1176) = v9[65];
    *(void *)(a1 + 1184) = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 1224) = *(_DWORD *)(a2 + 56);
    float v17 = (long long *)(a1 + 1232);
    *(void *)(a1 + 1232) = v9[72];
    unint64_t v18 = v9[73];
  }
  *(void *)(a1 + 1240) = v18;
  unint64_t v19 = bswap64(*(void *)(a2 + 16));
  unsigned int v20 = bswap32(*(_DWORD *)(a2 + 56));
  BOOL v21 = v15 == 0;
  if (v15) {
    unint64_t v22 = v19;
  }
  else {
    unint64_t v22 = *(void *)(a2 + 16);
  }
  if (v21) {
    unsigned int v23 = *(_DWORD *)(a2 + 56);
  }
  else {
    unsigned int v23 = v20;
  }
  *(void *)(a1 + 1248) = v22;
  *(_DWORD *)(a1 + 1288) = v23;
  int v24 = *(_OWORD **)(a1 + 1096);
  long long v25 = *(_OWORD *)(a1 + 1104);
  long long v26 = *(_OWORD *)(a1 + 1120);
  long long v27 = *(_OWORD *)(a1 + 1152);
  v24[8] = *(_OWORD *)(a1 + 1136);
  v24[9] = v27;
  v24[6] = v25;
  _DWORD v24[7] = v26;
  std::locale v28 = *(_OWORD **)(a1 + 1096);
  long long v29 = *v16;
  long long v30 = v16[1];
  long long v31 = v16[3];
  v28[12] = v16[2];
  v28[13] = v31;
  unsigned char v28[10] = v29;
  v28[11] = v30;
  int v32 = *(_OWORD **)(a1 + 1096);
  long long v33 = *v17;
  long long v34 = v17[1];
  long long v35 = v17[3];
  v32[16] = v17[2];
  v32[17] = v35;
  unsigned char v32[14] = v33;
  v32[15] = v34;
  OSMemoryBarrier();
  if (!v10 || !*(unsigned char *)(a1 + 1376) && !*(unsigned char *)(a1 + 1377)) {
    goto LABEL_33;
  }
  uint64_t v36 = (a3 << 32) | *(unsigned int *)(*(void *)(a1 + 24) + 16);
  v107[0] = &unk_1F147BE40;
  v107[1] = HALS_IOPerformer::begin_reading;
  v107[2] = v36;
  v107[3] = v107;
  *(void *)long long v90 = &off_1F147D4F0;
  *(void *)&v94.mSampleRate = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
  *(void *)&v94.mFormatID = v107;
  long long v95 = &off_1F147D460;
  char v99 = &v94;
  *(void *)&v88.double mSampleTime = caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
  v88.UInt64 mHostTime = (UInt64)&v99;
  int active = VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(*(void *)(a1 + 1528), *(void *)(a1 + 1536), &v88, (uint64_t)&v95, (uint64_t)v90);
  std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v107);
  if (active) {
    return active || v9 == 0;
  }
  long long v95 = (void (**)(FilterEngineInfoWithoutEngine *__hidden))a1;
  LODWORD(v96) = a3;
  *(void *)long long v90 = &unk_1F1480990;
  uint64_t v91 = a1 + 1496;
  *(void *)CFDictionaryRef v93 = &unk_1F147AD80;
  *(void *)&v88.double mSampleTime = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_0>;
  v88.UInt64 mHostTime = (UInt64)&v95;
  Float64 v37 = *(double *)(a1 + 1552);
  uint64_t v38 = *(void *)(a1 + 1560);
  if (*(void *)&v37 == v38)
  {
LABEL_28:
    uint64_t v41 = *(unsigned int *)(*(void *)(a1 + 24) + 16);
    v106[0] = &unk_1F147BED8;
    v106[1] = HALS_IOPerformer::end_reading;
    v106[2] = v41;
    v106[3] = v106;
    *(void *)CFDictionaryRef v93 = &off_1F147D4F0;
    *(void *)&v94.mSampleRate = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
    *(void *)&v94.mFormatID = v106;
    *(void *)long long v90 = &off_1F147D460;
    char v99 = &v94;
    *(void *)&v88.double mSampleTime = caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
    v88.UInt64 mHostTime = (UInt64)&v99;
    int active = VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(*(void *)(a1 + 1528), *(void *)(a1 + 1536), &v88, (uint64_t)v90, (uint64_t)v93);
    std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v106);
    if (active) {
      return active || v9 == 0;
    }
    *(void *)&v94.mSampleRate = a1;
    v94.mFormatID = v85;
    char v99 = (AudioStreamBasicDescription *)&unk_1F147AD80;
    *(void *)&v88.double mSampleTime = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_1>;
    v88.UInt64 mHostTime = (UInt64)&v94;
    if (VisitableVector<HALS_IOStreamInfo>::do_apply<std::vector<HALS_IOStreamInfo>,VisitableVector<HALS_IOStreamInfo>::ItemWithIndex,HALS_IOStreamGroup::FilterClocklessReferenceStreamOnlyEngines>(*(void *)(a1 + 1552), *(void *)(a1 + 1560), &v88, (uint64_t)&v99))
    {
      int active = 1;
      return active || v9 == 0;
    }
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 24) + 64) + 40)) {
      HALS_IOContextDescription::EndianSwapSharedBuffers(v86, 1, v85);
    }
LABEL_33:
    uint64_t v42 = mach_absolute_time();
    if (HALS_IOContext::CallClientIOProc(*(HALS_IOContext **)(a1 + 24), *(_DWORD *)(a1 + 1304), v85, *(unsigned __int8 *)(a1 + 1337), v92) == 1)*(unsigned char *)(a1 + 289) = 1; {
    uint64_t v43 = mach_absolute_time();
    }
    uint64_t v44 = __udivti3();
    if (v43 >= v42) {
      uint64_t v45 = v44;
    }
    else {
      uint64_t v45 = -v44;
    }
    *a6 = v45;
    if (v82)
    {
      if (a5) {
        goto LABEL_103;
      }
    }
    else
    {
      if (a5) {
        BOOL v46 = 0;
      }
      else {
        BOOL v46 = v13;
      }
      if (!v46) {
        goto LABEL_103;
      }
    }
    if ((HALB_IOThread::HasBeenStopped((HALB_IOThread *)(a1 + 312)) | v13))
    {
      LODWORD(v94.mSampleRate) = *(_DWORD *)(a1 + 1320);
      *(void *)&v88.double mSampleTime = caulk::function_ref<int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::functor_invoker<HALS_IOContextDescription::ClearSharedBuffers(BOOL,unsigned int)::$_1>;
      v88.UInt64 mHostTime = (UInt64)&v94;
      VisitableVector<HALS_IOStackDescription>::apply<>(*(void *)(a1 + 1576), *(void *)(a1 + 1584), (long long *)&v88);
    }
    else if (*(unsigned char *)(*(void *)(*(void *)(a1 + 24) + 64) + 40))
    {
      LODWORD(v94.mSampleRate) = v85;
      *(void *)&v88.double mSampleTime = caulk::function_ref<int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::functor_invoker<HALS_IOContextDescription::EndianSwapSharedBuffers(BOOL,unsigned int)::$_1>;
      v88.UInt64 mHostTime = (UInt64)&v94;
      VisitableVector<HALS_IOStackDescription>::apply<>(*(void *)(a1 + 1576), *(void *)(a1 + 1584), (long long *)&v88);
    }
    v89[0] = 0;
    v89[1] = 0;
    HALS_System::GetInstance(&v88, 0, v89);
    int v47 = *(unsigned __int8 *)(*(void *)&v88.mSampleTime + 1224);
    if (v88.mHostTime) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v88.mHostTime);
    }
    if (v47)
    {
      unsigned int v48 = *(_DWORD *)(a1 + 1968) - 1;
      int v49 = *(_DWORD *)(a1 + 1972);
      LODWORD(v99) = 0;
      long long v101 = 0;
      uint64_t v102 = 0;
      mach_port_t v100 = 0;
      v90[0] = 0;
      memset(&v88, 0, 40);
      int OutputStackDescriptionForChannel = HALS_IOContextDescription::GetOutputStackDescriptionForChannel(v86, v48, (HALS_IOStackDescription *)&v99, v90);
      if (OutputStackDescriptionForChannel) {
        HALS_IOStackDescription::GetFormat((HALS_IOStackDescription *)&v99, (AudioStreamBasicDescription *)&v88);
      }
      if (v101 == v100)
      {
        uint64_t v51 = 0;
      }
      else if (-1944890851 * ((*((void *)v100 + 1) - *(void *)v100) >> 3))
      {
        uint64_t v51 = *(void *)v100;
      }
      else
      {
        uint64_t v51 = 0;
      }
      LODWORD(v95) = 0;
      char v97 = 0;
      uint64_t v98 = 0;
      int v96 = 0;
      v93[0] = 0;
      memset(&v94, 0, sizeof(v94));
      int v52 = HALS_IOContextDescription::GetOutputStackDescriptionForChannel(v86, v49 - 1, (HALS_IOStackDescription *)&v95, v93);
      if (v52) {
        HALS_IOStackDescription::GetFormat((HALS_IOStackDescription *)&v95, &v94);
      }
      if (v97 == v96)
      {
        uint64_t v53 = 0;
      }
      else
      {
        uint64_t v53 = *v96;
        if (!(-1944890851 * ((unint64_t)(v96[1] - *v96) >> 3))) {
          uint64_t v53 = 0;
        }
      }
      if (LODWORD(v88.mHostTime) == 1819304813) {
        int v54 = OutputStackDescriptionForChannel;
      }
      else {
        int v54 = 0;
      }
      if (v54 == 1)
      {
        uint64_t v55 = *(void *)(v51 + 56);
        if (v55)
        {
          int v56 = v94.mFormatID == 1819304813 ? v52 : 0;
          if (v56 == 1)
          {
            uint64_t v57 = *(void *)(v53 + 56);
            if (v57)
            {
              if (!*(_DWORD *)(v51 + 108) || (uint64_t v58 = *(uint64_t **)(v51 + 112), *(uint64_t **)(v51 + 120) == v58) || !v58) {
                uint64_t v58 = (uint64_t *)(v51 + 408);
              }
              uint64_t v59 = *v58;
              if (!*(_DWORD *)(v53 + 108) || (uint64_t v60 = *(void *)(v53 + 112), *(void *)(v53 + 120) == v60) || !v60) {
                uint64_t v60 = v53 + 408;
              }
              uint64_t v61 = (float *)(v55 + *(unsigned int *)(v59 + 308));
              int v62 = (float *)(v57 + *(unsigned int *)(*(void *)v60 + 308));
              if (v61 == v62 && HIDWORD(v88.mWordClockTime) == 2)
              {
                if (v85)
                {
                  AudioFormatID v63 = v85;
                  do
                  {
                    float v64 = (float)(*v61 + v61[1]) * 0.5;
                    *uint64_t v61 = v64;
                    v61[1] = v64;
                    v61 += 2;
                    --v63;
                  }
                  while (v63);
                }
              }
              else if (v85)
              {
                uint64_t v65 = &v62[v93[0]];
                uint64_t v66 = &v61[v90[0]];
                uint64_t v67 = 4 * v94.mChannelsPerFrame;
                uint64_t v68 = 4 * HIDWORD(v88.mWordClockTime);
                AudioFormatID v69 = v85;
                do
                {
                  float v70 = (float)(*v66 + *v65) * 0.5;
                  float *v66 = v70;
                  float *v65 = v70;
                  uint64_t v65 = (float *)((char *)v65 + v67);
                  uint64_t v66 = (float *)((char *)v66 + v68);
                  --v69;
                }
                while (v69);
              }
            }
          }
        }
      }
      *(void *)&v94.mSampleRate = &v96;
      std::vector<HALS_IOStreamGroup>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
      *(void *)&v88.double mSampleTime = &v100;
      std::vector<HALS_IOStreamGroup>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
    }
    uint64_t v71 = mach_absolute_time();
    int v72 = *(unsigned __int8 *)(a1 + 1378);
    if (*(unsigned char *)(a1 + 1378))
    {
      long long v73 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)&v88.double mSampleTime = *(_OWORD *)a2;
      *(_OWORD *)&v88.mRateScalar = v73;
      long long v74 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v88.mSMPTETime.mSubframes = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v88.mSMPTETime.mHours = v74;
      HALS_IOContext_Legacy_Impl::ProcessOutputForTaps(a1, v85, &v88);
    }
    *(void *)long long v90 = a1;
    LODWORD(v91) = v85;
    char v99 = (AudioStreamBasicDescription *)caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_2>;
    mach_port_t v100 = v90;
    *(void *)CFDictionaryRef v93 = &v99;
    long long v95 = (void (**)(FilterEngineInfoWithoutEngine *__hidden))&unk_1F14809E0;
    int v96 = (uint64_t *)(a1 + 1496);
    *(void *)&v94.mSampleRate = _ZN5caulk12function_refIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEE15functor_invokerIZN25HALS_IOContextDescription62ApplyToActiveOutput_ButSkipClocklessReferenceStreamOnlyEnginesES6_EUljRT_jjRT0_E_EEiRKNS_7details15erased_callableIS5_EEjS2_jjS4_;
    *(void *)&v94.mFormatID = v93;
    *(void *)&v88.double mSampleTime = caulk::function_ref<int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::functor_invoker<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription&,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}>;
    v88.UInt64 mHostTime = (UInt64)&v94;
    int active = VisitableVector<HALS_IOStackDescription>::do_apply<std::vector<HALS_IOStackDescription>,VisitableVector<HALS_IOStackDescription>::ItemWithIndex,HALS_IOContextDescription::ActiveOutputsOnly>(*(void *)(a1 + 1576), *(void *)(a1 + 1584), &v88, (uint64_t)&v95);
    if (active) {
      return active || v9 == 0;
    }
    uint64_t v75 = *(unsigned int *)(*(void *)(a1 + 24) + 16);
    v105[0] = &unk_1F147BED8;
    v105[1] = HALS_IOPerformer::begin_writing;
    v105[2] = v75;
    v105[3] = v105;
    *(void *)CFDictionaryRef v93 = &off_1F147D4F0;
    *(void *)&v94.mSampleRate = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
    *(void *)&v94.mFormatID = v105;
    long long v95 = &off_1F147D460;
    char v99 = &v94;
    *(void *)&v88.double mSampleTime = caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
    v88.UInt64 mHostTime = (UInt64)&v99;
    int active = VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(*(void *)(a1 + 1528), *(void *)(a1 + 1536), &v88, (uint64_t)&v95, (uint64_t)v93);
    std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v105);
    if (active) {
      return active || v9 == 0;
    }
    *(void *)&v94.mSampleRate = a1;
    v94.mFormatID = v85;
    int active = HALS_IOContextDescription::ApplyToOutput_ButSkipReferenceStreamOnlyEngines(*(void *)(a1 + 1576), *(void *)(a1 + 1584), (uint64_t)caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_3>, (uint64_t)&v94);
    if (active) {
      return active || v9 == 0;
    }
    uint64_t v76 = *(unsigned int *)(*(void *)(a1 + 24) + 16);
    v104[0] = &unk_1F147BED8;
    v104[1] = HALS_IOPerformer::end_writing;
    v104[2] = v76;
    v104[3] = v104;
    *(void *)&v88.double mSampleTime = &off_1F147D4F0;
    int active = HALS_IOContext_Legacy_Impl::engine_apply<FilterClocklessReferenceStreamOnlyEngines>(*(void *)(a1 + 1528), *(void *)(a1 + 1536), (uint64_t)v104, (uint64_t)&v88);
    std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v104);
    if (active) {
      return active || v9 == 0;
    }
    if (!v72)
    {
      long long v77 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)&v88.double mSampleTime = *(_OWORD *)a2;
      *(_OWORD *)&v88.mRateScalar = v77;
      long long v78 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)&v88.mSMPTETime.mSubframes = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&v88.mSMPTETime.mHours = v78;
      HALS_IOContext_Legacy_Impl::ProcessOutputForTaps(a1, v85, &v88);
    }
    *(double *)(a1 + 1456) = (double)(uint64_t)(mach_absolute_time() - v71) * 0.0000000416666667;
LABEL_103:
    uint64_t v79 = *(unsigned int *)(*(void *)(a1 + 24) + 16);
    v103[0] = &unk_1F147BED8;
    v103[1] = HALS_IOPerformer::end_io_cycle;
    v103[2] = v79;
    v103[3] = v103;
    *(void *)long long v90 = &unk_1F147D4B0;
    *(void *)&v94.mSampleRate = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
    *(void *)&v94.mFormatID = v103;
    long long v95 = &off_1F147D460;
    char v99 = &v94;
    *(void *)&v88.double mSampleTime = caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
    v88.UInt64 mHostTime = (UInt64)&v99;
    int active = VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(*(void *)(a1 + 1528), *(void *)(a1 + 1536), &v88, (uint64_t)&v95, (uint64_t)v90);
    std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v103);
    return active || v9 == 0;
  }
  uint64_t v39 = 0;
  char v40 = 1;
  while (1)
  {
    if (v40) {
      uint64_t v39 = 0;
    }
    else {
      uint64_t v39 = (unsigned int *)((char *)v39 + 1);
    }
    v94.mSampleRate = v37;
    *(void *)&v94.mFormatID = v39;
    if (((*(uint64_t (**)(unsigned int *, AudioStreamBasicDescription *))(*(void *)v90 + 16))(v90, &v94) & 1) == 0
      && ((*(uint64_t (**)(unsigned int *, AudioStreamBasicDescription *))(*(void *)v93 + 16))(v93, &v94) & 1) == 0)
    {
      char v99 = *(AudioStreamBasicDescription **)&v37;
      mach_port_t v100 = v39;
      int active = (*(uint64_t (**)(UInt64 *, AudioStreamBasicDescription **))&v88.mSampleTime)(&v88.mHostTime, &v99);
      if (active) {
        break;
      }
    }
    char v40 = 0;
    *(void *)&v37 += 424;
    if (*(void *)&v37 == v38) {
      goto LABEL_28;
    }
  }
  return active || v9 == 0;
}

void sub_1BAE4C13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
}

uint64_t HALS_IOContext_Legacy_Impl::ConfigureThreadForRealtimePriority(_opaque_pthread_t **this, unsigned int a2)
{
  unint64_t v5 = 0;
  BOOL v4 = 0;
  uint64_t result = HALS_IOContext_Legacy_Impl::GetRealtimePriorityThreadParameters((HALS_IOContext_Legacy_Impl *)this, a2, &v5, &v4);
  if (!result)
  {
    HALB_IOThread::ConfigureThreadForRealtimePriority(this + 39, (_opaque_pthread_t *)v5, v4);
    return 0;
  }
  return result;
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoop_HandleBufferSizeChanged(CAAudioTimeStamp &,unsigned int,unsigned int,long long &)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    uint64_t v8 = *(void *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)unsigned int v11 = 2080;
    *(void *)&void v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 2080;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Failed to update realtime priority parameters with code: %d - %s", (uint8_t *)&v10, 0x28u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAE4C374(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoop_HandleBufferSizeChanged(CAAudioTimeStamp &,unsigned int,unsigned int,long long &)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t VisitableVector<HALS_IOStreamInfo>::do_apply<std::vector<HALS_IOStreamInfo>,VisitableVector<HALS_IOStreamInfo>::ItemWithIndex,HALS_IOStreamGroup::FilterClocklessReferenceStreamOnlyEngines>(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, void *), uint64_t a4)
{
  if (a1 == a2) {
    return 0;
  }
  v15[8] = v4;
  v15[9] = v5;
  uint64_t v9 = a1;
  uint64_t v10 = 0;
  unsigned int v11 = (uint64_t (**)(void, void))(a3 + 1);
  for (char i = 1; ; char i = 0)
  {
    if (i) {
      uint64_t v10 = 0;
    }
    else {
      ++v10;
    }
    v15[0] = v9;
    v15[1] = v10;
    if (((*(uint64_t (**)(uint64_t, void *))(*(void *)a4 + 16))(a4, v15) & 1) == 0)
    {
      v14[0] = v9;
      v14[1] = v10;
      uint64_t result = (*a3)(v11, v14);
      if (result) {
        break;
      }
    }
    v9 += 424;
    if (v9 == a2) {
      return 0;
    }
  }
  return result;
}

uint64_t HALS_IOContext_Legacy_Impl::ProcessOutputForTaps(uint64_t result, unsigned int a2, const AudioTimeStamp *a3)
{
  uint64_t v171 = *MEMORY[0x1E4F143B8];
  os_log_type_t v3 = *(uint64_t **)(result + 1992);
  if (v3)
  {
    unsigned int v4 = a2;
    uint64_t v5 = result;
    int v6 = (HALS_IOContextDescription *)(result + 1496);
    int64_t v129 = a2;
    __asm { FMOV            V10.2S, #1.0 }
    unint64_t v137 = (HALS_IOContextDescription *)(result + 1496);
    while (!*((unsigned char *)v3 + 40))
    {
LABEL_146:
      os_log_type_t v3 = (uint64_t *)*v3;
      if (!v3) {
        return result;
      }
    }
    unsigned __int8 v12 = atomic_load((unsigned __int8 *)v3 + 41);
    if ((v12 & 1) == 0 && *((unsigned char *)v3 + 40))
    {
      HALS_MultiTap::writer_anchor_time((HALS_MultiTap *)v3[3], *(_DWORD *)(*(void *)(v5 + 24) + 16), a3);
      atomic_store(1u, (unsigned __int8 *)v3 + 41);
    }
    int v13 = (_DWORD *)v3[6];
    uint64_t v14 = *v13;
    if (v14 != (unint64_t)(v3[7] - (void)v13 - 8) >> 4) {
      goto LABEL_148;
    }
    if (v14)
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      while (1)
      {
        HALS_IOContextDescription::GetStreamInfoAtIndex(v6, 0, v16, (uint64_t)&__B);
        int v13 = (_DWORD *)v3[6];
        uint64_t v17 = &v13[v15];
        v13[v15 + 2] = HIDWORD(v168);
        int v18 = v168 * v4;
        if (v167 != 1819304813) {
          int v18 = DWORD2(v167);
        }
        void v17[3] = v18;
        *((void *)v17 + 2) = HALS_IOContextDescription::GetIOBufferForStreamAtIndex(v6, 0, v16);
        unint64_t v19 = *v13;
        if (v19 != (unint64_t)(v3[7] - (void)v13 - 8) >> 4) {
          break;
        }
        ++v16;
        v15 += 4;
        if (v16 >= v19) {
          goto LABEL_14;
        }
      }
LABEL_148:
      __assert_rtn("GetNumberBuffers", "CoreAudioBaseTypes.hpp", 1096, "GetAudioBufferList().mNumberBuffers == (mStorage.size() - kHeaderSize) / sizeof(AudioBuffer)");
    }
LABEL_14:
    unsigned int v20 = *(_DWORD *)(*(void *)(v5 + 24) + 16);
    uint64_t v138 = v3[3];
    uint64_t v163 = v138 + 152;
    BOOL v21 = std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)(v138 + 152));
    BOOL v164 = v21;
    int v6 = v137;
    if (!v21)
    {
LABEL_145:
      uint64_t result = std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v163);
      goto LABEL_146;
    }
    HALS_MultiTap::fetch_writer_state((HALS_MultiTap *)&v161, v138, v20);
    unint64_t v22 = v161;
    if (!v161 || (__dst = (void *)v161[18]) == 0 || !v161[19])
    {
LABEL_143:
      if (v162) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v162);
      }
      goto LABEL_145;
    }
    long long v130 = v161 + 19;
    uint64_t v131 = v161 + 18;
    vDSP_Length v23 = v129;
    if (v129 >= v161[17]) {
      vDSP_Length v23 = v161[17];
    }
    uint64_t v24 = v138;
    vDSP_Length __N = v23;
    bzero(__dst, v23 * *(unsigned int *)(v138 + 48));
    if (*((_DWORD *)v22 + 10) == 2 && v22[15] == 1)
    {
      memcpy(__dst, *(const void **)&v13[4 * v22[14] + 4], v13[4 * v22[14] + 3]);
    }
    else
    {
      int v26 = *(_DWORD *)(v138 + 48);
      vDSP_Stride v144 = *(unsigned int *)(v138 + 52);
      uint64_t v27 = *v13;
      v152.__vftable = 0;
      v152.__imp_.__imp_ = 0;
      char v153 = 0;
      __B = (void **)&v152;
      LOBYTE(v166) = 0;
      if (!*MEMORY[0x1E4FB7E88]) {
LABEL_165:
      }
        __break(1u);
      uint64_t v28 = (16 * v27) | 8;
      long long v29 = (std::logic_error_vtbl *)caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88]);
      int v136 = v26 * __N;
      long long v30 = (char *)v29 + v28;
      v152.__vftable = v29;
      char v153 = (char *)v29 + v28;
      do
      {
        LOBYTE(v29->~logic_error) = 0;
        long long v29 = (std::logic_error_vtbl *)((char *)v29 + 1);
        --v28;
      }
      while (v28);
      v152.__imp_.__imp_ = v30;
      LODWORD(v152.~logic_error) = v27;
      unint64_t v147 = 0;
      long long v148 = 0uLL;
      long long v31 = (caulk::rt_safe_memory_resource *)*v13;
      if (v31)
      {
        *((void *)&v167 + 1) = (char *)&v148 + 8;
        __B = (void **)std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>(v31);
        *(void *)&long long v166 = __B;
        *((void *)&v166 + 1) = __B;
        *(void *)&long long v167 = &__B[3 * v32];
        std::vector<caulk::rt_vector<float>,caulk::rt_allocator<caulk::rt_vector<float>>>::__swap_out_circular_buffer(&v147, &__B);
        std::__split_buffer<caulk::rt_vector<float>,caulk::rt_allocator<caulk::rt_vector<float>> &>::~__split_buffer((uint64_t)&__B);
        vDSP_Length v140 = __N * v144;
        if (*v13)
        {
          unint64_t v33 = 0;
          size_t v34 = 4 * __N * v144;
          do
          {
            if (v140)
            {
              if (v140 >> 62) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              if (!*MEMORY[0x1E4FB7E88]) {
                goto LABEL_165;
              }
              long long v35 = (char *)caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88]);
              uint64_t v36 = &v35[4 * v140];
              bzero(v35, v34);
              *(void *)&long long v37 = v35;
              *((void *)&v37 + 1) = &v35[v34];
            }
            else
            {
              uint64_t v36 = 0;
              long long v37 = 0uLL;
            }
            long long v141 = v37;
            uint64_t v38 = v148;
            if ((unint64_t)v148 >= *((void *)&v148 + 1))
            {
              unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v148 - (void)v147) >> 3);
              unint64_t v41 = v40 + 1;
              if (v40 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * ((uint64_t)(*((void *)&v148 + 1) - (void)v147) >> 3) > v41) {
                unint64_t v41 = 0x5555555555555556 * ((uint64_t)(*((void *)&v148 + 1) - (void)v147) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v148 + 1) - (void)v147) >> 3) >= 0x555555555555555) {
                uint64_t v42 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                uint64_t v42 = v41;
              }
              *((void *)&v167 + 1) = (char *)&v148 + 8;
              if (v42) {
                uint64_t v42 = (uint64_t)std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>((caulk::rt_safe_memory_resource *)v42);
              }
              else {
                uint64_t v43 = 0;
              }
              uint64_t v44 = (char *)(v42 + 24 * v40);
              __B = (void **)v42;
              *(void *)&long long v166 = v44;
              *(void *)&long long v167 = v42 + 24 * v43;
              *(_OWORD *)uint64_t v44 = v141;
              *((void *)v44 + 2) = v36;
              *((void *)&v166 + 1) = v44 + 24;
              std::vector<caulk::rt_vector<float>,caulk::rt_allocator<caulk::rt_vector<float>>>::__swap_out_circular_buffer(&v147, &__B);
              uint64_t v39 = v148;
              std::__split_buffer<caulk::rt_vector<float>,caulk::rt_allocator<caulk::rt_vector<float>> &>::~__split_buffer((uint64_t)&__B);
            }
            else
            {
              *(_OWORD *)long long v148 = v37;
              *(void *)(v38 + 16) = v36;
              uint64_t v39 = v38 + 24;
            }
            *(void *)&long long v148 = v39;
            unint64_t v45 = *v13;
            ++v33;
          }
          while (v33 < v45);
          if (v45)
          {
            unint64_t v46 = 0;
            unsigned int v135 = v4;
            uint64_t v133 = v3;
            uint64_t v134 = v5;
            do
            {
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v148 - (void)v147) >> 3) <= v46) {
                std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
              }
              uint64_t v142 = v147[3 * v46];
              if (v144)
              {
                unint64_t v47 = 0;
                unsigned int v48 = &v13[4 * v46];
                int v49 = v48 + 2;
                int v50 = (uint64_t *)(v48 + 4);
                do
                {
                  uint64_t v51 = (float *)(v142 + 4 * v47);
                  unint64_t v52 = *v49;
                  if (!v52) {
                    goto LABEL_65;
                  }
                  uint64_t v53 = 0;
                  uint64_t v54 = 0;
                  unint64_t v55 = 0;
                  char v56 = 0;
                  do
                  {
                    uint64_t v57 = v22[6];
                    if (0xCCCCCCCCCCCCCCCDLL * ((v22[7] - v57) >> 4) <= v46) {
                      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
                    }
                    uint64_t v59 = (uint64_t *)(v57 + 80 * v46 + 56);
                    uint64_t v58 = *v59;
                    if (0xAAAAAAAAAAAAAAABLL * ((v59[1] - *v59) >> 3) > v55)
                    {
                      uint64_t v60 = (uint64_t *)(v58 + v54);
                      uint64_t v61 = *v60;
                      if (v47 < (v60[1] - *v60) >> 2)
                      {
                        uint64_t v62 = *v50;
                        LODWORD(__B) = 0;
                        LODWORD(__B) = *(_DWORD *)(v61 + 4 * v47);
                        if (*(float *)&__B != 0.0)
                        {
                          AudioFormatID v63 = (const float *)(v62 + v53);
                          if (v56) {
                            vDSP_vsma(v63, v52, (const float *)&__B, v51, v144, v51, v144, __N);
                          }
                          else {
                            vDSP_vsmul(v63, v52, (const float *)&__B, v51, v144, __N);
                          }
                          char v56 = 1;
                        }
                        unint64_t v52 = *v49;
                      }
                    }
                    ++v55;
                    v54 += 24;
                    v53 += 4;
                  }
                  while (v55 < v52);
                  if ((v56 & 1) == 0)
                  {
LABEL_65:
                    LODWORD(__B) = 0;
                    vDSP_vfill((const float *)&__B, v51, v144, __N);
                  }
                  ++v47;
                }
                while (v47 != v144);
              }
              unint64_t v64 = LODWORD(v152.~logic_error);
              if (v64 != (unint64_t)(v152.__imp_.__imp_ - (const char *)v152.__vftable - 8) >> 4) {
                __assert_rtn("GetNumberBuffers", "HALS_MultiChannelMixer.cpp", 41, "GetAudioBufferList().mNumberBuffers == (mStorage.size() - kHeaderSize) / sizeof(AudioBuffer)");
              }
              if (v46 >= v64)
              {
                exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(exception, "accessing a RealTimeSafeBufferList with an out-of-range index");
                exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
                __cxa_throw(exception, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
              }
              uint64_t v65 = (char *)v152.__vftable + 16 * v46;
              unsigned int v4 = v135;
              *((_DWORD *)v65 + 2) = v144;
              *((_DWORD *)v65 + 3) = v136;
              *((void *)v65 + 2) = v142;
              ++v46;
              os_log_type_t v3 = v133;
              uint64_t v5 = v134;
            }
            while (v46 < *v13);
          }
        }
      }
      else
      {
        vDSP_Length v140 = __N * v144;
      }
      uint64_t v66 = v152.__vftable;
      if (LODWORD(v152.~logic_error))
      {
        unint64_t v67 = 0;
        char v68 = 0;
        uint64_t v69 = 16;
        do
        {
          float v70 = *(const float **)((char *)&v66->~logic_error + v69);
          LODWORD(__B) = 1065353216;
          if (v68) {
            vDSP_vsma(v70, 1, (const float *)&__B, (const float *)__dst, 1, (float *)__dst, 1, v140);
          }
          else {
            vDSP_vsmul(v70, 1, (const float *)&__B, (float *)__dst, 1, v140);
          }
          ++v67;
          v69 += 16;
          char v68 = 1;
        }
        while (v67 < LODWORD(v66->~logic_error));
      }
      else
      {
        LODWORD(__B) = 0;
        vDSP_vfill((const float *)&__B, (float *)__dst, 1, __N);
      }
      __B = (void **)&v147;
      std::vector<caulk::rt_vector<float>,caulk::rt_allocator<caulk::rt_vector<float>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&__B);
      if (v152.__vftable)
      {
        v152.__imp_.__imp_ = (const char *)v152.__vftable;
        std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v152.__vftable);
      }
      uint64_t v24 = v138;
    }
    LODWORD(v25) = *(_DWORD *)(v24 + 68);
    uint64_t v71 = (uint64_t)(*((double *)v22 + 27) + (double)v25 + (double)(uint64_t)v22[35]);
    if (v22[20] == v71)
    {
LABEL_117:
      v22[20] = __N + v71;
      unsigned int v160 = __N;
      uint64_t v99 = (*(uint64_t (**)(void, void))(*(void *)v22[16] + 16))(v22[16], 0);
      mach_port_t v100 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)v22[16] + 16))(v22[16], 1, v99);
      if (!v100)
      {
        unsigned int v160 = 0;
        AMCP::Log::Scope_Registry::get(v100);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__B, "com.apple.coreaudio", "AMCP");
        long long v101 = (caulk::concurrent::messenger *)__B[1];
        uint64_t v102 = pthread_self();
        mach_port_t v103 = pthread_mach_thread_np(v102);
        uint64_t v104 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
        *(_DWORD *)(v104 + 16) = 0;
        *(unsigned char *)(v104 + 20) = 16;
        *(_DWORD *)(v104 + 24) = v103;
        *(void *)(v104 + 32) = "HALS_MultiTap.cpp";
        *(_DWORD *)(v104 + 40) = 734;
        *(void *)uint64_t v104 = &unk_1F1484D48;
        *(void *)(v104 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v101, (caulk::concurrent::message *)v104);
        mach_port_t v100 = (AMCP::Log::Scope_Registry *)v166;
        if ((void)v166) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v166);
        }
      }
      if (v99 >= 0x2000) {
        unsigned int v105 = 0x2000;
      }
      else {
        unsigned int v105 = v99;
      }
      unsigned int v159 = v105;
      if (v99 > 0x2000)
      {
        AMCP::Log::Scope_Registry::get(v100);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__B, "com.apple.coreaudio", "AMCP");
        CFTypeRef v106 = (caulk::concurrent::messenger *)__B[1];
        CFDictionaryRef v107 = pthread_self();
        mach_port_t v108 = pthread_mach_thread_np(v107);
        unsigned int v109 = v159;
        uint64_t v110 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
        *(_DWORD *)(v110 + 16) = 0;
        *(unsigned char *)(v110 + 20) = 16;
        *(_DWORD *)(v110 + 24) = v108;
        *(void *)(v110 + 32) = "HALS_MultiTap.cpp";
        *(_DWORD *)(v110 + 40) = 740;
        *(_DWORD *)(v110 + 44) = v99;
        *(_DWORD *)(v110 + 48) = v109;
        *(void *)uint64_t v110 = &unk_1F1484DA0;
        *(void *)(v110 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v106, (caulk::concurrent::message *)v110);
        if ((void)v166) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v166);
        }
      }
      HALS_IOProcessor::Process((HALS_IOProcessor *)v22[16], (double)v71, (unsigned __int8 *)v22[18], &v160, (unsigned __int8 *)v22[19], &v159, 0, 0);
      uint64_t v111 = (std::logic_error_vtbl *)v22[21];
      mach_port_t v112 = (double *)v22[16];
      if (!v111)
      {
        double v113 = v112[8];
        if (v113 == 0.0)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v112);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__B, "com.apple.coreaudio", "AMCP");
          long long v122 = *__B;
          if ((void)v166) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v166);
          }
          if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
          {
            long long v123 = pthread_self();
            mach_port_t v124 = pthread_mach_thread_np(v123);
            LODWORD(__B) = 67109890;
            HIDWORD(__B) = v124;
            LOWORD(v166) = 2080;
            *(void *)((char *)&v166 + 2) = "HALS_MultiTap.cpp";
            WORD5(v166) = 1024;
            HIDWORD(v166) = 749;
            LOWORD(v167) = 2080;
            *(void *)((char *)&v167 + 2) = "not (writer_state_ptr->m_processor_ptr->GetLocalFormat().mSampleRate != 0)";
            _os_log_error_impl(&dword_1BAA78000, v122, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid sample rate", (uint8_t *)&__B, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v158);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Invalid sample rate", (uint64_t)&v150);
          std::logic_error::logic_error(&v151, &v150);
          v151.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error(&v152, &v151);
          uint64_t v154 = 0;
          uint64_t v155 = 0;
          uint64_t v156 = 0;
          int v157 = -1;
          v152.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
          char v153 = (char *)&unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__B, (uint64_t)&v152);
          *((void *)&v167 + 1) = "void HALS_MultiTap::write(AudioObjectID, int64_t, const AudioBufferList *, const AudioTimeStamp *)";
          CFDictionaryRef v168 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_MultiTap.cpp";
          int v169 = 749;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v145);
          unint64_t v147 = &unk_1F148AA90;
          long long v148 = v145;
          uint64_t v149 = v146;
          long long v145 = 0uLL;
          uint64_t v146 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        double v114 = v112[3];
        if (v114 == 0.0)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v112);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__B, "com.apple.coreaudio", "AMCP");
          long long v125 = *__B;
          if ((void)v166) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v166);
          }
          if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
          {
            long long v126 = pthread_self();
            mach_port_t v127 = pthread_mach_thread_np(v126);
            LODWORD(__B) = 67109890;
            HIDWORD(__B) = v127;
            LOWORD(v166) = 2080;
            *(void *)((char *)&v166 + 2) = "HALS_MultiTap.cpp";
            WORD5(v166) = 1024;
            HIDWORD(v166) = 750;
            LOWORD(v167) = 2080;
            *(void *)((char *)&v167 + 2) = "not (writer_state_ptr->m_processor_ptr->GetSharedFormat().mSampleRate != 0)";
            _os_log_error_impl(&dword_1BAA78000, v125, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid sample rate", (uint8_t *)&__B, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v158);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Invalid sample rate", (uint64_t)&v150);
          std::logic_error::logic_error(&v151, &v150);
          v151.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error(&v152, &v151);
          uint64_t v154 = 0;
          uint64_t v155 = 0;
          uint64_t v156 = 0;
          int v157 = -1;
          v152.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
          char v153 = (char *)&unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__B, (uint64_t)&v152);
          *((void *)&v167 + 1) = "void HALS_MultiTap::write(AudioObjectID, int64_t, const AudioBufferList *, const AudioTimeStamp *)";
          CFDictionaryRef v168 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_MultiTap.cpp";
          int v169 = 750;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v145);
          unint64_t v147 = &unk_1F148AA90;
          long long v148 = v145;
          uint64_t v149 = v146;
          long long v145 = 0uLL;
          uint64_t v146 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        uint64_t v111 = (std::logic_error_vtbl *)vcvtmd_s64_f64(v113 / v114 * (double)v71);
        v22[21] = v111;
      }
      int v115 = HALS_IOProcessor::NeedsLocalBuffer((HALS_IOProcessor *)v112);
      CFTypeRef v116 = v131;
      if (v115) {
        CFTypeRef v116 = v130;
      }
      uint64_t v117 = *v116;
      uint64_t v118 = &v160;
      if (v115) {
        uint64_t v118 = &v159;
      }
      uint64_t v119 = *v118;
      os_unfair_lock_lock((os_unfair_lock_t)(v138 + 408));
      v152.__vftable = v111;
      uint64_t v120 = *(void *)(v138 + 520);
      LODWORD(__B) = 0;
      long long v166 = 0u;
      long long v167 = 0u;
      LODWORD(v168) = 0;
      write_to_dal_buffer(v117, v119, (uint64_t *)&v152, v138 + 24, v120, (uint64_t **)(v138 + 528), (uint64_t *)(v138 + 536), (int)&__B);
      if (SBYTE7(v167) < 0) {
        operator delete((void *)v166);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(v138 + 408));
      v22[21] += v119;
      (*(void (**)(void ***__return_ptr))(**(void **)(v138 + 520) + 72))(&__B);
      int64_t v121 = vcvtmd_s64_f64(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v168));
      if (*(void *)(v138 + 424) < v121) {
        *(void *)(v138 + 424) = v121;
      }
      if (v170) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v170);
      }
      if (*((void *)&v167 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v167 + 1));
      }
      int v6 = v137;
      goto LABEL_143;
    }
    int v72 = (void *)v22[16];
    uint64_t v73 = v72[14];
    if (v73)
    {
      *(void *)(v73 + 20) = _D10;
      *(void *)(v73 + 36) = 0;
      *(void *)(v73 + 28) = 0;
      *(_DWORD *)(v73 + 44) = 0;
    }
    uint64_t v74 = v72[15];
    if (v74)
    {
      uint64_t v75 = *(OpaqueAudioConverter **)(v74 + 8);
      if (v75) {
        AudioConverterReset(v75);
      }
    }
    uint64_t v76 = v72[16];
    if (!v76)
    {
LABEL_116:
      v22[21] = 0;
      goto LABEL_117;
    }
    int v77 = *(_DWORD *)(v76 + 24);
    if (v77 != 2)
    {
      if (v77 == 1)
      {
        char v97 = *(uint64_t **)(v76 + 56);
        int v96 = *(uint64_t **)(v76 + 64);
        while (v97 != v96)
        {
          uint64_t v98 = *v97++;
          *(void *)(v98 + 16) = *(void *)(v98 + 8);
        }
      }
      else if (!v77)
      {
        long long v78 = *(uint64_t **)(v76 + 32);
        uint64_t v79 = *(uint64_t **)(v76 + 40);
        while (v78 != v79)
        {
          uint64_t v80 = *v78;
          bzero(*(void **)(*v78 + 72), 4 * *(unsigned int *)(*v78 + 68));
          bzero(*(void **)(v80 + 80), 4 * *(unsigned int *)(v80 + 68));
          *(_DWORD *)(v80 + 64) = 0;
          *(void *)(v80 + 152) = 0;
          *(_DWORD *)(v80 + 96) = 0;
          *(unsigned char *)(v80 + 124) = 0;
          Resampler2::SetPrimeMethod(v80, *(_DWORD *)(v80 + 112));
          double v81 = 0.0;
          if (!*(unsigned char *)(v80 + 256))
          {
            double v82 = 1.0;
            if (*(_DWORD *)(v80 + 108) != 1818848869) {
              double v82 = (double)(*(_DWORD *)(*(void *)(v80 + 48) + 12) >> 1);
            }
            double v81 = -1.0 - (*(double *)(v80 + 152) + v82);
          }
          *(double *)(v80 + 128) = v81;
          *(void *)(v80 + 264) = 0;
          ++v78;
        }
      }
      goto LABEL_116;
    }
    uint64_t v83 = *(uint64_t **)(v76 + 80);
    uint64_t v84 = *(uint64_t **)(v76 + 88);
    while (1)
    {
      if (v83 == v84) {
        goto LABEL_116;
      }
      uint64_t v85 = *v83;
      *(_DWORD *)(v85 + 72) = 0;
      *(_DWORD *)(v85 + 88) = 1;
      if (*(unsigned char *)(v85 + 93))
      {
        int v86 = *(void **)(v85 + 160);
        uint64_t v87 = *(void *)(v85 + 168) - (void)v86;
        if (v87 >= 1) {
          bzero(v86, ((((unint64_t)v87 >> 6) - ((unint64_t)v87 > 0x3F)) << 6) + 64);
        }
        AudioTimeStamp v88 = *(void **)(v85 + 184);
        uint64_t v89 = *(void *)(v85 + 192) - (void)v88;
        if (v89 >= 1)
        {
          unint64_t v90 = (unint64_t)v89 >> 6;
          BOOL v91 = (unint64_t)v89 > 0x3F;
          char v92 = 6;
LABEL_111:
          bzero(v88, (v90 - v91 + 1) << v92);
        }
      }
      else
      {
        CFDictionaryRef v93 = *(void **)(v85 + 112);
        uint64_t v94 = *(void *)(v85 + 120) - (void)v93;
        if (v94 >= 1) {
          bzero(v93, 32 * (((unint64_t)v94 >> 5) - ((unint64_t)v94 > 0x1F)) + 32);
        }
        AudioTimeStamp v88 = *(void **)(v85 + 136);
        uint64_t v95 = *(void *)(v85 + 144) - (void)v88;
        if (v95 >= 1)
        {
          unint64_t v90 = (unint64_t)v95 >> 5;
          BOOL v91 = (unint64_t)v95 > 0x1F;
          char v92 = 5;
          goto LABEL_111;
        }
      }
      ++v83;
    }
  }
  return result;
}

void sub_1BAE4D5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,long long a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41)
{
  if (a2)
  {
    a34 = &a30;
    std::vector<caulk::rt_vector<float>,caulk::rt_allocator<caulk::rt_vector<float>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&a34);
    if (a39)
    {
      a40 = (uint64_t)a39;
      std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](a39);
    }
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t VisitableVector<HALS_IOStackDescription>::do_apply<std::vector<HALS_IOStackDescription>,VisitableVector<HALS_IOStackDescription>::ItemWithIndex,HALS_IOContextDescription::ActiveOutputsOnly>(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, void *), uint64_t a4)
{
  if (a1 == a2) {
    return 0;
  }
  v15[8] = v4;
  v15[9] = v5;
  uint64_t v9 = a1;
  uint64_t v10 = 0;
  unsigned int v11 = (uint64_t (**)(void, void))(a3 + 1);
  for (char i = 1; ; char i = 0)
  {
    if (i) {
      uint64_t v10 = 0;
    }
    else {
      ++v10;
    }
    v15[0] = v9;
    v15[1] = v10;
    if (((*(uint64_t (**)(uint64_t, void *))(*(void *)a4 + 16))(a4, v15) & 1) == 0)
    {
      v14[0] = v9;
      v14[1] = v10;
      uint64_t result = (*a3)(v11, v14);
      if (result) {
        break;
      }
    }
    v9 += 32;
    if (v9 == a2) {
      return 0;
    }
  }
  return result;
}

uint64_t HALS_IOContextDescription::ApplyToOutput_ButSkipReferenceStreamOnlyEngines(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a3;
  v6[1] = a4;
  uint64_t v5 = v6;
  v8[0] = _ZN5caulk12function_refIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEE15functor_invokerIZN25HALS_IOContextDescription47ApplyToOutput_ButSkipReferenceStreamOnlyEnginesES6_EUljRT_jjRT0_E_EEiRKNS_7details15erased_callableIS5_EEjS2_jjS4_;
  v8[1] = &v5;
  *(void *)&long long v7 = _ZN5caulk12function_refIFiRN15VisitableVectorI23HALS_IOStackDescriptionE13ItemWithIndexEEE15functor_invokerIZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS0_IFijRS2_jjR17HALS_IOStreamInfoEEEDpRKT_EUlS5_E_EEiRKNS_7details15erased_callableIS6_EES5_;
  *((void *)&v7 + 1) = v8;
  return VisitableVector<HALS_IOStackDescription>::apply<>(a1, a2, &v7);
}

uint64_t HALS_IOContext_Legacy_Impl::engine_apply<FilterClocklessReferenceStreamOnlyEngines>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
  v6[1] = a3;
  uint64_t v5 = &off_1F147D460;
  long long v7 = v6;
  v8[0] = (uint64_t (*)(void, void *))caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
  v8[1] = (uint64_t (*)(void, void *))&v7;
  return VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(a1, a2, v8, (uint64_t)&v5, a4);
}

uint64_t _ZN5caulk12function_refIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEE15functor_invokerIZN25HALS_IOContextDescription47ApplyToOutput_ButSkipReferenceStreamOnlyEnginesES6_EUljRT_jjRT0_E_EEiRKNS_7details15erased_callableIS5_EEjS2_jjS4_(uint64_t (****a1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!*(_DWORD *)(a6 + 108)
    || ((unsigned int v11 = *(uint64_t **)(a6 + 112), *(uint64_t **)(a6 + 120) != v11) ? (v12 = v11 == 0) : (v12 = 1), v12))
  {
    unsigned int v11 = (uint64_t *)(a6 + 408);
  }
  uint64_t v13 = *v11;
  if (!v13) {
    return 0;
  }
  uint64_t v14 = *a1;
  if ((*(uint64_t (**)(uint64_t))(*(void *)v13 + 136))(v13)) {
    return 0;
  }
  uint64_t v16 = (uint64_t)(*v14 + 1);
  uint64_t v17 = **v14;

  return v17(v16, a2, a3, a4, a5, a6);
}

uint64_t caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_3>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  long long v7 = *a1;
  uint64_t v8 = **a1;
  v11[0] = &unk_1F147A8C8;
  v11[1] = v8;
  if (a6[416]) {
    return (*(uint64_t (**)(unsigned char *, void *, void))(*(void *)a6 + 16))(a6, v11, *((unsigned int *)v7 + 2));
  }
  uint64_t v10 = IOContextViewForIOPerformer::owner_object_id((IOContextViewForIOPerformer *)v11);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a6 + 24))(a6, v10);
}

uint64_t caulk::function_ref<int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::functor_invoker<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription&,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(uint64_t **)(*(void *)a2 + 8);
  uint64_t v5 = *(void *)(*(void *)a2 + 16);
  if ((uint64_t *)v5 == v4
    || ((uint64_t v6 = *v4, -1944890851 * ((unint64_t)(v4[1] - *v4) >> 3)) ? (v7 = v6 == 0) : (v7 = 1), v7))
  {
    int v8 = 0;
  }
  else
  {
    if (!*(_DWORD *)(v6 + 108)
      || ((uint64_t v9 = *(void *)(v6 + 112), *(void *)(v6 + 120) != v9) ? (v10 = v9 == 0) : (v10 = 1), v10))
    {
      uint64_t v9 = v6 + 408;
    }
    int v8 = *(_DWORD *)(*(void *)v9 + 308);
  }
  v14[0] = a2;
  v14[1] = v3;
  int v15 = v8;
  uint64_t v13 = v14;
  *(void *)&long long v12 = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)>::functor_invoker<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const({lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1})::{lambda(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)#1}>;
  *((void *)&v12 + 1) = &v13;
  return VisitableVector<HALS_IOStreamGroup>::apply<>((uint64_t)v4, v5, &v12);
}

uint64_t caulk::function_ref<int ()(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)>::functor_invoker<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const({lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1})::{lambda(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)#1}>(uint64_t **a1, uint64_t **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = **a1;
  *(void *)&long long v5 = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo&)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const({lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1})::{lambda(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)#1}>;
  *((void *)&v5 + 1) = v3;
  return VisitableVector<HALS_IOStreamInfo>::apply<>(*v2, v2[1], &v5);
}

uint64_t caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo&)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}::operator() const({lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1})::{lambda(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)#1}>(void ***a1, uint64_t a2)
{
  return ((uint64_t (*)(void *, void, void, void, void, void))*(*a1)[1])((*a1)[1] + 1, *((unsigned int *)**a1 + 2), ***a1, *((unsigned int *)*a1 + 4), *(unsigned int *)(a2 + 8), *(void *)a2);
}

uint64_t _ZN5caulk12function_refIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEE15functor_invokerIZN25HALS_IOContextDescription62ApplyToActiveOutput_ButSkipClocklessReferenceStreamOnlyEnginesES6_EUljRT_jjRT0_E_EEiRKNS_7details15erased_callableIS5_EEjS2_jjS4_(uint64_t (****a1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v11 = *a1;
  if (!*(_DWORD *)(a6 + 108))
  {
    if (!*(void *)(a6 + 408)) {
      return 0;
    }
LABEL_17:
    uint64_t v14 = (void *)(a6 + 408);
    goto LABEL_18;
  }
  long long v12 = *(void **)(a6 + 112);
  if (*(void **)(a6 + 120) == v12 || v12 == 0)
  {
    if (!*(void *)(a6 + 408)) {
      return 0;
    }
  }
  else if (!*v12)
  {
    return 0;
  }
  uint64_t v14 = *(void **)(a6 + 112);
  if (*(void **)(a6 + 120) == v14 || v14 == 0) {
    goto LABEL_17;
  }
LABEL_18:
  if (!(*(unsigned int (**)(void))(*(void *)*v14 + 320))(*v14)) {
    return 0;
  }
  uint64_t v16 = (uint64_t)(*v11 + 1);
  uint64_t v17 = **v11;

  return v17(v16, a2, a3, a4, a5, a6);
}

uint64_t caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_2>(AMCP::Log::Scope_Registry *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  BOOL v7 = *(uint64_t **)a1;
  uint64_t v8 = **(void **)a1;
  uint64_t v9 = &unk_1F147A8C8;
  v33[0] = &unk_1F147A8C8;
  v33[1] = v8;
  uint64_t v10 = *((unsigned int *)v7 + 2);
  if (*(unsigned char *)(a6 + 416))
  {
    HostedDSP_StreamProcessor::StreamProcessInfo::StreamProcessInfo((uint64_t)&v34, 1869968496, (uint64_t)v33, a6, v10);
    return HostedDSP_StreamProcessor::PerformIO_ProcessStream((uint64_t)&v34);
  }
  else
  {
    int v13 = *(_DWORD *)(a6 + 108);
    if (!v13 || ((uint64_t v14 = *(void *)(a6 + 112), *(void *)(a6 + 120) != v14) ? (v15 = v14 == 0) : (v15 = 1), v15)) {
      uint64_t v14 = a6 + 408;
    }
    uint64_t v16 = *(void *)v14;
    if (*(void *)(*(void *)v14 + 8))
    {
      uint64_t v17 = *(unsigned int *)(v16 + 308);
      if (*(void *)(a6 + 96))
      {
        unsigned int v38 = v10;
        unsigned int v18 = *(_DWORD *)(v16 + 4 * *(unsigned __int8 *)(a6 + 8) + 672);
        unsigned int v37 = v18;
        uint64_t v19 = *(void *)(a6 + 32);
        uint64_t v20 = *(void *)(a6 + 40);
        if (v19) {
          BOOL v21 = (unsigned __int8 *)(v19 + v17);
        }
        else {
          BOOL v21 = 0;
        }
        if (v20) {
          unint64_t v22 = (unsigned __int8 *)(v20 + v17);
        }
        else {
          unint64_t v22 = 0;
        }
        uint64_t v23 = 24;
        if ((unint64_t)v21 | (unint64_t)v22) {
          uint64_t v23 = 48;
        }
        unsigned int v24 = *(_DWORD *)(a6 + v23);
        if (v13)
        {
          HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v34, (uint64_t *)(a6 + 112));
        }
        else
        {
          long long v25 = *(_OWORD *)(a6 + 384);
          long long v34 = *(_OWORD *)(a6 + 368);
          long long v35 = v25;
          uint64_t v36 = *(void *)(a6 + 400);
        }
        if (v18 * DWORD2(v35) > v24)
        {
          if (*(_DWORD *)(a6 + 108))
          {
            HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v34, (uint64_t *)(a6 + 112));
          }
          else
          {
            long long v26 = *(_OWORD *)(a6 + 384);
            long long v34 = *(_OWORD *)(a6 + 368);
            long long v35 = v26;
            uint64_t v36 = *(void *)(a6 + 400);
          }
          unsigned int v27 = v24 / DWORD2(v35);
          unsigned int v37 = v27;
          AMCP::Log::Scope_Registry::get(a1);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v34, "com.apple.coreaudio", "AMCP");
          uint64_t v32 = *(caulk::concurrent::messenger **)(v34 + 8);
          uint64_t v28 = pthread_self();
          mach_port_t v29 = pthread_mach_thread_np(v28);
          uint64_t v30 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
          *(_DWORD *)(v30 + 16) = 0;
          *(unsigned char *)(v30 + 20) = 16;
          *(_DWORD *)(v30 + 24) = v29;
          *(void *)(v30 + 32) = "HALS_IOPerformer.cpp";
          *(_DWORD *)(v30 + 40) = 303;
          *(_DWORD *)(v30 + 44) = v18;
          *(_DWORD *)(v30 + 48) = v27;
          *(void *)uint64_t v30 = &unk_1F146B1F0;
          *(void *)(v30 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v32, (caulk::concurrent::message *)v30);
          if (*((void *)&v34 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v34 + 1));
          }
        }
        HALS_IOProcessor::Process(*(HALS_IOProcessor **)(a6 + 96), *(double *)(v16 + 576), (unsigned __int8 *)(*(void *)(a6 + 56) + a4), &v38, (unsigned __int8 *)(*(void *)(a6 + 16) + v17), &v37, v21, v22);
        uint64_t v9 = (void *)v33[0];
      }
      if ((*((uint64_t (**)(void *, void))v9 + 19))(v33, 0))
      {
        if (*(_DWORD *)(a6 + 108))
        {
          HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v34, (uint64_t *)(a6 + 112));
        }
        else
        {
          long long v31 = *(_OWORD *)(a6 + 384);
          long long v34 = *(_OWORD *)(a6 + 368);
          long long v35 = v31;
          uint64_t v36 = *(void *)(a6 + 400);
        }
        bzero((void *)(*(void *)(a6 + 16) + v17), (DWORD2(v35) * v10));
      }
      return (*(uint64_t (**)(uint64_t, void *, void, uint64_t, uint64_t))(*(void *)v16 + 112))(v16, v33, *(unsigned int *)(a6 + 12), *(void *)(a6 + 56) + v17, v10);
    }
    else
    {
      return 0;
    }
  }
}

void sub_1BAE4DF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_1>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  v17[0] = &unk_1F147A8C8;
  v17[1] = v3;
  uint64_t v4 = *a2;
  uint64_t v5 = *((unsigned int *)v2 + 2);
  if (*(unsigned char *)(*a2 + 416))
  {
    HostedDSP_StreamProcessor::StreamProcessInfo::StreamProcessInfo((uint64_t)v19, 1768845428, (uint64_t)v17, v4, v5);
    return HostedDSP_StreamProcessor::PerformIO_ProcessStream((uint64_t)v19);
  }
  else
  {
    if (!*(_DWORD *)(v4 + 108)
      || ((BOOL v7 = *(void **)(v4 + 112), *(void **)(v4 + 120) != v7) ? (v8 = v7 == 0) : (v8 = 1), v8))
    {
      BOOL v7 = (void *)(v4 + 408);
    }
    uint64_t v9 = *v7;
    if ((*(unsigned int (**)(void))(*(void *)*v7 + 16))(*v7))
    {
      uint64_t v10 = *(unsigned int *)(v9 + 308);
      uint64_t v6 = (*(uint64_t (**)(uint64_t, void *, void, uint64_t, uint64_t))(*(void *)v9 + 104))(v9, v17, *(unsigned int *)(v4 + 12), *(void *)(v4 + 56) + v10, v5);
      unsigned int v11 = *(HALS_IOProcessor **)(v4 + 96);
      if (v11)
      {
        v19[0] = v5;
        unsigned int v18 = *(_DWORD *)(v9 + 4 * *(unsigned __int8 *)(v4 + 8) + 672);
        uint64_t v12 = *(void *)(v4 + 32);
        uint64_t v13 = *(void *)(v4 + 40);
        if (v12) {
          uint64_t v14 = (unsigned __int8 *)(v12 + v10);
        }
        else {
          uint64_t v14 = 0;
        }
        if (v13) {
          BOOL v15 = (unsigned __int8 *)(v13 + v10);
        }
        else {
          BOOL v15 = 0;
        }
        HALS_IOProcessor::Process(v11, *(double *)(v9 + 512), (unsigned __int8 *)(*(void *)(v4 + 56) + v10), v19, (unsigned __int8 *)(*(void *)(v4 + 16) + v10), &v18, v14, v15);
      }
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

void *std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &),unsigned int,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &),unsigned int,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &),unsigned int,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &),unsigned int,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__16__bindIRFijR17HALS_IOEngineInfoEJjRKNS_12placeholders4__phILi1EEEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &),unsigned int,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &),unsigned int,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(unsigned int *)(a1 + 16));
}

__n128 std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &),unsigned int,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &),unsigned int,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F147BED8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &),unsigned int,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &),unsigned int,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F147BED8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &),unsigned int,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &),unsigned int,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::~__func()
{
}

uint64_t caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_0>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  v29[0] = &unk_1F147A8C8;
  v29[1] = v3;
  uint64_t v4 = *((unsigned int *)v2 + 2);
  uint64_t v5 = *a2;
  if (!*(unsigned char *)(*a2 + 416))
  {
    if (*(unsigned char *)(v5 + 364) && HALS_IOPerformer::can_read_from_stream(v29, *a2))
    {
      if (!*(unsigned char *)(v5 + 364)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      if (!*(_DWORD *)(v5 + 108)
        || ((uint64_t v19 = *(void **)(v5 + 112), *(void **)(v5 + 120) != v19) ? (v20 = v19 == 0) : (v20 = 1), v20))
      {
        uint64_t v19 = (void *)(v5 + 408);
      }
      return (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)*v19 + 120))(*v19, *(unsigned int *)(v5 + 12), v4, *(unsigned int *)(v5 + 360));
    }
    else
    {
      if (!HALS_IOPerformer::can_read_from_stream(v29, v5)) {
        return 0;
      }
      if (!*(_DWORD *)(v5 + 108)
        || ((v22 = *(void *)(v5 + 112), *(void *)(v5 + 120) != v22) ? (BOOL v23 = v22 == 0) : (BOOL v23 = 1), v23))
      {
        uint64_t v22 = v5 + 408;
      }
      uint64_t v24 = *(void *)v22;
      int v25 = *(_DWORD *)(v5 + 24);
      uint64_t v26 = *(unsigned int *)(*(void *)v22 + 676);
      uint64_t v30 = *(void *)(v5 + 16);
      LODWORD(v31) = 0;
      HIDWORD(v31) = v25;
      LODWORD(v32) = v26;
      uint64_t v27 = (*(uint64_t (**)(void *))(v29[0] + 80))(v29);
      return (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t *))(*(void *)v24 + 80))(v24, v27, *(unsigned int *)(v5 + 12), v26, &v30);
    }
  }
  HostedDSP_StreamProcessor::StreamProcessInfo::StreamProcessInfo((uint64_t)&v30, 1768845428, (uint64_t)v29, v5, v4);
  if (v30 != 1768845428) {
    return 0;
  }
  uint64_t v6 = *(unsigned int **)(v32 + 112);
  BOOL v7 = *(unsigned int **)(v32 + 120);
  if (v6 == v7) {
    return 0;
  }
  uint64_t v8 = 0;
  do
  {
    uint64_t v9 = *(void *)(*(void *)v6 + 8);
    if (v9)
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 320))(v9);
      unsigned int v11 = v6[25];
      if (v10 && v11 <= 3)
      {
        unsigned int v13 = v6[6];
        uint64_t v14 = *(void *)v6;
        unsigned int v15 = *(_DWORD *)(*(void *)v6 + 676);
        uint64_t v33 = *((void *)v6 + 2);
        unsigned int v34 = 0;
        unsigned int v35 = v13;
        unsigned int v36 = v15;
        if (v11 - 1 > 1
          || ((*(uint64_t (**)(void))(**(void **)(v14 + 8) + 680))(*(void *)(v14 + 8)) & 1) != 0)
        {
          if (*((unsigned char *)v6 + 124))
          {
            uint64_t v16 = (*(uint64_t (**)(void, void, void, void, void))(**(void **)(*(void *)v6 + 8)
                                                                                    + 760))(*(void *)(*(void *)v6 + 8), v6[24], v36, *(void *)v6, v6[30]);
          }
          else
          {
            uint64_t v17 = *(void *)(*(void *)v6 + 8);
            uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 80))(v31);
            uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, void, uint64_t *))(*(void *)v17 + 752))(v17, v18, v6[24], v36, *(void *)v6, &v33);
          }
          uint64_t v8 = v16;
        }
        else if (v33 && v35 > v34)
        {
          bzero((void *)(v33 + v34), v35 - v34);
        }
      }
    }
    v6 += 32;
  }
  while (v6 != v7);
  return v8;
}

void *std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,unsigned int),unsigned int,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,unsigned int),unsigned int,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,unsigned int),unsigned int,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,unsigned int),unsigned int,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__16__bindIRFijR17HALS_IOEngineInfojEJjRKNS_12placeholders4__phILi1EEERjEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,unsigned int),unsigned int,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,unsigned int),unsigned int,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(a1 + 8))(*(unsigned int *)(a1 + 16), a2, *(unsigned int *)(a1 + 20));
}

__n128 std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,unsigned int),unsigned int,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,unsigned int),unsigned int,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F147BE40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,unsigned int),unsigned int,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,unsigned int),unsigned int,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F147BE40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,unsigned int),unsigned int,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,unsigned int),unsigned int,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::~__func()
{
}

uint64_t caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>(uint64_t (****a1)(uint64_t, uint64_t), uint64_t **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)**a2 + 16))(**a2);
  if (result)
  {
    uint64_t v5 = *v3;
    uint64_t v6 = (uint64_t)(*v2 + 1);
    BOOL v7 = **v2;
    return v7(v6, v5);
  }
  return result;
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_4,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_4>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_4,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_4>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl9PerformIOERK14AudioTimeStampjij14IORunningStateRxE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_4,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_4>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  v14[0] = &unk_1F147A8C8;
  v14[1] = v3;
  int v4 = *(_DWORD *)(a1 + 16);
  uint64_t v5 = *(unsigned int *)(a1 + 20);
  uint64_t v6 = (*(uint64_t (**)(unsigned int *, void))(*(void *)a2 + 184))(a2, 0);
  uint64_t v7 = 0;
  if ((*(unsigned int (**)(unsigned int *))(*(void *)a2 + 16))(a2))
  {
    HALS_IOPerformer::update_io_parameters((uint64_t)v14, (HALS_IOPerformer *)a2, v5, v4, 0);
    uint64_t v8 = (*(uint64_t (**)(void *))(v14[0] + 48))(v14);
    double v9 = (*(double (**)(void *))(v14[0] + 16))(v14);
    float v10 = ((__n128 (*)(void *))*(void *)(v14[0] + 40))(v14).n128_f32[0];
    (*(void (**)(unsigned int *, uint64_t, double, double))(*(void *)a2 + 128))(a2, v8, v9, v10);
    uint64_t v11 = (*(uint64_t (**)(void *))(v14[0] + 80))(v14);
    uint64_t v7 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)a2 + 32))(a2, v11);
    if (!v6)
    {
      uint64_t v12 = (*(uint64_t (**)(void *))(v14[0] + 80))(v14);
      (*(void (**)(unsigned int *, uint64_t, void))(*(void *)a2 + 304))(a2, v12, a2[170]);
    }
  }
  return v7;
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_4,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_4>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F147BDC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_4,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_4>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F147BDC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_4,std::allocator<HALS_IOContext_Legacy_Impl::PerformIO(AudioTimeStamp const&,unsigned int,int,unsigned int,IORunningState,long long &)::$_4>,int ()(HALS_IOEngineInfo &)>::~__func()
{
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(AudioTimeStamp &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(AudioTimeStamp &)::$_0>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(AudioTimeStamp &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(AudioTimeStamp &)::$_0>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl25_SetOverloadTimeOnEnginesER14AudioTimeStampE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(AudioTimeStamp &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(AudioTimeStamp &)::$_0>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(_OWORD **)(a1 + 8);
  long long v4 = v3[1];
  *(_OWORD *)&v12.double mSampleTime = *v3;
  *(_OWORD *)&v12.mRateScalar = v4;
  long long v5 = v3[3];
  *(_OWORD *)&v12.mSMPTETime.mSubframes = v3[2];
  *(_OWORD *)&v12.mSMPTETime.mHours = v5;
  uint64_t v6 = *(void *)(a2 + 288);
  if (*(_DWORD *)(v6 + 96)) {
    BOOL v7 = v12.mHostTime == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    *(_OWORD *)(a2 + 824) = 0u;
    *(_OWORD *)(a2 + 840) = 0u;
    *(_OWORD *)(a2 + 792) = 0u;
    *(_OWORD *)(a2 + 808) = 0u;
  }
  else
  {
    v12.mFlags = 2;
    v11.mFlags = 1;
    HALS_IOClock::TranslateTime(v6, &v12, &v11);
    v12.double mSampleTime = v11.mSampleTime;
    v12.mFlags = 2;
    v11.mFlags = 2;
    HALS_IOClock::TranslateTime(*(void *)(a2 + 288), &v12, &v11);
    long long v8 = *(_OWORD *)&v11.mRateScalar;
    *(_OWORD *)(a2 + 792) = *(_OWORD *)&v11.mSampleTime;
    *(_OWORD *)(a2 + 808) = v8;
    long long v9 = *(_OWORD *)&v11.mSMPTETime.mHours;
    *(_OWORD *)(a2 + 824) = *(_OWORD *)&v11.mSMPTETime.mSubframes;
    *(_OWORD *)(a2 + 840) = v9;
  }
  return 0;
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(AudioTimeStamp &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(AudioTimeStamp &)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F147C200;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(AudioTimeStamp &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(AudioTimeStamp &)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F147C200;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(AudioTimeStamp &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines(AudioTimeStamp &)::$_0>,int ()(HALS_IOEngineInfo &)>::~__func()
{
}

uint64_t HALS_IOContext_Legacy_Impl::IOWorkLoop_CalculateWakeTime(uint64_t result, unsigned int a2, AudioTimeStamp *a3)
{
  memset(&v4.mHostTime, 0, 48);
  *(void *)&v4.mFlags = 1;
  uint64_t v3 = *(void *)(result + 1520);
  if (v3)
  {
    v4.double mSampleTime = *(double *)(v3 + 360) + (double)*(uint64_t *)(result + 1312) + (double)a2 + -1.0;
    if (*(void *)(v3 + 8)) {
      return HALS_IOClock::TranslateTime(*(void *)(v3 + 288), &v4, a3);
    }
  }
  return result;
}

uint64_t HALS_IOContext_Legacy_Impl::IOWorkLoop_HandleOverload(uint64_t a1, AudioTimeStamp *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  unsigned int v48 = (_opaque_pthread_t **)(a1 + 312);
  long long v8 = HALS_IOThread::ClearAllSyscallMasks((_opaque_pthread_t **)(a1 + 312));
  if (v8)
  {
    int v9 = (int)v8;
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v56, "com.apple.coreaudio", "AMCP");
    float v10 = (caulk::concurrent::messenger *)v56[1];
    AudioTimeStamp v11 = pthread_self();
    mach_port_t v12 = pthread_mach_thread_np(v11);
    unsigned int v13 = __error();
    uint64_t v14 = strerror(*v13);
    uint64_t v15 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
    *(_DWORD *)(v15 + 16) = 0;
    *(unsigned char *)(v15 + 20) = 16;
    *(_DWORD *)(v15 + 24) = v12;
    *(void *)(v15 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
    *(_DWORD *)(v15 + 40) = 1539;
    *(_DWORD *)(v15 + 44) = v9;
    *(void *)(v15 + 48) = v14;
    *(void *)uint64_t v15 = &unk_1F147B2D8;
    *(void *)(v15 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v10, (caulk::concurrent::message *)v15);
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v57);
    }
  }
  int v16 = *(unsigned __int8 *)(a1 + 1468);
  *(unsigned char *)(a1 + 1468) = 0;
  if (!v16)
  {
    kdebug_trace();
    kdebug_trace();
    kdebug_trace();
  }
  if (!*(unsigned char *)(a1 + 1469)
    || std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(*(int8x8_t **)(a1 + 1600), 0, *(void *)(a1 + 1600) + 8 * (*(void *)(a1 + 1608) >> 6), *(void *)(a1 + 1608) & 0x3F, 1))
  {
    goto LABEL_8;
  }
  int v49 = 0;
  int v50 = &v49;
  uint64_t v51 = 0x2000000000;
  char v52 = 0;
  char v56 = (_opaque_pthread_t **)MEMORY[0x1E4F143A8];
  uint64_t v57 = 0x40000000;
  uint64_t v58 = ___ZNK26HALS_IOContext_Legacy_Impl28CanHandleOverloadWithCatchupER16CAAudioTimeStamp_block_invoke;
  uint64_t v59 = (void **)&unk_1E6235008;
  uint64_t v61 = a1;
  uint64_t v62 = a2;
  uint64_t v60 = &v49;
  uint64_t v44 = (HALB_Mutex *)(*(uint64_t (**)(void))(**(void **)(a1 + 24) + 56))(*(void *)(a1 + 24));
  HALB_CommandGate::ExecuteCommand(v44, (uint64_t)&v56);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v45 = *((unsigned __int8 *)v50 + 24);
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "HALS_IOContext_Legacy_Impl.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4162;
    __int16 v64 = 1024;
    int v65 = v45;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Can handle overload: %d", buf, 0x18u);
  }
  int v46 = *((unsigned __int8 *)v50 + 24);
  _Block_object_dispose(&v49, 8);
  if (v46)
  {
    *(_DWORD *)(a1 + 1384) = 3;
    uint64_t v47 = *(void *)(a1 + 1416);
    if (v47) {
      std::function<void ()(IORunningState)>::operator()(v47, 3);
    }
    kdebug_trace();
    uint64_t v34 = 0;
  }
  else
  {
LABEL_8:
    if (!v16)
    {
      char v56 = v48;
      LODWORD(v57) = HALB_Mutex::Unlock((HALB_Mutex *)(a1 + 328));
      HALS_IOContext::SignalOverloadToClient(*(std::__shared_weak_count ***)(a1 + 24));
      HALB_IOThread::Unlocker::~Unlocker((HALB_IOThread::Unlocker *)&v56);
    }
    uint64_t v17 = (void (*)(uint64_t))*(unsigned int *)(*(void *)(a1 + 24) + 16);
    char v56 = (_opaque_pthread_t **)&unk_1F147BED8;
    uint64_t v57 = (uint64_t)HALS_IOContext_Legacy_Impl::ResetTimeForOverload_Helper;
    uint64_t v58 = v17;
    uint64_t v59 = (void **)&v56;
    uint64_t v53 = &off_1F147D4F0;
    *(void *)std::string buf = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
    *(void *)&uint8_t buf[8] = &v56;
    uint64_t v54 = &off_1F147D460;
    unint64_t v55 = buf;
    int v49 = caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
    int v50 = (uint64_t (**)(uint64_t (****)(uint64_t, uint64_t), uint64_t **))&v55;
    VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(*(void *)(a1 + 1528), *(void *)(a1 + 1536), (uint64_t (**)(void, void *))&v49, (uint64_t)&v54, (uint64_t)&v53);
    std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](&v56);
    HALS_IOContext_Legacy_Impl::UpdateTime((HALS_IOContext_Legacy_Impl *)a1);
    HALS_IOContext_Legacy_Impl::AnchorTime((HALS_IOContext_Legacy_Impl *)a1);
    *(void *)(a1 + 1312) = 0;
    HALS_IOContext_Legacy_Impl::AnchorIO((HALS_IOContext_Legacy_Impl *)a1, a5);
    int v18 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 24) + 64) + 40);
    uint64_t v19 = *(void *)(*(void *)(a1 + 1520) + 288);
    uint64_t v20 = v19 + 200;
    BOOL v21 = *(int8x16_t **)(a1 + 1096);
    float64x2_t v22 = (float64x2_t)vdupq_n_s64(0x4176E36000000000uLL);
    int8x16_t v23 = (int8x16_t)vdivq_f64(vmulq_f64(*(float64x2_t *)(v19 + 200 + 40 * *(unsigned int *)(v19 + 192)), v22), v22);
    int32x2_t v24 = vdup_n_s32(*(unsigned char *)(*(void *)(*(void *)(a1 + 24) + 64) + 40) == 0);
    v25.i64[0] = v24.u32[0];
    v25.i64[1] = v24.u32[1];
    *BOOL v21 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v25, 0x3FuLL)), v23, vrev64q_s8(v23));
    unint64_t v26 = *(void *)(v19 + 200 + 40 * *(unsigned int *)(v19 + 192) + 16);
    if (v18)
    {
      unint64_t v26 = bswap64(v26);
      unint64_t v27 = bswap64(*(void *)(v20 + 40 * *(unsigned int *)(v19 + 192) + 24));
      unint64_t v28 = bswap64(*(void *)(v20 + 40 * *(unsigned int *)(v19 + 192) + 32));
      int v29 = 50331648;
    }
    else
    {
      unint64_t v27 = *(void *)(v20 + 40 * *(unsigned int *)(v19 + 192) + 24);
      unint64_t v28 = *(void *)(v20 + 40 * *(unsigned int *)(v19 + 192) + 32);
      int v29 = 3;
    }
    v21[1].i64[0] = v26;
    v21[2].i64[0] = v27;
    v21[2].i64[1] = v28;
    v21[5].i32[2] = v29;
    unsigned int v30 = bswap32(a5);
    if (v18) {
      unsigned int v31 = v30;
    }
    else {
      unsigned int v31 = a5;
    }
    v21[1].i32[2] = v31;
    OSMemoryBarrier();
    uint64_t v32 = *(void *)(a1 + 1520);
    if (v32)
    {
      if (*(void *)(v32 + 8))
      {
        uint64_t v33 = *(HALS_IOClock **)(v32 + 288);
        if (v33) {
          HALS_IOClock::GetCurrentTime(v33, a2);
        }
      }
    }
    uint64_t v34 = 1;
  }
  if (!HALS_IOContext::GetAudioCaptureMode(*(HALS_IOContext **)(a1 + 24)))
  {
    unsigned int v36 = HALS_IOThread::EnableRTSafeSyscallMasks(v48);
    int v37 = (int)v36;
    if (v36)
    {
      AMCP::Log::Scope_Registry::get(v36);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v56, "com.apple.coreaudio", "AMCP");
      unsigned int v38 = (caulk::concurrent::messenger *)v56[1];
      uint64_t v39 = pthread_self();
      mach_port_t v40 = pthread_mach_thread_np(v39);
      unint64_t v41 = __error();
      uint64_t v42 = strerror(*v41);
      uint64_t v43 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
      *(_DWORD *)(v43 + 16) = 0;
      *(unsigned char *)(v43 + 20) = 16;
      *(_DWORD *)(v43 + 24) = v40;
      *(void *)(v43 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
      *(_DWORD *)(v43 + 40) = 1600;
      *(_DWORD *)(v43 + 44) = v37;
      *(void *)(v43 + 48) = v42;
      *(void *)uint64_t v43 = &unk_1F147B330;
      *(void *)(v43 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v38, (caulk::concurrent::message *)v43);
      if (v57) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v57);
      }
    }
  }
  return v34;
}

void sub_1BAE4F288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  HALB_IOThread::Unlocker::~Unlocker((HALB_IOThread::Unlocker *)va);
  _Unwind_Resume(a1);
}

uint64_t caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContext_Legacy_Impl::IOWorkLoop_CalculateWakeTimeAndCheckOverload(CAAudioTimeStamp &,CAAudioTimeStamp const&,HALS_IOContext_Legacy_Impl::PerformIOReturn,unsigned int,unsigned int,long long,long long,CAAudioTimeStamp &,CAAudioTimeStamp &)::$_0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!*(_DWORD *)(a6 + 108)
    || ((uint64_t v6 = *(uint64_t **)(a6 + 112), *(uint64_t **)(a6 + 120) != v6) ? (v7 = v6 == 0) : (v7 = 1), v7))
  {
    uint64_t v6 = (uint64_t *)(a6 + 408);
  }
  uint64_t v8 = *v6;
  uint64_t v9 = *(void *)(*v6 + 8);
  if (v9 && *(unsigned char *)(v8 + 751)) {
    (*(void (**)(uint64_t, void, uint64_t, void, void))(*(void *)v9 + 824))(v9, *(unsigned int *)(*(void *)(**(void **)a1 + 24) + 16), a5, *(unsigned int *)(*(void *)a1 + 8), *(void *)(*(void *)a1 + 16));
  }
  return 0;
}

uint64_t HALS_IOContext_Legacy_Impl::UpdateTime(HALS_IOContext_Legacy_Impl *this)
{
  uint64_t v9[4] = *MEMORY[0x1E4F143B8];
  unint64_t v1 = *(unsigned int *)(*((void *)this + 3) + 16) | ((unint64_t)*((unsigned __int8 *)this + 1300) << 32);
  v9[0] = &unk_1F147C548;
  v9[1] = HALS_IOContext_Legacy_Impl::UpdateTime_Helper;
  v9[2] = v1;
  void v9[3] = v9;
  AudioTimeStamp v4 = &unk_1F147D530;
  v6[0] = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
  v6[1] = v9;
  long long v5 = &off_1F147D460;
  BOOL v7 = v6;
  v8[0] = (uint64_t (*)(void, void *))caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
  v8[1] = (uint64_t (*)(void, void *))&v7;
  uint64_t v2 = VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(*((void *)this + 191), *((void *)this + 192), v8, (uint64_t)&v5, (uint64_t)&v4);
  std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v9);
  return v2;
}

void sub_1BAE4F4AC(_Unwind_Exception *a1)
{
  std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100]((void *)(v1 - 56));
  _Unwind_Resume(a1);
}

void HALS_IOContext_Legacy_Impl::AnchorTime(HALS_IOContext_Legacy_Impl *this)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 190);
  if (v1 && *(void *)(v1 + 8))
  {
    if (*((_DWORD *)this + 346) == 1)
    {
      v34.mFlags = 2;
      v34.UInt64 mHostTime = *((void *)this + 178);
      v31.mFlags = 7;
      HALS_IOClock::TranslateTime(*(void *)(v1 + 288), &v34, &v31);
      AudioTimeStamp v34 = v31;
      double v3 = (double)(*(_DWORD *)(v1 + 324) + *(_DWORD *)(v1 + 316) + *(_DWORD *)(v1 + 340));
      v34.mFlags = 1;
      v34.double mSampleTime = v31.mSampleTime + v3;
      HALS_IOClock::TranslateTime(*(void *)(v1 + 288), &v34, &v31);
      unsigned int v30 = 0;
      int v37 = (uint64_t (*)(uint64_t))&unk_1F147C5E0;
      unsigned int v38 = (AudioTimeStamp *)&v30;
      uint64_t v39 = &v37;
      *(void *)&v35.double mSampleTime = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
      v35.UInt64 mHostTime = (UInt64)&v37;
      v27[0] = &off_1F147D460;
      unint64_t v28 = &v35;
      *(void *)&buf.double mSampleTime = caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
      buf.UInt64 mHostTime = (UInt64)&v28;
      VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine>(*((void *)this + 191), *((void *)this + 192), &buf, (uint64_t)v27);
      std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](&v37);
      buf.mFlags = 7;
      HALS_IOClock::GetCurrentTime(*(HALS_IOClock **)(v1 + 288), &buf);
      double mSampleTime = v31.mSampleTime;
      uint64_t v5 = *(void *)(v1 + 288);
      double v6 = buf.mSampleTime - (double)(unint64_t)v30 / *(double *)(v5 + 112);
      if (v31.mSampleTime < v6)
      {
        v35.UInt64 mHostTime = v31.mHostTime;
        *(_OWORD *)&v35.mRateScalar = *(_OWORD *)&v31.mRateScalar;
        *(_OWORD *)&v35.mSMPTETime.mSubframes = *(_OWORD *)&v31.mSMPTETime.mSubframes;
        *(_OWORD *)&v35.mSMPTETime.mHours = *(_OWORD *)&v31.mSMPTETime.mHours;
        v35.mFlags = 1;
        v35.double mSampleTime = v6 + v3;
        v31.mFlags = 7;
        BOOL v7 = (AMCP::Log::Scope_Registry *)HALS_IOClock::TranslateTime(v5, &v35, &v31);
        AMCP::Log::Scope_Registry::get(v7);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v28, "com.apple.coreaudio", "AMCP");
        UInt64 mHostTime = (caulk::concurrent::messenger *)v28->mHostTime;
        uint64_t v9 = pthread_self();
        mach_port_t v10 = pthread_mach_thread_np(v9);
        double mSampleTime = v31.mSampleTime;
        uint64_t v11 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
        *(_DWORD *)(v11 + 16) = 0;
        *(unsigned char *)(v11 + 20) = 0;
        *(_DWORD *)(v11 + 24) = v10;
        *(void *)(v11 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
        *(_DWORD *)(v11 + 40) = 3898;
        *(double *)(v11 + 48) = mSampleTime;
        *(void *)uint64_t v11 = &unk_1F147C660;
        *(void *)(v11 + 8) = 0;
        caulk::concurrent::messenger::enqueue(mHostTime, (caulk::concurrent::message *)v11);
        if (v29) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        }
      }
      double v12 = *((double *)this + 146);
      if (mSampleTime < v12) {
        double v12 = mSampleTime;
      }
      *((double *)this + 146) = v12;
      *(double *)(*((void *)this + 137) + 160) = v12;
      *((_DWORD *)this + 346) = 2;
      uint64_t v13 = *((void *)this + 177);
      if (v13) {
        std::function<void ()(IORunningState)>::operator()(v13, 2);
      }
      kdebug_trace();
      uint64_t v14 = operator new(0x28uLL);
      *uint64_t v14 = &unk_1F147C6B8;
      v14[1] = HALS_IOContext_Legacy_Impl::AnchorTime_Helper;
      void v14[2] = this;
      void v14[3] = &v31;
      char v14[4] = v1;
      v35.mWordClockTime = (UInt64)v14;
      unint64_t v26 = &unk_1F147D4B0;
      v27[0] = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
      v27[1] = &v35;
      unint64_t v32 = (unint64_t)&off_1F147D460;
      double v33 = COERCE_DOUBLE(v27);
      unint64_t v28 = (AudioTimeStamp *)caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
      int v29 = (std::__shared_weak_count *)&v33;
      VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(*((void *)this + 191), *((void *)this + 192), (uint64_t (**)(void, void *))&v28, (uint64_t)&v32, (uint64_t)&v26);
      std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](&v35);
    }
    else
    {
      v34.mFlags = 7;
      HALS_IOClock::GetCurrentTime(*(HALS_IOClock **)(v1 + 288), &v34);
      unint64_t v32 = 0;
      double v33 = 0.0;
      double Raw0Time = HALS_IOClock::GetRaw0Time(*(HALS_IOClock **)(v1 + 288), &v33, &v32);
      LODWORD(Raw0Time) = *(_DWORD *)(v1 + 316);
      double v16 = (double)*(unint64_t *)&Raw0Time;
      double v17 = v34.mSampleTime;
      if (v34.mSampleTime - v33 < v16)
      {
        double v17 = v33 + v16;
        v34.double mSampleTime = v33 + v16;
      }
      int v18 = 0;
      uint64_t v19 = MEMORY[0x1E4F14500];
      do
      {
        double v21 = HALS_IOContext_Legacy_Impl::CalculateEarliestAnchorSampleTimeBasedOnCommittedPosition(this);
        double v22 = v21;
        if (v17 < v21)
        {
          v34.double mSampleTime = v21;
          double v17 = v21;
        }
        if ((AMCP::Feature_Flags::use_mcp_coloring_mixer(0, v20) & 1) == 0)
        {
          double v17 = (*(double (**)(void, void, void, double))(**(void **)(v1 + 8) + 624))(*(void *)(v1 + 8), (*(_DWORD *)(v1 + 340) + *(_DWORD *)(v1 + 324)), (*(_DWORD *)(v1 + 336) + *(_DWORD *)(v1 + 320)), v17);
          v34.double mSampleTime = v17;
        }
        v34.mFlags = 1;
        v31.mFlags = 7;
        HALS_IOClock::TranslateTime(*(void *)(v1 + 288), &v34, &v31);
        int8x16_t v23 = operator new(0x28uLL);
        void *v23 = &unk_1F147C6B8;
        v23[1] = HALS_IOContext_Legacy_Impl::AnchorTime_Helper;
        v23[2] = this;
        void v23[3] = &v31;
        v23[4] = v1;
        v35.mWordClockTime = (UInt64)v23;
        unsigned int v30 = &off_1F147D4F0;
        int v37 = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
        unsigned int v38 = &v35;
        v27[0] = &off_1F147D460;
        unint64_t v28 = (AudioTimeStamp *)&v37;
        *(void *)&buf.double mSampleTime = caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
        buf.UInt64 mHostTime = (UInt64)&v28;
        VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(*((void *)this + 191), *((void *)this + 192), &buf, (uint64_t)v27, (uint64_t)&v30);
        std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](&v35);
        for (char i = (unsigned __int8 *)*((void *)this + 249); i; char i = *(unsigned __int8 **)i)
        {
          if (i[40])
          {
            HALS_MultiTap::writer_anchor_time(*((HALS_MultiTap **)i + 3), *(_DWORD *)(*((void *)this + 3) + 16), &v31);
            atomic_store(1u, i + 41);
          }
        }
        double v25 = HALS_IOContext_Legacy_Impl::CalculateEarliestAnchorSampleTimeBasedOnCommittedPosition(this);
        if (v25 == v22) {
          break;
        }
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.mSampleTime) = 136316418;
          *(void *)((char *)&buf.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp";
          WORD2(buf.mHostTime) = 1024;
          *(_DWORD *)((char *)&buf.mHostTime + 6) = 3991;
          WORD1(buf.mRateScalar) = 2048;
          *(double *)((char *)&buf.mRateScalar + 4) = v25;
          WORD2(buf.mWordClockTime) = 2048;
          *(double *)((char *)&buf.mWordClockTime + 6) = v22;
          HIWORD(buf.mSMPTETime.mCounter) = 2048;
          *(double *)&buf.mSMPTETime.mType = v25 - v22;
          buf.mSMPTETime.mHours = 1024;
          *(_DWORD *)&buf.mSMPTETime.mMinutes = v18;
          _os_log_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Retrying anchor for new context earliestAnchorSampleTimeRetry = %f, earliestAnchorSampleTime= %f, diff = %f retryCFIndex Count = %d", (uint8_t *)&buf, 0x36u);
        }
        ++v18;
      }
      while (v18 != 5);
    }
  }
}

void sub_1BAE4FB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
}

void *HALS_IOContext_Legacy_Impl::AnchorIO(HALS_IOContext_Legacy_Impl *this, int a2)
{
  uint8_t v11[4] = *MEMORY[0x1E4F143B8];
  AudioTimeStamp v4 = operator new(0x20uLL);
  *AudioTimeStamp v4 = &unk_1F147B560;
  v4[1] = HALS_IOContext_Legacy_Impl::IOWorkLoop_Engine_AnchorIO;
  v4[2] = this;
  *((_DWORD *)v4 + 6) = a2;
  void v11[3] = v4;
  double v6 = &off_1F147D4F0;
  v8[0] = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
  v8[1] = v11;
  BOOL v7 = &off_1F147D460;
  uint64_t v9 = v8;
  v10[0] = (uint64_t (*)(void, void *))caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterClocklessReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
  v10[1] = (uint64_t (*)(void, void *))&v9;
  VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(*((void *)this + 191), *((void *)this + 192), v10, (uint64_t)&v7, (uint64_t)&v6);
  return std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v11);
}

void sub_1BAE4FCD4(_Unwind_Exception *a1)
{
  std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100]((void *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoop_HandleOverload(CAAudioTimeStamp &,CAAudioTimeStamp const&,CAAudioTimeStamp const&,CAAudioTimeStamp const&,unsigned int,double,HALS_IOContext_Legacy_Impl::PerformIOReturn)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    uint64_t v8 = *(void *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)uint64_t v11 = 2080;
    *(void *)&void v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 2080;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Failed to set the RT safe syscall masks: %d - %s", (uint8_t *)&v10, 0x28u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAE4FE34(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoop_HandleOverload(CAAudioTimeStamp &,CAAudioTimeStamp const&,CAAudioTimeStamp const&,CAAudioTimeStamp const&,unsigned int,double,HALS_IOContext_Legacy_Impl::PerformIOReturn)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t HALS_IOContext_Legacy_Impl::IOWorkLoop_Engine_AnchorIO(HALS_IOContext_Legacy_Impl *this, HALS_IOContext_Legacy_Impl *a2, HALS_IOEngineInfo *a3)
{
  if (*((void *)a2 + 1))
  {
    v4[0] = &unk_1F147A8C8;
    v4[1] = this;
    HALS_IOPerformer::update_io_parameters((uint64_t)v4, a2, (uint64_t)a3, 0, 1);
  }
  return 0;
}

void *std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,unsigned int),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,unsigned int),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,unsigned int),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,unsigned int),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__16__bindIRFiP26HALS_IOContext_Legacy_ImplR17HALS_IOEngineInfojEJS2_RKNS_12placeholders4__phILi1EEERjEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,unsigned int),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,unsigned int),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(a1 + 8))(*(void *)(a1 + 16), a2, *(unsigned int *)(a1 + 24));
}

__n128 std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,unsigned int),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,unsigned int),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F147B560;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,unsigned int),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,unsigned int),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F147B560;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,unsigned int),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl *,HALS_IOEngineInfo &,unsigned int),HALS_IOContext_Legacy_Impl *,std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo &)>::~__func()
{
}

Float64 HALS_IOContext_Legacy_Impl::CalculateEarliestAnchorSampleTimeBasedOnCommittedPosition(HALS_IOContext_Legacy_Impl *this)
{
  v6[1] = this;
  UInt64 v7 = 0;
  v6[0] = &v7;
  v10[0] = caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContext_Legacy_Impl::CalculateEarliestAnchorSampleTimeBasedOnCommittedPosition(void)::$_0>;
  v10[1] = v6;
  v8[1] = (char *)this + 1496;
  uint64_t v9 = v10;
  v8[0] = &unk_1F14809E0;
  *(void *)&v4.double mSampleTime = _ZN5caulk12function_refIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEE15functor_invokerIZN25HALS_IOContextDescription62ApplyToActiveOutput_ButSkipClocklessReferenceStreamOnlyEnginesES6_EUljRT_jjRT0_E_EEiRKNS_7details15erased_callableIS5_EEjS2_jjS4_;
  v4.UInt64 mHostTime = (UInt64)&v9;
  *(void *)&v5.double mSampleTime = caulk::function_ref<int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::functor_invoker<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription&,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}>;
  v5.UInt64 mHostTime = (UInt64)&v4;
  VisitableVector<HALS_IOStackDescription>::do_apply<std::vector<HALS_IOStackDescription>,VisitableVector<HALS_IOStackDescription>::ItemWithIndex,HALS_IOContextDescription::ActiveOutputsOnly>(*((void *)this + 197), *((void *)this + 198), &v5, (uint64_t)v8);
  if (!v7) {
    return 0.0;
  }
  v5.double mSampleTime = 0.0;
  memset(&v5.mRateScalar, 0, 48);
  memset(&v4, 0, sizeof(v4));
  v5.mFlags = 2;
  v5.UInt64 mHostTime = v7;
  v4.mFlags = 1;
  Float64 result = 0.0;
  uint64_t v3 = *((void *)this + 190);
  if (v3)
  {
    if (*(void *)(v3 + 8))
    {
      HALS_IOClock::TranslateTime(*(void *)(v3 + 288), &v5, &v4);
      return v4.mSampleTime;
    }
  }
  return result;
}

uint64_t HALS_IOContext_Legacy_Impl::AnchorTime_Helper(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 && (uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8)) != 0 && *(_DWORD *)(v4 + 16) != *(_DWORD *)(v3 + 16))
  {
    mach_port_t v10 = *(_OWORD **)(a1 + 8);
    long long v11 = v10[1];
    *(_OWORD *)&v16.double mSampleTime = *v10;
    *(_OWORD *)&v16.mRateScalar = v11;
    long long v12 = v10[3];
    *(_OWORD *)&v16.mSMPTETime.mSubframes = v10[2];
    *(_OWORD *)&v16.mSMPTETime.mHours = v12;
    v16.mFlags = 2;
    int v13 = (_OWORD *)(a2 + 360);
    *(_DWORD *)(a2 + 416) = 7;
    if (*(unsigned char *)(a2 + 748) && ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 328))(a2) & 1) == 0)
    {
      long long v14 = *(_OWORD *)&v16.mRateScalar;
      *int v13 = *(_OWORD *)&v16.mSampleTime;
      *(_OWORD *)(a2 + 376) = v14;
      long long v15 = *(_OWORD *)&v16.mSMPTETime.mHours;
      *(_OWORD *)(a2 + 392) = *(_OWORD *)&v16.mSMPTETime.mSubframes;
      *(_OWORD *)(a2 + 408) = v15;
    }
    else
    {
      HALS_IOClock::TranslateTime(*(void *)(a2 + 288), &v16, (AudioTimeStamp *)(a2 + 360));
    }
  }
  else
  {
    AudioTimeStamp v5 = *(long long **)(a1 + 8);
    long long v6 = *v5;
    long long v7 = v5[1];
    long long v8 = v5[3];
    *(_OWORD *)(a2 + 392) = v5[2];
    *(_OWORD *)(a2 + 408) = v8;
    *(_OWORD *)(a2 + 360) = v6;
    *(_OWORD *)(a2 + 376) = v7;
  }
  return 0;
}

void *std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__16__bindIRFiRN26HALS_IOContext_Legacy_Impl25AnchorTime_Helper_ContextER17HALS_IOEngineInfoEJS3_RKNS_12placeholders4__phILi1EEEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a1 + 16);
}

__n128 std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F147C6B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F147C6B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void std::__function::__func<std::__bind<int (&)(HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<int (&)(HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,HALS_IOEngineInfo &),HALS_IOContext_Legacy_Impl::AnchorTime_Helper_Context &,std::placeholders::__ph<1> const&>>,int ()(HALS_IOEngineInfo &)>::~__func()
{
}

uint64_t caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContext_Legacy_Impl::CalculateEarliestAnchorSampleTimeBasedOnCommittedPosition(void)::$_0>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!*(_DWORD *)(a6 + 108)
    || ((long long v6 = *(uint64_t **)(a6 + 112), *(uint64_t **)(a6 + 120) != v6) ? (v7 = v6 == 0) : (v7 = 1), v7))
  {
    long long v6 = (uint64_t *)(a6 + 408);
  }
  uint64_t v8 = *v6;
  uint64_t v9 = *(void *)(*v6 + 8);
  if (v9)
  {
    uint64_t v10 = *a1;
    double v11 = (*(double (**)(uint64_t, void, void))(*(void *)v9 + 848))(v9, *(unsigned int *)(*(void *)(*(void *)(*a1 + 8) + 24) + 16), *(unsigned int *)(a6 + 12));
    if (AMCP::Feature_Flags::use_mcp_coloring_mixer(0, v12))
    {
      (*(void (**)(AudioTimeStamp *__return_ptr))(**(void **)(v8 + 8) + 880))(&v22);
      v25[0] = 0;
      v25[1] = 0;
      HALS_System::GetInstance(&v26, 0, v25);
      uint64_t v14 = *(void *)(v26 + 1336);
      long long v15 = *(std::__shared_weak_count **)(v26 + 1344);
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      UInt64 mHostTime = (std::__shared_weak_count *)v22.mHostTime;
      long long v24 = *(_OWORD *)&v22.mSampleTime;
      if (v22.mHostTime) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v22.mHostTime + 8), 1uLL, memory_order_relaxed);
      }
      AMCP::Graph::Synchronized_Mixer_Manager::get_anchor_time((uint64_t)&v23, v14, &v24);
      if (mHostTime) {
        std::__shared_weak_count::__release_shared[abi:ne180100](mHostTime);
      }
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v23);
      double v11 = sample_time;
      if (*(void *)&v23.mSMPTETime.mSubframes) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v23.mSMPTETime.mSubframes);
      }
      if (v22.mHostTime) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v22.mHostTime);
      }
    }
    if (v11 > 0.0)
    {
      LODWORD(sample_time) = *(_DWORD *)(v8 + 312);
      *(double *)&unint64_t v17 = (double)*(int *)(v8 + 320);
      double v18 = v11 - (double)*(unint64_t *)&sample_time - *(double *)&v17;
      LODWORD(v17) = *(_DWORD *)(v8 + 336);
      double v19 = v18
          - (double)v17
          - roundf(*(float *)(*(void *)(v10 + 8) + 1328) * (float)*(unsigned int *)(*(void *)(v10 + 8) + 1320));
      *(void *)&v23.mFlags = 0;
      if (v19 < 0.0) {
        double v19 = 0.0;
      }
      memset(&v23.mHostTime, 0, 48);
      memset(&v22, 0, sizeof(v22));
      v23.double mSampleTime = v19;
      v23.mFlags = 1;
      v22.mFlags = 2;
      HALS_IOClock::TranslateTime(*(void *)(v8 + 288), &v23, &v22);
      UInt64 v20 = **(void **)v10;
      if (v20 <= v22.mHostTime) {
        UInt64 v20 = v22.mHostTime;
      }
      **(void **)uint64_t v10 = v20;
    }
  }
  return 0;
}

void sub_1BAE50504(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_1,std::tuple<unsigned int,char const*,int,double>>::perform(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    LODWORD(v9) = 67109890;
    HIDWORD(v9) = v4;
    *(_WORD *)uint64_t v10 = 2080;
    *(void *)&void v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 2048;
    uint64_t v14 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Pinning anchor time to Sample: %0.f", (uint8_t *)&v9, 0x22u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAE506BC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_1,std::tuple<unsigned int,char const*,int,double>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_0>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_0>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl24AnchorTimeForCatchupModeEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_0>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 424) = 1;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    uint64_t v5 = (HALS_IODevice *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 320))(v3);
    unint64_t v6 = (unint64_t)(*(double *)(*(void *)(a2 + 288) + 112) * (double)GetAvailableCatchupSamplesForDevice(v5));
    uint64_t v7 = *(unint64_t **)(a1 + 8);
    if (*v7 > v6) {
      unint64_t v6 = *v7;
    }
    *uint64_t v7 = v6;
  }
  return 0;
}

uint64_t GetAvailableCatchupSamplesForDevice(HALS_IODevice *a1)
{
  uint64_t v1 = (uint64_t)a1;
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v2 = (*(uint64_t (**)(HALS_IODevice *))(*(void *)a1 + 408))(a1);
    uint64_t v3 = *(void *)v1;
    if (v2)
    {
      uint64_t v1 = (*(unsigned int (**)(uint64_t))(v3 + 416))(v1);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 136315650;
        uint64_t v8 = "HALS_IOContext_Legacy_Impl.cpp";
        __int16 v9 = 1024;
        int v10 = 5358;
        __int16 v11 = 2048;
        uint64_t v12 = v1;
        int v4 = MEMORY[0x1E4F14500];
        uint64_t v5 = "%25s:%-5d  \tUsing past data: %lld";
LABEL_7:
        _os_log_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v7, 0x1Cu);
      }
    }
    else
    {
      uint64_t v1 = (uint64_t)(float)((float)(*(unsigned int (**)(uint64_t))(v3 + 296))(v1) * 0.5);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 136315650;
        uint64_t v8 = "HALS_IOContext_Legacy_Impl.cpp";
        __int16 v9 = 1024;
        int v10 = 5366;
        __int16 v11 = 2048;
        uint64_t v12 = v1;
        int v4 = MEMORY[0x1E4F14500];
        uint64_t v5 = "%25s:%-5d  Using ring buffer: %lld";
        goto LABEL_7;
      }
    }
  }
  return v1;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F147C5E0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F147C5E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::AnchorTimeForCatchupMode(void)::$_0>,int ()(HALS_IOEngineInfo &)>::~__func()
{
}

uint64_t caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>(uint64_t (****a1)(uint64_t, uint64_t), uint64_t **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)**a2 + 16))(**a2);
  if (result)
  {
    uint64_t v5 = *v3;
    uint64_t v6 = (uint64_t)(*v2 + 1);
    int v7 = **v2;
    return v7(v6, v5);
  }
  return result;
}

void *std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,BOOL),unsigned int,std::placeholders::__ph<1> const&,BOOL volatile&>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,BOOL),unsigned int,std::placeholders::__ph<1> const&,BOOL volatile&>>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,BOOL),unsigned int,std::placeholders::__ph<1> const&,BOOL volatile&>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,BOOL),unsigned int,std::placeholders::__ph<1> const&,BOOL volatile&>>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__16__bindIRFijR17HALS_IOEngineInfobEJjRKNS_12placeholders4__phILi1EEERVbEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,BOOL),unsigned int,std::placeholders::__ph<1> const&,BOOL volatile&>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,BOOL),unsigned int,std::placeholders::__ph<1> const&,BOOL volatile&>>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, void))(a1 + 8))(*(unsigned int *)(a1 + 16), a2, *(unsigned __int8 *)(a1 + 20));
}

__n128 std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,BOOL),unsigned int,std::placeholders::__ph<1> const&,BOOL volatile&>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,BOOL),unsigned int,std::placeholders::__ph<1> const&,BOOL volatile&>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F147C548;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,BOOL),unsigned int,std::placeholders::__ph<1> const&,BOOL volatile&>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,BOOL),unsigned int,std::placeholders::__ph<1> const&,BOOL volatile&>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F147C548;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,BOOL),unsigned int,std::placeholders::__ph<1> const&,BOOL volatile&>,std::allocator<std::__bind<int (&)(unsigned int,HALS_IOEngineInfo &,BOOL),unsigned int,std::placeholders::__ph<1> const&,BOOL volatile&>>,int ()(HALS_IOEngineInfo &)>::~__func()
{
}

uint64_t HALS_IOContext_Legacy_Impl::UpdateTime_Helper(HALS_IOContext_Legacy_Impl *this, uint64_t a2, HALS_IOEngineInfo *a3)
{
  uint64_t result = *(void *)(a2 + 8);
  if (result)
  {
    long long v31 = 0uLL;
    Float64 v32 = 0.0;
    (*(void (**)(uint64_t, HALS_IOContext_Legacy_Impl *, long long *, char *, Float64 *))(*(void *)result
                                                                                                 + 616))(result, this, &v31, (char *)&v31 + 8, &v32);
    (*(void (**)(AudioTimeStamp *__return_ptr))(**(void **)(a2 + 8) + 880))(&v34);
    Float64 mSampleTime = v34.mSampleTime;
    if (v34.mHostTime) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v34.mHostTime);
    }
    if (mSampleTime != 0.0)
    {
      (*(void (**)(AudioTimeStamp *__return_ptr))(**(void **)(a2 + 8) + 880))(&v33);
      Float64 v7 = v33.mSampleTime;
      uint64_t v8 = *(void *)(*(void *)&v33.mSampleTime + 56);
      int v9 = *(_DWORD *)(v8 + 96);
      *(_OWORD *)&v34.Float64 mSampleTime = v31;
      v34.mRateScalar = v32;
      HALS_IOClock::Update(v8, (uint64_t)&v34);
      uint64_t v10 = *(void *)(*(void *)&v7 + 56);
      if (v9) {
        BOOL v11 = 1;
      }
      else {
        BOOL v11 = *(_DWORD *)(v10 + 96) == 0;
      }
      if (!v11)
      {
        uint64_t v12 = *(void *)(v10 + 40 * *(unsigned int *)(v10 + 192) + 224);
        if (!*(unsigned char *)(*(void *)&v7 + 16)) {
          *(unsigned char *)(*(void *)&v7 + 16) = 1;
        }
        *(void *)(*(void *)&v7 + 8) = v12;
      }
      if (v33.mHostTime) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v33.mHostTime);
      }
    }
    uint64_t v13 = *(void *)(a2 + 288);
    long long v29 = v31;
    Float64 v30 = v32;
    uint64_t v14 = HALS_IOClock::Update(v13, (uint64_t)&v29);
    if (v14)
    {
      unsigned int v15 = v14;
      (*(void (**)(void, HALS_IOContext_Legacy_Impl *, uint64_t))(**(void **)(a2 + 8) + 632))(*(void *)(a2 + 8), this, v14);
      if ((v15 & 6) != 0)
      {
        uint64_t v16 = HALS_ObjectMap::CopyObjectByObjectID(this);
        double v18 = (HALS_ObjectMap *)v16;
        if (v16)
        {
          double v19 = **(caulk::concurrent::messenger ***)(v16 + 200);
          uint64_t v20 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 32, 8);
          *(_DWORD *)(v20 + 16) = 0;
          *(void *)(v20 + 24) = v15 | ((void)this << 32);
          *(void *)uint64_t v20 = &unk_1F1477EB8;
          *(void *)(v20 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v19, (caulk::concurrent::message *)v20);
        }
        HALS_ObjectMap::ReleaseObject(v18, v17);
      }
      return 1;
    }
    else
    {
      double v21 = (_OWORD *)(a2 + 792);
      long long v22 = *(_OWORD *)(a2 + 808);
      *(_OWORD *)&v34.Float64 mSampleTime = *(_OWORD *)(a2 + 792);
      *(_OWORD *)&v34.mRateScalar = v22;
      long long v23 = *(_OWORD *)(a2 + 840);
      *(_OWORD *)&v34.mSMPTETime.mSubframes = *(_OWORD *)(a2 + 824);
      *(_OWORD *)&v34.mSMPTETime.mHours = v23;
      uint64_t v24 = *(void *)(a2 + 288);
      if (*(_DWORD *)(v24 + 96) && (UInt64 mHostTime = v34.mHostTime) != 0)
      {
        double v26 = *(double *)(v24 + 112) - *(double *)(v24 + 40 * *(unsigned int *)(v24 + 192) + 200);
        if (v26 > 0.0)
        {
          v34.UInt64 mHostTime = (unint64_t)(v26 + (double)v34.mHostTime);
          v33.UInt64 mHostTime = (unint64_t)(v26 + (double)mHostTime);
          v34.mFlags = 2;
          v33.mFlags = 1;
          HALS_IOClock::TranslateTime(v24, &v34, &v33);
          long long v27 = *(_OWORD *)&v33.mRateScalar;
          *double v21 = *(_OWORD *)&v33.mSampleTime;
          *(_OWORD *)(a2 + 808) = v27;
          long long v28 = *(_OWORD *)&v33.mSMPTETime.mHours;
          *(_OWORD *)(a2 + 824) = *(_OWORD *)&v33.mSMPTETime.mSubframes;
          *(_OWORD *)(a2 + 840) = v28;
        }
      }
      else
      {
        *(void *)(a2 + 840) = 0;
        *(_OWORD *)(a2 + 808) = 0u;
        *(_OWORD *)(a2 + 824) = 0u;
        *double v21 = 0u;
        *(void *)(a2 + 848) = 3;
      }
      return 0;
    }
  }
  return result;
}

void sub_1BAE50EB4(void *a1)
{
}

void sub_1BAE50EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContext_Legacy_Impl::ResetTimeForOverload_Helper(HALS_IOContext_Legacy_Impl *this, uint64_t a2, HALS_IOEngineInfo *a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    double v10 = 0.0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    (*(void (**)(uint64_t, HALS_IOContext_Legacy_Impl *, double *, uint64_t *, uint64_t *))(*(void *)v4 + 616))(v4, this, &v10, &v11, &v12);
    double v9 = 0.0;
    HALS_IOClock::GetRaw0Time(*(HALS_IOClock **)(a2 + 288), &v9, &v8);
    LODWORD(v6) = *(_DWORD *)(a2 + 776);
    if (v10 > v9 + (double)v6) {
      (*(void (**)(void, HALS_IOContext_Legacy_Impl *, uint64_t, double))(**(void **)(a2 + 8) + 632))(*(void *)(a2 + 8), this, 4, v10);
    }
  }
  return 0;
}

void ___ZNK26HALS_IOContext_Legacy_Impl28CanHandleOverloadWithCatchupER16CAAudioTimeStamp_block_invoke(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = (HALS_IODevice *)(*(uint64_t (**)(void))(**(void **)(*(void *)(v2 + 1520) + 8) + 320))(*(void *)(*(void *)(v2 + 1520) + 8));
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315394;
    Float64 v7 = "HALS_IOContext_Legacy_Impl.cpp";
    __int16 v8 = 1024;
    int v9 = 4147;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Handling overload with catchup mode: ", (uint8_t *)&v6, 0x12u);
  }
  double v4 = **(double **)(a1 + 48) - (double)GetAvailableCatchupSamplesForDevice(v3);
  double v5 = *(double *)(v2 + 1168);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315906;
    Float64 v7 = "HALS_IOContext_Legacy_Impl.cpp";
    __int16 v8 = 1024;
    int v9 = 4154;
    __int16 v10 = 2048;
    double v11 = v4;
    __int16 v12 = 2048;
    double v13 = v5;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  \tFound oldest valid sample: %.0f, nextReadSample: %.0f", (uint8_t *)&v6, 0x26u);
  }
  if (v5 > v4) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoop_HandleOverload(CAAudioTimeStamp &,CAAudioTimeStamp const&,CAAudioTimeStamp const&,CAAudioTimeStamp const&,unsigned int,double,HALS_IOContext_Legacy_Impl::PerformIOReturn)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    uint64_t v8 = *(void *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)double v11 = 2080;
    *(void *)&void v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 2080;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Failed to clear the syscall masks: %d - %s", (uint8_t *)&v10, 0x28u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAE512B4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoop_HandleOverload(CAAudioTimeStamp &,CAAudioTimeStamp const&,CAAudioTimeStamp const&,CAAudioTimeStamp const&,unsigned int,double,HALS_IOContext_Legacy_Impl::PerformIOReturn)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void HALS_IOContext_Legacy_Impl::IOWorkLoop_ReportClientTimeout(uint64_t a1, unsigned int *a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 224);
  unint64_t v9 = *(void *)(v8 + 32);
  unint64_t v10 = *(void *)(v8 + 96);
  if (v9 <= v10) {
    unint64_t v11 = v10;
  }
  else {
    unint64_t v11 = v9;
  }
  unint64_t v12 = *((void *)a2 + 2);
  uint64_t v13 = __udivti3();
  if (v12 >= v11) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = -v13;
  }
  uint64_t v16 = a4;
  BOOL v15 = a4 == 0;
  if (a4) {
    char v17 = 2;
  }
  else {
    char v17 = 1;
  }
  uint64_t v18 = *(void *)(a1 + 568);
  long long v49 = *(_OWORD *)(a1 + 592);
  long long v50 = *(_OWORD *)(a1 + 576);
  if (v15) {
    double v19 = 1.0;
  }
  else {
    double v19 = (double)(a3 * (unint64_t)*a2);
  }
  v85[0] = 0;
  pthread_threadid_np(0, v85);
  LOBYTE(v72) = v17;
  uint64_t v20 = *(void *)(a1 + 24);
  DWORD1(v72) = *(_DWORD *)(v20 + 16);
  DWORD2(v72) = *(_DWORD *)(a1 + 1304);
  if (*(void *)(a1 + 1480)) {
    BOOL v21 = 0;
  }
  else {
    BOOL v21 = *(void *)(a1 + 1472) != 0;
  }
  BYTE12(v72) = v21;
  *(_WORD *)((char *)&v72 + 13) = 0;
  HIBYTE(v72) = 0;
  *(double *)&long long v73 = v19;
  uint64_t v22 = *(void *)(v20 + 80);
  if (v22)
  {
    double v23 = *((double *)a2 + 17);
    double v24 = (*(double (**)(uint64_t, double))(*(void *)v22 + 136))(v22, *((double *)a2 + 9) - v23);
    uint64_t v25 = *(void *)(*(void *)(a1 + 24) + 80);
    *((double *)&v73 + 1) = v23 + (double)(uint64_t)(v24 * 24000000.0);
    double v26 = (unint64_t *)(a2 + 36);
    long long v27 = (unint64_t *)(a2 + 20);
    if (v25)
    {
      unint64_t v28 = *v26;
      double v29 = (double)(v28
                   + (uint64_t)((*(double (**)(uint64_t, double))(*(void *)v25 + 136))(v25, (double)(*v27 - *v26))* 24000000.0));
      goto LABEL_21;
    }
  }
  else
  {
    *((void *)&v73 + 1) = 0;
    double v26 = (unint64_t *)(a2 + 36);
    long long v27 = (unint64_t *)(a2 + 20);
  }
  double v29 = 0.0;
LABEL_21:
  *(double *)&long long v74 = v29;
  DWORD2(v74) = *a2;
  unint64_t v30 = *((void *)a2 + 18);
  *(void *)&long long v75 = v85[0];
  *((void *)&v75 + 1) = v30;
  unint64_t v31 = *((void *)a2 + 10);
  unint64_t v76 = v31;
  if (*(char *)(a1 + 2079) < 0)
  {
    std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)(a1 + 2056), *(void *)(a1 + 2064));
    unint64_t v30 = *v26;
    unint64_t v31 = *v27;
  }
  else
  {
    std::string v77 = *(std::string *)(a1 + 2056);
  }
  uint64_t v32 = __udivti3();
  uint64_t v33 = *(void *)(a1 + 1520);
  *(void *)&long long v78 = *(void *)(v33 + 768);
  uint64_t v34 = *(void *)(a1 + 24);
  DWORD2(v78) = *(_DWORD *)(*(void *)(v34 + 64) + 4);
  if (v31 >= v30) {
    uint64_t v35 = v32;
  }
  else {
    uint64_t v35 = -v32;
  }
  uint64_t v36 = *((void *)a2 + 30);
  *(void *)&long long v79 = *((void *)a2 + 29);
  *((void *)&v79 + 1) = v35;
  *(void *)&long long v80 = v36;
  *((void *)&v80 + 1) = v14;
  uint64_t v37 = *(void *)(v33 + 360);
  *(double *)&long long v81 = *(float *)(a1 + 1328);
  *((void *)&v81 + 1) = v37;
  long long v82 = *(unint64_t *)(a1 + 1312);
  long long v83 = *(_OWORD *)(v34 + 208);
  *(void *)uint64_t v84 = v18;
  *(_OWORD *)&void v84[8] = v50;
  *(_OWORD *)&v84[24] = v49;
  memset(&v84[40], 0, 40);
  uint64_t v38 = *(void *)(v34 + 224);
  long long v57 = v74;
  long long v58 = v75;
  unint64_t v59 = v76;
  long long v55 = v72;
  long long v56 = v73;
  int v39 = SHIBYTE(v77.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v77;
  }
  long long v69 = *(_OWORD *)&v84[32];
  long long v70 = *(_OWORD *)&v84[48];
  long long v71 = *(_OWORD *)&v84[64];
  long long v65 = v82;
  long long v66 = v83;
  long long v67 = *(_OWORD *)v84;
  long long v68 = *(_OWORD *)&v84[16];
  long long v61 = v78;
  long long v62 = v79;
  long long v63 = v80;
  long long v64 = v81;
  long long v51 = *(_OWORD *)(a2 + 2);
  long long v52 = *(_OWORD *)(a2 + 6);
  long long v53 = *(_OWORD *)(a2 + 10);
  long long v54 = *(_OWORD *)(a2 + 14);
  *(unsigned char *)(v38 + 1) = 1;
  if (v16)
  {
    *(_OWORD *)(v38 + 88) = v51;
    *(_OWORD *)(v38 + 104) = v52;
    *(_OWORD *)(v38 + 120) = v53;
    *(_OWORD *)(v38 + 136) = v54;
  }
  uint64_t v40 = *(void *)(v38 + 8);
  *(_OWORD *)uint64_t v40 = v55;
  *(void *)(v40 + 64) = v59;
  *(_OWORD *)(v40 + 32) = v57;
  *(_OWORD *)(v40 + 48) = v58;
  *(_OWORD *)(v40 + 16) = v56;
  std::string::operator=((std::string *)(v40 + 72), &__p);
  long long v41 = v61;
  long long v42 = v63;
  *(_OWORD *)(v40 + 112) = v62;
  *(_OWORD *)(v40 + 128) = v42;
  *(_OWORD *)(v40 + 96) = v41;
  long long v43 = v64;
  long long v44 = v65;
  long long v45 = v67;
  *(_OWORD *)(v40 + 176) = v66;
  *(_OWORD *)(v40 + 192) = v45;
  *(_OWORD *)(v40 + 144) = v43;
  *(_OWORD *)(v40 + 160) = v44;
  long long v46 = v68;
  long long v47 = v69;
  long long v48 = v71;
  *(_OWORD *)(v40 + 240) = v70;
  *(_OWORD *)(v40 + 256) = v48;
  *(_OWORD *)(v40 + 208) = v46;
  *(_OWORD *)(v40 + 224) = v47;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v39 & 0x80000000) == 0) {
      return;
    }
LABEL_36:
    operator delete(v77.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v39 < 0) {
    goto LABEL_36;
  }
}

void sub_1BAE51738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  operator delete(__p);
  _Unwind_Resume(a1);
}

void *HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(HALS_IOContext_Legacy_Impl *this, uint64_t a2)
{
  void v8[4] = *MEMORY[0x1E4F143B8];
  v8[0] = &unk_1F147C8B8;
  void v8[3] = v8;
  os_log_type_t v3 = &unk_1F147D4B0;
  v5[0] = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
  v5[1] = v8;
  int v4 = &off_1F147D460;
  int v6 = v5;
  v7[0] = (uint64_t (*)(void, void *))caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
  v7[1] = (uint64_t (*)(void, void *))&v6;
  VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>((uint64_t)this, a2, v7, (uint64_t)&v4, (uint64_t)&v3);
  return std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v8);
}

void sub_1BAE51860(_Unwind_Exception *a1)
{
  std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100]((void *)(v1 - 56));
  _Unwind_Resume(a1);
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(void)::$_0>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(void)::$_0>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl46NotifyWaitingTapsThatThisReaderHasFullyStartedEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(void)::$_0>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 872))(v2);
  }
  return 0;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(void)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F147C8B8;
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(void)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F147C8B8;
  return result;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(void)::$_0>,int ()(HALS_IOEngineInfo &)>::~__func()
{
}

uint64_t HALS_IOContext_Legacy_Impl::IsTimeRunning(HALS_IOContext_Legacy_Impl *this, HALS_IOContext_Legacy_Impl *a2, unsigned int a3)
{
  v17[4] = *MEMORY[0x1E4F143B8];
  v17[0] = &unk_1F147C398;
  v17[1] = HALS_IOContext_Legacy_Impl::IsTimeRunning_Helper;
  void v17[2] = a3;
  void v17[3] = v17;
  unint64_t v9 = (uint64_t (**)(void **, void *))&unk_1F147D4B0;
  v11[0] = caulk::function_ref<int ()(HALS_IOEngineInfo const&)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo const&)>>;
  v11[1] = v17;
  unint64_t v10 = &off_1F147D460;
  unint64_t v12 = v11;
  uint64_t v13 = caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ConstItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(caulk::function_ref<int ()(HALS_IOEngineInfo const&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ConstItemWithIndex &)#1}>;
  uint64_t v14 = &v12;
  if (this == a2)
  {
LABEL_10:
    uint64_t v7 = 1;
  }
  else
  {
    int v4 = this;
    uint64_t v5 = 0;
    char v6 = 1;
    while (1)
    {
      if (v6) {
        uint64_t v5 = 0;
      }
      else {
        ++v5;
      }
      v16[0] = v4;
      v16[1] = v5;
      if ((((uint64_t (*)(void (***)(FilterEngineInfoWithoutEngine *__hidden), void *))v10[2])(&v10, v16) & 1) == 0&& (v9[2]((void **)&v9, v16) & 1) == 0)
      {
        v15[0] = v4;
        v15[1] = v5;
        if (v13((uint64_t (****)(uint64_t, uint64_t))&v14, (uint64_t **)v15)) {
          break;
        }
      }
      char v6 = 0;
      int v4 = (HALS_IOContext_Legacy_Impl *)((char *)v4 + 8);
      if (v4 == a2) {
        goto LABEL_10;
      }
    }
    uint64_t v7 = 0;
  }
  std::__function::__value_func<int ()(HALS_IOEngineInfo const&)>::~__value_func[abi:ne180100](v17);
  return v7;
}

void sub_1BAE51B50(_Unwind_Exception *a1)
{
  std::__function::__value_func<int ()(HALS_IOEngineInfo const&)>::~__value_func[abi:ne180100]((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t HALS_IOContext_Legacy_Impl::UpdateEngineMixing(HALS_IOContext_Legacy_Impl *this)
{
  char v2 = 0;
  v5[0] = caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContext_Legacy_Impl::UpdateEngineMixing(void)::$_0>;
  v5[1] = &v2;
  v3[1] = (char *)this + 1496;
  int v4 = v5;
  v3[0] = &unk_1F14809E0;
  v6[0] = _ZN5caulk12function_refIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEE15functor_invokerIZN25HALS_IOContextDescription62ApplyToActiveOutput_ButSkipClocklessReferenceStreamOnlyEnginesES6_EUljRT_jjRT0_E_EEiRKNS_7details15erased_callableIS5_EEjS2_jjS4_;
  v6[1] = &v4;
  v7[0] = (uint64_t (*)(void, void *))caulk::function_ref<int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::functor_invoker<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription&,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}>;
  v7[1] = (uint64_t (*)(void, void *))v6;
  return VisitableVector<HALS_IOStackDescription>::do_apply<std::vector<HALS_IOStackDescription>,VisitableVector<HALS_IOStackDescription>::ItemWithIndex,HALS_IOContextDescription::ActiveOutputsOnly>(*((void *)this + 197), *((void *)this + 198), v7, (uint64_t)v3);
}

void HALS_IOContext_Legacy_Impl::StartTapOutput(HALS_IOContext_Legacy_Impl *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 250))
  {
    for (char i = (unsigned __int8 *)*((void *)this + 249); i; char i = *(unsigned __int8 **)i)
    {
      unsigned __int8 v3 = atomic_load(i + 42);
      if ((v3 & 1) == 0) {
        HALS_IOContext_Legacy_Impl::StartTapOutput((uint64_t)this, (uint64_t)(i + 24));
      }
    }
    if (!*((unsigned char *)this + 1715))
    {
      long long v23 = 0u;
      long long v24 = 0u;
      int v25 = 1065353216;
      int v4 = (void *)((char *)this + 1992);
      while (1)
      {
        int v4 = (void *)*v4;
        if (!v4) {
          break;
        }
        uint64_t v5 = *(uint64_t **)(v4[3] + 488);
        if (v5)
        {
          int v6 = *(_DWORD *)(*((void *)this + 3) + 16);
          do
          {
            unsigned int v7 = *((_DWORD *)v5 + 4);
            if (v7 != v6)
            {
              uint64_t v8 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)v5 + 4));
              unint64_t v10 = (HALS_ObjectMap *)v8;
              if (v8)
              {
                if ((*(unsigned int (**)(void))(**(void **)(v8 + 96) + 424))(*(void *)(v8 + 96))) {
                  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&v23, v7, v7);
                }
              }
              HALS_ObjectMap::ReleaseObject(v10, v9);
            }
            uint64_t v5 = (uint64_t *)*v5;
          }
          while (v5);
        }
      }
      if (*((void *)this + 250)) {
        BOOL v11 = *((void *)&v24 + 1) == 0;
      }
      else {
        BOOL v11 = 1;
      }
      if (!v11)
      {
        char v12 = 0;
        while ((HALB_IOThread::HasBeenStopped((HALS_IOContext_Legacy_Impl *)((char *)this + 312)) & 1) == 0)
        {
          kdebug_trace();
          uint64_t v13 = (void *)((char *)this + 1992);
          while (1)
          {
            uint64_t v13 = (void *)*v13;
            if (!v13) {
              break;
            }
            uint64_t v14 = v13[3];
            long long v26 = 0u;
            long long v27 = 0u;
            int v28 = 1065353216;
            BOOL v15 = *(uint64_t **)(v14 + 488);
            if (v15)
            {
              do
              {
                uint64_t v16 = (HALS_ObjectMap *)*((unsigned int *)v15 + 4);
                if (std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(&v23, *((_DWORD *)v15 + 4)))
                {
                  uint64_t v17 = HALS_ObjectMap::CopyObjectByObjectID(v16);
                  uint64_t v18 = (HALS_ObjectMap *)v17;
                  if (!v17
                    || ((*(uint64_t (**)(void))(**(void **)(v17 + 96) + 152))(*(void *)(v17 + 96)) & 1) != 0
                    || ((*(uint64_t (**)(void *))(**((void **)v18 + 12) + 176))(*((void **)v18 + 12)) & 1) != 0)
                  {
                    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)&v26, v16, (int)v16);
                  }
                  HALS_ObjectMap::ReleaseObject(v18, v19);
                }
                BOOL v15 = (uint64_t *)*v15;
              }
              while (v15);
              for (uint64_t j = (uint64_t *)v27; j; uint64_t j = (uint64_t *)*j)
              {
                BOOL v21 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(&v23, *((_DWORD *)j + 4));
                if (v21) {
                  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(&v23, v21);
                }
              }
            }
            std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)&v26);
          }
          uint64_t v22 = mach_absolute_time();
          HALS_IOContext_Legacy_Impl::IOWorkLoop_SleepUntilWakeTime(this, v22 + 2400000);
          if (*((void *)this + 250))
          {
            char v12 = 1;
            if (*((void *)&v24 + 1)) {
              continue;
            }
          }
          goto LABEL_43;
        }
        if ((v12 & 1) == 0) {
          goto LABEL_44;
        }
LABEL_43:
        kdebug_trace();
      }
LABEL_44:
      std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)&v23);
    }
  }
}

void sub_1BAE51EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, NSObject **buf, long long a16, uint64_t a17)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)&a9);
  double v19 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
  AMCP::Log::Scope_Registry::get(v19);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
  uint64_t v20 = *buf;
  if ((void)a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a16);
  }
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    BOOL v21 = pthread_self();
    mach_port_t v22 = pthread_mach_thread_np(v21);
    int v23 = *(_DWORD *)(*(void *)(v17 + 24) + 16);
    LODWORD(buf) = 67109890;
    HIDWORD(buf) = v22;
    LOWORD(a16) = 2080;
    *(void *)((char *)&a16 + 2) = "HALS_IOContext_Legacy_Impl.cpp";
    WORD5(a16) = 1024;
    HIDWORD(a16) = 5447;
    LOWORD(a17) = 1024;
    *(_DWORD *)((char *)&a17 + 2) = v23;
    _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception during MaybeWaitForTapReadersToStart() for context: %d:", (uint8_t *)&buf, 0x1Eu);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAE51EBCLL);
}

void sub_1BAE52034()
{
}

void sub_1BAE5203C()
{
}

void HALS_IOContext_Legacy_Impl::SendIsRunningNotifications(HALS_Object **this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors((HALS_PlatformBehaviors *)this);
  if ((*(unsigned int (**)(uint64_t *))(*platform_behaviors + 16))(platform_behaviors))
  {
    long long v8 = *(_OWORD *)"niogbolg";
    uint64_t v9 = 1735159650;
    HALB_Mutex::Unlock((HALB_Mutex *)(this + 41));
    unsigned __int8 v3 = this[3];
    int v4 = (HALS_NotificationManager *)*((unsigned int *)v3 + 18);
    if (!v4) {
      int v4 = (HALS_NotificationManager *)*((unsigned int *)v3 + 4);
    }
    HALS_Object::PropertiesChanged_Sync(v3, v4, **((unsigned int **)v3 + 8), 2u, (const AudioObjectPropertyAddress *)&v8);
    HALB_Mutex::Lock((HALB_Mutex *)(this + 41));
  }
  else
  {
    DWORD2(v8) = 0;
    *(void *)&long long v8 = *(void *)"enogbolg";
    uint64_t v5 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 378));
    unsigned int v7 = (HALS_ObjectMap *)v5;
    if (v5 && *(_DWORD *)(v5 + 20) == 1633773415) {
      HALS_Object::PropertiesChanged(this[3], (HALS_NotificationManager *)*((unsigned int *)this + 378), **((unsigned int **)this[3] + 8), 1u, (const AudioObjectPropertyAddress *)&v8);
    }
    HALS_ObjectMap::ReleaseObject(v7, v6);
  }
}

void sub_1BAE52180(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>(caulk::concurrent::messenger *a1, unsigned char *a2, long long *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = &unk_1F147B438;
  *(void *)(v6 + 8) = 0;
  *(unsigned char *)(v6 + 20) = *a2;
  long long v7 = *a3;
  *(void *)(v6 + 40) = *((void *)a3 + 2);
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)uint64_t v6 = &unk_1F147B3E0;

  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>(caulk::concurrent::messenger *a1, unsigned char *a2, long long *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = &unk_1F147B4B8;
  *(void *)(v6 + 8) = 0;
  *(unsigned char *)(v6 + 20) = *a2;
  long long v7 = *a3;
  *(void *)(v6 + 40) = *((void *)a3 + 2);
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)uint64_t v6 = &unk_1F147B460;

  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

unsigned int _CalculateOverloadThresholdSampleAdjustment(double a1, unsigned int result, unsigned int a3)
{
  if (a3 == result)
  {
    double v3 = 0.25;
    double v4 = 0.125;
    double v5 = 0.0625;
    if (a3 >= 0x201) {
      double v5 = 0.0;
    }
    if (a3 >= 0x101) {
      double v4 = v5;
    }
    if (a3 >= 0x81) {
      double v3 = v4;
    }
    double v6 = 2.0;
    if (a1 >= 32000.0)
    {
      double v6 = 1.0;
      if (a1 >= 64000.0)
      {
        double v6 = 0.25;
        if (a1 < 128000.0) {
          double v6 = 0.5;
        }
      }
    }
    return vcvtmd_u64_f64(v3 * (double)a3 * v6);
  }
  else if (a3 > result)
  {
    return a3;
  }
  return result;
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int,int,char *>>(caulk::concurrent::messenger *a1, unsigned char *a2, long long *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = &unk_1F147B538;
  *(void *)(v6 + 8) = 0;
  *(unsigned char *)(v6 + 20) = *a2;
  long long v7 = *a3;
  *(_OWORD *)(v6 + 40) = a3[1];
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)uint64_t v6 = &unk_1F147B4E0;

  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

uint64_t HALS_IOContext_Legacy_Impl::engine_apply<FilterIfEngineOnlyNeedsReferenceStream>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
  v6[1] = a3;
  double v5 = &off_1F147D460;
  long long v7 = v6;
  v8[0] = (uint64_t (*)(void, void *))caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
  v8[1] = (uint64_t (*)(void, void *))&v7;
  return VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(a1, a2, v8, (uint64_t)&v5, a4);
}

void HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(uint64_t a1, unsigned int *a2)
{
  uint64_t v214 = *MEMORY[0x1E4F143B8];
  v174 = (HALB_IOThread *)(a1 + 312);
  if (HALB_IOThread::HasBeenStopped((HALB_IOThread *)(a1 + 312)))
  {
    *((unsigned char *)a2 + 249) = 1;
    return;
  }
  CurrentTime = *(HALS_IOClock **)(a1 + 1088);
  if (CurrentTime)
  {
    std::function<void ()(HALS_IOContext_Legacy_Impl *)>::operator()((uint64_t)CurrentTime, a1);
    CurrentTime = (HALS_IOClock *)std::__function::__value_func<void ()(HALS_IOContext_Legacy_Impl *)>::operator=[abi:ne180100]((void *)(a1 + 1064));
  }
  if (*(void *)(a1 + 1312) <= (uint64_t)(2 * *(_DWORD *)(a1 + 1320))) {
    unsigned int v5 = *a2;
  }
  else {
    unsigned int v5 = *(_DWORD *)(a1 + 1320);
  }
  a2[54] = v5;
  v177 = (AudioTimeStamp *)(a2 + 2);
  uint64_t v6 = *(void *)(a1 + 1520);
  if (v6)
  {
    if (*(void *)(v6 + 8))
    {
      CurrentTime = *(HALS_IOClock **)(v6 + 288);
      if (CurrentTime)
      {
        CurrentTime = (HALS_IOClock *)HALS_IOClock::GetCurrentTime(CurrentTime, v177);
        unsigned int v5 = a2[54];
      }
    }
  }
  unsigned int v7 = *a2;
  if (*a2 != v5)
  {
    int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 16);
    AMCP::Log::Scope_Registry::get(CurrentTime);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&block, "com.apple.coreaudio", "AMCP");
    uint64_t v9 = *(caulk::concurrent::messenger **)(*(void *)&block.mSampleTime + 8);
    uint64_t v10 = pthread_self();
    mach_port_t v11 = pthread_mach_thread_np(v10);
    char v12 = (void *)MEMORY[0x1E4FB7E90];
    uint64_t v13 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
    *(_DWORD *)(v13 + 16) = 0;
    *(unsigned char *)(v13 + 20) = 0;
    *(_DWORD *)(v13 + 24) = v11;
    *(void *)(v13 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
    *(_DWORD *)(v13 + 40) = 2079;
    *(_DWORD *)(v13 + 44) = v8;
    *(_DWORD *)(v13 + 48) = v7;
    *(_DWORD *)(v13 + 52) = v5;
    *(void *)uint64_t v13 = &unk_1F147B828;
    *(void *)(v13 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v9, (caulk::concurrent::message *)v13);
    if (block.mHostTime) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)block.mHostTime);
    }
    uint64_t v14 = a2[54];
    uint64_t v15 = *a2;
    (*(void (**)(void))(**(void **)(*(void *)(a1 + 24) + 96) + 712))(*(void *)(*(void *)(a1 + 24) + 96));
    kdebug_trace();
    ++*(_DWORD *)(a1 + 1304);
    kdebug_trace();
    *(void *)(a1 + 1312) += v15;
    *(void *)(a1 + 1312) += (int)v15 - (int)v14;
    unsigned int v16 = bswap32(v14);
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 24) + 64) + 40)) {
      int v17 = v16;
    }
    else {
      int v17 = v14;
    }
    *(_DWORD *)(*(void *)(a1 + 1096) + 24) = v17;
    OSMemoryBarrier();
    memset(&block, 0, sizeof(block));
    block.mFlags = 3;
    HALS_IOContext_Legacy_Impl::IOWorkLoop_CalculateOverloadTime(a1, v14, &block, -1.0);
    HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines((HALS_IOContext_Legacy_Impl *)a1, &block);
    uint64_t v18 = *(void *)(*(void *)(a1 + 24) + 80);
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 72))(v18);
    }
    BOOL v19 = HALS_IOContext_Legacy_Impl::PerformIO(a1, (uint64_t)v177, v14, v15 - v14, *(_DWORD *)(a1 + 1384), (uint64_t *)a2 + 29);
    uint64_t v20 = *(void *)(a1 + 1520);
    if (v20)
    {
      if (*(void *)(v20 + 8))
      {
        BOOL v21 = *(HALS_IOClock **)(v20 + 288);
        if (v21) {
          HALS_IOClock::GetCurrentTime(v21, v177);
        }
      }
    }
    mach_port_t v22 = (AMCP::Log::Scope_Registry *)HALS_IOContext_Legacy_Impl::ConfigureThreadForRealtimePriority((_opaque_pthread_t **)a1, v14);
    int v23 = (int)v22;
    if (v22)
    {
      CFDictionaryRef v175 = a2;
      AMCP::Log::Scope_Registry::get(v22);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v189, "com.apple.coreaudio", "AMCP");
      long long v24 = *(caulk::concurrent::messenger **)(*(void *)&v189.mSampleTime + 8);
      int v25 = pthread_self();
      mach_port_t v26 = pthread_mach_thread_np(v25);
      long long v27 = __error();
      int v28 = strerror(*v27);
      uint64_t v29 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v12 + 16))(*v12, 56, 8);
      *(_DWORD *)(v29 + 16) = 0;
      *(unsigned char *)(v29 + 20) = 16;
      *(_DWORD *)(v29 + 24) = v26;
      *(void *)(v29 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
      *(_DWORD *)(v29 + 40) = 1298;
      *(_DWORD *)(v29 + 44) = v23;
      *(void *)(v29 + 48) = v28;
      *(void *)uint64_t v29 = &unk_1F147B280;
      *(void *)(v29 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v24, (caulk::concurrent::message *)v29);
      if (v189.mHostTime) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v189.mHostTime);
      }
      a2 = v175;
    }
    a2[55] = v19;
    uint64_t v30 = *(void *)(a1 + 1520);
    unsigned int v31 = *a2;
    unsigned int v5 = a2[54];
    if (v5 == *a2)
    {
      double v32 = *(double *)(v30 + 768);
      double v33 = 0.25;
      if (v31 >= 0x81)
      {
        double v33 = 0.125;
        if (v31 >= 0x101)
        {
          double v33 = 0.0625;
          if (v31 >= 0x201) {
            double v33 = 0.0;
          }
        }
      }
      double v34 = 2.0;
      if (v32 >= 32000.0)
      {
        double v34 = 1.0;
        if (v32 >= 64000.0)
        {
          double v34 = 0.25;
          if (v32 < 128000.0) {
            double v34 = 0.5;
          }
        }
      }
      unsigned int v31 = vcvtmd_u64_f64(v33 * (double)v31 * v34);
    }
    else if (v5 > v31)
    {
      unsigned int v31 = a2[54];
    }
    a2[50] = v31;
    *a2 = v5;
    if (*(void *)(v30 + 8)) {
      double v35 = *(double *)(*(void *)(v30 + 288) + 112);
    }
    else {
      double v35 = 544.217687;
    }
    *((double *)a2 + 26) = v35 * (double)v5;
  }
  unsigned int v36 = *(_DWORD *)(a1 + 1384);
  a2[56] = v36;
  if ((v36 & 0xFFFFFFFE) == 2)
  {
    uint64_t v37 = *(void *)(a1 + 1520);
    if (!v37)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        LODWORD(block.mSampleTime) = 136315394;
        *(void *)((char *)&block.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp";
        WORD2(block.mHostTime) = 1024;
        *(_DWORD *)((char *)&block.mHostTime + 6) = 2124;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOWorkLoop: no master engine info for catch up mode", (uint8_t *)&block, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    double v38 = *(double *)(a1 + 1168);
    double mSampleTime = v177->mSampleTime;
    UInt64 v40 = *(void *)(v37 + 768);
    v184[0] = 0;
    *(void *)&v179.double mSampleTime = v184;
    v179.UInt64 mHostTime = v40;
    v180.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1480990;
    v180.__r_.__value_.__l.__size_ = a1 + 1496;
    v183[0] = &unk_1F147AD80;
    *(void *)&block.double mSampleTime = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ConstItemWithIndex &)>::functor_invoker<HALS_IOContext_Legacy_Impl::GetLargestInputSafetyOffsetInHostSamples(void)::$_0>;
    block.UInt64 mHostTime = (UInt64)&v179;
    Float64 v41 = *(double *)(a1 + 1552);
    uint64_t v42 = *(void *)(a1 + 1560);
    if (*(void *)&v41 != v42)
    {
      UInt64 v43 = 0;
      char v44 = 1;
      do
      {
        if (v44) {
          UInt64 v43 = 0;
        }
        else {
          ++v43;
        }
        v189.double mSampleTime = v41;
        v189.UInt64 mHostTime = v43;
        if (((*(uint64_t (**)(std::string *, AudioTimeStamp *))(v180.__r_.__value_.__r.__words[0] + 16))(&v180, &v189) & 1) == 0&& ((*(uint64_t (**)(void *, AudioTimeStamp *))(v183[0] + 16))(v183, &v189) & 1) == 0)
        {
          *(Float64 *)&long long v185 = v41;
          *((void *)&v185 + 1) = v43;
          if ((*(unsigned int (**)(UInt64 *, long long *))&block.mSampleTime)(&block.mHostTime, &v185)) {
            break;
          }
        }
        char v44 = 0;
        *(void *)&v41 += 424;
      }
      while (*(void *)&v41 != v42);
    }
    double v45 = v38 + (double)v5 + (double)v5;
    double v46 = mSampleTime - *(double *)v184;
    if (v45 <= v46) {
      goto LABEL_77;
    }
    *(_DWORD *)(a1 + 1384) = 4;
    uint64_t v47 = *(void *)(a1 + 1416);
    if (v47) {
      std::function<void ()(IORunningState)>::operator()(v47, 4);
    }
    kdebug_trace();
    long long v48 = (AMCP::Log::Scope_Registry *)HALS_IOContext_Legacy_Impl::ConfigureThreadForRealtimePriority((_opaque_pthread_t **)a1, a2[54]);
    int v49 = (int)v48;
    if (v48)
    {
      AMCP::Log::Scope_Registry::get(v48);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&block, "com.apple.coreaudio", "AMCP");
      long long v50 = *(caulk::concurrent::messenger **)(*(void *)&block.mSampleTime + 8);
      long long v51 = pthread_self();
      mach_port_t v52 = pthread_mach_thread_np(v51);
      long long v53 = __error();
      long long v54 = strerror(*v53);
      uint64_t v55 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
      *(_DWORD *)(v55 + 16) = 0;
      *(unsigned char *)(v55 + 20) = 16;
      *(_DWORD *)(v55 + 24) = v52;
      *(void *)(v55 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
      *(_DWORD *)(v55 + 40) = 2144;
      *(_DWORD *)(v55 + 44) = v49;
      *(void *)(v55 + 48) = v54;
      *(void *)uint64_t v55 = &unk_1F147B880;
      *(void *)(v55 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v50, (caulk::concurrent::message *)v55);
      if (block.mHostTime) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)block.mHostTime);
      }
    }
    HALS_IOContext_Legacy_Impl::IOWorkLoop_CalculateWakeTime(a1, *a2, (AudioTimeStamp *)(a2 + 18));
    unint64_t v56 = *(unsigned int *)(*(void *)(a1 + 24) + 16) | ((unint64_t)*(unsigned int *)(a1 + 1320) << 32);
    v203[0] = &unk_1F147B8D8;
    v203[1] = v56;
    v203[3] = v203;
    *(void *)&v179.double mSampleTime = &off_1F147D460;
    *(void *)&v189.double mSampleTime = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
    v189.UInt64 mHostTime = (UInt64)v203;
    v183[0] = &off_1F147D460;
    v184[0] = (__uint64_t)&v189;
    *(void *)&block.double mSampleTime = caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
    block.UInt64 mHostTime = (UInt64)v184;
    std::string::size_type v57 = *(void *)(a1 + 1528);
    uint64_t v58 = *(void *)(a1 + 1536);
    if (v57 != v58)
    {
      std::string::size_type v59 = 0;
      char v60 = 1;
      do
      {
        if (v60) {
          std::string::size_type v59 = 0;
        }
        else {
          ++v59;
        }
        *(void *)&long long v185 = v57;
        *((void *)&v185 + 1) = v59;
        if (((*(uint64_t (**)(void *, long long *))(v183[0] + 16))(v183, &v185) & 1) == 0
          && ((*(uint64_t (**)(AudioTimeStamp *, long long *))(*(void *)&v179.mSampleTime + 16))(&v179, &v185) & 1) == 0)
        {
          v180.__r_.__value_.__r.__words[0] = v57;
          v180.__r_.__value_.__l.__size_ = v59;
          if ((*(unsigned int (**)(UInt64 *, std::string *))&block.mSampleTime)(&block.mHostTime, &v180)) {
            break;
          }
        }
        char v60 = 0;
        v57 += 8;
      }
      while (v57 != v58);
    }
    long long v61 = (AMCP::Log::Scope_Registry *)std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v203);
    uint64_t v62 = *((void *)a2 + 9);
    uint64_t v63 = *((void *)a2 + 10);
    AMCP::Log::Scope_Registry::get(v61);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&block, "com.apple.coreaudio", "AMCP");
    long long v64 = *(caulk::concurrent::messenger **)(*(void *)&block.mSampleTime + 8);
    long long v65 = pthread_self();
    mach_port_t v66 = pthread_mach_thread_np(v65);
    uint64_t v67 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 88, 8);
    *(_DWORD *)(v67 + 16) = 0;
    *(_DWORD *)(v67 + 24) = v66;
    *(unsigned char *)(v67 + 20) = 0;
    *(void *)(v67 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
    *(_DWORD *)(v67 + 40) = 2159;
    *(double *)(v67 + 48) = v45;
    *(double *)(v67 + 56) = v46;
    *(void *)(v67 + 64) = v62;
    *(void *)(v67 + 72) = 0;
    *(void *)(v67 + 80) = v63;
    *(void *)uint64_t v67 = &unk_1F147B958;
    *(void *)(v67 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v64, (caulk::concurrent::message *)v67);
    if (block.mHostTime) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)block.mHostTime);
    }
    uint64_t v68 = *(void *)(*(void *)(*(void *)(a1 + 24) + 224) + 8);
    if (*(unsigned char *)(v68 + 13))
    {
      char v69 = 0;
      *(_WORD *)(v68 + 13) = 257;
    }
    else
    {
LABEL_77:
      char v69 = 0;
    }
    goto LABEL_179;
  }
  CFStringRef v176 = a2;
  if (*(unsigned char *)(a1 + 2032))
  {
    long long v70 = v174;
    if (*(void *)(a1 + 2040) == *(_DWORD *)(a1 + 1304)) {
      HALS_IOContext_Legacy_Impl::IOWorkLoop_ReportClientTimeout(a1, a2, 0, 0);
    }
  }
  else
  {
    uint64_t v71 = *(unsigned int *)(a1 + 1304);
    uint64_t v72 = *(void *)(a1 + 2048);
    long long v70 = v174;
    if (v72 && v72 == v71)
    {
      HALS_IOContext_Legacy_Impl::IOWorkLoop_ReportClientTimeout(a1, a2, v71 - *(void *)(a1 + 2040), 1u);
      *(unsigned char *)(a1 + 2032) = 0;
      *(void *)(a1 + 2040) = 0;
      *(void *)(a1 + 2048) = 0;
    }
  }
  BOOL v73 = 0;
  char v69 = 0;
  memset(&v179, 0, sizeof(v179));
  v179.mFlags = 3;
  int v74 = a2[55];
  unsigned int v75 = *a2;
  unint64_t v76 = (AudioTimeStamp *)(a2 + 18);
  double v77 = (double)(a2[50] + *a2);
  uint64_t v173 = *((void *)a2 + 29);
  uint64_t v166 = *((void *)a2 + 30);
  uint64_t v165 = (uint64_t)(a2 + 18);
  while (1)
  {
    HALS_IOContext_Legacy_Impl::IOWorkLoop_CalculateWakeTime(a1, v75, v76);
    HALS_IOContext_Legacy_Impl::IOWorkLoop_CalculateOverloadTime(a1, v75, &v179, v77);
    HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines((HALS_IOContext_Legacy_Impl *)a1, &v179);
    if (v74 != 1) {
      break;
    }
    if ((HALB_IOThread::HasBeenStopped(v70) & 1) == 0) {
      goto LABEL_89;
    }
    BOOL v73 = 1;
    int v74 = 1;
LABEL_97:
    char v82 = (HALB_IOThread::HasBeenStopped(v70) ^ 1) & v73;
    BOOL v73 = 1;
    if ((v82 & 1) == 0) {
      goto LABEL_177;
    }
  }
  if (v74 == 2) {
    goto LABEL_97;
  }
  double v78 = v177->mSampleTime;
  double v79 = v179.mSampleTime;
  BOOL v73 = v177->mSampleTime >= v179.mSampleTime;
  if (HALB_IOThread::HasBeenStopped(v70)) {
    goto LABEL_97;
  }
  if (v78 < v79) {
    goto LABEL_176;
  }
LABEL_89:
  uint64_t v80 = *(void *)(a1 + 1520);
  if (v80) {
    uint64_t v81 = *(void *)(v80 + 360);
  }
  else {
    uint64_t v81 = 0;
  }
  if (*(unsigned char *)(a1 + 1468))
  {
    if ((HALS_IOContext_Legacy_Impl::IOWorkLoop_HandleOverload(a1, v177, (uint64_t)&v179, (uint64_t)v76, v75) & 1) == 0) {
      goto LABEL_175;
    }
    goto LABEL_94;
  }
  if (*(void *)(a1 + 1480)) {
    BOOL v171 = 0;
  }
  else {
    BOOL v171 = *(void *)(a1 + 1472) != 0;
  }
  uint64_t v83 = *(void *)(a1 + 24);
  long long v169 = *(_OWORD *)(v83 + 208);
  int v170 = *(_DWORD *)(v83 + 16);
  double v84 = v177->mSampleTime;
  double v85 = v179.mSampleTime;
  UInt64 v86 = *((void *)a2 + 18);
  UInt64 mHostTime = v179.mHostTime;
  uint64_t v88 = __udivti3();
  if (mHostTime >= v86) {
    uint64_t v89 = v88;
  }
  else {
    uint64_t v89 = -v88;
  }
  uint64_t v90 = *(void *)(a1 + 568);
  long long v167 = *(_OWORD *)(a1 + 592);
  long long v168 = *(_OWORD *)(a1 + 576);
  uint64_t v91 = *(void *)(a1 + 2080);
  uint64_t v172 = v89;
  if (!v91) {
    goto LABEL_133;
  }
  CFDictionaryRef v93 = *(uint64_t ***)(v91 + 24);
  char v92 = *(std::__shared_weak_count **)(v91 + 32);
  if (v92) {
    atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v93 || (v94 = *v93, uint64_t v95 = v93[1], *v93 == v95))
  {
    int v103 = 0;
    uint64_t v96 = 0;
    goto LABEL_126;
  }
  BOOL v164 = v92;
  uint64_t v96 = 0;
  do
  {
    uint64_t v97 = *v94;
    uint64_t v98 = (std::__shared_weak_count *)v94[1];
    if (v98) {
      atomic_fetch_add_explicit(&v98->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v99 = *(void *)(v97 + 24);
    unint64_t v100 = *(void *)(v97 + 32);
    uint64_t v101 = __udivti3();
    if (v100 >= v99) {
      uint64_t v102 = v101;
    }
    else {
      uint64_t v102 = -v101;
    }
    if (v98) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v98);
    }
    v96 += v102;
    v94 += 2;
  }
  while (v94 != v95);
  int v103 = 0;
  if (v172 < 1)
  {
    a2 = v176;
    goto LABEL_173;
  }
  a2 = v176;
  char v92 = v164;
  if (v96 < 1)
  {
LABEL_126:
    if (!v92) {
      goto LABEL_128;
    }
    goto LABEL_127;
  }
  v189.double mSampleTime = 0.0;
  v189.UInt64 mHostTime = 0;
  v184[0] = 0;
  if (v96 < (unint64_t)v172)
  {
    if ((double)v96 / (double)v172 <= 0.9)
    {
      int v103 = 1;
    }
    else
    {
      *(void *)&block.double mSampleTime = &unk_1F147EB30;
      block.UInt64 mHostTime = (UInt64)&v189;
      *(void *)&block.Float64 mRateScalar = v184;
      block.mWordClockTime = (UInt64)&block;
      HALB_RealtimeDuration_Collection::enumSubDurations(v93, (uint64_t)&block);
      uint64_t v104 = (AMCP::Log::Scope_Registry *)std::__function::__value_func<void ()(std::shared_ptr<HALB_InstrumentedEvent_RealtimeDuration const>)>::~__value_func[abi:ne180100](&block);
      AMCP::Log::Scope_Registry::get(v104);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v185, "com.apple.coreaudio", "AMCP");
      unsigned int v105 = *(caulk::concurrent::messenger **)(v185 + 8);
      CFTypeRef v106 = pthread_self();
      mach_port_t v107 = pthread_mach_thread_np(v106);
      if (*(void *)&v189.mSampleTime) {
        int v108 = (*(uint64_t (**)(void))(**(void **)&v189.mSampleTime + 16))(*(void *)&v189.mSampleTime);
      }
      else {
        int v108 = 0;
      }
      uint64_t v151 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 72, 8);
      *(_DWORD *)(v151 + 16) = 0;
      *(unsigned char *)(v151 + 20) = 2;
      *(_DWORD *)(v151 + 24) = v107;
      *(void *)(v151 + 32) = "HALS_IOContextHostedDSP.cpp";
      *(_DWORD *)(v151 + 40) = 1554;
      *(_DWORD *)(v151 + 44) = v108;
      *(_DWORD *)(v151 + 48) = 90;
      *(void *)(v151 + 56) = v172;
      *(void *)(v151 + 64) = v96;
      *(void *)uint64_t v151 = &unk_1F147EC18;
      *(void *)(v151 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v105, (caulk::concurrent::message *)v151);
      if (*((void *)&v185 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v185 + 1));
      }
      int v103 = 2;
    }
    goto LABEL_171;
  }
  *(void *)&block.double mSampleTime = &unk_1F147EB30;
  block.UInt64 mHostTime = (UInt64)&v189;
  *(void *)&block.Float64 mRateScalar = v184;
  block.mWordClockTime = (UInt64)&block;
  HALB_RealtimeDuration_Collection::enumSubDurations(v93, (uint64_t)&block);
  vDSP_Stride v144 = (AMCP::Log::Scope_Registry *)std::__function::__value_func<void ()(std::shared_ptr<HALB_InstrumentedEvent_RealtimeDuration const>)>::~__value_func[abi:ne180100](&block);
  AMCP::Log::Scope_Registry::get(v144);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v185, "com.apple.coreaudio", "AMCP");
  long long v145 = *(caulk::concurrent::messenger **)(v185 + 8);
  uint64_t v146 = pthread_self();
  mach_port_t v147 = pthread_mach_thread_np(v146);
  if (!*(void *)&v189.mSampleTime)
  {
    int v148 = 0;
    goto LABEL_163;
  }
  int v148 = (*(uint64_t (**)(void))(**(void **)&v189.mSampleTime + 16))(*(void *)&v189.mSampleTime);
  if (!*(void *)&v189.mSampleTime)
  {
LABEL_163:
    uint64_t v149 = 0;
    goto LABEL_164;
  }
  uint64_t v149 = (*(uint64_t (**)(void))(**(void **)&v189.mSampleTime + 24))(*(void *)&v189.mSampleTime);
LABEL_164:
  uint64_t v150 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 72, 8);
  *(_DWORD *)(v150 + 16) = 0;
  *(unsigned char *)(v150 + 20) = 16;
  *(_DWORD *)(v150 + 24) = v147;
  *(void *)(v150 + 32) = "HALS_IOContextHostedDSP.cpp";
  *(_DWORD *)(v150 + 40) = 1541;
  *(_DWORD *)(v150 + 44) = v148;
  *(void *)(v150 + 48) = v149;
  *(void *)(v150 + 56) = v172;
  *(void *)(v150 + 64) = v96;
  *(void *)uint64_t v150 = &unk_1F147EBC0;
  *(void *)(v150 + 8) = 0;
  caulk::concurrent::messenger::enqueue(v145, (caulk::concurrent::message *)v150);
  if (*((void *)&v185 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v185 + 1));
  }
  int v103 = 3;
LABEL_171:
  if (v189.mHostTime) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v189.mHostTime);
  }
LABEL_173:
  char v92 = v164;
  if (v164) {
LABEL_127:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v92);
LABEL_128:
  if (v173 >= v96) {
    uint64_t v109 = v96;
  }
  else {
    uint64_t v109 = 0;
  }
  v173 -= v109;
  if (v103 == 3)
  {
    kdebug_trace();
    char v110 = 1;
    goto LABEL_134;
  }
LABEL_133:
  char v110 = 0;
LABEL_134:
  uint64_t v111 = *(void *)(a1 + 24);
  uint64_t v112 = *(void *)(v111 + 224);
  int v113 = *(_DWORD *)(a1 + 1304);
  if (*(char *)(a1 + 2079) < 0)
  {
    std::string::__init_copy_ctor_external(&v180, *(const std::string::value_type **)(a1 + 2056), *(void *)(a1 + 2064));
    uint64_t v111 = *(void *)(a1 + 24);
  }
  else
  {
    std::string v180 = *(std::string *)(a1 + 2056);
  }
  uint64_t v114 = *((void *)a2 + 18);
  double v115 = *((double *)a2 + 10);
  uint64_t v116 = *(void *)(*(void *)(a1 + 1520) + 768);
  int v117 = *(_DWORD *)(*(void *)(v111 + 64) + 4);
  float v118 = *(float *)(a1 + 1328);
  uint64_t v119 = *(void *)(a1 + 1312);
  v184[0] = 0;
  pthread_threadid_np(0, v184);
  LOBYTE(block.mSampleTime) = 0;
  HIDWORD(block.mSampleTime) = v170;
  LODWORD(block.mHostTime) = v113;
  BYTE4(block.mHostTime) = v171;
  *(_WORD *)((char *)&block.mHostTime + 5) = 0;
  HIBYTE(block.mHostTime) = v110;
  block.Float64 mRateScalar = v84 - v85;
  block.mWordClockTime = *(void *)&v179.mSampleTime;
  *(double *)&block.mSMPTETime.mSubframes = (double)v179.mHostTime;
  block.mSMPTETime.mType = v75;
  *(void *)&block.mSMPTETime.mHours = v184[0];
  *(void *)&block.mFlags = v114;
  Float64 mRateScalar = v115;
  int v120 = SHIBYTE(v180.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__s, v180.__r_.__value_.__l.__data_, v180.__r_.__value_.__l.__size_);
  }
  else {
    std::string __s = v180;
  }
  double v121 = v118;
  unint64_t v122 = *(void *)(v112 + 32);
  unint64_t v123 = *((void *)v176 + 2);
  uint64_t v124 = __udivti3();
  *(void *)&long long v207 = v116;
  DWORD2(v207) = v117;
  *(void *)&long long v208 = v173;
  *((void *)&v208 + 1) = v172;
  if (v123 >= v122) {
    uint64_t v125 = v124;
  }
  else {
    uint64_t v125 = -v124;
  }
  *(void *)&long long v209 = v166;
  *((void *)&v209 + 1) = v125;
  *(double *)&long long v210 = v121;
  *((void *)&v210 + 1) = v81;
  long long v211 = v119;
  long long v212 = v169;
  *(void *)&v213[0] = v90;
  *(_OWORD *)((char *)v213 + 8) = v168;
  *(_OWORD *)((char *)&v213[1] + 8) = v167;
  *(_OWORD *)((char *)&v213[2] + 8) = 0u;
  *(_OWORD *)((char *)&v213[3] + 8) = 0u;
  *((void *)&v213[4] + 1) = 0;
  AudioTimeStamp v189 = block;
  Float64 v190 = mRateScalar;
  int v126 = SHIBYTE(__s.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = __s;
  }
  long long v196 = v211;
  long long v197 = v212;
  long long v201 = v213[3];
  long long v202 = v213[4];
  long long v198 = v213[0];
  long long v199 = v213[1];
  long long v200 = v213[2];
  long long v192 = v207;
  long long v193 = v208;
  long long v194 = v209;
  long long v195 = v210;
  long long v128 = *(_OWORD *)&v177->mRateScalar;
  long long v185 = *(_OWORD *)&v177->mSampleTime;
  long long v127 = v185;
  long long v186 = v128;
  long long v130 = *(_OWORD *)&v177->mSMPTETime.mHours;
  long long v187 = *(_OWORD *)&v177->mSMPTETime.mSubframes;
  long long v129 = v187;
  long long v188 = v130;
  *(unsigned char *)uint64_t v112 = 1;
  *(_OWORD *)(v112 + 24) = v127;
  *(_OWORD *)(v112 + 40) = v128;
  *(_OWORD *)(v112 + 56) = v129;
  *(_OWORD *)(v112 + 72) = v130;
  uint64_t v131 = *(void *)(v112 + 8);
  long long v132 = *(_OWORD *)&v189.mRateScalar;
  long long v133 = *(_OWORD *)&v189.mSMPTETime.mSubframes;
  long long v134 = *(_OWORD *)&v189.mSMPTETime.mHours;
  *(Float64 *)(v131 + 64) = v190;
  *(_OWORD *)(v131 + 32) = v133;
  *(_OWORD *)(v131 + 48) = v134;
  *(_OWORD *)(v131 + 16) = v132;
  *(_OWORD *)uint64_t v131 = *(_OWORD *)&v189.mSampleTime;
  a2 = v176;
  std::string::operator=((std::string *)(v131 + 72), &__p);
  long long v135 = v192;
  long long v136 = v194;
  *(_OWORD *)(v131 + 112) = v193;
  *(_OWORD *)(v131 + 128) = v136;
  *(_OWORD *)(v131 + 96) = v135;
  long long v137 = v195;
  long long v138 = v196;
  long long v139 = v198;
  *(_OWORD *)(v131 + 176) = v197;
  *(_OWORD *)(v131 + 192) = v139;
  *(_OWORD *)(v131 + 144) = v137;
  *(_OWORD *)(v131 + 160) = v138;
  long long v140 = v199;
  long long v141 = v200;
  long long v142 = v202;
  *(_OWORD *)(v131 + 240) = v201;
  *(_OWORD *)(v131 + 256) = v142;
  *(_OWORD *)(v131 + 208) = v140;
  *(_OWORD *)(v131 + 224) = v141;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  long long v70 = v174;
  if (v126 < 0)
  {
    operator delete(__s.__r_.__value_.__l.__data_);
    if (v120 < 0) {
      goto LABEL_156;
    }
  }
  else
  {
    if ((v120 & 0x80000000) == 0) {
      goto LABEL_150;
    }
LABEL_156:
    operator delete(v180.__r_.__value_.__l.__data_);
  }
LABEL_150:
  unint64_t v76 = (AudioTimeStamp *)v165;
  int v143 = HALS_IOContext_Legacy_Impl::IOWorkLoop_HandleOverload(a1, v177, (uint64_t)&v179, v165, v75);
  if (*(_DWORD *)(a1 + 1384) == 3)
  {
    *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 24) + 224) + 8) + 13) = 1;
    if ((v143 & 1) == 0) {
      goto LABEL_175;
    }
    goto LABEL_94;
  }
  if (v143)
  {
LABEL_94:
    memset(&v189, 0, 24);
    DWORD2(v185) = v75;
    *(void *)&long long v186 = &v189;
    v183[0] = caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContext_Legacy_Impl::IOWorkLoop_CalculateWakeTimeAndCheckOverload(CAAudioTimeStamp &,CAAudioTimeStamp const&,HALS_IOContext_Legacy_Impl::PerformIOReturn,unsigned int,unsigned int,long long,long long,CAAudioTimeStamp &,CAAudioTimeStamp &)::$_0>;
    v183[1] = &v185;
    int v182 = v183;
    v181[0] = &unk_1F14809E0;
    v181[1] = a1 + 1496;
    v184[0] = (__uint64_t)_ZN5caulk12function_refIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEE15functor_invokerIZN25HALS_IOContextDescription62ApplyToActiveOutput_ButSkipClocklessReferenceStreamOnlyEnginesES6_EUljRT_jjRT0_E_EEiRKNS_7details15erased_callableIS5_EEjS2_jjS4_;
    v184[1] = (__uint64_t)&v182;
    *(void *)&long long v185 = a1;
    *(void *)&block.double mSampleTime = caulk::function_ref<int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::functor_invoker<int HALS_IOContextDescription::ApplyToOutput<HALS_IOContextDescription::ActiveOutputsOnly>(caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription&,unsigned int,unsigned int,HALS_IOStreamInfo &)>,HALS_IOContextDescription::ActiveOutputsOnly const&)::{lambda(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)#1}>;
    block.UInt64 mHostTime = (UInt64)v184;
    VisitableVector<HALS_IOStackDescription>::do_apply<std::vector<HALS_IOStackDescription>,VisitableVector<HALS_IOStackDescription>::ItemWithIndex,HALS_IOContextDescription::ActiveOutputsOnly>(*(void *)(a1 + 1576), *(void *)(a1 + 1584), &block, (uint64_t)v181);
    if (v189.mHostTime == *(_DWORD *)(a1 + 1304)) {
      *(Float64 *)(*(void *)(*(void *)(*(void *)(a1 + 24) + 224) + 8) + 168) = v189.mSampleTime;
    }
    int v74 = 0;
    BOOL v73 = 1;
    char v69 = 1;
    goto LABEL_97;
  }
LABEL_175:
  char v69 = 0;
LABEL_176:
  HALB_IOThread::HasBeenStopped(v70);
LABEL_177:
  double v152 = (double)*((unint64_t *)a2 + 2);
  if (v152 + 24000000.0 < (double)*((unint64_t *)a2 + 10)) {
    *((void *)a2 + 10) = (unint64_t)(*((double *)a2 + 26) + v152);
  }
LABEL_179:
  (*(void (**)(void))(**(void **)(*(void *)(a1 + 24) + 96) + 712))(*(void *)(*(void *)(a1 + 24)
                                                                                                  + 96));
  kdebug_trace();
  if (v69)
  {
    *(_DWORD *)(a1 + 1304) = 0;
    v178[0] = 0;
    v178[1] = 0;
    HALS_System::GetInstance(&v185, 0, v178);
    uint64_t v153 = v185;
    if ((void)v185)
    {
      if (*(unsigned char *)(v185 + 1496))
      {
        if (*(unsigned char *)(*(void *)(a1 + 24) + 233))
        {
          uint64_t v154 = mach_absolute_time();
          if (*(unsigned char *)(v153 + 1496))
          {
            uint64_t v155 = *(uint64_t **)(v153 + 1480);
            if (v155)
            {
              uint64_t v156 = v154;
              std::string::basic_string[abi:ne180100]<0>(&v189, "HAL-Generated Dump");
              uint64_t v157 = *v155;
              *(void *)&block.double mSampleTime = MEMORY[0x1E4F143A8];
              block.UInt64 mHostTime = 3321888768;
              *(void *)&block.Float64 mRateScalar = ___ZN13HALB_Tailspin17DumpTailspinAsyncEyNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
              block.mWordClockTime = (UInt64)&__block_descriptor_72_ea8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e5_v8__0l;
              *(void *)&block.mSMPTETime.mSubframes = v155;
              *(void *)&block.mSMPTETime.mType = v156;
              if (SHIBYTE(v189.mRateScalar) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&block.mSMPTETime.mHours, *(const std::string::value_type **)&v189.mSampleTime, v189.mHostTime);
              }
              else
              {
                *(_OWORD *)&block.mSMPTETime.mHours = *(_OWORD *)&v189.mSampleTime;
                Float64 mRateScalar = v189.mRateScalar;
              }
              unsigned __int8 v162 = atomic_load((unsigned __int8 *)(v157 + 32));
              if (v162) {
                atomic_store(1u, (unsigned __int8 *)(v157 + 33));
              }
              dispatch_async(*(dispatch_queue_t *)v157, &block);
              if (SHIBYTE(mRateScalar) < 0) {
                operator delete(*(void **)&block.mSMPTETime.mHours);
              }
              if (SHIBYTE(v189.mRateScalar) < 0) {
                operator delete(*(void **)&v189.mSampleTime);
              }
            }
          }
        }
      }
    }
    unint64_t v161 = (std::__shared_weak_count *)*((void *)&v185 + 1);
    if (*((void *)&v185 + 1)) {
LABEL_201:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v161);
  }
  else
  {
    uint64_t v158 = *(void *)(a1 + 24);
    uint64_t v159 = *(void *)(v158 + 80);
    unsigned int v160 = *(std::__shared_weak_count **)(v158 + 88);
    if (v160) {
      atomic_fetch_add_explicit(&v160->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v159) {
      (*(void (**)(uint64_t, double))(*(void *)v159 + 64))(v159, *(double *)(a1 + 1456));
    }
    if (v160)
    {
      unint64_t v161 = v160;
      goto LABEL_201;
    }
  }
}

void sub_1BAE53CA4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,HALB_IOThread *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,long long a33,int a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  if (a2)
  {
    if (a65 < 0) {
      operator delete(__p);
    }
    if (a53) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a53);
    }
    uint64_t v67 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(a1);
    AMCP::Log::Scope_Registry::get(v67);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a45, "com.apple.coreaudio", "AMCP");
    uint64_t v68 = *(caulk::concurrent::messenger **)(a45 + 8);
    a47 = 16;
    char v69 = pthread_self();
    mach_port_t v70 = pthread_mach_thread_np(v69);
    char HasBeenStopped = HALB_IOThread::HasBeenStopped(a27);
    LODWORD(a33) = v70;
    *((void *)&a33 + 1) = "HALS_IOContext_Legacy_Impl.cpp";
    a34 = 2189;
    a35 = HasBeenStopped;
    a36 = *(unsigned char *)(v65 + 249);
    caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>(v68, &a47, &a33);
    if (a46) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a46);
    }
    *(unsigned char *)(v65 + 249) = 1;
    __cxa_end_catch();
    JUMPOUT(0x1BAE53B9CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BAE53F04()
{
}

void sub_1BAE53F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAE53D6CLL);
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,int,char *>>(caulk::concurrent::messenger *a1, unsigned char *a2, long long *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = &unk_1F147B650;
  *(void *)(v6 + 8) = 0;
  *(unsigned char *)(v6 + 20) = *a2;
  long long v7 = *a3;
  *(_OWORD *)(v6 + 40) = a3[1];
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)uint64_t v6 = &unk_1F147B5F8;

  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_5,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>(caulk::concurrent::messenger *a1, unsigned char *a2, long long *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = &unk_1F147B6D0;
  *(void *)(v6 + 8) = 0;
  *(unsigned char *)(v6 + 20) = *a2;
  long long v7 = *a3;
  *(void *)(v6 + 40) = *((void *)a3 + 2);
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)uint64_t v6 = &unk_1F147B678;

  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_6,std::tuple<unsigned int,char const*,int,BOOL>>(caulk::concurrent::messenger *a1, unsigned char *a2, long long *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = &unk_1F147B750;
  *(void *)(v6 + 8) = 0;
  *(unsigned char *)(v6 + 20) = *a2;
  long long v7 = *a3;
  *(void *)(v6 + 40) = *((void *)a3 + 2);
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)uint64_t v6 = &unk_1F147B6F8;

  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_6,std::tuple<unsigned int,char const*,int,BOOL>>::perform(caulk::concurrent::message *a1)
{
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90]
                                                                                           + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_6,std::tuple<unsigned int,char const*,int,BOOL>>::perform(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  char v2 = *v8;
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(unsigned __int8 *)(a1 + 44);
    LODWORD(v8) = 67109890;
    HIDWORD(v8) = v4;
    *(_WORD *)uint64_t v9 = 2080;
    *(void *)&v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    __int16 v12 = 1024;
    int v13 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Completed HALS_IOContext_Legacy_Impl::IOWorkLoopInit - %d", (uint8_t *)&v8, 0x1Eu);
  }
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_6,std::tuple<unsigned int,char const*,int,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_6,std::tuple<unsigned int,char const*,int,BOOL>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_5,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(caulk::concurrent::message *a1)
{
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90]
                                                                                           + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_5,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  char v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(unsigned __int8 *)(a1 + 44);
    int v8 = *(unsigned __int8 *)(a1 + 45);
    LODWORD(v9) = 67110146;
    HIDWORD(v9) = v4;
    *(_WORD *)__int16 v10 = 2080;
    *(void *)&void v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    __int16 v15 = 1024;
    int v16 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d An Exception was thrown during Init - thread hasBeenStopped: %d and shouldExit: %d", (uint8_t *)&v9, 0x24u);
  }
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_5,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_5,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,int,char *>>::perform(caulk::concurrent::message *a1)
{
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90]
                                                                                           + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  char v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    uint64_t v8 = *(void *)(a1 + 48);
    LODWORD(v9) = 67110146;
    HIDWORD(v9) = v4;
    *(_WORD *)__int16 v10 = 2080;
    *(void *)&void v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    __int16 v15 = 2080;
    uint64_t v16 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Failed to set the RT safe syscall masks: %d - %s", (uint8_t *)&v9, 0x28u);
  }
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,int,char *>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t std::function<void ()(HALS_IOContext_Legacy_Impl *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v3);
}

void *std::__function::__value_func<void ()(HALS_IOContext_Legacy_Impl *)>::operator=[abi:ne180100](void *a1)
{
  char v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>(caulk::concurrent::messenger *a1, unsigned char *a2, long long *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = &unk_1F147BA08;
  *(void *)(v6 + 8) = 0;
  *(unsigned char *)(v6 + 20) = *a2;
  long long v7 = *a3;
  *(void *)(v6 + 40) = *((void *)a3 + 2);
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)uint64_t v6 = &unk_1F147B9B0;

  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(caulk::concurrent::message *a1)
{
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90]
                                                                                           + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  char v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(unsigned __int8 *)(a1 + 44);
    int v8 = *(unsigned __int8 *)(a1 + 45);
    LODWORD(v9) = 67110146;
    HIDWORD(v9) = v4;
    *(_WORD *)__int16 v10 = 2080;
    *(void *)&void v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    __int16 v15 = 1024;
    int v16 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d An Exception was thrown during SyncTimeline - thread hasBeenStopped: %d and shouldExit: %d", (uint8_t *)&v9, 0x24u);
  }
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int,double,double,double,long long,unsigned long long>>::perform(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
  char v2 = *v13;
  if (*(void *)v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 64);
    uint64_t v10 = *(void *)(a1 + 72);
    uint64_t v11 = *(void *)(a1 + 80);
    LODWORD(v13) = 67110914;
    HIDWORD(v13) = v4;
    *(_WORD *)int v14 = 2080;
    *(void *)&void v14[2] = v5;
    __int16 v15 = 1024;
    int v16 = v6;
    __int16 v17 = 2048;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = v8;
    __int16 v21 = 2048;
    uint64_t v22 = v9;
    __int16 v23 = 2048;
    uint64_t v24 = v10;
    __int16 v25 = 2048;
    uint64_t v26 = v11;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Switching to realtime - end of next buffer: %0.f  last valid: %0.f  wakeTime: %0.f  next buffer host: %llu  wake host: %llu", (uint8_t *)&v13, 0x4Au);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 88, 8);
}

void sub_1BAE54C70(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int,double,double,double,long long,unsigned long long>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>(uint64_t (****a1)(uint64_t, uint64_t), uint64_t **a2)
{
  char v2 = *a1;
  os_log_type_t v3 = *a2;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)**a2 + 16))(**a2);
  if (result)
  {
    uint64_t v5 = *v3;
    uint64_t v6 = (uint64_t)(*v2 + 1);
    uint64_t v7 = **v2;
    return v7(v6, v5);
  }
  return result;
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl22IOWorkLoopSyncTimelineERNS_17IOWorkLoopContextEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 424) = 0;
  (*(void (**)(void, void, uint64_t))(**(void **)(a2 + 8) + 392))(*(void *)(a2 + 8), *(unsigned int *)(a1 + 8), a2);
  return 0;
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1F147B8D8;
  a2[1] = *(void *)(result + 8);
  return result;
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F147B8D8;
  result[1] = v3;
  return result;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2>,int ()(HALS_IOEngineInfo &)>::~__func()
{
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  char v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    uint64_t v8 = *(void *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)uint64_t v11 = 2080;
    *(void *)&void v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 2080;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Failed to update realtime priority parameters with code: %d - %s", (uint8_t *)&v10, 0x28u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAE54FAC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ConstItemWithIndex &)>::functor_invoker<HALS_IOContext_Legacy_Impl::GetLargestInputSafetyOffsetInHostSamples(void)::$_0>(double ***a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*(_DWORD *)(*a2 + 108)
    || ((os_log_type_t v3 = *(uint64_t **)(v2 + 112), *(uint64_t **)(v2 + 120) != v3) ? (v4 = v3 == 0) : (v4 = 1), v4))
  {
    os_log_type_t v3 = (uint64_t *)(v2 + 408);
  }
  uint64_t v5 = *v3;
  if (*(void *)(*v3 + 8))
  {
    double v6 = *((double *)*a1 + 1);
    double v7 = *(double *)(v5 + 768) / v6;
    LODWORD(v6) = *(_DWORD *)(v5 + 316);
    double v8 = v7 * (double)*(unint64_t *)&v6;
    uint64_t v9 = **a1;
    if (*v9 >= v8) {
      double v8 = *v9;
    }
    *uint64_t v9 = v8;
  }
  return 0;
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v11, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v11;
  if (*(void *)v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v12);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    int v9 = *(_DWORD *)(a1 + 52);
    LODWORD(v11) = 67110402;
    HIDWORD(v11) = v4;
    *(_WORD *)__int16 v12 = 2080;
    *(void *)&uint64_t v12[2] = v5;
    __int16 v13 = 1024;
    int v14 = v6;
    __int16 v15 = 1024;
    int v16 = v7;
    __int16 v17 = 1024;
    int v18 = v8;
    __int16 v19 = 1024;
    int v20 = v9;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d ioc (%u) - handle buffer frame size change, old %u new %u", (uint8_t *)&v11, 0x2Au);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAE551AC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t HALS_IOContext_Legacy_Impl::IOWorkLoop_Engine_BeginIO(HALS_IOContext_Legacy_Impl *this, HALS_IOContext_Legacy_Impl *a2, HALS_IOEngineInfo *a3)
{
  if (!*((void *)a2 + 1)) {
    return 0;
  }
  v10[0] = &unk_1F147A8C8;
  v10[1] = this;
  HALS_IOPerformer::update_io_parameters((uint64_t)v10, a2, (uint64_t)a3, 0, 1);
  uint64_t v5 = *((void *)a2 + 1);
  uint64_t v6 = *(unsigned int *)(*((void *)this + 3) + 16);
  HALS_IOContextDescription::CreateDriverIOThreadStateChangeDictionary((applesauce::CF::DictionaryRef *)&cf, (uint64_t)this + 1496, 0);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, HALS_IOContext_Legacy_Impl *, CFTypeRef *))(*(void *)v5 + 712))(v5, v6, a2, &cf);
  if (cf) {
    CFRelease(cf);
  }
  return v7;
}

void sub_1BAE552E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int,int,char *>>::perform(caulk::concurrent::message *a1)
{
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90]
                                                                                           + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    uint64_t v8 = *(void *)(a1 + 48);
    LODWORD(v9) = 67110146;
    HIDWORD(v9) = v4;
    *(_WORD *)uint64_t v10 = 2080;
    *(void *)&void v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    __int16 v15 = 2080;
    uint64_t v16 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Failed to change thread to realtime priority with code: %d - %s", (uint8_t *)&v9, 0x28u);
  }
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int,int,char *>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(caulk::concurrent::message *a1)
{
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90]
                                                                                           + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(unsigned __int8 *)(a1 + 44);
    int v8 = *(unsigned __int8 *)(a1 + 45);
    LODWORD(v9) = 67110146;
    HIDWORD(v9) = v4;
    *(_WORD *)uint64_t v10 = 2080;
    *(void *)&void v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    __int16 v15 = 1024;
    int v16 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d WaitForClientToBeginTransport failed - thread hasBeenStopped: %d and shouldExit: %d", (uint8_t *)&v9, 0x24u);
  }
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(caulk::concurrent::message *a1)
{
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90]
                                                                                           + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(unsigned __int8 *)(a1 + 44);
    int v8 = *(unsigned __int8 *)(a1 + 45);
    LODWORD(v9) = 67110146;
    HIDWORD(v9) = v4;
    *(_WORD *)uint64_t v10 = 2080;
    *(void *)&void v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    __int16 v15 = 1024;
    int v16 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d During init we were told to stop - thread hasBeenStopped: %d and shouldExit: %d", (uint8_t *)&v9, 0x24u);
  }
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContext_Legacy_Impl::UpdateEngineMixing(void)::$_0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!*(_DWORD *)(a6 + 108)
    || ((int v6 = *(uint64_t **)(a6 + 112), *(uint64_t **)(a6 + 120) != v6) ? (v7 = v6 == 0) : (v7 = 1), v7))
  {
    int v6 = (uint64_t *)(a6 + 408);
  }
  uint64_t v8 = *v6;
  uint64_t v9 = *(void *)(v8 + 8);
  if (v9 && *(unsigned char *)(v8 + 751)) {
    (*(void (**)(uint64_t))(*(void *)v9 + 704))(v9);
  }
  return 0;
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(unsigned __int8 *)(a1 + 44);
    int v8 = *(unsigned __int8 *)(a1 + 45);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)__int16 v11 = 2080;
    *(void *)&void v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d During init we were told to exit - thread hasBeenStopped: %d and shouldExit: %d", (uint8_t *)&v10, 0x24u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAE55A88(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void *std::__function::__value_func<int ()(HALS_IOEngineInfo const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ConstItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(caulk::function_ref<int ()(HALS_IOEngineInfo const&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ConstItemWithIndex &)#1}>(uint64_t (****a1)(uint64_t, uint64_t), uint64_t **a2)
{
  uint64_t v2 = *a1;
  os_log_type_t v3 = *a2;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)**a2 + 16))(**a2);
  if (result)
  {
    uint64_t v5 = *v3;
    uint64_t v6 = (uint64_t)(*v2 + 1);
    int v7 = **v2;
    return v7(v6, v5);
  }
  return result;
}

uint64_t caulk::function_ref<int ()(HALS_IOEngineInfo const&)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo const&)>>(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void *std::__function::__func<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo const&)>::target_type()
{
}

uint64_t std::__function::__func<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__16__bindIRFiRK17HALS_IOEngineInfojEJRKNS_12placeholders4__phILi1EEERjEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 8))(a2, *(unsigned int *)(a1 + 16));
}

__n128 std::__function::__func<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F147C398;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F147C398;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>,std::allocator<std::__bind<int (&)(HALS_IOEngineInfo const&,unsigned int),std::placeholders::__ph<1> const&,unsigned int &>>,int ()(HALS_IOEngineInfo const&)>::~__func()
{
}

BOOL HALS_IOContext_Legacy_Impl::IsTimeRunning_Helper(HALS_IOContext_Legacy_Impl *this, const HALS_IOEngineInfo *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 1)) {
    return 0;
  }
  int v3 = *(_DWORD *)(*((void *)this + 36) + 96);
  BOOL result = v3 == 0;
  if (a2 == 1 && !v3)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315650;
      uint64_t v6 = "HALS_IOContext_Legacy_Impl.cpp";
      __int16 v7 = 1024;
      int v8 = 3508;
      __int16 v9 = 2082;
      uint64_t v10 = (char *)this + 32;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IsTimeRunning_Helper: Device %{public}s is not running.", (uint8_t *)&v5, 0x1Cu);
    }
    return 1;
  }
  return result;
}

uint64_t HALS_IOContext_Legacy_Impl::ResetTime_Helper(HALS_IOContext_Legacy_Impl *this, uint64_t a2, HALS_IOEngineInfo *a3)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    int v5 = *(HALS_IOClock **)(a2 + 288);
    double v6 = *(double *)(a2 + 768);
    int v7 = *(_DWORD *)(a2 + 776);
    int v8 = *(_DWORD *)(a2 + 780);
    char v9 = *(unsigned char *)(a2 + 784);
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 376))(v3);
    HALS_IOClock::Reset(v5, v6, v7, v8, v9, v10);
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a2 + 8) + 880))(&v19);
    uint64_t v11 = v19;
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (v11)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a2 + 8) + 880))(&v19);
      uint64_t v12 = v19;
      double v13 = *(double *)(a2 + 768);
      int v14 = *(_DWORD *)(a2 + 776);
      int v15 = *(_DWORD *)(a2 + 780);
      int v16 = *(unsigned __int8 *)(a2 + 784);
      int v17 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 376))();
      HALS_IOClock::Reset(*(HALS_IOClock **)(v12 + 56), v13, v14, v15, v16 != 0, v17);
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
    }
  }
  return 0;
}

void sub_1BAE55FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::_ResetOverloadTimeOnEngines(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::_ResetOverloadTimeOnEngines(void)::$_0>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::_ResetOverloadTimeOnEngines(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::_ResetOverloadTimeOnEngines(void)::$_0>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl27_ResetOverloadTimeOnEnginesEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::_ResetOverloadTimeOnEngines(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::_ResetOverloadTimeOnEngines(void)::$_0>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 824) = 0u;
  *(_OWORD *)(a2 + 840) = 0u;
  *(_OWORD *)(a2 + 792) = 0u;
  *(_OWORD *)(a2 + 808) = 0u;
  return 0;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::_ResetOverloadTimeOnEngines(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::_ResetOverloadTimeOnEngines(void)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F147C280;
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::_ResetOverloadTimeOnEngines(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::_ResetOverloadTimeOnEngines(void)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F147C280;
  return result;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::_ResetOverloadTimeOnEngines(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::_ResetOverloadTimeOnEngines(void)::$_0>,int ()(HALS_IOEngineInfo &)>::~__func()
{
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::RegisterIOThread(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::RegisterIOThread(void)::$_0>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::RegisterIOThread(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::RegisterIOThread(void)::$_0>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl16RegisterIOThreadEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::RegisterIOThread(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::RegisterIOThread(void)::$_0>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (!v2) {
    return 0;
  }
  if ((*(uint64_t (**)(void))(*(void *)v2 + 320))(*(void *)(a2 + 8))) {
    uint64_t v6 = *(unsigned int *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 320))(v2) + 44);
  }
  else {
    uint64_t v6 = 0;
  }
  v5.n128_u64[0] = *(void *)(a2 + 768);
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 12);
  uint64_t v10 = **(unsigned int **)(a1 + 16);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(void *)v2 + 640);

  return v11(v2, v6, v8, v9, v10, v5);
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::RegisterIOThread(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::RegisterIOThread(void)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F147BF88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::RegisterIOThread(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::RegisterIOThread(void)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F147BF88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::RegisterIOThread(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::RegisterIOThread(void)::$_0>,int ()(HALS_IOEngineInfo &)>::~__func()
{
}

float HALS_IOContext_Legacy_Impl::GetScalarVolume(HALS_IOContext_Legacy_Impl *this)
{
  if (!this) {
    return 1.0;
  }
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 1.0;
  }
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 320))(v1);
  if (!v2) {
    return 1.0;
  }
  uint64_t v3 = *(void (**)(void))(*(void *)v2 + 248);

  v3();
  return result;
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::StartHardware(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::StartHardware(void)::$_0>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::StartHardware(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::StartHardware(void)::$_0>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl13StartHardwareEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::StartHardware(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::StartHardware(void)::$_0>,int ()(HALS_IOEngineInfo &)>::operator()(void *a1, HALS_IOContext_Legacy_Impl *a2)
{
  int v4 = (HALS_IOContext_Legacy_Impl *)a1[3];
  v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t started = HALS_IOContext_Legacy_Impl::StartHardware_Helper(v4, a2, v6);
  v8.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  uint64_t v9 = *((void *)a2 + 1);
  if (v9 && (*(uint64_t (**)(uint64_t))(*(void *)v9 + 320))(v9))
  {
    unint64_t v10 = *(unsigned int *)((*(uint64_t (**)(void))(**((void **)a2 + 1) + 320))(*((void *)a2 + 1)) + 16);
    uint64_t v11 = a1[1];
    double v13 = *(_DWORD **)(v11 + 8);
    unint64_t v12 = *(void *)(v11 + 16);
    if ((unint64_t)v13 >= v12)
    {
      int v15 = *(_DWORD **)v11;
      uint64_t v16 = ((uint64_t)v13 - *(void *)v11) >> 2;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 62) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v18 = v12 - (void)v15;
      if (v18 >> 1 > v17) {
        unint64_t v17 = v18 >> 1;
      }
      BOOL v19 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v19) {
        unint64_t v20 = v17;
      }
      if (v20)
      {
        unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v20);
        int v15 = *(_DWORD **)v11;
        double v13 = *(_DWORD **)(v11 + 8);
      }
      else
      {
        uint64_t v21 = 0;
      }
      uint64_t v22 = (_DWORD *)(v20 + 4 * v16);
      unint64_t v23 = v20 + 4 * v21;
      _DWORD *v22 = v10;
      unint64_t v14 = (unint64_t)(v22 + 1);
      while (v13 != v15)
      {
        int v24 = *--v13;
        *--uint64_t v22 = v24;
      }
      *(void *)uint64_t v11 = v22;
      *(void *)(v11 + 8) = v14;
      *(void *)(v11 + 16) = v23;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *double v13 = v10;
      unint64_t v14 = (unint64_t)(v13 + 1);
    }
    *(void *)(v11 + 8) = v14;
    uint64_t v25 = a1[2];
    unint64_t v26 = *(void *)(v25 + 8);
    if (v26)
    {
      uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
      v27.i16[0] = vaddlv_u8(v27);
      if (v27.u32[0] > 1uLL)
      {
        unint64_t v14 = v10;
        if (v26 <= v10) {
          unint64_t v14 = v10 % v26;
        }
      }
      else
      {
        unint64_t v14 = (v26 - 1) & v10;
      }
      int v28 = *(uint64_t ***)(*(void *)v25 + 8 * v14);
      if (v28)
      {
        for (char i = *v28; i; char i = (uint64_t *)*i)
        {
          unint64_t v30 = i[1];
          if (v30 == v10)
          {
            if (*((_DWORD *)i + 4) == v10) {
              return started;
            }
          }
          else
          {
            if (v27.u32[0] > 1uLL)
            {
              if (v30 >= v26) {
                v30 %= v26;
              }
            }
            else
            {
              v30 &= v26 - 1;
            }
            if (v30 != v14) {
              break;
            }
          }
        }
      }
    }
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v31 = (v8.__d_.__rep_ - v5.__d_.__rep_) / 1000;
    double v32 = operator new(0x20uLL);
    void *v32 = 0;
    v32[1] = v10;
    *((_DWORD *)v32 + 4) = v10;
    v32[3] = v31;
    float v33 = (float)(unint64_t)(*(void *)(v25 + 24) + 1);
    float v34 = *(float *)(v25 + 32);
    if (!v26 || (float)(v34 * (float)v26) < v33)
    {
      BOOL v35 = 1;
      if (v26 >= 3) {
        BOOL v35 = (v26 & (v26 - 1)) != 0;
      }
      unint64_t v36 = v35 | (2 * v26);
      unint64_t v37 = vcvtps_u32_f32(v33 / v34);
      if (v36 <= v37) {
        size_t v38 = v37;
      }
      else {
        size_t v38 = v36;
      }
      std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(v25, v38);
      unint64_t v26 = *(void *)(v25 + 8);
      if ((v26 & (v26 - 1)) != 0)
      {
        if (v26 <= v10) {
          unint64_t v14 = v10 % v26;
        }
        else {
          unint64_t v14 = v10;
        }
      }
      else
      {
        unint64_t v14 = (v26 - 1) & v10;
      }
    }
    uint64_t v39 = *(void *)v25;
    UInt64 v40 = *(void **)(*(void *)v25 + 8 * v14);
    if (v40)
    {
      void *v32 = *v40;
    }
    else
    {
      void *v32 = *(void *)(v25 + 16);
      *(void *)(v25 + 16) = v32;
      *(void *)(v39 + 8 * v14) = v25 + 16;
      if (!*v32)
      {
LABEL_56:
        ++*(void *)(v25 + 24);
        return started;
      }
      unint64_t v41 = *(void *)(*v32 + 8);
      if ((v26 & (v26 - 1)) != 0)
      {
        if (v41 >= v26) {
          v41 %= v26;
        }
      }
      else
      {
        v41 &= v26 - 1;
      }
      UInt64 v40 = (void *)(*(void *)v25 + 8 * v41);
    }
    *UInt64 v40 = v32;
    goto LABEL_56;
  }
  return started;
}

void sub_1BAE566D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::StartHardware(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::StartHardware(void)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F147C088;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::StartHardware(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::StartHardware(void)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F147C088;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::StartHardware(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::StartHardware(void)::$_0>,int ()(HALS_IOEngineInfo &)>::~__func()
{
}

void *HALS_IOContext_Legacy_Impl::get_devices_that_are_not_reference_stream_only(HALS_IOContext_Legacy_Impl *this, uint64_t a2)
{
  uint8_t v11[4] = *MEMORY[0x1E4F143B8];
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  int v4 = operator new(0x20uLL);
  *int v4 = &unk_1F147C458;
  v4[1] = HALS_IOContext_Legacy_Impl::CountActiveHardware_Helper;
  void v4[2] = this;
  void v4[3] = (char *)this + 24;
  void v11[3] = v4;
  uint64_t v6 = &unk_1F147D4B0;
  v8[0] = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
  v8[1] = v11;
  int v7 = &off_1F147D460;
  uint64_t v9 = v8;
  v10[0] = (uint64_t (*)(void, void *))caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
  v10[1] = (uint64_t (*)(void, void *))&v9;
  VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(*(void *)(a2 + 1528), *(void *)(a2 + 1536), v10, (uint64_t)&v7, (uint64_t)&v6);
  return std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v11);
}

void sub_1BAE568C4(_Unwind_Exception *a1)
{
  std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100]((void *)(v2 - 56));
  std::pair<std::vector<unsigned int>,std::vector<unsigned int>>::~pair(v1);
  _Unwind_Resume(a1);
}

_DWORD *HALS_IOContext_Legacy_Impl::CountActiveHardware_Helper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(_DWORD **)(a1 + 8);
  if (result)
  {
    __n128 result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 320))(result);
    if (result)
    {
      int v7 = result[4];
      if (v7)
      {
        int v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 400))(*(void *)(a1 + 8), 1);
        if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 8) + 400))(*(void *)(a1 + 8), 0))
        {
          unint64_t v10 = *(_DWORD **)(a3 + 8);
          unint64_t v9 = *(void *)(a3 + 16);
          if ((unint64_t)v10 >= v9)
          {
            unint64_t v12 = *(_DWORD **)a3;
            uint64_t v13 = ((uint64_t)v10 - *(void *)a3) >> 2;
            unint64_t v14 = v13 + 1;
            if ((unint64_t)(v13 + 1) >> 62) {
              goto LABEL_40;
            }
            uint64_t v15 = v9 - (void)v12;
            if (v15 >> 1 > v14) {
              unint64_t v14 = v15 >> 1;
            }
            BOOL v16 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v16) {
              unint64_t v17 = v14;
            }
            if (v17)
            {
              unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v17);
              unint64_t v12 = *(_DWORD **)a3;
              unint64_t v10 = *(_DWORD **)(a3 + 8);
            }
            else
            {
              uint64_t v18 = 0;
            }
            BOOL v19 = (_DWORD *)(v17 + 4 * v13);
            unint64_t v20 = v17 + 4 * v18;
            *BOOL v19 = v7;
            uint64_t v11 = v19 + 1;
            while (v10 != v12)
            {
              int v21 = *--v10;
              *--BOOL v19 = v21;
            }
            *(void *)a3 = v19;
            *(void *)(a3 + 8) = v11;
            *(void *)(a3 + 16) = v20;
            if (v12) {
              operator delete(v12);
            }
          }
          else
          {
            *unint64_t v10 = v7;
            uint64_t v11 = v10 + 1;
          }
          *(void *)(a3 + 8) = v11;
        }
        if (v8)
        {
          unint64_t v23 = *(_DWORD **)(a2 + 8);
          unint64_t v22 = *(void *)(a2 + 16);
          if ((unint64_t)v23 < v22)
          {
            _DWORD *v23 = v7;
            int v24 = v23 + 1;
LABEL_38:
            __n128 result = 0;
            *(void *)(a2 + 8) = v24;
            return result;
          }
          uint64_t v25 = *(_DWORD **)a2;
          uint64_t v26 = ((uint64_t)v23 - *(void *)a2) >> 2;
          unint64_t v27 = v26 + 1;
          if (!((unint64_t)(v26 + 1) >> 62))
          {
            uint64_t v28 = v22 - (void)v25;
            if (v28 >> 1 > v27) {
              unint64_t v27 = v28 >> 1;
            }
            BOOL v16 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v16) {
              unint64_t v29 = v27;
            }
            if (v29)
            {
              unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v29);
              uint64_t v25 = *(_DWORD **)a2;
              unint64_t v23 = *(_DWORD **)(a2 + 8);
            }
            else
            {
              uint64_t v30 = 0;
            }
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v31 = (_DWORD *)(v29 + 4 * v26);
            unint64_t v32 = v29 + 4 * v30;
            _DWORD *v31 = v7;
            int v24 = v31 + 1;
            while (v23 != v25)
            {
              int v33 = *--v23;
              *--std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v31 = v33;
            }
            *(void *)a2 = v31;
            *(void *)(a2 + 8) = v24;
            *(void *)(a2 + 16) = v32;
            if (v25) {
              operator delete(v25);
            }
            goto LABEL_38;
          }
LABEL_40:
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
      }
      return 0;
    }
  }
  return result;
}

void sub_1BAE56B64(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315394;
      *(void *)((char *)&a9 + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 3493;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::CountActiveHardware_Helper: Caught exception trying to collect engine info.", (uint8_t *)&a9, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAE56B28);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<std::__bind<int (&)(HALS_IOEngineInfo &,std::vector<unsigned int> &,std::vector<unsigned int> &),std::placeholders::__ph<1> const&,std::reference_wrapper<std::vector<unsigned int>>,std::reference_wrapper<std::vector<unsigned int>>>,std::allocator<std::__bind<int (&)(HALS_IOEngineInfo &,std::vector<unsigned int> &,std::vector<unsigned int> &),std::placeholders::__ph<1> const&,std::reference_wrapper<std::vector<unsigned int>>,std::reference_wrapper<std::vector<unsigned int>>>>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t std::__function::__func<std::__bind<int (&)(HALS_IOEngineInfo &,std::vector<unsigned int> &,std::vector<unsigned int> &),std::placeholders::__ph<1> const&,std::reference_wrapper<std::vector<unsigned int>>,std::reference_wrapper<std::vector<unsigned int>>>,std::allocator<std::__bind<int (&)(HALS_IOEngineInfo &,std::vector<unsigned int> &,std::vector<unsigned int> &),std::placeholders::__ph<1> const&,std::reference_wrapper<std::vector<unsigned int>>,std::reference_wrapper<std::vector<unsigned int>>>>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__16__bindIRFiR17HALS_IOEngineInfoRNS_6vectorIjNS_9allocatorIjEEEES7_EJRKNS_12placeholders4__phILi1EEENS_17reference_wrapperIS6_EESG_EEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::__bind<int (&)(HALS_IOEngineInfo &,std::vector<unsigned int> &,std::vector<unsigned int> &),std::placeholders::__ph<1> const&,std::reference_wrapper<std::vector<unsigned int>>,std::reference_wrapper<std::vector<unsigned int>>>,std::allocator<std::__bind<int (&)(HALS_IOEngineInfo &,std::vector<unsigned int> &,std::vector<unsigned int> &),std::placeholders::__ph<1> const&,std::reference_wrapper<std::vector<unsigned int>>,std::reference_wrapper<std::vector<unsigned int>>>>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(a1 + 8))(a2, *(void *)(a1 + 16), *(void *)(a1 + 24));
}

__n128 std::__function::__func<std::__bind<int (&)(HALS_IOEngineInfo &,std::vector<unsigned int> &,std::vector<unsigned int> &),std::placeholders::__ph<1> const&,std::reference_wrapper<std::vector<unsigned int>>,std::reference_wrapper<std::vector<unsigned int>>>,std::allocator<std::__bind<int (&)(HALS_IOEngineInfo &,std::vector<unsigned int> &,std::vector<unsigned int> &),std::placeholders::__ph<1> const&,std::reference_wrapper<std::vector<unsigned int>>,std::reference_wrapper<std::vector<unsigned int>>>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F147C458;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<int (&)(HALS_IOEngineInfo &,std::vector<unsigned int> &,std::vector<unsigned int> &),std::placeholders::__ph<1> const&,std::reference_wrapper<std::vector<unsigned int>>,std::reference_wrapper<std::vector<unsigned int>>>,std::allocator<std::__bind<int (&)(HALS_IOEngineInfo &,std::vector<unsigned int> &,std::vector<unsigned int> &),std::placeholders::__ph<1> const&,std::reference_wrapper<std::vector<unsigned int>>,std::reference_wrapper<std::vector<unsigned int>>>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F147C458;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<std::__bind<int (&)(HALS_IOEngineInfo &,std::vector<unsigned int> &,std::vector<unsigned int> &),std::placeholders::__ph<1> const&,std::reference_wrapper<std::vector<unsigned int>>,std::reference_wrapper<std::vector<unsigned int>>>,std::allocator<std::__bind<int (&)(HALS_IOEngineInfo &,std::vector<unsigned int> &,std::vector<unsigned int> &),std::placeholders::__ph<1> const&,std::reference_wrapper<std::vector<unsigned int>>,std::reference_wrapper<std::vector<unsigned int>>>>,int ()(HALS_IOEngineInfo &)>::~__func()
{
}

uint64_t VisitableVector<HALS_IOStreamInfo>::do_apply<std::vector<HALS_IOStreamInfo>,VisitableVector<HALS_IOStreamInfo>::ItemWithIndex,HALS_IOContextDescription::ActiveInputsOnly>(uint64_t result, uint64_t a2, uint64_t (**a3)(void, void *), uint64_t a4)
{
  if (result != a2)
  {
    v14[8] = v4;
    v14[9] = v5;
    uint64_t v9 = result;
    uint64_t v10 = 0;
    uint64_t v11 = (uint64_t (**)(void, void))(a3 + 1);
    char v12 = 1;
    do
    {
      if (v12) {
        uint64_t v10 = 0;
      }
      else {
        ++v10;
      }
      v14[0] = v9;
      v14[1] = v10;
      __n128 result = (*(uint64_t (**)(uint64_t, void *))(*(void *)a4 + 16))(a4, v14);
      if ((result & 1) == 0)
      {
        v13[0] = v9;
        v13[1] = v10;
        __n128 result = (*a3)(v11, v13);
        if (result) {
          break;
        }
      }
      char v12 = 0;
      v9 += 424;
    }
    while (v9 != a2);
  }
  return result;
}

uint64_t caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOContext_Legacy_Impl::SetupForIsolatedIO(void)::$_0>(unsigned int **a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)a2;
  if (!*(_DWORD *)(*(void *)a2 + 108)
    || ((uint64_t v3 = *(uint64_t **)(v2 + 112), *(uint64_t **)(v2 + 120) != v3) ? (v4 = v3 == 0) : (v4 = 1), v4))
  {
    uint64_t v3 = (uint64_t *)(v2 + 408);
  }
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 8);
  if (v6 && *(unsigned char *)(v5 + 750) && *(unsigned char *)(v2 + 364)) {
    (*(void (**)(uint64_t, void, void, void))(*(void *)v6 + 768))(v6, a2[2], **a1, *(unsigned int *)(v2 + 360));
  }
  return 0;
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v8;
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    LODWORD(v8) = 67109634;
    HIDWORD(v8) = v4;
    *(_WORD *)uint64_t v9 = 2080;
    *(void *)&v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Completed HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit", (uint8_t *)&v8, 0x18u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAE56F80(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOContext_Legacy_Impl::TeardownForIsolatedIO(void)::$_0>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)a2;
  if (!*(_DWORD *)(*(void *)a2 + 108)
    || ((os_log_type_t v3 = *(uint64_t **)(v2 + 112), *(uint64_t **)(v2 + 120) != v3) ? (v4 = v3 == 0) : (v4 = 1), v4))
  {
    os_log_type_t v3 = (uint64_t *)(v2 + 408);
  }
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(v5 + 8);
  if (v6 && *(unsigned char *)(v5 + 750) && *(unsigned char *)(v2 + 364)) {
    (*(void (**)(uint64_t, void, void))(*(void *)v6 + 776))(v6, a2[2], *(unsigned int *)(v2 + 360));
  }
  return 0;
}

uint64_t std::function<int ()(HALS_IOEngineInfo &)>::function<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,void>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  BOOL v4 = operator new(0x30uLL);
  *BOOL v4 = &unk_1F147C108;
  void v4[2] = 0;
  void v4[3] = 0;
  v4[1] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v4 + 1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  void v4[4] = *(void *)(a2 + 24);
  *((_DWORD *)v4 + 10) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_1BAE570D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,std::allocator<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t std::__function::__func<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,std::allocator<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__16__bindIRZN26HALS_IOContext_Legacy_Impl12StopHardwareERKNS_6vectorIjNS_9allocatorIjEEEEE3$_0JRKNS_12placeholders4__phILi1EEE17eStopWhichDevicesEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,std::allocator<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 40);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5 && (*(uint64_t (**)(uint64_t))(*(void *)v5 + 320))(v5))
  {
    uint64_t v6 = *(__int32 **)(a1 + 8);
    int v7 = *(__int32 **)(a1 + 16);
    uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 320))(*(void *)(a2 + 8));
    uint64_t v9 = wmemchr(v6, *(_DWORD *)(v8 + 16), v7 - v6);
    __int16 v10 = v9 ? v9 : v7;
    if (v10 == *(__int32 **)(a1 + 16)) {
      return 0;
    }
  }
  if ((v4 - 1) < 3)
  {
    if (!*(unsigned char *)(a2 + 751)) {
      return 0;
    }
    if (*(unsigned char *)(a2 + 760))
    {
      if (*(unsigned char *)(a2 + 761))
      {
        if (v4 != 1) {
          return 0;
        }
      }
      else if (v4 != 2)
      {
        return 0;
      }
    }
    else if (v4 != 3)
    {
      return 0;
    }
    goto LABEL_21;
  }
  if ((v4 - 4) >= 2)
  {
    if (v4 != 6 || *(unsigned __int8 *)(a2 + 750) | *(unsigned __int8 *)(a2 + 751)) {
      return 0;
    }
LABEL_21:
    HALS_IOContext_Legacy_Impl::StopHardware_Helper(*(void *)(a1 + 32), a2);
    return 0;
  }
  if (*(unsigned char *)(a2 + 750) && !*(unsigned char *)(a2 + 751))
  {
    if (*(unsigned char *)(a2 + 760))
    {
      if (v4 != 4) {
        return 0;
      }
    }
    else if (v4 != 5)
    {
      return 0;
    }
    goto LABEL_21;
  }
  return 0;
}

void std::__function::__func<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,std::allocator<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>>,int ()(HALS_IOEngineInfo &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void std::__function::__func<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,std::allocator<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>>,int ()(HALS_IOEngineInfo &)>::destroy(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void *std::__function::__func<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,std::allocator<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F147C108;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  __n128 result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(a2 + 8), *(const void **)(a1 + 8), *(void *)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
  return result;
}

void *std::__function::__func<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,std::allocator<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &unk_1F147C108;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v2 + 1, *(const void **)(a1 + 8), *(void *)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 2);
  void v2[4] = *(void *)(a1 + 32);
  *((_DWORD *)v2 + 10) = *(_DWORD *)(a1 + 40);
  return v2;
}

void sub_1BAE573EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,std::allocator<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>>,int ()(HALS_IOEngineInfo &)>::~__func(void *a1)
{
  *a1 = &unk_1F147C108;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,std::allocator<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>>,int ()(HALS_IOEngineInfo &)>::~__func(void *a1)
{
  *a1 = &unk_1F147C108;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::UnregisterIOThread(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UnregisterIOThread(void)::$_0>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::UnregisterIOThread(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UnregisterIOThread(void)::$_0>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl18UnregisterIOThreadEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::UnregisterIOThread(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UnregisterIOThread(void)::$_0>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (!v2) {
    return 0;
  }
  if ((*(uint64_t (**)(void))(*(void *)v2 + 320))(*(void *)(a2 + 8))) {
    uint64_t v4 = *(unsigned int *)((*(uint64_t (**)(uint64_t))(*(void *)v2 + 320))(v2) + 44);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 648);

  return v7(v2, v4, v6);
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::UnregisterIOThread(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UnregisterIOThread(void)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F147C008;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *std::__function::__func<HALS_IOContext_Legacy_Impl::UnregisterIOThread(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UnregisterIOThread(void)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F147C008;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::UnregisterIOThread(void)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UnregisterIOThread(void)::$_0>,int ()(HALS_IOEngineInfo &)>::~__func()
{
}

uint64_t HALS_IOContext_Legacy_Impl::IOWorkLoop_Engine_EndIO(HALS_IOContext_Legacy_Impl *this, HALS_IOContext_Legacy_Impl *a2, HALS_IOEngineInfo *a3)
{
  uint64_t v3 = *((void *)a2 + 1);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(*((void *)this + 3) + 16);
  HALS_IOContextDescription::CreateDriverIOThreadStateChangeDictionary((applesauce::CF::DictionaryRef *)&cf, (uint64_t)this + 1496, 1);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, HALS_IOContext_Legacy_Impl *, CFTypeRef *))(*(void *)v3 + 720))(v3, v5, a2, &cf);
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

void sub_1BAE5773C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!*(_DWORD *)(a6 + 108)
    || ((int v7 = *(uint64_t **)(a6 + 112), *(uint64_t **)(a6 + 120) != v7) ? (v8 = v7 == 0) : (v8 = 1), v8))
  {
    int v7 = (uint64_t *)(a6 + 408);
  }
  uint64_t v9 = *v7;
  if (!*(void *)(*v7 + 8) || !*(unsigned char *)(v9 + 751)) {
    return 0;
  }
  uint64_t v10 = *(unsigned int *)(*(void *)(**(void **)a1 + 24) + 16);
  int v11 = *(_DWORD *)(a6 + 24);
  int v12 = *(_DWORD *)(v9 + 672);
  uint64_t v14 = *(void *)(a6 + 16);
  int v15 = 0;
  int v16 = v11;
  int v17 = v12;
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v9 + 96))(v9, v10, *(unsigned int *)(a6 + 12));
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    uint64_t v8 = *(void *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)int v11 = 2080;
    *(void *)&void v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 2080;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Failed to clear the syscall masks: %d - %s", (uint8_t *)&v10, 0x28u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAE57948(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>(caulk::concurrent::messenger *a1, unsigned char *a2, long long *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = &unk_1F147BB08;
  *(void *)(v6 + 8) = 0;
  *(unsigned char *)(v6 + 20) = *a2;
  long long v7 = *a3;
  *(void *)(v6 + 40) = *((void *)a3 + 2);
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)uint64_t v6 = &unk_1F147BAB0;

  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(caulk::concurrent::message *a1)
{
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90]
                                                                                           + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(unsigned __int8 *)(a1 + 44);
    int v8 = *(unsigned __int8 *)(a1 + 45);
    LODWORD(v9) = 67110146;
    HIDWORD(v9) = v4;
    *(_WORD *)uint64_t v10 = 2080;
    *(void *)&void v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    __int16 v15 = 1024;
    int v16 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d An exception was thrown while trying to sleep - thread hasBeenStopped: %d and shouldExit: %d", (uint8_t *)&v9, 0x24u);
  }
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl15IOWorkLoopSleepERNS_17IOWorkLoopContextEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F147BA30;
  return memcpy(a2 + 1, (const void *)(a1 + 8), 0x108uLL);
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = (const void *)(a1 + 8);
  uint64_t v2 = operator new(0x110uLL);
  void *v2 = &unk_1F147BA30;
  memcpy(v2 + 1, v1, 0x108uLL);
  return v2;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::IOWorkLoopSleep(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0>,void ()(void)>::~__func()
{
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopPerformIO(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    uint64_t v8 = *(void *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)__int16 v11 = 2080;
    *(void *)&void v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 2080;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Failed to update realtime priority parameters with code: %d - %s", (uint8_t *)&v10, 0x28u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAE57EA0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopPerformIO(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopPerformIO(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v8;
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    LODWORD(v8) = 67109634;
    HIDWORD(v8) = v4;
    *(_WORD *)uint64_t v9 = 2080;
    *(void *)&v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d HALS_IOContext_Legacy_Impl::IOWorkLoopPerformIO: Re-anchoring IO timeline. Forced re-anchor", (uint8_t *)&v8, 0x18u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAE58020(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopPerformIO(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t HALS_IOContext_Legacy_Impl::ResetTimeline_Helper(HALS_IOContext_Legacy_Impl *this, uint64_t a2, HALS_IOEngineInfo *a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    (*(void (**)(uint64_t, HALS_IOContext_Legacy_Impl *, uint64_t))(*(void *)v4 + 632))(v4, this, 8);
  }
  return 0;
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopPerformIO(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(unsigned __int8 *)(a1 + 44);
    int v8 = *(unsigned __int8 *)(a1 + 45);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)int v11 = 2080;
    *(void *)&void v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Exitted PerformIO early - thread hasBeenStopped: %d and shouldExit: %d", (uint8_t *)&v10, 0x24u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAE58210(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopPerformIO(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

BOOL HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(UInt64 a1, unsigned int *a2, uint64_t *a3, UInt64 *a4)
{
  uint64_t v186 = *MEMORY[0x1E4F143B8];
  int v8 = (HALB_IOThread *)(a1 + 312);
  uint64_t HasBeenStopped = HALB_IOThread::HasBeenStopped((HALB_IOThread *)(a1 + 312));
  if ((HasBeenStopped & 1) != 0 || *((unsigned char *)a2 + 249))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)HasBeenStopped);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    __int16 v10 = *(caulk::concurrent::messenger **)(*(void *)&buf.mSampleTime + 8);
    int v11 = pthread_self();
    mach_port_t v12 = pthread_mach_thread_np(v11);
    char v13 = HALB_IOThread::HasBeenStopped(v8);
    char v14 = *((unsigned char *)a2 + 249);
    uint64_t v15 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
    *(_DWORD *)(v15 + 16) = 0;
    *(unsigned char *)(v15 + 20) = 0;
    *(_DWORD *)(v15 + 24) = v12;
    *(void *)(v15 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
    *(_DWORD *)(v15 + 40) = 2351;
    *(unsigned char *)(v15 + 44) = v13;
    *(unsigned char *)(v15 + 45) = v14;
    *(void *)uint64_t v15 = &unk_1F147BC38;
    *(void *)(v15 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v10, (caulk::concurrent::message *)v15);
    if (buf.mHostTime) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.mHostTime);
    }
    BOOL result = 0;
    *((unsigned char *)a2 + 249) = 1;
    return result;
  }
  if (*((unsigned char *)a2 + 248)) {
    goto LABEL_7;
  }
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v165 = *(unsigned int *)(v17 + 152);
  int v18 = *(_DWORD *)(v17 + 16);
  BOOL v19 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 1512));
  uint64_t v20 = *(void *)(a1 + 1520);
  BOOL v21 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
  if (v19 && v20)
  {
    if (!v21) {
      goto LABEL_17;
    }
    uint64_t v22 = (*(uint64_t (**)(HALS_ObjectMap *))(*(void *)v19 + 216))(v19);
    LODWORD(buf.mSampleTime) = 136316162;
    *(void *)((char *)&buf.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp";
    WORD2(buf.mHostTime) = 1024;
    *(_DWORD *)((char *)&buf.mHostTime + 6) = 1680;
    WORD1(buf.mRateScalar) = 1024;
    HIDWORD(buf.mRateScalar) = v18;
    LOWORD(buf.mWordClockTime) = 2082;
    *(UInt64 *)((char *)&buf.mWordClockTime + 2) = v20 + 32;
    buf.mSMPTETime.mSubframeDivisor = 2082;
    *(void *)&buf.mSMPTETime.size_t mCounter = v22;
    unint64_t v23 = MEMORY[0x1E4F14500];
    int v24 = "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOWorkLoopInit: %u %{public}s (%{public}s): starting";
    uint32_t v25 = 44;
  }
  else
  {
    if (!v21) {
      goto LABEL_17;
    }
    LODWORD(buf.mSampleTime) = 136315650;
    *(void *)((char *)&buf.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp";
    WORD2(buf.mHostTime) = 1024;
    *(_DWORD *)((char *)&buf.mHostTime + 6) = 1684;
    WORD1(buf.mRateScalar) = 1024;
    HIDWORD(buf.mRateScalar) = v18;
    unint64_t v23 = MEMORY[0x1E4F14500];
    int v24 = "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOWorkLoopInit: %u: starting";
    uint32_t v25 = 24;
  }
  _os_log_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_DEFAULT, v24, (uint8_t *)&buf, v25);
LABEL_17:
  (*(void (**)(void))(**(void **)(a1 + 24) + 200))(*(void *)(a1 + 24));
  kdebug_trace();
  uint64_t v26 = *(std::__shared_weak_count **)(a1 + 16);
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 24) + 64) + 44)) {
    HALS_IOContext_Legacy_Impl::TakePowerAssertions((HALS_IOContext_Legacy_Impl *)a1);
  }
  v167[0] = 0;
  v167[1] = 0;
  HALS_System::GetInstance(&buf, 0, v167);
  HALS_System::SetIOContextIsRunning(*(HALS_System **)&buf.mSampleTime, v18, 1);
  if (buf.mHostTime) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.mHostTime);
  }
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  HALS_ObjectMap::ReleaseObject(v19, v27);
  *(unsigned char *)(a1 + 1301) = 0;
  LODWORD(v177) = *(_DWORD *)(a1 + 40);
  *(void *)&long long v180 = &unk_1F1480990;
  *((void *)&v180 + 1) = a1 + 1496;
  uint64_t v166 = (HALS_IOContextDescription *)(a1 + 1496);
  *(void *)&buf.double mSampleTime = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOContext_Legacy_Impl::SetupForIsolatedIO(void)::$_0>;
  buf.UInt64 mHostTime = (UInt64)&v177;
  VisitableVector<HALS_IOStreamInfo>::do_apply<std::vector<HALS_IOStreamInfo>,VisitableVector<HALS_IOStreamInfo>::ItemWithIndex,HALS_IOContextDescription::ActiveInputsOnly>(*(void *)(a1 + 1552), *(void *)(a1 + 1560), &buf, (uint64_t)&v180);
  if (!*(void *)(a1 + 1096))
  {
    kdebug_trace();
    uint64_t v31 = *(void *)(*(void *)(a1 + 24) + 192);
    *(void *)uint64_t v31 = mach_absolute_time();
    *(unsigned char *)(v31 + 8) = 1;
    std::chrono::steady_clock::now();
    *(_OWORD *)std::string __p = 0u;
    long long v171 = 0u;
    HALS_IOContext_Legacy_Impl::AssessIOBufferSize((HALS_IOContext_Legacy_Impl *)a1, (CAPropertyAddressList *)__p);
    HALS_IOContextDescription::CalculateEngineSynchOffsets(v166);
    UInt64 v32 = *(void *)(a1 + 1520);
    *(void *)&buf.double mSampleTime = &unk_1F146C988;
    buf.UInt64 mHostTime = v32;
    *(int32x2_t *)&buf.Float64 mRateScalar = vrev64_s32(*(int32x2_t *)(a1 + 1936));
    *(void *)&long long v180 = &buf;
    *(void *)&long long v177 = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOContextDescription::AllocateProcessors(void)::$_0>;
    *((void *)&v177 + 1) = &v180;
    int v30 = VisitableVector<HALS_IOStreamInfo>::apply<>(*(void *)(a1 + 1552), *(void *)(a1 + 1560), &v177);
    if (!v30)
    {
      p_AudioTimeStamp buf = &buf;
      *(void *)&long long v172 = caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContextDescription::AllocateProcessors(void)::$_1>;
      *((void *)&v172 + 1) = &p_buf;
      *(void *)&long long v177 = _ZN5caulk12function_refIFiRN15VisitableVectorI23HALS_IOStackDescriptionE13ItemWithIndexEEE15functor_invokerIZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS0_IFijRS2_jjR17HALS_IOStreamInfoEEEDpRKT_EUlS5_E_EEiRKNS_7details15erased_callableIS6_EES5_;
      *((void *)&v177 + 1) = &v172;
      int v30 = VisitableVector<HALS_IOStackDescription>::apply<>(*(void *)(a1 + 1576), *(void *)(a1 + 1584), &v177);
      if (!v30)
      {
        HALS_IOContext_Legacy_Impl::StartTapOutput((HALS_IOContext_Legacy_Impl *)a1);
        int v164 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 24) + 64) + 48);
        HALS_IOContextDescription::CalculateMaximumIOBufferFrameSize(v166);
        uint64_t v34 = v33;
        uint64_t v35 = *(void *)(a1 + 1520);
        unint64_t v36 = *(void **)(a1 + 1736);
        void v36[2] = v36[1];
        v36[5] = v36[4];
        LODWORD(v172) = v33;
        *((void *)&v172 + 1) = v35;
        unint64_t v37 = *(uint64_t **)(a1 + 1720);
        *(void *)&long long v177 = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_BufferFactory::calculate_input_buffer_size(unsigned int,HALS_IOEngineInfo *)::$_0>;
        *((void *)&v177 + 1) = &v172;
        if (!VisitableVector<HALS_IOStreamInfo>::apply<>(*v37, v37[1], &v177))
        {
          size_t v38 = *(uint64_t **)(a1 + 1728);
          *(void *)&long long v177 = &unk_1F14682A0;
          *((void *)&v177 + 1) = v34;
          uint64_t v178 = v35;
          AudioTimeStamp v179 = &v177;
          v183[0] = &v177;
          *(void *)&long long v172 = caulk::function_ref<int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::functor_invoker<HALS_IOStreamGrid::apply_to_streams(std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>;
          *((void *)&v172 + 1) = v183;
          int v39 = VisitableVector<HALS_IOStackDescription>::apply<>(*v38, v38[1], &v172);
          std::__function::__value_func<int ()(unsigned long,HALS_IOStreamInfo &)>::~__value_func[abi:ne180100](&v177);
          if (!v39)
          {
            *(void *)&long long v172 = *(void *)(a1 + 1736);
            UInt64 v40 = *(uint64_t **)(a1 + 1720);
            *(void *)&long long v177 = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_BufferFactory::calculate_shared_input_buffer_size(void)::$_0>;
            *((void *)&v177 + 1) = &v172;
            if (!VisitableVector<HALS_IOStreamInfo>::apply<>(*v40, v40[1], &v177))
            {
              uint64_t v41 = *(void *)(a1 + 1736);
              uint64_t v42 = *(uint64_t **)(a1 + 1728);
              *(void *)&long long v177 = &unk_1F1468330;
              *((void *)&v177 + 1) = v41;
              AudioTimeStamp v179 = &v177;
              v183[0] = &v177;
              *(void *)&long long v172 = caulk::function_ref<int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::functor_invoker<HALS_IOStreamGrid::apply_to_streams(std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>;
              *((void *)&v172 + 1) = v183;
              int v43 = VisitableVector<HALS_IOStackDescription>::apply<>(*v42, v42[1], &v172);
              std::__function::__value_func<int ()(unsigned long,HALS_IOStreamInfo &)>::~__value_func[abi:ne180100](&v177);
              if (!v43) {
                HALB_IOBufferManager_Server::Allocate(*(HALB_IOBufferManager_Server **)(a1 + 1736), v164 != 0);
              }
            }
          }
        }
        int v30 = 1;
      }
    }
    if (__p[0]) {
      operator delete(__p[0]);
    }
    kdebug_trace();
    uint64_t v44 = *(void *)(*(void *)(a1 + 24) + 192);
    BOOL v45 = *(unsigned char *)(v44 + 8) == 0;
    *(void *)(v44 + 16) = mach_absolute_time();
    *(unsigned char *)(v44 + 24) = 1;
    if (v45)
    {
      *(void *)uint64_t v44 = *(void *)(v44 + 16);
      *(unsigned char *)(v44 + 8) = *(unsigned char *)(v44 + 24);
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.mSampleTime) = 136315394;
      *(void *)((char *)&buf.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD2(buf.mHostTime) = 1024;
      *(_DWORD *)((char *)&buf.mHostTime + 6) = 1724;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOWorkLoop: failed to start the hardware", (uint8_t *)&buf, 0x12u);
    }
    goto LABEL_44;
  }
  uint64_t v28 = *(unsigned int *)(*(void *)(a1 + 24) + 16);
  LODWORD(buf.mSampleTime) = HALS_IOThread::CopyWorkgroupIntervalPort(v8);
  WORD2(buf.mSampleTime) = 1;
  buf.UInt64 mHostTime = 850045863;
  memset(&buf.mRateScalar, 0, 48);
  long long v185 = 0u;
  unint64_t v29 = *(unsigned int *)(a1 + 1320) | (unint64_t)(v28 << 32);
  *(void *)&long long v180 = &unk_1F147BF88;
  *((void *)&v180 + 1) = v29;
  CFStringRef v181 = &buf;
  int v182 = &v180;
  __p[0] = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
  __p[1] = &v180;
  uint64_t v173 = &off_1F147D460;
  v174 = __p;
  p_AudioTimeStamp buf = (AudioTimeStamp *)caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
  long long v169 = &v174;
  int v30 = VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine>(*(void *)(a1 + 1528), *(void *)(a1 + 1536), (uint64_t (**)(void, void *))&p_buf, (uint64_t)&v173);
  std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](&v180);
  AMCP::Utility::Mach_Port::~Mach_Port((AMCP::Utility::Mach_Port *)&buf);
  if (!v30)
  {
    kdebug_trace();
    *(void *)&buf.double mSampleTime = &unk_1F147C280;
    buf.mWordClockTime = (UInt64)&buf;
    uint64_t v173 = (void (**)(FilterEngineInfoWithoutEngine *__hidden))&unk_1F147D4B0;
    p_AudioTimeStamp buf = (AudioTimeStamp *)caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
    long long v169 = (void ***)&buf;
    v174 = (void **)&off_1F147D460;
    __p[0] = &p_buf;
    *(void *)&long long v180 = caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
    *((void *)&v180 + 1) = __p;
    VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(*(void *)(a1 + 1528), *(void *)(a1 + 1536), (uint64_t (**)(void, void *))&v180, (uint64_t)&v174, (uint64_t)&v173);
    std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](&buf);
    *(void *)&Float64 v53 = *(unsigned int *)(*(void *)(a1 + 24) + 16);
    *(void *)&buf.double mSampleTime = &unk_1F147BED8;
    buf.UInt64 mHostTime = (UInt64)HALS_IOContext_Legacy_Impl::ResetTime_Helper;
    buf.Float64 mRateScalar = v53;
    buf.mWordClockTime = (UInt64)&buf;
    uint64_t v173 = (void (**)(FilterEngineInfoWithoutEngine *__hidden))&unk_1F147D530;
    p_AudioTimeStamp buf = (AudioTimeStamp *)caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
    long long v169 = (void ***)&buf;
    v174 = (void **)&off_1F147D460;
    __p[0] = &p_buf;
    *(void *)&long long v180 = caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
    *((void *)&v180 + 1) = __p;
    VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(*(void *)(a1 + 1528), *(void *)(a1 + 1536), (uint64_t (**)(void, void *))&v180, (uint64_t)&v174, (uint64_t)&v173);
    std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](&buf);
    HALS_IOContext_Legacy_Impl::UpdateTime((HALS_IOContext_Legacy_Impl *)a1);
    unsigned int v54 = 0;
    unsigned int v55 = v165 / 0x9C4;
    while ((HALB_IOThread::HasBeenStopped(v8) & 1) == 0)
    {
      char IsTimeRunning = HALS_IOContext_Legacy_Impl::IsTimeRunning(*(HALS_IOContext_Legacy_Impl **)(a1 + 1528), *(HALS_IOContext_Legacy_Impl **)(a1 + 1536), 0);
      char v57 = v54 >= v55 ? 1 : IsTimeRunning;
      if (v57) {
        break;
      }
      HALB_Mutex::Unlock((HALB_Mutex *)(a1 + 328));
      usleep(0x9C4u);
      uint64_t HasBeenStopped = HALB_Mutex::Lock((HALB_Mutex *)(a1 + 328));
      if (*(unsigned char *)(a1 + 304)) {
        goto LABEL_68;
      }
      HALS_IOContext_Legacy_Impl::UpdateTime((HALS_IOContext_Legacy_Impl *)a1);
      ++v54;
    }
    kdebug_trace();
    uint64_t v58 = (AMCP::Log::Scope_Registry *)HALB_IOThread::HasBeenStopped(v8);
    if (v58)
    {
      AMCP::Log::Scope_Registry::get(v58);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      std::string::size_type v59 = *(caulk::concurrent::messenger **)(*(void *)&buf.mSampleTime + 8);
      char v60 = pthread_self();
      mach_port_t v61 = pthread_mach_thread_np(v60);
      char v62 = HALB_IOThread::HasBeenStopped(v8);
      char v63 = *((unsigned char *)a2 + 249);
      uint64_t v64 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
      *(_DWORD *)(v64 + 16) = 0;
      *(unsigned char *)(v64 + 20) = 0;
      *(_DWORD *)(v64 + 24) = v61;
      *(void *)(v64 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
      *(_DWORD *)(v64 + 40) = 1776;
      *(unsigned char *)(v64 + 44) = v62;
      *(unsigned char *)(v64 + 45) = v63;
      *(void *)uint64_t v64 = &unk_1F147B388;
      *(void *)(v64 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v59, (caulk::concurrent::message *)v64);
      uint64_t HasBeenStopped = buf.mHostTime;
      if (buf.mHostTime) {
LABEL_67:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)HasBeenStopped);
LABEL_68:
      *((unsigned char *)a2 + 249) = 1;
      goto LABEL_69;
    }
    if (*(void *)(a1 + 1520))
    {
      if (v54 >= v55)
      {
        HALS_IOContext_Legacy_Impl::IsTimeRunning(*(HALS_IOContext_Legacy_Impl **)(a1 + 1528), *(HALS_IOContext_Legacy_Impl **)(a1 + 1536), 1u);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          int v118 = *(_DWORD *)(*(void *)(a1 + 24) + 16);
          LODWORD(buf.mSampleTime) = 136316162;
          *(void *)((char *)&buf.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp";
          WORD2(buf.mHostTime) = 1024;
          *(_DWORD *)((char *)&buf.mHostTime + 6) = 1794;
          WORD1(buf.mRateScalar) = 2048;
          *(void *)((char *)&buf.mRateScalar + 4) = v165;
          WORD2(buf.mWordClockTime) = 1024;
          *(_DWORD *)((char *)&buf.mWordClockTime + 6) = v118;
          buf.mSMPTETime.mSubframeDivisor = 2080;
          *(void *)&buf.mSMPTETime.size_t mCounter = a1 + 492;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOWorkLoop: could not establish a timeline after waiting %lu microseconds for context %d %s\n", (uint8_t *)&buf, 0x2Cu);
        }
        *(_DWORD *)(a1 + 1056) = 1937010544;
        *((unsigned char *)a2 + 249) = 1;
        *(_DWORD *)(a1 + 1488) = HALS_IOPrewarmManager::Stop((void *)(a1 + 1472), *(_DWORD *)(a1 + 1060));
        uint64_t HasBeenStopped = (uint64_t)HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(*(HALS_IOContext_Legacy_Impl **)(a1 + 1528), *(void *)(a1 + 1536));
        goto LABEL_45;
      }
      unint64_t v100 = *(_OWORD **)(a1 + 1096);
      if (v100)
      {
        v100[17] = 0u;
        v100[18] = 0u;
        v100[15] = 0u;
        v100[16] = 0u;
        v100[13] = 0u;
        unsigned char v100[14] = 0u;
        v100[11] = 0u;
        v100[12] = 0u;
        v100[9] = 0u;
        v100[10] = 0u;
        v100[7] = 0u;
        v100[8] = 0u;
        v100[5] = 0u;
        v100[6] = 0u;
        v100[3] = 0u;
        v100[4] = 0u;
        v100[1] = 0u;
        v100[2] = 0u;
        *unint64_t v100 = 0u;
        BOOL v101 = *(unsigned char *)(*(void *)(*(void *)(a1 + 24) + 64) + 40) == 0;
        uint64_t v102 = *(void *)(*(void *)(a1 + 1520) + 288);
        int v103 = *(int8x16_t **)(a1 + 1096);
        float64x2_t v104 = (float64x2_t)vdupq_n_s64(0x4176E36000000000uLL);
        int8x16_t v105 = (int8x16_t)vdivq_f64(vmulq_f64(*(float64x2_t *)(v102 + 200 + 40 * *(unsigned int *)(v102 + 192)), v104), v104);
        int32x2_t v106 = vdup_n_s32(*(unsigned char *)(*(void *)(*(void *)(a1 + 24) + 64) + 40) == 0);
        v107.i64[0] = v106.u32[0];
        v107.i64[1] = v106.u32[1];
        int8x16_t *v103 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v107, 0x3FuLL)), v105, vrev64q_s8(v105));
        unint64_t v108 = *(void *)(v102 + 200 + 40 * *(unsigned int *)(v102 + 192) + 16);
        unsigned int v109 = *a2;
        unint64_t v110 = bswap64(v108);
        unsigned int v111 = bswap32(*a2);
        if (v101)
        {
          int v112 = 3;
        }
        else
        {
          unint64_t v108 = v110;
          int v112 = 50331648;
        }
        if (!v101) {
          unsigned int v109 = v111;
        }
        v103[1].i64[0] = v108;
        v103[1].i32[2] = v109;
        v103[9].i32[2] = v112;
        v103[13].i32[2] = v112;
        v103[17].i32[2] = v112;
        OSMemoryBarrier();
        *(unsigned char *)(a1 + 1300) = 1;
        HALS_IOContext_Legacy_Impl::UpdateEngineMixing((HALS_IOContext_Legacy_Impl *)a1);
        HALS_IOContext_Legacy_Impl::StartTapOutput((HALS_IOContext_Legacy_Impl *)a1);
        HALB_IOThread::PostStateChange(v8, 1735354734);
        HALS_IOContext_Legacy_Impl::SendIsRunningNotifications((HALS_Object **)a1);
        int v113 = (AMCP::Log::Scope_Registry *)HALB_IOThread::HasBeenStopped(v8);
        if (v113)
        {
          AMCP::Log::Scope_Registry::get(v113);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v180, "com.apple.coreaudio", "AMCP");
          uint64_t v114 = *(caulk::concurrent::messenger **)(v180 + 8);
          LOBYTE(p_buf) = 0;
          double v115 = pthread_self();
          mach_port_t v116 = pthread_mach_thread_np(v115);
          char v117 = HALB_IOThread::HasBeenStopped(v8);
          LODWORD(buf.mSampleTime) = v116;
          buf.UInt64 mHostTime = (UInt64)"HALS_IOContext_Legacy_Impl.cpp";
          LODWORD(buf.mRateScalar) = 1838;
          BYTE4(buf.mRateScalar) = v117;
          BYTE5(buf.mRateScalar) = *((unsigned char *)a2 + 249);
          caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>(v114, &p_buf, (long long *)&buf);
          goto LABEL_126;
        }
        if (*(void *)(a1 + 1520))
        {
          uint64_t v119 = HALS_IOContext::WaitForClientToBeginTransport(*(std::__shared_weak_count **)(a1 + 24));
          if ((v119 & 1) == 0)
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v119);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v180, "com.apple.coreaudio", "AMCP");
            uint64_t v124 = *(caulk::concurrent::messenger **)(v180 + 8);
            LOBYTE(p_buf) = 16;
            uint64_t v125 = pthread_self();
            mach_port_t v126 = pthread_mach_thread_np(v125);
            char v127 = HALB_IOThread::HasBeenStopped(v8);
            LODWORD(buf.mSampleTime) = v126;
            buf.UInt64 mHostTime = (UInt64)"HALS_IOContext_Legacy_Impl.cpp";
            LODWORD(buf.mRateScalar) = 1854;
            BYTE4(buf.mRateScalar) = v127;
            BYTE5(buf.mRateScalar) = *((unsigned char *)a2 + 249);
            caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_2,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>(v124, &p_buf, (long long *)&buf);
LABEL_126:
            uint64_t HasBeenStopped = *((void *)&v180 + 1);
            if (!*((void *)&v180 + 1)) {
              goto LABEL_68;
            }
            goto LABEL_67;
          }
          if (*(void *)(a1 + 1520))
          {
            HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(*(HALS_IOContext_Legacy_Impl **)(a1 + 1528), *(void *)(a1 + 1536));
            uint64_t v120 = *(void *)(a1 + 1520);
            unsigned int v121 = *a2;
            a2[50] = _CalculateOverloadThresholdSampleAdjustment(*(double *)(v120 + 768), *a2, a2[54]);
            if (*(void *)(v120 + 8)) {
              double v122 = *(double *)(*(void *)(v120 + 288) + 112);
            }
            else {
              double v122 = 544.217687;
            }
            *((double *)a2 + 26) = v122 * (double)v121;
            long long v128 = (AMCP::Log::Scope_Registry *)HALS_IOContext_Legacy_Impl::ConfigureThreadForRealtimePriority((_opaque_pthread_t **)a1, v121);
            int v129 = (int)v128;
            if (v128)
            {
              AMCP::Log::Scope_Registry::get(v128);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v180, "com.apple.coreaudio", "AMCP");
              uint64_t v158 = *(caulk::concurrent::messenger **)(v180 + 8);
              LOBYTE(p_buf) = 16;
              uint64_t v159 = pthread_self();
              mach_port_t v160 = pthread_mach_thread_np(v159);
              unint64_t v161 = __error();
              unsigned __int8 v162 = strerror(*v161);
              LODWORD(buf.mSampleTime) = v160;
              buf.UInt64 mHostTime = (UInt64)"HALS_IOContext_Legacy_Impl.cpp";
              LODWORD(buf.mRateScalar) = 1881;
              HIDWORD(buf.mRateScalar) = v129;
              buf.mWordClockTime = (UInt64)v162;
              caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_3,std::tuple<unsigned int,char const*,int,int,char *>>(v158, &p_buf, (long long *)&buf);
              if (*((void *)&v180 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v180 + 1));
              }
              exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
              *(void *)exceptiouint64_t n = off_1F148A5D8;
              exception[2] = 1852797029;
            }
            OSMemoryBarrier();
            *(_DWORD *)(a1 + 1304) = 0;
            *(void *)(a1 + 1312) = 0;
            HALS_IOContext_Legacy_Impl::AnchorTime((HALS_IOContext_Legacy_Impl *)a1);
            uint64_t v130 = *(void *)(a1 + 24);
            int v131 = *(unsigned __int8 *)(*(void *)(v130 + 64) + 40);
            uint64_t v132 = *(void *)(*(void *)(a1 + 1520) + 288);
            uint64_t v133 = v132 + 200;
            long long v134 = *(int8x16_t **)(a1 + 1096);
            float64x2_t v135 = (float64x2_t)vdupq_n_s64(0x4176E36000000000uLL);
            int8x16_t v136 = (int8x16_t)vdivq_f64(vmulq_f64(*(float64x2_t *)(v132 + 200 + 40 * *(unsigned int *)(v132 + 192)), v135), v135);
            int32x2_t v137 = vdup_n_s32(*(unsigned char *)(*(void *)(v130 + 64) + 40) == 0);
            v138.i64[0] = v137.u32[0];
            v138.i64[1] = v137.u32[1];
            *long long v134 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v138, 0x3FuLL)), v136, vrev64q_s8(v136));
            unint64_t v139 = *(void *)(v132 + 200 + 40 * *(unsigned int *)(v132 + 192) + 16);
            if (v131)
            {
              unint64_t v139 = bswap64(v139);
              unint64_t v140 = bswap64(*(void *)(v133 + 40 * *(unsigned int *)(v132 + 192) + 24));
              unint64_t v141 = bswap64(*(void *)(v133 + 40 * *(unsigned int *)(v132 + 192) + 32));
              int v142 = 50331648;
            }
            else
            {
              unint64_t v140 = *(void *)(v133 + 40 * *(unsigned int *)(v132 + 192) + 24);
              unint64_t v141 = *(void *)(v133 + 40 * *(unsigned int *)(v132 + 192) + 32);
              int v142 = 3;
            }
            v134[1].i64[0] = v139;
            v134[2].i64[0] = v140;
            v134[2].i64[1] = v141;
            v134[5].i32[2] = v142;
            unsigned int v143 = bswap32(*a2);
            if (v131) {
              unsigned int v144 = v143;
            }
            else {
              unsigned int v144 = *a2;
            }
            v134[1].i32[2] = v144;
            uint64_t v145 = *(void *)(v130 + 80);
            if (v145) {
              (*(void (**)(uint64_t, double))(*(void *)v145 + 48))(v145, *(float *)(a1 + 1328));
            }
            HALS_IOContext_Legacy_Impl::GetCurrentTime((HALS_IOClock *)a1, (AudioTimeStamp *)(a2 + 34));
            HALS_IOContextDescription::UpdateInputStreamVisibility(v166);
            unsigned int v146 = *a2;
            CFStringRef v176 = 0;
            mach_port_t v147 = operator new(0x20uLL);
            void *v147 = &unk_1F147B560;
            v147[1] = HALS_IOContext_Legacy_Impl::IOWorkLoop_Engine_BeginIO;
            v147[2] = a1;
            *((_DWORD *)v147 + 6) = v146;
            CFStringRef v176 = v147;
            *(void *)&buf.double mSampleTime = &unk_1F147D4B0;
            HALS_IOContext_Legacy_Impl::engine_apply<FilterIfEngineOnlyNeedsReferenceStream>(*(void *)(a1 + 1528), *(void *)(a1 + 1536), (uint64_t)v175, (uint64_t)&buf);
            std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v175);
            kdebug_trace();
            HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(a1, a2);
            int AudioCaptureMode = (AMCP::Log::Scope_Registry *)HALS_IOContext::GetAudioCaptureMode(*(HALS_IOContext **)(a1 + 24));
            if (!AudioCaptureMode)
            {
              int AudioCaptureMode = HALS_IOThread::EnableRTSafeSyscallMasks((_opaque_pthread_t **)v8);
              int v151 = (int)AudioCaptureMode;
              if (AudioCaptureMode)
              {
                AMCP::Log::Scope_Registry::get(AudioCaptureMode);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v180, "com.apple.coreaudio", "AMCP");
                double v152 = *(caulk::concurrent::messenger **)(v180 + 8);
                LOBYTE(p_buf) = 16;
                uint64_t v153 = pthread_self();
                mach_port_t v154 = pthread_mach_thread_np(v153);
                uint64_t v155 = __error();
                uint64_t v156 = strerror(*v155);
                LODWORD(buf.mSampleTime) = v154;
                buf.UInt64 mHostTime = (UInt64)"HALS_IOContext_Legacy_Impl.cpp";
                LODWORD(buf.mRateScalar) = 1928;
                HIDWORD(buf.mRateScalar) = v151;
                buf.mWordClockTime = (UInt64)v156;
                caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_4,std::tuple<unsigned int,char const*,int,int,char *>>(v152, &p_buf, (long long *)&buf);
                int AudioCaptureMode = (AMCP::Log::Scope_Registry *)*((void *)&v180 + 1);
                if (*((void *)&v180 + 1)) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v180 + 1));
                }
              }
            }
            AMCP::Log::Scope_Registry::get(AudioCaptureMode);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v180, "com.apple.coreaudio", "AMCP");
            uint64_t v149 = *(caulk::concurrent::messenger **)(v180 + 8);
            LOBYTE(p_buf) = 2;
            uint64_t v150 = pthread_self();
            LODWORD(buf.mSampleTime) = pthread_mach_thread_np(v150);
            buf.UInt64 mHostTime = (UInt64)"HALS_IOContext_Legacy_Impl.cpp";
            LODWORD(buf.mRateScalar) = 1937;
            BYTE4(buf.mRateScalar) = *((unsigned char *)a2 + 249);
            caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopInit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_6,std::tuple<unsigned int,char const*,int,BOOL>>(v149, &p_buf, (long long *)&buf);
            uint64_t HasBeenStopped = *((void *)&v180 + 1);
            if (*((void *)&v180 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v180 + 1));
            }
            goto LABEL_45;
          }
          *(_DWORD *)(a1 + 1056) = 1852797029;
          uint64_t HasBeenStopped = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
          if (!HasBeenStopped) {
            goto LABEL_68;
          }
          LODWORD(buf.mSampleTime) = 136315394;
          *(void *)((char *)&buf.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp";
          WORD2(buf.mHostTime) = 1024;
          *(_DWORD *)((char *)&buf.mHostTime + 6) = 1863;
          unint64_t v123 = MEMORY[0x1E4F14500];
        }
        else
        {
          *(_DWORD *)(a1 + 1056) = 1852797029;
          uint64_t HasBeenStopped = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
          if (!HasBeenStopped) {
            goto LABEL_68;
          }
          LODWORD(buf.mSampleTime) = 136315394;
          *(void *)((char *)&buf.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp";
          WORD2(buf.mHostTime) = 1024;
          *(_DWORD *)((char *)&buf.mHostTime + 6) = 1847;
          unint64_t v123 = MEMORY[0x1E4F14500];
        }
        _os_log_impl(&dword_1BAA78000, v123, OS_LOG_TYPE_ERROR, "%25s:%-5d  After we unlock the lock, we need to check that we still have a master device", (uint8_t *)&buf, 0x12u);
        goto LABEL_68;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.mSampleTime) = 136315394;
        *(void *)((char *)&buf.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 1808;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOWorkLoop: Failure to allocate status block\n", (uint8_t *)&buf, 0x12u);
      }
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleTime) = 136315394;
      *(void *)((char *)&buf.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD2(buf.mHostTime) = 1024;
      *(_DWORD *)((char *)&buf.mHostTime + 6) = 1784;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  After we unlock the lock, we need to check that we still have a master device", (uint8_t *)&buf, 0x12u);
    }
    *(_DWORD *)(a1 + 1056) = 1852797029;
    *((unsigned char *)a2 + 249) = 1;
    *(_DWORD *)(a1 + 1488) = HALS_IOPrewarmManager::Stop((void *)(a1 + 1472), *(_DWORD *)(a1 + 1060));
    uint64_t HasBeenStopped = (uint64_t)HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(*(HALS_IOContext_Legacy_Impl **)(a1 + 1528), *(void *)(a1 + 1536));
    goto LABEL_45;
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.mSampleTime) = 136315394;
    *(void *)((char *)&buf.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp";
    WORD2(buf.mHostTime) = 1024;
    *(_DWORD *)((char *)&buf.mHostTime + 6) = 1735;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOWorkLoop: failed to register io thread", (uint8_t *)&buf, 0x12u);
  }
LABEL_44:
  *(_DWORD *)(a1 + 1056) = v30;
  *((unsigned char *)a2 + 249) = 1;
  *(_DWORD *)(a1 + 1488) = HALS_IOPrewarmManager::Stop((void *)(a1 + 1472), *(_DWORD *)(a1 + 1060));
  uint64_t HasBeenStopped = (uint64_t)HALS_IOContext_Legacy_Impl::NotifyWaitingTapsThatThisReaderHasFullyStarted(*(HALS_IOContext_Legacy_Impl **)(a1 + 1528), *(void *)(a1 + 1536));
LABEL_45:
  if (*((unsigned char *)a2 + 249))
  {
LABEL_69:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)HasBeenStopped);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    uint64_t v65 = *(caulk::concurrent::messenger **)(*(void *)&buf.mSampleTime + 8);
    mach_port_t v66 = pthread_self();
    mach_port_t v67 = pthread_mach_thread_np(v66);
    char v68 = HALB_IOThread::HasBeenStopped(v8);
    char v69 = *((unsigned char *)a2 + 249);
    uint64_t v70 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
    *(_DWORD *)(v70 + 16) = 0;
    *(unsigned char *)(v70 + 20) = 16;
    *(_DWORD *)(v70 + 24) = v67;
    *(void *)(v70 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
    *(_DWORD *)(v70 + 40) = 2362;
    *(unsigned char *)(v70 + 44) = v68;
    *(unsigned char *)(v70 + 45) = v69;
    *(void *)uint64_t v70 = &unk_1F147BC90;
    *(void *)(v70 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v65, (caulk::concurrent::message *)v70);
LABEL_82:
    if (buf.mHostTime) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.mHostTime);
    }
    return 0;
  }
  *((unsigned char *)a2 + 248) = 1;
LABEL_7:
  if ((*(_DWORD *)(a1 + 1384) & 0xFFFFFFFE) != 2)
  {
    *(_OWORD *)(a2 + 34) = *(_OWORD *)(a2 + 18);
    *(_OWORD *)(a2 + 38) = *(_OWORD *)(a2 + 22);
    *(_OWORD *)(a2 + 42) = *(_OWORD *)(a2 + 26);
    *(_OWORD *)(a2 + 46) = *(_OWORD *)(a2 + 30);
    if (*(_DWORD *)(a1 + 1304))
    {
      HALS_IOContext_Legacy_Impl::IOWorkLoop_SleepUntilWakeTime((HALS_IOContext_Legacy_Impl *)a1, *((void *)a2 + 10));
    }
    else
    {
      uint64_t v46 = *(void *)(a1 + 1520);
      double v47 = 44100.0;
      if (!v46 || !*(void *)(v46 + 8) || (double v47 = *(double *)(v46 + 768), v47 > 0.0))
      {
        uint64_t v48 = mach_absolute_time();
        LODWORD(v49) = *a2;
        double v50 = (double)v49 / v47 * 24000000.0;
        unint64_t v51 = *((void *)a2 + 10);
        unint64_t v52 = v51 >= (uint64_t)v50 ? v51 - (uint64_t)v50 : 0;
        if (v52 > v48) {
          HALS_IOContext_Legacy_Impl::IOWorkLoop_SleepUntilWakeTime((HALS_IOContext_Legacy_Impl *)a1, v52);
        }
      }
      if (HALB_IOThread::HasBeenStopped(v8))
      {
        *((unsigned char *)a2 + 249) = 1;
      }
      else
      {
        uint64_t v71 = (char *)operator new(0x110uLL);
        *(void *)uint64_t v71 = &unk_1F147BA30;
        *((void *)v71 + 1) = a1;
        long long v72 = *((_OWORD *)a2 + 13);
        *((_OWORD *)v71 + 13) = *((_OWORD *)a2 + 12);
        *((_OWORD *)v71 + 14) = v72;
        *((_OWORD *)v71 + 15) = *((_OWORD *)a2 + 14);
        *(_OWORD *)(v71 + 250) = *(_OWORD *)((char *)a2 + 234);
        long long v73 = *((_OWORD *)a2 + 9);
        *((_OWORD *)v71 + 9) = *((_OWORD *)a2 + 8);
        *((_OWORD *)v71 + 10) = v73;
        long long v74 = *((_OWORD *)a2 + 11);
        *((_OWORD *)v71 + 11) = *((_OWORD *)a2 + 10);
        *((_OWORD *)v71 + 12) = v74;
        long long v75 = *((_OWORD *)a2 + 5);
        *((_OWORD *)v71 + 5) = *((_OWORD *)a2 + 4);
        *((_OWORD *)v71 + 6) = v75;
        long long v76 = *((_OWORD *)a2 + 7);
        *((_OWORD *)v71 + 7) = *((_OWORD *)a2 + 6);
        *((_OWORD *)v71 + 8) = v76;
        long long v77 = *((_OWORD *)a2 + 1);
        *((_OWORD *)v71 + 1) = *(_OWORD *)a2;
        *((_OWORD *)v71 + 2) = v77;
        long long v78 = *((_OWORD *)a2 + 3);
        *((_OWORD *)v71 + 3) = *((_OWORD *)a2 + 2);
        *((_OWORD *)v71 + 4) = v78;
        buf.mWordClockTime = (UInt64)v71;
        unint64_t v79 = *((void *)a2 + 10);
        uint64_t v80 = mach_absolute_time();
        HALS_IOThread::WorkgroupStart((caulk::mach::os_workgroup_interval_managed **)v8, v80, v79);
        if (!buf.mWordClockTime) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(UInt64))(*(void *)buf.mWordClockTime + 48))(buf.mWordClockTime);
        HALS_IOThread::WorkgroupFinish(v8);
        std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&buf);
      }
    }
    uint64_t v81 = *((void *)a2 + 10);
    uint64_t v82 = mach_absolute_time();
    uint64_t v83 = __udivti3();
    if (v82 >= v81) {
      uint64_t v84 = v83;
    }
    else {
      uint64_t v84 = -v83;
    }
    *((void *)a2 + 30) = v84;
    long long v180 = 0uLL;
    HALS_System::GetInstance(&buf, 0, (uint64_t *)&v180);
    uint64_t HasBeenStopped = buf.mHostTime;
    int v85 = *(unsigned __int8 *)(*(void *)&buf.mSampleTime + 1472);
    if (buf.mHostTime) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.mHostTime);
    }
    if (v85) {
      uint64_t HasBeenStopped = kdebug_trace();
    }
  }
  if (!*(void *)(a1 + 1520))
  {
    *(_DWORD *)(a1 + 1056) = 1852797029;
    uint64_t v157 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v157 = off_1F148A5D8;
    v157[2] = 1852797029;
  }
  if (*((unsigned char *)a2 + 249))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)HasBeenStopped);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    UInt64 v86 = *(caulk::concurrent::messenger **)(*(void *)&buf.mSampleTime + 8);
    uint64_t v87 = pthread_self();
    mach_port_t v88 = pthread_mach_thread_np(v87);
    char v89 = HALB_IOThread::HasBeenStopped(v8);
    char v90 = *((unsigned char *)a2 + 249);
    uint64_t v91 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
    *(_DWORD *)(v91 + 16) = 0;
    *(unsigned char *)(v91 + 20) = 16;
    *(_DWORD *)(v91 + 24) = v88;
    *(void *)(v91 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
    *(_DWORD *)(v91 + 40) = 2373;
    *(unsigned char *)(v91 + 44) = v89;
    *(unsigned char *)(v91 + 45) = v90;
    *(void *)uint64_t v91 = &unk_1F147BCE8;
    *(void *)(v91 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v86, (caulk::concurrent::message *)v91);
    goto LABEL_82;
  }
  uint64_t v92 = *(void *)(a1 + 1520);
  if (v92)
  {
    if (*(void *)(v92 + 8))
    {
      CFDictionaryRef v93 = *(HALS_IOClock **)(v92 + 288);
      if (v93) {
        HALS_IOClock::GetCurrentTime(v93, (AudioTimeStamp *)(a2 + 2));
      }
    }
  }
  *(void *)&Float64 v94 = *a2;
  *(void *)&buf.double mSampleTime = &unk_1F147C7E8;
  buf.UInt64 mHostTime = a1;
  buf.Float64 mRateScalar = v94;
  buf.mWordClockTime = (UInt64)&buf;
  p_AudioTimeStamp buf = (AudioTimeStamp *)caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
  long long v169 = (void ***)&buf;
  v174 = (void **)&off_1F147D460;
  v167[0] = (uint64_t)&p_buf;
  *(void *)&long long v180 = caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
  *((void *)&v180 + 1) = v167;
  VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine>(*(void *)(a1 + 1528), *(void *)(a1 + 1536), (uint64_t (**)(void, void *))&v180, (uint64_t)&v174);
  std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](&buf);
  ++*(_DWORD *)(a1 + 1304);
  uint64_t v95 = *a2;
  *(void *)(a1 + 1312) += v95;
  for (char i = *(uint64_t **)(a1 + 1992); i; char i = (uint64_t *)*i)
  {
    if (*((unsigned char *)i + 40))
    {
      uint64_t v97 = i[3];
      unsigned int v98 = *(_DWORD *)(*(void *)(a1 + 24) + 16);
      *(void *)&buf.double mSampleTime = v97 + 152;
      BOOL v99 = std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)(v97 + 152));
      LOBYTE(buf.mHostTime) = v99;
      if (v99)
      {
        HALS_MultiTap::fetch_writer_state((HALS_MultiTap *)&v180, v97, v98);
        if ((void)v180) {
          *(void *)(v180 + 280) += v95;
        }
        if (*((void *)&v180 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v180 + 1));
        }
      }
      std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&buf);
    }
  }
  memset(&buf, 0, sizeof(buf));
  buf.mFlags = 3;
  HALS_IOContext_Legacy_Impl::IOWorkLoop_CalculateOverloadTime(a1, *a2, &buf, -1.0);
  HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines((HALS_IOContext_Legacy_Impl *)a1, &buf);
  *a3 = mach_absolute_time();
  *a4 = buf.mHostTime;
  return *((unsigned char *)a2 + 249) == 0;
}

void sub_1BAE5A210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_3,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>(caulk::concurrent::messenger *a1, unsigned char *a2, long long *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = &unk_1F147BD98;
  *(void *)(v6 + 8) = 0;
  *(unsigned char *)(v6 + 20) = *a2;
  long long v7 = *a3;
  *(void *)(v6 + 40) = *((void *)a3 + 2);
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)uint64_t v6 = &unk_1F147BD40;

  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_3,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(caulk::concurrent::message *a1)
{
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90]
                                                                                           + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_3,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(unsigned __int8 *)(a1 + 44);
    int v8 = *(unsigned __int8 *)(a1 + 45);
    LODWORD(v9) = 67110146;
    HIDWORD(v9) = v4;
    *(_WORD *)__int16 v10 = 2080;
    *(void *)&void v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    __int16 v15 = 1024;
    int v16 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d And error was thrown when getting timestamp - thread hasBeenStopped: %d and shouldExit: %d", (uint8_t *)&v9, 0x24u);
  }
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_3,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void caulk::concurrent::details::message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_3,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<HALS_IOContext_Legacy_Impl::UpdateSoftwareReferenceStreamOnlyEngineState(unsigned int)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdateSoftwareReferenceStreamOnlyEngineState(unsigned int)::$_0>,int ()(HALS_IOEngineInfo &)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::UpdateSoftwareReferenceStreamOnlyEngineState(unsigned int)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdateSoftwareReferenceStreamOnlyEngineState(unsigned int)::$_0>,int ()(HALS_IOEngineInfo &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN26HALS_IOContext_Legacy_Impl44UpdateSoftwareReferenceStreamOnlyEngineStateEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_IOContext_Legacy_Impl::UpdateSoftwareReferenceStreamOnlyEngineState(unsigned int)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdateSoftwareReferenceStreamOnlyEngineState(unsigned int)::$_0>,int ()(HALS_IOEngineInfo &)>::operator()(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 748))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 320))(a2))
    {
      unsigned int v5 = atomic_load((unsigned int *)(v4 + 1464));
      if (v5 == 2)
      {
        memset(&v35, 0, sizeof(v35));
        v35.mFlags = 3;
        HALS_IOClock::GetCurrentTime(*(HALS_IOClock **)(a2 + 288), &v35);
        LODWORD(v6) = *(_DWORD *)(a1 + 16);
        if (*(double *)(a2 + 512) > v35.mSampleTime + (double)v6) {
          atomic_store(0, (unsigned int *)(v4 + 1464));
        }
      }
    }
    unsigned int v7 = atomic_load((unsigned int *)(v4 + 1464));
    if (!v7 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 328))(a2))
    {
      int v8 = *(HALS_IOClock **)(a2 + 288);
      double v9 = *(double *)(a2 + 768);
      int v10 = *(_DWORD *)(a2 + 776);
      int v11 = *(_DWORD *)(a2 + 780);
      char v12 = *(unsigned char *)(a2 + 784);
      int v13 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 376))(*(void *)(a2 + 8));
      HALS_IOClock::Reset(v8, v9, v10, v11, v12, v13);
      memset(&v35, 0, 24);
      (*(void (**)(void))(**(void **)(a2 + 8) + 616))();
      uint64_t v14 = *(void *)(a2 + 288);
      long long v31 = *(_OWORD *)&v35.mSampleTime;
      Float64 mRateScalar = v35.mRateScalar;
      HALS_IOClock::Update(v14, (uint64_t)&v31);
      *(_OWORD *)(a2 + 432) = 0u;
      *(_OWORD *)(a2 + 448) = 0u;
      *(_OWORD *)(a2 + 464) = 0u;
      *(_OWORD *)(a2 + 480) = 0u;
      *(_OWORD *)(a2 + 496) = 0u;
      *(_OWORD *)(a2 + 512) = 0u;
      *(_OWORD *)(a2 + 528) = 0u;
      *(_OWORD *)(a2 + 544) = 0u;
      *(_OWORD *)(a2 + 560) = 0u;
      *(_OWORD *)(a2 + 576) = 0u;
      *(_OWORD *)(a2 + 592) = 0u;
      *(_OWORD *)(a2 + 608) = 0u;
      *(_OWORD *)(a2 + 624) = 0u;
      *(_OWORD *)(a2 + 640) = 0u;
      atomic_store(1u, (unsigned int *)(v4 + 1464));
    }
    unsigned int v15 = atomic_load((unsigned int *)(v4 + 1464));
    if (v15 == 1 && (*(unsigned int (**)(uint64_t))(*(void *)a2 + 320))(a2))
    {
      uint64_t v16 = *(void *)(v4 + 1520);
      long long v17 = *(_OWORD *)(v16 + 376);
      *(_OWORD *)&v35.double mSampleTime = *(_OWORD *)(v16 + 360);
      *(_OWORD *)&v35.Float64 mRateScalar = v17;
      long long v18 = *(_OWORD *)(v16 + 408);
      *(_OWORD *)&v35.mSMPTETime.mSubframes = *(_OWORD *)(v16 + 392);
      *(_OWORD *)&v35.mSMPTETime.mHours = v18;
      uint64_t v19 = *(void *)(v16 + 664);
      if (*(unsigned char *)(v4 + 1714)) {
        v19 += *(unsigned int *)(v4 + 1320) + 144;
      }
      v35.double mSampleTime = v35.mSampleTime + (double)v19;
      v35.mFlags = 1;
      memset(&v34, 0, sizeof(v34));
      v34.mFlags = 2;
      HALS_IOClock::TranslateTime(*(void *)(v16 + 288), &v35, &v34);
      v33.double mSampleTime = 0.0;
      memset(&v33.mRateScalar, 0, 48);
      v33.UInt64 mHostTime = v34.mHostTime;
      v33.mFlags = 1;
      v34.mFlags = 2;
      HALS_IOClock::TranslateTime(*(void *)(a2 + 288), &v34, &v33);
      long long v20 = *(_OWORD *)&v33.mRateScalar;
      *(_OWORD *)(a2 + 360) = *(_OWORD *)&v33.mSampleTime;
      *(_OWORD *)(a2 + 376) = v20;
      long long v21 = *(_OWORD *)&v33.mSMPTETime.mHours;
      *(_OWORD *)(a2 + 392) = *(_OWORD *)&v33.mSMPTETime.mSubframes;
      *(_OWORD *)(a2 + 408) = v21;
      *(void *)(a2 + 664) = 0;
      atomic_store(2u, (unsigned int *)(v4 + 1464));
    }
    if (((*(uint64_t (**)(uint64_t))(*(void *)a2 + 328))(a2) & 1) == 0)
    {
      uint64_t v22 = (unsigned int *)(v4 + 1464);
      if (atomic_load(v22))
      {
        int v24 = *(HALS_IOClock **)(a2 + 288);
        double v25 = *(double *)(a2 + 768);
        int v26 = *(_DWORD *)(a2 + 776);
        int v27 = *(_DWORD *)(a2 + 780);
        char v28 = *(unsigned char *)(a2 + 784);
        int v29 = (*(uint64_t (**)(void))(**(void **)(a2 + 8) + 376))(*(void *)(a2 + 8));
        HALS_IOClock::Reset(v24, v25, v26, v27, v28, v29);
        atomic_store(0, v22);
      }
    }
  }
  return 0;
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::UpdateSoftwareReferenceStreamOnlyEngineState(unsigned int)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdateSoftwareReferenceStreamOnlyEngineState(unsigned int)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F147C7E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext_Legacy_Impl::UpdateSoftwareReferenceStreamOnlyEngineState(unsigned int)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdateSoftwareReferenceStreamOnlyEngineState(unsigned int)::$_0>,int ()(HALS_IOEngineInfo &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F147C7E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<HALS_IOContext_Legacy_Impl::UpdateSoftwareReferenceStreamOnlyEngineState(unsigned int)::$_0,std::allocator<HALS_IOContext_Legacy_Impl::UpdateSoftwareReferenceStreamOnlyEngineState(unsigned int)::$_0>,int ()(HALS_IOEngineInfo &)>::~__func()
{
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_2,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(unsigned __int8 *)(a1 + 44);
    int v8 = *(unsigned __int8 *)(a1 + 45);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)int v11 = 2080;
    *(void *)&void v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Sleep failed - thread hasBeenStopped: %d and shouldExit: %d", (uint8_t *)&v10, 0x24u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAE5B040(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_2,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(unsigned __int8 *)(a1 + 44);
    int v8 = *(unsigned __int8 *)(a1 + 45);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)int v11 = 2080;
    *(void *)&void v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Initialize failed - thread hasBeenStopped: %d and shouldExit: %d", (uint8_t *)&v10, 0x24u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAE5B1D8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_1,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_0,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(unsigned __int8 *)(a1 + 44);
    int v8 = *(unsigned __int8 *)(a1 + 45);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)int v11 = 2080;
    *(void *)&void v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Exitted GetInterval early - thread hasBeenStopped: %d and shouldExit: %d", (uint8_t *)&v10, 0x24u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAE5B370(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &,unsigned long long &,unsigned long long &)::$_0,std::tuple<unsigned int,char const*,int,BOOL,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t ___ZN26HALS_IOContext_Legacy_ImplC2EP14HALS_IOContextN4AMCP11Power_StateENSt3__110shared_ptrINS2_7Utility14Dispatch_QueueEEE_block_invoke(uint64_t a1, uint64_t *a2, UInt64 *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  UInt64 v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v5 + 1520);
  if (!v6)
  {
    uint64_t result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v8 = 136315394;
    double v9 = "HALS_IOContext_Legacy_Impl.cpp";
    __int16 v10 = 1024;
    int v11 = 2431;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOThreadEntryTop: there is no master engine info", (uint8_t *)&v8, 0x12u);
    uint64_t v6 = *(void *)(v5 + 1520);
    if (!v6) {
      return 0;
    }
  }
  if (*(void *)(v6 + 8)) {
    goto LABEL_3;
  }
  uint64_t result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
  if (!result) {
    return result;
  }
  int v8 = 136315394;
  double v9 = "HALS_IOContext_Legacy_Impl.cpp";
  __int16 v10 = 1024;
  int v11 = 2434;
  _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOThreadEntryTop: there is no master engine", (uint8_t *)&v8, 0x12u);
  if (!*(void *)(*(void *)(v5 + 1520) + 8)) {
    return 0;
  }
LABEL_3:
  if (HALS_IOContext_Legacy_Impl::IOWorkLoopGetInterval(v5, (unsigned int *)(v5 + 40), a2, a3))
  {
    if ((*(_DWORD *)(v5 + 1384) & 0xFFFFFFFE) == 2) {
      return 2;
    }
    else {
      return 1;
    }
  }
  else
  {
    uint64_t result = 0;
    *(unsigned char *)(v5 + 289) = 1;
  }
  return result;
}

void sub_1BAE5B550(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(a9) = 136315394;
      *(void *)((char *)&a9 + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 2458;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOThreadEntryTop: terminating due to exception", (uint8_t *)&a9, 0x12u);
    }
    *(unsigned char *)(v9 + 1300) = 0;
    __cxa_end_catch();
    JUMPOUT(0x1BAE5B520);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN26HALS_IOContext_Legacy_ImplC2EP14HALS_IOContextN4AMCP11Power_StateENSt3__110shared_ptrINS2_7Utility14Dispatch_QueueEEE_block_invoke_2(uint64_t a1)
{
  v158[4] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 1520);
  if (v2
    || os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)
    && (LODWORD(buf.mSampleTime) = 136315394,
        *(void *)((char *)&buf.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp",
        WORD2(buf.mHostTime) = 1024,
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 2469,
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOThreadEntryBottom: there is no master engine info", (uint8_t *)&buf, 0x12u), (uint64_t v2 = *(void *)(v1 + 1520)) != 0))
  {
    if (*(void *)(v2 + 8)
      || os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)
      && (LODWORD(buf.mSampleTime) = 136315394,
          *(void *)((char *)&buf.mSampleTime + 4) = "HALS_IOContext_Legacy_Impl.cpp",
          WORD2(buf.mHostTime) = 1024,
          *(_DWORD *)((char *)&buf.mHostTime + 6) = 2472,
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOThreadEntryBottom: there is no master engine", (uint8_t *)&buf, 0x12u), *(void *)(*(void *)(v1 + 1520) + 8)))
    {
      int v3 = *(_DWORD *)(v1 + 1384);
      if (v3 == 3)
      {
        int v4 = (unsigned int *)(v1 + 40);
      }
      else
      {
        uint64_t v5 = *(void *)(*(void *)(v1 + 24) + 224);
        if (*(unsigned char *)v5 || *(unsigned char *)(v5 + 1))
        {
          long long v6 = *(_OWORD *)(v1 + 616);
          long long v7 = *(_OWORD *)(v1 + 632);
          uint64_t v8 = *(void *)(v5 + 8);
          *(void *)(v8 + 232) = *(void *)(v1 + 608);
          *(_OWORD *)(v8 + 240) = v6;
          *(_OWORD *)(v8 + 256) = v7;
          HALS_IOContext::OverloadReporter::SendAnyPendingOverloadReports((HALS_IOContext::OverloadReporter *)v5);
          int v3 = *(_DWORD *)(v1 + 1384);
        }
        int v4 = (unsigned int *)(v1 + 40);
        if (v3 == 4)
        {
          *(_DWORD *)(v1 + 1384) = 0;
          *(_DWORD *)(v1 + 264) = 0;
          uint64_t v9 = *(void *)(v1 + 1416);
          if (v9) {
            std::function<void ()(IORunningState)>::operator()(v9, 0);
          }
          HALS_IOContext_Legacy_Impl::UpdateEngineMixing((HALS_IOContext_Legacy_Impl *)v1);
        }
      }
      uint64_t HasBeenStopped = (AMCP::Log::Scope_Registry *)HALB_IOThread::HasBeenStopped((HALB_IOThread *)(v1 + 312));
      if ((HasBeenStopped & 1) != 0 || *(unsigned char *)(v1 + 289))
      {
        AMCP::Log::Scope_Registry::get(HasBeenStopped);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
        int v11 = *(caulk::concurrent::messenger **)(*(void *)&buf.mSampleTime + 8);
        uint64_t v12 = pthread_self();
        mach_port_t v13 = pthread_mach_thread_np(v12);
        char v14 = HALB_IOThread::HasBeenStopped((HALB_IOThread *)(v1 + 312));
        char v15 = *(unsigned char *)(v1 + 289);
        uint64_t v16 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
        *(_DWORD *)(v16 + 16) = 0;
        *(unsigned char *)(v16 + 20) = 0;
        *(_DWORD *)(v16 + 24) = v13;
        *(void *)(v16 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
        *(_DWORD *)(v16 + 40) = 2265;
        *(unsigned char *)(v16 + 44) = v14;
        *(unsigned char *)(v16 + 45) = v15;
        *(void *)uint64_t v16 = &unk_1F147BB30;
        *(void *)(v16 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v11, (caulk::concurrent::message *)v16);
        if (buf.mHostTime) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.mHostTime);
        }
        *(unsigned char *)(v1 + 289) = 1;
      }
      else
      {
        kdebug_trace();
        if ((HALS_IOContext_Legacy_Impl::UpdateTime((HALS_IOContext_Legacy_Impl *)v1)
           || *(unsigned char *)(v1 + 1301))
          && *(_DWORD *)(v1 + 1384) != 3)
        {
          mach_port_t v61 = (void *)MEMORY[0x1E4FB7E90];
          if (*(unsigned char *)(v1 + 1301))
          {
            uint64_t v62 = *(unsigned int *)(*(void *)(v1 + 24) + 16);
            v145[0] = &unk_1F147BED8;
            v145[1] = HALS_IOContext_Legacy_Impl::ResetTimeline_Helper;
            v145[2] = v62;
            v145[3] = v145;
            *(void *)&buf.double mSampleTime = &unk_1F147D530;
            v102[0] = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
            v102[1] = v145;
            BOOL v101 = &off_1F147D460;
            int v103 = v102;
            v104[0] = (uint64_t (*)(void, void *))caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterInactiveReferenceStreamOnlyEngines const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
            v104[1] = (uint64_t (*)(void, void *))&v103;
            VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(*(void *)(v1 + 1528), *(void *)(v1 + 1536), v104, (uint64_t)&v101, (uint64_t)&buf);
            char v63 = (AMCP::Log::Scope_Registry *)std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v145);
            *(unsigned char *)(v1 + 1301) = 0;
            AMCP::Log::Scope_Registry::get(v63);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
            uint64_t v64 = *(caulk::concurrent::messenger **)(*(void *)&buf.mSampleTime + 8);
            uint64_t v65 = pthread_self();
            mach_port_t v66 = pthread_mach_thread_np(v65);
            uint64_t v67 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v61 + 16))(*v61, 48, 8);
            *(_DWORD *)(v67 + 16) = 0;
            *(unsigned char *)(v67 + 20) = 0;
            *(_DWORD *)(v67 + 24) = v66;
            *(void *)(v67 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
            *(_DWORD *)(v67 + 40) = 2281;
            *(void *)uint64_t v67 = &unk_1F147BB88;
            *(void *)(v67 + 8) = 0;
            caulk::concurrent::messenger::enqueue(v64, (caulk::concurrent::message *)v67);
            if (buf.mHostTime) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.mHostTime);
            }
          }
          kdebug_trace();
          HALS_IOContext_Legacy_Impl::AnchorTime((HALS_IOContext_Legacy_Impl *)v1);
          *(void *)(v1 + 1312) = 0;
          for (char i = *(uint64_t **)(v1 + 1992); i; char i = (uint64_t *)*i)
          {
            if (*((unsigned char *)i + 40))
            {
              uint64_t v69 = i[3];
              unsigned int v70 = *(_DWORD *)(*(void *)(v1 + 24) + 16);
              *(void *)&buf.double mSampleTime = v69 + 152;
              BOOL v71 = std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)(v69 + 152));
              LOBYTE(buf.mHostTime) = v71;
              if (v71)
              {
                HALS_MultiTap::fetch_writer_state((HALS_MultiTap *)v146, v69, v70);
                if (*(void *)v146) {
                  *(void *)(*(void *)v146 + 280) = 0;
                }
                if (*(void *)&v146[8]) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v146[8]);
                }
              }
              std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&buf);
            }
          }
          HALS_IOContext_Legacy_Impl::AnchorIO((HALS_IOContext_Legacy_Impl *)v1, 0);
          uint64_t v72 = *(void *)(v1 + 1520);
          if (v72)
          {
            if (*(void *)(v72 + 8))
            {
              long long v73 = *(HALS_IOClock **)(v72 + 288);
              if (v73) {
                HALS_IOClock::GetCurrentTime(v73, (AudioTimeStamp *)(v1 + 48));
              }
            }
          }
          *(_DWORD *)(v1 + 1384) = 4;
          uint64_t v74 = *(void *)(v1 + 1416);
          if (v74) {
            std::function<void ()(IORunningState)>::operator()(v74, 4);
          }
          long long v75 = (AMCP::Log::Scope_Registry *)HALS_IOContext_Legacy_Impl::ConfigureThreadForRealtimePriority((_opaque_pthread_t **)v1, *(_DWORD *)(v1 + 256));
          int v76 = (int)v75;
          if (v75)
          {
            AMCP::Log::Scope_Registry::get(v75);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
            long long v77 = *(caulk::concurrent::messenger **)(*(void *)&buf.mSampleTime + 8);
            long long v78 = pthread_self();
            mach_port_t v79 = pthread_mach_thread_np(v78);
            uint64_t v80 = __error();
            uint64_t v81 = strerror(*v80);
            uint64_t v82 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v61 + 16))(*v61, 56, 8);
            *(_DWORD *)(v82 + 16) = 0;
            *(unsigned char *)(v82 + 20) = 16;
            *(_DWORD *)(v82 + 24) = v79;
            *(void *)(v82 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
            *(_DWORD *)(v82 + 40) = 2310;
            *(_DWORD *)(v82 + 44) = v76;
            *(void *)(v82 + 48) = v81;
            *(void *)uint64_t v82 = &unk_1F147BBE0;
            *(void *)(v82 + 8) = 0;
            caulk::concurrent::messenger::enqueue(v77, (caulk::concurrent::message *)v82);
            if (buf.mHostTime) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.mHostTime);
            }
          }
          atomic_store(0, (unsigned int *)(v1 + 1464));
        }
        int v83 = *(unsigned __int8 *)(*(void *)(*(void *)(v1 + 24) + 64) + 40);
        uint64_t v84 = *(void *)(*(void *)(v1 + 1520) + 288);
        uint64_t v85 = v84 + 200;
        UInt64 v86 = *(int8x16_t **)(v1 + 1096);
        float64x2_t v87 = (float64x2_t)vdupq_n_s64(0x4176E36000000000uLL);
        int8x16_t v88 = (int8x16_t)vdivq_f64(vmulq_f64(*(float64x2_t *)(v84 + 200 + 40 * *(unsigned int *)(v84 + 192)), v87), v87);
        int32x2_t v89 = vdup_n_s32(*(unsigned char *)(*(void *)(*(void *)(v1 + 24) + 64) + 40) == 0);
        v90.i64[0] = v89.u32[0];
        v90.i64[1] = v89.u32[1];
        int8x16_t *v86 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v90, 0x3FuLL)), v88, vrev64q_s8(v88));
        unint64_t v91 = *(void *)(v84 + 200 + 40 * *(unsigned int *)(v84 + 192) + 16);
        if (v83)
        {
          unint64_t v91 = bswap64(v91);
          unint64_t v92 = bswap64(*(void *)(v85 + 40 * *(unsigned int *)(v84 + 192) + 24));
          unint64_t v93 = bswap64(*(void *)(v85 + 40 * *(unsigned int *)(v84 + 192) + 32));
          int v94 = 50331648;
        }
        else
        {
          unint64_t v92 = *(void *)(v85 + 40 * *(unsigned int *)(v84 + 192) + 24);
          unint64_t v93 = *(void *)(v85 + 40 * *(unsigned int *)(v84 + 192) + 32);
          int v94 = 3;
        }
        v86[1].i64[0] = v91;
        v86[2].i64[0] = v92;
        v86[2].i64[1] = v93;
        v86[5].i32[2] = v94;
        unsigned int v95 = bswap32(*v4);
        if (v83) {
          unsigned int v96 = v95;
        }
        else {
          unsigned int v96 = *v4;
        }
        v86[1].i32[2] = v96;
        OSMemoryBarrier();
        uint64_t v97 = *(void *)(v1 + 24);
        uint64_t v99 = *(void *)(v97 + 80);
        unsigned int v98 = *(std::__shared_weak_count **)(v97 + 88);
        if (v98) {
          atomic_fetch_add_explicit(&v98->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v99)
        {
          memset(&buf, 0, sizeof(buf));
          buf.mFlags = 3;
          HALS_IOContext_Legacy_Impl::IOWorkLoop_CalculateOverloadTime(v1, *(_DWORD *)(v1 + 40), &buf, -1.0);
          AudioTimeStamp v100 = buf;
          (*(void (**)(uint64_t, AudioTimeStamp *))(*(void *)v99 + 56))(v99, &v100);
          HALS_IOContext_Legacy_Impl::_SetOverloadTimeOnEngines((HALS_IOContext_Legacy_Impl *)v1, &buf);
        }
        if (v98) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v98);
        }
        *(_DWORD *)(v1 + 260) = HALS_IOContext_Legacy_Impl::PerformIO(v1, v1 + 48, *(unsigned int *)(v1 + 40), 0, *(_DWORD *)(v1 + 264), (uint64_t *)(v1 + 272));
        if (!*(unsigned char *)(v1 + 289)) {
          HALS_IOContext_Legacy_Impl::IOWorkLoopSyncTimeline(v1, v4);
        }
      }
    }
  }
  if (*(unsigned char *)(v1 + 289) || HALB_IOThread::HasBeenStopped((HALB_IOThread *)(v1 + 312)))
  {
    int v17 = HALS_IOThread::ClearAllSyscallMasks((_opaque_pthread_t **)(v1 + 312));
    int v19 = (int)v17;
    if (v17)
    {
      AMCP::Log::Scope_Registry::get(v17);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      long long v20 = *(caulk::concurrent::messenger **)(*(void *)&buf.mSampleTime + 8);
      long long v21 = pthread_self();
      mach_port_t v22 = pthread_mach_thread_np(v21);
      unint64_t v23 = __error();
      int v24 = strerror(*v23);
      uint64_t v25 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
      *(_DWORD *)(v25 + 16) = 0;
      *(unsigned char *)(v25 + 20) = 16;
      *(_DWORD *)(v25 + 24) = v22;
      *(void *)(v25 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
      *(_DWORD *)(v25 + 40) = 1946;
      *(_DWORD *)(v25 + 44) = v19;
      *(void *)(v25 + 48) = v24;
      *(void *)uint64_t v25 = &unk_1F147B778;
      *(void *)(v25 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v20, (caulk::concurrent::message *)v25);
      if (buf.mHostTime) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.mHostTime);
      }
    }
    if (*(unsigned char *)(v1 + 288))
    {
      if ((AMCP::Feature_Flags::use_mcp_coloring_mixer(0, v18) & 1) == 0)
      {
        uint64_t v120 = (void *)v1;
        std::string __p = caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit(HALS_IOContext_Legacy_Impl::IOWorkLoopContext &)::$_0>;
        p_AudioTimeStamp buf = (AudioTimeStamp *)&v120;
        p_p = &__p;
        *(void *)unsigned int v146 = _ZN5caulk12function_refIFijR23HALS_IOStackDescriptionjjR17HALS_IOStreamInfoEE15functor_invokerIZN25HALS_IOContextDescription47ApplyToOutput_ButSkipReferenceStreamOnlyEnginesES6_EUljRT_jjRT0_E_EEiRKNS_7details15erased_callableIS5_EEjS2_jjS4_;
        *(void *)&v146[8] = &p_p;
        *(void *)&buf.double mSampleTime = _ZN5caulk12function_refIFiRN15VisitableVectorI23HALS_IOStackDescriptionE13ItemWithIndexEEE15functor_invokerIZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS0_IFijRS2_jjR17HALS_IOStreamInfoEEEDpRKT_EUlS5_E_EEiRKNS_7details15erased_callableIS6_EES5_;
        buf.UInt64 mHostTime = (UInt64)v146;
        VisitableVector<HALS_IOStackDescription>::apply<>(*(void *)(v1 + 1576), *(void *)(v1 + 1584), (long long *)&buf);
      }
      *(unsigned char *)(v1 + 1300) = 0;
      HALS_IOContext::OverloadReporter::SendAnyPendingOverloadReports(*(HALS_IOContext::OverloadReporter **)(*(void *)(v1 + 24) + 224));
      (*(void (**)(void))(**(void **)(*(void *)(v1 + 24) + 96) + 712))(*(void *)(*(void *)(v1 + 24) + 96));
      kdebug_trace();
    }
    HALB_IOThread::ConfigureThreadForNormalPriority((_opaque_pthread_t **)(v1 + 312));
    uint64_t v26 = *(void *)(v1 + 1088);
    if (v26)
    {
      std::function<void ()(HALS_IOContext_Legacy_Impl *)>::operator()(v26, v1);
      std::__function::__value_func<void ()(HALS_IOContext_Legacy_Impl *)>::operator=[abi:ne180100]((void *)(v1 + 1064));
    }
    *(unsigned char *)(v1 + 1300) = 0;
    atomic_store(0, (unsigned int *)(v1 + 1464));
    v152[0] = &unk_1F147AFA8;
    v152[1] = HALS_IOContext_Legacy_Impl::IOWorkLoop_Engine_EndIO;
    v152[2] = v1;
    v152[3] = v152;
    *(void *)unsigned int v146 = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
    *(void *)&v146[8] = v152;
    p_p = &off_1F147D460;
    std::string __p = v146;
    *(void *)&buf.double mSampleTime = caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
    buf.UInt64 mHostTime = (UInt64)&__p;
    VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine>(*(void *)(v1 + 1528), *(void *)(v1 + 1536), &buf, (uint64_t)&p_p);
    std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v152);
    HALB_IOThread::PostStateChange((HALB_IOThread *)(v1 + 312), 1718185577);
    int v27 = *(_DWORD *)(*(void *)(v1 + 24) + 16);
    *(void *)&buf.double mSampleTime = &unk_1F147C008;
    LODWORD(buf.mHostTime) = v27;
    buf.mWordClockTime = (UInt64)&buf;
    std::string __p = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
    p_AudioTimeStamp buf = &buf;
    uint64_t v120 = &off_1F147D460;
    p_p = &__p;
    *(void *)unsigned int v146 = caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
    *(void *)&v146[8] = &p_p;
    VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine>(*(void *)(v1 + 1528), *(void *)(v1 + 1536), (uint64_t (**)(void, void *))v146, (uint64_t)&v120);
    std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](&buf);
    kdebug_trace();
    int8x16_t v136 = 0;
    uint64_t v137 = 0;
    uint64_t v138 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v136, *(const void **)(v1 + 1432), *(void *)(v1 + 1440), (uint64_t)(*(void *)(v1 + 1440) - *(void *)(v1 + 1432)) >> 2);
    uint64_t v139 = v1;
    float64x2_t v135 = &unk_1F147D4B0;
    p_AudioTimeStamp buf = 0;
    uint64_t v132 = 0;
    std::string __p = 0;
    char v28 = v136;
    uint64_t v29 = v137;
    unint64_t v30 = (v137 - (uint64_t)v136) >> 2;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v136, v137, v30);
    uint64_t v133 = v1;
    int v134 = 1;
    std::function<int ()(HALS_IOEngineInfo &)>::function<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,void>((uint64_t)v158, (uint64_t)&__p);
    *(void *)unsigned int v146 = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
    *(void *)&v146[8] = v158;
    uint64_t v120 = &off_1F147D460;
    p_p = v146;
    *(void *)&buf.double mSampleTime = caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
    buf.UInt64 mHostTime = (UInt64)&p_p;
    VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(*(void *)(v1 + 1528), *(void *)(v1 + 1536), &buf, (uint64_t)&v120, (uint64_t)&v135);
    std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v158);
    if (__p)
    {
      p_AudioTimeStamp buf = (AudioTimeStamp *)__p;
      operator delete(__p);
    }
    p_p = 0;
    mach_port_t v126 = 0;
    uint64_t v127 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&p_p, v28, v29, v30);
    uint64_t v128 = v1;
    int v129 = 2;
    std::function<int ()(HALS_IOEngineInfo &)>::function<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,void>((uint64_t)v157, (uint64_t)&p_p);
    *(void *)unsigned int v146 = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
    *(void *)&v146[8] = v157;
    double v115 = &off_1F147D460;
    uint64_t v120 = v146;
    *(void *)&buf.double mSampleTime = caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
    buf.UInt64 mHostTime = (UInt64)&v120;
    VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(*(void *)(v1 + 1528), *(void *)(v1 + 1536), &buf, (uint64_t)&v115, (uint64_t)&v135);
    std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v157);
    if (p_p)
    {
      mach_port_t v126 = p_p;
      operator delete(p_p);
    }
    uint64_t v120 = 0;
    unsigned int v121 = 0;
    uint64_t v122 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v120, v28, v29, v30);
    uint64_t v123 = v1;
    int v124 = 3;
    std::function<int ()(HALS_IOEngineInfo &)>::function<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,void>((uint64_t)v156, (uint64_t)&v120);
    *(void *)unsigned int v146 = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
    *(void *)&v146[8] = v156;
    unint64_t v110 = &off_1F147D460;
    double v115 = v146;
    *(void *)&buf.double mSampleTime = caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
    buf.UInt64 mHostTime = (UInt64)&v115;
    VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(*(void *)(v1 + 1528), *(void *)(v1 + 1536), &buf, (uint64_t)&v110, (uint64_t)&v135);
    std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v156);
    if (v120)
    {
      unsigned int v121 = v120;
      operator delete(v120);
    }
    double v115 = 0;
    mach_port_t v116 = 0;
    uint64_t v117 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v115, v28, v29, v30);
    uint64_t v118 = v1;
    int v119 = 4;
    std::function<int ()(HALS_IOEngineInfo &)>::function<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,void>((uint64_t)v155, (uint64_t)&v115);
    *(void *)unsigned int v146 = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
    *(void *)&v146[8] = v155;
    int8x16_t v105 = &off_1F147D460;
    unint64_t v110 = v146;
    *(void *)&buf.double mSampleTime = caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
    buf.UInt64 mHostTime = (UInt64)&v110;
    VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(*(void *)(v1 + 1528), *(void *)(v1 + 1536), &buf, (uint64_t)&v105, (uint64_t)&v135);
    std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v155);
    if (v115)
    {
      mach_port_t v116 = v115;
      operator delete(v115);
    }
    unint64_t v110 = 0;
    unsigned int v111 = 0;
    uint64_t v112 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v110, v28, v29, v30);
    uint64_t v113 = v1;
    int v114 = 5;
    std::function<int ()(HALS_IOEngineInfo &)>::function<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,void>((uint64_t)v154, (uint64_t)&v110);
    *(void *)unsigned int v146 = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
    *(void *)&v146[8] = v154;
    v153[0] = &off_1F147D460;
    int8x16_t v105 = v146;
    *(void *)&buf.double mSampleTime = caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
    buf.UInt64 mHostTime = (UInt64)&v105;
    VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(*(void *)(v1 + 1528), *(void *)(v1 + 1536), &buf, (uint64_t)v153, (uint64_t)&v135);
    std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v154);
    if (v110)
    {
      unsigned int v111 = v110;
      operator delete(v110);
    }
    int8x16_t v105 = 0;
    int32x2_t v106 = 0;
    uint64_t v107 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v105, v28, v29, v30);
    uint64_t v108 = v1;
    int v109 = 6;
    std::function<int ()(HALS_IOEngineInfo &)>::function<std::__bind<HALS_IOContext_Legacy_Impl::StopHardware(std::vector<unsigned int> const&)::$_0 &,std::placeholders::__ph<1> const&,eStopWhichDevices>,void>((uint64_t)v153, (uint64_t)&v105);
    *(void *)unsigned int v146 = caulk::function_ref<int ()(HALS_IOEngineInfo &)>::functor_invoker<std::function<int ()(HALS_IOEngineInfo &)>>;
    *(void *)&v146[8] = v153;
    *(void *)&long long v140 = &off_1F147D460;
    *(void *)&long long v142 = v146;
    *(void *)&buf.double mSampleTime = caulk::function_ref<int ()(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)>::functor_invoker<int HALS_IOEngineInfoList::engine_apply<FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(caulk::function_ref<int ()(HALS_IOEngineInfo&)>,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream const&)::{lambda(VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex &)#1}>;
    buf.UInt64 mHostTime = (UInt64)&v142;
    VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::do_apply<std::vector<std::unique_ptr<HALS_IOEngineInfo>>,VisitableVector<std::unique_ptr<HALS_IOEngineInfo>>::ItemWithIndex,FilterEngineInfoWithoutEngine,FilterIfEngineOnlyNeedsReferenceStream>(*(void *)(v1 + 1528), *(void *)(v1 + 1536), &buf, (uint64_t)&v140, (uint64_t)&v135);
    std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](v153);
    if (v105)
    {
      int32x2_t v106 = v105;
      operator delete(v105);
    }
    HALS_IOContext_Legacy_Impl::get_devices_that_are_not_reference_stream_only((HALS_IOContext_Legacy_Impl *)v146, v1);
    uint64_t v31 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**(unsigned int **)(*(void *)(v1 + 24) + 64));
    AudioTimeStamp v33 = (HALS_ObjectMap *)v31;
    if (v31)
    {
      *(void *)&buf.double mSampleTime = MEMORY[0x1E4F143A8];
      buf.UInt64 mHostTime = 0x40000000;
      *(void *)&buf.Float64 mRateScalar = ___ZN11HALS_Client23DevicesStoppedByContextERKNSt3__16vectorIjNS0_9allocatorIjEEEES6__block_invoke;
      buf.mWordClockTime = (UInt64)&__block_descriptor_tmp_22_2455;
      *(void *)&buf.mSMPTETime.mSubframes = v31;
      *(void *)&buf.mSMPTETime.mType = v146;
      *(void *)&buf.mSMPTETime.mHours = v149;
      AudioTimeStamp v34 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v31 + 56))(v31);
      HALB_CommandGate::ExecuteCommand(v34, (uint64_t)&buf);
    }
    HALS_ObjectMap::ReleaseObject(v33, v32);
    if (*(void *)v149)
    {
      *(void *)&v149[8] = *(void *)v149;
      operator delete(*(void **)v149);
    }
    if (*(void *)v146)
    {
      *(void *)&v146[8] = *(void *)v146;
      operator delete(*(void **)v146);
    }
    uint64_t v35 = *(void *)(*(void *)(v1 + 24) + 80);
    if (v35) {
      (*(void (**)(uint64_t))(*(void *)v35 + 128))(v35);
    }
    for (uint64_t j = *(unsigned __int8 **)(v1 + 1992); j; uint64_t j = *(unsigned __int8 **)j)
    {
      if (j[40])
      {
        unsigned __int8 v37 = atomic_load(j + 42);
        if (v37)
        {
          HALS_MultiTap::writer_stop(*((HALS_MultiTap **)j + 3), *(_DWORD *)(*(void *)(v1 + 24) + 16));
          atomic_store(0, j + 42);
          atomic_store(0, j + 41);
        }
      }
    }
    LOBYTE(v140) = 0;
    *(void *)&long long v142 = caulk::function_ref<int ()(unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContextDescription::FreeProcessors(void)::$_0>;
    *((void *)&v142 + 1) = &v140;
    *(void *)unsigned int v146 = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOContextDescription::ApplyToInput(caulk::function_ref<int ()(unsigned int,HALS_IOStreamInfo&)>)::$_0>;
    *(void *)&v146[8] = &v142;
    VisitableVector<HALS_IOStreamInfo>::apply<>(*(void *)(v1 + 1552), *(void *)(v1 + 1560), (long long *)v146);
    LOBYTE(v143) = 0;
    *(void *)&long long v142 = caulk::function_ref<int ()(unsigned int,HALS_IOStackDescription &,unsigned int,unsigned int,HALS_IOStreamInfo &)>::functor_invoker<HALS_IOContextDescription::FreeProcessors(void)::$_1>;
    *((void *)&v142 + 1) = &v143;
    *(void *)unsigned int v146 = _ZN5caulk12function_refIFiRN15VisitableVectorI23HALS_IOStackDescriptionE13ItemWithIndexEEE15functor_invokerIZN25HALS_IOContextDescription13ApplyToOutputIJEEEiNS0_IFijRS2_jjR17HALS_IOStreamInfoEEEDpRKT_EUlS5_E_EEiRKNS_7details15erased_callableIS6_EES5_;
    *(void *)&v146[8] = &v142;
    VisitableVector<HALS_IOStackDescription>::apply<>(*(void *)(v1 + 1576), *(void *)(v1 + 1584), (long long *)v146);
    HALS_IOContextDescription::UnregisterBuffers((HALS_IOContextDescription *)(v1 + 1496));
    char v141 = 0;
    size_t v38 = *(uint64_t **)(v1 + 1720);
    *(void *)&long long v140 = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_BufferFactory::free_buffers(void)::$_0>;
    *((void *)&v140 + 1) = &v141;
    VisitableVector<HALS_IOStreamInfo>::apply<>(*v38, v38[1], &v140);
    int v39 = *(uint64_t **)(v1 + 1728);
    *(void *)unsigned int v146 = &unk_1F1468530;
    *(void *)uint64_t v149 = v146;
    unsigned int v143 = v146;
    *(void *)&long long v142 = caulk::function_ref<int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::functor_invoker<HALS_IOStreamGrid::apply_to_streams(std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>;
    *((void *)&v142 + 1) = &v143;
    VisitableVector<HALS_IOStackDescription>::apply<>(*v39, v39[1], &v142);
    std::__function::__value_func<int ()(unsigned long,HALS_IOStreamInfo &)>::~__value_func[abi:ne180100](v146);
    uint64_t v40 = *(void *)(v1 + 1704);
    if (v40) {
      (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
    }
    *(void *)(v1 + 1704) = 0;
    *(void *)(v1 + 1096) = 0;
    if (v136) {
      operator delete(v136);
    }
    LOBYTE(p_p) = 0;
    std::string __p = &unk_1F1480990;
    p_AudioTimeStamp buf = (AudioTimeStamp *)(v1 + 1496);
    *(void *)unsigned int v146 = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOContext_Legacy_Impl::TeardownForIsolatedIO(void)::$_0>;
    *(void *)&v146[8] = &p_p;
    VisitableVector<HALS_IOStreamInfo>::do_apply<std::vector<HALS_IOStreamInfo>,VisitableVector<HALS_IOStreamInfo>::ItemWithIndex,HALS_IOContextDescription::ActiveInputsOnly>(*(void *)(v1 + 1552), *(void *)(v1 + 1560), (uint64_t (**)(void, void *))v146, (uint64_t)&__p);
    *(void *)(v1 + 1440) = *(void *)(v1 + 1432);
    kdebug_trace();
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v41 = *(_DWORD *)(*(void *)(v1 + 24) + 16);
      uint64_t v42 = *(void *)(v1 + 1312);
      *(_DWORD *)unsigned int v146 = 136315906;
      *(void *)&v146[4] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&v146[12] = 1024;
      *(_DWORD *)&v146[14] = 2013;
      __int16 v147 = 1024;
      int v148 = v41;
      *(_WORD *)uint64_t v149 = 2048;
      *(void *)&v149[2] = v42;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  IO Stopped Context %u after %lld frames.", v146, 0x22u);
    }
    HALS_IOContext_Legacy_Impl::SendIsRunningNotifications((HALS_Object **)v1);
    uint64_t v43 = *(void *)(v1 + 24);
    int v44 = *(_DWORD *)(v43 + 16);
    if (!*(unsigned char *)(*(void *)(v43 + 64) + 44)) {
      HALS_IOContext_Legacy_Impl::ReleasePowerAssertions((HALS_IOContext_Legacy_Impl *)v1);
    }
    std::string __p = 0;
    p_AudioTimeStamp buf = 0;
    HALS_System::GetInstance(v146, 0, (uint64_t *)&__p);
    HALS_System::SetIOContextIsRunning(*(HALS_System **)v146, v44, 0);
    if (*(void *)&v146[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v146[8]);
    }
    kdebug_trace();
    BOOL v45 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v1 + 1512));
    uint64_t v46 = *(void *)(v1 + 1520);
    BOOL v47 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
    if (v45 && v46)
    {
      if (!v47) {
        goto LABEL_76;
      }
      uint64_t v49 = (*(uint64_t (**)(HALS_ObjectMap *))(*(void *)v45 + 216))(v45);
      int v50 = *(_DWORD *)(v1 + 1056);
      *(_DWORD *)unsigned int v146 = 136316418;
      *(void *)&v146[4] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&v146[12] = 1024;
      *(_DWORD *)&v146[14] = 2037;
      __int16 v147 = 1024;
      int v148 = v44;
      *(_WORD *)uint64_t v149 = 2082;
      *(void *)&v149[2] = v46 + 32;
      *(_WORD *)&v149[10] = 2082;
      *(void *)&v149[12] = v49;
      __int16 v150 = 1024;
      int v151 = v50;
      unint64_t v51 = MEMORY[0x1E4F14500];
      unint64_t v52 = "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit: %u %{public}s (%{public}s): stopping with error %d";
      uint32_t v53 = 50;
    }
    else
    {
      if (!v47) {
        goto LABEL_76;
      }
      int v54 = *(_DWORD *)(v1 + 1056);
      *(_DWORD *)unsigned int v146 = 136315906;
      *(void *)&v146[4] = "HALS_IOContext_Legacy_Impl.cpp";
      *(_WORD *)&v146[12] = 1024;
      *(_DWORD *)&v146[14] = 2041;
      __int16 v147 = 1024;
      int v148 = v44;
      *(_WORD *)uint64_t v149 = 1024;
      *(_DWORD *)&v149[2] = v54;
      unint64_t v51 = MEMORY[0x1E4F14500];
      unint64_t v52 = "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOWorkLoopDeinit: %u: stopping with error %d";
      uint32_t v53 = 30;
    }
    _os_log_impl(&dword_1BAA78000, v51, OS_LOG_TYPE_DEFAULT, v52, v146, v53);
LABEL_76:
    HALS_ObjectMap::ReleaseObject(v45, v48);
    AMCP::Log::Scope_Registry::get(v55);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v146, "com.apple.coreaudio", "AMCP");
    unint64_t v56 = *(caulk::concurrent::messenger **)(*(void *)v146 + 8);
    char v57 = pthread_self();
    mach_port_t v58 = pthread_mach_thread_np(v57);
    uint64_t v59 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
    *(_DWORD *)(v59 + 16) = 0;
    *(unsigned char *)(v59 + 20) = 2;
    *(_DWORD *)(v59 + 24) = v58;
    *(void *)(v59 + 32) = "HALS_IOContext_Legacy_Impl.cpp";
    *(_DWORD *)(v59 + 40) = 2046;
    *(void *)uint64_t v59 = &unk_1F147B7D0;
    *(void *)(v59 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v56, (caulk::concurrent::message *)v59);
    if (*(void *)&v146[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v146[8]);
    }
  }
  return *(unsigned __int8 *)(v1 + 289);
}

void sub_1BAE5CC08(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](&STACK[0x220]);
    __cxa_begin_catch(a1);
    *(unsigned char *)(v2 + 289) = 1;
    __cxa_end_catch();
    JUMPOUT(0x1BAE5CBECLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BAE5CCF0(void *a1, int a2)
{
  if (a2)
  {
    std::pair<std::vector<unsigned int>,std::vector<unsigned int>>::~pair((uint64_t)&STACK[0x240]);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAE5C154);
  }
  JUMPOUT(0x1BAE5CCE0);
}

void sub_1BAE5CCFC(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAE5CCE0);
  }
  JUMPOUT(0x1BAE5CE60);
}

void sub_1BAE5CD08(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  if (a2)
  {
    std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](&STACK[0x298]);
    if (__p) {
      operator delete(__p);
    }
    if (a57) {
      operator delete(a57);
    }
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAE5C674);
  }
  JUMPOUT(0x1BAE5CCE0);
}

void sub_1BAE5CE14(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    std::__function::__value_func<int ()(HALS_IOEngineInfo &)>::~__value_func[abi:ne180100](&a69);
    JUMPOUT(0x1BAE5CF5CLL);
  }
  JUMPOUT(0x1BAE5CCE0);
}

void sub_1BAE5CE48(uint64_t a1, HALS_Object *a2)
{
  if (a2)
  {
    HALS_ObjectMap::ReleaseObject(v2, a2);
    JUMPOUT(0x1BAE5CE58);
  }
  JUMPOUT(0x1BAE5CCE0);
}

void sub_1BAE5CE78(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    if (a70) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a70);
    }
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      a69 = 136315394;
      *(void *)(v71 + 4) = "HALS_IOContext_Legacy_Impl.cpp";
      WORD2(a70) = 1024;
      *(_DWORD *)(v71 + 14) = 2491;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOContext_Legacy_Impl::IOThreadEntryBottom: terminating due to exception", (uint8_t *)&a69, 0x12u);
    }
    *(unsigned char *)(v70 + 1300) = 0;
    *(unsigned char *)(v70 + 289) = 1;
    __cxa_end_catch();
    JUMPOUT(0x1BAE5B87CLL);
  }
  JUMPOUT(0x1BAE5CCE0);
}

void sub_1BAE5CF0C(uint64_t a1, int a2)
{
  if (a2)
  {
    if (!STACK[0x248]) {
      JUMPOUT(0x1BAE5CF5CLL);
    }
    JUMPOUT(0x1BAE5CF34);
  }
  JUMPOUT(0x1BAE5CCE0);
}

void sub_1BAE5CF24(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    if (a70) {
      JUMPOUT(0x1BAE5CF34);
    }
    JUMPOUT(0x1BAE5CF5CLL);
  }
  JUMPOUT(0x1BAE5CCE0);
}

void sub_1BAE5CF3C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BAE5CF44);
  }
  JUMPOUT(0x1BAE5CCE0);
}

IOPMAssertionID **std::default_delete<HALS_IOContext_PowerAssertions>::operator()[abi:ne180100](IOPMAssertionID **result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::unique_ptr<HALB_PowerAssertion>::reset[abi:ne180100](result + 1, 0);
    std::unique_ptr<HALB_PowerAssertion>::reset[abi:ne180100](v1, 0);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<HALS_IOContext_PowerAssertions  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__114default_deleteI30HALS_IOContext_PowerAssertionsEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

IOPMAssertionID **std::__shared_ptr_pointer<HALS_IOContext_PowerAssertions  *>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<HALS_IOContext_PowerAssertions>::operator()[abi:ne180100](*(IOPMAssertionID ***)(a1 + 24));
}

void std::__shared_ptr_pointer<HALS_IOContext_PowerAssertions  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

__CFString *AMCP::HAL::pack_property_data(int a1, unsigned int a2, CFStringRef *a3)
{
  switch(a1)
  {
    case 1:
    case 5:
    case 18:
      int v4 = (void *)MEMORY[0x1E4F1C9B0];
      unint64_t v5 = a2;
      goto LABEL_16;
    case 2:
    case 3:
    case 7:
    case 10:
      if (a2 < 4) {
        goto LABEL_3;
      }
      int v4 = (void *)MEMORY[0x1E4F1C9B0];
      unint64_t v5 = 4;
      goto LABEL_16;
    case 4:
    case 11:
      int v4 = (void *)MEMORY[0x1E4F1C9B0];
      unint64_t v5 = a2 & 0xFFFFFFFC;
      goto LABEL_16;
    case 6:
      int v3 = (__CFString *)*a3;
      if (!*a3) {
        break;
      }
      CFIndex Length = CFStringGetLength(*a3);
      __int16 v13 = 0;
      std::vector<unsigned short>::vector(&__p, Length, &v13);
      v17.length = (v15 - (unsigned char *)__p) >> 1;
      v17.locatiouint64_t n = 0;
      CFStringGetCharacters(v3, v17, (UniChar *)__p);
      uint64_t v7 = [MEMORY[0x1E4F1C9B0] dataWithBytes:__p length:v15 - (unsigned char *)__p];
      goto LABEL_27;
    case 8:
      if (a2 < 8) {
        goto LABEL_3;
      }
      int v4 = (void *)MEMORY[0x1E4F1C9B0];
      unint64_t v5 = 8;
      goto LABEL_16;
    case 9:
    case 17:
      int v4 = (void *)MEMORY[0x1E4F1C9B0];
      unint64_t v5 = a2 & 0xFFFFFFF8;
      goto LABEL_16;
    case 12:
      if (a2 < 0x28) {
        goto LABEL_3;
      }
      int v4 = (void *)MEMORY[0x1E4F1C9B0];
      unint64_t v5 = 40;
LABEL_16:
      uint64_t v8 = [v4 dataWithBytes:a3 length:v5];
      goto LABEL_17;
    case 13:
      int v4 = (void *)MEMORY[0x1E4F1C9B0];
      unint64_t v5 = 40 * (a2 / 0x28uLL);
      goto LABEL_16;
    case 14:
      int v4 = (void *)MEMORY[0x1E4F1C9B0];
      unint64_t v5 = 56 * (a2 / 0x38uLL);
      goto LABEL_16;
    case 15:
      if (a2 < 8) {
        goto LABEL_3;
      }
      CFStringRef v10 = *a3;
      if (!v10) {
        goto LABEL_3;
      }
      uint64_t v8 = [MEMORY[0x1E4F28F98] dataWithPropertyList:v10 format:100 options:0 error:0];
LABEL_17:
      int v3 = (__CFString *)v8;
      break;
    case 16:
      if (a2 < 8 || !*a3) {
        goto LABEL_3;
      }
      CFStringRef v11 = CFURLGetString((CFURLRef)*a3);
      CFIndex v12 = CFStringGetLength(v11);
      __int16 v13 = 0;
      std::vector<unsigned short>::vector(&__p, v12, &v13);
      v18.length = (v15 - (unsigned char *)__p) >> 1;
      v18.locatiouint64_t n = 0;
      CFStringGetCharacters(v11, v18, (UniChar *)__p);
      uint64_t v7 = [MEMORY[0x1E4F1C9B0] dataWithBytes:__p length:v15 - (unsigned char *)__p];
LABEL_27:
      int v3 = (__CFString *)v7;
      if (__p)
      {
        char v15 = __p;
        operator delete(__p);
      }
      break;
    default:
LABEL_3:
      int v3 = 0;
      break;
  }

  return v3;
}

uint64_t AMCP::HAL::unpack_property_data(void *a1, int a2, unsigned int *a3, void *a4)
{
  uint64_t v7 = 2003329396;
  id v8 = a1;
  uint64_t v9 = v8;
  size_t v10 = *a3;
  switch(a2)
  {
    case 1:
    case 5:
    case 18:
      id v11 = v8;
      id v12 = v11;
      if (!v11) {
        goto LABEL_74;
      }
      if (!a4)
      {
        uint64_t v7 = 0;
        *a3 = [v11 length];
        goto LABEL_74;
      }
      unint64_t v13 = *a3;
      if ([v11 length] > v13) {
        goto LABEL_59;
      }
      unsigned int v14 = [v12 length];
      *a3 = v14;
      [v12 getBytes:a4 length:v14];
      goto LABEL_71;
    case 2:
      id v15 = v8;
      id v12 = v15;
      if (!v15) {
        goto LABEL_74;
      }
      if (!a4) {
        goto LABEL_60;
      }
      if (*a3 >= 4) {
        goto LABEL_26;
      }
      goto LABEL_59;
    case 3:
    case 10:
      id v15 = v8;
      id v12 = v15;
      if (!v15) {
        goto LABEL_74;
      }
      if (!a4) {
        goto LABEL_60;
      }
      if (*a3 >= 4) {
        goto LABEL_26;
      }
      goto LABEL_59;
    case 4:
    case 11:
      id v16 = v8;
      id v12 = v16;
      if (!a4)
      {
        uint64_t v7 = 0;
        unsigned int v36 = [v16 length] & 0xFFFFFFFC;
        goto LABEL_73;
      }
      if (*a3 - 1 < 3) {
        goto LABEL_59;
      }
      unsigned int v17 = [v16 length];
      unsigned int v18 = *a3;
      if (*a3 >= v17) {
        unsigned int v18 = v17;
      }
      *a3 = v18 & 0xFFFFFFFC;
      objc_msgSend(v12, "getBytes:length:", a4);
      goto LABEL_71;
    case 6:
      id v19 = v8;
      id v12 = v19;
      if (!v19) {
        goto LABEL_74;
      }
      if (!a4) {
        goto LABEL_61;
      }
      if (*a3 < 8) {
        goto LABEL_59;
      }
      *a3 = 8;
      id v20 = v19;
      uint64_t v21 = (uint64_t)CFStringCreateWithCharacters(0, (const UniChar *)[v20 bytes], (unint64_t)objc_msgSend(v20, "length") >> 1);
LABEL_52:
      uint64_t v7 = 0;
      *a4 = v21;
      goto LABEL_74;
    case 7:
      id v15 = v8;
      id v12 = v15;
      if (!v15) {
        goto LABEL_74;
      }
      if (!a4)
      {
LABEL_60:
        uint64_t v7 = 0;
        unsigned int v36 = 4;
        goto LABEL_73;
      }
      if (*a3 < 4) {
        goto LABEL_59;
      }
LABEL_26:
      *a3 = 4;
      [v15 getBytes:a4 length:4];
      goto LABEL_71;
    case 8:
      id v22 = v8;
      id v12 = v22;
      if (!v22) {
        goto LABEL_74;
      }
      if (!a4)
      {
LABEL_61:
        uint64_t v7 = 0;
        unsigned int v36 = 8;
        goto LABEL_73;
      }
      if (*a3 < 8) {
        goto LABEL_59;
      }
      *a3 = 8;
      [v22 getBytes:a4 length:8];
      goto LABEL_71;
    case 9:
      id v23 = v8;
      id v12 = v23;
      if (!a4) {
        goto LABEL_67;
      }
      if (*a3 - 1 < 7) {
        goto LABEL_59;
      }
      unsigned int v24 = [v23 length];
      unsigned int v25 = *a3;
      if (*a3 >= v24) {
        unsigned int v25 = v24;
      }
      goto LABEL_70;
    case 12:
      id v26 = v8;
      id v12 = v26;
      if (!v26) {
        goto LABEL_74;
      }
      if (!a4)
      {
        uint64_t v7 = 0;
        unsigned int v36 = 40;
        goto LABEL_73;
      }
      if (*a3 < 0x28) {
        goto LABEL_59;
      }
      *a3 = 40;
      [v26 getBytes:a4 length:40];
      goto LABEL_71;
    case 13:
      id v27 = v8;
      id v12 = v27;
      if (!a4)
      {
        uint64_t v7 = 0;
        unsigned int v36 = 40 * (([v27 length] & 0xFFFFFFF8) / 0x28);
        goto LABEL_73;
      }
      if (*a3 - 1 < 0x27) {
        goto LABEL_59;
      }
      unsigned int v28 = [v27 length];
      unsigned int v29 = *a3;
      if (*a3 >= v28) {
        unsigned int v29 = v28;
      }
      *a3 = 40 * (v29 / 0x28);
      objc_msgSend(v12, "getBytes:length:", a4);
      goto LABEL_71;
    case 14:
      id v30 = v8;
      id v12 = v30;
      if (!a4)
      {
        uint64_t v7 = 0;
        unsigned int v36 = 56 * ([v30 length] / 0x38);
        goto LABEL_73;
      }
      if (*a3 - 1 < 0x37) {
        goto LABEL_59;
      }
      unsigned int v31 = [v30 length];
      unsigned int v32 = *a3;
      if (*a3 >= v31) {
        unsigned int v32 = v31;
      }
      *a3 = 56 * (v32 / 0x38);
      objc_msgSend(v12, "getBytes:length:", a4);
      goto LABEL_71;
    case 15:
      id v12 = v8;
      if (a4 && *a3 < 8) {
        goto LABEL_59;
      }
      *a3 = 8;
      uint64_t v21 = [MEMORY[0x1E4F28F98] propertyListWithData:v12 options:0 format:0 error:0];
      goto LABEL_52;
    case 16:
      id v33 = v8;
      id v12 = v33;
      if (!a4) {
        goto LABEL_61;
      }
      if (*a3 != 8) {
        goto LABEL_59;
      }
      *a3 = 8;
      id v34 = v33;
      CFStringRef v35 = CFStringCreateWithCharacters(0, (const UniChar *)[v34 bytes], (unint64_t)objc_msgSend(v34, "length") >> 1);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&URLString, v35);
      *a4 = CFURLCreateWithString(0, URLString, 0);
      if (URLString) {
        CFRelease(URLString);
      }
      goto LABEL_71;
    case 17:
      id v23 = v8;
      id v12 = v23;
      if (a4)
      {
        if (*a3 - 1 >= 7)
        {
          unsigned int v37 = [v23 length];
          unsigned int v25 = *a3;
          if (*a3 >= v37) {
            unsigned int v25 = v37;
          }
LABEL_70:
          *a3 = v25 & 0xFFFFFFF8;
          objc_msgSend(v12, "getBytes:length:", a4);
LABEL_71:
          uint64_t v7 = 0;
        }
        else
        {
LABEL_59:
          uint64_t v7 = 561211770;
        }
      }
      else
      {
LABEL_67:
        uint64_t v7 = 0;
        unsigned int v36 = [v23 length] & 0xFFFFFFF8;
LABEL_73:
        *a3 = v36;
      }
LABEL_74:

      if (v7)
      {
LABEL_75:
        bzero(a4, v10);
        *a3 = 0;
      }

      return v7;
    default:
      goto LABEL_75;
  }
}

void sub_1BAE5D868(void *a1)
{
  __clang_call_terminate(a1);
}

CFDictionaryRef HALS_ClockDevice::GetPropertyData(CFDictionaryRef this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, unsigned int *a5, uint64_t *a6, unsigned int a7, const void *a8, HALS_Client *a9)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1819569762)
  {
    if (mSelector > 1853059699)
    {
      if (mSelector == 1853059700)
      {
        if (a4 <= 7)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_48;
          }
          int v17 = 136315394;
          unsigned int v18 = "HALS_ClockDevice.cpp";
          __int16 v19 = 1024;
          int v20 = 346;
          unsigned int v14 = MEMORY[0x1E4F14500];
          id v15 = "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioClockDevicePropertyNominalSampleRate";
          goto LABEL_47;
        }
        *a6 = 0;
        goto LABEL_22;
      }
      if (mSelector == 1953653102)
      {
        if (a4 <= 3)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_48;
          }
          int v17 = 136315394;
          unsigned int v18 = "HALS_ClockDevice.cpp";
          __int16 v19 = 1024;
          int v20 = 283;
          unsigned int v14 = MEMORY[0x1E4F14500];
          id v15 = "%25s:%-5d  HALS_ClockDevice::GetPropertyData: bad property data size for kAudioClockDevicePropertyTransportType";
          goto LABEL_47;
        }
        goto LABEL_33;
      }
      if (mSelector != 1969841184) {
        goto LABEL_36;
      }
LABEL_12:
      if (a4 <= 7)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_48;
        }
        int v17 = 136315394;
        unsigned int v18 = "HALS_ClockDevice.cpp";
        __int16 v19 = 1024;
        int v20 = 274;
        unsigned int v14 = MEMORY[0x1E4F14500];
        id v15 = "%25s:%-5d  HALS_Control::GetPropertyData: bad property data size for kAudioClockDevicePropertyDeviceUID";
        goto LABEL_47;
      }
      this = PropertyListDeepImmutableCopy(*((const __CFString **)this + 12));
      *a6 = (uint64_t)this;
LABEL_22:
      unsigned int v13 = 8;
LABEL_35:
      *a5 = v13;
      return this;
    }
    if (mSelector != 1819569763)
    {
      int v12 = 1853059619;
LABEL_18:
      if (mSelector == v12)
      {
        *a5 = 0;
        return this;
      }
      goto LABEL_36;
    }
    if (a4 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_48;
      }
      int v17 = 136315394;
      unsigned int v18 = "HALS_ClockDevice.cpp";
      __int16 v19 = 1024;
      int v20 = 319;
      unsigned int v14 = MEMORY[0x1E4F14500];
      id v15 = "%25s:%-5d  HALS_ClockDevice::GetPropertyData: bad property data size for kAudioClockDevicePropertyLatency";
      goto LABEL_47;
    }
LABEL_33:
    *(_DWORD *)a6 = 0;
    goto LABEL_34;
  }
  if (mSelector <= 1668639075)
  {
    if (mSelector != 1668049764)
    {
      int v12 = 1668575852;
      goto LABEL_18;
    }
    if (a4 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_48;
      }
      int v17 = 136315394;
      unsigned int v18 = "HALS_ClockDevice.cpp";
      __int16 v19 = 1024;
      int v20 = 292;
      unsigned int v14 = MEMORY[0x1E4F14500];
      id v15 = "%25s:%-5d  HALS_ClockDevice::GetPropertyData: bad property data size for kAudioClockDevicePropertyClockDomain";
      goto LABEL_47;
    }
    goto LABEL_33;
  }
  switch(mSelector)
  {
    case 1668639076:
      goto LABEL_12;
    case 1735354734:
      if (a4 <= 3)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_48;
        }
        int v17 = 136315394;
        unsigned int v18 = "HALS_ClockDevice.cpp";
        __int16 v19 = 1024;
        int v20 = 310;
        unsigned int v14 = MEMORY[0x1E4F14500];
        id v15 = "%25s:%-5d  HALS_ClockDevice::GetPropertyData: bad property data size for kAudioClockDevicePropertyDeviceIsRunning";
        goto LABEL_47;
      }
      goto LABEL_33;
    case 1818850926:
      if (a4 > 3)
      {
        *(_DWORD *)a6 = 1;
LABEL_34:
        unsigned int v13 = 4;
        goto LABEL_35;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
LABEL_48:
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = off_1F148A5D8;
        exception[2] = 561211770;
      }
      int v17 = 136315394;
      unsigned int v18 = "HALS_ClockDevice.cpp";
      __int16 v19 = 1024;
      int v20 = 301;
      unsigned int v14 = MEMORY[0x1E4F14500];
      id v15 = "%25s:%-5d  HALS_ClockDevice::GetPropertyData: bad property data size for kAudioClockDevicePropertyDeviceIsAlive";
LABEL_47:
      _os_log_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v17, 0x12u);
      goto LABEL_48;
  }
LABEL_36:

  return (CFDictionaryRef)HALS_Object::GetPropertyData((uint64_t)this, a2, (int *)a3, a4, (int *)a5, a6);
}

uint64_t HALS_ClockDevice::GetPropertyDataSize(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = *a3;
  uint64_t result = 8;
  if (*a3 > 1819569762)
  {
    if (v3 > 1853059699)
    {
      if (v3 != 1853059700 && v3 != 1969841184)
      {
        int v5 = 1953653102;
LABEL_19:
        if (v3 == v5) {
          return 4;
        }
        return HALS_Object::GetPropertyDataSize(8, a2, a3);
      }
      return result;
    }
    if (v3 == 1819569763) {
      return 4;
    }
    int v7 = 1853059619;
LABEL_17:
    if (v3 == v7) {
      return 0;
    }
    return HALS_Object::GetPropertyDataSize(8, a2, a3);
  }
  if (v3 <= 1668639075)
  {
    if (v3 == 1668049764) {
      return 4;
    }
    int v7 = 1668575852;
    goto LABEL_17;
  }
  if (v3 != 1668639076)
  {
    if (v3 != 1735354734)
    {
      int v5 = 1818850926;
      goto LABEL_19;
    }
    return 4;
  }
  return result;
}

uint64_t HALS_ClockDevice::IsPropertySettable(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t result = 0;
  int v4 = *a3;
  if (*a3 <= 1819569762)
  {
    if (v4 > 1735354733)
    {
      BOOL v6 = v4 == 1735354734;
      int v7 = 1818850926;
    }
    else
    {
      BOOL v6 = v4 == 1668049764;
      int v7 = 1668639076;
    }
  }
  else
  {
    if (v4 > 1853059699)
    {
      if (v4 != 1969841184 && v4 != 1953653102)
      {
        if (v4 == 1853059700) {
          return 1;
        }
        return HALS_Object::IsPropertySettable(0, a2, a3);
      }
      return result;
    }
    BOOL v6 = v4 == 1819569763;
    int v7 = 1853059619;
  }
  if (!v6 && v4 != v7) {
    return HALS_Object::IsPropertySettable(0, a2, a3);
  }
  return result;
}

uint64_t HALS_ClockDevice::HasProperty(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = *a3;
  uint64_t result = 1;
  if (*a3 <= 1819569762)
  {
    if (v3 <= 1668575851)
    {
      if (v3 != 1650682995 && v3 != 1668047219 && v3 != 1668049764) {
        return 0;
      }
      return result;
    }
    if (v3 > 1735354733)
    {
      if (v3 == 1735354734) {
        return result;
      }
      int v5 = 1818850926;
    }
    else
    {
      if (v3 == 1668575852) {
        return result;
      }
      int v5 = 1668639076;
    }
  }
  else if (v3 > 1870098019)
  {
    if (v3 > 1953653101)
    {
      if (v3 == 1953653102) {
        return result;
      }
      int v5 = 1969841184;
    }
    else
    {
      if (v3 == 1870098020) {
        return result;
      }
      int v5 = 1937007734;
    }
  }
  else if (v3 > 1853059699)
  {
    if (v3 == 1853059700) {
      return result;
    }
    int v5 = 1869638759;
  }
  else
  {
    if (v3 == 1819569763) {
      return result;
    }
    int v5 = 1853059619;
  }
  if (v3 != v5) {
    return 0;
  }
  return result;
}

uint64_t HALS_ClockDevice::GetMIGDispatchQueue(HALS_ClockDevice *this)
{
  return *((void *)this + 11);
}

{
  return *((void *)this + 11);
}

uint64_t HALS_ClockDevice::GetCommandGate(HALS_ClockDevice *this)
{
  return *((void *)this + 10);
}

{
  return *((void *)this + 10);
}

void HALS_ClockDevice::HALS_ClockDevice(HALS_ClockDevice *this, HALS_DeviceManager *a2, const __CFString *a3, uint64_t a4, HALS_Object *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  HALS_Object::HALS_Object(this, 1633905771, 0, (uint64_t)a2, a5);
  *(void *)(v6 + 64) = 0;
  *(void *)(v6 + 56) = 0;
  *(void *)(v6 + 48) = v6 + 56;
  *(unsigned char *)(v6 + 72) = 0;
  *(void *)uint64_t v6 = &unk_1F147C938;
  *(void *)(v6 + 80) = 0;
  *(void *)(v6 + 96) = a3;
  id v8 = (const __CFString **)(v6 + 96);
  *(void *)(v6 + 88) = 0;
  *(unsigned char *)(v6 + 104) = 1;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 240) = 0u;
  *(_OWORD *)(v6 + 256) = 0u;
  *(_OWORD *)(v6 + 272) = 0u;
  *(_OWORD *)(v6 + 288) = 0u;
  *(_OWORD *)(v6 + 304) = 0u;
  *(_OWORD *)(v6 + 320) = 0u;
  *(_OWORD *)(v6 + 336) = 0u;
  *(_OWORD *)(v6 + 352) = 0u;
  if (a3)
  {
    *(_DWORD *)AudioTimeStamp buf = 256;
    CACFString::GetCString(a3, (__CFString *)(v6 + 112), (char *)buf, v7);
    CFStringRef Length = *v8;
    if (*v8)
    {
      CFStringRef Length = (const __CFString *)CFStringGetLength(Length);
      int v10 = Length + 1;
    }
    else
    {
      int v10 = 1;
    }
    *(_DWORD *)id v15 = v10;
    MEMORY[0x1F4188790](Length);
    CACFString::GetCString(*v8, (__CFString *)&v15[-((v11 + 15) & 0x1FFFFFFF0) - 4], v15, v12);
    operator new[]();
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    int v17 = "HALS_ClockDevice.cpp";
    __int16 v18 = 1024;
    int v19 = 39;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ClockDevice::HALS_ClockDevice: all clock devices have to have a UID", buf, 0x12u);
  }
  exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
  *(void *)exceptiouint64_t n = off_1F148A5D8;
  exception[2] = 1852797029;
}

void sub_1BAE5E3D0(_Unwind_Exception *a1)
{
  MEMORY[0x1C1859840](v4, 0x10A0C40CF3E2C79);
  MEMORY[0x1C1859810](v3, 0x1000C8077774924);
  CACFString::~CACFString(v2);
  HALS_IODevice::~HALS_IODevice(v1);
  _Unwind_Resume(a1);
}

void HALS_IODevice::~HALS_IODevice(HALS_IODevice *this)
{
  *(void *)this = &unk_1F1488140;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 7));

  HALS_Object::~HALS_Object(this);
}

void HALS_ClockDevice::~HALS_ClockDevice(HALS_ClockDevice *this)
{
  *(void *)this = &unk_1F147C938;
  uint64_t v2 = (HALB_Mutex *)*((void *)this + 10);
  if (v2)
  {
    HALB_Mutex::~HALB_Mutex(v2);
    MEMORY[0x1C1859840]();
  }
  uint64_t v3 = (AMCP::Utility::Dispatch_Queue *)*((void *)this + 11);
  if (v3)
  {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v3);
    MEMORY[0x1C1859840]();
  }
  CACFString::~CACFString((HALS_ClockDevice *)((char *)this + 96));
  *(void *)this = &unk_1F1488140;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 7));

  HALS_Object::~HALS_Object(this);
}

uint64_t caulk::function_ref<int ()(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)>::functor_invoker<HALS_IOStreamGroupList::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>(uint64_t **a1, uint64_t **a2)
{
  void v8[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a2;
  uint64_t v3 = **a1;
  std::__function::__value_func<int ()(unsigned long,HALS_IOStreamInfo &)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)(*a1 + 1));
  v7[0] = v8;
  v7[1] = v3;
  *(void *)&long long v6 = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamInfo>::ItemWithIndex &)>::functor_invoker<HALS_IOStreamGroup::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo&)>)::$_0>;
  *((void *)&v6 + 1) = v7;
  uint64_t v4 = VisitableVector<HALS_IOStreamInfo>::apply<>(*v2, v2[1], &v6);
  std::__function::__value_func<int ()(unsigned long,HALS_IOStreamInfo &)>::~__value_func[abi:ne180100](v8);
  return v4;
}

void sub_1BAE5E5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<int ()(unsigned long,HALS_IOStreamInfo &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL HALS_Stream::GetStreamIsActive(unsigned int *a1)
{
  uint64_t v1 = a1[4];
  uint64_t v3 = 0x676C6F6273616374;
  int v4 = 0;
  uint64_t v5 = 0;
  (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)a1 + 112))(a1, v1, &v3, 4, &v5, (char *)&v5 + 4, 0, 0, 0);
  return HIDWORD(v5) != 0;
}

void std::default_delete<FormatConverter>::operator()[abi:ne180100](AudioConverterRef *a1)
{
  AudioConverterDispose(*a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALS_IOStreamDSP>::__on_zero_shared(void *a1)
{
  uint64_t v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  if (a1[21])
  {
    std::vector<std::vector<std::byte>>::__clear[abi:ne180100](a1 + 21);
    operator delete((void *)a1[21]);
  }
  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100](a1 + 16, 0);
  std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](a1 + 17);
  uint64_t v3 = (void *)a1[12];
  if (v3)
  {
    a1[13] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[9];
  if (v4)
  {
    a1[10] = v4;
    operator delete(v4);
  }
  uint64_t v5 = a1[6];
  if (v5)
  {
    uint64_t v6 = a1[7];
    int v7 = (void *)a1[6];
    if (v6 != v5)
    {
      do
      {
        v6 -= 88;
        std::__destroy_at[abi:ne180100]<HALS_IOStreamDSP::InputChannelData,0>(v6);
      }
      while (v6 != v5);
      int v7 = (void *)a1[6];
    }
    a1[7] = v5;
    operator delete(v7);
  }
  uint64_t v8 = a1[5];
  a1[5] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)a1[4];
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void std::__shared_ptr_emplace<HALS_IOStreamDSP>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147CB28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALS_IOStreamDSP>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147CB28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 HALS_IOEngine2_StreamInfo::CreateCaptureFile(uint64_t a1)
{
  _OWORD v32[4] = *(uint64_t (**)(void, void, void, void, void))MEMORY[0x1E4F143B8];
  __n128 result = *(__n128 *)(a1 + 120);
  long long v3 = *(_OWORD *)(a1 + 136);
  __n128 v24 = result;
  long long v25 = v3;
  uint64_t v26 = *(void *)(a1 + 152);
  if (*(_DWORD *)(a1 + 24) == 1)
  {
    uint64_t v4 = *(void *)(a1 + 200);
    __n128 result = *(__n128 *)(a1 + 40);
    long long v5 = *(_OWORD *)(a1 + 56);
    __n128 v24 = result;
    long long v25 = v5;
    uint64_t v26 = *(void *)(a1 + 72);
    if (!v4 && v24.n128_u32[2] == 1819304813)
    {
      unsigned int v6 = 1;
      goto LABEL_8;
    }
  }
  else if (!*(void *)(a1 + 200) && v24.n128_u32[2] == 1819304813)
  {
    unsigned int v6 = 2 * *(unsigned __int8 *)(a1 + 21);
LABEL_8:
    uint64_t v21 = 0;
    id v22 = 0;
    unint64_t v23 = 0;
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a1 + 320))();
    uint64_t v8 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 216))(v7);
    std::string::basic_string[abi:ne180100]<0>(__p, v8);
    HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)0>(&v21, (uint64_t)__p);
    int v18 = *(_DWORD *)(a1 + 8);
    HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)4>(&v21, &v18);
    int v17 = *(_DWORD *)(a1 + 12);
    HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)3>(&v21, &v17);
    uint64_t v9 = v22;
    if ((unint64_t)v22 >= v23)
    {
      unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v22 - v21) >> 3);
      if (v11 + 1 > 0x666666666666666) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = 0x999999999999999ALL * ((uint64_t)(v23 - v21) >> 3);
      if (v12 <= v11 + 1) {
        unint64_t v12 = v11 + 1;
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v23 - v21) >> 3) >= 0x333333333333333) {
        unint64_t v13 = 0x666666666666666;
      }
      else {
        unint64_t v13 = v12;
      }
      unsigned int v31 = &v23;
      unsigned int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v13);
      id v15 = &v14[40 * v11];
      id v27 = (void *(*)(unsigned int, void *, uint64_t, uint64_t, void *))v14;
      unsigned int v28 = v15;
      id v30 = &v14[40 * v16];
      v32[1] = (uint64_t (*)(void, void, void, void, void))v6;
      v32[0] = (uint64_t (*)(void, void, void, void, void))std::__any_imp::_SmallHandler<HALB_CaptureFile_ReferenceStreamState>::__handle[abi:ne180100];
      *(_DWORD *)id v15 = 5;
      *((void *)v15 + 1) = std::__any_imp::_SmallHandler<HALB_CaptureFile_ReferenceStreamState>::__handle[abi:ne180100];
      *((void *)v15 + 2) = 0;
      *((_DWORD *)v15 + 4) = v6;
      std::any::reset[abi:ne180100](v32);
      unsigned int v29 = v15 + 40;
      std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__swap_out_circular_buffer(&v21, &v27);
      int v10 = v22;
      std::__split_buffer<HALB_CaptureFile_NameBuilder::ComponentBase>::~__split_buffer((uint64_t)&v27);
    }
    else
    {
      unsigned int v28 = (char *)v6;
      id v27 = std::__any_imp::_SmallHandler<HALB_CaptureFile_ReferenceStreamState>::__handle[abi:ne180100];
      _DWORD *v22 = 5;
      *((void *)v9 + 1) = std::__any_imp::_SmallHandler<HALB_CaptureFile_ReferenceStreamState>::__handle[abi:ne180100];
      *((void *)v9 + 2) = 0;
      uint64_t v9[4] = v6;
      std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))&v27);
      int v10 = v9 + 10;
    }
    id v22 = v10;
    LODWORD(v27) = *(unsigned __int8 *)(a1 + 20);
    HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)2>(&v21, &v27);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    operator new();
  }
  return result;
}

void sub_1BAE5EB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  MEMORY[0x1C1859840](v17, 0x1020C40C1DD3C34);
  *(void *)(v18 - 104) = &a17;
  std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 104));
  _Unwind_Resume(a1);
}

uint64_t *HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)4>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v5)
  {
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *a1) >> 3);
    if (v9 + 1 > 0x666666666666666) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v12 = 0x666666666666666;
    }
    else {
      unint64_t v12 = v11;
    }
    id v22 = v4;
    unint64_t v13 = (uint64_t (*)(unsigned int, uint64_t, uint64_t, uint64_t, void *))std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v12);
    unsigned int v14 = (char *)v13 + 40 * v9;
    uint64_t v18 = v13;
    int v19 = v14;
    uint64_t v21 = (char *)v13 + 40 * v15;
    uint64_t v24 = 0;
    LODWORD(v24) = *a2;
    int v16 = v24;
    unint64_t v23 = std::__any_imp::_SmallHandler<unsigned int>::__handle[abi:ne180100];
    *(_DWORD *)unsigned int v14 = 4;
    *((void *)v14 + 1) = std::__any_imp::_SmallHandler<unsigned int>::__handle[abi:ne180100];
    *((void *)v14 + 2) = 0;
    *((_DWORD *)v14 + 4) = v16;
    std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))&v23);
    char v20 = v14 + 40;
    std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__swap_out_circular_buffer(a1, &v18);
    uint64_t v8 = a1[1];
    std::__split_buffer<HALB_CaptureFile_NameBuilder::ComponentBase>::~__split_buffer((uint64_t)&v18);
  }
  else
  {
    int v19 = 0;
    LODWORD(v19) = *a2;
    int v7 = (int)v19;
    uint64_t v18 = std::__any_imp::_SmallHandler<unsigned int>::__handle[abi:ne180100];
    *(_DWORD *)unint64_t v6 = 4;
    *(void *)(v6 + 8) = std::__any_imp::_SmallHandler<unsigned int>::__handle[abi:ne180100];
    *(void *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 16) = v7;
    std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))&v18);
    uint64_t v8 = v6 + 40;
  }
  a1[1] = v8;
  return a1;
}

uint64_t *HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)2>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v5)
  {
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *a1) >> 3);
    if (v9 + 1 > 0x666666666666666) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v12 = 0x666666666666666;
    }
    else {
      unint64_t v12 = v11;
    }
    id v22 = v4;
    unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v12);
    unsigned int v14 = &v13[40 * v9];
    uint64_t v18 = (void *(*)(unsigned int, void *, uint64_t, uint64_t, void *))v13;
    int v19 = v14;
    uint64_t v21 = &v13[40 * v15];
    uint64_t v24 = 0;
    LODWORD(v24) = *a2;
    int v16 = v24;
    unint64_t v23 = std::__any_imp::_SmallHandler<AMCP::Direction>::__handle[abi:ne180100];
    *(_DWORD *)unsigned int v14 = 2;
    *((void *)v14 + 1) = std::__any_imp::_SmallHandler<AMCP::Direction>::__handle[abi:ne180100];
    *((void *)v14 + 2) = 0;
    *((_DWORD *)v14 + 4) = v16;
    std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))&v23);
    char v20 = v14 + 40;
    std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__swap_out_circular_buffer(a1, &v18);
    uint64_t v8 = a1[1];
    std::__split_buffer<HALB_CaptureFile_NameBuilder::ComponentBase>::~__split_buffer((uint64_t)&v18);
  }
  else
  {
    int v19 = 0;
    LODWORD(v19) = *a2;
    int v7 = (int)v19;
    uint64_t v18 = std::__any_imp::_SmallHandler<AMCP::Direction>::__handle[abi:ne180100];
    *(_DWORD *)unint64_t v6 = 2;
    *(void *)(v6 + 8) = std::__any_imp::_SmallHandler<AMCP::Direction>::__handle[abi:ne180100];
    *(void *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 16) = v7;
    std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))&v18);
    uint64_t v8 = v6 + 40;
  }
  a1[1] = v8;
  return a1;
}

void *std::__any_imp::_SmallHandler<AMCP::Direction>::__handle[abi:ne180100](unsigned int a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  switch(v5)
  {
    case 1:
      __n128 result = 0;
      *(_DWORD *)(a3 + 8) = *((_DWORD *)a2 + 2);
      *(void *)a3 = std::__any_imp::_SmallHandler<AMCP::Direction>::__handle[abi:ne180100];
      break;
    case 2:
      __n128 result = 0;
      *(_DWORD *)(a3 + 8) = *((_DWORD *)a2 + 2);
      *(void *)a3 = std::__any_imp::_SmallHandler<AMCP::Direction>::__handle[abi:ne180100];
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v8 = std::type_info::operator==[abi:ne180100](*(void *)(a4 + 8), (uint64_t)"N4AMCP9DirectionE");
      }
      else {
        BOOL v8 = a5 == &std::__any_imp::__unique_typeinfo<AMCP::Direction>::__id;
      }
      if (v8) {
        __n128 result = a2 + 1;
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void *std::__any_imp::_SmallHandler<HALB_CaptureFile_ReferenceStreamState>::__handle[abi:ne180100](unsigned int a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  switch(v5)
  {
    case 1:
      __n128 result = 0;
      *(_DWORD *)(a3 + 8) = *((_DWORD *)a2 + 2);
      *(void *)a3 = std::__any_imp::_SmallHandler<HALB_CaptureFile_ReferenceStreamState>::__handle[abi:ne180100];
      break;
    case 2:
      __n128 result = 0;
      *(_DWORD *)(a3 + 8) = *((_DWORD *)a2 + 2);
      *(void *)a3 = std::__any_imp::_SmallHandler<HALB_CaptureFile_ReferenceStreamState>::__handle[abi:ne180100];
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v8 = std::type_info::operator==[abi:ne180100](*(void *)(a4 + 8), (uint64_t)"37HALB_CaptureFile_ReferenceStreamState");
      }
      else {
        BOOL v8 = a5 == &std::__any_imp::__unique_typeinfo<HALB_CaptureFile_ReferenceStreamState>::__id;
      }
      if (v8) {
        __n128 result = a2 + 1;
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

uint64_t *std::vector<float,HALB_IOBufferManager_Server::Allocator<float>>::shrink_to_fit(uint64_t *result)
{
  uint64_t v1 = *result;
  uint64_t v2 = result[1];
  uint64_t v3 = v2 - *result;
  uint64_t v4 = v3 >> 2;
  if (v3 >> 2 < (unint64_t)((result[2] - *result) >> 2))
  {
    uint64_t v5 = result;
    void v12[4] = result + 2;
    if (v2 == v1)
    {
      uint64_t v8 = 4 * v4;
    }
    else
    {
      vm_address_t Buffer = HALB_IOBufferManager_Server::AllocateBuffer(v3 & 0xFFFFFFFC);
      uint64_t v7 = *v5;
      uint64_t v1 = v5[1];
      uint64_t v8 = Buffer + 4 * v4;
      if (v1 != *v5)
      {
        uint64_t v9 = 0;
        do
        {
          *(_DWORD *)(v8 + v9 - 4) = *(_DWORD *)(v1 + v9 - 4);
          v9 -= 4;
        }
        while (v1 + v9 != v7);
        uint64_t v10 = v8 + v9;
        goto LABEL_9;
      }
    }
    uint64_t v7 = v1;
    uint64_t v10 = v8;
LABEL_9:
    uint64_t *v5 = v10;
    v5[1] = v8;
    uint64_t v11 = v5[2];
    void v5[2] = v8;
    uint64_t v12[2] = v1;
    v12[3] = v11;
    v12[0] = v7;
    v12[1] = v7;
    return (uint64_t *)std::__split_buffer<float,HALB_IOBufferManager_Server::Allocator<float> &>::~__split_buffer((uint64_t)v12);
  }
  return result;
}

void sub_1BAE5F158(void *a1)
{
}

AudioConverterRef *FormatConverter::FormatConverter(AudioConverterRef *a1, const AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  OSStatus v4 = AudioConverterNew(a2, a3, a1);
  if (v4)
  {
    v8[0] = HIBYTE(v4);
    v8[1] = BYTE2(v4);
    void v8[2] = BYTE1(v4);
    OSStatus v6 = v4;
    void v8[3] = v4;
    void v8[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      uint64_t v10 = "HALS_IOEngine2_StreamInfo.cpp";
      __int16 v11 = 1024;
      int v12 = 425;
      __int16 v13 = 1024;
      OSStatus v14 = v6;
      __int16 v15 = 2080;
      int v16 = v8;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOEngine2_StreamInfo::StartIO: couldn't create the format converter, Error: %d (%s)", buf, 0x22u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v6;
  }
  return a1;
}

uint64_t std::__split_buffer<float,HALB_IOBufferManager_Server::Allocator<float> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  }
  OSStatus v4 = *(HALB_IOBufferManager_Server **)a1;
  if (*(void *)a1) {
    HALB_IOBufferManager_Server::FreeBuffer(v4, (*(_DWORD *)(a1 + 24) - v4) & 0xFFFFFFFC);
  }
  return a1;
}

void *std::__function::__func<HALS_IOEngine2_StreamInfo::synchronized_mixer_init(void)::$_0,std::allocator<HALS_IOEngine2_StreamInfo::synchronized_mixer_init(void)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOEngine2_StreamInfo::synchronized_mixer_init(void)::$_0,std::allocator<HALS_IOEngine2_StreamInfo::synchronized_mixer_init(void)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN25HALS_IOEngine2_StreamInfo23synchronized_mixer_initEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOEngine2_StreamInfo::synchronized_mixer_init(void)::$_0,std::allocator<HALS_IOEngine2_StreamInfo::synchronized_mixer_init(void)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::operator()(uint64_t a1, unsigned int *a2, AMCP::DAL::DAL_Time *this)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  OSStatus v6 = (AMCP::DAL::DAL_Time *)((char *)this + 40);
  if (AMCP::DAL::DAL_Time::operator<(this, (AMCP::DAL::DAL_Time *)((char *)this + 40)))
  {
    double sample_time = AMCP::DAL::DAL_Time::get_sample_time(this);
    uint64_t v8 = *(void *)(a1 + 16);
    unint64_t v9 = vcvtmd_s64_f64(sample_time);
    double v10 = AMCP::DAL::DAL_Time::get_sample_time(this);
    double v11 = AMCP::DAL::DAL_Time::get_sample_time(v6);
    HALS_IOEngine2_StreamInfo::GetPointersForMixBuffer((uint64_t)&v47, v8, v9, vcvtmd_s64_f64(v11 - v10));
    uint64_t v12 = v49;
    if (v47) {
      __int16 v13 = (float *)(v47 + v48);
    }
    else {
      __int16 v13 = 0;
    }
    unsigned int v14 = v52;
    if (v50) {
      __int16 v15 = (float *)(v50 + v51);
    }
    else {
      __int16 v15 = 0;
    }
    AMCP::DAL::DAL_Time::operator-((uint64_t)buf, v6, this);
    if ((buf[0] & 2) == 0) {
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)buf);
    }
    unsigned int v16 = vcvtmd_s64_f64(*(double *)v54);
    uint64_t v17 = *(AMCP::Log::Scope_Registry **)&v58[6];
    if (*(void *)&v58[6]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v58[6]);
    }
    if (v13)
    {
      if (v16 < v12)
      {
        AMCP::Log::Scope_Registry::get(v17);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        unsigned int v29 = **(NSObject ***)buf;
        if (*(void *)v54) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v54);
        }
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          id v30 = pthread_self();
          mach_port_t v31 = pthread_mach_thread_np(v30);
          *(_DWORD *)AudioTimeStamp buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v31;
          *(_WORD *)int v54 = 2080;
          *(void *)&v54[2] = "HALS_IOEngine2_StreamInfo.cpp";
          __int16 v55 = 1024;
          int v56 = 291;
          __int16 v57 = 2080;
          *(void *)mach_port_t v58 = "not (write_size >= the1stMixBufferFrameSize)";
          _os_log_error_impl(&dword_1BAA78000, v29, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v46);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v38);
        std::logic_error::logic_error(&v39, &v38);
        v39.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error(&v40, &v39);
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        int v45 = -1;
        v40.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        int v41 = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v40);
        *(void *)&v58[6] = "auto HALS_IOEngine2_StreamInfo::synchronized_mixer_init()::(anonymous class)::operator()(co"
                             "nst AMCP::DAL::Source_ID &, const AMCP::DAL::Readable_Range &) const";
        uint64_t v59 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOEngine2_StreamInfo.cpp";
        int v60 = 291;
        std::vector<void *>::vector(&v33);
        int v32 = backtrace((void **)v33, (*((void *)&v33 + 1) - (void)v33) >> 3);
        std::vector<void *>::resize((char **)&v33, v32);
        long long v36 = v33;
        uint64_t v37 = v34;
        long long v33 = 0uLL;
        uint64_t v34 = 0;
        CFStringRef v35 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      HALS_IOEngine2_StreamInfo::read_from_synchronized_mixer(*(HALS_IOEngine2_StreamInfo **)(a1 + 16), v9, v12, v13);
      v16 -= v12;
      double sample_time = sample_time + (double)v12;
    }
    if (v15)
    {
      if (v14 >= v16) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = v14;
      }
      HALS_IOEngine2_StreamInfo::read_from_synchronized_mixer(*(HALS_IOEngine2_StreamInfo **)(a1 + 16), vcvtmd_s64_f64(sample_time), v18, v15);
    }
    uint64_t v19 = *(void *)(a1 + 16);
    int64_t v20 = vcvtmd_s64_f64(AMCP::DAL::DAL_Time::get_sample_time(v6));
    if (*(void *)(v19 + 464) <= v20) {
      *(void *)(v19 + 464) = v20;
    }
    uint64_t v21 = *a2;
    unint64_t v23 = *(HALS_IOEngine2 **)(a1 + 8);
    id v22 = *(HALS_IOEngine2_StreamInfo **)(a1 + 16);
    uint64_t v24 = vcvtmd_s64_f64(AMCP::DAL::DAL_Time::get_sample_time(this));
    uint64_t v25 = vcvtmd_s64_f64(AMCP::DAL::DAL_Time::get_sample_time(v6));
    uint64_t v26 = *(void *)(a1 + 8);
    uint64_t v27 = *(void *)(v26 + 1080);
    unsigned int v28 = *(std::__shared_weak_count **)(v26 + 1088);
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    HALS_IOEngine2::_ColoringMixer_EmitRange(v23, v21, v22, v24, v25, *(HALS_IOClock **)(v27 + 56), (const AudioServerPlugInIOCycleInfo *)(*(void *)(a1 + 16) + 232), *(_DWORD *)(*(void *)(a1 + 16) + 456));
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
  }
}

void sub_1BAE5F890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  long long v36 = *(std::__shared_weak_count **)(v34 - 160);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOEngine2_StreamInfo::GetPointersForMixBuffer(uint64_t this, uint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v4 = *(unsigned int *)(a2 + 36);
  if (v4) {
    BOOL v5 = v4 >= a4;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5
    && ((uint64_t v6 = *(void *)(a2 + 472), (*(unsigned char *)(a2 + 52) & 0x20) != 0) ? (v7 = 1) : (v7 = *(unsigned int *)(a2 + 68)),
        ((*(void *)(a2 + 480) - v6) >> 2) / v7 >= a4))
  {
    unint64_t v14 = a3 % v4;
    int v15 = *(_DWORD *)(a2 + 64);
    unint64_t v16 = a3 % v4 + a4;
    unsigned int v10 = v4 - a3 % v4;
    int v17 = a3 % v4 - v4 + a4;
    BOOL v18 = v16 > v4;
    if (v16 <= v4) {
      int v11 = 0;
    }
    else {
      int v11 = a3 % v4 - v4 + a4;
    }
    if (v18) {
      int v12 = v17 * v15;
    }
    else {
      int v12 = 0;
    }
    if (v18) {
      uint64_t v13 = *(void *)(a2 + 472);
    }
    else {
      uint64_t v13 = 0;
    }
    if (v18)
    {
      int v8 = v10 * v15;
    }
    else
    {
      unsigned int v10 = a4;
      int v8 = v15 * a4;
    }
    int v9 = v15 * v14;
  }
  else
  {
    int v8 = 0;
    int v9 = 0;
    uint64_t v6 = 0;
    unsigned int v10 = 0;
    int v11 = 0;
    int v12 = 0;
    uint64_t v13 = 0;
  }
  *(void *)this = v6;
  *(_DWORD *)(this + 8) = v9;
  *(_DWORD *)(this + 12) = v8;
  *(_DWORD *)(this + 16) = v10;
  *(void *)(this + 24) = v13;
  *(_DWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 36) = v12;
  *(_DWORD *)(this + 40) = v11;
  return this;
}

void HALS_IOEngine2_StreamInfo::read_from_synchronized_mixer(HALS_IOEngine2_StreamInfo *this, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v5 = *((void *)this + 26);
  uint64_t v6 = *(void *)(v5 + 88);
  if (v6)
  {
    long long v7 = *(_OWORD *)(v6 + 24);
    long long v11 = *(_OWORD *)(v6 + 8);
    long long v12 = v7;
    uint64_t v13 = *(void *)(v6 + 40);
  }
  else
  {
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
  }
  uint64_t v8 = *(void *)(*(void *)this + 1080);
  int v9 = *(std::__shared_weak_count **)(*(void *)this + 1088);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v10[0] = v8;
  v10[1] = (uint64_t)v9;
  read_from_dal_buffer(a3, a2, (uint64_t)&v11, v5, (uint64_t **)this + 28, v10, a4);
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

__n128 std::__function::__func<HALS_IOEngine2_StreamInfo::synchronized_mixer_init(void)::$_0,std::allocator<HALS_IOEngine2_StreamInfo::synchronized_mixer_init(void)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F147CB78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOEngine2_StreamInfo::synchronized_mixer_init(void)::$_0,std::allocator<HALS_IOEngine2_StreamInfo::synchronized_mixer_init(void)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F147CB78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<HALS_IOEngine2_StreamInfo::synchronized_mixer_init(void)::$_0,std::allocator<HALS_IOEngine2_StreamInfo::synchronized_mixer_init(void)::$_0>,void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::Readable_Range const&)>::~__func()
{
}

uint64_t HALS_IOEngine2_StreamInfo::ApplyDSP(uint64_t result, long long *a2, int a3, void *a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  if (*(void *)result && *(unsigned char *)(*(void *)result + 762))
  {
    long long v7 = (void *)result;
    long long v8 = a2[1];
    long long v67 = *a2;
    long long v68 = v8;
    long long v9 = a2[3];
    long long v69 = a2[2];
    long long v70 = v9;
    long long v11 = (_DWORD *)*a4;
    unsigned int v10 = (_DWORD *)a4[1];
    int64_t v12 = (int64_t)v10 - *a4;
    uint64_t v13 = *(void *)(result + 24);
    uint64_t v14 = *(void *)(result + 32);
    uint64_t v15 = 0x2E8BA2E8BA2E8BA3 * ((v14 - v13) >> 3);
    if (v12 >> 4 != v15)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v60 = **(NSObject ***)buf;
      if ((void)v72) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v72);
      }
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      {
        uint64_t v61 = pthread_self();
        mach_port_t v62 = pthread_mach_thread_np(v61);
        *(_DWORD *)AudioTimeStamp buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v62;
        LOWORD(v72) = 2080;
        *(void *)((char *)&v72 + 2) = "HALS_IOStreamDSP.cpp";
        WORD5(v72) = 1024;
        HIDWORD(v72) = 509;
        LOWORD(v73) = 2080;
        *(void *)((char *)&v73 + 2) = "inputStreams.size() == mInputChannelData.size()";
        _os_log_error_impl(&dword_1BAA78000, v60, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
      }
      abort();
    }
    int v18 = v11[1];
    int v19 = *(_DWORD *)(result + 96);
    if (v10 == v11)
    {
      int64_t v20 = 0;
      uint64_t v21 = 0;
    }
    else
    {
      if (v12 < 0) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      int64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v12 >> 4);
      __n128 result = (uint64_t)memmove(v20, v11, v12);
      uint64_t v21 = &v20[16 * (v12 >> 4)];
      uint64_t v13 = v7[3];
      uint64_t v14 = v7[4];
      uint64_t v15 = 0x2E8BA2E8BA2E8BA3 * ((v14 - v13) >> 3);
    }
    unint64_t v22 = (v21 - v20) >> 4;
    if (v22 != v15)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      char v63 = **(NSObject ***)buf;
      if ((void)v72) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v72);
      }
      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
        uint64_t v64 = pthread_self();
        mach_port_t v65 = pthread_mach_thread_np(v64);
        *(_DWORD *)AudioTimeStamp buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v65;
        LOWORD(v72) = 2080;
        *(void *)((char *)&v72 + 2) = "HALS_IOStreamDSP.cpp";
        WORD5(v72) = 1024;
        HIDWORD(v72) = 467;
        LOWORD(v73) = 2080;
        *(void *)((char *)&v73 + 2) = "inputStreams.size() == mInputChannelData.size()";
        _os_log_error_impl(&dword_1BAA78000, v63, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
      }
      abort();
    }
    if (v14 != v13)
    {
      uint64_t v23 = 0;
      if (v22 <= 1) {
        uint64_t v24 = 1;
      }
      else {
        uint64_t v24 = v22;
      }
      do
      {
        uint64_t v25 = 0;
        unint64_t v26 = 0;
        uint64_t v27 = v13 + 88 * v23;
        id v30 = *(_DWORD **)(v27 + 40);
        unsigned int v28 = (unsigned int **)(v27 + 40);
        unsigned int v29 = v30;
        *id v30 = 1;
        mach_port_t v31 = &v20[16 * v23];
        int v32 = *(_DWORD *)v31;
        int v33 = 4 * *(_DWORD *)v31 * *((_DWORD *)v31 + 1);
        uint64_t v34 = *((void *)v31 + 1);
        do
        {
          CFStringRef v35 = &v29[v25];
          v35[2] = v32;
          v35[3] = v33;
          *((void *)v35 + 2) = v34;
          ++v26;
          unsigned int v29 = *v28;
          v25 += 4;
        }
        while (v26 < **v28);
        ++v23;
      }
      while (v23 != v24);
    }
    uint64_t v36 = 0;
    unint64_t v37 = 0;
    std::string v38 = (_DWORD *)v7[13];
    _DWORD *v38 = 1;
    do
    {
      std::logic_error v39 = &v38[v36];
      v39[2] = v19;
      v39[3] = 4 * v19 * v18;
      *((void *)v39 + 2) = a5;
      ++v37;
      std::string v38 = (_DWORD *)v7[13];
      v36 += 4;
    }
    while (v37 < *v38);
    if (v20) {
      operator delete(v20);
    }
    *a6 = 0;
    uint64_t v41 = v7[9];
    uint64_t v40 = v7[10];
    unint64_t v42 = (v40 - v41) / 80;
    if (v40 != v41)
    {
      uint64_t v43 = 0;
      if (v42 <= 1) {
        uint64_t v44 = 1;
      }
      else {
        uint64_t v44 = (v40 - v41) / 80;
      }
      uint64_t v45 = 40;
      uint64_t v46 = 4;
      uint64_t v47 = v7[9];
      do
      {
        uint64_t v48 = v7[3];
        uint64_t v49 = v47 + v43;
        *(_DWORD *)uint64_t v49 = *(_DWORD *)(*a4 + v46);
        *(_DWORD *)(v49 + 4) = 0;
        long long v50 = v67;
        long long v51 = v68;
        long long v52 = v69;
        *(_OWORD *)(v49 + 56) = v70;
        *(_OWORD *)(v49 + 40) = v52;
        *(_OWORD *)(v49 + 24) = v51;
        *(_OWORD *)(v49 + 8) = v50;
        uint64_t v47 = v7[9];
        *(void *)(v47 + v43 + 72) = *(void *)(v48 + v45);
        v43 += 80;
        v45 += 88;
        v46 += 16;
        --v44;
      }
      while (v44);
    }
    int v53 = *(_DWORD *)(*a4 + 4);
    long long v72 = v67;
    long long v73 = v68;
    long long v74 = v69;
    *(_DWORD *)AudioTimeStamp buf = v53;
    *(_DWORD *)&uint8_t buf[4] = 0;
    long long v75 = v70;
    uint64_t v76 = v7[13];
    if (v40 != v41)
    {
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      if (a3) {
        int v56 = 0;
      }
      else {
        int v56 = (double *)&v67;
      }
      if (v42 <= 1) {
        uint64_t v57 = 1;
      }
      else {
        uint64_t v57 = (v40 - v41) / 80;
      }
      do
      {
        uint64_t v58 = v7[3] + v55;
        uint64_t v59 = *(atomic_uint **)(v58 + 80);
        if (v59) {
          HALB_CaptureFile::Write(v59, 0, v56, 0, *(unsigned int *)(v7[9] + v54), *(void *)(*(void *)(v58 + 40) + 16));
        }
        v55 += 88;
        v54 += 80;
        --v57;
      }
      while (v57);
    }
    DSPGraph::Graph::preflight();
    __n128 result = DSPGraph::Graph::processMultiple();
    *a6 = *(unsigned int *)(v7[13] + 12) / (4 * (unint64_t)*(unsigned int *)(v7[13] + 8));
  }
  return result;
}

void sub_1BAE600B0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,int a21,long long buf,__int16 a23,__int16 a24,int a25,uint64_t a26,int *a27,long long a28,int a29,int a30)
{
  if (a2)
  {
    mach_port_t v31 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v32 = v31;
      int v33 = v31[2];
      a21 = v33;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v34 = v32 + 18;
        if (*((char *)v32 + 95) < 0) {
          uint64_t v34 = (void *)*v34;
        }
        CFStringRef v35 = v32 + 4;
        if (*((char *)v32 + 39) < 0) {
          CFStringRef v35 = (void *)*v35;
        }
        int v36 = v32[10];
        LODWORD(buf) = 136316930;
        *(void *)((char *)&buf + 4) = "HALS_IOStreamDSP.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 555;
        a24 = 1024;
        a25 = v33;
        a26 = 0x820000000040410;
        a27 = &a21;
        LOWORD(a28) = 2080;
        *(void *)((char *)&a28 + 2) = v34;
        WORD5(a28) = 2080;
        *(void *)((char *)&a28 + 12) = v35;
        LOWORD(a30) = 1024;
        *(int *)((char *)&a30 + 2) = v36;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  DSPGraph::Exception exception caught in HALS_IOStreamDSP::Apply() : %d %4.4s %s in %s:%i", (uint8_t *)&buf, 0x42u);
      }
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = "HALS_IOStreamDSP.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 559;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Unknown exception caught in HALS_IOStreamDSP::Apply()", (uint8_t *)&buf, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAE5FEFCLL);
  }
  _Unwind_Resume(a1);
}

void HALS_IOEngine2_StreamInfo::end_cycle(HALS_IOEngine2_StreamInfo *this, const BOOL *a2)
{
  if (!*((unsigned char *)this + 20) && AMCP::Feature_Flags::use_mcp_coloring_mixer(0, a2))
  {
    uint64_t v3 = (AMCP::DAL::Synchronized_Mixer *)*((void *)this + 26);
    AMCP::DAL::Synchronized_Mixer::reuse(v3);
  }
}

void HALS_IOEngine2_StreamInfo::write_to_synchronized_mixer(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = a3;
  uint64_t v6 = *(void *)(a1 + 208);
  uint64_t v7 = *(void *)(v6 + 88);
  if (v7)
  {
    long long v12 = *(_OWORD *)(v7 + 8);
    long long v13 = *(_OWORD *)(v7 + 24);
    uint64_t v14 = *(void *)(v7 + 40);
  }
  else
  {
    uint64_t v14 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
  }
  uint64_t v8 = *(void *)(*(void *)a1 + 1080);
  long long v9 = *(std::__shared_weak_count **)(*(void *)a1 + 1088);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v10[0] = v8;
  v10[1] = (uint64_t)v9;
  write_to_dal_buffer(a5, a4, &v11, (uint64_t)&v12, v6, (uint64_t **)(a1 + 224), v10, a2);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1BAE60378(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf)
{
  if (a2)
  {
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = "HALS_IOEngine2_StreamInfo.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 375;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Mixer Write failed due to exception failure", (uint8_t *)&buf, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAE6034CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_IOA2Engine2::_WriteToStream_Write(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t result = 560947818;
  if (*(void *)a6)
  {
    uint64_t v8 = *(char **)(a3 + 168);
    if (v8)
    {
      uint64_t v11 = *(void *)a6 + *(unsigned int *)(a6 + 8);
      unint64_t v12 = *(unsigned int *)(*(void *)(a1 + 768) + 16);
      if (*(_DWORD *)(a3 + 128) == 1667326771) {
        uint64_t v13 = 4;
      }
      else {
        uint64_t v13 = *(unsigned int *)(a3 + 144);
      }
      unint64_t v14 = (unint64_t)*(double *)(a4 + 144) % v12;
      uint64_t v15 = a5;
      if (v14 + a5 <= v12) {
        unint64_t v16 = a5;
      }
      else {
        unint64_t v16 = v12 - v14;
      }
      memcpy(&v8[v14 * v13], (const void *)(*(void *)a6 + *(unsigned int *)(a6 + 8)), v16 * v13);
      if (v15 != v16) {
        memcpy(v8, (const void *)(v11 + v16 * v13), (v15 - v16) * v13);
      }
      uint64_t v17 = *(void *)(*(void *)(a1 + 1120) + 1856);
      if (v17 && (double v18 = *(double *)(a4 + 144) + (double)a5, v18 > (double)*(unint64_t *)(v17 + 32)))
      {
        uint64_t result = 0;
        *(void *)(v17 + 32) = (unint64_t)v18;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t HALS_IOA2Engine2::_EndWriting(HALS_IOA2Engine2 *this, unsigned int a2, unsigned int a3, const HALS_IOEngineInfo *a4)
{
  uint64_t v4 = *((void *)this + 140);
  uint64_t v5 = *(void *)(v4 + 1856);
  if (v5)
  {
    double v6 = *((double *)a4 + 72) + (double)a3;
    if (v6 > (double)*(unint64_t *)(v5 + 32)) {
      *(void *)(v5 + 32) = (unint64_t)v6;
    }
  }
  if (*((unsigned char *)this + 1129)) {
    HALS_IOA2UCDevice::DoIO((HALS_IOA2UCDevice *)(v4 + 1808));
  }
  return 0;
}

void HALS_IOA2Engine2::_ReadFromStream_Read(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t *a6)
{
  uint64_t v6 = *a6;
  if (*a6)
  {
    unsigned int v10 = (char *)(v6 + *((unsigned int *)a6 + 2));
    double v11 = *(double *)(a4 + 80);
    if (v11 >= 0.0)
    {
      unint64_t v12 = *(char **)(a3 + 168);
      unint64_t v13 = *(unsigned int *)(*(void *)(a1 + 768) + 16);
      if (*(_DWORD *)(a3 + 128) == 1667326771) {
        uint64_t v14 = 4;
      }
      else {
        uint64_t v14 = *(unsigned int *)(a3 + 144);
      }
      unint64_t v15 = (unint64_t)v11 % v13;
      if (v15 + a5 <= v13) {
        unint64_t v16 = a5;
      }
      else {
        unint64_t v16 = v13 - v15;
      }
      memcpy(v10, &v12[v15 * v14], v16 * v14);
      if (a5 != v16) {
        memcpy(&v10[v16 * v14], v12, (a5 - v16) * v14);
      }
    }
    else
    {
      bzero((void *)(v6 + *((unsigned int *)a6 + 2)), a5);
    }
    uint64_t v17 = *(void *)(*(void *)(a1 + 1120) + 1856);
    if (v17)
    {
      double v18 = *(double *)(a4 + 80) + (double)a5;
      if (v18 > (double)*(unint64_t *)(v17 + 24)) {
        *(void *)(v17 + 24) = (unint64_t)v18;
      }
    }
  }
}

uint64_t HALS_IOA2Engine2::_BeginReading(HALS_IOA2Engine2 *this, unsigned int a2, unsigned int a3, const HALS_IOEngineInfo *a4)
{
  if (*((unsigned char *)this + 1128)) {
    HALS_IOA2UCDevice::DoIO((HALS_IOA2UCDevice *)(*((void *)this + 140) + 1808));
  }
  return 0;
}

uint64_t HALS_IOA2Engine2::_FirstIOThreadStarted(HALS_IOA2Engine2 *this, unsigned int a2, const HALS_IOEngineInfo *a3)
{
  uint64_t v4 = (const __CFDictionary **)(*((void *)this + 140) + 1808);
  BOOL v8 = 0;
  HALB_UCObject::CopyProperty_BOOL(v4, @"wants input trap", &v8);
  *((unsigned char *)this + 1128) = v8;
  uint64_t v5 = (const __CFDictionary **)(*((void *)this + 140) + 1808);
  BOOL v9 = 0;
  HALB_UCObject::CopyProperty_BOOL(v5, @"wants output trap", &v9);
  *((unsigned char *)this + 1129) = v9;
  uint64_t v6 = *(void *)(*((void *)this + 140) + 1856);
  if (v6)
  {
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 32) = 0;
  }
  return 0;
}

void HALS_IOA2Engine2::_TellHardwareToStop(uint64_t a1, uint64_t a2, int a3)
{
  kern_return_t v13;
  mach_port_t v14;
  unsigned char buf[24];
  void *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  int v19 = *MEMORY[0x1E4F143B8];
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a1 + 1120) + 1808) + 48))(*(void *)(a1 + 1120) + 1808);
  if (a3 == 1)
  {
    if (v6)
    {
      uint64_t v7 = (HALS_IOA2UCDevice *)(*(void *)(a1 + 1120) + 1808);
      uint64_t v8 = 1;
LABEL_6:
      HALS_IOA2UCDevice::StopIOWithFlags(v7, v8);
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 1120);
    if (v6)
    {
      uint64_t v7 = (HALS_IOA2UCDevice *)(v9 + 1808);
      uint64_t v8 = 0;
      goto LABEL_6;
    }
    unint64_t v13 = 1937010544;
    uint64_t v14 = *(_DWORD *)(v9 + 1820);
    if ((!v14
       || !*(unsigned char *)(v9 + 1842)
       || (unint64_t v13 = IOConnectCallMethod(v14, 1u, 0, 0, 0, 0, 0, 0, 0, 0)) != 0)
      && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALS_IOA2UCDevice.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1280;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v13;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::StopIO: got an error when telling the hardware to stop, Error: 0x%X", buf, 0x18u);
    }
  }
  unsigned int v10 = atomic_load((unsigned int *)(a1 + 1072));
  if (a3 != 2 && v10 == 2)
  {
    if (*(void *)(a1 + 768))
    {
      int v11 = *(_DWORD *)(a2 + 16);
      *(void *)AudioTimeStamp buf = MEMORY[0x1E4F143A8];
      *(void *)&uint8_t buf[8] = 0x40000000;
      *(void *)&buf[16] = ___ZN14HALS_IOEngine239ClearOutputStreamsUsedOnlyByThisContextEj_block_invoke;
      unint64_t v16 = &__block_descriptor_tmp_20_12183;
      uint64_t v17 = a1;
      double v18 = v11;
      unint64_t v12 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
      HALB_CommandGate::ExecuteCommand(v12, (uint64_t)buf);
    }
  }
}

uint64_t HALS_IOA2Engine2::_TellHardwareToStart(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned int (**)(uint64_t))(*(void *)(*(void *)(a1 + 1120) + 1808) + 48))(*(void *)(a1 + 1120) + 1808))
  {
    uint64_t v7 = (HALS_IOA2UCDevice *)(*(void *)(a1 + 1120) + 1808);
    return HALS_IOA2UCDevice::StartIOWithFlags(v7, a3 == 1);
  }
  else
  {
    if (!a4) {
      return 0;
    }
    uint64_t v8 = 1937010544;
    uint64_t v9 = *(void *)(a1 + 1120);
    mach_port_t v10 = *(_DWORD *)(v9 + 1820);
    if (!v10
      || !*(unsigned char *)(v9 + 1842)
      || (uint64_t v8 = IOConnectCallMethod(v10, 0, 0, 0, 0, 0, 0, 0, 0, 0), v8))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        unint64_t v13 = "HALS_IOA2UCDevice.cpp";
        __int16 v14 = 1024;
        int v15 = 1260;
        __int16 v16 = 1024;
        int v17 = v8;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::StartIO: got an error when telling the hardware to start, Error: 0x%X", buf, 0x18u);
      }
    }
    return v8;
  }
}

void HALS_IOA2Engine2::TimelineWasReset(HALS_IOA2Engine2 *this, int a2, int a3)
{
  HALS_IOEngine2::TimelineWasReset(this, a2, a3);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  void v5[2] = ___ZN16HALS_IOA2Engine216TimelineWasResetEjj_block_invoke;
  void v5[3] = &__block_descriptor_tmp_12816;
  v5[4] = this;
  uint64_t v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Engine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v5);
}

uint64_t ___ZN16HALS_IOA2Engine216TimelineWasResetEjj_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)(result + 32) + 1120) + 1856);
  if (v1)
  {
    *(void *)(v1 + 24) = 0;
    *(void *)(v1 + 32) = 0;
  }
  return result;
}

uint64_t HALS_IOA2Engine2::GetZeroTimeStamp(HALS_IOA2Engine2 *this, unsigned int a2, double *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v5 = *(unint64_t **)(*((void *)this + 140) + 1856);
  if (!v5) {
    return 1937010544;
  }
  unint64_t v6 = v5[2];
  unint64_t v7 = v5[1];
  uint64_t result = 0;
  *a3 = (double)*v5;
  *a4 = v7;
  *a5 = v6;
  return result;
}

void HALS_IOA2Engine2::~HALS_IOA2Engine2(HALS_IOA2Engine2 *this)
{
  HALS_IOEngine2::~HALS_IOEngine2(this);

  JUMPOUT(0x1C1859840);
}

void non-virtual thunk to'AMCP::Meta::Driver::~Driver(AMCP::Meta::Driver *this)
{
  AMCP::Meta::Driver::~Driver((AMCP::Meta::Driver *)((char *)this - 24));

  JUMPOUT(0x1C1859840);
}

{
  AMCP::Meta::Driver::~Driver((AMCP::Meta::Driver *)((char *)this - 24));
}

void AMCP::Meta::Driver::~Driver(AMCP::Meta::Driver *this)
{
  *(void *)this = &unk_1F147D180;
  *((void *)this + 3) = &unk_1F147D1A8;
  uint64_t v2 = (void **)((char *)this + 56);
  if (*((void *)this + 7))
  {
    std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100]((uint64_t *)this + 7);
    operator delete(*v2);
  }
  *((void *)this + 3) = &unk_1F146D188;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

{
  uint64_t vars8;

  AMCP::Meta::Driver::~Driver(this);

  JUMPOUT(0x1C1859840);
}

std::__shared_mutex_base *AMCP::Meta::Driver::shutdown(AMCP::Meta::Driver *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v16, "com.apple.coreaudio", "AMCP");
  int v3 = *(_DWORD *)(v16 + 16);
  switch(v3)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v9 = **(NSObject ***)buf;
      if (*(void *)v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v19);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        mach_port_t v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        *(_DWORD *)AudioTimeStamp buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v11;
        *(_WORD *)int v19 = 2080;
        *(void *)&void v19[2] = "Meta_Driver_Core.cpp";
        __int16 v20 = 1024;
        int v21 = 33;
        unint64_t v7 = v9;
        os_log_type_t v8 = OS_LOG_TYPE_INFO;
        goto LABEL_12;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unint64_t v12 = **(NSObject ***)buf;
      if (*(void *)v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v19);
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        __int16 v14 = pthread_self();
        mach_port_t v15 = pthread_mach_thread_np(v14);
        *(_DWORD *)AudioTimeStamp buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v15;
        *(_WORD *)int v19 = 2080;
        *(void *)&void v19[2] = "Meta_Driver_Core.cpp";
        __int16 v20 = 1024;
        int v21 = 33;
        _os_log_debug_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Tearing down Meta Driver", buf, 0x18u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v4 = **(NSObject ***)buf;
      if (*(void *)v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v19);
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = pthread_self();
        mach_port_t v6 = pthread_mach_thread_np(v5);
        *(_DWORD *)AudioTimeStamp buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v6;
        *(_WORD *)int v19 = 2080;
        *(void *)&void v19[2] = "Meta_Driver_Core.cpp";
        __int16 v20 = 1024;
        int v21 = 33;
        unint64_t v7 = v4;
        os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
LABEL_12:
        _os_log_impl(&dword_1BAA78000, v7, v8, "%6u %32s:%-5d Tearing down Meta Driver", buf, 0x18u);
      }
      break;
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100]((uint64_t *)this + 7);
  return AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*((void *)this + 4) + 16), *((_DWORD *)this + 12));
}

void sub_1BAE6103C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::dynamic_pointer_cast[abi:ne180100]<AMCP::Meta::Driver,AMCP::Core::Driver>(void **a1, void **a2)
{
  uint64_t result = *a2;
  if (*a2 {
    && (uint64_t v4 = a2,
  }
  {
    uint64_t v5 = v4[1];
    *a1 = result;
    a1[1] = v5;
  }
  else
  {
    uint64_t v4 = a1;
  }
  *uint64_t v4 = 0;
  v4[1] = 0;
  return result;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<unsigned int ()(Aggregate_Device_Description const&,int)>>()
{
  uint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[139];
}

uint64_t std::__function::__value_func<unsigned int ()(Aggregate_Device_Description const&,int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    int v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<unsigned int ()(Aggregate_Device_Description const&,int)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int)>>()
{
  uint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      uint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[141];
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(unsigned int)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_4;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()>>::dispatch;
LABEL_4:
      std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v9 = AMCP::Implementation::get_type_marker<std::function<void ()>>();
      uint64_t result = 0;
      *a4 = v9;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      mach_port_t v11 = 0;
      memset(v10, 0, sizeof(v10));
      AMCP::swap((AMCP::Thing *)v10, a3, a3);
      if (v11) {
        v11(0, v10, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1,std::allocator<AMCP::Meta::Driver::build_core(void)::$_1>,void ()(unsigned int)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1,std::allocator<AMCP::Meta::Driver::build_core(void)::$_1>,void ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Driver10build_coreEvE3$_1")) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1,std::allocator<AMCP::Meta::Driver::build_core(void)::$_1>,void ()(unsigned int)>::operator()(uint64_t a1, int *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v14 = *a2;
  int v3 = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  v3[1] = 0;
  void v3[2] = 0;
  void *v3 = &unk_1F1488C30;
  v11[1] = (uint64_t)v3;
  *((unsigned char *)v3 + 24) = 0;
  v11[0] = (uint64_t)(v3 + 3);
  int v12 = 0;
  int v13 = 0;
  uint64_t v5 = *(void *)(*(void *)(v4 + 32) + 32);
  unsigned int v6 = *(_DWORD *)(v4 + 48);
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)v9, v11);
  *(void *)&long long v10 = a1 + 8;
  *((void *)&v10 + 1) = &v14;
  uint64_t v16 = 0;
  unint64_t v7 = (char *)operator new(0x38uLL);
  *(void *)unint64_t v7 = &unk_1F147D380;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v7 + 8), v9);
  *(_OWORD *)(v7 + 40) = v10;
  uint64_t v16 = v7;
  AMCP::Core::Conductor::enqueue_config_change(v5, v6, v6, 16, (uint64_t)v15);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v15);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v9);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v11);
}

void sub_1BAE615B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(v15 - 72));
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN4AMCP4Meta6Driver10build_coreEvENK3$_1clEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  BOOL is_valid = AMCP::Utility::Expiration_Check::is_valid((AMCP::Utility::Expiration_Check *)(a1 + 8));
  if (!is_valid)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v43 = **(NSObject ***)buf;
    if (*(void *)v49) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v49);
    }
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      uint64_t v44 = pthread_self();
      mach_port_t v45 = pthread_mach_thread_np(v44);
      *(_DWORD *)AudioTimeStamp buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v45;
      *(_WORD *)uint64_t v49 = 2080;
      *(void *)&unsigned int v49[2] = "Meta_Driver_Core.cpp";
      __int16 v50 = 1024;
      int v51 = 107;
      __int16 v52 = 2080;
      int v53 = "expiration_check.is_valid()";
      _os_log_error_impl(&dword_1BAA78000, v43, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", buf, 0x22u);
    }
    abort();
  }
  uint64_t v3 = **(void **)(a1 + 40);
  uint64_t v5 = *(long long **)(v3 + 56);
  uint64_t v4 = *(uint64_t **)(v3 + 64);
  if (v5 != (long long *)v4)
  {
    while (*(_DWORD *)(*(void *)v5 + 40) != **(_DWORD **)(a1 + 48))
    {
      if (++v5 == (long long *)v4) {
        return;
      }
    }
    if (v5 != (long long *)v4)
    {
      uint64_t v6 = *(void *)(*(void *)(*(void *)v5 + 8) + 32);
      unint64_t v7 = *(void *)(*(void *)v5 + 168);
      *(void *)AudioTimeStamp buf = v6 + 1352;
      v49[0] = 1;
      std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v6 + 1352));
      if (*(unsigned char *)(v6 + 1520))
      {
        os_log_type_t v8 = *(void **)(v6 + 1528);
        uint64_t v9 = *(void **)(v6 + 1536);
        while (v8 != v9)
        {
          long long v10 = (void *)v8[2];
          if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::find((void *)v8[1], v10, v7))
          {
            int v12 = v11;
            if (v11 + 5 != v10)
            {
              do
              {
                int v13 = v12 + 5;
                std::__memberwise_forward_assign[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,0ul,1ul>(v12, v12 + 5);
                int v14 = v12 + 10;
                v12 += 5;
              }
              while (v14 != v10);
              long long v10 = (void *)v8[2];
              int v12 = v13;
            }
            for (; v10 != v12; v10 -= 5)
              std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::~__value_func[abi:ne180100](v10 - 4);
            void v8[2] = v12;
            if ((void *)v8[1] == v12)
            {
              uint64_t v15 = v8 + 5;
              uint64_t v16 = *(void **)(v6 + 1536);
              if (v8 + 5 != v16)
              {
                do
                {
                  os_log_type_t v8 = v15;
                  *((_DWORD *)v15 - 10) = *(_DWORD *)v15;
                  long long v17 = *((_OWORD *)v15 - 2);
                  *((_OWORD *)v15 - 2) = *(_OWORD *)(v15 + 1);
                  *(_OWORD *)(v15 + 1) = v17;
                  uint64_t v18 = *(v15 - 2);
                  *(v8 - 2) = v8[3];
                  void v8[3] = v18;
                  uint64_t v15 = v8 + 5;
                }
                while (v8 + 5 != v16);
                uint64_t v15 = *(void **)(v6 + 1536);
              }
              if (v15 != v8)
              {
                do
                {
                  int v19 = v15 - 5;
                  uint64_t v46 = (void **)(v15 - 4);
                  std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&v46);
                  uint64_t v15 = v19;
                }
                while (v19 != v8);
              }
              *(void *)(v6 + 1536) = v8;
            }
            break;
          }
          v8 += 5;
        }
      }
      __int16 v20 = (AMCP::Log::Scope_Registry *)std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)buf);
      uint64_t v21 = *(void *)v5;
      AMCP::Log::Scope_Registry::get(v20);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v46, "com.apple.coreaudio", "AMCP");
      int v23 = *((_DWORD *)v46 + 4);
      switch(v23)
      {
        case 3:
          AMCP::Log::Scope_Registry::get(v22);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          uint64_t v34 = **(NSObject ***)buf;
          if (*(void *)v49) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v49);
          }
          if (!os_log_type_enabled(v34, OS_LOG_TYPE_INFO)) {
            goto LABEL_40;
          }
          CFStringRef v35 = pthread_self();
          mach_port_t v36 = pthread_mach_thread_np(v35);
          int v37 = *(_DWORD *)(v21 + 40);
          *(_DWORD *)AudioTimeStamp buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v36;
          *(_WORD *)uint64_t v49 = 2080;
          *(void *)&unsigned int v49[2] = "Meta_Device_Core.cpp";
          __int16 v50 = 1024;
          int v51 = 56;
          __int16 v52 = 1024;
          LODWORD(v53) = v37;
          unsigned int v28 = v34;
          os_log_type_t v29 = OS_LOG_TYPE_INFO;
          break;
        case 2:
          AMCP::Log::Scope_Registry::get(v22);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          id v30 = **(NSObject ***)buf;
          if (*(void *)v49) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v49);
          }
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
            mach_port_t v31 = pthread_self();
            mach_port_t v32 = pthread_mach_thread_np(v31);
            int v33 = *(_DWORD *)(v21 + 40);
            *(_DWORD *)AudioTimeStamp buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v32;
            *(_WORD *)uint64_t v49 = 2080;
            *(void *)&unsigned int v49[2] = "Meta_Device_Core.cpp";
            __int16 v50 = 1024;
            int v51 = 56;
            __int16 v52 = 1024;
            LODWORD(v53) = v33;
            _os_log_debug_impl(&dword_1BAA78000, v30, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Tearing down Device with object id %u", buf, 0x1Eu);
          }
          goto LABEL_40;
        case 1:
          AMCP::Log::Scope_Registry::get(v22);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          uint64_t v24 = **(NSObject ***)buf;
          if (*(void *)v49) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v49);
          }
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_40:
            if (v47) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v47);
            }
            AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*(void *)(v21 + 8) + 16), *(_DWORD *)(v21 + 40));
            std::string v38 = v5 + 1;
            std::logic_error v39 = *(uint64_t **)(v3 + 64);
            if (v5 + 1 != (long long *)v39)
            {
              do
              {
                uint64_t v5 = v38;
                long long v40 = *v38;
                *(void *)std::string v38 = 0;
                *((void *)v38 + 1) = 0;
                uint64_t v41 = (std::__shared_weak_count *)*((void *)v38 - 1);
                *(v38 - 1) = v40;
                if (v41) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v41);
                }
                ++v38;
              }
              while (v5 + 1 != (long long *)v39);
              std::string v38 = *(long long **)(v3 + 64);
            }
            while (v38 != v5)
            {
              unint64_t v42 = (std::__shared_weak_count *)*((void *)v38 - 1);
              if (v42) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v42);
              }
              --v38;
            }
            *(void *)(v3 + 64) = v5;
            return;
          }
          uint64_t v25 = pthread_self();
          mach_port_t v26 = pthread_mach_thread_np(v25);
          int v27 = *(_DWORD *)(v21 + 40);
          *(_DWORD *)AudioTimeStamp buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v26;
          *(_WORD *)uint64_t v49 = 2080;
          *(void *)&unsigned int v49[2] = "Meta_Device_Core.cpp";
          __int16 v50 = 1024;
          int v51 = 56;
          __int16 v52 = 1024;
          LODWORD(v53) = v27;
          unsigned int v28 = v24;
          os_log_type_t v29 = OS_LOG_TYPE_DEFAULT;
          break;
        default:
          goto LABEL_40;
      }
      _os_log_impl(&dword_1BAA78000, v28, v29, "%6u %32s:%-5d Tearing down Device with object id %u", buf, 0x1Eu);
      goto LABEL_40;
    }
  }
}

void sub_1BAE61BA8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 8);
}

__n128 std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F147D380;
  AMCP::Utility::Expiration_Check::Expiration_Check(a2 + 8, (uint64_t *)(a1 + 8));
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

char *std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  int v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v3 = &unk_1F147D380;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v3 + 8), v2);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  return v3;
}

void sub_1BAE61CBC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F147D380;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_1::operator() const(unsigned int)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F147D380;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1,std::allocator<AMCP::Meta::Driver::build_core(void)::$_1>,void ()(unsigned int)>::destroy_deallocate(void *__p)
{
  int v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1,std::allocator<AMCP::Meta::Driver::build_core(void)::$_1>,void ()(unsigned int)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1,std::allocator<AMCP::Meta::Driver::build_core(void)::$_1>,void ()(unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F147D310;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1,std::allocator<AMCP::Meta::Driver::build_core(void)::$_1>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F147D310;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1,std::allocator<AMCP::Meta::Driver::build_core(void)::$_1>,void ()(unsigned int)>::~__func(void *a1)
{
  *a1 = &unk_1F147D310;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_1,std::allocator<AMCP::Meta::Driver::build_core(void)::$_1>,void ()(unsigned int)>::~__func(void *a1)
{
  *a1 = &unk_1F147D310;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(Aggregate_Device_Description const&,int)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(Aggregate_Device_Description const&,int)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<unsigned int ()(Aggregate_Device_Description const&,int)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(Aggregate_Device_Description const&,int)>>::dispatch;
LABEL_6:
      std::__function::__value_func<unsigned int ()(Aggregate_Device_Description const&,int)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(Aggregate_Device_Description const&,int)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<unsigned int ()(Aggregate_Device_Description const&,int)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0,std::allocator<AMCP::Meta::Driver::build_core(void)::$_0>,unsigned int ()(Aggregate_Device_Description const&,int)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0,std::allocator<AMCP::Meta::Driver::build_core(void)::$_0>,unsigned int ()(Aggregate_Device_Description const&,int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Driver10build_coreEvE3$_0")) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0,std::allocator<AMCP::Meta::Driver::build_core(void)::$_0>,unsigned int ()(Aggregate_Device_Description const&,int)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v20 = *a3;
  unsigned int v19 = 0;
  uint64_t v5 = operator new(0x20uLL);
  uint64_t v6 = *(void *)(a1 + 8);
  v5[1] = 0;
  void v5[2] = 0;
  void *v5 = &unk_1F1488C30;
  v16[1] = (uint64_t)v5;
  *((unsigned char *)v5 + 24) = 0;
  v16[0] = (uint64_t)(v5 + 3);
  int v17 = 0;
  int v18 = 0;
  uint64_t v7 = *(void *)(*(void *)(v6 + 32) + 32);
  unsigned int v8 = *(_DWORD *)(v6 + 48);
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)v13, v16);
  *(void *)&long long v14 = a1 + 8;
  *((void *)&v14 + 1) = a2;
  *(void *)&long long v15 = &v20;
  *((void *)&v15 + 1) = &v19;
  uint64_t v22 = 0;
  uint64_t v9 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v9 = &unk_1F147D280;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v9 + 8), v13);
  long long v10 = v15;
  *(_OWORD *)(v9 + 40) = v14;
  *(_OWORD *)(v9 + 56) = v10;
  uint64_t v22 = v9;
  AMCP::Core::Conductor::enqueue_config_change(v7, v8, v8, 16, (uint64_t)v21);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v21);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v13);
  uint64_t v11 = v19;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v16);
  return v11;
}

void sub_1BAE62274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(v17 - 88));
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a9);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN4AMCP4Meta6Driver10build_coreEvENK3$_0clERK28Aggregate_Device_DescriptioniEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v155 = *MEMORY[0x1E4F143B8];
  BOOL is_valid = AMCP::Utility::Expiration_Check::is_valid((AMCP::Utility::Expiration_Check *)(a1 + 8));
  if (!is_valid)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v127 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
    {
      uint64_t v128 = pthread_self();
      mach_port_t v129 = pthread_mach_thread_np(v128);
      *(_DWORD *)AudioTimeStamp buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v129;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Meta_Driver_Core.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 91;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "expiration_check.is_valid()";
      _os_log_error_impl(&dword_1BAA78000, v127, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", buf, 0x22u);
    }
    abort();
  }
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = **(void **)(a1 + 40);
  int v135 = **(_DWORD **)(a1 + 56);
  long long v5 = *(_OWORD *)(v4 + 32);
  long long v136 = v5;
  uint64_t v6 = *(std::__shared_weak_count **)(v4 + 40);
  if (*((void *)&v5 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (char *)operator new(0x170uLL);
  unsigned int v8 = v7;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)uint64_t v7 = &unk_1F147D410;
  uint64_t v9 = (AMCP::Meta::Device *)(v7 + 24);
  int v10 = *(_DWORD *)(v4 + 48);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(v7 + 136) = 0u;
  *((_OWORD *)v7 + 2) = v136;
  *((void *)v7 + 6) = 0;
  *((void *)v7 + 7) = 0;
  *((void *)v7 + 3) = &unk_1F1460598;
  *((_DWORD *)v7 + 16) = 0;
  *((_DWORD *)v7 + 17) = v10;
  *(_OWORD *)(v7 + 72) = 0u;
  *((void *)v7 + 24) = 0;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_OWORD *)(v7 + 120) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)(v7 + 200));
  uint64_t v11 = operator new(0x60uLL);
  v11[1] = 0;
  _OWORD v11[2] = 0;
  *uint64_t v11 = &unk_1F1460600;
  CFTypeRef v12 = *(CFTypeRef *)v3;
  if (*(void *)v3) {
    CFRetain(*(CFTypeRef *)v3);
  }
  uint64_t v137 = a1;
  void v11[3] = v12;
  uint64_t v13 = *(void *)(v3 + 8);
  if (v13) {
    CFRetain(*(CFTypeRef *)(v3 + 8));
  }
  void v11[5] = 0;
  uint8_t v11[4] = v13;
  void v11[6] = 0;
  void v11[7] = 0;
  std::vector<Audio_Sub_Device_Description>::__init_with_size[abi:ne180100]<Audio_Sub_Device_Description*,Audio_Sub_Device_Description*>(v11 + 5, *(void *)(v3 + 16), *(void *)(v3 + 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v3 + 24) - *(void *)(v3 + 16)) >> 3));
  uint64_t v14 = *(void *)(v3 + 40);
  if (v14) {
    CFRetain(*(CFTypeRef *)(v3 + 40));
  }
  v11[8] = v14;
  uint64_t v15 = *(void *)(v3 + 48);
  if (v15) {
    CFRetain(*(CFTypeRef *)(v3 + 48));
  }
  v11[9] = v15;
  uint64_t v16 = *(void *)(v3 + 56);
  if (v16) {
    CFRetain(*(CFTypeRef *)(v3 + 56));
  }
  unsigned char v11[10] = v16;
  uint64_t v17 = *(void *)(v3 + 64);
  if (v17) {
    CFRetain(*(CFTypeRef *)(v3 + 64));
  }
  v11[11] = v17;
  *(void *)&long long v18 = v11 + 3;
  *((void *)&v18 + 1) = v11;
  unsigned int v19 = (std::__shared_weak_count *)*((void *)v8 + 14);
  *(_OWORD *)(v8 + 104) = v18;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  AMCP::Meta::Device::update_cached_properties_from_composition(v9);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  int v20 = (std::__shared_weak_count *)*((void *)v8 + 7);
  if (v20)
  {
    if (v20->__shared_owners_ != -1) {
      goto LABEL_27;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 2, 1uLL, memory_order_relaxed);
    *((void *)v8 + 6) = v9;
    *((void *)v8 + 7) = v8;
    std::__shared_weak_count::__release_weak(v20);
  }
  else
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 2, 1uLL, memory_order_relaxed);
    *((void *)v8 + 6) = v9;
    *((void *)v8 + 7) = v8;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
LABEL_27:
  uint64_t v21 = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(*((void *)v8 + 4)
                                                                                                 + 16));
  *((_DWORD *)v8 + 16) = v21;
  AMCP::Log::Scope_Registry::get(v21);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v142, "com.apple.coreaudio", "AMCP");
  int v23 = *(_DWORD *)(v142 + 16);
  switch(v23)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v22);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      CFStringRef v35 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        mach_port_t v36 = pthread_self();
        mach_port_t v37 = pthread_mach_thread_np(v36);
        Aggregate_Device_Description::get_uid(&v152, **((const void ***)v8 + 13));
        CFStringRef v27 = v152;
        if (!v152)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v152);
        if ((SBYTE7(v149) & 0x80u) == 0) {
          std::string v38 = __p;
        }
        else {
          std::string v38 = (void **)__p[0];
        }
        int v39 = *((_DWORD *)v8 + 16);
        *(_DWORD *)AudioTimeStamp buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v37;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Meta_Device_Core.cpp";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = 81;
        *(_WORD *)&unsigned char buf[24] = 2080;
        *(void *)&buf[26] = v38;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = v39;
        _os_log_impl(&dword_1BAA78000, v35, OS_LOG_TYPE_INFO, "%6u %32s:%-5d Creating device '%s' with object id %u", buf, 0x28u);
        if (SBYTE7(v149) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_59;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v22);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      id v30 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        mach_port_t v31 = pthread_self();
        mach_port_t v32 = pthread_mach_thread_np(v31);
        Aggregate_Device_Description::get_uid(&v152, **((const void ***)v8 + 13));
        CFStringRef v27 = v152;
        if (!v152)
        {
          uint64_t v132 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v132, "Could not construct");
          __cxa_throw(v132, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v152);
        if ((SBYTE7(v149) & 0x80u) == 0) {
          int v33 = __p;
        }
        else {
          int v33 = (void **)__p[0];
        }
        int v34 = *((_DWORD *)v8 + 16);
        *(_DWORD *)AudioTimeStamp buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v32;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Meta_Device_Core.cpp";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = 81;
        *(_WORD *)&unsigned char buf[24] = 2080;
        *(void *)&buf[26] = v33;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = v34;
        _os_log_debug_impl(&dword_1BAA78000, v30, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Creating device '%s' with object id %u", buf, 0x28u);
        if (SBYTE7(v149) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_59;
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v22);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v24 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = pthread_self();
        mach_port_t v26 = pthread_mach_thread_np(v25);
        Aggregate_Device_Description::get_uid(&v152, **((const void ***)v8 + 13));
        CFStringRef v27 = v152;
        if (!v152)
        {
          uint64_t v133 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v133, "Could not construct");
          __cxa_throw(v133, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v152);
        if ((SBYTE7(v149) & 0x80u) == 0) {
          unsigned int v28 = __p;
        }
        else {
          unsigned int v28 = (void **)__p[0];
        }
        int v29 = *((_DWORD *)v8 + 16);
        *(_DWORD *)AudioTimeStamp buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v26;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Meta_Device_Core.cpp";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = 81;
        *(_WORD *)&unsigned char buf[24] = 2080;
        *(void *)&buf[26] = v28;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = v29;
        _os_log_impl(&dword_1BAA78000, v24, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d Creating device '%s' with object id %u", buf, 0x28u);
        if (SBYTE7(v149) < 0) {
          operator delete(__p[0]);
        }
LABEL_59:
        CFRelease(v27);
      }
      break;
  }
  if ((void)v143) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v143);
  }
  memset(buf, 0, 32);
  *(_DWORD *)&uint8_t buf[32] = 1065353216;
  LODWORD(v142) = *((_DWORD *)v8 + 16);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v142, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)__p[0] + 10, __p);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  LODWORD(v142) = 1633773415;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v142, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)__p[0] + 10, __p);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  LODWORD(v142) = 1633773415;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v142, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)__p[0] + 10, __p);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  LODWORD(v142) = *((_DWORD *)v8 + 17);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v142, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)__p[0] + 10, __p);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  CFStringRef v40 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Meta-Driver", 27, 0x8000100u, 0);
  if (!v40)
  {
    uint64_t v130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v130, "Could not construct");
    __cxa_throw(v130, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v142 = 0x676C6F626F706C67;
  LODWORD(v143) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)__p, (uint64_t)&v142, v40);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)__p[0] + 10, __p);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  CFRelease(v40);
  CFStringRef v41 = CFStringCreateWithBytes(0, (const UInt8 *)"Apple Inc.", 10, 0x8000100u, 0);
  if (!v41)
  {
    int v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v131, "Could not construct");
    __cxa_throw(v131, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v142 = 0x676C6F626C6D616BLL;
  LODWORD(v143) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)__p, (uint64_t)&v142, v41);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)__p[0] + 10, __p);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  CFRelease(v41);
  LOBYTE(v142) = 0;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (char *)&v142, 1.58366008e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)__p[0] + 10, __p);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  LODWORD(v142) = 1735554416;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v142, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)__p[0] + 10, __p);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  LODWORD(v142) = v135;
  AMCP::Core::Operation_Utilities::make_typed_property<int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v142, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)__p[0] + 10, __p);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  int v42 = *((_DWORD *)v8 + 16);
  __p[0] = *(void **)(*((void *)v8 + 4) + 16);
  LODWORD(__p[1]) = v42;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>(&v142, 0, (long long *)__p, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)(v142 + 40), &v142);
  if ((void)v143) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v143);
  }
  AMCP::Meta::Device::update_core_common((uint64_t)v9, (uint64_t)buf);
  AMCP::Core::Broker::make_core((AMCP::Core::Core **)__p, *(std::__shared_mutex_base **)(*((void *)v8 + 4) + 16), (uint64_t)buf, *((_DWORD *)v8 + 16));
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(*(void **)&buf[16]);
  uint64_t v43 = *(void **)buf;
  *(void *)AudioTimeStamp buf = 0;
  if (v43) {
    operator delete(v43);
  }
  AMCP::Meta::Device::update_subdevices(v9);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v138, *((void *)v8 + 6), *((std::__shared_weak_count **)v8 + 7));
  uint64_t v44 = *(void *)(*((void *)v8 + 4) + 32);
  uint64_t v46 = v138;
  mach_port_t v45 = v139;
  if (v139) {
    atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v151[0] = &unk_1F14615D0;
  v151[1] = v46;
  v151[2] = v45;
  v151[3] = v151;
  uint64_t v146 = v44 + 1352;
  char v147 = 1;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v44 + 1352));
  if (!*(unsigned char *)(v44 + 1520))
  {
    CFStringRef add = 0;
    goto LABEL_144;
  }
  CFStringRef add = (const __CFString *)atomic_fetch_add(&AMCP::Observer::Implementation::get_next_token(void)::s_next_token, 1uLL);
  if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(*(_DWORD **)(v44 + 1528), *(_DWORD **)(v44 + 1536), *(_DWORD *)(v44 + 1560)))
  {
    uint64_t v49 = v48;
    *(void *)AudioTimeStamp buf = add;
    __int16 v50 = &buf[8];
    std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)v151);
    int v51 = *(void **)(v49 + 8);
    __int16 v52 = *(void **)(v49 + 16);
    int v53 = (void *)(v49 + 8);
    uint64_t v54 = *(void *)buf;
    if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::find(v51, v52, *(unint64_t *)buf))
    {
      *(void *)uint64_t v55 = v54;
      std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::operator=((void *)(v55 + 8), (uint64_t)&buf[8]);
    }
    else
    {
      std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>::insert(v53, (char *)v55, buf);
    }
    goto LABEL_143;
  }
  CFStringRef v152 = add;
  __int16 v50 = v153;
  std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::__value_func[abi:ne180100]((uint64_t)v153, (uint64_t)v151);
  long long v140 = 0uLL;
  char v141 = 0;
  *(void *)AudioTimeStamp buf = &v140;
  uint8_t buf[8] = 0;
  int v56 = operator new(0x28uLL);
  *(void *)&long long v140 = v56;
  *((void *)&v140 + 1) = v56;
  uint64_t v57 = v56 + 5;
  char v141 = v56 + 5;
  *int v56 = v152;
  std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::__value_func[abi:ne180100]((uint64_t)(v56 + 1), (uint64_t)v153);
  uint64_t v58 = v141;
  *((void *)&v140 + 1) = v57;
  char v141 = 0;
  LODWORD(v142) = *(_DWORD *)(v44 + 1560);
  int v59 = v142;
  long long v143 = v140;
  long long v140 = 0uLL;
  unsigned int v144 = v58;
  int v60 = *(_DWORD **)(v44 + 1528);
  unint64_t v61 = *(void *)(v44 + 1536);
  BOOL v62 = AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(v60, (_DWORD *)v61, v142);
  unint64_t v64 = (unint64_t)v63;
  if (v62)
  {
    _DWORD *v63 = v59;
    mach_port_t v65 = &v143;
  }
  else
  {
    unint64_t v66 = *(void *)(v44 + 1544);
    if (v61 >= v66)
    {
      unint64_t v72 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v61 - (void)v60) >> 3) + 1;
      if (v72 > 0x666666666666666) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v73 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v66 - (void)v60) >> 3);
      if (2 * v73 > v72) {
        unint64_t v72 = 2 * v73;
      }
      if (v73 >= 0x333333333333333) {
        unint64_t v74 = 0x666666666666666;
      }
      else {
        unint64_t v74 = v72;
      }
      uint64_t v150 = v44 + 1544;
      if (v74) {
        unint64_t v74 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v74);
      }
      else {
        uint64_t v75 = 0;
      }
      int64_t v85 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v64 - (void)v60) >> 3);
      UInt64 v86 = (_DWORD *)(v74 + 8 * ((uint64_t)(v64 - (void)v60) >> 3));
      __p[0] = (void *)v74;
      __p[1] = v86;
      *(void *)&long long v149 = v86;
      *((void *)&v149 + 1) = v74 + 40 * v75;
      if (v85 == v75)
      {
        if ((uint64_t)(v64 - (void)v60) < 1)
        {
          if ((_DWORD *)v64 == v60) {
            unint64_t v88 = 1;
          }
          else {
            unint64_t v88 = 0x999999999999999ALL * ((uint64_t)(v64 - (void)v60) >> 3);
          }
          *(void *)&uint8_t buf[32] = v150;
          int32x2_t v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v88);
          int64x2_t v90 = &v89[40 * (v88 >> 2)];
          *(void *)AudioTimeStamp buf = v89;
          *(void *)&uint8_t buf[8] = v90;
          *(void *)&buf[16] = v90;
          *(void *)&unsigned char buf[24] = &v89[40 * v91];
          unint64_t v92 = __p[1];
          if ((void *)v149 != __p[1])
          {
            unint64_t v93 = &v90[v149 - (unint64_t)__p[1]];
            do
            {
              *(_DWORD *)int64x2_t v90 = *(_DWORD *)v92;
              *((void *)v90 + 2) = 0;
              *((void *)v90 + 3) = 0;
              *((void *)v90 + 1) = 0;
              *((void *)v90 + 1) = v92[1];
              v92[1] = 0;
              uint64_t v94 = *((void *)v90 + 2);
              *((void *)v90 + 2) = v92[2];
              v92[2] = v94;
              uint64_t v95 = *((void *)v90 + 3);
              *((void *)v90 + 3) = v92[3];
              v92[3] = v95;
              v90 += 40;
              v92 += 5;
            }
            while (v90 != v93);
            int64x2_t v90 = v93;
          }
          *(void *)&buf[16] = v90;
          long long v96 = *(_OWORD *)__p;
          long long v97 = v149;
          *(_OWORD *)std::string __p = *(_OWORD *)buf;
          long long v149 = *(_OWORD *)&buf[16];
          *(_OWORD *)AudioTimeStamp buf = v96;
          *(_OWORD *)&buf[16] = v97;
          std::__split_buffer<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>>>>::~__split_buffer((uint64_t)buf);
          UInt64 v86 = (_DWORD *)v149;
        }
        else
        {
          if (v85 >= -1) {
            uint64_t v87 = v85 + 1;
          }
          else {
            uint64_t v87 = v85 + 2;
          }
          v86 -= 10 * (v87 >> 1);
          __p[1] = v86;
          *(void *)&long long v149 = v86;
        }
      }
      _DWORD *v86 = v142;
      *((void *)v86 + 2) = 0;
      *((void *)v86 + 3) = 0;
      *((void *)v86 + 1) = 0;
      std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>::__init_with_size[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*>((void *)v86 + 1, v143, *((uint64_t *)&v143 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v143 + 1) - v143) >> 3));
      *((_WORD *)v86 + 16) = v145;
      unsigned int v98 = __p[1];
      uint64_t v99 = v149 + 40;
      *(void *)&long long v149 = v149 + 40;
      AudioTimeStamp v100 = *(void **)(v44 + 1528);
      if ((void *)v64 != v100)
      {
        BOOL v101 = (void *)v64;
        do
        {
          int v102 = *((_DWORD *)v101 - 10);
          v101 -= 5;
          *((_DWORD *)v98 - 10) = v102;
          v98 -= 5;
          uint64_t v98[2] = 0;
          v98[3] = 0;
          v98[1] = 0;
          v98[1] = v101[1];
          v101[1] = 0;
          uint64_t v103 = v98[2];
          uint64_t v98[2] = v101[2];
          v101[2] = v103;
          uint64_t v104 = v98[3];
          v98[3] = v101[3];
          v101[3] = v104;
        }
        while (v101 != v100);
        uint64_t v99 = v149;
      }
      __p[1] = v98;
      uint64_t v105 = *(void *)(v44 + 1536);
      if (v64 != v105)
      {
        do
        {
          *(_DWORD *)uint64_t v99 = *(_DWORD *)v64;
          *(void *)(v99 + 16) = 0;
          *(void *)(v99 + 24) = 0;
          *(void *)(v99 + 8) = 0;
          *(void *)(v99 + 8) = *(void *)(v64 + 8);
          *(void *)(v64 + 8) = 0;
          uint64_t v106 = *(void *)(v99 + 16);
          *(void *)(v99 + 16) = *(void *)(v64 + 16);
          *(void *)(v64 + 16) = v106;
          uint64_t v107 = *(void *)(v99 + 24);
          *(void *)(v99 + 24) = *(void *)(v64 + 24);
          *(void *)(v64 + 24) = v107;
          v99 += 40;
          v64 += 40;
        }
        while (v64 != v105);
        unsigned int v98 = __p[1];
      }
      uint64_t v108 = *(void **)(v44 + 1528);
      *(void *)(v44 + 1528) = v98;
      __p[1] = v108;
      *(void *)&long long v149 = v99;
      long long v109 = *(_OWORD *)(v44 + 1536);
      *(void *)(v44 + 1536) = v99;
      unint64_t v110 = __p[1];
      *(void *)(v44 + 1544) = *((void *)&v149 + 1);
      long long v149 = v109;
      __p[0] = v110;
      std::__split_buffer<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>>>>::~__split_buffer((uint64_t)__p);
      goto LABEL_142;
    }
    if (v63 == (_DWORD *)v61)
    {
      *(_DWORD *)unint64_t v61 = v59;
      *(void *)(v61 + 16) = 0;
      *(void *)(v61 + 24) = 0;
      *(void *)(v61 + 8) = 0;
      std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>::__init_with_size[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*>((void *)(v61 + 8), v143, *((uint64_t *)&v143 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v143 + 1) - v143) >> 3));
      *(_WORD *)(v61 + 32) = v145;
      *(void *)(v44 + 1536) = v61 + 40;
      goto LABEL_142;
    }
    long long v67 = v63 + 10;
    unint64_t v68 = v61 - 40;
    unint64_t v69 = v61;
    while (v68 < v61)
    {
      *(_DWORD *)unint64_t v69 = *(_DWORD *)v68;
      *(void *)(v69 + 16) = 0;
      *(void *)(v69 + 24) = 0;
      *(void *)(v69 + 8) = 0;
      *(void *)(v69 + 8) = *(void *)(v68 + 8);
      *(void *)(v68 + 8) = 0;
      uint64_t v70 = *(void *)(v69 + 16);
      *(void *)(v69 + 16) = *(void *)(v68 + 16);
      *(void *)(v68 + 16) = v70;
      uint64_t v71 = *(void *)(v69 + 24);
      *(void *)(v69 + 24) = *(void *)(v68 + 24);
      *(void *)(v68 + 24) = v71;
      v69 += 40;
      v68 += 40;
    }
    *(void *)(v44 + 1536) = v69;
    if ((_DWORD *)v61 != v67)
    {
      unint64_t v76 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v61 - (void)v67) >> 3);
      uint64_t v77 = (void *)(v61 - 16);
      uint64_t v78 = 10 * v76;
      do
      {
        mach_port_t v79 = &v63[v78];
        *((_DWORD *)v77 - 6) = v63[v78 - 10];
        uint64_t v80 = *(v77 - 2);
        *(v77 - 2) = *(void *)&v63[v78 - 8];
        *((void *)v79 - 4) = v80;
        uint64_t v81 = *(v77 - 1);
        *(v77 - 1) = *(void *)&v63[v78 - 6];
        *((void *)v79 - 3) = v81;
        uint64_t v82 = *v77;
        void *v77 = *(void *)&v63[v78 - 4];
        v77 -= 5;
        *((void *)v79 - 2) = v82;
        v78 -= 10;
      }
      while (v78 * 4);
    }
    int v83 = &v142;
    if (v64 <= (unint64_t)&v142) {
      int v83 = &v142 + 5 * (*(void *)(v44 + 1536) > (unint64_t)&v142);
    }
    int v84 = *(_DWORD *)v83;
    mach_port_t v65 = (long long *)(v83 + 1);
    *(_DWORD *)unint64_t v64 = v84;
  }
  AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>>::operator=(v64 + 8, (uint64_t)v65);
LABEL_142:
  *(void *)AudioTimeStamp buf = &v143;
  std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)AudioTimeStamp buf = &v140;
  std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_143:
  std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::~__value_func[abi:ne180100](v50);
LABEL_144:
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v146);
  *((void *)v8 + 24) = add;
  std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::~__value_func[abi:ne180100](v151);
  if (v139) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v139);
  }
  unsigned int v111 = **(void ***)(v137 + 40);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(buf, *((void *)v8 + 6), *((std::__shared_weak_count **)v8 + 7));
  uint64_t v113 = (char *)v111[8];
  unint64_t v112 = v111[9];
  if ((unint64_t)v113 >= v112)
  {
    int v114 = (char *)v111[7];
    uint64_t v115 = (v113 - v114) >> 4;
    unint64_t v116 = v115 + 1;
    if ((unint64_t)(v115 + 1) >> 60) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v117 = v112 - (void)v114;
    if (v117 >> 3 > v116) {
      unint64_t v116 = v117 >> 3;
    }
    if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v118 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v118 = v116;
    }
    if (v118 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int v119 = (char *)operator new(16 * v118);
    uint64_t v120 = &v119[16 * v115];
    *(_OWORD *)uint64_t v120 = *(_OWORD *)buf;
    unsigned int v121 = v120 + 16;
    uint64_t v122 = &v119[16 * v118];
    *(void *)AudioTimeStamp buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    if (v113 == v114)
    {
      v111[7] = v120;
      v111[8] = v121;
      v111[9] = v122;
    }
    else
    {
      do
      {
        long long v123 = *((_OWORD *)v113 - 1);
        v113 -= 16;
        *((_OWORD *)v120 - 1) = v123;
        v120 -= 16;
        *(void *)uint64_t v113 = 0;
        *((void *)v113 + 1) = 0;
      }
      while (v113 != v114);
      uint64_t v113 = (char *)v111[7];
      int v124 = (char *)v111[8];
      v111[7] = v120;
      v111[8] = v121;
      v111[9] = v122;
      while (v124 != v113)
      {
        uint64_t v125 = (std::__shared_weak_count *)*((void *)v124 - 1);
        if (v125) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v125);
        }
        v124 -= 16;
      }
    }
    if (v113) {
      operator delete(v113);
    }
    mach_port_t v126 = *(std::__shared_weak_count **)&buf[8];
    v111[8] = v121;
    if (v126) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v126);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v113 = *(_OWORD *)buf;
    v111[8] = v113 + 16;
  }
  **(_DWORD **)(v137 + 64) = *((_DWORD *)v8 + 16);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
}

void sub_1BAE63554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<AMCP::Meta::Device>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::Meta::Device>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147D410;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Meta::Device>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147D410;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 8);
}

__n128 std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F147D280;
  AMCP::Utility::Expiration_Check::Expiration_Check(a2 + 8, (uint64_t *)(a1 + 8));
  __n128 result = *(__n128 *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

char *std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v3 = &unk_1F147D280;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v3 + 8), v2);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a1 + 56);
  return v3;
}

void sub_1BAE63A9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F147D280;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1},std::allocator<AMCP::Meta::Driver::build_core(void)::$_0::operator() const(Aggregate_Device_Description const&,int)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F147D280;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0,std::allocator<AMCP::Meta::Driver::build_core(void)::$_0>,unsigned int ()(Aggregate_Device_Description const&,int)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0,std::allocator<AMCP::Meta::Driver::build_core(void)::$_0>,unsigned int ()(Aggregate_Device_Description const&,int)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0,std::allocator<AMCP::Meta::Driver::build_core(void)::$_0>,unsigned int ()(Aggregate_Device_Description const&,int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F147D200;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0,std::allocator<AMCP::Meta::Driver::build_core(void)::$_0>,unsigned int ()(Aggregate_Device_Description const&,int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F147D200;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0,std::allocator<AMCP::Meta::Driver::build_core(void)::$_0>,unsigned int ()(Aggregate_Device_Description const&,int)>::~__func(void *a1)
{
  *a1 = &unk_1F147D200;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Driver::build_core(void)::$_0,std::allocator<AMCP::Meta::Driver::build_core(void)::$_0>,unsigned int ()(Aggregate_Device_Description const&,int)>::~__func(void *a1)
{
  *a1 = &unk_1F147D200;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t FilterEngineInfoWithoutEngine::should_exclude(uint64_t a1, void **a2)
{
  return (*(unsigned int (**)(void))(*(void *)**a2 + 16))(**a2) ^ 1;
}

void FilterEngineInfoWithoutEngine::~FilterEngineInfoWithoutEngine(FilterEngineInfoWithoutEngine *this)
{
}

uint64_t FilterIfEngineOnlyNeedsReferenceStream::should_exclude(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(***(void ***)a2 + 136))();
}

void FilterIfEngineOnlyNeedsReferenceStream::~FilterIfEngineOnlyNeedsReferenceStream(FilterIfEngineOnlyNeedsReferenceStream *this)
{
}

uint64_t FilterClocklessReferenceStreamOnlyEngines::should_exclude(uint64_t a1, void **a2)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)**a2 + 136))(**a2);
  if (result) {
    return (*(unsigned int (**)(void))(*(void *)**a2 + 320))(**a2) ^ 1;
  }
  return result;
}

void FilterClocklessReferenceStreamOnlyEngines::~FilterClocklessReferenceStreamOnlyEngines(FilterClocklessReferenceStreamOnlyEngines *this)
{
}

uint64_t FilterInactiveReferenceStreamOnlyEngines::should_exclude(uint64_t a1, void **a2)
{
  uint64_t v2 = (unsigned char *)**a2;
  if (v2[748]) {
    return (*(unsigned int (**)(unsigned char *))(*(void *)v2 + 328))(v2) ^ 1;
  }
  else {
    return 0;
  }
}

void FilterInactiveReferenceStreamOnlyEngines::~FilterInactiveReferenceStreamOnlyEngines(FilterInactiveReferenceStreamOnlyEngines *this)
{
}

void AMCP::IOContext::~IOContext(AMCP::IOContext *this)
{
  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

AMCP::IOContext *AMCP::IOContext::IOContext(AMCP::IOContext *this, AMCP::System_Context *a2, unsigned int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = AMCP::Node::Node(this, a2, a3);
  *(void *)uint64_t v4 = &unk_1F147D570;
  uint64_t v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x696F636E);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    uint64_t v7 = *v10;
    if (*(void *)v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      unsigned int v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      *(_WORD *)uint64_t v11 = 2080;
      *(void *)&_OWORD v11[2] = "IOContext.cpp";
      __int16 v12 = 1024;
      int v13 = 27;
      __int16 v14 = 2080;
      uint64_t v15 = "constructed_correct_class(k_class_id_iocontext_node)";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return this;
}

void sub_1BAE6409C(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1F145F4E8;
  uint64_t v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

AMCP::Object *AMCP::IOContext::IOContext(AMCP::Object *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = *a3;
  *a3 = 0;
  AMCP::Node::Node((uint64_t)a1, a2, (uint64_t)&cf);
  if (cf) {
    CFRelease(cf);
  }
  *(void *)a1 = &unk_1F147D570;
  uint64_t v4 = AMCP::Object::constructed_correct_class(a1, (AMCP *)0x696F636E);
  if ((v4 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v6 = **(NSObject ***)buf;
    if (*(void *)v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)AudioTimeStamp buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)uint64_t v11 = 2080;
      *(void *)&_OWORD v11[2] = "IOContext.cpp";
      __int16 v12 = 1024;
      int v13 = 34;
      __int16 v14 = 2080;
      uint64_t v15 = "constructed_correct_class(k_class_id_iocontext_node)";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", buf, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1BAE64234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *int v10 = &unk_1F145F4E8;
  __int16 v12 = (std::__shared_weak_count *)v10[3];
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::IOContext::start_running(AMCP::IOContext *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = (AMCP::Address *)*((void *)this + 2);
  if (v5)
  {
    uint64_t v8 = 0x676C6F6273747274;
    int v9 = 0;
    uint64_t v6 = AMCP::Core::Core::call_operation_function<BOOL>(v5, (unsigned int *)&v8);
  }
  else
  {
    uint64_t v6 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v6;
}

uint64_t AMCP::IOContext::stop_running(AMCP::IOContext *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = (AMCP::Address *)*((void *)this + 2);
  if (v5)
  {
    uint64_t v8 = 0x676C6F6273746F70;
    int v9 = 0;
    uint64_t v6 = AMCP::Core::Core::call_operation_function<BOOL>(v5, (unsigned int *)&v8);
  }
  else
  {
    uint64_t v6 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v6;
}

uint64_t AMCP::IOContext::start_prewarming(AMCP::IOContext *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = (AMCP::Address *)*((void *)this + 2);
  if (v5)
  {
    uint64_t v8 = 0x676C6F6273747077;
    int v9 = 0;
    uint64_t v6 = AMCP::Core::Core::call_operation_function<BOOL>(v5, (unsigned int *)&v8);
  }
  else
  {
    uint64_t v6 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v6;
}

uint64_t AMCP::IOContext::stop_prewarming(AMCP::IOContext *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = (AMCP::Address *)*((void *)this + 2);
  if (v5)
  {
    uint64_t v8 = 0x676C6F6273707077;
    int v9 = 0;
    uint64_t v6 = AMCP::Core::Core::call_operation_function<BOOL>(v5, (unsigned int *)&v8);
  }
  else
  {
    uint64_t v6 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v6;
}

AMCP::Core::Core *AMCP::IOContext::get_transport_state(AMCP::IOContext *this)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = (AMCP::Core::Core *)*((void *)this + 2);
      if (!v5)
      {
LABEL_19:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return v5;
      }
      uint64_t v19 = 0x676C6F6274727374;
      int v20 = 0;
      has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::has_property(v5, (const AMCP::Address *)&v19);
      if (!has_property)
      {
LABEL_21:
        AMCP::Log::Scope_Registry::get(has_property);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        int v13 = **(NSObject ***)buf;
        if (*(void *)v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v22);
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          __int16 v14 = pthread_self();
          mach_port_t v15 = pthread_mach_thread_np(v14);
          char v18 = 4;
          strcpy((char *)&__p, "trst");
          *(_DWORD *)AudioTimeStamp buf = 67110658;
          *(_DWORD *)&uint8_t buf[4] = v15;
          *(_WORD *)uint64_t v22 = 2080;
          *(void *)&v22[2] = "Core.h";
          __int16 v23 = 1024;
          int v24 = 391;
          __int16 v25 = 2080;
          *(void *)mach_port_t v26 = "optional_value.operator BOOL() == true";
          *(_WORD *)&v26[8] = 2080;
          *(void *)&v26[10] = &__p;
          __int16 v27 = 1024;
          int v28 = 1735159650;
          __int16 v29 = 1024;
          int v30 = 0;
          _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v18 < 0) {
            operator delete(__p);
          }
        }
        abort();
      }
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&__p, (int8x8_t *)v5, (unsigned int *)&v19);
      uint64_t v7 = __p;
      if (__p)
      {
        unint64_t v8 = AMCP::Implementation::get_type_marker<std::function<AMCP::Transport_State ()(void)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v8))
        {
          LODWORD(v7) = AMCP::Core::Operation::call_function<AMCP::Transport_State>(v7);
LABEL_8:
          char v9 = 0;
          unsigned int v10 = v7 & 0xFFFFFF00;
          goto LABEL_15;
        }
        unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v11))
        {
          AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)buf, v7);
          LODWORD(v7) = AMCP::Thing::convert_to<AMCP::Transport_State>((uint64_t)buf);
          if (*(void *)&v26[6]) {
            (*(void (**)(void, uint8_t *, void, void))&v26[6])(0, buf, 0, 0);
          }
          goto LABEL_8;
        }
        LOBYTE(v7) = 0;
      }
      unsigned int v10 = 0;
      char v9 = 1;
LABEL_15:
      has_property = (AMCP::Log::Scope_Registry *)v17;
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      if ((v9 & 1) == 0)
      {
        uint64_t v5 = (AMCP::Core::Core *)(v10 | v7);
        goto LABEL_19;
      }
      goto LABEL_21;
    }
  }
  return 0;
}

void sub_1BAE6478C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMCP::IOContext::start_at_time(AMCP::IOContext *this, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  uint64_t v7 = (AMCP::Address *)*((void *)this + 2);
  if (v7)
  {
    uint64_t v10 = 0x676C6F6273746174;
    int v11 = 0;
    uint64_t v8 = AMCP::Core::Core::call_operation_function<BOOL,unsigned long long>(v7, (unsigned int *)&v10, a2);
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v8;
}

unint64_t AMCP::IOContext::get_buffer_frame_size(AMCP::IOContext *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5) {
    unint64_t simple_required = AMCP::Core::Core::get_simple_required_property<1718839674u>(v5);
  }
  else {
    unint64_t simple_required = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return simple_required;
}

uint64_t AMCP::IOContext::set_buffer_frame_size(AMCP::IOContext *this, int a2)
{
  int v9 = a2;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = std::__shared_weak_count::lock(v3);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  uint64_t v6 = (int8x8_t *)*((void *)this + 2);
  if (v6) {
    uint64_t v7 = AMCP::Core::Core::set_simple_property_value<1718839674u>(v6, &v9);
  }
  else {
    uint64_t v7 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  return v7;
}

unint64_t AMCP::IOContext::get_min_and_max_buffer_frame_size(AMCP::IOContext *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2 && (uint64_t v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    uint64_t v4 = v3;
    uint64_t v5 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v5)
    {
      unint64_t simple_required = AMCP::Core::Core::get_simple_required_property<1718843939u>(v5);
      unsigned int v7 = simple_required;
      unint64_t v8 = (unint64_t)simple_required & 0xFFFFFFFF00000000;
    }
    else
    {
      unint64_t v8 = 0x100000000000;
      unsigned int v7 = 16;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    unint64_t v8 = 0x100000000000;
    unsigned int v7 = 16;
  }
  return v8 & 0xFFFFFFFF00000000 | v7;
}

float AMCP::IOContext::get_io_cycle_usage(AMCP::IOContext *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  float simple_required = 1.0;
  if (v2)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = (AMCP::Core::Core *)*((void *)this + 2);
      if (v6) {
        float simple_required = AMCP::Core::Core::get_simple_required_property<1852012899u>(v6);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  return simple_required;
}

uint64_t AMCP::IOContext::set_io_cycle_usage(AMCP::IOContext *this, float a2)
{
  float v13 = a2;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *((void *)this + 2);
      if (!v7)
      {
LABEL_19:
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        return v7;
      }
      uint64_t v14 = 0x676C6F626E637963;
      int v15 = 0;
      if (!AMCP::Core::Core::is_property_settable((int8x8_t *)v7, (const AMCP::Address *)&v14))
      {
LABEL_17:
        uint64_t v7 = 0;
        goto LABEL_19;
      }
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v18, (int8x8_t *)v7, (unsigned int *)&v14);
      unint64_t v8 = v18;
      if (v18)
      {
        unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
        {
          AMCP::Core::Operation::call_function<void,float const&>(v8, (uint64_t)&v13);
LABEL_8:
          char v10 = 0;
          goto LABEL_14;
        }
        unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v11))
        {
          memset(v16, 0, sizeof(v16));
          *(float *)uint64_t v16 = a2;
          uint64_t v17 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
          AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v8, (uint64_t)v16);
          if (v17) {
            v17(0, (uint64_t)v16, 0, 0);
          }
          goto LABEL_8;
        }
      }
      char v10 = 1;
LABEL_14:
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      if ((v10 & 1) == 0)
      {
        uint64_t v7 = 1;
        goto LABEL_19;
      }
      goto LABEL_17;
    }
  }
  return 0;
}