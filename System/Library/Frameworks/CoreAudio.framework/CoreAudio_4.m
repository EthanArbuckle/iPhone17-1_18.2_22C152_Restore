uint64_t AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>>()
{
  void *v0;
  int v2;
  const std::type_info *v3;

  v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[82];
}

uint64_t std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFvjRKNS_15Proc_Cycle_InfoEmPNS_11Proc_StreamEmS8_EEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSH_4NodeEEENS3_IFRT_RNSH_9Node_ProcEEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 64) + 16))(&v6);
  uint64_t v4 = *(void *)(a1 + 56);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, v6);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100](a2, v5);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1BACA9B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::destroy(uint64_t a1)
{
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1469550;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(a2 + 8), (long long *)(a1 + 8));
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((void *)a2 + 7);
  return this;
}

void sub_1BACA9C94(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  v2 = (char *)operator new(0x48uLL);
  *(void *)v2 = &unk_1F1469550;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1BACA9D04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1469550;
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1469550;
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::~__value_func[abi:ne180100](void *a1)
{
  v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>>::dispatch;
LABEL_6:
      std::__function::__value_func<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core10setup_procINSt3__18functionIFvjRKNS_15Proc_Cycle_InfoEmPNS_11Proc_StreamEmS8_EEEEEvRNS_4Core13Operation_SetERKNS_7AddressEPNS_5Graph15Node_Proc_OwnerERKNS2_10shared_ptrINSH_4NodeEEENS3_IFRT_RNSH_9Node_ProcEEEEEUlRKSA_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::operator()(uint64_t a1, uint64_t a2)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 64) + 16))(&v9);
  uint64_t v4 = *(void *)(a1 + 56);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, v9);
  uint64_t v6 = std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator=[abi:ne180100](v5);
  std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator=(v6, a2);
  int v7 = *(_DWORD *)(a1 + 72);
  if (v7 == 1852074351)
  {
    uint64_t v8 = *(void *)(v9 + 576);
    if (v8)
    {
      std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100]((uint64_t)v11, v9 + 224);
      AMCP::Graph::Call_Audio_IO_Proc::update_proc(v8, (uint64_t)v11);
      std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100](v11);
    }
  }
  else if (v7 == 1919247212)
  {
    std::function<void ()>::operator()(*(void *)(v9 + 152), 0);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1BACAA220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator=[abi:ne180100](void *a1)
{
  v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1BACAA5AC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(void)#1}>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::destroy(uint64_t a1)
{
}

std::string *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14694C0;
  return std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1} const&,0ul>((std::string *)(a2 + 8), (long long *)(a1 + 8));
}

std::string *std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1} const&,0ul>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  this[2].__r_.__value_.__l.__size_ = *((void *)a2 + 7);
  this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  return this;
}

void sub_1BACAA69C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::__clone(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  v2 = (char *)operator new(0x58uLL);
  *(void *)v2 = &unk_1F14694C0;
  std::__compressed_pair_elem<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1},0,false>::__compressed_pair_elem[abi:ne180100]<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1} const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1BACAA70C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F14694C0;
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1},std::allocator<void AMCP::IO_Core::setup_proc<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(AMCP::Core::Operation_Set &,AMCP::Address const&,AMCP::Graph::Node_Proc_Owner *,std::shared_ptr<AMCP::Graph::Node> const&,std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>)::{lambda(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> const&)#1}>,void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F14694C0;
  std::__function::__value_func<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_1>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_1>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_1>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::operator()(uint64_t a1, uint64_t a2)
{
  return a2 + 224;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_1>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14695E0;
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_1>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F14695E0;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_1>,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> & ()(AMCP::Graph::Node_Proc &)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0>,applesauce::CF::StringRef ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0>,applesauce::CF::StringRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core4Node11update_coreERNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

CFStringRef std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0>,applesauce::CF::StringRef ()(void)>::operator()@<X0>(CFStringRef result@<X0>, CFStringRef *a2@<X8>)
{
  if (SHIBYTE(result->length) < 0)
  {
    info = (const UInt8 *)result->info;
    if (!info)
    {
      *a2 = 0;
      return result;
    }
    CFIndex data = (CFIndex)result->data;
  }
  else
  {
    info = (const UInt8 *)&result->info;
    CFIndex data = HIBYTE(result->length);
  }
  uint64_t result = CFStringCreateWithBytes(0, info, data, 0x8000100u, 0);
  *a2 = result;
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1BACAA994(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0>,applesauce::CF::StringRef ()(void)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0>,applesauce::CF::StringRef ()(void)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1469440;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void *std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t a1)
{
  v2 = operator new(0x20uLL);
  void *v2 = &unk_1F1469440;
  long long v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_1BACAAAC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0>,applesauce::CF::StringRef ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1469440;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::Node::update_core(AMCP::Core::Operation_Set &)::$_0>,applesauce::CF::StringRef ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1469440;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void AMCP::IO_Core::Node::~Node(AMCP::IO_Core::Node *this)
{
  *(void *)this = &unk_1F1469380;
  v2 = (std::__shared_mutex_base *)(*(uint64_t (**)(void))(**((void **)this + 4) + 16))(*((void *)this + 4));
  AMCP::Core::Broker::destroy_core(v2, *((_DWORD *)this + 2));
  long long v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4)
    {
      for (uint64_t i = 0; i != v4; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v6 = *a2;
  *a2 = 0;
  int v7 = *(void **)a1;
  *(void *)a1 = v6;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v10 = a2[2];
  uint64_t v9 = a2 + 2;
  uint64_t v8 = v10;
  uint64_t v11 = *(v9 - 1);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 8) = v11;
  *(v9 - 1) = 0;
  uint64_t v12 = v9[1];
  *(void *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 4);
  if (v12)
  {
    unint64_t v13 = *(void *)(v8 + 8);
    unint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        v13 %= v14;
      }
    }
    else
    {
      v13 &= v14 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    *uint64_t v9 = 0;
    v9[1] = 0;
  }
}

void AMCP::IO_Core::Node::build_core(AMCP::IO_Core::Node *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  v2 = (std::__shared_mutex_base *)(*(uint64_t (**)(void))(**((void **)this + 4) + 16))(*((void *)this + 4));
  *((_DWORD *)this + 2) = AMCP::Core::Broker::reserve_id(v2);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)uint64_t v12 = 0u;
  int v13 = 1065353216;
  (*(void (**)(AMCP::IO_Core::Node *, void **))(*(void *)this + 32))(this, __p);
  long long v3 = (std::__shared_mutex_base *)(*(uint64_t (**)(void))(**((void **)this + 4) + 16))(*((void *)this + 4));
  core = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::make_core(&v9, v3, (uint64_t)__p, *((_DWORD *)this + 2));
  if (!v9)
  {
    AMCP::Log::Scope_Registry::get(core);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v6 = **(NSObject ***)buf;
    if (*(void *)v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v15);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v8;
      *(_WORD *)v15 = 2080;
      *(void *)&v15[2] = "Node.cpp";
      __int16 v16 = 1024;
      int v17 = 74;
      __int16 v18 = 2080;
      v19 = "core_ptr.operator BOOL() == true";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s failed to allocate the Core", buf, 0x22u);
    }
    abort();
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((void *)v12[0]);
  uint64_t v5 = __p[0];
  __p[0] = 0;
  if (v5) {
    operator delete(v5);
  }
}

void sub_1BACAAED8(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BACAB304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BACAB4E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c108_ZTSKZ94__Core_Audio_Driver_Host_set_property_data_qualifier_data_size_qualifier_data_data_size_data__E4__43(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c108_ZTSKZ94__Core_Audio_Driver_Host_set_property_data_qualifier_data_size_qualifier_data_data_size_data__E4__42(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_1BACAB7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27,id *buf,long long a29)
{
  if (a2)
  {
    if ((void)a29) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a29);
    }

    v31 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v31);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    v32 = *buf;
    AMCP::Log::Scope::get_os_log_t(*buf);
    objc_claimAutoreleasedReturnValue();
    if ((void)a29) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a29);
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v33 = pthread_self();
      mach_port_t v34 = pthread_mach_thread_np(v33);
      unint64_t v35 = 0;
      v36 = 0;
      int v37 = 47;
      do
      {
        v38 = &aLibraryCachesC_67[v35];
        if (v37 == 47) {
          v36 = &aLibraryCachesC_67[v35];
        }
        int v37 = v38[1];
        if (!v38[1]) {
          break;
        }
      }
      while (v35++ < 0xFFF);
      if (v36) {
        v40 = v36 + 1;
      }
      else {
        v40 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Server/Core_Audio_Driver_Host.mm";
      }
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v34;
      LOWORD(a29) = 2080;
      *(void *)((char *)&a29 + 2) = v40;
      WORD5(a29) = 1024;
      HIDWORD(a29) = 661;
      _os_log_error_impl(&dword_1BAA78000, v32, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Failed to get property data!", (uint8_t *)&buf, 0x18u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1BACAB7B0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BACABB4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_32c127_ZTSKZ112__Core_Audio_Driver_Host_get_property_data_qualifier_data_size_qualifier_data_data_size_out_data_size_out_data__E4__41(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t __copy_helper_block_ea8_32c127_ZTSKZ112__Core_Audio_Driver_Host_get_property_data_qualifier_data_size_qualifier_data_data_size_out_data_size_out_data__E4__40(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_1BACABD78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BACABF54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_32c107_ZTSKZ93__Core_Audio_Driver_Host_get_property_data_size_qualifier_data_size_qualifier_data_out_size__E4__39(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t __copy_helper_block_ea8_32c107_ZTSKZ93__Core_Audio_Driver_Host_get_property_data_size_qualifier_data_size_qualifier_data_out_size__E4__38(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_1BACAC104(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BACAC2C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_32c74_ZTSKZ60__Core_Audio_Driver_Host_is_property_settable_out_settable__E4__37(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t __copy_helper_block_ea8_32c74_ZTSKZ60__Core_Audio_Driver_Host_is_property_settable_out_settable__E4__36(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_1BACAC448(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BACAC604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c70_ZTSKZ56__Core_Audio_Driver_Host_has_property_out_has_property__E4__35(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c70_ZTSKZ56__Core_Audio_Driver_Host_has_property_out_has_property__E4__34(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_1BACAC7A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BACAC978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c58_ZTSKZ44__Core_Audio_Driver_Host_unregister_buffer__E4__33(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c58_ZTSKZ44__Core_Audio_Driver_Host_unregister_buffer__E4__32(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_1BACACB10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BACACCE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c56_ZTSKZ42__Core_Audio_Driver_Host_register_buffer__E4__31(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c56_ZTSKZ42__Core_Audio_Driver_Host_register_buffer__E4__30(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_1BACACE20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BACACFC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BACAD110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BACAD2B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c77_ZTSKZ63__Core_Audio_Driver_Host_stop_synchronous_messenger_client_id__E4__27(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_1BACAD494(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BACAD664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c149_ZTSKZ134__Core_Audio_Driver_Host_start_synchronous_messenger_client_id_nominal_sample_rate_io_buffer_frame_size_work_group_port_io_messenger__E4__25(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_1BACAD7C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BACAD964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c60_ZTSKZ46__Core_Audio_Driver_Host_stop_io_client_info__E4__23(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_1BACADAC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BACADC64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c61_ZTSKZ47__Core_Audio_Driver_Host_start_io_client_info__E4__21(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_1BACADDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }

  _Unwind_Resume(a1);
}

void sub_1BACADFCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c61_ZTSKZ47__Core_Audio_Driver_Host_object_was_destroyed__E4__19(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c61_ZTSKZ47__Core_Audio_Driver_Host_object_was_destroyed__E4__18(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_1BACAE144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BACAE300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c55_ZTSKZ41__Core_Audio_Driver_Host_destroy_device__E4__17(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c55_ZTSKZ41__Core_Audio_Driver_Host_destroy_device__E4__16(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_1BACAE4A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BACAE674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_32c80_ZTSKZ66__Core_Audio_Driver_Host_create_device_client_info_out_object_id__E4__15(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t __copy_helper_block_ea8_32c80_ZTSKZ66__Core_Audio_Driver_Host_create_device_client_info_out_object_id__E4__14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_1BACAE80C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BACAE9C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c73_ZTSKZ59__Core_Audio_Driver_Host_remove_device_client_client_info__E4__13(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c73_ZTSKZ59__Core_Audio_Driver_Host_remove_device_client_client_info__E4__12(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_1BACAEB58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BACAED14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c70_ZTSKZ56__Core_Audio_Driver_Host_add_device_client_client_info__E4__11(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c70_ZTSKZ56__Core_Audio_Driver_Host_add_device_client_client_info__E4__10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_1BACAEEA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BACAF060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c87_ZTSKZ74__Core_Audio_Driver_Host_abort_device_configuration_change_action_change__E3__9(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c87_ZTSKZ74__Core_Audio_Driver_Host_abort_device_configuration_change_action_change__E3__8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_1BACAF1F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BACAF3AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c89_ZTSKZ76__Core_Audio_Driver_Host_perform_device_configuration_change_action_change__E3__7(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c89_ZTSKZ76__Core_Audio_Driver_Host_perform_device_configuration_change_action_change__E3__6(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_1BACAF470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1BACAF74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_1BACAF8D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BACAFA84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c57_ZTSKZ44__Core_Audio_Driver_Host_initialize_driver__E3__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_1BACAFB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1BACAFC34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BACAFD0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BACAFE18(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1BACAFF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1BACB0034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BACB00D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1BACB0198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)Core_Audio_Driver_Host;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1BACB021C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BACB03AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Property_Type_Info>::__on_zero_shared(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 48;
        std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(v3 - 40);
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v2;
    operator delete(v4);
  }
}

void std::__shared_ptr_emplace<Property_Type_Info>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147FF78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<Property_Type_Info>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147FF78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<caulk::mach::unfair_lock>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147FE38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<caulk::mach::unfair_lock>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147FE38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMCP::Feature_Flags::run_new_hal(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::access_run_new_hal(0, a2);
}

uint64_t AMCP::Feature_Flags::access_run_new_hal(AMCP::Feature_Flags *this, const BOOL *a2)
{
  uint64_t v3 = &v4;
  uint64_t v4 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::Feature_Flags::access_run_new_hal(BOOL const*)::once, memory_order_acquire) != -1)
  {
    uint64_t v6 = &v3;
    uint64_t v5 = &v6;
    std::__call_once(&AMCP::Feature_Flags::access_run_new_hal(BOOL const*)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_run_new_hal(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::access_run_new_hal(BOOL const*)::s_run_new_hal;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_run_new_hal(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    int v2 = *v1;
    AMCP::Feature_Flags::access_run_new_hal(BOOL const*)::s_run_new_hal = v2;
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::access_run_new_hal(BOOL const*)::s_run_new_hal = a1;
    if (a1)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
      uint64_t v3 = **(NSObject ***)v14;
      if (*(void *)&v14[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
      }
      BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
      if (v4)
      {
        uint64_t v5 = pthread_self();
        mach_port_t v6 = pthread_mach_thread_np(v5);
        *(_DWORD *)unint64_t v14 = 67109634;
        *(_DWORD *)&v14[4] = v6;
        *(_WORD *)&v14[8] = 2080;
        *(void *)&v14[10] = "Configuration.cpp";
        __int16 v15 = 1024;
        int v16 = 212;
        int v7 = "%6u %32s:%-5d MCP Engaged";
LABEL_12:
        _os_log_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_INFO, v7, v14, 0x18u);
        goto LABEL_13;
      }
      goto LABEL_13;
    }
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  uint64_t v3 = **(NSObject ***)v14;
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
  if (v4)
  {
    mach_port_t v8 = pthread_self();
    mach_port_t v9 = pthread_mach_thread_np(v8);
    *(_DWORD *)unint64_t v14 = 67109634;
    *(_DWORD *)&v14[4] = v9;
    *(_WORD *)&v14[8] = 2080;
    *(void *)&v14[10] = "Configuration.cpp";
    __int16 v15 = 1024;
    int v16 = 216;
    int v7 = "%6u %32s:%-5d MCP Disengaged";
    goto LABEL_12;
  }
LABEL_13:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  uint64_t v10 = *(AMCP::Log::Scope_Registry **)&v14[8];
  uint64_t v11 = **(NSObject ***)v14;
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  AMCP::Log::Scope_Registry::get(v10);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  os_signpost_id_t v12 = os_signpost_id_generate(**(os_log_t **)v14);
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    if (AMCP::Feature_Flags::access_run_new_hal(BOOL const*)::s_run_new_hal) {
      int v13 = "true";
    }
    else {
      int v13 = "false";
    }
    *(_DWORD *)unint64_t v14 = 136315138;
    *(void *)&v14[4] = v13;
    _os_signpost_emit_with_name_impl(&dword_1BAA78000, v11, OS_SIGNPOST_EVENT, v12, "AMCP_Use_New_HAL_State", "AMCP Turned on: %s", v14, 0xCu);
  }
}

uint64_t AMCP::Feature_Flags::set_run_new_hal(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3 = (char)this;
  return AMCP::Feature_Flags::access_run_new_hal((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::run_hybrid_hal(AMCP::Feature_Flags *this, const BOOL *a2)
{
  uint64_t result = AMCP::Feature_Flags::access_run_hybrid_hal(0, a2);
  if (result) {
    return AMCP::Feature_Flags::access_run_new_hal(0, v3) ^ 1;
  }
  return result;
}

uint64_t AMCP::Feature_Flags::access_run_hybrid_hal(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3 = &v4;
  BOOL v4 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::Feature_Flags::access_run_hybrid_hal(BOOL const*)::once, memory_order_acquire) != -1)
  {
    mach_port_t v6 = &v3;
    uint64_t v5 = &v6;
    std::__call_once(&AMCP::Feature_Flags::access_run_hybrid_hal(BOOL const*)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_run_hybrid_hal(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::access_run_hybrid_hal(BOOL const*)::s_run_hybrid_hal;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_run_hybrid_hal(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    int v2 = *v1;
    AMCP::Feature_Flags::access_run_hybrid_hal(BOOL const*)::s_run_hybrid_hal = v2;
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::access_run_hybrid_hal(BOOL const*)::s_run_hybrid_hal = a1;
    if (a1)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
      char v3 = **(NSObject ***)v14;
      if (*(void *)&v14[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
      }
      BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
      if (v4)
      {
        uint64_t v5 = pthread_self();
        mach_port_t v6 = pthread_mach_thread_np(v5);
        *(_DWORD *)unint64_t v14 = 67109634;
        *(_DWORD *)&v14[4] = v6;
        *(_WORD *)&v14[8] = 2080;
        *(void *)&v14[10] = "Configuration.cpp";
        __int16 v15 = 1024;
        int v16 = 176;
        int v7 = "%6u %32s:%-5d Hybrid HAL Engaged";
LABEL_12:
        _os_log_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_INFO, v7, v14, 0x18u);
        goto LABEL_13;
      }
      goto LABEL_13;
    }
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  char v3 = **(NSObject ***)v14;
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
  if (v4)
  {
    mach_port_t v8 = pthread_self();
    mach_port_t v9 = pthread_mach_thread_np(v8);
    *(_DWORD *)unint64_t v14 = 67109634;
    *(_DWORD *)&v14[4] = v9;
    *(_WORD *)&v14[8] = 2080;
    *(void *)&v14[10] = "Configuration.cpp";
    __int16 v15 = 1024;
    int v16 = 184;
    int v7 = "%6u %32s:%-5d Vintage HAL Engaged";
    goto LABEL_12;
  }
LABEL_13:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  uint64_t v10 = *(AMCP::Log::Scope_Registry **)&v14[8];
  uint64_t v11 = **(NSObject ***)v14;
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  AMCP::Log::Scope_Registry::get(v10);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  os_signpost_id_t v12 = os_signpost_id_generate(**(os_log_t **)v14);
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    if (AMCP::Feature_Flags::access_run_hybrid_hal(BOOL const*)::s_run_hybrid_hal) {
      int v13 = "true";
    }
    else {
      int v13 = "false";
    }
    *(_DWORD *)unint64_t v14 = 136315138;
    *(void *)&v14[4] = v13;
    _os_signpost_emit_with_name_impl(&dword_1BAA78000, v11, OS_SIGNPOST_EVENT, v12, "AMCP_Use_Hybrid_HAL_State", "Hybrid HAL turned on: %s", v14, 0xCu);
  }
}

uint64_t AMCP::Feature_Flags::set_run_hybrid_hal(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3 = (char)this;
  return AMCP::Feature_Flags::access_run_hybrid_hal((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::host_asp_oop(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::access_host_asp_oop(0, a2);
}

uint64_t AMCP::Feature_Flags::access_host_asp_oop(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3 = &v4;
  BOOL v4 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::Feature_Flags::access_host_asp_oop(BOOL const*)::once, memory_order_acquire) != -1)
  {
    mach_port_t v6 = &v3;
    uint64_t v5 = &v6;
    std::__call_once(&AMCP::Feature_Flags::access_host_asp_oop(BOOL const*)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_host_asp_oop(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::access_host_asp_oop(BOOL const*)::s_host_asp_oop;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_host_asp_oop(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    int v2 = *v1;
    AMCP::Feature_Flags::access_host_asp_oop(BOOL const*)::s_host_asp_oop = v2;
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::access_host_asp_oop(BOOL const*)::s_host_asp_oop = a1;
    if (a1)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
      char v3 = **(NSObject ***)v14;
      if (*(void *)&v14[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
      }
      BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
      if (v4)
      {
        uint64_t v5 = pthread_self();
        mach_port_t v6 = pthread_mach_thread_np(v5);
        *(_DWORD *)unint64_t v14 = 67109634;
        *(_DWORD *)&v14[4] = v6;
        *(_WORD *)&v14[8] = 2080;
        *(void *)&v14[10] = "Configuration.cpp";
        __int16 v15 = 1024;
        int v16 = 275;
        int v7 = "%6u %32s:%-5d Hosting ASPs Out of Process";
LABEL_12:
        _os_log_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_INFO, v7, v14, 0x18u);
        goto LABEL_13;
      }
      goto LABEL_13;
    }
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  char v3 = **(NSObject ***)v14;
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
  if (v4)
  {
    mach_port_t v8 = pthread_self();
    mach_port_t v9 = pthread_mach_thread_np(v8);
    *(_DWORD *)unint64_t v14 = 67109634;
    *(_DWORD *)&v14[4] = v9;
    *(_WORD *)&v14[8] = 2080;
    *(void *)&v14[10] = "Configuration.cpp";
    __int16 v15 = 1024;
    int v16 = 279;
    int v7 = "%6u %32s:%-5d Loading ASPs directly";
    goto LABEL_12;
  }
LABEL_13:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  uint64_t v10 = *(AMCP::Log::Scope_Registry **)&v14[8];
  uint64_t v11 = **(NSObject ***)v14;
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  AMCP::Log::Scope_Registry::get(v10);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  os_signpost_id_t v12 = os_signpost_id_generate(**(os_log_t **)v14);
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    if (AMCP::Feature_Flags::access_host_asp_oop(BOOL const*)::s_host_asp_oop) {
      int v13 = "yes";
    }
    else {
      int v13 = "no";
    }
    *(_DWORD *)unint64_t v14 = 136315138;
    *(void *)&v14[4] = v13;
    _os_signpost_emit_with_name_impl(&dword_1BAA78000, v11, OS_SIGNPOST_EVENT, v12, "AMCP_Host_ASP_OoP_State", "Hosting ASPs Out of Process: %s", v14, 0xCu);
  }
}

uint64_t AMCP::Feature_Flags::set_host_asp_oop(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3 = (char)this;
  return AMCP::Feature_Flags::access_host_asp_oop((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::internal_drivers_oop(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::access_internal_drivers_oop(0, a2);
}

uint64_t AMCP::Feature_Flags::access_internal_drivers_oop(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3 = &v4;
  BOOL v4 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::Feature_Flags::access_internal_drivers_oop(BOOL const*)::once, memory_order_acquire) != -1)
  {
    mach_port_t v6 = &v3;
    uint64_t v5 = &v6;
    std::__call_once(&AMCP::Feature_Flags::access_internal_drivers_oop(BOOL const*)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_internal_drivers_oop(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::access_internal_drivers_oop(BOOL const*)::s_force_internal_drivers_oop;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_internal_drivers_oop(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    int v2 = *v1;
    AMCP::Feature_Flags::access_internal_drivers_oop(BOOL const*)::s_force_internal_drivers_oop = v2;
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::access_internal_drivers_oop(BOOL const*)::s_force_internal_drivers_oop = a1;
    if (a1)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
      char v3 = **(NSObject ***)v14;
      if (*(void *)&v14[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
      }
      BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
      if (v4)
      {
        uint64_t v5 = pthread_self();
        mach_port_t v6 = pthread_mach_thread_np(v5);
        *(_DWORD *)unint64_t v14 = 67109634;
        *(_DWORD *)&v14[4] = v6;
        *(_WORD *)&v14[8] = 2080;
        *(void *)&v14[10] = "Configuration.cpp";
        __int16 v15 = 1024;
        int v16 = 244;
        int v7 = "%6u %32s:%-5d Forcing Internal Drivers Out of Process";
LABEL_12:
        _os_log_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_INFO, v7, v14, 0x18u);
        goto LABEL_13;
      }
      goto LABEL_13;
    }
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  char v3 = **(NSObject ***)v14;
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
  if (v4)
  {
    mach_port_t v8 = pthread_self();
    mach_port_t v9 = pthread_mach_thread_np(v8);
    *(_DWORD *)unint64_t v14 = 67109634;
    *(_DWORD *)&v14[4] = v9;
    *(_WORD *)&v14[8] = 2080;
    *(void *)&v14[10] = "Configuration.cpp";
    __int16 v15 = 1024;
    int v16 = 248;
    int v7 = "%6u %32s:%-5d Internal Drivers will be loaded on the Server";
    goto LABEL_12;
  }
LABEL_13:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  uint64_t v10 = *(AMCP::Log::Scope_Registry **)&v14[8];
  uint64_t v11 = **(NSObject ***)v14;
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  AMCP::Log::Scope_Registry::get(v10);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  os_signpost_id_t v12 = os_signpost_id_generate(**(os_log_t **)v14);
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    if (AMCP::Feature_Flags::access_internal_drivers_oop(BOOL const*)::s_force_internal_drivers_oop) {
      int v13 = "yes";
    }
    else {
      int v13 = "no";
    }
    *(_DWORD *)unint64_t v14 = 136315138;
    *(void *)&v14[4] = v13;
    _os_signpost_emit_with_name_impl(&dword_1BAA78000, v11, OS_SIGNPOST_EVENT, v12, "AMCP_Load_Internal_Drivers_OoP", "Forcing Internal Drivers Out of Process: %s", v14, 0xCu);
  }
}

uint64_t AMCP::Feature_Flags::set_internal_drivers_oop(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3 = (char)this;
  return AMCP::Feature_Flags::access_internal_drivers_oop((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::allow_mcp_and_hal_coex(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::access_allow_mcp_and_hal_coex(0, a2);
}

uint64_t AMCP::Feature_Flags::access_allow_mcp_and_hal_coex(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3 = &v4;
  BOOL v4 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::Feature_Flags::access_allow_mcp_and_hal_coex(BOOL const*)::once, memory_order_acquire) != -1)
  {
    mach_port_t v6 = &v3;
    uint64_t v5 = &v6;
    std::__call_once(&AMCP::Feature_Flags::access_allow_mcp_and_hal_coex(BOOL const*)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_allow_mcp_and_hal_coex(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::access_allow_mcp_and_hal_coex(BOOL const*)::s_allow_mcp_and_hal_coex;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_allow_mcp_and_hal_coex(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    int v2 = *v1;
    AMCP::Feature_Flags::access_allow_mcp_and_hal_coex(BOOL const*)::s_allow_mcp_and_hal_coex = v2;
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::access_allow_mcp_and_hal_coex(BOOL const*)::s_allow_mcp_and_hal_coex = a1;
    if (a1)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
      char v3 = **(NSObject ***)v14;
      if (*(void *)&v14[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
      }
      BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
      if (v4)
      {
        uint64_t v5 = pthread_self();
        mach_port_t v6 = pthread_mach_thread_np(v5);
        *(_DWORD *)unint64_t v14 = 67109634;
        *(_DWORD *)&v14[4] = v6;
        *(_WORD *)&v14[8] = 2080;
        *(void *)&v14[10] = "Configuration.cpp";
        __int16 v15 = 1024;
        int v16 = 306;
        int v7 = "%6u %32s:%-5d MCP and HAL Can Coexist in coreaudiod";
LABEL_12:
        _os_log_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_INFO, v7, v14, 0x18u);
        goto LABEL_13;
      }
      goto LABEL_13;
    }
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  char v3 = **(NSObject ***)v14;
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
  if (v4)
  {
    mach_port_t v8 = pthread_self();
    mach_port_t v9 = pthread_mach_thread_np(v8);
    *(_DWORD *)unint64_t v14 = 67109634;
    *(_DWORD *)&v14[4] = v9;
    *(_WORD *)&v14[8] = 2080;
    *(void *)&v14[10] = "Configuration.cpp";
    __int16 v15 = 1024;
    int v16 = 310;
    int v7 = "%6u %32s:%-5d MCP and HAL Cannot Coexist in coreaudiod";
    goto LABEL_12;
  }
LABEL_13:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  uint64_t v10 = *(AMCP::Log::Scope_Registry **)&v14[8];
  uint64_t v11 = **(NSObject ***)v14;
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  AMCP::Log::Scope_Registry::get(v10);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  os_signpost_id_t v12 = os_signpost_id_generate(**(os_log_t **)v14);
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    if (AMCP::Feature_Flags::access_allow_mcp_and_hal_coex(BOOL const*)::s_allow_mcp_and_hal_coex) {
      int v13 = "yes";
    }
    else {
      int v13 = "no";
    }
    *(_DWORD *)unint64_t v14 = 136315138;
    *(void *)&v14[4] = v13;
    _os_signpost_emit_with_name_impl(&dword_1BAA78000, v11, OS_SIGNPOST_EVENT, v12, "AMCP_Allow_MCP_HAL_Coex", "MCP and HAL Can Coexist in coreaudiod: %s", v14, 0xCu);
  }
}

uint64_t AMCP::Feature_Flags::set_allow_mcp_and_hal_coex(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3 = (char)this;
  return AMCP::Feature_Flags::access_allow_mcp_and_hal_coex((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::event_link_oop_io(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::access_event_link_oop_io(0, a2);
}

uint64_t AMCP::Feature_Flags::access_event_link_oop_io(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3 = &v4;
  BOOL v4 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::Feature_Flags::access_event_link_oop_io(BOOL const*)::once, memory_order_acquire) != -1)
  {
    mach_port_t v6 = &v3;
    uint64_t v5 = &v6;
    std::__call_once(&AMCP::Feature_Flags::access_event_link_oop_io(BOOL const*)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_event_link_oop_io(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::access_event_link_oop_io(BOOL const*)::s_event_link_oop_io;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_event_link_oop_io(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    int v2 = *v1;
    AMCP::Feature_Flags::access_event_link_oop_io(BOOL const*)::s_event_link_oop_io = v2;
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::access_event_link_oop_io(BOOL const*)::s_event_link_oop_io = a1;
    if (a1)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
      char v3 = **(NSObject ***)v14;
      if (*(void *)&v14[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
      }
      BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
      if (v4)
      {
        uint64_t v5 = pthread_self();
        mach_port_t v6 = pthread_mach_thread_np(v5);
        *(_DWORD *)unint64_t v14 = 67109634;
        *(_DWORD *)&v14[4] = v6;
        *(_WORD *)&v14[8] = 2080;
        *(void *)&v14[10] = "Configuration.cpp";
        __int16 v15 = 1024;
        int v16 = 338;
        int v7 = "%6u %32s:%-5d Using EventLink for OoP I/O.";
LABEL_12:
        _os_log_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_INFO, v7, v14, 0x18u);
        goto LABEL_13;
      }
      goto LABEL_13;
    }
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  char v3 = **(NSObject ***)v14;
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
  if (v4)
  {
    mach_port_t v8 = pthread_self();
    mach_port_t v9 = pthread_mach_thread_np(v8);
    *(_DWORD *)unint64_t v14 = 67109634;
    *(_DWORD *)&v14[4] = v9;
    *(_WORD *)&v14[8] = 2080;
    *(void *)&v14[10] = "Configuration.cpp";
    __int16 v15 = 1024;
    int v16 = 342;
    int v7 = "%6u %32s:%-5d Using Mach Semaphores for OoP I/O.";
    goto LABEL_12;
  }
LABEL_13:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  uint64_t v10 = *(AMCP::Log::Scope_Registry **)&v14[8];
  uint64_t v11 = **(NSObject ***)v14;
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  AMCP::Log::Scope_Registry::get(v10);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  os_signpost_id_t v12 = os_signpost_id_generate(**(os_log_t **)v14);
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    if (AMCP::Feature_Flags::access_event_link_oop_io(BOOL const*)::s_event_link_oop_io) {
      int v13 = "yes";
    }
    else {
      int v13 = "no";
    }
    *(_DWORD *)unint64_t v14 = 136315138;
    *(void *)&v14[4] = v13;
    _os_signpost_emit_with_name_impl(&dword_1BAA78000, v11, OS_SIGNPOST_EVENT, v12, "AMCP_Allow_Event_Link_OoP_IO", "Use EventLink for OoP I/O: %s", v14, 0xCu);
  }
}

uint64_t AMCP::Feature_Flags::set_event_link_oop_io(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3 = (char)this;
  return AMCP::Feature_Flags::access_event_link_oop_io((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::collect_io_perfdata(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::access_collect_io_perfdata(0, a2);
}

uint64_t AMCP::Feature_Flags::access_collect_io_perfdata(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3 = &v4;
  BOOL v4 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::Feature_Flags::access_collect_io_perfdata(BOOL const*)::once, memory_order_acquire) != -1)
  {
    mach_port_t v6 = &v3;
    uint64_t v5 = &v6;
    std::__call_once(&AMCP::Feature_Flags::access_collect_io_perfdata(BOOL const*)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_collect_io_perfdata(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::access_collect_io_perfdata(BOOL const*)::s_collect_io_perfdata;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::access_collect_io_perfdata(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    int v2 = *v1;
    AMCP::Feature_Flags::access_collect_io_perfdata(BOOL const*)::s_collect_io_perfCFIndex data = v2;
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::access_collect_io_perfdata(BOOL const*)::s_collect_io_perfCFIndex data = a1;
    if (a1)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
      char v3 = **(NSObject ***)v14;
      if (*(void *)&v14[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
      }
      BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
      if (v4)
      {
        uint64_t v5 = pthread_self();
        mach_port_t v6 = pthread_mach_thread_np(v5);
        *(_DWORD *)unint64_t v14 = 67109634;
        *(_DWORD *)&v14[4] = v6;
        *(_WORD *)&v14[8] = 2080;
        *(void *)&v14[10] = "Configuration.cpp";
        __int16 v15 = 1024;
        int v16 = 371;
        int v7 = "%6u %32s:%-5d Collecting perfdata for OoP I/O.";
LABEL_12:
        _os_log_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_INFO, v7, v14, 0x18u);
        goto LABEL_13;
      }
      goto LABEL_13;
    }
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  char v3 = **(NSObject ***)v14;
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
  if (v4)
  {
    mach_port_t v8 = pthread_self();
    mach_port_t v9 = pthread_mach_thread_np(v8);
    *(_DWORD *)unint64_t v14 = 67109634;
    *(_DWORD *)&v14[4] = v9;
    *(_WORD *)&v14[8] = 2080;
    *(void *)&v14[10] = "Configuration.cpp";
    __int16 v15 = 1024;
    int v16 = 375;
    int v7 = "%6u %32s:%-5d Not collecting perfdata for OoP I/O.";
    goto LABEL_12;
  }
LABEL_13:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  uint64_t v10 = *(AMCP::Log::Scope_Registry **)&v14[8];
  uint64_t v11 = **(NSObject ***)v14;
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  AMCP::Log::Scope_Registry::get(v10);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  os_signpost_id_t v12 = os_signpost_id_generate(**(os_log_t **)v14);
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    if (AMCP::Feature_Flags::access_collect_io_perfdata(BOOL const*)::s_collect_io_perfdata) {
      int v13 = "yes";
    }
    else {
      int v13 = "no";
    }
    *(_DWORD *)unint64_t v14 = 136315138;
    *(void *)&v14[4] = v13;
    _os_signpost_emit_with_name_impl(&dword_1BAA78000, v11, OS_SIGNPOST_EVENT, v12, "AMCP_Allow_Collect_IO_perfdata", "Collect IO perfdata: %s", v14, 0xCu);
  }
}

uint64_t AMCP::Feature_Flags::set_collect_io_perfdata(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3 = (char)this;
  return AMCP::Feature_Flags::access_collect_io_perfdata((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::allow_adm_dsp_spatial(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::allow_adm_dsp_spatial(0, a2);
}

{
  AMCP::Feature_Flags **v3;
  AMCP::Feature_Flags *v4;
  AMCP::Feature_Flags ****v5;
  AMCP::Feature_Flags ***v6;

  char v3 = &v4;
  BOOL v4 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::Feature_Flags::allow_adm_dsp_spatial(BOOL const*)::once, memory_order_acquire) != -1)
  {
    mach_port_t v6 = &v3;
    uint64_t v5 = &v6;
    std::__call_once(&AMCP::Feature_Flags::allow_adm_dsp_spatial(BOOL const*)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::allow_adm_dsp_spatial(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::allow_adm_dsp_spatial(BOOL const*)::s_allow_adm_dsp_spatial;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::allow_adm_dsp_spatial(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    int v2 = *v1;
    AMCP::Feature_Flags::allow_adm_dsp_spatial(BOOL const*)::s_allow_adm_dsp_spatial = v2;
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::allow_adm_dsp_spatial(BOOL const*)::s_allow_adm_dsp_spatial = a1;
    if (a1)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
      char v3 = **(NSObject ***)v14;
      if (*(void *)&v14[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
      }
      BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
      if (v4)
      {
        uint64_t v5 = pthread_self();
        mach_port_t v6 = pthread_mach_thread_np(v5);
        *(_DWORD *)unint64_t v14 = 67109634;
        *(_DWORD *)&v14[4] = v6;
        *(_WORD *)&v14[8] = 2080;
        *(void *)&v14[10] = "Configuration.cpp";
        __int16 v15 = 1024;
        int v16 = 404;
        int v7 = "%6u %32s:%-5d Allow ADM DSP Spatial.";
LABEL_12:
        _os_log_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_INFO, v7, v14, 0x18u);
        goto LABEL_13;
      }
      goto LABEL_13;
    }
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  char v3 = **(NSObject ***)v14;
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
  if (v4)
  {
    mach_port_t v8 = pthread_self();
    mach_port_t v9 = pthread_mach_thread_np(v8);
    *(_DWORD *)unint64_t v14 = 67109634;
    *(_DWORD *)&v14[4] = v9;
    *(_WORD *)&v14[8] = 2080;
    *(void *)&v14[10] = "Configuration.cpp";
    __int16 v15 = 1024;
    int v16 = 408;
    int v7 = "%6u %32s:%-5d Do not allow ADM DSP Spatial.";
    goto LABEL_12;
  }
LABEL_13:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  uint64_t v10 = *(AMCP::Log::Scope_Registry **)&v14[8];
  uint64_t v11 = **(NSObject ***)v14;
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  AMCP::Log::Scope_Registry::get(v10);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  os_signpost_id_t v12 = os_signpost_id_generate(**(os_log_t **)v14);
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    if (AMCP::Feature_Flags::allow_adm_dsp_spatial(BOOL const*)::s_allow_adm_dsp_spatial) {
      int v13 = "yes";
    }
    else {
      int v13 = "no";
    }
    *(_DWORD *)unint64_t v14 = 136315138;
    *(void *)&v14[4] = v13;
    _os_signpost_emit_with_name_impl(&dword_1BAA78000, v11, OS_SIGNPOST_EVENT, v12, "AMCP_Allow_ADM_DSP_Spatial", "Allow ADM DSP Spatial: %s", v14, 0xCu);
  }
}

uint64_t AMCP::Feature_Flags::set_allow_adm_dsp_spatial(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3 = (char)this;
  return AMCP::Feature_Flags::allow_adm_dsp_spatial((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::allow_adm_dsp_offloads(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::allow_adm_dsp_offloads(0, a2);
}

{
  AMCP::Feature_Flags **v3;
  AMCP::Feature_Flags *v4;
  AMCP::Feature_Flags ****v5;
  AMCP::Feature_Flags ***v6;

  char v3 = &v4;
  BOOL v4 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::Feature_Flags::allow_adm_dsp_offloads(BOOL const*)::once, memory_order_acquire) != -1)
  {
    mach_port_t v6 = &v3;
    uint64_t v5 = &v6;
    std::__call_once(&AMCP::Feature_Flags::allow_adm_dsp_offloads(BOOL const*)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::allow_adm_dsp_offloads(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::allow_adm_dsp_offloads(BOOL const*)::s_allow_adm_dsp_offloads;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::allow_adm_dsp_offloads(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    int v2 = *v1;
    AMCP::Feature_Flags::allow_adm_dsp_offloads(BOOL const*)::s_allow_adm_dsp_offloads = v2;
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::allow_adm_dsp_offloads(BOOL const*)::s_allow_adm_dsp_offloads = a1;
    if (a1)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
      char v3 = **(NSObject ***)v14;
      if (*(void *)&v14[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
      }
      BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
      if (v4)
      {
        uint64_t v5 = pthread_self();
        mach_port_t v6 = pthread_mach_thread_np(v5);
        *(_DWORD *)unint64_t v14 = 67109634;
        *(_DWORD *)&v14[4] = v6;
        *(_WORD *)&v14[8] = 2080;
        *(void *)&v14[10] = "Configuration.cpp";
        __int16 v15 = 1024;
        int v16 = 437;
        int v7 = "%6u %32s:%-5d Allow ADM DSP Offloads.";
LABEL_12:
        _os_log_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_INFO, v7, v14, 0x18u);
        goto LABEL_13;
      }
      goto LABEL_13;
    }
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  char v3 = **(NSObject ***)v14;
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
  if (v4)
  {
    mach_port_t v8 = pthread_self();
    mach_port_t v9 = pthread_mach_thread_np(v8);
    *(_DWORD *)unint64_t v14 = 67109634;
    *(_DWORD *)&v14[4] = v9;
    *(_WORD *)&v14[8] = 2080;
    *(void *)&v14[10] = "Configuration.cpp";
    __int16 v15 = 1024;
    int v16 = 441;
    int v7 = "%6u %32s:%-5d Do not allow ADM DSP Offloads.";
    goto LABEL_12;
  }
LABEL_13:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  uint64_t v10 = *(AMCP::Log::Scope_Registry **)&v14[8];
  uint64_t v11 = **(NSObject ***)v14;
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  AMCP::Log::Scope_Registry::get(v10);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  os_signpost_id_t v12 = os_signpost_id_generate(**(os_log_t **)v14);
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    if (AMCP::Feature_Flags::allow_adm_dsp_offloads(BOOL const*)::s_allow_adm_dsp_offloads) {
      int v13 = "yes";
    }
    else {
      int v13 = "no";
    }
    *(_DWORD *)unint64_t v14 = 136315138;
    *(void *)&v14[4] = v13;
    _os_signpost_emit_with_name_impl(&dword_1BAA78000, v11, OS_SIGNPOST_EVENT, v12, "AMCP_Allow_ADM_DSP_Offloads", "Allow ADM DSP Offloads: %s", v14, 0xCu);
  }
}

uint64_t AMCP::Feature_Flags::set_allow_adm_dsp_offloads(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3 = (char)this;
  return AMCP::Feature_Flags::allow_adm_dsp_offloads((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(0, a2);
}

{
  AMCP::Feature_Flags **v3;
  AMCP::Feature_Flags *v4;
  AMCP::Feature_Flags ****v5;
  AMCP::Feature_Flags ***v6;

  char v3 = &v4;
  BOOL v4 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(BOOL const*)::once, memory_order_acquire) != -1)
  {
    mach_port_t v6 = &v3;
    uint64_t v5 = &v6;
    std::__call_once(&AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(BOOL const*)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(BOOL const*)::s_allow_adm_dsp_graph_parameters;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    int v2 = *v1;
    AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(BOOL const*)::s_allow_adm_dsp_graph_parameters = v2;
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(BOOL const*)::s_allow_adm_dsp_graph_parameters = a1;
    if (a1)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
      char v3 = **(NSObject ***)v14;
      if (*(void *)&v14[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
      }
      BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
      if (v4)
      {
        uint64_t v5 = pthread_self();
        mach_port_t v6 = pthread_mach_thread_np(v5);
        *(_DWORD *)unint64_t v14 = 67109634;
        *(_DWORD *)&v14[4] = v6;
        *(_WORD *)&v14[8] = 2080;
        *(void *)&v14[10] = "Configuration.cpp";
        __int16 v15 = 1024;
        int v16 = 470;
        int v7 = "%6u %32s:%-5d Allow ADM DSP Graph Parameters.";
LABEL_12:
        _os_log_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_INFO, v7, v14, 0x18u);
        goto LABEL_13;
      }
      goto LABEL_13;
    }
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  char v3 = **(NSObject ***)v14;
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
  if (v4)
  {
    mach_port_t v8 = pthread_self();
    mach_port_t v9 = pthread_mach_thread_np(v8);
    *(_DWORD *)unint64_t v14 = 67109634;
    *(_DWORD *)&v14[4] = v9;
    *(_WORD *)&v14[8] = 2080;
    *(void *)&v14[10] = "Configuration.cpp";
    __int16 v15 = 1024;
    int v16 = 474;
    int v7 = "%6u %32s:%-5d Do not allow ADM DSP Graph Parameters.";
    goto LABEL_12;
  }
LABEL_13:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  uint64_t v10 = *(AMCP::Log::Scope_Registry **)&v14[8];
  uint64_t v11 = **(NSObject ***)v14;
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  AMCP::Log::Scope_Registry::get(v10);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v14, "com.apple.coreaudio", "AMCP");
  os_signpost_id_t v12 = os_signpost_id_generate(**(os_log_t **)v14);
  if (*(void *)&v14[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v14[8]);
  }
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    if (AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(BOOL const*)::s_allow_adm_dsp_graph_parameters) {
      int v13 = "yes";
    }
    else {
      int v13 = "no";
    }
    *(_DWORD *)unint64_t v14 = 136315138;
    *(void *)&v14[4] = v13;
    _os_signpost_emit_with_name_impl(&dword_1BAA78000, v11, OS_SIGNPOST_EVENT, v12, "AMCP_Allow_ADM_DSP_Graph_Parameters", "Allow ADM DSP Graph Parameters: %s", v14, 0xCu);
  }
}

uint64_t AMCP::Feature_Flags::set_allow_adm_dsp_graph_parameters(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3 = (char)this;
  return AMCP::Feature_Flags::allow_adm_dsp_graph_parameters((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::force_mock_dsp_type(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::force_mock_dsp_type(0, a2);
}

{
  AMCP::Feature_Flags **v3;
  AMCP::Feature_Flags *v4;
  AMCP::Feature_Flags ****v5;
  AMCP::Feature_Flags ***v6;

  char v3 = &v4;
  BOOL v4 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::Feature_Flags::force_mock_dsp_type(BOOL const*)::once, memory_order_acquire) != -1)
  {
    mach_port_t v6 = &v3;
    uint64_t v5 = &v6;
    std::__call_once(&AMCP::Feature_Flags::force_mock_dsp_type(BOOL const*)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::force_mock_dsp_type(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::force_mock_dsp_type(BOOL const*)::s_force_mock_dsp_type;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::force_mock_dsp_type(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    int v2 = *v1;
    AMCP::Feature_Flags::force_mock_dsp_type(BOOL const*)::s_force_mock_dsp_type = v2;
    if (!v2) {
      goto LABEL_9;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::force_mock_dsp_type(BOOL const*)::s_force_mock_dsp_type = a1;
    if ((a1 & 1) == 0) {
      goto LABEL_9;
    }
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  char v3 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  a1 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
  if (a1)
  {
    BOOL v4 = pthread_self();
    mach_port_t v5 = pthread_mach_thread_np(v4);
    LODWORD(v9) = 67109634;
    HIDWORD(v9) = v5;
    *(_WORD *)uint64_t v10 = 2080;
    *(void *)&v10[2] = "Configuration.cpp";
    __int16 v11 = 1024;
    int v12 = 503;
    _os_log_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_INFO, "%6u %32s:%-5d Use MOCK DSP on Hosted DSP construction (testing only) - this will override ADM loading option.", (uint8_t *)&v9, 0x18u);
  }
LABEL_9:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  mach_port_t v6 = *(AMCP::Log::Scope_Registry **)v10;
  int v7 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  AMCP::Log::Scope_Registry::get(v6);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  os_signpost_id_t v8 = os_signpost_id_generate(*v9);
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    LODWORD(v9) = 67109120;
    HIDWORD(v9) = AMCP::Feature_Flags::force_mock_dsp_type(BOOL const*)::s_force_mock_dsp_type;
    _os_signpost_emit_with_name_impl(&dword_1BAA78000, v7, OS_SIGNPOST_EVENT, v8, "AMCP_Force_Mock_DSP_Type", "Force Using Mock DSP: %d", (uint8_t *)&v9, 8u);
  }
}

uint64_t AMCP::Feature_Flags::set_force_mock_dsp_type(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3 = (char)this;
  return AMCP::Feature_Flags::force_mock_dsp_type((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::allow_smart_routing_macos(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::allow_smart_routing_macos(0, a2);
}

{
  AMCP::Feature_Flags **v3;
  AMCP::Feature_Flags *v4;
  AMCP::Feature_Flags ****v5;
  AMCP::Feature_Flags ***v6;

  char v3 = &v4;
  BOOL v4 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::Feature_Flags::allow_smart_routing_macos(BOOL const*)::once, memory_order_acquire) != -1)
  {
    mach_port_t v6 = &v3;
    mach_port_t v5 = &v6;
    std::__call_once(&AMCP::Feature_Flags::allow_smart_routing_macos(BOOL const*)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::allow_smart_routing_macos(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::allow_smart_routing_macos(BOOL const*)::s_allow_smart_routing_macos;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::allow_smart_routing_macos(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    int v2 = *v1;
    AMCP::Feature_Flags::allow_smart_routing_macos(BOOL const*)::s_allow_smart_routing_macos = v2;
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::allow_smart_routing_macos(BOOL const*)::s_allow_smart_routing_macos = a1;
    if (a1)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
      char v3 = *v13;
      if (*(void *)v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
      }
      BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
      if (v4)
      {
        mach_port_t v5 = pthread_self();
        mach_port_t v6 = pthread_mach_thread_np(v5);
        LODWORD(v13) = 67109634;
        HIDWORD(v13) = v6;
        *(_WORD *)unint64_t v14 = 2080;
        *(void *)&v14[2] = "Configuration.cpp";
        __int16 v15 = 1024;
        int v16 = 532;
        int v7 = "%6u %32s:%-5d Allow Smart Routing on macOS";
LABEL_12:
        _os_log_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v13, 0x18u);
        goto LABEL_13;
      }
      goto LABEL_13;
    }
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
  char v3 = *v13;
  if (*(void *)v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
  }
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
  if (v4)
  {
    os_signpost_id_t v8 = pthread_self();
    mach_port_t v9 = pthread_mach_thread_np(v8);
    LODWORD(v13) = 67109634;
    HIDWORD(v13) = v9;
    *(_WORD *)unint64_t v14 = 2080;
    *(void *)&v14[2] = "Configuration.cpp";
    __int16 v15 = 1024;
    int v16 = 536;
    int v7 = "%6u %32s:%-5d Do not allow Smart Routing on macOS";
    goto LABEL_12;
  }
LABEL_13:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
  uint64_t v10 = *(AMCP::Log::Scope_Registry **)v14;
  __int16 v11 = *v13;
  if (*(void *)v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
  }
  AMCP::Log::Scope_Registry::get(v10);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
  os_signpost_id_t v12 = os_signpost_id_generate(*v13);
  if (*(void *)v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
  }
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    LODWORD(v13) = 67109120;
    HIDWORD(v13) = AMCP::Feature_Flags::allow_smart_routing_macos(BOOL const*)::s_allow_smart_routing_macos;
    _os_signpost_emit_with_name_impl(&dword_1BAA78000, v11, OS_SIGNPOST_EVENT, v12, "AMCP_Allow_Smart_Routing_macOS", "Allow Smart Routing: %d", (uint8_t *)&v13, 8u);
  }
}

uint64_t AMCP::Feature_Flags::set_allow_smart_routing_macos(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3 = (char)this;
  return AMCP::Feature_Flags::allow_smart_routing_macos((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::allow_client_io_timeout_macos(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::allow_client_io_timeout_macos(0, a2);
}

{
  AMCP::Feature_Flags **v3;
  AMCP::Feature_Flags *v4;
  AMCP::Feature_Flags ****v5;
  AMCP::Feature_Flags ***v6;

  char v3 = &v4;
  BOOL v4 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::Feature_Flags::allow_client_io_timeout_macos(BOOL const*)::once, memory_order_acquire) != -1)
  {
    mach_port_t v6 = &v3;
    mach_port_t v5 = &v6;
    std::__call_once(&AMCP::Feature_Flags::allow_client_io_timeout_macos(BOOL const*)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::allow_client_io_timeout_macos(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::allow_client_io_timeout_macos(BOOL const*)::s_allow_client_io_timeout_macos;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::allow_client_io_timeout_macos(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    int v2 = *v1;
    AMCP::Feature_Flags::allow_client_io_timeout_macos(BOOL const*)::s_allow_client_io_timeout_macos = v2;
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::allow_client_io_timeout_macos(BOOL const*)::s_allow_client_io_timeout_macos = a1;
    if (a1)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
      char v3 = *v13;
      if (*(void *)v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
      }
      BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
      if (v4)
      {
        mach_port_t v5 = pthread_self();
        mach_port_t v6 = pthread_mach_thread_np(v5);
        LODWORD(v13) = 67109634;
        HIDWORD(v13) = v6;
        *(_WORD *)unint64_t v14 = 2080;
        *(void *)&v14[2] = "Configuration.cpp";
        __int16 v15 = 1024;
        int v16 = 565;
        int v7 = "%6u %32s:%-5d Allow Client IO Timeout on macOS";
LABEL_12:
        _os_log_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v13, 0x18u);
        goto LABEL_13;
      }
      goto LABEL_13;
    }
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
  char v3 = *v13;
  if (*(void *)v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
  }
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
  if (v4)
  {
    os_signpost_id_t v8 = pthread_self();
    mach_port_t v9 = pthread_mach_thread_np(v8);
    LODWORD(v13) = 67109634;
    HIDWORD(v13) = v9;
    *(_WORD *)unint64_t v14 = 2080;
    *(void *)&v14[2] = "Configuration.cpp";
    __int16 v15 = 1024;
    int v16 = 569;
    int v7 = "%6u %32s:%-5d Do not allow Client IO Timeout on macOS";
    goto LABEL_12;
  }
LABEL_13:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
  uint64_t v10 = *(AMCP::Log::Scope_Registry **)v14;
  __int16 v11 = *v13;
  if (*(void *)v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
  }
  AMCP::Log::Scope_Registry::get(v10);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
  os_signpost_id_t v12 = os_signpost_id_generate(*v13);
  if (*(void *)v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
  }
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    LODWORD(v13) = 67109120;
    HIDWORD(v13) = AMCP::Feature_Flags::allow_client_io_timeout_macos(BOOL const*)::s_allow_client_io_timeout_macos;
    _os_signpost_emit_with_name_impl(&dword_1BAA78000, v11, OS_SIGNPOST_EVENT, v12, "AMCP_Allow_Client_IO_Timeout_macOS", "Allow Client IO Timeout: %d", (uint8_t *)&v13, 8u);
  }
}

uint64_t AMCP::Feature_Flags::set_allow_client_io_timeout_macos(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3 = (char)this;
  return AMCP::Feature_Flags::allow_client_io_timeout_macos((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::use_mcp_coloring_mixer(AMCP::Feature_Flags *this, const BOOL *a2)
{
  return AMCP::Feature_Flags::use_mcp_coloring_mixer(0, a2);
}

{
  AMCP::Feature_Flags **v3;
  AMCP::Feature_Flags *v4;
  AMCP::Feature_Flags ****v5;
  AMCP::Feature_Flags ***v6;

  char v3 = &v4;
  BOOL v4 = this;
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::Feature_Flags::use_mcp_coloring_mixer(BOOL const*)::once, memory_order_acquire) != -1)
  {
    mach_port_t v6 = &v3;
    mach_port_t v5 = &v6;
    std::__call_once(&AMCP::Feature_Flags::use_mcp_coloring_mixer(BOOL const*)::once, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::use_mcp_coloring_mixer(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::use_mcp_coloring_mixer(BOOL const*)::s_use_mcp_coloring_mixer;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::use_mcp_coloring_mixer(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    int v2 = *v1;
    AMCP::Feature_Flags::use_mcp_coloring_mixer(BOOL const*)::s_use_mcp_coloring_mixer = v2;
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::use_mcp_coloring_mixer(BOOL const*)::s_use_mcp_coloring_mixer = a1;
    if (a1)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
      char v3 = *v13;
      if (*(void *)v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
      }
      BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
      if (v4)
      {
        mach_port_t v5 = pthread_self();
        mach_port_t v6 = pthread_mach_thread_np(v5);
        LODWORD(v13) = 67109634;
        HIDWORD(v13) = v6;
        *(_WORD *)unint64_t v14 = 2080;
        *(void *)&v14[2] = "Configuration.cpp";
        __int16 v15 = 1024;
        int v16 = 598;
        int v7 = "%6u %32s:%-5d Use the MCP coloring mixer";
LABEL_12:
        _os_log_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v13, 0x18u);
        goto LABEL_13;
      }
      goto LABEL_13;
    }
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
  char v3 = *v13;
  if (*(void *)v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
  }
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
  if (v4)
  {
    os_signpost_id_t v8 = pthread_self();
    mach_port_t v9 = pthread_mach_thread_np(v8);
    LODWORD(v13) = 67109634;
    HIDWORD(v13) = v9;
    *(_WORD *)unint64_t v14 = 2080;
    *(void *)&v14[2] = "Configuration.cpp";
    __int16 v15 = 1024;
    int v16 = 602;
    int v7 = "%6u %32s:%-5d Use the legacy coloring mixer";
    goto LABEL_12;
  }
LABEL_13:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
  uint64_t v10 = *(AMCP::Log::Scope_Registry **)v14;
  __int16 v11 = *v13;
  if (*(void *)v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
  }
  AMCP::Log::Scope_Registry::get(v10);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
  os_signpost_id_t v12 = os_signpost_id_generate(*v13);
  if (*(void *)v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
  }
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    LODWORD(v13) = 67109120;
    HIDWORD(v13) = AMCP::Feature_Flags::use_mcp_coloring_mixer(BOOL const*)::s_use_mcp_coloring_mixer;
    _os_signpost_emit_with_name_impl(&dword_1BAA78000, v11, OS_SIGNPOST_EVENT, v12, "AMCP_Use_MCP_Coloring_Mixer", "Use the MCP coloring mixer: %d", (uint8_t *)&v13, 8u);
  }
}

uint64_t AMCP::Feature_Flags::set_use_mcp_coloring_mixer(AMCP::Feature_Flags *this, const BOOL *a2)
{
  char v3 = (char)this;
  return AMCP::Feature_Flags::use_mcp_coloring_mixer((AMCP::Feature_Flags *)&v3, a2);
}

uint64_t AMCP::Feature_Flags::allow_unified_device_engine_replacer(AMCP::Feature_Flags *this)
{
  int v2 = &v3;
  uint64_t v3 = 0;
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::Feature_Flags::allow_unified_device_engine_replacer(BOOL const*)::once, memory_order_acquire) != -1)
  {
    mach_port_t v5 = &v2;
    BOOL v4 = &v5;
    std::__call_once(&AMCP::Feature_Flags::allow_unified_device_engine_replacer(BOOL const*)::once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::allow_unified_device_engine_replacer(BOOL const*)::$_0 &&>>);
  }
  return AMCP::Feature_Flags::allow_unified_device_engine_replacer(BOOL const*)::s_allow_unified_device_engine_replacer;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Feature_Flags::allow_unified_device_engine_replacer(BOOL const*)::$_0 &&>>(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = ****(unsigned __int8 *****)a1;
  if (v1)
  {
    int v2 = *v1;
    AMCP::Feature_Flags::allow_unified_device_engine_replacer(BOOL const*)::s_allow_unified_device_engine_replacer = v2;
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    a1 = _os_feature_enabled_simple_impl();
    AMCP::Feature_Flags::allow_unified_device_engine_replacer(BOOL const*)::s_allow_unified_device_engine_replacer = a1;
    if (a1)
    {
LABEL_3:
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
      uint64_t v3 = *v13;
      if (*(void *)v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
      }
      BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
      if (v4)
      {
        mach_port_t v5 = pthread_self();
        mach_port_t v6 = pthread_mach_thread_np(v5);
        LODWORD(v13) = 67109634;
        HIDWORD(v13) = v6;
        *(_WORD *)unint64_t v14 = 2080;
        *(void *)&v14[2] = "Configuration.cpp";
        __int16 v15 = 1024;
        int v16 = 631;
        int v7 = "%6u %32s:%-5d Allow unified device engine replacer";
LABEL_12:
        _os_log_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v13, 0x18u);
        goto LABEL_13;
      }
      goto LABEL_13;
    }
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
  uint64_t v3 = *v13;
  if (*(void *)v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
  }
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_INFO);
  if (v4)
  {
    os_signpost_id_t v8 = pthread_self();
    mach_port_t v9 = pthread_mach_thread_np(v8);
    LODWORD(v13) = 67109634;
    HIDWORD(v13) = v9;
    *(_WORD *)unint64_t v14 = 2080;
    *(void *)&v14[2] = "Configuration.cpp";
    __int16 v15 = 1024;
    int v16 = 635;
    int v7 = "%6u %32s:%-5d Disallow unified device engine replacer";
    goto LABEL_12;
  }
LABEL_13:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
  uint64_t v10 = *(AMCP::Log::Scope_Registry **)v14;
  __int16 v11 = *v13;
  if (*(void *)v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
  }
  AMCP::Log::Scope_Registry::get(v10);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
  os_signpost_id_t v12 = os_signpost_id_generate(*v13);
  if (*(void *)v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
  }
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    LODWORD(v13) = 67109120;
    HIDWORD(v13) = AMCP::Feature_Flags::allow_unified_device_engine_replacer(BOOL const*)::s_allow_unified_device_engine_replacer;
    _os_signpost_emit_with_name_impl(&dword_1BAA78000, v11, OS_SIGNPOST_EVENT, v12, "Unified Device Engine Replacer", "Allow unified device engine replacer: %d", (uint8_t *)&v13, 8u);
  }
}

void ADS::Control::SetPropertyData(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, unint64_t *a10, unsigned __int8 a11)
{
}

void ADS::Control::GetPropertyData(ADS::Control *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6, unsigned int a7, unsigned int *a8, char *a9)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a4->mSelector == 1667591277)
  {
    if (a7 > 3)
    {
      *(_DWORD *)a9 = 0;
      goto LABEL_7;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      uint64_t v13 = "ADS_Control.cpp";
      __int16 v14 = 1024;
      int v15 = 92;
      mach_port_t v9 = MEMORY[0x1E4F14500];
      uint64_t v10 = "%25s:%-5d  ADS::Control::GetPropertyData: not enough space for the return value of kAudioControlPropertyElem"
            "ent for the volume control";
      goto LABEL_15;
    }
LABEL_16:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 561211770;
  }
  if (a4->mSelector == 1668506480)
  {
    if (a7 > 3)
    {
      *(_DWORD *)a9 = *((_DWORD *)this + 13);
LABEL_7:
      *a8 = 4;
      return;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      uint64_t v13 = "ADS_Control.cpp";
      __int16 v14 = 1024;
      int v15 = 85;
      mach_port_t v9 = MEMORY[0x1E4F14500];
      uint64_t v10 = "%25s:%-5d  ADS::Control::GetPropertyData: not enough space for the return value of kAudioControlPropertyScop"
            "e for the volume control";
LABEL_15:
      _os_log_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, v10, (uint8_t *)&v12, 0x12u);
      goto LABEL_16;
    }
    goto LABEL_16;
  }

  ADS::BaseObject::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t ADS::Control::GetPropertyDataSize(ADS::Control *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6)
{
  if (a4->mSelector == 1667591277 || a4->mSelector == 1668506480) {
    return 4;
  }
  else {
    return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
  }
}

uint64_t ADS::Control::IsPropertySettable(ADS::Control *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  if (a4->mSelector == 1667591277 || a4->mSelector == 1668506480) {
    return 0;
  }
  else {
    return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
  }
}

BOOL ADS::Control::HasProperty(ADS::Control *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  return a4->mSelector == 1667591277 || a4->mSelector == 1668506480 || ADS::BaseObject::HasProperty(this, a2, a3, a4);
}

void ADS::Control::~Control(ADS::Control *this)
{
  *(void *)this = &unk_1F147E368;
  CADeprecated::CAMutex::~CAMutex((ADS::Control *)((char *)this + 56));
  ADS::BaseObject::~BaseObject(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F147E368;
  CADeprecated::CAMutex::~CAMutex((ADS::Control *)((char *)this + 56));

  ADS::BaseObject::~BaseObject(this);
}

ADS::Control *ADS::Control::Control(ADS::Control *this, int a2, int a3, int a4, int a5, int a6)
{
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a5;
  *((_DWORD *)this + 4) = a6;
  *((_DWORD *)this + 5) = a3;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 48) = 0;
  *(void *)this = &unk_1F147E368;
  *((_DWORD *)this + 13) = a4;
  CADeprecated::CAMutex::CAMutex((ADS::Control *)((char *)this + 56), "Control State");
  return this;
}

void sub_1BACB3890(_Unwind_Exception *a1)
{
  ADS::BaseObject::~BaseObject(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Fixed_Buffer::get_direct_write_ranges@<X0>(AMCP::DAL::Fixed_Buffer *this@<X0>, const AMCP::DAL::DAL_Time_Range *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  mach_port_t v6 = (AMCP::DAL::Fixed_Buffer *)((char *)this + 8);
  BOOL v7 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses((uint64_t)this + 8, (uint64_t)a2);
  if (!v7)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v22 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v23 = pthread_self();
      mach_port_t v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v24;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Fixed_Buffer.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 218;
      *(_WORD *)&buf[24] = 2080;
      *(void *)&buf[26] = "not (m_time_range.encompasses(range))";
      _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v39);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v31);
    std::logic_error::logic_error(&v32, &v31);
    v32.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v33, &v32);
    unint64_t v35 = 0;
    v36 = 0;
    uint64_t v37 = 0;
    int v38 = -1;
    v33.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    mach_port_t v34 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v33);
    *(void *)&buf[32] = "virtual rt_safe_vector<std::pair<Buffer_Time_Translator::Translation_Range, Container>> AMCP::"
                          "DAL::Fixed_Buffer::get_direct_write_ranges(const DAL_Time_Range &) const";
    *(void *)&long long v41 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    DWORD2(v41) = 218;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v26);
    long long v29 = v26;
    uint64_t v30 = v27;
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    v28 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  double sample_time = AMCP::DAL::DAL_Time::get_sample_time(a2);
  double v9 = AMCP::DAL::DAL_Time::get_sample_time((const AMCP::DAL::DAL_Time_Range *)((char *)a2 + 40));
  double v10 = AMCP::DAL::DAL_Time::get_sample_time(v6);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  *(double *)buf = sample_time - v10;
  *(double *)&uint8_t buf[8] = v9 - v10;
  *(_OWORD *)&buf[16] = *(_OWORD *)a2;
  uint64_t v11 = *((void *)a2 + 3);
  *(void *)&buf[32] = *((void *)a2 + 2);
  *(void *)&long long v41 = v11;
  uint64_t v12 = *((void *)a2 + 4);
  *((void *)&v41 + 1) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  long long v42 = *(_OWORD *)((char *)a2 + 40);
  uint64_t v14 = *((void *)a2 + 8);
  uint64_t v13 = *((void *)a2 + 9);
  uint64_t v43 = *((void *)a2 + 7);
  *(void *)&long long v44 = v14;
  *((void *)&v44 + 1) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  long long v15 = *(_OWORD *)((char *)this + 88);
  long long v25 = v15;
  if (*((void *)&v15 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v36 = a3 + 2;
  uint64_t v16 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>((caulk::rt_safe_memory_resource *)1);
  v33.__vftable = (std::logic_error_vtbl *)v16;
  v33.__imp_.__imp_ = (const char *)v16;
  unint64_t v35 = (char *)v16 + 112 * v17;
  *(_OWORD *)uint64_t v16 = *(_OWORD *)buf;
  long long v18 = *(_OWORD *)&buf[16];
  *((void *)v16 + 4) = *(void *)&buf[32];
  *((_OWORD *)v16 + 1) = v18;
  *(_OWORD *)((char *)v16 + 40) = v41;
  long long v19 = v42;
  *((void *)v16 + 9) = v43;
  *(_OWORD *)((char *)v16 + 56) = v19;
  *((_OWORD *)v16 + 5) = v44;
  *((_OWORD *)v16 + 6) = v25;
  mach_port_t v34 = (char *)v16 + 112;
  std::vector<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::__swap_out_circular_buffer(a3, &v33);
  uint64_t v20 = a3[1];
  uint64_t result = std::__split_buffer<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>> &>::~__split_buffer((uint64_t)&v33);
  a3[1] = v20;
  return result;
}

void sub_1BACB3C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37)
{
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  AMCP::DAL::Buffer_Time_Translator::Translation_Range::~Translation_Range((AMCP::DAL::Buffer_Time_Translator::Translation_Range *)&a37);
  std::vector<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&a37);
  _Unwind_Resume(a1);
}

BOOL caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses(uint64_t a1, uint64_t a2)
{
  BOOL v4 = (AMCP::DAL::DAL_Time *)(a1 + 40);
  BOOL result = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a1, (AMCP::DAL::DAL_Time *)(a1 + 40));
  if (result)
  {
    if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a2, (AMCP::DAL::DAL_Time *)(a2 + 40))) {
      return !AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a2, (AMCP::DAL::DAL_Time *)a1)
    }
          && !AMCP::DAL::DAL_Time::operator<(v4, (AMCP::DAL::DAL_Time *)(a2 + 40));
    else {
      return 1;
    }
  }
  return result;
}

void AMCP::DAL::Buffer_Time_Translator::Translation_Range::~Translation_Range(AMCP::DAL::Buffer_Time_Translator::Translation_Range *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

caulk::rt_safe_memory_resource *std::vector<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::__destroy_vector::operator()[abi:ne180100](caulk::rt_safe_memory_resource *result)
{
  uint64_t v1 = *(caulk::rt_safe_memory_resource ***)result;
  int v2 = **(caulk::rt_safe_memory_resource ***)result;
  if (v2)
  {
    uint64_t v3 = (caulk::rt_safe_memory_resource ***)result;
    BOOL v4 = v1[1];
    mach_port_t v5 = **(caulk::rt_safe_memory_resource ***)result;
    mach_port_t v6 = v1;
    if (v4 != v2)
    {
      do
      {
        BOOL v4 = (caulk::rt_safe_memory_resource *)((char *)v4 - 112);
        std::__destroy_at[abi:ne180100]<AMCP::DAL::Writable_Range::Direct_Write_Range,0>(v4);
      }
      while (v4 != v2);
      mach_port_t v6 = *v3;
      mach_port_t v5 = **v3;
    }
    v1[1] = v2;
    unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((v6[2] - v5) >> 4);
    return std::allocator_traits<caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::deallocate[abi:ne180100](v5, v7);
  }
  return result;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  if (a2 < 0x24924924924924ALL)
  {
    int v2 = result;
    BOOL result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
    if (*MEMORY[0x1E4FB7E88]) {
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
    }
  }
  __break(1u);
  return result;
}

caulk::rt_safe_memory_resource *std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>(caulk::rt_safe_memory_resource *result)
{
  if ((unint64_t)result < 0x24924924924924ALL)
  {
    BOOL result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
    if (*MEMORY[0x1E4FB7E88]) {
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_allocate(result);
    }
  }
  __break(1u);
  return result;
}

uint64_t *std::vector<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(_OWORD *)(v6 - 112) = *(_OWORD *)(v2 + v5 - 112);
      long long v8 = *(_OWORD *)(v2 + v5 - 96);
      *(void *)(v6 - 80) = *(void *)(v2 + v5 - 80);
      *(_OWORD *)(v6 - 96) = v8;
      *(_OWORD *)(v6 - 72) = *(_OWORD *)(v2 + v5 - 72);
      *(void *)(v7 - 72) = 0;
      *(void *)(v7 - 64) = 0;
      long long v9 = *(_OWORD *)(v2 + v5 - 56);
      *(void *)(v6 - 40) = *(void *)(v2 + v5 - 40);
      *(_OWORD *)(v6 - 56) = v9;
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v6 - 16) = *(_OWORD *)(v2 + v5 - 16);
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      v5 -= 112;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v10 = *result;
  *BOOL result = v4;
  a2[1] = v10;
  uint64_t v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>,caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 112;
    std::__destroy_at[abi:ne180100]<AMCP::DAL::Writable_Range::Direct_Write_Range,0>((void *)(i - 112));
  }
  if (*(void *)a1) {
    std::allocator_traits<caulk::rt_allocator<std::pair<AMCP::DAL::Buffer_Time_Translator::Translation_Range,AMCP::DAL::Container>>>::deallocate[abi:ne180100](*(caulk::rt_safe_memory_resource **)a1, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 4));
  }
  return a1;
}

void AMCP::DAL::Fixed_Buffer::create_writable_range(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)buf = *(_OWORD *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)&buf[16] = *(void *)(a1 + 24);
  *(void *)&long long v43 = v6;
  uint64_t v7 = *(void *)(a1 + 40);
  *((void *)&v43 + 1) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  long long v44 = *(_OWORD *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v45 = *(void *)(a1 + 64);
  uint64_t v46 = v8;
  long long v9 = *(std::__shared_weak_count **)(a1 + 80);
  v47 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v10 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses((uint64_t)buf, a2);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  uint64_t v11 = (AMCP::Log::Scope_Registry *)*((void *)&v43 + 1);
  if (*((void *)&v43 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v43 + 1));
  }
  if (!v10)
  {
    AMCP::Log::Scope_Registry::get(v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v17 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      long long v18 = pthread_self();
      mach_port_t v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Fixed_Buffer.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 164;
      LOWORD(v43) = 2080;
      *(void *)((char *)&v43 + 2) = "not (get_time_range().encompasses(range))";
      _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v33);
    std::logic_error::logic_error(&v34, &v33);
    v34.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v35, &v34);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    int v40 = -1;
    v35.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    v36 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *((void *)&v43 + 1) = "virtual Writable_Range AMCP::DAL::Fixed_Buffer::create_writable_range(DAL_Time_Range) const";
    *(void *)&long long v44 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    DWORD2(v44) = 164;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v28);
    long long v31 = v28;
    uint64_t v32 = v29;
    long long v28 = 0uLL;
    uint64_t v29 = 0;
    uint64_t v30 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  long long v20 = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v21 = *(void *)(a2 + 16);
  uint64_t v22 = v12;
  uint64_t v13 = *(std::__shared_weak_count **)(a2 + 32);
  v23 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v24 = *(_OWORD *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 64);
  uint64_t v25 = *(void *)(a2 + 56);
  uint64_t v26 = v14;
  long long v15 = *(std::__shared_weak_count **)(a2 + 72);
  uint64_t v27 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::DAL::Writable_Range::Writable_Range(a3, &v20, a1);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  uint64_t v16 = v23;
  if (v23)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
}

void sub_1BACB4408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34)
{
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)(v34 - 144));
  _Unwind_Resume(a1);
}

void AMCP::DAL::Fixed_Buffer::create_writable_range(AMCP::DAL::Fixed_Buffer *this@<X0>, uint64_t a2@<X8>)
{
  long long v7 = *(_OWORD *)((char *)this + 8);
  uint64_t v2 = *((void *)this + 4);
  uint64_t v8 = *((void *)this + 3);
  uint64_t v9 = v2;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  BOOL v10 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v11 = *((_OWORD *)this + 3);
  uint64_t v4 = *((void *)this + 9);
  uint64_t v12 = *((void *)this + 8);
  uint64_t v13 = v4;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 10);
  uint64_t v14 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::DAL::Fixed_Buffer::create_writable_range((uint64_t)this, (uint64_t)&v7, a2);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v6 = v10;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1BACB4554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void AMCP::DAL::Fixed_Buffer::create_readable_range(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  long long v76 = *(_OWORD *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v77 = *(void *)(a1 + 24);
  uint64_t v78 = v6;
  long long v7 = *(std::__shared_weak_count **)(a1 + 40);
  v79 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v80 = *(_OWORD *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v81 = *(void *)(a1 + 64);
  uint64_t v82 = v8;
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 80);
  v83 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v10 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses((uint64_t)&v76, (uint64_t)a2);
  if (v83) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v83);
  }
  long long v11 = (AMCP::Log::Scope_Registry *)v79;
  if (v79) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v79);
  }
  if (!v10)
  {
    AMCP::Log::Scope_Registry::get(v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v76, "com.apple.coreaudio", "AMCP");
    uint64_t v17 = *(NSObject **)v76;
    if (*((void *)&v76 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v76 + 1));
    }
    long long v18 = (long long *)(a1 + 8);
    mach_port_t v19 = (long long *)(a1 + 48);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      long long v20 = pthread_self();
      mach_port_t v21 = pthread_mach_thread_np(v20);
      long long v76 = *v18;
      uint64_t v23 = *(void *)(a1 + 32);
      uint64_t v22 = *(std::__shared_weak_count **)(a1 + 40);
      uint64_t v77 = *(void *)(a1 + 24);
      uint64_t v78 = v23;
      v79 = v22;
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v80 = *v19;
      uint64_t v25 = *(void *)(a1 + 72);
      long long v24 = *(std::__shared_weak_count **)(a1 + 80);
      uint64_t v81 = *(void *)(a1 + 64);
      uint64_t v82 = v25;
      v83 = v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v76);
      long long v68 = *v18;
      uint64_t v28 = *(void *)(a1 + 32);
      uint64_t v27 = *(void *)(a1 + 40);
      uint64_t v69 = *(void *)(a1 + 24);
      uint64_t v70 = v28;
      uint64_t v71 = v27;
      if (v27) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
      }
      long long v72 = *v19;
      uint64_t v30 = *(void *)(a1 + 72);
      uint64_t v29 = *(void *)(a1 + 80);
      uint64_t v73 = *(void *)(a1 + 64);
      uint64_t v74 = v30;
      uint64_t v75 = v29;
      if (v29) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
      }
      double v31 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v72);
      double v32 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a2);
      double v33 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a2 + 5));
      *(_DWORD *)buf = 67110914;
      mach_port_t v85 = v21;
      __int16 v86 = 2080;
      v87 = "Fixed_Buffer.cpp";
      __int16 v88 = 1024;
      int v89 = 146;
      __int16 v90 = 2080;
      *(void *)v91 = "not (get_time_range().encompasses(range))";
      *(_WORD *)&v91[8] = 2048;
      *(void *)&v91[10] = vcvtmd_s64_f64(sample_time);
      *(_WORD *)&v91[18] = 2048;
      *(void *)&v91[20] = vcvtmd_s64_f64(v31);
      __int16 v92 = 2048;
      unint64_t v93 = vcvtmd_s64_f64(v32);
      __int16 v94 = 2048;
      unint64_t v95 = vcvtmd_s64_f64(v33);
      _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s create_readable_range: [%lld  %lld]  range:[%lld  %lld]", buf, 0x4Au);
      AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v68);
      AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v76);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v67);
    __cxa_allocate_exception(0x40uLL);
    long long v76 = *v18;
    uint64_t v35 = *(void *)(a1 + 32);
    uint64_t v34 = *(std::__shared_weak_count **)(a1 + 40);
    uint64_t v77 = *(void *)(a1 + 24);
    uint64_t v78 = v35;
    v79 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v80 = *v19;
    uint64_t v37 = *(void *)(a1 + 72);
    v36 = *(std::__shared_weak_count **)(a1 + 80);
    uint64_t v81 = *(void *)(a1 + 64);
    uint64_t v82 = v37;
    v83 = v36;
    if (v36) {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    double v38 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v76);
    long long v68 = *v18;
    uint64_t v40 = *(void *)(a1 + 32);
    uint64_t v39 = *(void *)(a1 + 40);
    uint64_t v69 = *(void *)(a1 + 24);
    uint64_t v70 = v40;
    uint64_t v71 = v39;
    if (v39) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
    }
    long long v72 = *v19;
    uint64_t v42 = *(void *)(a1 + 72);
    uint64_t v41 = *(void *)(a1 + 80);
    uint64_t v73 = *(void *)(a1 + 64);
    uint64_t v74 = v42;
    uint64_t v75 = v41;
    if (v41) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
    }
    double v43 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v72);
    double v44 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a2);
    double v45 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a2 + 5));
    caulk::make_string((caulk *)"create_readable_range: [%lld  %lld]  range:[%lld  %lld]", (uint64_t)&v59, vcvtmd_s64_f64(v38), vcvtmd_s64_f64(v43), vcvtmd_s64_f64(v44), vcvtmd_s64_f64(v45));
    std::logic_error::logic_error(&v60, &v59);
    v60.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v61, &v60);
    uint64_t v63 = 0;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    int v66 = -1;
    v61.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    v62 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v61);
    *(void *)&v91[6] = "virtual Readable_Range AMCP::DAL::Fixed_Buffer::create_readable_range(DAL_Time_Range) const";
    *(void *)&v91[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    *(_DWORD *)&v91[22] = 146;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v54);
    long long v57 = v54;
    uint64_t v58 = v55;
    long long v54 = 0uLL;
    uint64_t v55 = 0;
    v56 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  long long v46 = *(_OWORD *)a2;
  uint64_t v12 = a2[3];
  uint64_t v47 = a2[2];
  uint64_t v48 = v12;
  uint64_t v13 = (std::__shared_weak_count *)a2[4];
  v49 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v50 = *(_OWORD *)(a2 + 5);
  uint64_t v14 = a2[8];
  uint64_t v51 = a2[7];
  uint64_t v52 = v14;
  long long v15 = (std::__shared_weak_count *)a2[9];
  v53 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::DAL::Writable_Range::Writable_Range(a3, &v46, a1);
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  uint64_t v16 = v49;
  if (v49)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
}

void sub_1BACB4B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

void AMCP::DAL::Fixed_Buffer::create_readable_range(AMCP::DAL::Fixed_Buffer *this@<X0>, uint64_t a2@<X8>)
{
  long long v7 = *(_OWORD *)((char *)this + 8);
  uint64_t v2 = *((void *)this + 4);
  uint64_t v8 = *((void *)this + 3);
  uint64_t v9 = v2;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  BOOL v10 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v11 = *((_OWORD *)this + 3);
  uint64_t v4 = *((void *)this + 9);
  uint64_t v12 = *((void *)this + 8);
  uint64_t v13 = v4;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 10);
  uint64_t v14 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::DAL::Fixed_Buffer::create_readable_range((uint64_t)this, &v7, a2);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v6 = v10;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1BACB4CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void AMCP::DAL::Fixed_Buffer::advance_to_time(AMCP::DAL::Fixed_Buffer *this, std::__shared_weak_count **a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (AMCP::DAL::Fixed_Buffer *)((char *)this + 8);
  BOOL v5 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a2, (AMCP::DAL::Fixed_Buffer *)((char *)this + 8));
  if (v5)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v30 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      double v31 = pthread_self();
      mach_port_t v32 = pthread_mach_thread_np(v31);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v32;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Fixed_Buffer.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 97;
      LOWORD(v50) = 2080;
      *(void *)((char *)&v50 + 2) = "not (time >= m_time_range.start())";
      _os_log_error_impl(&dword_1BAA78000, v30, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v48);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v33);
    std::logic_error::logic_error(&v42, &v33);
    v42.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v43, &v42);
    long long v45 = 0uLL;
    uint64_t v46 = 0;
    int v47 = -1;
    v43.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    double v44 = (std::__shared_weak_count *)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v43);
    *((void *)&v50 + 1) = "virtual void AMCP::DAL::Fixed_Buffer::advance_to_time(const DAL_Time &)";
    *(void *)&long long v51 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    DWORD2(v51) = 97;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v40);
    uint64_t v35 = &unk_1F148AA90;
    long long v36 = v40;
    uint64_t v37 = v41;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  std::logic_error v43 = *(std::logic_error *)a2;
  uint64_t v6 = a2[3];
  double v44 = a2[2];
  *(void *)&long long v45 = v6;
  long long v7 = a2[4];
  *((void *)&v45 + 1) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::DAL::DAL_Buffer::get_timebase((AMCP::DAL::DAL_Buffer *)buf, (uint64_t)this);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v8 = (*(void *)buf | (unint64_t)v6) == 0;
  if (!*(void *)buf || !v6)
  {
LABEL_29:
    if (!v7) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v9 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)buf + 16))(*(void *)buf);
  uint64_t v10 = ((uint64_t (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  uint64_t v11 = v9[23];
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = v9[23];
  }
  else {
    uint64_t v12 = *((void *)v9 + 1);
  }
  uint64_t v13 = *(unsigned __int8 *)(v10 + 23);
  int v14 = (char)v13;
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *(void *)(v10 + 8);
  }
  if (v12 != v13)
  {
    BOOL v8 = 0;
    if (!v7) {
      goto LABEL_31;
    }
LABEL_30:
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    goto LABEL_31;
  }
  if (v14 >= 0) {
    long long v15 = (unsigned __int8 *)v10;
  }
  else {
    long long v15 = *(unsigned __int8 **)v10;
  }
  if ((v11 & 0x80) != 0)
  {
    BOOL v8 = memcmp(*(const void **)v9, v15, *((void *)v9 + 1)) == 0;
    goto LABEL_29;
  }
  if (v9[23])
  {
    uint64_t v16 = v11 - 1;
    do
    {
      int v18 = *v9++;
      int v17 = v18;
      int v20 = *v15++;
      int v19 = v20;
      BOOL v22 = v16-- != 0;
      BOOL v8 = v17 == v19;
    }
    while (v17 == v19 && v22);
    goto LABEL_29;
  }
  BOOL v8 = 1;
  if (v7) {
    goto LABEL_30;
  }
LABEL_31:
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (!v8)
  {
    uint64_t host_time = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)&v43);
    AMCP::DAL::DAL_Buffer::get_timebase((AMCP::DAL::DAL_Buffer *)&v39, (uint64_t)this);
    long long v24 = v39;
    long long v39 = 0uLL;
    LODWORD(v43.__vftable) = 1;
    v43.__imp_.__imp_ = 0;
    double v44 = (std::__shared_weak_count *)host_time;
    uint64_t v25 = (std::__shared_weak_count *)*((void *)&v45 + 1);
    long long v45 = v24;
    long long v7 = (std::__shared_weak_count *)*((void *)&v24 + 1);
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
  }
  AMCP::DAL::DAL_Time::operator-((uint64_t)&v33, (AMCP::DAL::Fixed_Buffer *)((char *)this + 48), v4);
  boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)&v35, (uint64_t)&v43, (uint64_t)&v33);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)buf, (const AMCP::DAL::DAL_Time *)&v43, (const AMCP::DAL::DAL_Time *)&v35);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)buf;
  *((void *)v4 + 2) = *(void *)&buf[16];
  long long v26 = v50;
  long long v50 = 0uLL;
  uint64_t v27 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v26;
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  *((_OWORD *)this + 3) = v51;
  *((void *)this + 8) = v52;
  long long v28 = v53;
  long long v53 = 0uLL;
  uint64_t v29 = (std::__shared_weak_count *)*((void *)this + 10);
  *(_OWORD *)((char *)this + 72) = v28;
  if (v29)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    if (*((void *)&v53 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v53 + 1));
    }
  }
  if (*((void *)&v50 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v50 + 1));
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1BACB51D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::Fixed_Buffer::increment_time_range(uint64_t a1, long long *a2)
{
  long long v26 = *a2;
  uint64_t v3 = *((void *)a2 + 3);
  uint64_t v27 = *((void *)a2 + 2);
  *(void *)&long long v28 = v3;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 4);
  *((void *)&v28 + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::DAL::DAL_Buffer::get_timebase((AMCP::DAL::DAL_Buffer *)&v24, a1);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v5 = (v24 | v3) == 0;
  if (!v24 || !v3)
  {
LABEL_28:
    if (!v4) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  uint64_t v6 = (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)v24 + 16))();
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
  uint64_t v8 = v6[23];
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = v6[23];
  }
  else {
    uint64_t v9 = *((void *)v6 + 1);
  }
  uint64_t v10 = *(unsigned __int8 *)(v7 + 23);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(v7 + 8);
  }
  if (v9 != v10)
  {
    BOOL v5 = 0;
    if (!v4) {
      goto LABEL_30;
    }
LABEL_29:
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    goto LABEL_30;
  }
  if (v11 >= 0) {
    uint64_t v12 = (unsigned __int8 *)v7;
  }
  else {
    uint64_t v12 = *(unsigned __int8 **)v7;
  }
  if ((v8 & 0x80) != 0)
  {
    BOOL v5 = memcmp(*(const void **)v6, v12, *((void *)v6 + 1)) == 0;
    goto LABEL_28;
  }
  if (v6[23])
  {
    uint64_t v13 = v8 - 1;
    do
    {
      int v15 = *v6++;
      int v14 = v15;
      int v17 = *v12++;
      int v16 = v17;
      BOOL v19 = v13-- != 0;
      BOOL v5 = v14 == v16;
    }
    while (v14 == v16 && v19);
    goto LABEL_28;
  }
  BOOL v5 = 1;
  if (v4) {
    goto LABEL_29;
  }
LABEL_30:
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (!v5)
  {
    if ((v26 & 1) == 0) {
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v26);
    }
    uint64_t v20 = v27;
    AMCP::DAL::DAL_Buffer::get_timebase((AMCP::DAL::DAL_Buffer *)&v23, a1);
    LODWORD(v26) = 1;
    *((void *)&v26 + 1) = 0;
    uint64_t v27 = v20;
    mach_port_t v21 = (std::__shared_weak_count *)*((void *)&v28 + 1);
    long long v28 = v23;
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
  }
  AMCP::DAL::DAL_Time::operator+=((AMCP::DAL::DAL_Time *)(a1 + 8), (uint64_t)&v26);
  AMCP::DAL::DAL_Time::operator+=((AMCP::DAL::DAL_Time *)(a1 + 48), (uint64_t)&v26);
  BOOL v22 = (std::__shared_weak_count *)*((void *)&v28 + 1);
  if (*((void *)&v28 + 1))
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
}

void sub_1BACB54E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::Fixed_Buffer::set_anchor_time_and_nominal_buffer_size(AMCP::DAL::Fixed_Buffer *a1, uint64_t a2, const AMCP::DAL::DAL_Time_Range *a3)
{
}

void AMCP::DAL::Fixed_Buffer::set_range(AMCP::DAL::Fixed_Buffer *this, const AMCP::DAL::DAL_Time_Range *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (const AMCP::DAL::DAL_Time_Range *)((char *)a2 + 40);
  AMCP::DAL::DAL_Time::operator-((uint64_t)buf, (const AMCP::DAL::DAL_Time_Range *)((char *)a2 + 40), a2);
  if ((buf[0] & 2) == 0) {
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)buf);
  }
  double v5 = round(*(double *)&buf[8]);
  uint64_t v6 = (AMCP::Log::Scope_Registry *)*((void *)&v43 + 1);
  if (*((void *)&v43 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v43 + 1));
  }
  if (v5 < 0.0)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    BOOL v22 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      long long v23 = pthread_self();
      mach_port_t v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v24;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Fixed_Buffer.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 180;
      LOWORD(v43) = 2080;
      *(void *)((char *)&v43 + 2) = "not (range.length().get_sample_delta() >= 0_S)";
      _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v33);
    std::logic_error::logic_error(&v34, &v33);
    v34.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v35, &v34);
    uint64_t v37 = 0;
    double v38 = 0;
    uint64_t v39 = 0;
    int v40 = -1;
    v35.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v36 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *((void *)&v43 + 1) = "void AMCP::DAL::Fixed_Buffer::set_range(const DAL_Time_Range &)";
    *(void *)&long long v44 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    DWORD2(v44) = 180;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v31);
    long long v28 = &unk_1F148AA90;
    long long v29 = v31;
    *(void *)&long long v30 = v32;
    long long v31 = 0uLL;
    uint64_t v32 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  v7.n128_f64[0] = AMCP::DAL::DAL_Time::operator-((uint64_t)buf, v4, a2);
  if ((buf[0] & 2) == 0) {
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)buf);
  }
  double v8 = *(double *)&buf[8];
  uint64_t v9 = *((void *)this + 11);
  if (v9) {
    (*(void (**)(uint64_t, __n128))(*(void *)v9 + 48))(v9, v7);
  }
  else {
    double v10 = 0.0;
  }
  double v11 = round(v10);
  double v12 = round(v8);
  uint64_t v13 = (AMCP::Log::Scope_Registry *)*((void *)&v43 + 1);
  if (*((void *)&v43 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v43 + 1));
  }
  if (v11 < v12)
  {
    AMCP::Log::Scope_Registry::get(v13);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v25 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      long long v26 = pthread_self();
      mach_port_t v27 = pthread_mach_thread_np(v26);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v27;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Fixed_Buffer.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 181;
      LOWORD(v43) = 2080;
      *(void *)((char *)&v43 + 2) = "not (range.length().get_sample_delta() <= m_container.get_length_in_frames())";
      _os_log_error_impl(&dword_1BAA78000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v33);
    std::logic_error::logic_error(&v34, &v33);
    v34.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v35, &v34);
    uint64_t v37 = 0;
    double v38 = 0;
    uint64_t v39 = 0;
    int v40 = -1;
    v35.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v36 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *((void *)&v43 + 1) = "void AMCP::DAL::Fixed_Buffer::set_range(const DAL_Time_Range &)";
    *(void *)&long long v44 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    DWORD2(v44) = 181;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v31);
    long long v28 = &unk_1F148AA90;
    long long v29 = v31;
    *(void *)&long long v30 = v32;
    long long v31 = 0uLL;
    uint64_t v32 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v14 = *((void *)this + 11);
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 48))(v14);
  }
  else {
    unint64_t v15 = 0;
  }
  long long v16 = *(_OWORD *)((char *)a2 + 24);
  uint64_t v17 = *((void *)a2 + 4);
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  LODWORD(v28) = 2;
  long long v29 = v15;
  long long v30 = v16;
  boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)&v35, (uint64_t)a2, (uint64_t)&v28);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)buf, a2, (const AMCP::DAL::DAL_Time *)&v35);
  *(_OWORD *)((char *)this + 8) = *(_OWORD *)buf;
  *((void *)this + 3) = *(void *)&buf[16];
  long long v18 = v43;
  long long v43 = 0uLL;
  BOOL v19 = (std::__shared_weak_count *)*((void *)this + 5);
  *((_OWORD *)this + 2) = v18;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  *((_OWORD *)this + 3) = v44;
  *((void *)this + 8) = v45;
  long long v20 = v46;
  long long v46 = 0uLL;
  mach_port_t v21 = (std::__shared_weak_count *)*((void *)this + 10);
  *(_OWORD *)((char *)this + 72) = v20;
  if (v21)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    if (*((void *)&v46 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v46 + 1));
    }
  }
  if (*((void *)&v43 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v43 + 1));
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (*((void *)&v30 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v30 + 1));
  }
}

void sub_1BACB5B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v32 = *(std::__shared_weak_count **)(v30 - 128);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::DAL::Fixed_Buffer::reuse(AMCP::DAL::Fixed_Buffer *this)
{
  uint64_t result = *((void *)this + 11);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

double AMCP::DAL::Fixed_Buffer::get_format@<D0>(AMCP::DAL::Fixed_Buffer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 11);
  if (v2)
  {
    long long v3 = *(_OWORD *)(v2 + 8);
    long long v4 = *(_OWORD *)(v2 + 24);
    *(_OWORD *)a2 = v3;
    *(_OWORD *)(a2 + 16) = v4;
    *(void *)(a2 + 32) = *(void *)(v2 + 40);
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    *(void *)&long long v3 = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return *(double *)&v3;
}

uint64_t AMCP::DAL::Fixed_Buffer::get_allowed_read_range@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)(this + 8);
  uint64_t v2 = *(void *)(this + 32);
  *(void *)(a2 + 16) = *(void *)(this + 24);
  *(void *)(a2 + 24) = v2;
  uint64_t v3 = *(void *)(this + 40);
  *(void *)(a2 + 32) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(this + 48);
  uint64_t v4 = *(void *)(this + 72);
  *(void *)(a2 + 56) = *(void *)(this + 64);
  *(void *)(a2 + 64) = v4;
  uint64_t v5 = *(void *)(this + 80);
  *(void *)(a2 + 72) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t AMCP::DAL::Fixed_Buffer::get_time_range@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)(this + 8);
  uint64_t v2 = *(void *)(this + 32);
  *(void *)(a2 + 16) = *(void *)(this + 24);
  *(void *)(a2 + 24) = v2;
  uint64_t v3 = *(void *)(this + 40);
  *(void *)(a2 + 32) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(this + 48);
  uint64_t v4 = *(void *)(this + 72);
  *(void *)(a2 + 56) = *(void *)(this + 64);
  *(void *)(a2 + 64) = v4;
  uint64_t v5 = *(void *)(this + 80);
  *(void *)(a2 + 72) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t AMCP::DAL::Fixed_Buffer::get_container@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 96);
  *a2 = *(void *)(this + 88);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void AMCP::DAL::Fixed_Buffer::receive_zeros(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v11 = *a3;
  uint64_t v4 = *((void *)a3 + 3);
  uint64_t v12 = *((void *)a3 + 2);
  uint64_t v13 = v4;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)a3 + 4);
  uint64_t v14 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v15 = *(long long *)((char *)a3 + 40);
  uint64_t v6 = *((void *)a3 + 8);
  uint64_t v16 = *((void *)a3 + 7);
  uint64_t v17 = v6;
  __n128 v7 = (std::__shared_weak_count *)*((void *)a3 + 9);
  long long v18 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::DAL::Fixed_Buffer::create_writable_range(a1, (uint64_t)&v11, (uint64_t)v19);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  AMCP::DAL::DAL_Timed_Segment::translate_range(v10, v22, (uint64_t)v19);
  double v8 = v10[0];
  uint64_t v9 = v10[1];
  while (v8 != v9)
  {
    AMCP::DAL::Container::erase_range(*(void *)(a1 + 88));
    v8 += 12;
  }
  long long v23 = v10;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v23);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
}

void sub_1BACB5E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)va);
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *AMCP::DAL::Fixed_Buffer::receive_data_at_range(uint64_t a1, uint64_t a2, const AMCP::DAL::DAL_Time_Range **a3, void *a4)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (AMCP::DAL::DAL_Time *)(a3 + 5);
  BOOL v7 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a3 + 5), (AMCP::DAL::DAL_Time *)a3);
  if (v7)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v21 = **(NSObject ***)buf;
    if (*(void *)v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v57);
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      BOOL v22 = pthread_self();
      mach_port_t v23 = pthread_mach_thread_np(v22);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v23;
      *(_WORD *)long long v57 = 2080;
      *(void *)&v57[2] = "Fixed_Buffer.cpp";
      __int16 v58 = 1024;
      int v59 = 44;
      __int16 v60 = 2080;
      *(void *)std::logic_error v61 = "not (new_audio.get_time_range().end() >= new_audio.get_time_range().start())";
      _os_log_error_impl(&dword_1BAA78000, v21, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Fixed_Buffer::receive_data_at_range: Bad time range", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v55);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Fixed_Buffer::receive_data_at_range: Bad time range", (uint64_t)&v47);
    std::logic_error::logic_error(&v48, &v47);
    v48.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v49, &v48);
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    int v54 = -1;
    v49.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v50 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v49);
    *(void *)&v61[6] = "virtual void AMCP::DAL::Fixed_Buffer::receive_data_at_range(const Source_ID &, const Readable_R"
                         "ange &, const DAL_Time_Range &)";
    v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    int v63 = 44;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v42);
    long long v45 = v42;
    uint64_t v46 = v43;
    long long v42 = 0uLL;
    uint64_t v43 = 0;
    long long v44 = (double *)&unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  AMCP::DAL::DAL_Time::operator-((uint64_t)buf, (AMCP::DAL::DAL_Time *)(a4 + 5), (AMCP::DAL::DAL_Time *)a4);
  AMCP::DAL::DAL_Time::operator-((uint64_t)&v49, v6, (AMCP::DAL::DAL_Time *)a3);
  BOOL v8 = AMCP::DAL::DAL_Time_Delta::operator==((AMCP::DAL::DAL_Time_Delta *)buf, (uint64_t)&v49);
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  uint64_t v9 = *(AMCP::Log::Scope_Registry **)&v61[6];
  if (*(void *)&v61[6]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v61[6]);
  }
  if (!v8)
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v24 = **(NSObject ***)buf;
    if (*(void *)v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v57);
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = pthread_self();
      mach_port_t v26 = pthread_mach_thread_np(v25);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v26;
      *(_WORD *)long long v57 = 2080;
      *(void *)&v57[2] = "Fixed_Buffer.cpp";
      __int16 v58 = 1024;
      int v59 = 45;
      __int16 v60 = 2080;
      *(void *)std::logic_error v61 = "not (write_range.length() == new_audio.get_time_range().length())";
      _os_log_error_impl(&dword_1BAA78000, v24, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Fixed_Buffer::receive_data_at_range: source audio range length must eaqual write range length", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v55);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Fixed_Buffer::receive_data_at_range: source audio range length must eaqual write range length", (uint64_t)&v47);
    std::logic_error::logic_error(&v48, &v47);
    v48.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v49, &v48);
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    int v54 = -1;
    v49.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v50 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v49);
    *(void *)&v61[6] = "virtual void AMCP::DAL::Fixed_Buffer::receive_data_at_range(const Source_ID &, const Readable_R"
                         "ange &, const DAL_Time_Range &)";
    v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    int v63 = 45;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v42);
    long long v45 = v42;
    uint64_t v46 = v43;
    long long v42 = 0uLL;
    uint64_t v43 = 0;
    long long v44 = (double *)&unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  BOOL v10 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses(a1 + 8, (uint64_t)a4);
  if (!v10)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v27 = **(NSObject ***)buf;
    if (*(void *)v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v57);
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      long long v28 = pthread_self();
      mach_port_t v29 = pthread_mach_thread_np(v28);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v29;
      *(_WORD *)long long v57 = 2080;
      *(void *)&v57[2] = "Fixed_Buffer.cpp";
      __int16 v58 = 1024;
      int v59 = 46;
      __int16 v60 = 2080;
      *(void *)std::logic_error v61 = "not (m_time_range.encompasses(write_range))";
      _os_log_error_impl(&dword_1BAA78000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Fixed_Buffer::receive_data_at_range: range to write to must encompass the audio buffer range", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v55);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Fixed_Buffer::receive_data_at_range: range to write to must encompass the audio buffer range", (uint64_t)&v47);
    std::logic_error::logic_error(&v48, &v47);
    v48.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v49, &v48);
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    int v54 = -1;
    v49.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v50 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v49);
    *(void *)&v61[6] = "virtual void AMCP::DAL::Fixed_Buffer::receive_data_at_range(const Source_ID &, const Readable_R"
                         "ange &, const DAL_Time_Range &)";
    v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    int v63 = 46;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v42);
    long long v45 = v42;
    uint64_t v46 = v43;
    long long v42 = 0uLL;
    uint64_t v43 = 0;
    long long v44 = (double *)&unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  (*(void (**)(uint8_t *__return_ptr))(*(void *)a3[10] + 56))(buf);
  BOOL is_compatible = AMCP::DAL::Container::container_is_compatible(*(void *)(a1 + 88), *(uint64_t *)buf);
  uint64_t v12 = *(AMCP::Log::Scope_Registry **)v57;
  if (*(void *)v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v57);
  }
  if (!is_compatible)
  {
    AMCP::Log::Scope_Registry::get(v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v30 = **(NSObject ***)buf;
    if (*(void *)v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v57);
    }
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      long long v31 = pthread_self();
      mach_port_t v32 = pthread_mach_thread_np(v31);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v32;
      *(_WORD *)long long v57 = 2080;
      *(void *)&v57[2] = "Fixed_Buffer.cpp";
      __int16 v58 = 1024;
      int v59 = 47;
      __int16 v60 = 2080;
      *(void *)std::logic_error v61 = "not (m_container.container_is_compatible(new_audio.get_container()))";
      _os_log_error_impl(&dword_1BAA78000, v30, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Fixed_Buffer::receive_data_at_range: Containers Are Not Compatible", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v55);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Fixed_Buffer::receive_data_at_range: Containers Are Not Compatible", (uint64_t)&v47);
    std::logic_error::logic_error(&v48, &v47);
    v48.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v49, &v48);
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    int v54 = -1;
    v49.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v50 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v49);
    *(void *)&v61[6] = "virtual void AMCP::DAL::Fixed_Buffer::receive_data_at_range(const Source_ID &, const Readable_R"
                         "ange &, const DAL_Time_Range &)";
    v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    int v63 = 47;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v42);
    long long v45 = v42;
    uint64_t v46 = v43;
    long long v42 = 0uLL;
    uint64_t v43 = 0;
    long long v44 = (double *)&unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  AMCP::DAL::DAL_Timed_Segment::translate_range((double **)&v49, a3[10], (uint64_t)a3);
  uint64_t v13 = v49.__vftable;
  for (uint64_t i = v49.__imp_.__imp_; v13 != (std::logic_error_vtbl *)i; v13 += 4)
  {
    long long v34 = *(_OWORD *)a4;
    uint64_t v15 = a4[3];
    uint64_t v35 = a4[2];
    uint64_t v36 = v15;
    uint64_t v16 = (std::__shared_weak_count *)a4[4];
    uint64_t v37 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v38 = *(_OWORD *)(a4 + 5);
    uint64_t v39 = a4[7];
    uint64_t v17 = (std::__shared_weak_count *)a4[9];
    uint64_t v40 = a4[8];
    char v41 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::DAL::Fixed_Buffer::create_writable_range(a1, (uint64_t)&v34, (uint64_t)buf);
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
    if (v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v37);
    }
    AMCP::DAL::DAL_Timed_Segment::translate_range(&v44, v65, (uint64_t)buf);
    BOOL v19 = v44;
    long long v18 = (double *)v45;
    while (v19 != v18)
    {
      (*(void (**)(std::string *__return_ptr))(*(void *)a3[10] + 56))(&v47);
      AMCP::DAL::Container::copy_from_this_container((uint64_t *)&v47, (uint64_t)v13, (uint64_t *)(a1 + 88), v19);
      if (v47.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v47.__r_.__value_.__l.__size_);
      }
      v19 += 12;
    }
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v47);
    if (v64) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v64);
    }
    if (*(void *)&v61[6]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v61[6]);
    }
  }
  *(void *)buf = &v49;
  return std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)buf);
}

void sub_1BACB694C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40)
{
  if (a40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a40);
  }
  long long v42 = *(std::__shared_weak_count **)(v40 - 160);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  _Unwind_Resume(exception_object);
}

caulk::rt_safe_memory_resource *AMCP::DAL::Fixed_Buffer::receive_data(uint64_t a1, uint64_t a2, const AMCP::DAL::DAL_Time_Range **a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  BOOL v5 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a3 + 5), (AMCP::DAL::DAL_Time *)a3);
  if (v5)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v18 = **(NSObject ***)buf;
    if (*(void *)v50) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v50);
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      BOOL v19 = pthread_self();
      mach_port_t v20 = pthread_mach_thread_np(v19);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v20;
      *(_WORD *)long long v50 = 2080;
      *(void *)&v50[2] = "Fixed_Buffer.cpp";
      __int16 v51 = 1024;
      int v52 = 23;
      __int16 v53 = 2080;
      *(void *)int v54 = "not (new_audio.get_time_range().end() >= new_audio.get_time_range().start())";
      _os_log_error_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Fixed_Buffer::RecieveData: Bad time range", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v48);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Fixed_Buffer::RecieveData: Bad time range", (uint64_t)&v40);
    std::logic_error::logic_error(&v41, &v40);
    v41.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v42, &v41);
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    int v47 = -1;
    v42.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v43 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v42);
    *(void *)&v54[6] = "virtual void AMCP::DAL::Fixed_Buffer::receive_data(const Source_ID &, const Readable_Range &)";
    char v55 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    int v56 = 23;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v35);
    long long v38 = v35;
    uint64_t v39 = v36;
    long long v35 = 0uLL;
    uint64_t v36 = 0;
    uint64_t v37 = (double *)&unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  BOOL v6 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses(a1 + 8, (uint64_t)a3);
  if (!v6)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v21 = **(NSObject ***)buf;
    if (*(void *)v50) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v50);
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      BOOL v22 = pthread_self();
      mach_port_t v23 = pthread_mach_thread_np(v22);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v23;
      *(_WORD *)long long v50 = 2080;
      *(void *)&v50[2] = "Fixed_Buffer.cpp";
      __int16 v51 = 1024;
      int v52 = 24;
      __int16 v53 = 2080;
      *(void *)int v54 = "not (m_time_range.encompasses(new_audio.get_time_range()))";
      _os_log_error_impl(&dword_1BAA78000, v21, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v48);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v40);
    std::logic_error::logic_error(&v41, &v40);
    v41.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v42, &v41);
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    int v47 = -1;
    v42.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v43 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v42);
    *(void *)&v54[6] = "virtual void AMCP::DAL::Fixed_Buffer::receive_data(const Source_ID &, const Readable_Range &)";
    char v55 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    int v56 = 24;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v35);
    long long v38 = v35;
    uint64_t v39 = v36;
    long long v35 = 0uLL;
    uint64_t v36 = 0;
    uint64_t v37 = (double *)&unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  (*(void (**)(uint8_t *__return_ptr))(*(void *)a3[10] + 56))(buf);
  BOOL is_compatible = AMCP::DAL::Container::container_is_compatible(*(void *)(a1 + 88), *(uint64_t *)buf);
  BOOL v8 = *(AMCP::Log::Scope_Registry **)v50;
  if (*(void *)v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v50);
  }
  if (!is_compatible)
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v24 = **(NSObject ***)buf;
    if (*(void *)v50) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v50);
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = pthread_self();
      mach_port_t v26 = pthread_mach_thread_np(v25);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v26;
      *(_WORD *)long long v50 = 2080;
      *(void *)&v50[2] = "Fixed_Buffer.cpp";
      __int16 v51 = 1024;
      int v52 = 25;
      __int16 v53 = 2080;
      *(void *)int v54 = "not (m_container.container_is_compatible(new_audio.get_container()))";
      _os_log_error_impl(&dword_1BAA78000, v24, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Fixed_Buffer::WriteTo: Containers Are Not Compatible", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v48);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Fixed_Buffer::WriteTo: Containers Are Not Compatible", (uint64_t)&v40);
    std::logic_error::logic_error(&v41, &v40);
    v41.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v42, &v41);
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    int v47 = -1;
    v42.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v43 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v42);
    *(void *)&v54[6] = "virtual void AMCP::DAL::Fixed_Buffer::receive_data(const Source_ID &, const Readable_Range &)";
    char v55 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    int v56 = 25;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v35);
    long long v38 = v35;
    uint64_t v39 = v36;
    long long v35 = 0uLL;
    uint64_t v36 = 0;
    uint64_t v37 = (double *)&unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  AMCP::DAL::DAL_Timed_Segment::translate_range((double **)&v42, a3[10], (uint64_t)a3);
  uint64_t v9 = v42.__vftable;
  for (uint64_t i = v42.__imp_.__imp_; v9 != (std::logic_error_vtbl *)i; v9 += 4)
  {
    long long v27 = *(_OWORD *)&v9->what;
    what = v9[1].what;
    long long v28 = v9[1].~logic_error_0;
    mach_port_t v29 = what;
    uint64_t v12 = (std::__shared_weak_count *)v9[2].~logic_error;
    uint64_t v30 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v31 = *(_OWORD *)&v9[2].~logic_error_0;
    uint64_t v13 = v9[3].~logic_error_0;
    mach_port_t v32 = v9[3].~logic_error;
    uint64_t v14 = (std::__shared_weak_count *)v9[3].what;
    std::string v33 = v13;
    long long v34 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::DAL::Fixed_Buffer::create_writable_range(a1, (uint64_t)&v27, (uint64_t)buf);
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    AMCP::DAL::DAL_Timed_Segment::translate_range(&v37, v58, (uint64_t)buf);
    uint64_t v15 = v37;
    uint64_t v16 = (double *)v38;
    while (v15 != v16)
    {
      (*(void (**)(std::string *__return_ptr))(*(void *)a3[10] + 56))(&v40);
      AMCP::DAL::Container::copy_from_this_container((uint64_t *)&v40, (uint64_t)v9, (uint64_t *)(a1 + 88), v15);
      if (v40.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v40.__r_.__value_.__l.__size_);
      }
      v15 += 12;
    }
    v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v40);
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
    if (*(void *)&v54[6]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v54[6]);
    }
  }
  *(void *)buf = &v42;
  return std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)buf);
}

void sub_1BACB72C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34)
{
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&a9);
  *(void *)(v34 - 192) = &a34;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)(v34 - 192));
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Fixed_Buffer::translate_range@<X0>(AMCP::DAL::Fixed_Buffer *this@<X0>, const AMCP::DAL::DAL_Time_Range *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  BOOL v5 = (AMCP::DAL::Fixed_Buffer *)((char *)this + 8);
  BOOL v6 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::encompasses((uint64_t)this + 8, (uint64_t)a2);
  if (!v6)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v20 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v21 = pthread_self();
      mach_port_t v22 = pthread_mach_thread_np(v21);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v22;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Fixed_Buffer.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 110;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "not (m_time_range.encompasses(range))";
      _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v28);
    std::logic_error::logic_error(&v29, &v28);
    v29.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v30, &v29);
    mach_port_t v32 = 0;
    std::string v33 = 0;
    uint64_t v34 = 0;
    int v35 = -1;
    v30.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v31 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
    *(void *)&buf[32] = "virtual rt_safe_vector<Buffer_Time_Translator::Translation_Range> AMCP::DAL::Fixed_Buffer::tra"
                          "nslate_range(const DAL_Time_Range &) const";
    *(void *)&long long v38 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
    DWORD2(v38) = 110;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
    long long v26 = v23;
    uint64_t v27 = v24;
    long long v23 = 0uLL;
    uint64_t v24 = 0;
    uint64_t v25 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  double sample_time = AMCP::DAL::DAL_Time::get_sample_time(a2);
  double v8 = AMCP::DAL::DAL_Time::get_sample_time((const AMCP::DAL::DAL_Time_Range *)((char *)a2 + 40));
  double v9 = AMCP::DAL::DAL_Time::get_sample_time(v5);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  *(double *)buf = sample_time - v9;
  *(double *)&uint8_t buf[8] = v8 - v9;
  *(_OWORD *)&buf[16] = *(_OWORD *)a2;
  uint64_t v10 = *((void *)a2 + 3);
  *(void *)&buf[32] = *((void *)a2 + 2);
  *(void *)&long long v38 = v10;
  uint64_t v11 = *((void *)a2 + 4);
  *((void *)&v38 + 1) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  long long v39 = *(_OWORD *)((char *)a2 + 40);
  uint64_t v13 = *((void *)a2 + 8);
  uint64_t v12 = *((void *)a2 + 9);
  uint64_t v40 = *((void *)a2 + 7);
  *(void *)&long long v41 = v13;
  *((void *)&v41 + 1) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  std::string v33 = a3 + 2;
  uint64_t v14 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>((caulk::rt_safe_memory_resource *)1);
  v30.__vftable = (std::logic_error_vtbl *)v14;
  v30.__imp_.__imp_ = (const char *)v14;
  mach_port_t v32 = (char *)v14 + 96 * v15;
  *(_OWORD *)uint64_t v14 = *(_OWORD *)buf;
  long long v16 = *(_OWORD *)&buf[16];
  *((void *)v14 + 4) = *(void *)&buf[32];
  *((_OWORD *)v14 + 1) = v16;
  *(_OWORD *)((char *)v14 + 40) = v38;
  long long v17 = v39;
  *((void *)v14 + 9) = v40;
  *(_OWORD *)((char *)v14 + 56) = v17;
  *((_OWORD *)v14 + 5) = v41;
  long long v31 = (char *)v14 + 96;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__swap_out_circular_buffer(a3, &v30);
  uint64_t v18 = a3[1];
  uint64_t result = std::__split_buffer<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range> &>::~__split_buffer((uint64_t)&v30);
  a3[1] = v18;
  return result;
}

void sub_1BACB7758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35)
{
}

caulk::rt_safe_memory_resource *std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>(caulk::rt_safe_memory_resource *result)
{
  if ((unint64_t)result < 0x2AAAAAAAAAAAAABLL)
  {
    uint64_t result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
    if (*MEMORY[0x1E4FB7E88]) {
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_allocate(result);
    }
  }
  __break(1u);
  return result;
}

uint64_t *std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(_OWORD *)(v6 - 96) = *(_OWORD *)(v2 + v5 - 96);
      long long v8 = *(_OWORD *)(v2 + v5 - 80);
      *(void *)(v6 - 64) = *(void *)(v2 + v5 - 64);
      *(_OWORD *)(v6 - 80) = v8;
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(v2 + v5 - 56);
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      long long v9 = *(_OWORD *)(v2 + v5 - 40);
      *(void *)(v6 - 24) = *(void *)(v2 + v5 - 24);
      *(_OWORD *)(v6 - 40) = v9;
      *(_OWORD *)(v6 - 16) = *(_OWORD *)(v2 + v5 - 16);
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      v5 -= 96;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v10 = *result;
  *uint64_t result = v4;
  a2[1] = v10;
  uint64_t v11 = result[1];
  result[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = result[2];
  result[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
    std::__destroy_at[abi:ne180100]<AMCP::DAL::Buffer_Time_Translator::Translation_Range,0>(i - 96);
  }
  if (*(void *)a1) {
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::deallocate[abi:ne180100](*(caulk::rt_safe_memory_resource **)a1, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 5));
  }
  return a1;
}

void write_to_dal_buffer(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t **a6, uint64_t *a7, int a8)
{
  AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)&v36, a5);
  if ((v36 & 2) == 0) {
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v36);
  }
  int64_t v16 = vcvtmd_s64_f64(*(double *)&v37);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if (v16 < a2)
  {
    AMCP::DAL::Ring_Buffer_Base::get_length_in_frames((AMCP::DAL::Ring_Buffer_Base *)&v36, a5);
    if ((v36 & 2) == 0) {
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v36);
    }
    unint64_t v17 = vcvtmd_s64_f64(*(double *)&v37);
    if (v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    }
    unint64_t v18 = a2 - v17;
    *a3 += a2 - v17;
    a2 = v17 - (a2 - v17);
    a1 += 4 * v18 * *(unsigned int *)(a4 + 24);
  }
  if (a2 >= 1)
  {
    double v19 = (double)*a3;
    double v20 = (double)(*a3 + a2);
    mach_port_t v21 = (std::__shared_weak_count *)a7[1];
    uint64_t v59 = *a7;
    __int16 v60 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v61, &v59, v19, v20);
    if (v60) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v60);
    }
    long long v48 = v61;
    uint64_t v49 = v62;
    long long v50 = v63;
    __int16 v51 = v64;
    if (v64) {
      atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v52 = v65;
    uint64_t v53 = v66;
    uint64_t v54 = v67;
    char v55 = v68;
    if (v68) {
      atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::DAL::Ring_Buffer_Base::create_writable_range(a5, &v48, (uint64_t)v56);
    if (v55) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v55);
    }
    if (v51) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
    }
    uint64_t v22 = *(unsigned int *)(a4 + 24);
    v47[0] = a2 * v22;
    if (a2 * v22 < 0 || (v47[1] = a1) == 0 && v22) {
      std::terminate();
    }
    (*(void (**)(uint64_t, void *))(*(void *)**a6 + 24))(**a6, v47);
    uint64_t v24 = **a6;
    long long v23 = (std::__shared_weak_count *)(*a6)[1];
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v34 = v61;
    uint64_t v25 = v63;
    uint64_t v35 = v62;
    long long v26 = v64;
    if (v64) {
      atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v32 = v65;
    uint64_t v33 = v66;
    uint64_t v28 = v67;
    uint64_t v27 = v68;
    if (v68) {
      atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v37 = v34;
    char v36 = &unk_1F1487FC0;
    uint64_t v38 = v35;
    long long v39 = v25;
    uint64_t v40 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v41 = v32;
    uint64_t v42 = v33;
    uint64_t v43 = v28;
    uint64_t v44 = v27;
    if (v27)
    {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v45 = v24;
      uint64_t v46 = v23;
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      if (!v26)
      {
LABEL_38:
        AMCP::DAL::Fixed_Buffer::create_readable_range((AMCP::DAL::Fixed_Buffer *)&v36, (uint64_t)v29);
        AMCP::DAL::Writable_Range::receive_data((uint64_t)v56, a8, (AMCP::DAL::DAL_Time *)v29);
        if (v31) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
        if (v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
        char v36 = &unk_1F1487FC0;
        if (v46) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v46);
        }
        if (v44) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v44);
        }
        if (v40) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
        }
        if (v58) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v58);
        }
        if (v57) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v57);
        }
        if (v68) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v68);
        }
        if (v64) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v64);
        }
        return;
      }
    }
    else
    {
      uint64_t v45 = v24;
      uint64_t v46 = v23;
      if (!v26) {
        goto LABEL_38;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    goto LABEL_38;
  }
}

void sub_1BACB7D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  _Unwind_Resume(exception_object);
}

void read_from_dal_buffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5, uint64_t *a6, void *a7)
{
  bzero(a7, *(unsigned int *)(a3 + 24) * a1);
  uint64_t v14 = (std::__shared_weak_count *)a6[1];
  uint64_t v61 = *a6;
  uint64_t v62 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v63, &v61, (double)a2, (double)(a2 + a1));
  if (v62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a4 + 72))(v58, a4);
  caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::intersection((uint64_t)&v27, &v63, v58);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v50, (long long *)&v27);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v50, (AMCP::DAL::DAL_Time *)&v54))
  {
    long long v39 = v50;
    uint64_t v40 = v51;
    uint64_t v41 = v52;
    uint64_t v42 = v53;
    if (v53) {
      atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v43 = v54;
    uint64_t v44 = v55;
    uint64_t v45 = v56;
    uint64_t v46 = v57;
    if (v57) {
      atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::DAL::Ring_Buffer_Base::create_readable_range(a4, (uint64_t)&v39, (uint64_t)v47);
    if (v46) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v46);
    }
    if (v42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v42);
    }
    uint64_t v15 = *(unsigned int *)(a3 + 24) * a1;
    v38[0] = v15;
    if (v15 < 0 || (v38[1] = a7) == 0 && v15) {
      std::terminate();
    }
    (*(void (**)(uint64_t, void *))(*(void *)**a5 + 24))(**a5, v38);
    uint64_t v18 = **a5;
    unint64_t v17 = (std::__shared_weak_count *)(*a5)[1];
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v25 = v63;
    double v19 = v65;
    uint64_t v26 = v64;
    double v20 = v66;
    if (v66) {
      atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v23 = v67;
    mach_port_t v21 = v69;
    uint64_t v24 = v68;
    uint64_t v22 = v70;
    if (v70) {
      atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v27 = &unk_1F1487FC0;
    long long v28 = v25;
    uint64_t v29 = v26;
    std::logic_error v30 = v19;
    long long v31 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v32 = v23;
    uint64_t v33 = v24;
    long long v34 = v21;
    uint64_t v35 = v22;
    if (v22)
    {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v36 = v18;
      long long v37 = v17;
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      if (!v20)
      {
LABEL_32:
        AMCP::DAL::Fixed_Buffer::receive_data((uint64_t)&v27, v16, v47);
        uint64_t v27 = &unk_1F1487FC0;
        if (v37) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v37);
        }
        if (v35) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
        }
        if (v31) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
        if (v49) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v49);
        }
        if (v48) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v48);
        }
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v36 = v18;
      long long v37 = v17;
      if (!v20) {
        goto LABEL_32;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    goto LABEL_32;
  }
LABEL_42:
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  if (v70) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
  }
  if (v66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v66);
  }
}

void sub_1BACB8140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  AMCP::DAL::Fixed_Buffer::~Fixed_Buffer((AMCP::DAL::Fixed_Buffer *)&a16);
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&a42);
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&a53);
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)(v53 - 240));
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)(v53 - 144));
  _Unwind_Resume(a1);
}

void sub_1BACB81AC()
{
}

uint64_t caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::store(uint64_t result, _OWORD *a2)
{
  uint64_t v2 = result;
  int v11 = 0;
  uint64_t v3 = result + 64;
  unsigned int add = atomic_fetch_add((atomic_uint *volatile)(result + 4), 1u);
  unint64_t v5 = result + 64 + ((unint64_t)(add & 1) << 6);
  int v6 = 2 * add;
  atomic_store(2 * add, (unsigned int *)v5);
  *(_OWORD *)(v5 + 4) = *a2;
  __dmb(0xBu);
  atomic_compare_exchange_strong((atomic_uint *volatile)v5, (unsigned int *)&v6, (2 * add) | 1);
  if (v6 != 2 * add)
  {
    do
    {
      uint64_t result = caulk::concurrent::details::spinloop::spin((uint64_t)&v11);
      unsigned int v8 = atomic_fetch_add((atomic_uint *volatile)(v2 + 4), 1u);
      unint64_t v9 = v3 + ((unint64_t)(v8 & 1) << 6);
      int v10 = 2 * v8;
      atomic_store(2 * v8, (unsigned int *)v9);
      *(_OWORD *)(v9 + 4) = *a2;
      __dmb(0xBu);
      atomic_compare_exchange_strong((atomic_uint *volatile)v9, (unsigned int *)&v10, (2 * v8) | 1);
    }
    while (v10 != 2 * v8);
  }
  atomic_store(1u, (unsigned __int8 *)v2);
  return result;
}

uint64_t caulk::concurrent::details::spinloop::spin(uint64_t this)
{
  int v1 = *(_DWORD *)this + 1;
  *(_DWORD *)this = v1;
  if (v1 == 100)
  {
    uint64_t v2 = (_DWORD *)this;
    this = sched_yield();
    _DWORD *v2 = 0;
  }
  return this;
}

void AMCP::IO_Core::Thread_Control_State::set_state(pthread_cond_t *a1, int a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)a1) != a2)
  {
    *(_DWORD *)buf = a2;
    uint8_t buf[4] = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)a1) != 0;
    buf[5] = 0;
    *(_DWORD *)double v20 = 4;
    caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)a1);
    v20[4] = v4 & 1;
    caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::store((uint64_t)a1, buf);
    unint64_t v5 = (AMCP::Utility::Kernel_Error_Category *)pthread_cond_broadcast(a1 + 4);
    unsigned int v6 = v5;
    AMCP::Utility::Kernel_Error_Category::get(v5);
    if (v6)
    {
      AMCP::Log::Scope_Registry::get(v7);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unsigned int v8 = **(NSObject ***)buf;
      if (*(void *)v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v20);
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        unint64_t v9 = pthread_self();
        mach_port_t v10 = pthread_mach_thread_np(v9);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v10;
        *(_WORD *)double v20 = 2080;
        *(void *)&v20[2] = "Thread_Control_State.cpp";
        __int16 v21 = 1024;
        int v22 = 79;
        __int16 v23 = 2080;
        uint64_t v24 = "kernel_error.operator BOOL()";
        _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set the signaling the condition variable", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v18);
      __cxa_allocate_exception(0x50uLL);
      MEMORY[0x1C1859240](v16, v6, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
      boost::enable_error_info<std::system_error>(v17, (uint64_t)v16);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)v17);
      long long v25 = "void AMCP::IO_Core::Thread_Control_State::set_state(Transport_State)";
      uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Thread_Control_State.cpp";
      int v27 = 79;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v11);
      uint64_t v13 = &unk_1F148AA90;
      long long v14 = v11;
      uint64_t v15 = v12;
      long long v11 = 0uLL;
      uint64_t v12 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>();
    }
  }
}

void sub_1BACB8510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, uint64_t a18, uint64_t a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl(v22 - 144);
  boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector((uint64_t)&a20);
  std::runtime_error::~runtime_error(&a17);
  if (v21) {
    __cxa_free_exception(v20);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v22 - 145));
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)a1);
  if ((v1 & 1) == 0) {
    return 0;
  }
  int v12 = 0;
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)a1);
  if (v4)
  {
    uint64_t v5 = a1 + 64;
    do
    {
      unsigned int v6 = atomic_load_explicit((atomic_uint *volatile)(a1 + 4), memory_order_acquire) - 1;
      char v7 = 1;
      while (1)
      {
        char v8 = v7;
        uint64_t v9 = v5 + ((unint64_t)(v6 & 1) << 6);
        unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)v9, memory_order_acquire);
        if (explicit) {
          break;
        }
        char v7 = 0;
        LOBYTE(v6) = v6 - 1;
        if ((v8 & 1) == 0) {
          goto LABEL_12;
        }
      }
      uint64_t result = *(void *)(v9 + 4);
      __dmb(9u);
      if (explicit == *(_DWORD *)v9) {
        return result;
      }
      caulk::concurrent::details::spinloop::spin((uint64_t)&v12);
LABEL_12:
      unsigned __int8 v11 = atomic_load((unsigned __int8 *)a1);
    }
    while ((v11 & 1) != 0);
  }
  _os_assert_log();
  uint64_t result = _os_crash();
  __break(1u);
  return result;
}

void AMCP::IO_Core::Thread_Control_State::sleep_until_time(AMCP::IO_Core::Thread_Control_State *this, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  if (a2 > mach_absolute_time()
    && caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this)
    && (caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this) & 0x10000000000) == 0)
  {
    unint64_t v3 = __udivti3();
    if (v3 >= 0x3B9ACA00)
    {
      __darwin_time_t v4 = v3 / 0x3B9ACA00;
      v3 %= 0x3B9ACA00uLL;
    }
    else
    {
      __darwin_time_t v4 = 0;
    }
    v28.tv_sec = v4;
    v28.tv_nsec = v3;
    uint64_t v5 = (AMCP::Utility::Kernel_Error_Category *)pthread_mutex_lock((pthread_mutex_t *)((char *)this + 240));
    unsigned int v6 = v5;
    AMCP::Utility::Kernel_Error_Category::get(v5);
    if (v6 >= 2)
    {
      AMCP::Log::Scope_Registry::get(v7);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      __int16 v23 = **(NSObject ***)buf;
      if (*(void *)v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        uint64_t v24 = pthread_self();
        mach_port_t v25 = pthread_mach_thread_np(v24);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v25;
        *(_WORD *)long long v43 = 2080;
        *(void *)&v43[2] = "Thread_Control_State.cpp";
        __int16 v44 = 1024;
        int v45 = 51;
        __int16 v46 = 2080;
        *(void *)int v47 = "kernel_error.operator BOOL()";
        _os_log_error_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to lock the mutex", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
      __cxa_allocate_exception(0x50uLL);
      MEMORY[0x1C1859240](&v33, v6, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
      boost::enable_error_info<std::system_error>((std::runtime_error *)&v36, (uint64_t)&v33);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
      uint64_t v49 = "BOOL AMCP::IO_Core::Thread_Control_State::lock()";
      long long v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Thread_Control_State.cpp";
      int v51 = 51;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v29);
      *(_OWORD *)&v31.__r_.__value_.__r.__words[1] = v29;
      uint64_t v32 = v30;
      long long v29 = 0uLL;
      uint64_t v30 = 0;
      v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>();
    }
    if (v6 == 1)
    {
      AMCP::Log::Scope_Registry::get(v7);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      double v20 = **(NSObject ***)buf;
      if (*(void *)v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        int v21 = pthread_self();
        mach_port_t v22 = pthread_mach_thread_np(v21);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v22;
        *(_WORD *)long long v43 = 2080;
        *(void *)&v43[2] = "Thread_Control_State.cpp";
        __int16 v44 = 1024;
        int v45 = 155;
        __int16 v46 = 2080;
        *(void *)int v47 = "not (success)";
        _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v31);
      std::logic_error::logic_error(&v26, &v31);
      v26.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v36, &v26);
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      int v41 = -1;
      v36.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      long long v37 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
      *(void *)&v47[6] = "BOOL AMCP::IO_Core::Thread_Control_State::sleep_until_time(uint64_t)";
      long long v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Thread_Control_State.cpp";
      LODWORD(v49) = 155;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v29);
      uint64_t v33 = &unk_1F148AA90;
      long long v34 = v29;
      uint64_t v35 = v30;
      long long v29 = 0uLL;
      uint64_t v30 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    char v8 = (AMCP::Utility::Kernel_Error_Category *)pthread_cond_timedwait_relative_np((pthread_cond_t *)this + 4, (pthread_mutex_t *)((char *)this + 240), &v28);
    unsigned int v9 = v8;
    AMCP::Utility::Kernel_Error_Category::get(v8);
    if (v9 && v9 != 60)
    {
      AMCP::Log::Scope_Registry::get(v10);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unint64_t v17 = **(NSObject ***)buf;
      if (*(void *)v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        char v18 = pthread_self();
        mach_port_t v19 = pthread_mach_thread_np(v18);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v19;
        *(_WORD *)long long v43 = 2080;
        *(void *)&v43[2] = "Thread_Control_State.cpp";
        __int16 v44 = 1024;
        int v45 = 161;
        __int16 v46 = 2080;
        *(void *)int v47 = "kernel_error.operator BOOL()";
        _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failure waiting for the condition variable", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
      __cxa_allocate_exception(0x50uLL);
      MEMORY[0x1C1859240](&v33, v9, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
      boost::enable_error_info<std::system_error>((std::runtime_error *)&v36, (uint64_t)&v33);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
      uint64_t v49 = "BOOL AMCP::IO_Core::Thread_Control_State::sleep_until_time(uint64_t)";
      long long v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Thread_Control_State.cpp";
      int v51 = 161;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v29);
      *(_OWORD *)&v31.__r_.__value_.__r.__words[1] = v29;
      uint64_t v32 = v30;
      long long v29 = 0uLL;
      uint64_t v30 = 0;
      v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>();
    }
    unsigned __int8 v11 = (AMCP::Utility::Kernel_Error_Category *)pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 240));
    unsigned int v12 = v11;
    AMCP::Utility::Kernel_Error_Category::get(v11);
    if (v12 >= 2)
    {
      AMCP::Log::Scope_Registry::get(v13);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      long long v14 = **(NSObject ***)buf;
      if (*(void *)v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = pthread_self();
        mach_port_t v16 = pthread_mach_thread_np(v15);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v16;
        *(_WORD *)long long v43 = 2080;
        *(void *)&v43[2] = "Thread_Control_State.cpp";
        __int16 v44 = 1024;
        int v45 = 64;
        __int16 v46 = 2080;
        *(void *)int v47 = "kernel_error.operator BOOL()";
        _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to unlock the mutex", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
      __cxa_allocate_exception(0x50uLL);
      MEMORY[0x1C1859240](&v33, v12, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
      boost::enable_error_info<std::system_error>((std::runtime_error *)&v36, (uint64_t)&v33);
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
      uint64_t v49 = "BOOL AMCP::IO_Core::Thread_Control_State::unlock()";
      long long v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Thread_Control_State.cpp";
      int v51 = 64;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v29);
      *(_OWORD *)&v31.__r_.__value_.__r.__words[1] = v29;
      uint64_t v32 = v30;
      long long v29 = 0uLL;
      uint64_t v30 = 0;
      v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>();
    }
  }
}

void sub_1BACB8E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,void *__p,uint64_t a23,uint64_t a24,std::runtime_error a25,uint64_t a26,uint64_t a27,char a28)
{
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl(v30 - 144);
  boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector((uint64_t)&a28);
  std::runtime_error::~runtime_error(&a25);
  if (v29) {
    __cxa_free_exception(v28);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a10);
  _Unwind_Resume(a1);
}

uint64_t AMCP::IO_Core::Device_Timebase::get_private_transport_state(AMCP::IO_Core::Device_Timebase *this)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (!v2
    || (v2 = std::__shared_weak_count::lock(v2), (unint64_t v3 = v2) == 0)
    || (uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unsigned int v6 = **(NSObject ***)buf;
    if (*(void *)v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v24);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      char v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)uint64_t v24 = 2080;
      *(void *)&v24[2] = "Device_Timebase.cpp";
      __int16 v25 = 1024;
      int v26 = 432;
      __int16 v27 = 2080;
      *(void *)timespec v28 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v22);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v14);
    std::logic_error::logic_error(&v15, &v14);
    v15.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v16, &v15);
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v21 = -1;
    v16.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unint64_t v17 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v16);
    *(void *)&v28[6] = "virtual Transport_State AMCP::IO_Core::Device_Timebase::get_private_transport_state() const";
    int v29 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    int v30 = 432;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v9);
    long long v12 = v9;
    uint64_t v13 = v10;
    long long v9 = 0uLL;
    uint64_t v10 = 0;
    unsigned __int8 v11 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v4 = ((uint64_t (*)(std::__shared_weak_count *))v2->__vftable[3].__on_zero_shared)(v2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v4;
}

void sub_1BACB91F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::IO_Core::Device_Timebase::release_power_assertions(AMCP::IO_Core::Device_Timebase *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (!v2
    || (uint64_t v2 = std::__shared_weak_count::lock(v2)) == 0
    || (unint64_t v3 = v2, (v2 = (std::__shared_weak_count *)*((void *)this + 4)) == 0))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v4 = **(NSObject ***)buf;
    if (*(void *)v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v22);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = pthread_self();
      mach_port_t v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)char v22 = 2080;
      *(void *)&v22[2] = "Device_Timebase.cpp";
      __int16 v23 = 1024;
      int v24 = 452;
      __int16 v25 = 2080;
      *(void *)int v26 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v12);
    std::logic_error::logic_error(&v13, &v12);
    v13.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v14, &v13);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = -1;
    v14.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    std::logic_error v15 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(void *)&v26[6] = "virtual void AMCP::IO_Core::Device_Timebase::release_power_assertions()";
    __int16 v27 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    int v28 = 452;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v7);
    long long v10 = v7;
    uint64_t v11 = v8;
    long long v7 = 0uLL;
    uint64_t v8 = 0;
    long long v9 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  ((void (*)(std::__shared_weak_count *))v2->__vftable[9].__on_zero_shared)(v2);

  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
}

void sub_1BACB9570(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AMCP::IO_Core::Device_Timebase::take_power_assertions(AMCP::IO_Core::Device_Timebase *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (!v2
    || (uint64_t v2 = std::__shared_weak_count::lock(v2)) == 0
    || (unint64_t v3 = v2, (v2 = (std::__shared_weak_count *)*((void *)this + 4)) == 0))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v4 = **(NSObject ***)buf;
    if (*(void *)v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v22);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = pthread_self();
      mach_port_t v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)char v22 = 2080;
      *(void *)&v22[2] = "Device_Timebase.cpp";
      __int16 v23 = 1024;
      int v24 = 442;
      __int16 v25 = 2080;
      *(void *)int v26 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v12);
    std::logic_error::logic_error(&v13, &v12);
    v13.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v14, &v13);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = -1;
    v14.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    std::logic_error v15 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(void *)&v26[6] = "virtual void AMCP::IO_Core::Device_Timebase::take_power_assertions()";
    __int16 v27 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    int v28 = 442;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v7);
    long long v10 = v7;
    uint64_t v11 = v8;
    long long v7 = 0uLL;
    uint64_t v8 = 0;
    long long v9 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  ((void (*)(std::__shared_weak_count *))v2->__vftable[9].~__shared_weak_count_0)(v2);

  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
}

void sub_1BACB9830(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

double AMCP::IO_Core::Device_Timebase::get_max_io_buffer_frame_size(AMCP::IO_Core::Device_Timebase *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (!v2) {
    return 4096.0;
  }
  unint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 4096.0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = *((void *)this + 4);
  if (v5) {
    double v6 = (double)(unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
  }
  else {
    double v6 = 4096.0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v6;
}

void AMCP::IO_Core::Device_Timebase::reset_clock_anchor_time(os_unfair_lock_s *this)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = this + 16;
  os_unfair_lock_lock(this + 16);
  unint64_t v3 = *(std::__shared_weak_count **)&this[10]._os_unfair_lock_opaque;
  if (!v3
    || (v3 = std::__shared_weak_count::lock(v3), (uint64_t v4 = v3) == 0)
    || (unint64_t v3 = *(std::__shared_weak_count **)&this[8]._os_unfair_lock_opaque) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v8 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      long long v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)uint64_t v29 = 2080;
      *(void *)&v29[2] = "Device_Timebase.cpp";
      __int16 v30 = 1024;
      int v31 = 322;
      __int16 v32 = 2080;
      *(void *)uint64_t v33 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v19);
    std::logic_error::logic_error(&v20, &v19);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    char v22 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v33[6] = "virtual void AMCP::IO_Core::Device_Timebase::reset_clock_anchor_time()";
    long long v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    int v35 = 322;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    uint64_t v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v5 = (AMCP::Log::Scope_Registry *)((uint64_t (*)(std::__shared_weak_count *))v3->__vftable[8].~__shared_weak_count_0)(v3);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      std::string v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)uint64_t v29 = 2080;
      *(void *)&v29[2] = "Device_Timebase.cpp";
      __int16 v30 = 1024;
      int v31 = 323;
      __int16 v32 = 2080;
      *(void *)uint64_t v33 = "not (engine->has_time())";
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v19);
    std::logic_error::logic_error(&v20, &v19);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    char v22 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v33[6] = "virtual void AMCP::IO_Core::Device_Timebase::reset_clock_anchor_time()";
    long long v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    int v35 = 323;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    uint64_t v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (this[22]._os_unfair_lock_opaque)
  {
    uint64_t v6 = mach_absolute_time();
    double v7 = AMCP::IO_Core::Device_Timebase::convert_host_to_sample_time((AMCP::IO_Core::Device_Timebase *)this, v6);
    if (!LOBYTE(this[26]._os_unfair_lock_opaque)) {
      LOBYTE(this[26]._os_unfair_lock_opaque) = 1;
    }
    *(double *)&this[24]._os_unfair_lock_opaque = v7;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);

  os_unfair_lock_unlock(v2);
}

void sub_1BACB9DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  os_unfair_lock_unlock(v35);
  _Unwind_Resume(a1);
}

double AMCP::IO_Core::Device_Timebase::convert_host_to_sample_time(AMCP::IO_Core::Device_Timebase *this, uint64_t a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (!v3 || (v3 = std::__shared_weak_count::lock(v3), (uint64_t v5 = v3) == 0) || (v6 = *((void *)this + 4)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v10 = **(NSObject ***)buf;
    if (*(void *)v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v38);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)uint64_t v38 = 2080;
      *(void *)&void v38[2] = "Device_Timebase.cpp";
      __int16 v39 = 1024;
      int v40 = 73;
      __int16 v41 = 2080;
      *(void *)uint64_t v42 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v23);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v30);
    std::logic_error::logic_error(&v20, &v30);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v31, &v20);
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    int v36 = -1;
    v31.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    __int16 v32 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v31);
    *(void *)&v42[6] = "virtual double AMCP::IO_Core::Device_Timebase::convert_host_to_sample_time(uint64_t) const";
    *(void *)&v42[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    int v43 = 73;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v25);
    char v27 = &unk_1F148AA90;
    std::logic_error v28 = v25;
    uint64_t v29 = v26;
    std::logic_error v25 = (std::logic_error)0;
    uint64_t v26 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  double v7 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 328))(v6);
  if ((v7 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v13 = **(NSObject ***)buf;
    if (*(void *)v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v38);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      long long v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v6 + 16))(&v27, v6);
      uint64_t v16 = (const __CFString **)applesauce::CF::StringRef::operator->(&v27);
      applesauce::CF::convert_to<std::string,0>((uint64_t)&v31, *v16);
      if (SHIBYTE(v32) >= 0) {
        long long v17 = &v31;
      }
      else {
        long long v17 = v31.__vftable;
      }
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v15;
      *(_WORD *)uint64_t v38 = 2080;
      *(void *)&void v38[2] = "Device_Timebase.cpp";
      __int16 v39 = 1024;
      int v40 = 74;
      __int16 v41 = 2080;
      *(void *)uint64_t v42 = "not (engine->has_time())";
      *(_WORD *)&v42[8] = 2080;
      *(void *)&v42[10] = v17;
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s The engine (%s) must be running in order to translate time", buf, 0x2Cu);
      if (SHIBYTE(v32) < 0) {
        operator delete(v31.__vftable);
      }
      applesauce::CF::StringRef::~StringRef((const void **)&v27);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    __cxa_allocate_exception(0x40uLL);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v6 + 16))(&v22, v6);
    uint64_t v18 = (const __CFString **)applesauce::CF::StringRef::operator->(&v22);
    applesauce::CF::convert_to<std::string,0>((uint64_t)&v25, *v18);
    if (v26 >= 0) {
      std::string v19 = &v25;
    }
    else {
      std::string v19 = (std::logic_error *)v25.__vftable;
    }
    caulk::make_string((caulk *)"The engine (%s) must be running in order to translate time", (uint64_t)&v30, v19);
    std::logic_error::logic_error(&v23, &v30);
    v23.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v31, &v23);
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    int v36 = -1;
    v31.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    __int16 v32 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v31);
    *(void *)&v42[6] = "virtual double AMCP::IO_Core::Device_Timebase::convert_host_to_sample_time(uint64_t) const";
    *(void *)&v42[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    int v43 = 74;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v20);
    char v27 = &unk_1F148AA90;
    std::logic_error v28 = v20;
    uint64_t v29 = v21;
    v20.__vftable = 0;
    v20.__imp_.__imp_ = 0;
    uint64_t v21 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  double v8 = (*(double (**)(uint64_t, uint64_t))(*(void *)v6 + 360))(v6, a2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  return v8;
}

void sub_1BACBA540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44)
{
  applesauce::CF::StringRef::~StringRef((const void **)&a32);
  std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::Device_Timebase::set_clock_anchor_time(os_unfair_lock_s *this)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = this + 16;
  os_unfair_lock_lock(this + 16);
  unint64_t v3 = *(std::__shared_weak_count **)&this[10]._os_unfair_lock_opaque;
  if (!v3
    || (v3 = std::__shared_weak_count::lock(v3), (uint64_t v4 = v3) == 0)
    || (unint64_t v3 = *(std::__shared_weak_count **)&this[8]._os_unfair_lock_opaque) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    double v8 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      long long v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)uint64_t v29 = 2080;
      *(void *)&v29[2] = "Device_Timebase.cpp";
      __int16 v30 = 1024;
      int v31 = 307;
      __int16 v32 = 2080;
      *(void *)uint64_t v33 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v19);
    std::logic_error::logic_error(&v20, &v19);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v22 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v33[6] = "virtual void AMCP::IO_Core::Device_Timebase::set_clock_anchor_time()";
    uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    int v35 = 307;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    uint64_t v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v5 = (AMCP::Log::Scope_Registry *)((uint64_t (*)(std::__shared_weak_count *))v3->__vftable[8].~__shared_weak_count_0)(v3);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)uint64_t v29 = 2080;
      *(void *)&v29[2] = "Device_Timebase.cpp";
      __int16 v30 = 1024;
      int v31 = 308;
      __int16 v32 = 2080;
      *(void *)uint64_t v33 = "not (engine->has_time())";
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v19);
    std::logic_error::logic_error(&v20, &v19);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v22 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v33[6] = "virtual void AMCP::IO_Core::Device_Timebase::set_clock_anchor_time()";
    uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    int v35 = 308;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    uint64_t v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (this[22]._os_unfair_lock_opaque && !LOBYTE(this[26]._os_unfair_lock_opaque))
  {
    uint64_t v6 = mach_absolute_time();
    double v7 = AMCP::IO_Core::Device_Timebase::convert_host_to_sample_time((AMCP::IO_Core::Device_Timebase *)this, v6);
    if (!LOBYTE(this[26]._os_unfair_lock_opaque)) {
      LOBYTE(this[26]._os_unfair_lock_opaque) = 1;
    }
    *(double *)&this[24]._os_unfair_lock_opaque = v7;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);

  os_unfair_lock_unlock(v2);
}

void sub_1BACBAC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  os_unfair_lock_unlock(v35);
  _Unwind_Resume(a1);
}

uint64_t AMCP::IO_Core::Device_Timebase::wait_for_time_to_start(AMCP::Log::Scope_Registry *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v130 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)__p = 0u;
  long long v107 = 0u;
  float v108 = 1.0;
  uint64_t v5 = *(uint64_t ***)(a2 + 16);
  if (v5)
  {
    while (1)
    {
      (*(void (**)(uint8_t *__return_ptr))(*v5[2] + 192))(buf);
      unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)buf) + 8) ^ *(unsigned int *)&buf[4]);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (*(unsigned int *)&buf[4] ^ (v6 >> 47) ^ v6);
      unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      unint64_t v9 = (unint64_t)__p[1];
      if (__p[1])
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
          if ((void *)v8 >= __p[1]) {
            unint64_t v3 = v8 % (unint64_t)__p[1];
          }
        }
        else
        {
          unint64_t v3 = v8 & ((unint64_t)__p[1] - 1);
        }
        uint64_t v11 = (void *)*((void *)__p[0] + v3);
        if (v11)
        {
          for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
          {
            unint64_t v13 = i[1];
            if (v13 == v8)
            {
              if (i[2] == *(void *)buf) {
                goto LABEL_74;
              }
            }
            else
            {
              if (v10.u32[0] > 1uLL)
              {
                if ((void *)v13 >= __p[1]) {
                  v13 %= (unint64_t)__p[1];
                }
              }
              else
              {
                v13 &= (unint64_t)__p[1] - 1;
              }
              if (v13 != v3) {
                break;
              }
            }
          }
        }
      }
      long long v14 = operator new(0x20uLL);
      *long long v14 = 0;
      v14[1] = v8;
      *((_OWORD *)v14 + 1) = *(_OWORD *)buf;
      *(void *)buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      float v15 = (float)(unint64_t)(*((void *)&v107 + 1) + 1);
      if (!v9 || (float)(v108 * (float)v9) < v15) {
        break;
      }
LABEL_64:
      int v31 = __p[0];
      __int16 v32 = (void *)*((void *)__p[0] + v3);
      if (v32)
      {
        *long long v14 = *v32;
LABEL_72:
        void *v32 = v14;
        goto LABEL_73;
      }
      *long long v14 = v107;
      *(void *)&long long v107 = v14;
      v31[v3] = &v107;
      if (*v14)
      {
        unint64_t v33 = *(void *)(*v14 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v33 >= v9) {
            v33 %= v9;
          }
        }
        else
        {
          v33 &= v9 - 1;
        }
        __int16 v32 = (char *)__p[0] + 8 * v33;
        goto LABEL_72;
      }
LABEL_73:
      ++*((void *)&v107 + 1);
LABEL_74:
      a1 = *(AMCP::Log::Scope_Registry **)&buf[8];
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      uint64_t v5 = (uint64_t **)*v5;
      if (!v5)
      {
        unint64_t v35 = (unint64_t)__p[1];
        if (!__p[1]) {
          goto LABEL_132;
        }
        unint64_t v36 = 0xD7C06285B9DE677ALL;
        uint8x8_t v37 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v37.i16[0] = vaddlv_u8(v37);
        if (v37.u32[0] > 1uLL)
        {
          unint64_t v38 = 0xD7C06285B9DE677ALL;
          if (__p[1] <= (void *)0xD7C06285B9DE677ALL) {
            unint64_t v38 = 0xD7C06285B9DE677ALL % (unint64_t)__p[1];
          }
        }
        else
        {
          unint64_t v38 = ((unint64_t)__p[1] - 1) & 0xD7C06285B9DE677ALL;
        }
        __int16 v39 = (long long **)*((void *)__p[0] + v38);
        if (!v39) {
          goto LABEL_132;
        }
        int v40 = *v39;
        if (!*v39) {
          goto LABEL_132;
        }
        unint64_t v41 = (unint64_t)__p[1] - 1;
        while (1)
        {
          unint64_t v42 = *((void *)v40 + 1);
          if (v42 == 0xD7C06285B9DE677ALL)
          {
            if (!*((void *)v40 + 2))
            {
              if (v37.u32[0] > 1uLL)
              {
                if (__p[1] <= (void *)0xD7C06285B9DE677ALL) {
                  unint64_t v36 = 0xD7C06285B9DE677ALL % (unint64_t)__p[1];
                }
              }
              else
              {
                unint64_t v36 = v41 & 0xD7C06285B9DE677ALL;
              }
              int v43 = (long long *)*((void *)__p[0] + v36);
              do
              {
                uint64_t v44 = v43;
                int v43 = *(long long **)v43;
              }
              while (v43 != v40);
              if (v44 == &v107) {
                goto LABEL_122;
              }
              unint64_t v45 = *((void *)v44 + 1);
              if (v37.u32[0] > 1uLL)
              {
                if ((void *)v45 >= __p[1]) {
                  v45 %= (unint64_t)__p[1];
                }
              }
              else
              {
                v45 &= v41;
              }
              if (v45 != v36)
              {
LABEL_122:
                if (!*(void *)v40) {
                  goto LABEL_123;
                }
                unint64_t v46 = *(void *)(*(void *)v40 + 8);
                if (v37.u32[0] > 1uLL)
                {
                  if ((void *)v46 >= __p[1]) {
                    v46 %= (unint64_t)__p[1];
                  }
                }
                else
                {
                  v46 &= v41;
                }
                if (v46 != v36) {
LABEL_123:
                }
                  *((void *)__p[0] + v36) = 0;
              }
              uint64_t v47 = *(void *)v40;
              if (*(void *)v40)
              {
                unint64_t v48 = *(void *)(v47 + 8);
                if (v37.u32[0] > 1uLL)
                {
                  if (v48 >= v35) {
                    v48 %= v35;
                  }
                }
                else
                {
                  v48 &= v41;
                }
                if (v48 != v36)
                {
                  *((void *)__p[0] + v48) = v44;
                  uint64_t v47 = *(void *)v40;
                }
              }
              *(void *)uint64_t v44 = v47;
              *(void *)int v40 = 0;
              --*((void *)&v107 + 1);
              std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<AMCP::Graph::Timebase>,void *>>>::operator()[abi:ne180100](1, v40);
              goto LABEL_132;
            }
          }
          else
          {
            if (v37.u32[0] > 1uLL)
            {
              if ((void *)v42 >= __p[1]) {
                v42 %= (unint64_t)__p[1];
              }
            }
            else
            {
              v42 &= v41;
            }
            if (v42 != v38) {
              goto LABEL_132;
            }
          }
          int v40 = *(long long **)v40;
          if (!v40) {
            goto LABEL_132;
          }
        }
      }
    }
    BOOL v16 = (v9 & (v9 - 1)) != 0;
    if (v9 < 3) {
      BOOL v16 = 1;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v15 / v108);
    if (v17 <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    else {
      int8x8_t prime = (int8x8_t)v17;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = (unint64_t)__p[1];
    }
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v26 = vcvtps_u32_f32((float)*((unint64_t *)&v107 + 1) / v108);
      if (v9 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        unint64_t v26 = std::__next_prime(v26);
      }
      else
      {
        uint64_t v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2) {
          unint64_t v26 = v28;
        }
      }
      if (*(void *)&prime <= v26) {
        int8x8_t prime = (int8x8_t)v26;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = (unint64_t)__p[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          std::logic_error v20 = operator new(8 * *(void *)&prime);
          std::logic_error v21 = __p[0];
          __p[0] = v20;
          if (v21) {
            operator delete(v21);
          }
          uint64_t v22 = 0;
          __p[1] = (void *)prime;
          do
            *((void *)__p[0] + v22++) = 0;
          while (*(void *)&prime != v22);
          uint64_t v23 = (void **)v107;
          if ((void)v107)
          {
            unint64_t v24 = *(void *)(v107 + 8);
            uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(void *)&prime) {
                v24 %= *(void *)&prime;
              }
            }
            else
            {
              v24 &= *(void *)&prime - 1;
            }
            *((void *)__p[0] + v24) = &v107;
            for (j = *v23; j; unint64_t v24 = v30)
            {
              unint64_t v30 = j[1];
              if (v25.u32[0] > 1uLL)
              {
                if (v30 >= *(void *)&prime) {
                  v30 %= *(void *)&prime;
                }
              }
              else
              {
                v30 &= *(void *)&prime - 1;
              }
              if (v30 != v24)
              {
                if (!*((void *)__p[0] + v30))
                {
                  *((void *)__p[0] + v30) = v23;
                  goto LABEL_55;
                }
                NSObject *v23 = (void *)*j;
                void *j = **((void **)__p[0] + v30);
                **((void **)__p[0] + v30) = j;
                j = v23;
              }
              unint64_t v30 = v24;
LABEL_55:
              uint64_t v23 = (void **)j;
              j = (void *)*j;
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v34 = __p[0];
        __p[0] = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v9 = 0;
        __p[1] = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
    goto LABEL_64;
  }
LABEL_132:
  if (!*((void *)&v107 + 1))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v99 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
    {
      v100 = pthread_self();
      mach_port_t v101 = pthread_mach_thread_np(v100);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v101;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Engine.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 73;
      __int16 v126 = 2080;
      *(void *)v127 = "not (!in_engine_list.empty())";
      _os_log_error_impl(&dword_1BAA78000, v99, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Cannot wait for no engines", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v111);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Cannot wait for no engines", (uint64_t)&v118);
    std::logic_error::logic_error(&v109, &v118);
    v109.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v119, &v109);
    uint64_t v121 = 0;
    uint64_t v122 = 0;
    uint64_t v123 = 0;
    int v124 = -1;
    v119.__vftable = (std::runtime_error_vtbl *)&unk_1F1489CC8;
    v120 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v119);
    *(void *)&v127[6] = "static std::vector<Engine_Ptr> AMCP::Core::Engine::wait_for_time_to_start(const std::unordered"
                          "_set<Engine_Ptr> &, const std::atomic_uint32_t &)";
    v128 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Engine.cpp";
    int v129 = 73;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v113);
    std::logic_error v116 = *(std::logic_error *)v113;
    v115 = &unk_1F148AA90;
    uint64_t v117 = v114;
    v113[0] = 0;
    v113[1] = 0;
    uint64_t v114 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  v103 = 0;
  v104 = 0;
  uint64_t v105 = 0;
  memset(&v118, 0, sizeof(v118));
  uint64_t v49 = &v107;
  long long v50 = &v107;
  while (1)
  {
    long long v50 = *(long long **)v50;
    if (!v50) {
      break;
    }
    if (!(*(unsigned int (**)(void))(**((void **)v50 + 2) + 136))(*((void *)v50 + 2)))
    {
      int v51 = pthread_self();
      pthread_mach_thread_np(v51);
      goto LABEL_231;
    }
  }
  for (k = (long long *)v107; k; k = *(long long **)k)
  {
    if (((*(uint64_t (**)(uint64_t))(**((void **)k + 2) + 328))(*((void *)k + 2)) & 1) == 0) {
      std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((uint64_t)&v118, k + 1);
    }
  }
  kdebug_trace();
  AMCP::Core::update_time_for_all(v113, (long long *)v118.__r_.__value_.__l.__data_, (long long *)v118.__r_.__value_.__l.__size_);
  long long v54 = (long long *)v113[0];
  uint64_t v53 = (long long *)v113[1];
  while (v54 != v53)
    std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((uint64_t)&v103, v54++);
  std::string::size_type size = v118.__r_.__value_.__l.__size_;
  uint64_t v56 = (void *)v118.__r_.__value_.__r.__words[0];
  if (v118.__r_.__value_.__r.__words[0] == v118.__r_.__value_.__l.__size_)
  {
    std::string::size_type size = v118.__r_.__value_.__r.__words[0];
  }
  else
  {
    while (1)
    {
      if (v113[0] == v113[1])
      {
        long long v57 = v113[0];
      }
      else
      {
        long long v57 = v113[0];
        while (*v57 != *v56)
        {
          v57 += 2;
          if (v57 == v113[1])
          {
            long long v57 = v113[1];
            break;
          }
        }
      }
      if (v57 != v113[1]) {
        break;
      }
      v56 += 2;
      if (v56 == (void *)v118.__r_.__value_.__l.__size_) {
        goto LABEL_167;
      }
    }
    if (v56 == (void *)v118.__r_.__value_.__l.__size_)
    {
LABEL_167:
      uint64_t v56 = (void *)v118.__r_.__value_.__l.__size_;
      goto LABEL_168;
    }
    __int16 v58 = v56 + 2;
    if (v56 + 2 != (void *)v118.__r_.__value_.__l.__size_)
    {
      do
      {
        uint64_t v59 = v113[0];
        if (v113[0] != v113[1])
        {
          while (*v59 != *v58)
          {
            v59 += 2;
            if (v59 == v113[1])
            {
              uint64_t v59 = v113[1];
              break;
            }
          }
        }
        if (v59 == v113[1])
        {
          long long v60 = *(_OWORD *)v58;
          *__int16 v58 = 0;
          v58[1] = 0;
          uint64_t v61 = (std::__shared_weak_count *)v56[1];
          *(_OWORD *)uint64_t v56 = v60;
          if (v61) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v61);
          }
          v56 += 2;
        }
        v58 += 2;
      }
      while (v58 != (void *)size);
      std::string::size_type size = v118.__r_.__value_.__l.__size_;
    }
  }
LABEL_168:
  std::vector<std::shared_ptr<AMCP::Core::Engine>>::erase((uint64_t)&v118, (uint64_t)v56, size);
  unint64_t v62 = 0;
LABEL_169:
  long long v63 = &v107;
  while (1)
  {
    long long v63 = *(long long **)v63;
    if (!v63) {
      break;
    }
    if (!(*(unsigned int (**)(void))(**((void **)v63 + 2) + 136))(*((void *)v63 + 2))) {
      goto LABEL_214;
    }
  }
  uint64_t v64 = &v107;
  while (1)
  {
    uint64_t v64 = *(long long **)v64;
    if (!v64) {
      break;
    }
    if (((*(uint64_t (**)(void))(**((void **)v64 + 2) + 328))(*((void *)v64 + 2)) & 1) == 0)
    {
      if (v118.__r_.__value_.__r.__words[0] == v118.__r_.__value_.__l.__size_) {
        break;
      }
      if (v62 > 0xF9) {
        break;
      }
      if (atomic_load(a3)) {
        break;
      }
      uint64_t v66 = mach_absolute_time();
      mach_wait_until(v66 + 480000);
      AMCP::Core::update_time_for_all(buf, (long long *)v118.__r_.__value_.__l.__data_, (long long *)v118.__r_.__value_.__l.__size_);
      long long v67 = (char *)v113[0];
      if (v113[0])
      {
        uint64_t v68 = (char *)v113[1];
        uint64_t v69 = v113[0];
        if (v113[1] != v113[0])
        {
          do
          {
            uint64_t v70 = (std::__shared_weak_count *)*((void *)v68 - 1);
            if (v70) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v70);
            }
            v68 -= 16;
          }
          while (v68 != v67);
          uint64_t v69 = v113[0];
        }
        v113[1] = v67;
        operator delete(v69);
      }
      *(_OWORD *)v113 = *(_OWORD *)buf;
      uint64_t v114 = *(void *)&buf[16];
      memset(buf, 0, sizeof(buf));
      v119.__vftable = (std::runtime_error_vtbl *)buf;
      std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
      long long v72 = (long long *)v113[0];
      uint64_t v71 = (long long *)v113[1];
      while (v72 != v71)
        std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((uint64_t)&v103, v72++);
      std::string::size_type v73 = v118.__r_.__value_.__l.__size_;
      uint64_t v74 = (void *)v118.__r_.__value_.__r.__words[0];
      if (v118.__r_.__value_.__r.__words[0] == v118.__r_.__value_.__l.__size_)
      {
        std::string::size_type v73 = v118.__r_.__value_.__r.__words[0];
      }
      else
      {
        while (1)
        {
          if (v113[0] == v113[1])
          {
            uint64_t v75 = v113[0];
          }
          else
          {
            uint64_t v75 = v113[0];
            while (*v75 != *v74)
            {
              v75 += 2;
              if (v75 == v113[1])
              {
                uint64_t v75 = v113[1];
                break;
              }
            }
          }
          if (v75 != v113[1]) {
            break;
          }
          v74 += 2;
          if (v74 == (void *)v118.__r_.__value_.__l.__size_) {
            goto LABEL_212;
          }
        }
        if (v74 == (void *)v118.__r_.__value_.__l.__size_)
        {
LABEL_212:
          uint64_t v74 = (void *)v118.__r_.__value_.__l.__size_;
          goto LABEL_213;
        }
        long long v76 = v74 + 2;
        if (v74 + 2 != (void *)v118.__r_.__value_.__l.__size_)
        {
          do
          {
            uint64_t v77 = v113[0];
            if (v113[0] != v113[1])
            {
              while (*v77 != *v76)
              {
                v77 += 2;
                if (v77 == v113[1])
                {
                  uint64_t v77 = v113[1];
                  break;
                }
              }
            }
            if (v77 == v113[1])
            {
              long long v78 = *(_OWORD *)v76;
              *long long v76 = 0;
              v76[1] = 0;
              v79 = (std::__shared_weak_count *)v74[1];
              *(_OWORD *)uint64_t v74 = v78;
              if (v79) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v79);
              }
              v74 += 2;
            }
            v76 += 2;
          }
          while (v76 != (void *)v73);
          std::string::size_type v73 = v118.__r_.__value_.__l.__size_;
        }
      }
LABEL_213:
      ++v62;
      std::vector<std::shared_ptr<AMCP::Core::Engine>>::erase((uint64_t)&v118, (uint64_t)v74, v73);
      goto LABEL_169;
    }
  }
LABEL_214:
  long long v80 = (AMCP::Log::Scope_Registry *)kdebug_trace();
  unsigned int v81 = atomic_load(a3);
  uint64_t v82 = &v107;
  if (v81)
  {
    AMCP::Log::Scope_Registry::get(v80);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v83 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    uint64_t v82 = &v107;
    if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
    {
      __int16 v94 = pthread_self();
      mach_port_t v95 = pthread_mach_thread_np(v94);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v95;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Engine.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 120;
      _os_log_debug_impl(&dword_1BAA78000, v83, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Engine start interrupted", buf, 0x18u);
      uint64_t v82 = &v107;
    }
  }
  while (1)
  {
    uint64_t v82 = *(long long **)v82;
    if (!v82) {
      break;
    }
    v84 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void))(**((void **)v82 + 2) + 136))(*((void *)v82 + 2));
    if (!v84)
    {
      AMCP::Log::Scope_Registry::get(v84);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      mach_port_t v85 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
      {
        __int16 v86 = pthread_self();
        mach_port_t v87 = pthread_mach_thread_np(v86);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v87;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Engine.cpp";
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = 123;
        __int16 v126 = 2080;
        *(void *)v127 = "(are_all_running(in_engine_list)) == false";
        _os_log_error_impl(&dword_1BAA78000, v85, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Engine start failed", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v112);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v111, "Engine start failed");
      std::runtime_error::runtime_error(&v119, &v111);
      uint64_t v121 = 0;
      uint64_t v122 = 0;
      uint64_t v123 = 0;
      int v124 = -1;
      v119.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      v120 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v119);
      *(void *)&v127[6] = "static std::vector<Engine_Ptr> AMCP::Core::Engine::wait_for_time_to_start(const std::unorder"
                            "ed_set<Engine_Ptr> &, const std::atomic_uint32_t &)";
      v128 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Engine.cpp";
      int v129 = 123;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v109);
      std::logic_error v116 = v109;
      v115 = &unk_1F148AA90;
      uint64_t v117 = v110;
      v109.__vftable = 0;
      v109.__imp_.__imp_ = 0;
      uint64_t v110 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
  }
  while (1)
  {
    uint64_t v49 = *(long long **)v49;
    if (!v49) {
      break;
    }
    __int16 v88 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void))(**((void **)v49 + 2) + 328))(*((void *)v49 + 2));
    if ((v88 & 1) == 0)
    {
      if (!atomic_load(a3))
      {
        AMCP::Log::Scope_Registry::get(v88);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v96 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
        {
          v97 = pthread_self();
          mach_port_t v98 = pthread_mach_thread_np(v97);
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v98;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "Engine.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 127;
          _os_log_error_impl(&dword_1BAA78000, v96, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Engine start timed out", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v112);
        __cxa_allocate_exception(0x40uLL);
        std::runtime_error::runtime_error(&v111, "Engine start timed out");
        std::runtime_error::runtime_error(&v119, &v111);
        uint64_t v121 = 0;
        uint64_t v122 = 0;
        uint64_t v123 = 0;
        int v124 = -1;
        v119.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        v120 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v119);
        *(void *)&v127[6] = "static std::vector<Engine_Ptr> AMCP::Core::Engine::wait_for_time_to_start(const std::unord"
                              "ered_set<Engine_Ptr> &, const std::atomic_uint32_t &)";
        v128 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Engine.cpp";
        int v129 = 127;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v109);
        std::logic_error v116 = v109;
        v115 = &unk_1F148AA90;
        uint64_t v117 = v110;
        v109.__vftable = 0;
        v109.__imp_.__imp_ = 0;
        uint64_t v110 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      break;
    }
  }
  *(void *)buf = v113;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
LABEL_231:
  *(void *)buf = &v118;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (atomic_load(a3))
  {
    uint64_t m = 2;
  }
  else
  {
    for (uint64_t m = *(void *)(a2 + 16); m; uint64_t m = *(void *)m)
    {
      (*(void (**)(uint8_t *__return_ptr))(**(void **)(m + 16) + 192))(buf);
      __int16 v92 = v103;
      if (v103 != v104)
      {
        while (*v92 != *(void *)buf)
        {
          v92 += 2;
          if (v92 == v104)
          {
            __int16 v92 = v104;
            break;
          }
        }
      }
      if (v92 != v104) {
        (*(void (**)(void))(**(void **)(m + 16) + 208))(*(void *)(m + 16));
      }
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
    }
  }
  *(void *)buf = &v103;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table((uint64_t)__p);
  return m;
}

void sub_1BACBBFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,std::runtime_error a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  if (a2)
  {
    *(void *)(v41 - 176) = &a27;
    std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 176));
    *(void *)(v41 - 176) = &a35;
    std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 176));
    *(void *)(v41 - 176) = &a10;
    std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 176));
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BACBBB5CLL);
  }
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count *AMCP::IO_Core::Device_Timebase::get_engine_ptr@<X0>(AMCP::IO_Core::Device_Timebase *this@<X0>, void *a2@<X8>)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (std::__shared_weak_count *)*((void *)this + 5);
  if (!result
    || (uint64_t result = std::__shared_weak_count::lock(result), (a2[1] = result) == 0)
    || (uint64_t v5 = *((void *)this + 4), (*a2 = v5) == 0))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v6 = **(NSObject ***)buf;
    if (*(void *)v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v24);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      unint64_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)unint64_t v24 = 2080;
      *(void *)&v24[2] = "Device_Timebase.cpp";
      __int16 v25 = 1024;
      int v26 = 296;
      __int16 v27 = 2080;
      *(void *)uint64_t v28 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v22);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v14);
    std::logic_error::logic_error(&v15, &v14);
    v15.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v16, &v15);
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v21 = -1;
    v16.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unint64_t v17 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v16);
    *(void *)&v28[6] = "virtual Core::Engine_Ptr AMCP::IO_Core::Device_Timebase::get_engine_ptr() const";
    uint64_t v29 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    int v30 = 296;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v9);
    long long v12 = v9;
    uint64_t v13 = v10;
    long long v9 = 0uLL;
    uint64_t v10 = 0;
    uint64_t v11 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return result;
}

void sub_1BACBC49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::IO_Core::Device_Timebase::available_past_data(AMCP::IO_Core::Device_Timebase *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v2);
    unint64_t v3 = v2;
    if (v2) {
      uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
    }
  }
  else
  {
    unint64_t v3 = 0;
  }
  uint64_t v4 = ((uint64_t (*)(std::__shared_weak_count *))v2->__vftable[5].~__shared_weak_count_0)(v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v4;
}

uint64_t AMCP::IO_Core::Device_Timebase::supports_past_data(AMCP::IO_Core::Device_Timebase *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v2);
    unint64_t v3 = v2;
    if (v2) {
      uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
    }
  }
  else
  {
    unint64_t v3 = 0;
  }
  uint64_t v4 = ((uint64_t (*)(std::__shared_weak_count *))v2->__vftable[4].__get_deleter)(v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v4;
}

BOOL AMCP::IO_Core::Device_Timebase::is_valid(AMCP::IO_Core::Device_Timebase *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  BOOL v4 = *((void *)this + 4) != 0;
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v4;
}

double AMCP::IO_Core::Device_Timebase::get_rate_scalar(AMCP::IO_Core::Device_Timebase *this)
{
  AMCP::IO_Core::Device_Timebase::get_current_time(this);
  return v2;
}

void AMCP::IO_Core::Device_Timebase::get_current_time(AMCP::IO_Core::Device_Timebase *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  double v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (!v2
    || (v2 = std::__shared_weak_count::lock(v2), (unint64_t v3 = v2) == 0)
    || (double v2 = (std::__shared_weak_count *)*((void *)this + 4)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    BOOL v4 = **(NSObject ***)buf;
    if (*(void *)v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v22);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = pthread_self();
      mach_port_t v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)char v22 = 2080;
      *(void *)&v22[2] = "Device_Timebase.cpp";
      __int16 v23 = 1024;
      int v24 = 41;
      __int16 v25 = 2080;
      *(void *)int v26 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v12);
    std::logic_error::logic_error(&v13, &v12);
    v13.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v14, &v13);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = -1;
    v14.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    std::logic_error v15 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(void *)&v26[6] = "virtual CA::TimeStamp AMCP::IO_Core::Device_Timebase::get_current_time() const";
    __int16 v27 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    int v28 = 41;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v7);
    long long v10 = v7;
    uint64_t v11 = v8;
    long long v7 = 0uLL;
    uint64_t v8 = 0;
    long long v9 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  ((void (*)(std::__shared_weak_count *))v2->__vftable[8].__on_zero_shared)(v2);

  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
}

void sub_1BACBC9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(exception_object);
}

double AMCP::IO_Core::Device_Timebase::get_sample_rate(AMCP::IO_Core::Device_Timebase *this)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  double v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (!v2
    || (v2 = std::__shared_weak_count::lock(v2), (unint64_t v3 = v2) == 0)
    || (double v2 = (std::__shared_weak_count *)*((void *)this + 4)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v6 = **(NSObject ***)buf;
    if (*(void *)v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v26);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      long long v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      long long v9 = (void *)((char *)this + 8);
      if (*((char *)this + 31) < 0) {
        long long v9 = (void *)*v9;
      }
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)int v26 = 2080;
      *(void *)&v26[2] = "Device_Timebase.cpp";
      __int16 v27 = 1024;
      int v28 = 255;
      __int16 v29 = 2080;
      *(void *)int v30 = "not (engine.operator BOOL())";
      *(_WORD *)&v30[8] = 2080;
      *(void *)&v30[10] = v9;
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No engine for %s", buf, 0x2Cu);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    __cxa_allocate_exception(0x40uLL);
    long long v10 = (void *)((char *)this + 8);
    if (*((char *)this + 31) < 0) {
      long long v10 = (void *)*v10;
    }
    caulk::make_string((caulk *)"No engine for %s", (uint64_t)&v16, v10);
    std::logic_error::logic_error(&v17, &v16);
    v17.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v18, &v17);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v23 = -1;
    v18.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v19 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v18);
    *(void *)&v30[6] = "virtual Sample_Rate AMCP::IO_Core::Device_Timebase::get_sample_rate() const";
    *(void *)&v30[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    int v31 = 255;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v11);
    long long v14 = v11;
    uint64_t v15 = v12;
    long long v11 = 0uLL;
    uint64_t v12 = 0;
    std::logic_error v13 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  double v4 = ((double (*)(std::__shared_weak_count *))v2->__get_deleter)(v2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v4;
}

void sub_1BACBCD60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28)
{
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  _Unwind_Resume(exception_object);
}

unint64_t AMCP::IO_Core::Device_Timebase::get_engine_info(uint64_t a1, int a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v3 || (v3 = std::__shared_weak_count::lock(v3), (uint64_t v5 = v3) == 0) || (v6 = *(uint64_t **)(a1 + 32)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v12 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      std::logic_error v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)int v30 = 2080;
      *(void *)&v30[2] = "Device_Timebase.cpp";
      __int16 v31 = 1024;
      int v32 = 209;
      __int16 v33 = 2080;
      *(void *)uint64_t v34 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v20);
    std::logic_error::logic_error(&v21, &v20);
    v21.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v22, &v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v23 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    *(void *)&v34[6] = "virtual Engine_Info AMCP::IO_Core::Device_Timebase::get_engine_info(Buffer_Alignment) const";
    unint64_t v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    int v36 = 209;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    std::logic_error v17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v7 = *v6;
  if (a2 == 1)
  {
    unsigned int v8 = (*(uint64_t (**)(uint64_t *))(v7 + 80))(v6);
    uint64_t v9 = (*(uint64_t (**)(uint64_t *))(*v6 + 96))(v6);
  }
  else
  {
    unsigned int v8 = (*(uint64_t (**)(uint64_t *))(v7 + 88))(v6);
    uint64_t v9 = (*(uint64_t (**)(uint64_t *))(*v6 + 104))(v6);
  }
  uint64_t v10 = v9;
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  return v8 | (unint64_t)(v10 << 32);
}

void sub_1BACBD184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::IO_Core::Device_Timebase::get_anchor_time(AMCP::IO_Core::Device_Timebase *this)
{
  return *((void *)this + 12);
}

void AMCP::IO_Core::Device_Timebase::get_state(AMCP::IO_Core::Device_Timebase *this@<X0>, AMCP::IO_Core::Play_State_Manager *a2@<X8>)
{
  double v4 = (os_unfair_lock_s *)((char *)this + 64);
  os_unfair_lock_lock((os_unfair_lock_t)this + 16);
  AMCP::IO_Core::Play_State_Manager::get_state_snapshot(a2, (unint64_t *)this + 9);

  os_unfair_lock_unlock(v4);
}

void sub_1BACBD2AC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::IO_Core::Device_Timebase::is_running(AMCP::IO_Core::Device_Timebase *this)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  double v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (!v2
    || (v2 = std::__shared_weak_count::lock(v2), (unint64_t v3 = v2) == 0)
    || (double v2 = (std::__shared_weak_count *)*((void *)this + 4)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v6 = **(NSObject ***)buf;
    if (*(void *)v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v24);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)uint64_t v24 = 2080;
      *(void *)&v24[2] = "Device_Timebase.cpp";
      __int16 v25 = 1024;
      int v26 = 106;
      __int16 v27 = 2080;
      *(void *)char v28 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v22);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v14);
    std::logic_error::logic_error(&v15, &v14);
    v15.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v16, &v15);
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v21 = -1;
    v16.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    std::logic_error v17 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v16);
    *(void *)&v28[6] = "virtual BOOL AMCP::IO_Core::Device_Timebase::is_running() const";
    __int16 v29 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    int v30 = 106;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v9);
    long long v12 = v9;
    uint64_t v13 = v10;
    long long v9 = 0uLL;
    uint64_t v10 = 0;
    long long v11 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  BOOL v4 = ((unsigned int (*)(std::__shared_weak_count *))v2->__vftable[3].__on_zero_shared)(v2) != 0;
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v4;
}

void sub_1BACBD58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::IO_Core::Device_Timebase::stop(uint64_t a1, int a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  BOOL v4 = (os_unfair_lock_s *)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
  {
    mach_port_t v6 = std::__shared_weak_count::lock(v5);
    if (v6) {
      uint64_t v7 = *(void *)(a1 + 32);
    }
    else {
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
    mach_port_t v6 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Device_Timebase");
  uint64_t v8 = AMCP::IO_Core::Play_State_Manager::stop((uint64_t *)(a1 + 72), a2, (uint64_t *)&__p);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p);
  }
  int v9 = *(_DWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 88) = v8;
  if (v9 != v8 && v7) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 144))(v7, v8);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 56);
  if (v10)
  {
    long long v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      long long v12 = v11;
      if (!*(_DWORD *)(a1 + 88))
      {
        uint64_t v13 = *(void *)(a1 + 48);
        if (v13)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v11);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
          std::string v14 = *(NSObject **)__p;
          if (*(void *)v21) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v21);
          }
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            std::logic_error v15 = pthread_self();
            mach_port_t v16 = pthread_mach_thread_np(v15);
            std::logic_error v17 = (void *)(a1 + 8);
            if (*(char *)(a1 + 31) < 0) {
              std::logic_error v17 = (void *)*v17;
            }
            LODWORD(__p) = 67109890;
            HIDWORD(__p) = v16;
            *(_WORD *)int v21 = 2080;
            *(void *)&v21[2] = "Device_Timebase.cpp";
            __int16 v22 = 1024;
            int v23 = 197;
            __int16 v24 = 2080;
            __int16 v25 = v17;
            _os_log_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_INFO, "%6u %32s:%-5d stop - timebase swap: %s", (uint8_t *)&__p, 0x22u);
          }
          atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          uint64_t v18 = *(std::__shared_weak_count **)(a1 + 40);
          *(void *)(a1 + 32) = v13;
          *(void *)(a1 + 40) = v12;
          if (v18) {
            std::__shared_weak_count::__release_weak(v18);
          }
          uint64_t v19 = *(std::__shared_weak_count **)(a1 + 56);
          *(void *)(a1 + 48) = 0;
          *(void *)(a1 + 56) = 0;
          if (v19) {
            std::__shared_weak_count::__release_weak(v19);
          }
          if (*(unsigned char *)(a1 + 104)) {
            *(unsigned char *)(a1 + 104) = 0;
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  os_unfair_lock_unlock(v4);
}

void sub_1BACBD890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, __int16 a11, __int16 a12, int a13, __int16 a14, uint64_t a15)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  os_unfair_lock_unlock(v15);
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::Device_Timebase::begin_cycle(AMCP::IO_Core::Device_Timebase *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  double v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (!v2
    || (v2 = std::__shared_weak_count::lock(v2), (unint64_t v3 = v2) == 0)
    || (double v2 = (std::__shared_weak_count *)*((void *)this + 4)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    BOOL v4 = **(NSObject ***)buf;
    if (*(void *)v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v22);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = pthread_self();
      mach_port_t v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)__int16 v22 = 2080;
      *(void *)&v22[2] = "Device_Timebase.cpp";
      __int16 v23 = 1024;
      int v24 = 232;
      __int16 v25 = 2080;
      *(void *)uint64_t v26 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v12);
    std::logic_error::logic_error(&v13, &v12);
    v13.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v14, &v13);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = -1;
    v14.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    std::logic_error v15 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(void *)&v26[6] = "virtual void AMCP::IO_Core::Device_Timebase::begin_cycle()";
    __int16 v27 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    int v28 = 232;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v7);
    long long v10 = v7;
    uint64_t v11 = v8;
    long long v7 = 0uLL;
    uint64_t v8 = 0;
    int v9 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  ((void (*)(std::__shared_weak_count *))v2->__vftable[7].__on_zero_shared_weak)(v2);

  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
}

void sub_1BACBDCCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::IO_Core::Device_Timebase::start(uint64_t a1, int a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  BOOL v4 = (os_unfair_lock_s *)(a1 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v5 || (uint64_t v5 = std::__shared_weak_count::lock(v5), (v6 = v5) == 0) || (v7 = *(void *)(a1 + 32)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    std::logic_error v14 = *(NSObject **)__p;
    if (*(void *)v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v39);
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      std::logic_error v15 = pthread_self();
      mach_port_t v16 = pthread_mach_thread_np(v15);
      LODWORD(__p) = 67109890;
      HIDWORD(__p) = v16;
      *(_WORD *)__int16 v39 = 2080;
      *(void *)&v39[2] = "Device_Timebase.cpp";
      __int16 v40 = 1024;
      int v41 = 125;
      __int16 v42 = 2080;
      *(void *)int v43 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v37);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v29);
    std::logic_error::logic_error(&v30, &v29);
    v30.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v31, &v30);
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    int v36 = -1;
    v31.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v32 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v31);
    *(void *)&v43[6] = "virtual void AMCP::IO_Core::Device_Timebase::start(Play_State_Manager::Play_Request)";
    *(void *)&v43[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    int v44 = 125;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v24);
    long long v27 = v24;
    uint64_t v28 = v25;
    long long v24 = 0uLL;
    uint64_t v25 = 0;
    uint64_t v26 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Device_Timebase");
  uint64_t v8 = (AMCP::Log::Scope_Registry *)AMCP::IO_Core::Play_State_Manager::start((uint64_t *)(a1 + 72), a2, (uint64_t *)&__p);
  int v9 = (int)v8;
  if (SHIBYTE(v41) < 0) {
    operator delete(__p);
  }
  if (!v9)
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    int v21 = *(NSObject **)__p;
    if (*(void *)v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v39);
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      __int16 v22 = pthread_self();
      mach_port_t v23 = pthread_mach_thread_np(v22);
      LODWORD(__p) = 67109890;
      HIDWORD(__p) = v23;
      *(_WORD *)__int16 v39 = 2080;
      *(void *)&v39[2] = "Device_Timebase.cpp";
      __int16 v40 = 1024;
      int v41 = 131;
      __int16 v42 = 2080;
      *(void *)int v43 = "not (new_state == Transport_State::on or new_state == Transport_State::prewarm)";
      _os_log_error_impl(&dword_1BAA78000, v21, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s IO_Thread::start: Start failed to change the prewarming state in a reasonable way", (uint8_t *)&__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v37);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"IO_Thread::start: Start failed to change the prewarming state in a reasonable way", (uint64_t)&v29);
    std::logic_error::logic_error(&v30, &v29);
    v30.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v31, &v30);
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    int v36 = -1;
    v31.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v32 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v31);
    *(void *)&v43[6] = "virtual void AMCP::IO_Core::Device_Timebase::start(Play_State_Manager::Play_Request)";
    *(void *)&v43[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    int v44 = 131;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v24);
    long long v27 = v24;
    uint64_t v28 = v25;
    long long v24 = 0uLL;
    uint64_t v25 = 0;
    uint64_t v26 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  int v10 = *(_DWORD *)(a1 + 88);
  if (*(void *)(a1 + 80))
  {
    BOOL v11 = 1;
    if (v10) {
      goto LABEL_14;
    }
  }
  else
  {
    BOOL v11 = *(void *)(a1 + 72) != 0;
    if (v10) {
      goto LABEL_14;
    }
  }
  if (v11 && *(unsigned char *)(a1 + 104)) {
    *(unsigned char *)(a1 + 104) = 0;
  }
LABEL_14:
  *(_DWORD *)(a1 + 88) = v9;
  if (v10 != v9)
  {
    AMCP::Logging_Settings::instance(v8);
    if (HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance)
      || (AMCP::Logging_Settings::instance(v12), BYTE2(AMCP::Logging_Settings::instance(void)::s_instance)))
    {
      AMCP::Log::Scope_Registry::get(v12);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
      std::logic_error v13 = *(NSObject **)__p;
      if (*(void *)v39) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v39);
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = pthread_self();
        mach_port_t v18 = pthread_mach_thread_np(v17);
        int v19 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v19 = (void *)*v19;
        }
        std::string::basic_string[abi:ne180100]<0>(&v31, off_1E6235910[*(int *)(a1 + 88)]);
        char v20 = &v31;
        if (SHIBYTE(v32) < 0) {
          char v20 = v31.__vftable;
        }
        LODWORD(__p) = 67110146;
        HIDWORD(__p) = v18;
        *(_WORD *)__int16 v39 = 2080;
        *(void *)&v39[2] = "Device_Timebase.cpp";
        __int16 v40 = 1024;
        int v41 = 147;
        __int16 v42 = 2080;
        *(void *)int v43 = v19;
        *(_WORD *)&v43[8] = 2080;
        *(void *)&unsigned char v43[10] = v20;
        _os_log_debug_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Engine(\"%s\")::set_transport_state: %s", (uint8_t *)&__p, 0x2Cu);
        if (SHIBYTE(v32) < 0) {
          operator delete(v31.__vftable);
        }
      }
    }
    (*(void (**)(uint64_t, void))(*(void *)v7 + 144))(v7, *(unsigned int *)(a1 + 88));
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  os_unfair_lock_unlock(v4);
}

void sub_1BACBE420(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,NSObject **buf,std::__shared_weak_count *a30,__int16 a31,__int16 a32,int a33,__int16 a34)
{
  if (a2)
  {
    __int16 v39 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(a1);
    AMCP::Log::Scope_Registry::get(v39);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    __int16 v40 = *buf;
    if (a30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a30);
    }
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      int v41 = pthread_self();
      mach_port_t v42 = pthread_mach_thread_np(v41);
      int v43 = (void *)(v35 + 8);
      if (*(char *)(v35 + 31) < 0) {
        int v43 = (void *)*v43;
      }
      LODWORD(buf) = 67109890;
      HIDWORD(buf) = v42;
      LOWORD(a30) = 2080;
      *(void *)(v38 + 10) = "Device_Timebase.cpp";
      a32 = 1024;
      a33 = 153;
      a34 = 2080;
      *(void *)(v38 + 26) = v43;
      _os_log_error_impl(&dword_1BAA78000, v40, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Error starting device: %s", (uint8_t *)&buf, 0x22u);
    }
    *(_DWORD *)(v35 + 88) = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 136))(v37);
    std::string::basic_string[abi:ne180100]<0>(&buf, "Device_Timebase");
    AMCP::IO_Core::Play_State_Manager::stop(v36, v34, (uint64_t *)&buf);
    if (SHIBYTE(a33) < 0) {
      operator delete(buf);
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x1BACBE6F8);
}

void sub_1BACBE550(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

void sub_1BACBE57C(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BACBE580);
  }
  __clang_call_terminate(a1);
}

void sub_1BACBE58C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1BACBE6E8);
}

void sub_1BACBE5AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl((uint64_t)&a35);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a24);
  MEMORY[0x1C1859090](&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v36) {
    __cxa_free_exception(v35);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a34);
  JUMPOUT(0x1BACBE6E8);
}

void sub_1BACBE630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  os_unfair_lock_unlock(v35);
  _Unwind_Resume(a1);
}

double AMCP::IO_Core::Device_Timebase::get_host_ticks_per_frame(AMCP::IO_Core::Device_Timebase *this)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  double v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (!v2
    || (v2 = std::__shared_weak_count::lock(v2), (unint64_t v3 = v2) == 0)
    || (double v2 = (std::__shared_weak_count *)*((void *)this + 4)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v6 = **(NSObject ***)buf;
    if (*(void *)v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v24);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)long long v24 = 2080;
      *(void *)&v24[2] = "Device_Timebase.cpp";
      __int16 v25 = 1024;
      int v26 = 86;
      __int16 v27 = 2080;
      *(void *)uint64_t v28 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v22);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v14);
    std::logic_error::logic_error(&v15, &v14);
    v15.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v16, &v15);
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v21 = -1;
    v16.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v17 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v16);
    *(void *)&v28[6] = "virtual double AMCP::IO_Core::Device_Timebase::get_host_ticks_per_frame() const";
    std::string v29 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    int v30 = 86;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v9);
    long long v12 = v9;
    uint64_t v13 = v10;
    long long v9 = 0uLL;
    uint64_t v10 = 0;
    BOOL v11 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  double v4 = ((double (*)(std::__shared_weak_count *))v2->__vftable[8].__get_deleter)(v2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v4;
}

void sub_1BACBE9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::IO_Core::Device_Timebase::convert_sample_to_host_time(AMCP::IO_Core::Device_Timebase *this, double a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (!v3 || (v3 = std::__shared_weak_count::lock(v3), (uint64_t v5 = v3) == 0) || (v6 = *((void *)this + 4)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v10 = **(NSObject ***)buf;
    if (*(void *)v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v38);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      BOOL v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)uint64_t v38 = 2080;
      *(void *)&void v38[2] = "Device_Timebase.cpp";
      __int16 v39 = 1024;
      int v40 = 62;
      __int16 v41 = 2080;
      *(void *)mach_port_t v42 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v23);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v30);
    std::logic_error::logic_error(&v20, &v30);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v31, &v20);
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    int v36 = -1;
    v31.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v32 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v31);
    *(void *)&v42[6] = "virtual uint64_t AMCP::IO_Core::Device_Timebase::convert_sample_to_host_time(double) const";
    *(void *)&v42[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    int v43 = 62;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v25);
    __int16 v27 = &unk_1F148AA90;
    std::logic_error v28 = v25;
    uint64_t v29 = v26;
    std::logic_error v25 = (std::logic_error)0;
    uint64_t v26 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v7 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void))(*(void *)v6 + 328))(*((void *)this + 4));
  if ((v7 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v13 = **(NSObject ***)buf;
    if (*(void *)v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v38);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      std::string v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v6 + 16))(&v27, v6);
      std::logic_error v16 = (const __CFString **)applesauce::CF::StringRef::operator->(&v27);
      applesauce::CF::convert_to<std::string,0>((uint64_t)&v31, *v16);
      if (SHIBYTE(v32) >= 0) {
        uint64_t v17 = &v31;
      }
      else {
        uint64_t v17 = v31.__vftable;
      }
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v15;
      *(_WORD *)uint64_t v38 = 2080;
      *(void *)&void v38[2] = "Device_Timebase.cpp";
      __int16 v39 = 1024;
      int v40 = 63;
      __int16 v41 = 2080;
      *(void *)mach_port_t v42 = "not (engine->has_time())";
      *(_WORD *)&v42[8] = 2080;
      *(void *)&v42[10] = v17;
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s The engine (%s) must be running in order to translate time", buf, 0x2Cu);
      if (SHIBYTE(v32) < 0) {
        operator delete(v31.__vftable);
      }
      applesauce::CF::StringRef::~StringRef((const void **)&v27);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    __cxa_allocate_exception(0x40uLL);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v6 + 16))(&v22, v6);
    uint64_t v18 = (const __CFString **)applesauce::CF::StringRef::operator->(&v22);
    applesauce::CF::convert_to<std::string,0>((uint64_t)&v25, *v18);
    if (v26 >= 0) {
      uint64_t v19 = &v25;
    }
    else {
      uint64_t v19 = (std::logic_error *)v25.__vftable;
    }
    caulk::make_string((caulk *)"The engine (%s) must be running in order to translate time", (uint64_t)&v30, v19);
    std::logic_error::logic_error(&v23, &v30);
    v23.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v31, &v23);
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    int v36 = -1;
    v31.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v32 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v31);
    *(void *)&v42[6] = "virtual uint64_t AMCP::IO_Core::Device_Timebase::convert_sample_to_host_time(double) const";
    *(void *)&v42[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    int v43 = 63;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v20);
    __int16 v27 = &unk_1F148AA90;
    std::logic_error v28 = v20;
    uint64_t v29 = v21;
    v20.__vftable = 0;
    v20.__imp_.__imp_ = 0;
    uint64_t v21 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, double))(*(void *)v6 + 352))(v6, a2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  return v8;
}

void sub_1BACBF090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44)
{
  applesauce::CF::StringRef::~StringRef((const void **)&a32);
  std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  _Unwind_Resume(a1);
}

uint64_t AMCP::IO_Core::Device_Timebase::get_clock_domain(AMCP::IO_Core::Device_Timebase *this)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  double v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (!v2
    || (v2 = std::__shared_weak_count::lock(v2), (unint64_t v3 = v2) == 0)
    || (double v2 = (std::__shared_weak_count *)*((void *)this + 4)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v6 = **(NSObject ***)buf;
    if (*(void *)v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v24);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)char v24 = 2080;
      *(void *)&v24[2] = "Device_Timebase.cpp";
      __int16 v25 = 1024;
      int v26 = 96;
      __int16 v27 = 2080;
      *(void *)std::logic_error v28 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v22);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v14);
    std::logic_error::logic_error(&v15, &v14);
    v15.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v16, &v15);
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v21 = -1;
    v16.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v17 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v16);
    *(void *)&v28[6] = "virtual uint32_t AMCP::IO_Core::Device_Timebase::get_clock_domain() const";
    uint64_t v29 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    int v30 = 96;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v9);
    long long v12 = v9;
    uint64_t v13 = v10;
    long long v9 = 0uLL;
    uint64_t v10 = 0;
    BOOL v11 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v4 = ((uint64_t (*)(std::__shared_weak_count *))v2->__vftable[1].~__shared_weak_count_0)(v2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v4;
}

void sub_1BACBF4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::IO_Core::Device_Timebase::get_last_zero_time_stamp(AMCP::IO_Core::Device_Timebase *this)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  double v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (!v2 || (v2 = std::__shared_weak_count::lock(v2), (v3 = v2) == 0) || (uint64_t v4 = *((void *)this + 4)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v6 = **(NSObject ***)buf;
    if (*(void *)v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v34);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)uint64_t v34 = 2080;
      *(void *)&v34[2] = "Device_Timebase.cpp";
      __int16 v35 = 1024;
      int v36 = 51;
      __int16 v37 = 2080;
      *(void *)uint64_t v38 = "not (engine.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v19);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v26);
    std::logic_error::logic_error(&v16, &v26);
    v16.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v27, &v16);
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    int v32 = -1;
    v27.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    std::logic_error v28 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v27);
    *(void *)&v38[6] = "virtual CA::TimeStamp AMCP::IO_Core::Device_Timebase::get_last_zero_time_stamp() const";
    *(void *)&v38[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    int v39 = 51;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
    std::logic_error v23 = &unk_1F148AA90;
    std::logic_error v24 = v21;
    uint64_t v25 = v22;
    std::logic_error v21 = (std::logic_error)0;
    uint64_t v22 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v5 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 328))(v4);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v9 = **(NSObject ***)buf;
    if (*(void *)v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v34);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v4 + 16))(&v23, v4);
      long long v12 = (const __CFString **)applesauce::CF::StringRef::operator->(&v23);
      applesauce::CF::convert_to<std::string,0>((uint64_t)&v27, *v12);
      if (SHIBYTE(v28) >= 0) {
        uint64_t v13 = &v27;
      }
      else {
        uint64_t v13 = v27.__vftable;
      }
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)uint64_t v34 = 2080;
      *(void *)&v34[2] = "Device_Timebase.cpp";
      __int16 v35 = 1024;
      int v36 = 52;
      __int16 v37 = 2080;
      *(void *)uint64_t v38 = "not (engine->has_time())";
      *(_WORD *)&v38[8] = 2080;
      *(void *)&unsigned char v38[10] = v13;
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s engine (%s) does not have time", buf, 0x2Cu);
      if (SHIBYTE(v28) < 0) {
        operator delete(v27.__vftable);
      }
      applesauce::CF::StringRef::~StringRef((const void **)&v23);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    __cxa_allocate_exception(0x40uLL);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v4 + 16))(&v18, v4);
    std::string v14 = (const __CFString **)applesauce::CF::StringRef::operator->(&v18);
    applesauce::CF::convert_to<std::string,0>((uint64_t)&v21, *v14);
    if (v22 >= 0) {
      std::logic_error v15 = &v21;
    }
    else {
      std::logic_error v15 = (std::logic_error *)v21.__vftable;
    }
    caulk::make_string((caulk *)"engine (%s) does not have time", (uint64_t)&v26, v15);
    std::logic_error::logic_error(&v19, &v26);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v27, &v19);
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    int v32 = -1;
    v27.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    std::logic_error v28 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v27);
    *(void *)&v38[6] = "virtual CA::TimeStamp AMCP::IO_Core::Device_Timebase::get_last_zero_time_stamp() const";
    *(void *)&v38[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Timebase.cpp";
    int v39 = 52;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    std::logic_error v23 = &unk_1F148AA90;
    std::logic_error v24 = v16;
    uint64_t v25 = v17;
    v16.__vftable = 0;
    v16.__imp_.__imp_ = 0;
    uint64_t v17 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 304))(v4);

  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
}

void sub_1BACBFBA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44)
{
  applesauce::CF::StringRef::~StringRef((const void **)&a32);
  std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::Device_Timebase::get_underlying_device_uid(AMCP::IO_Core::Device_Timebase *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v4 && (uint64_t v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *((void *)this + 4);
    if (v7)
    {
      (*(void (**)(CFTypeRef *__return_ptr))(*(void *)v7 + 16))(&cf);
      if (!cf)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)a2, (const __CFString *)cf);
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_1BACBFE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v11);
  applesauce::CF::StringRef::~StringRef(&a10);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t AMCP::IO_Core::Device_Timebase::get_clock_id(AMCP::IO_Core::Device_Timebase *this)
{
  return (uint64_t)this + 8;
}

void AMCP::IO_Core::Device_Timebase::~Device_Timebase(AMCP::IO_Core::Device_Timebase *this)
{
  AMCP::IO_Core::Device_Timebase::~Device_Timebase(this);

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  double v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

void CAException::~CAException(std::exception *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x1C1859840);
}

uint64_t CAXException::what(CAXException *this)
{
  return (uint64_t)this + 8;
}

void CAXException::~CAXException(std::exception *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x1C1859840);
}

void virtual thunk to'CAException::~CAException(CAException *this)
{
}

{
  uint64_t vars8;

  std::exception::~exception((std::exception *)((char *)this + *(void *)(*(void *)this - 24)));

  JUMPOUT(0x1C1859840);
}

OS::CF::MutableDictionary *OS::CF::MutableDictionary::MutableDictionary(OS::CF::MutableDictionary *a1, uint64_t a2, unint64_t a3)
{
  OS::CF::MutableDictionary::MutableDictionary(a1);
  OS::CF::Dictionary::Dictionary(v7, a2, a3);
  OS::CF::MutableDictionary::operator=((uint64_t)a1, v7[1]);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v7);
  return a1;
}

void sub_1BACC0040(_Unwind_Exception *a1)
{
  OS::CF::UntypedObject::~UntypedObject(v1);
  _Unwind_Resume(a1);
}

uint64_t OS::CF::MutableDictionary::operator=(uint64_t a1, CFDictionaryRef theDict)
{
  if (theDict) {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  }
  else {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  }

  return OS::CF::UntypedObject::operator=(a1, (uint64_t)MutableCopy);
}

uint64_t HALB_PowerAssertion::HALB_PowerAssertion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = a6;
  *(void *)(a1 + 8) = 0;
  OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(a1 + 16), *(CFTypeRef *)(a2 + 8));
  *(void *)(a1 + 16) = &unk_1F1489A20;
  OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(a1 + 32), *(CFTypeRef *)(a3 + 8));
  *(void *)(a1 + 32) = &unk_1F1489A20;
  *(void *)(a1 + 48) = a4;
  uint64_t v11 = *(void *)(a2 + 8);
  *(void *)buf = @"AssertType";
  *(void *)&uint8_t buf[8] = v11;
  uint64_t v12 = *(void *)(a3 + 8);
  *(void *)&buf[16] = @"AssertName";
  uint64_t v19 = v12;
  OS::CF::Number::Number<int>(v15, 0);
  char v20 = @"AssertLevel";
  uint64_t v21 = v15[1];
  uint64_t v22 = @"ResourcesUsed";
  uint64_t v23 = a5;
  OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)v16, (uint64_t)buf, 4uLL);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v15);
  if (AssertionProperties)
  {
    if ((a4 & 0xFF00000000) != 0)
    {
      OS::CF::Number::Number<int>(buf, a4);
      OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(AssertionProperties, @"AssertionOnBehalfOfPID", *(const void **)&buf[8]);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
    }
    if (!*(_DWORD *)(a1 + 4))
    {
      OS::CF::Boolean::Boolean((OS::CF::Boolean *)buf, 1);
      OS::CF::MutableDictionary::SetValueForKey<OS::CF::Boolean>(AssertionProperties, @"AllowsDeviceRestart", *(const void **)&buf[8]);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
    }
    IOReturn v13 = IOPMAssertionCreateWithProperties(AssertionProperties, (IOPMAssertionID *)a1);
    if (v13 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALB_PowerAssertion.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 90;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v13;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_PowerAssertion::HALB_PowerAssertion: failed to create the power assertion, Error: 0x%X", buf, 0x18u);
    }
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v16);
  return a1;
}

void sub_1BACC02F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va);
  OS::CF::UntypedObject::~UntypedObject(v4);
  OS::CF::UntypedObject::~UntypedObject(v3);
  _Unwind_Resume(a1);
}

void HALB_PowerAssertion::Take(std::chrono::system_clock::time_point *this)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  OS::CF::String::AsCString((CFIndex)&this[2], (UInt8 *)v38, 256);
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  *(_OWORD *)uint64_t v22 = 0u;
  long long v23 = 0u;
  OS::CF::String::AsCString((CFIndex)&this[4], (UInt8 *)v22, 256);
  this[1].__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  int v2 = BYTE4(this[6].__d_.__rep_);
  BOOL v3 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v3)
    {
      IOReturn rep = this->__d_.__rep_;
      int v5 = this[6].__d_.__rep_;
      int v12 = 136316418;
      *(void *)theValue = "HALB_PowerAssertion.cpp";
      *(_WORD *)&theValue[8] = 1024;
      *(_DWORD *)&theValue[10] = 115;
      __int16 v14 = 1024;
      IOReturn v15 = rep;
      __int16 v16 = 2082;
      uint64_t v17 = v38;
      __int16 v18 = 2082;
      uint64_t v19 = v22;
      __int16 v20 = 1024;
      int v21 = v5;
      uint64_t v6 = MEMORY[0x1E4F14500];
      uint64_t v7 = "%25s:%-5d  HALB_PowerAssertion::Take: taking power assertion ID %u of type '%{public}s' with name: '%{public}"
           "s' on behalf of %d";
      uint32_t v8 = 50;
LABEL_6:
      _os_log_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v12, v8);
    }
  }
  else if (v3)
  {
    IOReturn v9 = this->__d_.__rep_;
    int v12 = 136316162;
    *(void *)theValue = "HALB_PowerAssertion.cpp";
    *(_WORD *)&theValue[8] = 1024;
    *(_DWORD *)&theValue[10] = 119;
    __int16 v14 = 1024;
    IOReturn v15 = v9;
    __int16 v16 = 2082;
    uint64_t v17 = v38;
    __int16 v18 = 2082;
    uint64_t v19 = v22;
    uint64_t v6 = MEMORY[0x1E4F14500];
    uint64_t v7 = "%25s:%-5d  HALB_PowerAssertion::Take: taking power assertion ID %u of type '%{public}s' with name: '%{public}s'";
    uint32_t v8 = 44;
    goto LABEL_6;
  }
  IOPMAssertionID v10 = this->__d_.__rep_;
  if (v10)
  {
    OS::CF::Number::Number<int>(&v12, 255);
    IOReturn v11 = IOPMAssertionSetProperty(v10, @"AssertLevel", *(CFTypeRef *)&theValue[4]);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v12);
    if (v11)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v12 = 136315650;
        *(void *)theValue = "HALB_PowerAssertion.cpp";
        *(_WORD *)&theValue[8] = 1024;
        *(_DWORD *)&theValue[10] = 126;
        __int16 v14 = 1024;
        IOReturn v15 = v11;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_PowerAssertion::Take: failed to take the power assertion, Error: 0x%X", (uint8_t *)&v12, 0x18u);
      }
    }
  }
}

void sub_1BACC0590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void HALB_PowerAssertion::Release(const std::chrono::system_clock::time_point *this)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  OS::CF::String::AsCString((CFIndex)&this[2], (UInt8 *)v42, 256);
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v27 = 0u;
  *(_OWORD *)long long v26 = 0u;
  OS::CF::String::AsCString((CFIndex)&this[4], (UInt8 *)v26, 256);
  time_t v14 = std::chrono::system_clock::to_time_t(this + 1);
  int v2 = localtime(&v14);
  strftime(v25, 0x1EuLL, "%Y-%m-%d %H:%M:%S", v2);
  double v3 = (double)(1000 * (std::chrono::system_clock::now().__d_.__rep_ - this[1].__d_.__rep_)) / 1000000000.0;
  int v4 = BYTE4(this[6].__d_.__rep_);
  BOOL v5 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v5)
    {
      IOReturn rep = this->__d_.__rep_;
      int v7 = this[6].__d_.__rep_;
      *(_DWORD *)buf = 136316930;
      *(void *)theValue = "HALB_PowerAssertion.cpp";
      *(_WORD *)&theValue[8] = 1024;
      *(_DWORD *)&theValue[10] = 153;
      __int16 v17 = 1024;
      IOReturn v18 = rep;
      __int16 v19 = 2082;
      __int16 v20 = v42;
      __int16 v21 = 2082;
      uint64_t v22 = v26;
      __int16 v23 = 1024;
      *(_DWORD *)long long v24 = v7;
      *(_WORD *)&v24[4] = 2080;
      *(void *)&v24[6] = v25;
      *(_WORD *)&v24[14] = 2048;
      *(double *)&v24[16] = v3;
      uint32_t v8 = MEMORY[0x1E4F14500];
      IOReturn v9 = "%25s:%-5d  HALB_PowerAssertion::Release: releasing power assertion ID %u of type '%{public}s' with name: '%{p"
           "ublic}s' on behalf of %d taken at %s for %.6f seconds";
      uint32_t v10 = 70;
LABEL_6:
      _os_log_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, v10);
    }
  }
  else if (v5)
  {
    IOReturn v11 = this->__d_.__rep_;
    *(_DWORD *)buf = 136316674;
    *(void *)theValue = "HALB_PowerAssertion.cpp";
    *(_WORD *)&theValue[8] = 1024;
    *(_DWORD *)&theValue[10] = 157;
    __int16 v17 = 1024;
    IOReturn v18 = v11;
    __int16 v19 = 2082;
    __int16 v20 = v42;
    __int16 v21 = 2082;
    uint64_t v22 = v26;
    __int16 v23 = 2080;
    *(void *)long long v24 = v25;
    *(_WORD *)&v24[8] = 2048;
    *(double *)&unsigned char v24[10] = v3;
    uint32_t v8 = MEMORY[0x1E4F14500];
    IOReturn v9 = "%25s:%-5d  HALB_PowerAssertion::Release: releasing power assertion ID %u of type '%{public}s' with name: '%{pub"
         "lic}s' taken at %s for %.6f seconds";
    uint32_t v10 = 64;
    goto LABEL_6;
  }
  IOPMAssertionID v12 = this->__d_.__rep_;
  if (v12)
  {
    OS::CF::Number::Number<int>(buf, 0);
    IOReturn v13 = IOPMAssertionSetProperty(v12, @"AssertLevel", *(CFTypeRef *)&theValue[4]);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
    if (v13)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)theValue = "HALB_PowerAssertion.cpp";
        *(_WORD *)&theValue[8] = 1024;
        *(_DWORD *)&theValue[10] = 164;
        __int16 v17 = 1024;
        IOReturn v18 = v13;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_PowerAssertion::Release: failed to release the power assertion, Error: 0x%X", buf, 0x18u);
      }
    }
  }
}

void sub_1BACC08A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va);
  _Unwind_Resume(a1);
}

void HALB_PowerAssertion::Rename(IOPMAssertionID *a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*a1)
  {
    OS::CF::UntypedObject::operator=((uint64_t)(a1 + 8), *(CFTypeRef *)(a2 + 8));
    IOReturn v4 = IOPMAssertionSetProperty(*a1, @"AssertName", *(CFTypeRef *)(a2 + 8));
    if (v4)
    {
      IOReturn v5 = v4;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v6 = 136315650;
        int v7 = "HALB_PowerAssertion.cpp";
        __int16 v8 = 1024;
        int v9 = 176;
        __int16 v10 = 1024;
        IOReturn v11 = v5;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_PowerAssertion::Rename: failed to change the name of the power assertion, Error: 0x%X", (uint8_t *)&v6, 0x18u);
      }
    }
  }
}

unint64_t AMCP::DAL::Ramstad_Resampler::get_latency(AMCP::DAL::Ramstad_Resampler *this)
{
  uint64_t v1 = **((void **)this + 12);
  double v2 = *(double *)(v1 + 32);
  double v3 = *(double *)(v1 + 40);
  BOOL v4 = *(_DWORD *)(v1 + 56) == 8;
  double v5 = v2 / v3;
  if (v5 >= 1.0) {
    double v6 = dbl_1BAFF9600[v4];
  }
  else {
    double v6 = dbl_1BAFF95F0[v4] / v5;
  }
  return vcvtad_u64_f64(v6);
}

uint64_t AMCP::DAL::Ramstad_Resampler::get_expected_output_samples_for_input_samples(AMCP::DAL::Ramstad_Resampler *this, int a2, unint64_t *a3)
{
  double v3 = (RamstadSRC **)*((void *)this + 12);
  BOOL v4 = (RamstadSRC **)*((void *)this + 13);
  if (v3 == v4) {
    return 0;
  }
  do
  {
    int v9 = 0;
    int v7 = *v3++;
    LODWORD(result) = RamstadSRC::outputSamplesForInputSamples(v7, a2, &v9);
    *a3 = v9;
  }
  while (v3 != v4);
  return (int)result;
}

uint64_t AMCP::DAL::Ramstad_Resampler::get_required_input_samples_for_output_samples(AMCP::DAL::Ramstad_Resampler *this, int a2)
{
  double v2 = (RamstadSRC **)*((void *)this + 12);
  double v3 = (RamstadSRC **)*((void *)this + 13);
  if (v2 == v3) {
    return 0;
  }
  do
  {
    double v5 = *v2++;
    LODWORD(result) = RamstadSRC::inputSamplesForOutputSamples(v5, a2);
  }
  while (v2 != v3);
  return (int)result;
}

double AMCP::DAL::Ramstad_Resampler::process(uint64_t a1, const float ***a2, uint64_t *a3, void *a4, double a5, double a6, double a7)
{
  uint64_t v867 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 96) == *(void *)(a1 + 104))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v859, "com.apple.coreaudio", "AMCP");
    v834 = *v859;
    if (*(void *)v860) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v860);
    }
    if (os_log_type_enabled(v834, OS_LOG_TYPE_ERROR))
    {
      v835 = pthread_self();
      mach_port_t v836 = pthread_mach_thread_np(v835);
      LODWORD(v859) = 67109890;
      HIDWORD(v859) = v836;
      *(_WORD *)v860 = 2080;
      *(void *)&v860[2] = "Ramstad_Resampler.cpp";
      __int16 v861 = 1024;
      int v862 = 37;
      __int16 v863 = 2080;
      *(void *)v864 = "not (not m_resamplers.empty())";
      _os_log_error_impl(&dword_1BAA78000, v834, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v859, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v847);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v852);
    std::logic_error::logic_error(&v845, &v852);
    v845.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v853, &v845);
    uint64_t v855 = 0;
    uint64_t v856 = 0;
    uint64_t v857 = 0;
    int v858 = -1;
    v853.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    v854 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v859, (uint64_t)&v853);
    *(void *)&v864[6] = "virtual Sample_Time_Range AMCP::DAL::Ramstad_Resampler::process(const Sample_Group<float> &, S"
                          "ample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
    v865 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ramstad_Resampler.cpp";
    int v866 = 37;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v849.__r_.__value_.__l.__data_);
    v850 = &unk_1F148AA90;
    std::string v851 = v849;
    memset(&v849, 0, sizeof(v849));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (*a2 == a2[1])
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v859, "com.apple.coreaudio", "AMCP");
    v837 = *v859;
    if (*(void *)v860) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v860);
    }
    if (os_log_type_enabled(v837, OS_LOG_TYPE_ERROR))
    {
      v838 = pthread_self();
      mach_port_t v839 = pthread_mach_thread_np(v838);
      LODWORD(v859) = 67109890;
      HIDWORD(v859) = v839;
      *(_WORD *)v860 = 2080;
      *(void *)&v860[2] = "Ramstad_Resampler.cpp";
      __int16 v861 = 1024;
      int v862 = 38;
      __int16 v863 = 2080;
      *(void *)v864 = "not (not source.empty())";
      _os_log_error_impl(&dword_1BAA78000, v837, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v859, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v847);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v852);
    std::logic_error::logic_error(&v845, &v852);
    v845.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v853, &v845);
    uint64_t v855 = 0;
    uint64_t v856 = 0;
    uint64_t v857 = 0;
    int v858 = -1;
    v853.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    v854 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v859, (uint64_t)&v853);
    *(void *)&v864[6] = "virtual Sample_Time_Range AMCP::DAL::Ramstad_Resampler::process(const Sample_Group<float> &, S"
                          "ample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
    v865 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ramstad_Resampler.cpp";
    int v866 = 38;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v849.__r_.__value_.__l.__data_);
    v850 = &unk_1F148AA90;
    std::string v851 = v849;
    memset(&v849, 0, sizeof(v849));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  std::string::basic_string[abi:ne180100]<0>(&v859, "scale ratio");
  IOReturn v15 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a4, (unsigned __int8 *)&v859);
  if (v15) {
    double v16 = AMCP::Thing::convert_to<double>((uint64_t)(v15 + 40));
  }
  else {
    double v16 = 1.0;
  }
  if (SHIBYTE(v862) < 0) {
    operator delete(v859);
  }
  v843 = a3;
  v844 = a2;
  *(_DWORD *)&v848[1] = 0;
  double v17 = a7 - a6;
  IOReturn v18 = *(uint64_t **)(a1 + 96);
  __int16 v19 = *(uint64_t **)(a1 + 104);
  if (v18 != v19)
  {
    int v20 = vcvtmd_s64_f64(v17);
    unint64_t v21 = vcvtmd_s64_f64(a5);
    LODWORD(v7) = vcvtmd_s64_f64(v16);
    signed int v22 = vcvtmd_s64_f64((v16 - floor(v16)) * 2147483650.0);
    do
    {
      uint64_t v23 = *v18;
      *(_DWORD *)(v23 + 60) = v7;
      *(_DWORD *)(v23 + 68) = v22;
      *(void *)(v23 + 80) = (v7 << 32 >> 1) + v22;
      *(void *)(v23 + 256) = -1;
      *(_DWORD *)(v23 + 264) = -1;
      if (*(_DWORD *)(a1 + 88) == 1)
      {
        long long v24 = (AMCP::Log::Scope_Registry *)RamstadSRC::outputSamplesForInputSamples((RamstadSRC *)v23, v21, (int *)&v848[1]);
        if ((int)v24 <= 0)
        {
          AMCP::Log::Scope_Registry::get(v24);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v859, "com.apple.coreaudio", "AMCP");
          v828 = *v859;
          if (*(void *)v860) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v860);
          }
          if (os_log_type_enabled(v828, OS_LOG_TYPE_ERROR))
          {
            v829 = pthread_self();
            mach_port_t v830 = pthread_mach_thread_np(v829);
            LODWORD(v859) = 67109890;
            HIDWORD(v859) = v830;
            *(_WORD *)v860 = 2080;
            *(void *)&v860[2] = "Ramstad_Resampler.cpp";
            __int16 v861 = 1024;
            int v862 = 50;
            __int16 v863 = 2080;
            *(void *)v864 = "not (output_length > 0)";
            _os_log_error_impl(&dword_1BAA78000, v828, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v859, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v847);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v852);
          std::logic_error::logic_error(&v845, &v852);
          v845.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error(&v853, &v845);
          uint64_t v855 = 0;
          uint64_t v856 = 0;
          uint64_t v857 = 0;
          int v858 = -1;
          v853.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
          v854 = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v859, (uint64_t)&v853);
          *(void *)&v864[6] = "virtual Sample_Time_Range AMCP::DAL::Ramstad_Resampler::process(const Sample_Group<float"
                                "> &, Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
          v865 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ramstad_Resampler.cpp";
          int v866 = 50;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v849.__r_.__value_.__l.__data_);
          v850 = &unk_1F148AA90;
          std::string v851 = v849;
          memset(&v849, 0, sizeof(v849));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        double v17 = (double)(int)v24;
      }
      else
      {
        long long v25 = (AMCP::Log::Scope_Registry *)RamstadSRC::inputSamplesForOutputSamples((RamstadSRC *)v23, v20);
        *(_DWORD *)&v848[1] = v25;
        uint64_t v26 = (int)v25 - v21;
        if (v26 < 0) {
          uint64_t v26 = v21 - (int)v25;
        }
        if ((unint64_t)v26 >= 2)
        {
          AMCP::Log::Scope_Registry::get(v25);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v859, "com.apple.coreaudio", "AMCP");
          v831 = *v859;
          if (*(void *)v860) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v860);
          }
          if (os_log_type_enabled(v831, OS_LOG_TYPE_ERROR))
          {
            v832 = pthread_self();
            mach_port_t v833 = pthread_mach_thread_np(v832);
            LODWORD(v859) = 67109890;
            HIDWORD(v859) = v833;
            *(_WORD *)v860 = 2080;
            *(void *)&v860[2] = "Ramstad_Resampler.cpp";
            __int16 v861 = 1024;
            int v862 = 56;
            __int16 v863 = 2080;
            *(void *)v864 = "not (std::abs(actual_input_consumed - number_of_samples.get()) <= 1.0)";
            _os_log_error_impl(&dword_1BAA78000, v831, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v859, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v847);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v852);
          std::logic_error::logic_error(&v845, &v852);
          v845.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error(&v853, &v845);
          uint64_t v855 = 0;
          uint64_t v856 = 0;
          uint64_t v857 = 0;
          int v858 = -1;
          v853.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
          v854 = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v859, (uint64_t)&v853);
          *(void *)&v864[6] = "virtual Sample_Time_Range AMCP::DAL::Ramstad_Resampler::process(const Sample_Group<float"
                                "> &, Sample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
          v865 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ramstad_Resampler.cpp";
          int v866 = 56;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v849.__r_.__value_.__l.__data_);
          v850 = &unk_1F148AA90;
          std::string v851 = v849;
          memset(&v849, 0, sizeof(v849));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
      }
      ++v18;
    }
    while (v18 != v19);
  }
  long long v27 = (AMCP::DAL::PCM_Data_Handler *)*v843;
  AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>(*v843);
  AMCP::DAL::PCM_Data_Handler::get_other_data<float>((unint64_t *)&v852, v27, a6, a6 + v17);
  uint64_t v29 = *v843;
  if (*v843)
  {
    int v30 = *(_DWORD *)(v29 + 20);
    LODWORD(v29) = *(_DWORD *)(v29 + 36);
  }
  else
  {
    LOBYTE(v30) = 0;
  }
  if ((v30 & 0x20) != 0) {
    int v31 = 1;
  }
  else {
    int v31 = v29;
  }
  long long v33 = *v844;
  long long v32 = v844[1];
  unint64_t v34 = ((char *)v32 - (char *)*v844) >> 4;
  if (v34 != (uint64_t)(v852.__r_.__value_.__l.__size_ - v852.__r_.__value_.__r.__words[0]) >> 4)
  {
    AMCP::Log::Scope_Registry::get(v28);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v859, "com.apple.coreaudio", "AMCP");
    v840 = *v859;
    if (*(void *)v860) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v860);
    }
    if (os_log_type_enabled(v840, OS_LOG_TYPE_ERROR))
    {
      v841 = pthread_self();
      mach_port_t v842 = pthread_mach_thread_np(v841);
      LODWORD(v859) = 67109890;
      HIDWORD(v859) = v842;
      *(_WORD *)v860 = 2080;
      *(void *)&v860[2] = "Ramstad_Resampler.cpp";
      __int16 v861 = 1024;
      int v862 = 65;
      __int16 v863 = 2080;
      *(void *)v864 = "not (source.size() == dest.size())";
      _os_log_error_impl(&dword_1BAA78000, v840, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v859, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)v848);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v849);
    std::logic_error::logic_error(&v847, &v849);
    v847.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v853, &v847);
    uint64_t v855 = 0;
    uint64_t v856 = 0;
    uint64_t v857 = 0;
    int v858 = -1;
    v853.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    v854 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v859, (uint64_t)&v853);
    *(void *)&v864[6] = "virtual Sample_Time_Range AMCP::DAL::Ramstad_Resampler::process(const Sample_Group<float> &, S"
                          "ample_Time, Container, Sample_Time_Range, const DAL_Settings &)";
    v865 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Ramstad_Resampler.cpp";
    int v866 = 65;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v845);
    v850 = &unk_1F148AA90;
    *(std::logic_error *)&v851.__r_.__value_.__l.__data_ = v845;
    v851.__r_.__value_.__r.__words[2] = v846;
    v845.__vftable = 0;
    v845.__imp_.__imp_ = 0;
    std::string::size_type v846 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (v34 == 2)
  {
    RamstadSRC::processStereo(**(RamstadSRC ***)(a1 + 96), *v33, v33[2], *(float **)v852.__r_.__value_.__l.__data_, *(float **)(v852.__r_.__value_.__r.__words[0] + 16), vcvtmd_s64_f64(a5), vcvtmd_s64_f64(v17), v31, v31);
    goto LABEL_314;
  }
  if (v34 != 1)
  {
    v843 = (uint64_t *)&v843;
    MEMORY[0x1F4188790](v28);
    unint64_t v40 = (8 * v34 + 15) & 0xFFFFFFFFFFFFFFF0;
    long long v41 = (char *)&v843 - v40;
    unint64_t v43 = v42 >> 1;
    if (v43 >= 0x200) {
      size_t v44 = 512;
    }
    else {
      size_t v44 = v43;
    }
    bzero((char *)&v843 - v40, v44);
    MEMORY[0x1F4188790](v45);
    unint64_t v46 = (char *)&v843 - v40;
    bzero((char *)&v843 - v40, v44);
    if (v32 != v33)
    {
      uint64_t v47 = *v844;
      unint64_t v48 = (uint64_t *)v852.__r_.__value_.__r.__words[0];
      if (v34 <= 1) {
        uint64_t v49 = 1;
      }
      else {
        uint64_t v49 = v34;
      }
      long long v50 = (const float **)((char *)&v843 - v40);
      int v51 = (uint64_t **)((char *)&v843 - v40);
      do
      {
        uint64_t v52 = *v47;
        v47 += 2;
        *v50++ = v52;
        uint64_t v53 = *v48;
        v48 += 2;
        *v51++ = v53;
        --v49;
      }
      while (v49);
    }
    uint64_t v54 = **(void **)(a1 + 96);
    int v55 = vcvtmd_s64_f64(a5);
    int v56 = vcvtmd_s64_f64(v17);
    RamstadSRC::checkPreflight((_DWORD *)v54, v55, v56);
    if (*(unsigned char *)(v54 + 93))
    {
      if (*(unsigned char *)(v54 + 92))
      {
        int v57 = *(_DWORD *)(v54 + 60);
        int v59 = *(_DWORD *)(v54 + 68);
        int v58 = *(_DWORD *)(v54 + 72);
        int v60 = *(_DWORD *)(v54 + 88);
        uint64_t v61 = *(void *)(v54 + 16);
        unint64_t v62 = *(float64x2_t **)(v61 + 16);
        uint64_t v63 = *(void *)(v61 + 40);
        uint64_t v64 = *(float64x2_t **)(v54 + 160);
        long long v65 = *(float64x2_t **)(v54 + 184);
        int v66 = *(_DWORD *)(v54 + 52);
        if (*(_DWORD *)(v54 + 56) == 8)
        {
          if (v56 < 1)
          {
            int v70 = 0;
            LODWORD(v69) = 0;
          }
          else
          {
            uint64_t v67 = 0;
            int v68 = 0;
            LODWORD(v69) = 0;
            int v70 = 0;
            do
            {
              if (v60 >= 1)
              {
                int v71 = 0;
                uint64_t v69 = (int)v69;
                do
                {
                  uint64_t v72 = *(unsigned int *)(v54 + 48);
                  if (v72)
                  {
                    std::string::size_type v73 = (uint64_t *)((char *)&v843 - v40);
                    uint64_t v74 = v64;
                    uint64_t v75 = v65;
                    do
                    {
                      uint64_t v76 = *v73++;
                      float64x2_t v77 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(v76 + 4 * v69)), 0);
                      float64x2_t v79 = *v74;
                      float64x2_t v78 = v74[1];
                      float64x2_t v81 = v74[2];
                      float64x2_t v80 = v74[3];
                      float64x2_t v82 = vmlaq_f64(v77, v81, v62[2]);
                      float64x2_t v83 = vmlaq_f64(v77, v80, v62[3]);
                      float64x2_t v84 = vmlaq_f64(v77, *v74, *v62);
                      float64x2_t v85 = vmlaq_f64(vmlaq_f64(v77, v78, v62[1]), v75[1], v62[5]);
                      float64x2_t v86 = vmlaq_f64(v84, *v75, v62[4]);
                      float64x2_t v87 = vmlaq_f64(v83, v75[3], v62[7]);
                      float64x2_t v88 = vmlaq_f64(v82, v75[2], v62[6]);
                      v75[2] = v81;
                      v75[3] = v80;
                      *uint64_t v75 = v79;
                      v75[1] = v78;
                      v75 += 4;
                      v74[2] = v88;
                      v74[3] = v87;
                      *uint64_t v74 = v86;
                      v74[1] = v85;
                      v74 += 4;
                      --v72;
                    }
                    while (v72);
                  }
                  v69 += v31;
                  ++v71;
                }
                while (v71 != v60);
              }
              uint64_t v89 = *(unsigned int *)(v54 + 48);
              if (v89)
              {
                v91 = v64;
                __int16 v92 = v65;
                unint64_t v93 = (uint64_t *)((char *)&v843 - v40);
                do
                {
                  float64x2_t v94 = v92[2];
                  float64x2_t v95 = v92[3];
                  float64x2_t v96 = *v92;
                  float64x2_t v97 = v92[1];
                  v92 += 4;
                  uint64_t v98 = *v93++;
                  __int16 v90 = (float64x2_t *)(v63 + ((uint64_t)(2 * v58) << 6));
                  float v99 = vaddvq_f64(vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v90[4], v96), *v91, *v90), vmlaq_f64(vmulq_f64(v90[6], v94), v91[2], v90[2])), vaddq_f64(vmlaq_f64(vmulq_f64(v90[5], v97), v91[1], v90[1]), vmlaq_f64(vmulq_f64(v90[7], v95), v91[3], v90[3]))));
                  *(float *)(v98 + 4 * v67) = v99;
                  v91 += 4;
                  --v89;
                }
                while (v89);
              }
              v70 += v60;
              int v100 = v58 + v59;
              if (v100 < v66) {
                int v60 = v57;
              }
              else {
                int v60 = v57 + 1;
              }
              if (v100 < v66) {
                int v101 = 0;
              }
              else {
                int v101 = v66;
              }
              int v58 = v100 - v101;
              ++v68;
              v67 += v31;
            }
            while (v68 != v56);
          }
          int v508 = v55 - v70;
          if (v55 <= v70) {
            goto LABEL_274;
          }
          if (v60 < v508) {
            int v508 = v60;
          }
          if (v508 >= 1)
          {
            int v509 = 0;
            uint64_t v510 = (int)v69;
            do
            {
              uint64_t v511 = *(unsigned int *)(v54 + 48);
              if (v511)
              {
                v512 = (uint64_t *)((char *)&v843 - v40);
                v513 = v64;
                v514 = v65;
                do
                {
                  uint64_t v515 = *v512++;
                  float64x2_t v516 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(v515 + 4 * v510)), 0);
                  float64x2_t v518 = *v513;
                  float64x2_t v517 = v513[1];
                  float64x2_t v520 = v513[2];
                  float64x2_t v519 = v513[3];
                  float64x2_t v521 = vmlaq_f64(v516, v520, v62[2]);
                  float64x2_t v522 = vmlaq_f64(v516, v519, v62[3]);
                  float64x2_t v523 = vmlaq_f64(v516, *v513, *v62);
                  float64x2_t v524 = vmlaq_f64(vmlaq_f64(v516, v517, v62[1]), v514[1], v62[5]);
                  float64x2_t v525 = vmlaq_f64(v523, *v514, v62[4]);
                  float64x2_t v526 = vmlaq_f64(v522, v514[3], v62[7]);
                  float64x2_t v527 = vmlaq_f64(v521, v514[2], v62[6]);
                  v514[2] = v520;
                  v514[3] = v519;
                  float64x2_t *v514 = v518;
                  v514[1] = v517;
                  v514 += 4;
                  v513[2] = v527;
                  v513[3] = v526;
                  float64x2_t *v513 = v525;
                  v513[1] = v524;
                  v513 += 4;
                  --v511;
                }
                while (v511);
              }
              v510 += v31;
              ++v509;
            }
            while (v509 != v508);
          }
        }
        else
        {
          if (v56 < 1)
          {
            int v203 = 0;
            LODWORD(v202) = 0;
          }
          else
          {
            uint64_t v200 = 0;
            int v201 = 0;
            LODWORD(v202) = 0;
            int v203 = 0;
            do
            {
              if (v60 >= 1)
              {
                int v204 = 0;
                uint64_t v202 = (int)v202;
                do
                {
                  int v205 = *(_DWORD *)(v54 + 48);
                  int v206 = v205 != 0;
                  v207 = v64;
                  v208 = v65;
                  unint64_t v209 = (v205 - v206);
                  if (v205 != v206)
                  {
                    unint64_t v210 = 0;
                    v208 = v65;
                    v207 = v64;
                    do
                    {
                      v211 = &v41[8 * v210];
                      float64x2_t v212 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(*(void *)v211 + 4 * v202)), 0);
                      float64x2_t v213 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(*((void *)v211 + 1) + 4 * v202)), 0);
                      float64x2_t v214 = *v207;
                      float64x2_t v215 = v207[1];
                      float64x2_t v216 = v207[2];
                      float64x2_t v217 = v207[3];
                      float64x2_t v218 = vmlaq_f64(vmlaq_f64(v212, *v207, *v62), *v208, v62[8]);
                      float64x2_t v219 = vmlaq_f64(vmlaq_f64(v212, v215, v62[1]), v208[1], v62[9]);
                      float64x2_t v220 = vmlaq_f64(vmlaq_f64(v212, v216, v62[2]), v208[2], v62[10]);
                      float64x2_t v221 = vmlaq_f64(vmlaq_f64(v212, v217, v62[3]), v208[3], v62[11]);
                      v208[2] = v216;
                      v208[3] = v217;
                      float64x2_t *v208 = v214;
                      v208[1] = v215;
                      v207[2] = v220;
                      v207[3] = v221;
                      float64x2_t *v207 = v218;
                      v207[1] = v219;
                      float64x2_t v222 = v207[4];
                      float64x2_t v223 = v207[5];
                      float64x2_t v224 = v207[6];
                      float64x2_t v225 = v207[7];
                      float64x2_t v226 = vmlaq_f64(vmlaq_f64(v213, v222, *v62), v208[4], v62[8]);
                      float64x2_t v227 = vmlaq_f64(vmlaq_f64(v213, v223, v62[1]), v208[5], v62[9]);
                      float64x2_t v228 = vmlaq_f64(vmlaq_f64(v213, v224, v62[2]), v208[6], v62[10]);
                      float64x2_t v229 = vmlaq_f64(vmlaq_f64(v213, v225, v62[3]), v208[7], v62[11]);
                      v208[6] = v224;
                      v208[7] = v225;
                      v208[4] = v222;
                      v208[5] = v223;
                      v207[6] = v228;
                      v207[7] = v229;
                      v207[4] = v226;
                      v207[5] = v227;
                      float64x2_t v231 = v207[8];
                      float64x2_t v230 = v207[9];
                      float64x2_t v233 = v207[10];
                      float64x2_t v232 = v207[11];
                      float64x2_t v234 = vmlaq_f64(v213, v233, v62[6]);
                      float64x2_t v235 = vmlaq_f64(v212, v231, v62[4]);
                      float64x2_t v236 = vmlaq_f64(vmlaq_f64(v212, v230, v62[5]), v208[9], v62[13]);
                      float64x2_t v237 = vmlaq_f64(v235, v208[8], v62[12]);
                      float64x2_t v238 = vmlaq_f64(vmlaq_f64(v213, v232, v62[7]), v208[11], v62[15]);
                      float64x2_t v239 = vmlaq_f64(v234, v208[10], v62[14]);
                      v208[10] = v233;
                      v208[11] = v232;
                      v208[8] = v231;
                      v208[9] = v230;
                      v207[10] = v239;
                      v207[11] = v238;
                      v207[8] = v237;
                      v207[9] = v236;
                      v207 += 12;
                      v208 += 12;
                      v210 += 2;
                    }
                    while (v210 < v209);
                  }
                  if (v205)
                  {
                    float64x2_t v240 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(*(void *)&v41[8 * (v205 - 1)] + 4 * v202)), 0);
                    float64x2_t v241 = *v207;
                    float64x2_t v242 = v207[1];
                    float64x2_t v243 = v207[2];
                    float64x2_t v244 = v207[3];
                    float64x2_t v245 = vmlaq_f64(vmlaq_f64(v240, *v207, *v62), *v208, v62[8]);
                    float64x2_t v246 = vmlaq_f64(vmlaq_f64(v240, v242, v62[1]), v208[1], v62[9]);
                    float64x2_t v247 = vmlaq_f64(vmlaq_f64(v240, v243, v62[2]), v208[2], v62[10]);
                    float64x2_t v248 = vmlaq_f64(vmlaq_f64(v240, v244, v62[3]), v208[3], v62[11]);
                    v208[2] = v243;
                    v208[3] = v244;
                    float64x2_t *v208 = v241;
                    v208[1] = v242;
                    v207[2] = v247;
                    v207[3] = v248;
                    float64x2_t *v207 = v245;
                    v207[1] = v246;
                    float64x2_t v250 = v207[4];
                    float64x2_t v249 = v207[5];
                    float64x2_t v252 = v207[6];
                    float64x2_t v251 = v207[7];
                    float64x2_t v253 = vmlaq_f64(v240, v250, v62[4]);
                    float64x2_t v254 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v251, v62[7]), v208[7], v62[15]);
                    float64x2_t v255 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v252, v62[6]), v208[6], v62[14]);
                    float64x2_t v256 = vmlaq_f64(vmlaq_f64(v240, v249, v62[5]), v208[5], v62[13]);
                    float64x2_t v257 = vmlaq_f64(v253, v208[4], v62[12]);
                    v208[4] = v250;
                    v208[5] = v249;
                    v208[6] = v252;
                    v208[7] = v251;
                    v207[6] = v255;
                    v207[7] = v254;
                    v207[4] = v257;
                    v207[5] = v256;
                  }
                  v202 += v31;
                  ++v204;
                }
                while (v204 != v60);
              }
              v258 = (float64x2_t *)(v63 + ((uint64_t)(4 * v58) << 6));
              int v259 = *(_DWORD *)(v54 + 48);
              int v260 = v259 != 0;
              v261 = v64;
              v262 = v65;
              unint64_t v263 = (v259 - v260);
              if (v259 != v260)
              {
                unint64_t v264 = 0;
                v262 = v65;
                v261 = v64;
                do
                {
                  v265 = &v46[8 * v264];
                  float64x2_t v266 = v258[1];
                  float64x2_t v268 = v258[2];
                  float64x2_t v267 = v258[3];
                  float64x2_t v269 = v258[10];
                  float64x2_t v270 = v258[11];
                  float64x2_t v271 = v258[8];
                  float64x2_t v272 = v258[9];
                  float64x2_t v273 = vmlaq_f64(vmulq_f64(v272, v262[5]), v261[5], v266);
                  uint64_t v275 = *(void *)v265;
                  uint64_t v274 = *((void *)v265 + 1);
                  int64x2_t v276 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v271, *v262), *v261, *v258), vmlaq_f64(vmulq_f64(v269, v262[2]), v261[2], v268)), vaddq_f64(vmlaq_f64(vmulq_f64(v272, v262[1]), v261[1], v266), vmlaq_f64(vmulq_f64(v270, v262[3]), v261[3], v267)));
                  int64x2_t v277 = (int64x2_t)vaddq_f64(vmlaq_f64(vmulq_f64(v258[12], v262[8]), v261[8], v258[4]), vmlaq_f64(vmulq_f64(v258[13], v262[9]), v261[9], v258[5]));
                  *(double *)v277.i64 = vaddvq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v276, v277), (float64x2_t)vzip2q_s64(v276, v277)));
                  int64x2_t v278 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v271, v262[4]), v261[4], *v258), vmlaq_f64(vmulq_f64(v269, v262[6]), v261[6], v268)), vaddq_f64(v273, vmlaq_f64(vmulq_f64(v270, v262[7]), v261[7], v267)));
                  int64x2_t v279 = (int64x2_t)vaddq_f64(vmlaq_f64(vmulq_f64(v258[14], v262[10]), v261[10], v258[6]), vmlaq_f64(vmulq_f64(v258[15], v262[11]), v261[11], v258[7]));
                  *(float *)v277.i32 = *(double *)v277.i64;
                  *(float *)v278.i32 = vaddvq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v278, v279), (float64x2_t)vzip2q_s64(v278, v279)));
                  *(_DWORD *)(v275 + 4 * v200) = v277.i32[0];
                  *(_DWORD *)(v274 + 4 * v200) = v278.i32[0];
                  v261 += 12;
                  v262 += 12;
                  v264 += 2;
                }
                while (v264 < v263);
              }
              if (v259)
              {
                int64x2_t v280 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v258[8], *v262), *v261, *v258), vmlaq_f64(vmulq_f64(v258[10], v262[2]), v261[2], v258[2])), vaddq_f64(vmlaq_f64(vmulq_f64(v258[9], v262[1]), v261[1], v258[1]), vmlaq_f64(vmulq_f64(v258[11], v262[3]), v261[3], v258[3])));
                int64x2_t v281 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v258[12], v262[4]), v261[4], v258[4]), vmlaq_f64(vmulq_f64(v258[14], v262[6]), v261[6], v258[6])), vaddq_f64(vmlaq_f64(vmulq_f64(v258[13], v262[5]), v261[5], v258[5]), vmlaq_f64(vmulq_f64(v258[15], v262[7]), v261[7], v258[7])));
                *(float *)v280.i32 = vaddvq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v280, v281), (float64x2_t)vzip2q_s64(v280, v281)));
                *(_DWORD *)(*(void *)&v46[8 * (v259 - 1)] + 4 * v200) = v280.i32[0];
              }
              v203 += v60;
              int v282 = v58 + v59;
              if (v282 < v66) {
                int v60 = v57;
              }
              else {
                int v60 = v57 + 1;
              }
              if (v282 < v66) {
                int v283 = 0;
              }
              else {
                int v283 = v66;
              }
              int v58 = v282 - v283;
              ++v201;
              v200 += v31;
            }
            while (v201 != v56);
          }
          int v508 = v55 - v203;
          if (v55 <= v203) {
            goto LABEL_274;
          }
          if (v60 < v508) {
            int v508 = v60;
          }
          if (v508 >= 1)
          {
            int v528 = 0;
            uint64_t v529 = (int)v202;
            do
            {
              int v530 = *(_DWORD *)(v54 + 48);
              v531 = v64;
              v532 = v65;
              unint64_t v533 = v530 - (v530 != 0);
              if (v533)
              {
                unint64_t v534 = 0;
                v532 = v65;
                v531 = v64;
                do
                {
                  v535 = &v41[8 * v534];
                  float64x2_t v536 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(*(void *)v535 + 4 * v529)), 0);
                  float64x2_t v537 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(*((void *)v535 + 1) + 4 * v529)), 0);
                  float64x2_t v538 = *v531;
                  float64x2_t v539 = v531[1];
                  float64x2_t v540 = v531[2];
                  float64x2_t v541 = v531[3];
                  float64x2_t v542 = vmlaq_f64(vmlaq_f64(v536, *v531, *v62), *v532, v62[8]);
                  float64x2_t v543 = vmlaq_f64(vmlaq_f64(v536, v539, v62[1]), v532[1], v62[9]);
                  float64x2_t v544 = vmlaq_f64(vmlaq_f64(v536, v540, v62[2]), v532[2], v62[10]);
                  float64x2_t v545 = vmlaq_f64(vmlaq_f64(v536, v541, v62[3]), v532[3], v62[11]);
                  v532[2] = v540;
                  v532[3] = v541;
                  float64x2_t *v532 = v538;
                  v532[1] = v539;
                  v531[2] = v544;
                  v531[3] = v545;
                  float64x2_t *v531 = v542;
                  v531[1] = v543;
                  float64x2_t v546 = v531[4];
                  float64x2_t v547 = v531[5];
                  float64x2_t v548 = v531[6];
                  float64x2_t v549 = v531[7];
                  float64x2_t v550 = vmlaq_f64(vmlaq_f64(v537, v546, *v62), v532[4], v62[8]);
                  float64x2_t v551 = vmlaq_f64(vmlaq_f64(v537, v547, v62[1]), v532[5], v62[9]);
                  float64x2_t v552 = vmlaq_f64(vmlaq_f64(v537, v548, v62[2]), v532[6], v62[10]);
                  float64x2_t v553 = vmlaq_f64(vmlaq_f64(v537, v549, v62[3]), v532[7], v62[11]);
                  v532[6] = v548;
                  v532[7] = v549;
                  v532[4] = v546;
                  v532[5] = v547;
                  v531[6] = v552;
                  v531[7] = v553;
                  v531[4] = v550;
                  v531[5] = v551;
                  float64x2_t v555 = v531[8];
                  float64x2_t v554 = v531[9];
                  float64x2_t v557 = v531[10];
                  float64x2_t v556 = v531[11];
                  float64x2_t v558 = vmlaq_f64(v537, v557, v62[6]);
                  float64x2_t v559 = vmlaq_f64(v536, v555, v62[4]);
                  float64x2_t v560 = vmlaq_f64(vmlaq_f64(v536, v554, v62[5]), v532[9], v62[13]);
                  float64x2_t v561 = vmlaq_f64(v559, v532[8], v62[12]);
                  float64x2_t v562 = vmlaq_f64(vmlaq_f64(v537, v556, v62[7]), v532[11], v62[15]);
                  float64x2_t v563 = vmlaq_f64(v558, v532[10], v62[14]);
                  v532[10] = v557;
                  v532[11] = v556;
                  v532[8] = v555;
                  v532[9] = v554;
                  v531[10] = v563;
                  v531[11] = v562;
                  v531[8] = v561;
                  v531[9] = v560;
                  v531 += 12;
                  v532 += 12;
                  v534 += 2;
                }
                while (v534 < v533);
              }
              if (v530)
              {
                float64x2_t v564 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(*(void *)&v41[8 * (v530 - 1)] + 4 * v529)), 0);
                float64x2_t v565 = *v531;
                float64x2_t v566 = v531[1];
                float64x2_t v567 = v531[2];
                float64x2_t v568 = v531[3];
                float64x2_t v569 = vmlaq_f64(vmlaq_f64(v564, *v531, *v62), *v532, v62[8]);
                float64x2_t v570 = vmlaq_f64(vmlaq_f64(v564, v566, v62[1]), v532[1], v62[9]);
                float64x2_t v571 = vmlaq_f64(vmlaq_f64(v564, v567, v62[2]), v532[2], v62[10]);
                float64x2_t v572 = vmlaq_f64(vmlaq_f64(v564, v568, v62[3]), v532[3], v62[11]);
                v532[2] = v567;
                v532[3] = v568;
                float64x2_t *v532 = v565;
                v532[1] = v566;
                v531[2] = v571;
                v531[3] = v572;
                float64x2_t *v531 = v569;
                v531[1] = v570;
                float64x2_t v574 = v531[4];
                float64x2_t v573 = v531[5];
                float64x2_t v576 = v531[6];
                float64x2_t v575 = v531[7];
                float64x2_t v577 = vmlaq_f64(v564, v574, v62[4]);
                float64x2_t v578 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v575, v62[7]), v532[7], v62[15]);
                float64x2_t v579 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v576, v62[6]), v532[6], v62[14]);
                float64x2_t v580 = vmlaq_f64(vmlaq_f64(v564, v573, v62[5]), v532[5], v62[13]);
                float64x2_t v581 = vmlaq_f64(v577, v532[4], v62[12]);
                v532[4] = v574;
                v532[5] = v573;
                v532[6] = v576;
                v532[7] = v575;
                v531[6] = v579;
                v531[7] = v578;
                v531[4] = v581;
                v531[5] = v580;
              }
              v529 += v31;
              ++v528;
            }
            while (v528 != v508);
          }
        }
LABEL_273:
        v60 -= v508;
LABEL_274:
        *(_DWORD *)(v54 + 72) = v58;
        *(_DWORD *)(v54 + 88) = v60;
LABEL_313:
        *(void *)(v54 + 256) = -1;
        *(_DWORD *)(v54 + 264) = -1;
        goto LABEL_314;
      }
      int v138 = *(_DWORD *)(v54 + 68);
      unsigned int v137 = *(_DWORD *)(v54 + 72);
      int v139 = *(_DWORD *)(v54 + 88);
      uint64_t v140 = *(void *)(v54 + 16);
      v141 = *(float64x2_t **)(v140 + 16);
      uint64_t v142 = *(void *)(v140 + 40);
      v143 = *(float64x2_t **)(v54 + 160);
      v144 = *(float64x2_t **)(v54 + 184);
      int v145 = *(_DWORD *)(v54 + 60);
      if (*(_DWORD *)(v54 + 56) == 8)
      {
        if (v56 < 1)
        {
          LODWORD(v148) = 0;
          int v147 = 0;
        }
        else
        {
          uint64_t v146 = 0;
          int v147 = 0;
          LODWORD(v148) = 0;
          for (int i = 0; i != v56; ++i)
          {
            if (v139 >= 1)
            {
              int v150 = 0;
              uint64_t v148 = (int)v148;
              do
              {
                uint64_t v151 = *(unsigned int *)(v54 + 48);
                if (v151)
                {
                  v152 = (uint64_t *)v41;
                  v153 = v143;
                  v154 = v144;
                  do
                  {
                    uint64_t v155 = *v152++;
                    float64x2_t v156 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(v155 + 4 * v148)), 0);
                    float64x2_t v158 = *v153;
                    float64x2_t v157 = v153[1];
                    float64x2_t v160 = v153[2];
                    float64x2_t v159 = v153[3];
                    float64x2_t v161 = vmlaq_f64(v156, v160, v141[2]);
                    float64x2_t v162 = vmlaq_f64(v156, v159, v141[3]);
                    float64x2_t v163 = vmlaq_f64(v156, *v153, *v141);
                    float64x2_t v164 = vmlaq_f64(vmlaq_f64(v156, v157, v141[1]), v154[1], v141[5]);
                    float64x2_t v165 = vmlaq_f64(v163, *v154, v141[4]);
                    float64x2_t v166 = vmlaq_f64(v162, v154[3], v141[7]);
                    float64x2_t v167 = vmlaq_f64(v161, v154[2], v141[6]);
                    v154[2] = v160;
                    v154[3] = v159;
                    float64x2_t *v154 = v158;
                    v154[1] = v157;
                    v154 += 4;
                    v153[2] = v167;
                    v153[3] = v166;
                    float64x2_t *v153 = v165;
                    v153[1] = v164;
                    v153 += 4;
                    --v151;
                  }
                  while (v151);
                }
                v148 += v31;
                ++v150;
              }
              while (v150 != v139);
            }
            uint64_t v168 = *(unsigned int *)(v54 + 48);
            if (v168)
            {
              float v169 = *(double *)(v54 + 96) * (double)(v137 & 0x7FFFFF);
              uint64_t v170 = (v137 >> 22) & 0x1FE;
              v171 = (float64x2_t *)(v142 + (v170 << 6));
              v172 = (float64x2_t *)(v142 + ((unint64_t)(v170 + 2) << 6));
              v173 = *(float **)(v54 + 208);
              v174 = v143;
              v175 = v144;
              v176 = v173;
              uint64_t v177 = *(unsigned int *)(v54 + 48);
              do
              {
                float64x2_t v178 = v175[2];
                float64x2_t v179 = v175[3];
                float64x2_t v180 = *v175;
                float64x2_t v181 = v175[1];
                v175 += 4;
                float v182 = vaddvq_f64(vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v171[4], v180), *v174, *v171), vmlaq_f64(vmulq_f64(v171[6], v178), v174[2], v171[2])), vaddq_f64(vmlaq_f64(vmulq_f64(v171[5], v181), v174[1], v171[1]), vmlaq_f64(vmulq_f64(v171[7], v179), v174[3], v171[3]))));
                *v176++ = v182;
                v174 += 4;
                --v177;
              }
              while (v177);
              v183 = *(float **)(v54 + 232);
              v184 = v143;
              v185 = v144;
              v186 = v183;
              uint64_t v187 = v168;
              do
              {
                float64x2_t v188 = v185[2];
                float64x2_t v189 = v185[3];
                float64x2_t v190 = *v185;
                float64x2_t v191 = v185[1];
                v185 += 4;
                float v192 = vaddvq_f64(vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v172[4], v190), *v184, *v172), vmlaq_f64(vmulq_f64(v172[6], v188), v184[2], v172[2])), vaddq_f64(vmlaq_f64(vmulq_f64(v172[5], v191), v184[1], v172[1]), vmlaq_f64(vmulq_f64(v172[7], v189), v184[3], v172[3]))));
                *v186++ = v192;
                v184 += 4;
                --v187;
              }
              while (v187);
              v193 = (uint64_t *)v46;
              do
              {
                float v194 = *v173++;
                float v195 = v194;
                float v196 = *v183++;
                float v197 = v195 + (float)(v169 * (float)(v196 - v195));
                uint64_t v198 = *v193++;
                *(float *)(v198 + 4 * v146) = v197;
                --v168;
              }
              while (v168);
            }
            v147 += v139;
            unsigned int v199 = v137 + v138;
            unsigned int v137 = (v137 + v138) & 0x7FFFFFFF;
            int v139 = v145 + (v199 >> 31);
            v146 += v31;
          }
        }
        int v676 = v55 - v147;
        if (v55 <= v147) {
          goto LABEL_312;
        }
        if (v139 < v676) {
          int v676 = v139;
        }
        if (v676 >= 1)
        {
          int v677 = 0;
          uint64_t v678 = (int)v148;
          do
          {
            uint64_t v679 = *(unsigned int *)(v54 + 48);
            if (v679)
            {
              v680 = (uint64_t *)v41;
              v681 = v143;
              v682 = v144;
              do
              {
                uint64_t v683 = *v680++;
                float64x2_t v684 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(v683 + 4 * v678)), 0);
                float64x2_t v686 = *v681;
                float64x2_t v685 = v681[1];
                float64x2_t v688 = v681[2];
                float64x2_t v687 = v681[3];
                float64x2_t v689 = vmlaq_f64(v684, v688, v141[2]);
                float64x2_t v690 = vmlaq_f64(v684, v687, v141[3]);
                float64x2_t v691 = vmlaq_f64(v684, *v681, *v141);
                float64x2_t v692 = vmlaq_f64(vmlaq_f64(v684, v685, v141[1]), v682[1], v141[5]);
                float64x2_t v693 = vmlaq_f64(v691, *v682, v141[4]);
                float64x2_t v694 = vmlaq_f64(v690, v682[3], v141[7]);
                float64x2_t v695 = vmlaq_f64(v689, v682[2], v141[6]);
                v682[2] = v688;
                v682[3] = v687;
                float64x2_t *v682 = v686;
                v682[1] = v685;
                v682 += 4;
                v681[2] = v695;
                v681[3] = v694;
                float64x2_t *v681 = v693;
                v681[1] = v692;
                v681 += 4;
                --v679;
              }
              while (v679);
            }
            v678 += v31;
            ++v677;
          }
          while (v677 != v676);
        }
LABEL_311:
        v139 -= v676;
LABEL_312:
        *(_DWORD *)(v54 + 72) = v137;
        *(_DWORD *)(v54 + 88) = v139;
        goto LABEL_313;
      }
      if (v56 < 1)
      {
        LODWORD(v399) = 0;
        int v397 = 0;
LABEL_276:
        int v676 = v55 - v397;
        if (v55 <= v397) {
          goto LABEL_312;
        }
        if (v139 < v676) {
          int v676 = v139;
        }
        if (v676 >= 1)
        {
          int v728 = 0;
          uint64_t v729 = (int)v399;
          do
          {
            int v730 = *(_DWORD *)(v54 + 48);
            v731 = v143;
            v732 = v144;
            unint64_t v733 = v730 - (v730 != 0);
            if (v733)
            {
              unint64_t v734 = 0;
              v732 = v144;
              v731 = v143;
              do
              {
                v735 = &v41[8 * v734];
                float64x2_t v736 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(*(void *)v735 + 4 * v729)), 0);
                float64x2_t v737 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(*((void *)v735 + 1) + 4 * v729)), 0);
                float64x2_t v738 = *v731;
                float64x2_t v739 = v731[1];
                float64x2_t v740 = v731[2];
                float64x2_t v741 = v731[3];
                float64x2_t v742 = vmlaq_f64(vmlaq_f64(v736, *v731, *v141), *v732, v141[8]);
                float64x2_t v743 = vmlaq_f64(vmlaq_f64(v736, v739, v141[1]), v732[1], v141[9]);
                float64x2_t v744 = vmlaq_f64(vmlaq_f64(v736, v740, v141[2]), v732[2], v141[10]);
                float64x2_t v745 = vmlaq_f64(vmlaq_f64(v736, v741, v141[3]), v732[3], v141[11]);
                v732[2] = v740;
                v732[3] = v741;
                float64x2_t *v732 = v738;
                v732[1] = v739;
                v731[2] = v744;
                v731[3] = v745;
                float64x2_t *v731 = v742;
                v731[1] = v743;
                float64x2_t v746 = v731[4];
                float64x2_t v747 = v731[5];
                float64x2_t v748 = v731[6];
                float64x2_t v749 = v731[7];
                float64x2_t v750 = vmlaq_f64(vmlaq_f64(v737, v746, *v141), v732[4], v141[8]);
                float64x2_t v751 = vmlaq_f64(vmlaq_f64(v737, v747, v141[1]), v732[5], v141[9]);
                float64x2_t v752 = vmlaq_f64(vmlaq_f64(v737, v748, v141[2]), v732[6], v141[10]);
                float64x2_t v753 = vmlaq_f64(vmlaq_f64(v737, v749, v141[3]), v732[7], v141[11]);
                v732[6] = v748;
                v732[7] = v749;
                v732[4] = v746;
                v732[5] = v747;
                v731[6] = v752;
                v731[7] = v753;
                v731[4] = v750;
                v731[5] = v751;
                float64x2_t v755 = v731[8];
                float64x2_t v754 = v731[9];
                float64x2_t v757 = v731[10];
                float64x2_t v756 = v731[11];
                float64x2_t v758 = vmlaq_f64(v737, v757, v141[6]);
                float64x2_t v759 = vmlaq_f64(v736, v755, v141[4]);
                float64x2_t v760 = vmlaq_f64(vmlaq_f64(v736, v754, v141[5]), v732[9], v141[13]);
                float64x2_t v761 = vmlaq_f64(v759, v732[8], v141[12]);
                float64x2_t v762 = vmlaq_f64(vmlaq_f64(v737, v756, v141[7]), v732[11], v141[15]);
                float64x2_t v763 = vmlaq_f64(v758, v732[10], v141[14]);
                v732[10] = v757;
                v732[11] = v756;
                v732[8] = v755;
                v732[9] = v754;
                v731[10] = v763;
                v731[11] = v762;
                v731[8] = v761;
                v731[9] = v760;
                v731 += 12;
                v732 += 12;
                v734 += 2;
              }
              while (v734 < v733);
            }
            if (v730)
            {
              float64x2_t v764 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(*(void *)&v41[8 * (v730 - 1)] + 4 * v729)), 0);
              float64x2_t v765 = *v731;
              float64x2_t v766 = v731[1];
              float64x2_t v767 = v731[2];
              float64x2_t v768 = v731[3];
              float64x2_t v769 = vmlaq_f64(vmlaq_f64(v764, *v731, *v141), *v732, v141[8]);
              float64x2_t v770 = vmlaq_f64(vmlaq_f64(v764, v766, v141[1]), v732[1], v141[9]);
              float64x2_t v771 = vmlaq_f64(vmlaq_f64(v764, v767, v141[2]), v732[2], v141[10]);
              float64x2_t v772 = vmlaq_f64(vmlaq_f64(v764, v768, v141[3]), v732[3], v141[11]);
              v732[2] = v767;
              v732[3] = v768;
              float64x2_t *v732 = v765;
              v732[1] = v766;
              v731[2] = v771;
              v731[3] = v772;
              float64x2_t *v731 = v769;
              v731[1] = v770;
              float64x2_t v774 = v731[4];
              float64x2_t v773 = v731[5];
              float64x2_t v776 = v731[6];
              float64x2_t v775 = v731[7];
              float64x2_t v777 = vmlaq_f64(v764, v774, v141[4]);
              float64x2_t v778 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v775, v141[7]), v732[7], v141[15]);
              float64x2_t v779 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v776, v141[6]), v732[6], v141[14]);
              float64x2_t v780 = vmlaq_f64(vmlaq_f64(v764, v773, v141[5]), v732[5], v141[13]);
              float64x2_t v781 = vmlaq_f64(v777, v732[4], v141[12]);
              v732[4] = v774;
              v732[5] = v773;
              v732[6] = v776;
              v732[7] = v775;
              v731[6] = v779;
              v731[7] = v778;
              v731[4] = v781;
              v731[5] = v780;
            }
            v729 += v31;
            ++v728;
          }
          while (v728 != v676);
        }
        goto LABEL_311;
      }
      uint64_t v396 = 0;
      int v397 = 0;
      int v398 = 0;
      LODWORD(v399) = 0;
      while (1)
      {
        if (v139 >= 1)
        {
          int v400 = 0;
          uint64_t v399 = (int)v399;
          do
          {
            int v401 = *(_DWORD *)(v54 + 48);
            v402 = v143;
            v403 = v144;
            unint64_t v404 = v401 - (v401 != 0);
            if (v404)
            {
              unint64_t v405 = 0;
              v403 = v144;
              v402 = v143;
              do
              {
                v406 = &v41[8 * v405];
                float64x2_t v407 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(*(void *)v406 + 4 * v399)), 0);
                float64x2_t v408 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(*((void *)v406 + 1) + 4 * v399)), 0);
                float64x2_t v409 = *v402;
                float64x2_t v410 = v402[1];
                float64x2_t v411 = v402[2];
                float64x2_t v412 = v402[3];
                float64x2_t v413 = vmlaq_f64(vmlaq_f64(v407, *v402, *v141), *v403, v141[8]);
                float64x2_t v414 = vmlaq_f64(vmlaq_f64(v407, v410, v141[1]), v403[1], v141[9]);
                float64x2_t v415 = vmlaq_f64(vmlaq_f64(v407, v411, v141[2]), v403[2], v141[10]);
                float64x2_t v416 = vmlaq_f64(vmlaq_f64(v407, v412, v141[3]), v403[3], v141[11]);
                v403[2] = v411;
                v403[3] = v412;
                float64x2_t *v403 = v409;
                v403[1] = v410;
                v402[2] = v415;
                v402[3] = v416;
                float64x2_t *v402 = v413;
                v402[1] = v414;
                float64x2_t v417 = v402[4];
                float64x2_t v418 = v402[5];
                float64x2_t v419 = v402[6];
                float64x2_t v420 = v402[7];
                float64x2_t v421 = vmlaq_f64(vmlaq_f64(v408, v417, *v141), v403[4], v141[8]);
                float64x2_t v422 = vmlaq_f64(vmlaq_f64(v408, v418, v141[1]), v403[5], v141[9]);
                float64x2_t v423 = vmlaq_f64(vmlaq_f64(v408, v419, v141[2]), v403[6], v141[10]);
                float64x2_t v424 = vmlaq_f64(vmlaq_f64(v408, v420, v141[3]), v403[7], v141[11]);
                v403[6] = v419;
                v403[7] = v420;
                v403[4] = v417;
                v403[5] = v418;
                v402[6] = v423;
                v402[7] = v424;
                v402[4] = v421;
                v402[5] = v422;
                float64x2_t v426 = v402[8];
                float64x2_t v425 = v402[9];
                float64x2_t v428 = v402[10];
                float64x2_t v427 = v402[11];
                float64x2_t v429 = vmlaq_f64(v408, v428, v141[6]);
                float64x2_t v430 = vmlaq_f64(v407, v426, v141[4]);
                float64x2_t v431 = vmlaq_f64(vmlaq_f64(v407, v425, v141[5]), v403[9], v141[13]);
                float64x2_t v432 = vmlaq_f64(v430, v403[8], v141[12]);
                float64x2_t v433 = vmlaq_f64(vmlaq_f64(v408, v427, v141[7]), v403[11], v141[15]);
                float64x2_t v434 = vmlaq_f64(v429, v403[10], v141[14]);
                v403[10] = v428;
                v403[11] = v427;
                v403[8] = v426;
                v403[9] = v425;
                v402[10] = v434;
                v402[11] = v433;
                v402[8] = v432;
                v402[9] = v431;
                v402 += 12;
                v403 += 12;
                v405 += 2;
              }
              while (v405 < v404);
            }
            if (v401)
            {
              float64x2_t v435 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(*(void *)&v41[8 * (v401 - 1)] + 4 * v399)), 0);
              float64x2_t v436 = *v402;
              float64x2_t v437 = v402[1];
              float64x2_t v438 = v402[2];
              float64x2_t v439 = v402[3];
              float64x2_t v440 = vmlaq_f64(vmlaq_f64(v435, *v402, *v141), *v403, v141[8]);
              float64x2_t v441 = vmlaq_f64(vmlaq_f64(v435, v437, v141[1]), v403[1], v141[9]);
              float64x2_t v442 = vmlaq_f64(vmlaq_f64(v435, v438, v141[2]), v403[2], v141[10]);
              float64x2_t v443 = vmlaq_f64(vmlaq_f64(v435, v439, v141[3]), v403[3], v141[11]);
              v403[2] = v438;
              v403[3] = v439;
              float64x2_t *v403 = v436;
              v403[1] = v437;
              v402[2] = v442;
              v402[3] = v443;
              float64x2_t *v402 = v440;
              v402[1] = v441;
              float64x2_t v445 = v402[4];
              float64x2_t v444 = v402[5];
              float64x2_t v447 = v402[6];
              float64x2_t v446 = v402[7];
              float64x2_t v448 = vmlaq_f64(v435, v445, v141[4]);
              float64x2_t v449 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v446, v141[7]), v403[7], v141[15]);
              float64x2_t v450 = vmlaq_f64(vmlaq_f64((float64x2_t)0, v447, v141[6]), v403[6], v141[14]);
              float64x2_t v451 = vmlaq_f64(vmlaq_f64(v435, v444, v141[5]), v403[5], v141[13]);
              float64x2_t v452 = vmlaq_f64(v448, v403[4], v141[12]);
              v403[4] = v445;
              v403[5] = v444;
              v403[6] = v447;
              v403[7] = v446;
              v402[6] = v450;
              v402[7] = v449;
              v402[4] = v452;
              v402[5] = v451;
            }
            v399 += v31;
            ++v400;
          }
          while (v400 != v139);
        }
        double v453 = *(double *)(v54 + 96);
        uint64_t v454 = (v137 >> 21) & 0x3FC;
        v455 = (float64x2_t *)(v142 + (v454 << 6));
        uint64_t v456 = *(unsigned int *)(v54 + 48);
        int v457 = *(_DWORD *)(v54 + 48) != 0;
        v458 = *(float **)(v54 + 208);
        v459 = v143;
        v460 = v144;
        unint64_t v461 = (v456 - v457);
        if (v456 != v457)
        {
          unint64_t v462 = 0;
          v463 = *(float32x2_t **)(v54 + 208);
          v460 = v144;
          v459 = v143;
          do
          {
            float64x2_t v464 = v455[1];
            float64x2_t v466 = v455[2];
            float64x2_t v465 = v455[3];
            float64x2_t v467 = v455[10];
            float64x2_t v468 = v455[11];
            float64x2_t v469 = v455[8];
            float64x2_t v470 = v455[9];
            float64x2_t v471 = vmlaq_f64(vmulq_f64(v470, v460[1]), v459[1], v464);
            float64x2_t v472 = vmlaq_f64(vmulq_f64(v470, v460[5]), v459[5], v464);
            int64x2_t v473 = (int64x2_t)vaddq_f64(vmlaq_f64(vmulq_f64(v455[12], v460[8]), v459[8], v455[4]), vmlaq_f64(vmulq_f64(v455[13], v460[9]), v459[9], v455[5]));
            int64x2_t v474 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v469, *v460), *v459, *v455), vmlaq_f64(vmulq_f64(v467, v460[2]), v459[2], v466)), vaddq_f64(v471, vmlaq_f64(vmulq_f64(v468, v460[3]), v459[3], v465)));
            int64x2_t v475 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v469, v460[4]), v459[4], *v455), vmlaq_f64(vmulq_f64(v467, v460[6]), v459[6], v466)), vaddq_f64(v472, vmlaq_f64(vmulq_f64(v468, v460[7]), v459[7], v465)));
            int64x2_t v476 = (int64x2_t)vaddq_f64(vmlaq_f64(vmulq_f64(v455[14], v460[10]), v459[10], v455[6]), vmlaq_f64(vmulq_f64(v455[15], v460[11]), v459[11], v455[7]));
            *v463++ = vcvt_f32_f64(vaddq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v474, v475), (float64x2_t)vzip2q_s64(v474, v475)), vaddq_f64((float64x2_t)vzip1q_s64(v473, v476), (float64x2_t)vzip2q_s64(v473, v476))));
            v459 += 12;
            v460 += 12;
            v462 += 2;
          }
          while (v462 < v461);
        }
        if (v456)
        {
          int64x2_t v477 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v455[8], *v460), *v459, *v455), vmlaq_f64(vmulq_f64(v455[10], v460[2]), v459[2], v455[2])), vaddq_f64(vmlaq_f64(vmulq_f64(v455[9], v460[1]), v459[1], v455[1]), vmlaq_f64(vmulq_f64(v455[11], v460[3]), v459[3], v455[3])));
          int64x2_t v478 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v455[12], v460[4]), v459[4], v455[4]), vmlaq_f64(vmulq_f64(v455[14], v460[6]), v459[6], v455[6])), vaddq_f64(vmlaq_f64(vmulq_f64(v455[13], v460[5]), v459[5], v455[5]), vmlaq_f64(vmulq_f64(v455[15], v460[7]), v459[7], v455[7])));
          *(float *)v477.i32 = vaddvq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v477, v478), (float64x2_t)vzip2q_s64(v477, v478)));
          v458[(v456 - 1)] = *(float *)v477.i32;
        }
        v479 = (float64x2_t *)(v142 + ((unint64_t)(v454 + 4) << 6));
        v480 = *(float **)(v54 + 232);
        v481 = v143;
        v482 = v144;
        if (v461)
        {
          unint64_t v483 = 0;
          v484 = *(float32x2_t **)(v54 + 232);
          v482 = v144;
          v481 = v143;
          do
          {
            float64x2_t v485 = v479[1];
            float64x2_t v487 = v479[2];
            float64x2_t v486 = v479[3];
            float64x2_t v488 = v479[10];
            float64x2_t v489 = v479[11];
            float64x2_t v490 = v479[8];
            float64x2_t v491 = v479[9];
            float64x2_t v492 = vmlaq_f64(vmulq_f64(v491, v482[1]), v481[1], v485);
            float64x2_t v493 = vmlaq_f64(vmulq_f64(v491, v482[5]), v481[5], v485);
            int64x2_t v494 = (int64x2_t)vaddq_f64(vmlaq_f64(vmulq_f64(v479[12], v482[8]), v481[8], v479[4]), vmlaq_f64(vmulq_f64(v479[13], v482[9]), v481[9], v479[5]));
            int64x2_t v495 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v490, *v482), *v481, *v479), vmlaq_f64(vmulq_f64(v488, v482[2]), v481[2], v487)), vaddq_f64(v492, vmlaq_f64(vmulq_f64(v489, v482[3]), v481[3], v486)));
            int64x2_t v496 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v490, v482[4]), v481[4], *v479), vmlaq_f64(vmulq_f64(v488, v482[6]), v481[6], v487)), vaddq_f64(v493, vmlaq_f64(vmulq_f64(v489, v482[7]), v481[7], v486)));
            int64x2_t v497 = (int64x2_t)vaddq_f64(vmlaq_f64(vmulq_f64(v479[14], v482[10]), v481[10], v479[6]), vmlaq_f64(vmulq_f64(v479[15], v482[11]), v481[11], v479[7]));
            *v484++ = vcvt_f32_f64(vaddq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v495, v496), (float64x2_t)vzip2q_s64(v495, v496)), vaddq_f64((float64x2_t)vzip1q_s64(v494, v497), (float64x2_t)vzip2q_s64(v494, v497))));
            v481 += 12;
            v482 += 12;
            v483 += 2;
          }
          while (v483 < v461);
        }
        float v498 = v453 * (double)(v137 & 0x7FFFFF);
        if (v456) {
          break;
        }
        v499 = (uint64_t *)v46;
        if (v456) {
          goto LABEL_187;
        }
LABEL_188:
        v397 += v139;
        unsigned int v507 = v137 + v138;
        unsigned int v137 = (v137 + v138) & 0x7FFFFFFF;
        int v139 = v145 + (v507 >> 31);
        ++v398;
        v396 += v31;
        if (v398 == v56) {
          goto LABEL_276;
        }
      }
      int64x2_t v500 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v479[8], *v482), *v481, *v479), vmlaq_f64(vmulq_f64(v479[10], v482[2]), v481[2], v479[2])), vaddq_f64(vmlaq_f64(vmulq_f64(v479[9], v482[1]), v481[1], v479[1]), vmlaq_f64(vmulq_f64(v479[11], v482[3]), v481[3], v479[3])));
      int64x2_t v501 = (int64x2_t)vaddq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v479[12], v482[4]), v481[4], v479[4]), vmlaq_f64(vmulq_f64(v479[14], v482[6]), v481[6], v479[6])), vaddq_f64(vmlaq_f64(vmulq_f64(v479[13], v482[5]), v481[5], v479[5]), vmlaq_f64(vmulq_f64(v479[15], v482[7]), v481[7], v479[7])));
      *(float *)v500.i32 = vaddvq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v500, v501), (float64x2_t)vzip2q_s64(v500, v501)));
      v480[(v456 - 1)] = *(float *)v500.i32;
      v499 = (uint64_t *)v46;
      do
      {
LABEL_187:
        float v502 = *v458++;
        float v503 = v502;
        float v504 = *v480++;
        float v505 = v503 + (float)(v498 * (float)(v504 - v503));
        uint64_t v506 = *v499++;
        *(float *)(v506 + 4 * v396) = v505;
        --v456;
      }
      while (v456);
      goto LABEL_188;
    }
    if (*(unsigned char *)(v54 + 92))
    {
      int v102 = *(_DWORD *)(v54 + 60);
      int v103 = *(_DWORD *)(v54 + 68);
      int v58 = *(_DWORD *)(v54 + 72);
      int v60 = *(_DWORD *)(v54 + 88);
      v104 = *(float32x4_t **)(*(void *)v54 + 16);
      uint64_t v105 = *(void *)(*(void *)v54 + 40);
      v106 = *(float32x4_t **)(v54 + 112);
      long long v107 = *(float32x4_t **)(v54 + 136);
      int v108 = *(_DWORD *)(v54 + 52);
      if (*(_DWORD *)(v54 + 56) == 8)
      {
        if (v56 < 1)
        {
          int v112 = 0;
          LODWORD(v111) = 0;
        }
        else
        {
          uint64_t v109 = 0;
          int v110 = 0;
          LODWORD(v111) = 0;
          int v112 = 0;
          do
          {
            if (v60 >= 1)
            {
              int v113 = 0;
              uint64_t v111 = (int)v111;
              do
              {
                uint64_t v114 = *(unsigned int *)(v54 + 48);
                if (v114)
                {
                  v115 = (uint64_t *)((char *)&v843 - v40);
                  std::logic_error v116 = v106;
                  uint64_t v117 = v107;
                  do
                  {
                    uint64_t v118 = *v115++;
                    std::runtime_error v119 = (const float *)(v118 + 4 * v111);
                    float32x4_t v120 = vld1q_dup_f32(v119);
                    float32x4_t v121 = v116[1];
                    float32x4_t v122 = vmlaq_f32(v120, v121, v104[1]);
                    float32x4_t v123 = vmlaq_f32(vmlaq_f32(v120, *v116, *v104), *v117, v104[2]);
                    float32x4_t v124 = vmlaq_f32(v122, v117[1], v104[3]);
                    *uint64_t v117 = *v116;
                    v117[1] = v121;
                    v117 += 2;
                    *std::logic_error v116 = v123;
                    v116[1] = v124;
                    v116 += 2;
                    --v114;
                  }
                  while (v114);
                }
                v111 += v31;
                ++v113;
              }
              while (v113 != v60);
            }
            uint64_t v125 = *(unsigned int *)(v54 + 48);
            if (v125)
            {
              __int16 v126 = v106;
              v127 = v107;
              v128 = (uint64_t *)((char *)&v843 - v40);
              do
              {
                float32x4_t v129 = *v126;
                float32x4_t v130 = v126[1];
                v126 += 2;
                float32x4_t v132 = *v127;
                float32x4_t v131 = v127[1];
                v127 += 2;
                int8x16_t v133 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)(v105 + 64 * v58 + 32), v132), v129, *(float32x4_t *)(v105 + 64 * v58)), vmlaq_f32(vmulq_f32(*(float32x4_t *)(v105 + 64 * v58 + 48), v131), v130, *(float32x4_t *)(v105 + 64 * v58 + 16)));
                uint64_t v134 = *v128++;
                *(float *)(v134 + 4 * v109) = vaddv_f32(vadd_f32(*(float32x2_t *)v133.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v133, v133, 8uLL)));
                --v125;
              }
              while (v125);
            }
            v112 += v60;
            int v135 = v58 + v103;
            if (v135 < v108) {
              int v60 = v102;
            }
            else {
              int v60 = v102 + 1;
            }
            if (v135 < v108) {
              int v136 = 0;
            }
            else {
              int v136 = v108;
            }
            int v58 = v135 - v136;
            ++v110;
            v109 += v31;
          }
          while (v110 != v56);
        }
        int v508 = v55 - v112;
        if (v55 <= v112) {
          goto LABEL_274;
        }
        if (v60 < v508) {
          int v508 = v60;
        }
        if (v508 >= 1)
        {
          int v663 = 0;
          uint64_t v664 = (int)v111;
          do
          {
            uint64_t v665 = *(unsigned int *)(v54 + 48);
            if (v665)
            {
              v666 = (uint64_t *)((char *)&v843 - v40);
              v667 = v106;
              v668 = v107;
              do
              {
                uint64_t v669 = *v666++;
                v670 = (const float *)(v669 + 4 * v664);
                float32x4_t v671 = vld1q_dup_f32(v670);
                float32x4_t v672 = v667[1];
                float32x4_t v673 = vmlaq_f32(v671, v672, v104[1]);
                float32x4_t v674 = vmlaq_f32(vmlaq_f32(v671, *v667, *v104), *v668, v104[2]);
                float32x4_t v675 = vmlaq_f32(v673, v668[1], v104[3]);
                float32x4_t *v668 = *v667;
                v668[1] = v672;
                v668 += 2;
                float32x4_t *v667 = v674;
                v667[1] = v675;
                v667 += 2;
                --v665;
              }
              while (v665);
            }
            v664 += v31;
            ++v663;
          }
          while (v663 != v508);
        }
      }
      else
      {
        if (v56 < 1)
        {
          int v341 = 0;
          LODWORD(v340) = 0;
        }
        else
        {
          uint64_t v338 = 0;
          int v339 = 0;
          LODWORD(v340) = 0;
          int v341 = 0;
          do
          {
            if (v60 >= 1)
            {
              int v342 = 0;
              uint64_t v340 = (int)v340;
              do
              {
                int v343 = *(_DWORD *)(v54 + 48);
                v344 = v106;
                v345 = v107;
                unint64_t v346 = v343 - (v343 != 0);
                if (v346)
                {
                  unint64_t v347 = 0;
                  v345 = v107;
                  v344 = v106;
                  do
                  {
                    v348 = &v41[8 * v347];
                    v349 = (const float *)(*(void *)v348 + 4 * v340);
                    v350 = (const float *)(*((void *)v348 + 1) + 4 * v340);
                    float32x4_t v351 = vld1q_dup_f32(v349);
                    float32x4_t v352 = vld1q_dup_f32(v350);
                    float32x4_t v353 = v344[1];
                    float32x4_t v354 = vmlaq_f32(vmlaq_f32(v351, *v344, *v104), *v345, v104[4]);
                    float32x4_t v355 = vmlaq_f32(vmlaq_f32(v351, v353, v104[1]), v345[1], v104[5]);
                    float32x4_t *v345 = *v344;
                    v345[1] = v353;
                    float32x4_t *v344 = v354;
                    v344[1] = v355;
                    float32x4_t v356 = v344[2];
                    float32x4_t v357 = v344[3];
                    float32x4_t v358 = vmlaq_f32(vmlaq_f32(v352, v356, *v104), v345[2], v104[4]);
                    float32x4_t v359 = vmlaq_f32(vmlaq_f32(v352, v357, v104[1]), v345[3], v104[5]);
                    v345[2] = v356;
                    v345[3] = v357;
                    v344[2] = v358;
                    v344[3] = v359;
                    float32x4_t v360 = v344[4];
                    float32x4_t v361 = v344[5];
                    float32x4_t v362 = vmlaq_f32(vmlaq_f32(v351, v360, v104[2]), v345[4], v104[6]);
                    float32x4_t v363 = vmlaq_f32(vmlaq_f32(v352, v361, v104[3]), v345[5], v104[7]);
                    v345[4] = v360;
                    v345[5] = v361;
                    v344[4] = v362;
                    v344[5] = v363;
                    v344 += 6;
                    v345 += 6;
                    v347 += 2;
                  }
                  while (v347 < v346);
                }
                if (v343)
                {
                  v364 = (const float *)(*(void *)&v41[8 * (v343 - 1)] + 4 * v340);
                  float32x4_t v365 = vld1q_dup_f32(v364);
                  float32x4_t v366 = v344[1];
                  float32x4_t v367 = vmlaq_f32(vmlaq_f32(v365, *v344, *v104), *v345, v104[4]);
                  float32x4_t v368 = vmlaq_f32(vmlaq_f32(v365, v366, v104[1]), v345[1], v104[5]);
                  float32x4_t *v345 = *v344;
                  v345[1] = v366;
                  float32x4_t *v344 = v367;
                  v344[1] = v368;
                  float32x4_t v369 = v344[2];
                  float32x4_t v370 = v344[3];
                  float32x4_t v371 = vmlaq_f32(vmlaq_f32((float32x4_t)0, v370, v104[3]), v345[3], v104[7]);
                  float32x4_t v372 = vmlaq_f32(vmlaq_f32(v365, v369, v104[2]), v345[2], v104[6]);
                  v345[2] = v369;
                  v345[3] = v370;
                  v344[2] = v372;
                  v344[3] = v371;
                }
                v340 += v31;
                ++v342;
              }
              while (v342 != v60);
            }
            v373 = (float32x4_t *)(v105 + 128 * v58);
            int v374 = *(_DWORD *)(v54 + 48);
            v375 = v106;
            v376 = v107;
            unint64_t v377 = v374 - (v374 != 0);
            if (v377)
            {
              unint64_t v378 = 0;
              v376 = v107;
              v375 = v106;
              do
              {
                v379 = &v46[8 * v378];
                float32x4_t v380 = v373[1];
                float32x4_t v382 = v373[4];
                float32x4_t v381 = v373[5];
                float32x4_t v383 = vmlaq_f32(vmulq_f32(v381, v376[1]), v375[1], v380);
                float32x4_t v384 = vmlaq_f32(vmulq_f32(v381, v376[3]), v375[3], v380);
                uint64_t v386 = *(void *)v379;
                uint64_t v385 = *((void *)v379 + 1);
                int8x16_t v387 = (int8x16_t)vmlaq_f32(vmulq_f32(v373[7], v376[5]), v375[5], v373[3]);
                int8x16_t v388 = (int8x16_t)vmlaq_f32(vmulq_f32(v373[6], v376[4]), v375[4], v373[2]);
                int8x16_t v389 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v382, *v376), *v375, *v373), v383);
                *(float32x2_t *)v389.i8 = vadd_f32(*(float32x2_t *)v389.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v389, v389, 8uLL));
                int32x2_t v390 = (int32x2_t)vadd_f32(*(float32x2_t *)v388.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v388, v388, 8uLL));
                *(float32x2_t *)v389.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v389.i8, v390), (float32x2_t)vzip2_s32(*(int32x2_t *)v389.i8, v390));
                int8x16_t v391 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v382, v376[2]), v375[2], *v373), v384);
                *(float32x2_t *)v391.i8 = vadd_f32(*(float32x2_t *)v391.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v391, v391, 8uLL));
                *(float32x2_t *)v387.i8 = vadd_f32(*(float32x2_t *)v387.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v387, v387, 8uLL));
                *(float *)(v386 + 4 * v338) = vaddv_f32(*(float32x2_t *)v389.i8);
                *(float *)(v385 + 4 * v338) = vaddv_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v391.i8, *(int32x2_t *)v387.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v391.i8, *(int32x2_t *)v387.i8)));
                v375 += 6;
                v376 += 6;
                v378 += 2;
              }
              while (v378 < v377);
            }
            if (v374)
            {
              int8x16_t v392 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v373[4], *v376), *v375, *v373), vmlaq_f32(vmulq_f32(v373[5], v376[1]), v375[1], v373[1]));
              *(float32x2_t *)v392.i8 = vadd_f32(*(float32x2_t *)v392.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v392, v392, 8uLL));
              int8x16_t v393 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v373[6], v376[2]), v375[2], v373[2]), vmlaq_f32(vmulq_f32(v373[7], v376[3]), v375[3], v373[3]));
              *(float32x2_t *)v393.i8 = vadd_f32(*(float32x2_t *)v393.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v393, v393, 8uLL));
              *(float *)(*(void *)&v46[8 * (v374 - 1)] + 4 * v338) = vaddv_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v392.i8, *(int32x2_t *)v393.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v392.i8, *(int32x2_t *)v393.i8)));
            }
            v341 += v60;
            int v394 = v58 + v103;
            if (v394 < v108) {
              int v60 = v102;
            }
            else {
              int v60 = v102 + 1;
            }
            if (v394 < v108) {
              int v395 = 0;
            }
            else {
              int v395 = v108;
            }
            int v58 = v394 - v395;
            ++v339;
            v338 += v31;
          }
          while (v339 != v56);
        }
        int v508 = v55 - v341;
        if (v55 <= v341) {
          goto LABEL_274;
        }
        if (v60 < v508) {
          int v508 = v60;
        }
        if (v508 >= 1)
        {
          int v696 = 0;
          uint64_t v697 = (int)v340;
          do
          {
            int v698 = *(_DWORD *)(v54 + 48);
            v699 = v106;
            v700 = v107;
            unint64_t v701 = v698 - (v698 != 0);
            if (v701)
            {
              unint64_t v702 = 0;
              v700 = v107;
              v699 = v106;
              do
              {
                v703 = &v41[8 * v702];
                v704 = (const float *)(*(void *)v703 + 4 * v697);
                v705 = (const float *)(*((void *)v703 + 1) + 4 * v697);
                float32x4_t v706 = vld1q_dup_f32(v704);
                float32x4_t v707 = vld1q_dup_f32(v705);
                float32x4_t v708 = v699[1];
                float32x4_t v709 = vmlaq_f32(vmlaq_f32(v706, *v699, *v104), *v700, v104[4]);
                float32x4_t v710 = vmlaq_f32(vmlaq_f32(v706, v708, v104[1]), v700[1], v104[5]);
                float32x4_t *v700 = *v699;
                v700[1] = v708;
                float32x4_t *v699 = v709;
                v699[1] = v710;
                float32x4_t v711 = v699[2];
                float32x4_t v712 = v699[3];
                float32x4_t v713 = vmlaq_f32(vmlaq_f32(v707, v711, *v104), v700[2], v104[4]);
                float32x4_t v714 = vmlaq_f32(vmlaq_f32(v707, v712, v104[1]), v700[3], v104[5]);
                v700[2] = v711;
                v700[3] = v712;
                v699[2] = v713;
                v699[3] = v714;
                float32x4_t v715 = v699[4];
                float32x4_t v716 = v699[5];
                float32x4_t v717 = vmlaq_f32(vmlaq_f32(v706, v715, v104[2]), v700[4], v104[6]);
                float32x4_t v718 = vmlaq_f32(vmlaq_f32(v707, v716, v104[3]), v700[5], v104[7]);
                v700[4] = v715;
                v700[5] = v716;
                v699[4] = v717;
                v699[5] = v718;
                v699 += 6;
                v700 += 6;
                v702 += 2;
              }
              while (v702 < v701);
            }
            if (v698)
            {
              v719 = (const float *)(*(void *)&v41[8 * (v698 - 1)] + 4 * v697);
              float32x4_t v720 = vld1q_dup_f32(v719);
              float32x4_t v721 = v699[1];
              float32x4_t v722 = vmlaq_f32(vmlaq_f32(v720, *v699, *v104), *v700, v104[4]);
              float32x4_t v723 = vmlaq_f32(vmlaq_f32(v720, v721, v104[1]), v700[1], v104[5]);
              float32x4_t *v700 = *v699;
              v700[1] = v721;
              float32x4_t *v699 = v722;
              v699[1] = v723;
              float32x4_t v724 = v699[2];
              float32x4_t v725 = v699[3];
              float32x4_t v726 = vmlaq_f32(vmlaq_f32((float32x4_t)0, v725, v104[3]), v700[3], v104[7]);
              float32x4_t v727 = vmlaq_f32(vmlaq_f32(v720, v724, v104[2]), v700[2], v104[6]);
              v700[2] = v724;
              v700[3] = v725;
              v699[2] = v727;
              v699[3] = v726;
            }
            v697 += v31;
            ++v696;
          }
          while (v696 != v508);
        }
      }
      goto LABEL_273;
    }
    int v284 = *(_DWORD *)(v54 + 68);
    unsigned int v137 = *(_DWORD *)(v54 + 72);
    int v139 = *(_DWORD *)(v54 + 88);
    v285 = *(float32x4_t **)(*(void *)v54 + 16);
    uint64_t v286 = *(void *)(*(void *)v54 + 40);
    v287 = *(float32x4_t **)(v54 + 112);
    v288 = *(float32x4_t **)(v54 + 136);
    int v289 = *(_DWORD *)(v54 + 60);
    if (*(_DWORD *)(v54 + 56) == 8)
    {
      if (v56 < 1)
      {
        LODWORD(v292) = 0;
        int v291 = 0;
      }
      else
      {
        uint64_t v290 = 0;
        int v291 = 0;
        LODWORD(v292) = 0;
        for (int j = 0; j != v56; ++j)
        {
          if (v139 >= 1)
          {
            int v294 = 0;
            uint64_t v292 = (int)v292;
            do
            {
              uint64_t v295 = *(unsigned int *)(v54 + 48);
              if (v295)
              {
                v296 = (uint64_t *)v41;
                v297 = v287;
                v298 = v288;
                do
                {
                  uint64_t v299 = *v296++;
                  v300 = (const float *)(v299 + 4 * v292);
                  float32x4_t v301 = vld1q_dup_f32(v300);
                  float32x4_t v302 = v297[1];
                  float32x4_t v303 = vmlaq_f32(v301, v302, v285[1]);
                  float32x4_t v304 = vmlaq_f32(vmlaq_f32(v301, *v297, *v285), *v298, v285[2]);
                  float32x4_t v305 = vmlaq_f32(v303, v298[1], v285[3]);
                  float32x4_t *v298 = *v297;
                  v298[1] = v302;
                  v298 += 2;
                  float32x4_t *v297 = v304;
                  v297[1] = v305;
                  v297 += 2;
                  --v295;
                }
                while (v295);
              }
              v292 += v31;
              ++v294;
            }
            while (v294 != v139);
          }
          uint64_t v306 = *(unsigned int *)(v54 + 48);
          if (v306)
          {
            float v307 = *(double *)(v54 + 96) * (double)(v137 & 0x7FFFFF);
            uint64_t v308 = (v137 >> 22) & 0x1FE;
            v309 = (float32x4_t *)(v286 + 32 * v308);
            v310 = (float32x4_t *)(v286 + 32 * (v308 + 2));
            v311 = *(float **)(v54 + 208);
            v312 = v287;
            v313 = v288;
            v314 = v311;
            uint64_t v315 = *(unsigned int *)(v54 + 48);
            do
            {
              float32x4_t v316 = *v312;
              float32x4_t v317 = v312[1];
              v312 += 2;
              float32x4_t v319 = *v313;
              float32x4_t v318 = v313[1];
              v313 += 2;
              int8x16_t v320 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v309[2], v319), v316, *v309), vmlaq_f32(vmulq_f32(v309[3], v318), v317, v309[1]));
              *v314++ = vaddv_f32(vadd_f32(*(float32x2_t *)v320.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v320, v320, 8uLL)));
              --v315;
            }
            while (v315);
            v321 = *(float **)(v54 + 232);
            v322 = v287;
            v323 = v288;
            v324 = v321;
            uint64_t v325 = v306;
            do
            {
              float32x4_t v326 = *v322;
              float32x4_t v327 = v322[1];
              v322 += 2;
              float32x4_t v329 = *v323;
              float32x4_t v328 = v323[1];
              v323 += 2;
              int8x16_t v330 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v310[2], v329), v326, *v310), vmlaq_f32(vmulq_f32(v310[3], v328), v327, v310[1]));
              *v324++ = vaddv_f32(vadd_f32(*(float32x2_t *)v330.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v330, v330, 8uLL)));
              --v325;
            }
            while (v325);
            v331 = (uint64_t *)v46;
            do
            {
              float v332 = *v311++;
              float v333 = v332;
              float v334 = *v321++;
              float v335 = v333 + (float)(v307 * (float)(v334 - v333));
              uint64_t v336 = *v331++;
              *(float *)(v336 + 4 * v290) = v335;
              --v306;
            }
            while (v306);
          }
          v291 += v139;
          unsigned int v337 = v137 + v284;
          unsigned int v137 = (v137 + v284) & 0x7FFFFFFF;
          int v139 = v289 + (v337 >> 31);
          v290 += v31;
        }
      }
      int v676 = v55 - v291;
      if (v55 <= v291) {
        goto LABEL_312;
      }
      if (v139 < v676) {
        int v676 = v139;
      }
      if (v676 >= 1)
      {
        int v782 = 0;
        uint64_t v783 = (int)v292;
        do
        {
          uint64_t v784 = *(unsigned int *)(v54 + 48);
          if (v784)
          {
            v785 = (uint64_t *)v41;
            v786 = v287;
            v787 = v288;
            do
            {
              uint64_t v788 = *v785++;
              v789 = (const float *)(v788 + 4 * v783);
              float32x4_t v790 = vld1q_dup_f32(v789);
              float32x4_t v791 = v786[1];
              float32x4_t v792 = vmlaq_f32(v790, v791, v285[1]);
              float32x4_t v793 = vmlaq_f32(vmlaq_f32(v790, *v786, *v285), *v787, v285[2]);
              float32x4_t v794 = vmlaq_f32(v792, v787[1], v285[3]);
              float32x4_t *v787 = *v786;
              v787[1] = v791;
              v787 += 2;
              float32x4_t *v786 = v793;
              v786[1] = v794;
              v786 += 2;
              --v784;
            }
            while (v784);
          }
          v783 += v31;
          ++v782;
        }
        while (v782 != v676);
      }
      goto LABEL_311;
    }
    if (v56 < 1)
    {
      LODWORD(v585) = 0;
      int v583 = 0;
LABEL_300:
      int v676 = v55 - v583;
      if (v55 <= v583) {
        goto LABEL_312;
      }
      if (v139 < v676) {
        int v676 = v139;
      }
      if (v676 >= 1)
      {
        int v795 = 0;
        uint64_t v796 = (int)v585;
        do
        {
          int v797 = *(_DWORD *)(v54 + 48);
          v798 = v287;
          v799 = v288;
          unint64_t v800 = v797 - (v797 != 0);
          if (v800)
          {
            unint64_t v801 = 0;
            v799 = v288;
            v798 = v287;
            do
            {
              v802 = &v41[8 * v801];
              v803 = (const float *)(*(void *)v802 + 4 * v796);
              v804 = (const float *)(*((void *)v802 + 1) + 4 * v796);
              float32x4_t v805 = vld1q_dup_f32(v803);
              float32x4_t v806 = vld1q_dup_f32(v804);
              float32x4_t v807 = v798[1];
              float32x4_t v808 = vmlaq_f32(vmlaq_f32(v805, *v798, *v285), *v799, v285[4]);
              float32x4_t v809 = vmlaq_f32(vmlaq_f32(v805, v807, v285[1]), v799[1], v285[5]);
              float32x4_t *v799 = *v798;
              v799[1] = v807;
              float32x4_t *v798 = v808;
              v798[1] = v809;
              float32x4_t v810 = v798[2];
              float32x4_t v811 = v798[3];
              float32x4_t v812 = vmlaq_f32(vmlaq_f32(v806, v810, *v285), v799[2], v285[4]);
              float32x4_t v813 = vmlaq_f32(vmlaq_f32(v806, v811, v285[1]), v799[3], v285[5]);
              v799[2] = v810;
              v799[3] = v811;
              v798[2] = v812;
              v798[3] = v813;
              float32x4_t v814 = v798[4];
              float32x4_t v815 = v798[5];
              float32x4_t v816 = vmlaq_f32(vmlaq_f32(v805, v814, v285[2]), v799[4], v285[6]);
              float32x4_t v817 = vmlaq_f32(vmlaq_f32(v806, v815, v285[3]), v799[5], v285[7]);
              v799[4] = v814;
              v799[5] = v815;
              v798[4] = v816;
              v798[5] = v817;
              v798 += 6;
              v799 += 6;
              v801 += 2;
            }
            while (v801 < v800);
          }
          if (v797)
          {
            v818 = (const float *)(*(void *)&v41[8 * (v797 - 1)] + 4 * v796);
            float32x4_t v819 = vld1q_dup_f32(v818);
            float32x4_t v820 = v798[1];
            float32x4_t v821 = vmlaq_f32(vmlaq_f32(v819, *v798, *v285), *v799, v285[4]);
            float32x4_t v822 = vmlaq_f32(vmlaq_f32(v819, v820, v285[1]), v799[1], v285[5]);
            float32x4_t *v799 = *v798;
            v799[1] = v820;
            float32x4_t *v798 = v821;
            v798[1] = v822;
            float32x4_t v823 = v798[2];
            float32x4_t v824 = v798[3];
            float32x4_t v825 = vmlaq_f32(vmlaq_f32((float32x4_t)0, v824, v285[3]), v799[3], v285[7]);
            float32x4_t v826 = vmlaq_f32(vmlaq_f32(v819, v823, v285[2]), v799[2], v285[6]);
            v799[2] = v823;
            v799[3] = v824;
            v798[2] = v826;
            v798[3] = v825;
          }
          v796 += v31;
          ++v795;
        }
        while (v795 != v676);
      }
      goto LABEL_311;
    }
    uint64_t v582 = 0;
    int v583 = 0;
    int v584 = 0;
    LODWORD(v585) = 0;
    while (1)
    {
      if (v139 >= 1)
      {
        int v586 = 0;
        uint64_t v585 = (int)v585;
        do
        {
          int v587 = *(_DWORD *)(v54 + 48);
          v588 = v287;
          v589 = v288;
          unint64_t v590 = v587 - (v587 != 0);
          if (v590)
          {
            unint64_t v591 = 0;
            v589 = v288;
            v588 = v287;
            do
            {
              v592 = &v41[8 * v591];
              v593 = (const float *)(*(void *)v592 + 4 * v585);
              v594 = (const float *)(*((void *)v592 + 1) + 4 * v585);
              float32x4_t v595 = vld1q_dup_f32(v593);
              float32x4_t v596 = vld1q_dup_f32(v594);
              float32x4_t v597 = v588[1];
              float32x4_t v598 = vmlaq_f32(vmlaq_f32(v595, *v588, *v285), *v589, v285[4]);
              float32x4_t v599 = vmlaq_f32(vmlaq_f32(v595, v597, v285[1]), v589[1], v285[5]);
              float32x4_t *v589 = *v588;
              v589[1] = v597;
              float32x4_t *v588 = v598;
              v588[1] = v599;
              float32x4_t v600 = v588[2];
              float32x4_t v601 = v588[3];
              float32x4_t v602 = vmlaq_f32(vmlaq_f32(v596, v600, *v285), v589[2], v285[4]);
              float32x4_t v603 = vmlaq_f32(vmlaq_f32(v596, v601, v285[1]), v589[3], v285[5]);
              v589[2] = v600;
              v589[3] = v601;
              v588[2] = v602;
              v588[3] = v603;
              float32x4_t v604 = v588[4];
              float32x4_t v605 = v588[5];
              float32x4_t v606 = vmlaq_f32(vmlaq_f32(v595, v604, v285[2]), v589[4], v285[6]);
              float32x4_t v607 = vmlaq_f32(vmlaq_f32(v596, v605, v285[3]), v589[5], v285[7]);
              v589[4] = v604;
              v589[5] = v605;
              v588[4] = v606;
              v588[5] = v607;
              v588 += 6;
              v589 += 6;
              v591 += 2;
            }
            while (v591 < v590);
          }
          if (v587)
          {
            v608 = (const float *)(*(void *)&v41[8 * (v587 - 1)] + 4 * v585);
            float32x4_t v609 = vld1q_dup_f32(v608);
            float32x4_t v610 = v588[1];
            float32x4_t v611 = vmlaq_f32(vmlaq_f32(v609, *v588, *v285), *v589, v285[4]);
            float32x4_t v612 = vmlaq_f32(vmlaq_f32(v609, v610, v285[1]), v589[1], v285[5]);
            float32x4_t *v589 = *v588;
            v589[1] = v610;
            float32x4_t *v588 = v611;
            v588[1] = v612;
            float32x4_t v613 = v588[2];
            float32x4_t v614 = v588[3];
            float32x4_t v615 = vmlaq_f32(vmlaq_f32((float32x4_t)0, v614, v285[3]), v589[3], v285[7]);
            float32x4_t v616 = vmlaq_f32(vmlaq_f32(v609, v613, v285[2]), v589[2], v285[6]);
            v589[2] = v613;
            v589[3] = v614;
            v588[2] = v616;
            v588[3] = v615;
          }
          v585 += v31;
          ++v586;
        }
        while (v586 != v139);
      }
      double v617 = *(double *)(v54 + 96);
      uint64_t v618 = (v137 >> 21) & 0x3FC;
      v619 = (float32x4_t *)(v286 + 32 * v618);
      uint64_t v620 = *(unsigned int *)(v54 + 48);
      v621 = *(float **)(v54 + 208);
      v622 = v287;
      v623 = v288;
      unint64_t v624 = v620 - (*(_DWORD *)(v54 + 48) != 0);
      if (v624)
      {
        unint64_t v625 = 0;
        v626 = *(float32x2_t **)(v54 + 208);
        v623 = v288;
        v622 = v287;
        do
        {
          float32x4_t v627 = v619[1];
          float32x4_t v629 = v619[4];
          float32x4_t v628 = v619[5];
          float32x4_t v630 = vmlaq_f32(vmulq_f32(v628, v623[1]), v622[1], v627);
          float32x4_t v631 = vmlaq_f32(vmulq_f32(v628, v623[3]), v622[3], v627);
          int8x16_t v632 = (int8x16_t)vmlaq_f32(vmulq_f32(v619[7], v623[5]), v622[5], v619[3]);
          int8x16_t v633 = (int8x16_t)vmlaq_f32(vmulq_f32(v619[6], v623[4]), v622[4], v619[2]);
          int8x16_t v634 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v629, *v623), *v622, *v619), v630);
          *(float32x2_t *)v633.i8 = vadd_f32(*(float32x2_t *)v633.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v633, v633, 8uLL));
          *(float32x2_t *)v634.i8 = vadd_f32(*(float32x2_t *)v634.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v634, v634, 8uLL));
          int8x16_t v635 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v629, v623[2]), v622[2], *v619), v631);
          *(float32x2_t *)v635.i8 = vadd_f32(*(float32x2_t *)v635.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v635, v635, 8uLL));
          *(float32x2_t *)v632.i8 = vadd_f32(*(float32x2_t *)v632.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v632, v632, 8uLL));
          *v626++ = vadd_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v634.i8, *(int32x2_t *)v635.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v634.i8, *(int32x2_t *)v635.i8)), vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v633.i8, *(int32x2_t *)v632.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v633.i8, *(int32x2_t *)v632.i8)));
          v622 += 6;
          v623 += 6;
          v625 += 2;
        }
        while (v625 < v624);
      }
      if (v620)
      {
        int8x16_t v636 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v619[4], *v623), *v622, *v619), vmlaq_f32(vmulq_f32(v619[5], v623[1]), v622[1], v619[1]));
        *(float32x2_t *)v636.i8 = vadd_f32(*(float32x2_t *)v636.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v636, v636, 8uLL));
        int8x16_t v637 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v619[6], v623[2]), v622[2], v619[2]), vmlaq_f32(vmulq_f32(v619[7], v623[3]), v622[3], v619[3]));
        *(float32x2_t *)v637.i8 = vadd_f32(*(float32x2_t *)v637.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v637, v637, 8uLL));
        v621[(v620 - 1)] = vaddv_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v636.i8, *(int32x2_t *)v637.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v636.i8, *(int32x2_t *)v637.i8)));
      }
      v638 = (float32x4_t *)(v286 + 32 * (v618 + 4));
      v639 = *(float **)(v54 + 232);
      v640 = v287;
      v641 = v288;
      if (v624)
      {
        unint64_t v642 = 0;
        v643 = *(float32x2_t **)(v54 + 232);
        v641 = v288;
        v640 = v287;
        do
        {
          float32x4_t v644 = v638[1];
          float32x4_t v646 = v638[4];
          float32x4_t v645 = v638[5];
          float32x4_t v647 = vmlaq_f32(vmulq_f32(v645, v641[1]), v640[1], v644);
          float32x4_t v648 = vmlaq_f32(vmulq_f32(v645, v641[3]), v640[3], v644);
          int8x16_t v649 = (int8x16_t)vmlaq_f32(vmulq_f32(v638[7], v641[5]), v640[5], v638[3]);
          int8x16_t v650 = (int8x16_t)vmlaq_f32(vmulq_f32(v638[6], v641[4]), v640[4], v638[2]);
          int8x16_t v651 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v646, *v641), *v640, *v638), v647);
          *(float32x2_t *)v650.i8 = vadd_f32(*(float32x2_t *)v650.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v650, v650, 8uLL));
          *(float32x2_t *)v651.i8 = vadd_f32(*(float32x2_t *)v651.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v651, v651, 8uLL));
          int8x16_t v652 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v646, v641[2]), v640[2], *v638), v648);
          *(float32x2_t *)v652.i8 = vadd_f32(*(float32x2_t *)v652.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v652, v652, 8uLL));
          *(float32x2_t *)v649.i8 = vadd_f32(*(float32x2_t *)v649.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v649, v649, 8uLL));
          *v643++ = vadd_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v651.i8, *(int32x2_t *)v652.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v651.i8, *(int32x2_t *)v652.i8)), vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v650.i8, *(int32x2_t *)v649.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v650.i8, *(int32x2_t *)v649.i8)));
          v640 += 6;
          v641 += 6;
          v642 += 2;
        }
        while (v642 < v624);
      }
      float v653 = v617 * (double)(v137 & 0x7FFFFF);
      if (v620) {
        break;
      }
      v654 = (uint64_t *)v46;
      if (v620) {
        goto LABEL_236;
      }
LABEL_237:
      v583 += v139;
      unsigned int v662 = v137 + v284;
      unsigned int v137 = (v137 + v284) & 0x7FFFFFFF;
      int v139 = v289 + (v662 >> 31);
      ++v584;
      v582 += v31;
      if (v584 == v56) {
        goto LABEL_300;
      }
    }
    int8x16_t v655 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v638[4], *v641), *v640, *v638), vmlaq_f32(vmulq_f32(v638[5], v641[1]), v640[1], v638[1]));
    *(float32x2_t *)v655.i8 = vadd_f32(*(float32x2_t *)v655.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v655, v655, 8uLL));
    int8x16_t v656 = (int8x16_t)vaddq_f32(vmlaq_f32(vmulq_f32(v638[6], v641[2]), v640[2], v638[2]), vmlaq_f32(vmulq_f32(v638[7], v641[3]), v640[3], v638[3]));
    *(float32x2_t *)v656.i8 = vadd_f32(*(float32x2_t *)v656.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v656, v656, 8uLL));
    v639[(v620 - 1)] = vaddv_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v655.i8, *(int32x2_t *)v656.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v655.i8, *(int32x2_t *)v656.i8)));
    v654 = (uint64_t *)v46;
    do
    {
LABEL_236:
      float v657 = *v621++;
      float v658 = v657;
      float v659 = *v639++;
      float v660 = v658 + (float)(v653 * (float)(v659 - v658));
      uint64_t v661 = *v654++;
      *(float *)(v661 + 4 * v582) = v660;
      --v620;
    }
    while (v620);
    goto LABEL_237;
  }
  long long v35 = *(RamstadSRC ***)(a1 + 96);
  long long v36 = *(RamstadSRC ***)(a1 + 104);
  if (v35 != v36)
  {
    uint64_t v37 = 0;
    int v38 = vcvtmd_s64_f64(a5);
    int v39 = vcvtmd_s64_f64(v17);
    do
    {
      RamstadSRC::processMono(*v35++, &(**v844)[v37], (float *)(*(void *)v852.__r_.__value_.__l.__data_ + v37 * 4), v38, v39, v31, v31);
      ++v37;
    }
    while (v35 != v36);
  }
LABEL_314:
  if (v852.__r_.__value_.__r.__words[0])
  {
    v852.__r_.__value_.__l.__size_ = v852.__r_.__value_.__r.__words[0];
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v852.__r_.__value_.__l.__data_, (uint64_t)(v852.__r_.__value_.__r.__words[2] - v852.__r_.__value_.__r.__words[0]) >> 4);
  }
  return a6;
}

void sub_1BACC3E6C(_Unwind_Exception *exception_object)
{
  double v3 = (caulk::rt_safe_memory_resource *)v1[16];
  if (v3)
  {
    v1[17] = v3;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](v3, (uint64_t)(v1[18] - (void)v3) >> 4);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::Ramstad_Resampler::~Ramstad_Resampler(AMCP::DAL::Ramstad_Resampler *this)
{
  uint64_t v1 = (void **)((char *)this + 96);
  std::vector<std::unique_ptr<RamstadSRC>>::__destroy_vector::operator()[abi:ne180100](&v1);

  JUMPOUT(0x1C1859840);
}

{
  void **v1;

  uint64_t v1 = (void **)((char *)this + 96);
  std::vector<std::unique_ptr<RamstadSRC>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::vector<std::unique_ptr<RamstadSRC>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  double v2 = (RamstadSRC **)**a1;
  if (v2)
  {
    BOOL v4 = (RamstadSRC **)v1[1];
    double v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<RamstadSRC>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      double v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

RamstadSRC *std::unique_ptr<RamstadSRC>::reset[abi:ne180100](RamstadSRC **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    RamstadSRC::~RamstadSRC(result);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

uint64_t AMCP::IO_Core::IO_Thread_Realtime::run(int **this)
{
  uint64_t v190 = *MEMORY[0x1E4F143B8];
  int v2 = **this;
  AMCP::Graph::Manifest_Queue::get_sample_rate(*((AMCP::Graph::Manifest_Queue **)*this + 70));
  double v3 = (AMCP::Logging_Settings *)kdebug_trace();
  AMCP::Logging_Settings::instance(v3);
  if (HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    double v5 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      double v6 = pthread_self();
      mach_port_t v7 = pthread_mach_thread_np(v6);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "IO_Thread_Realtime.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 35;
      *(_WORD *)&unsigned char buf[24] = 1024;
      *(_DWORD *)&buf[26] = v2;
      _os_log_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_INFO, "%6u %32s:%-5d IO_Thread_Realtime(%d)::start", buf, 0x1Eu);
    }
  }
  cycle_size_in_host_ticks = (_opaque_pthread_t *)AMCP::Graph::Manifest_Queue::get_cycle_size_in_host_ticks((AMCP::Graph::Manifest_Queue *)*this);
  int v9 = pthread_self();
  AMCP::Utility::configure_thread_for_realtime(v9, cycle_size_in_host_ticks, 0);
  if (!*this)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v153 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
    {
      v154 = pthread_self();
      mach_port_t v155 = pthread_mach_thread_np(v154);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v155;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "IO_Thread_Realtime.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 145;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "not ((m_manifest_queue) != nullptr)";
      _os_log_error_impl(&dword_1BAA78000, v153, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s IO_Thread_Realtime::join_workgroup_interval() called with null queue", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v175);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"IO_Thread_Realtime::join_workgroup_interval() called with null queue", (uint64_t)&v173);
    std::logic_error::logic_error((std::logic_error *)&v171, &v173);
    v171.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)v185, (const std::logic_error *)&v171);
    long long v187 = 0uLL;
    float64x2_t v188 = 0;
    int v189 = -1;
    *(void *)v185 = &unk_1F1489CC8;
    *((void *)&v186 + 1) = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v185);
    *(void *)&buf[32] = "void AMCP::IO_Core::IO_Thread_Realtime::join_workgroup_interval()";
    *(void *)&unsigned char buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IO_Thread_Realtime.cpp";
    LODWORD(v183) = 145;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v181.__r_.__value_.__l.__data_);
    *(void *)v176 = &unk_1F148AA90;
    *(std::string *)&v176[8] = v181;
    memset(&v181, 0, sizeof(v181));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  AMCP::Graph::Manifest_Queue::join_workgroup_interval((AMCP::Graph::Manifest_Queue *)*this);
  if (!*this)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    float64x2_t v156 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
    {
      float64x2_t v157 = pthread_self();
      mach_port_t v158 = pthread_mach_thread_np(v157);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v158;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "IO_Thread_Realtime.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 161;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "not ((m_manifest_queue) != nullptr)";
      _os_log_error_impl(&dword_1BAA78000, v156, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s IO_Thread_Realtime::start_workgroup_interval() called with null queue", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v175);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"IO_Thread_Realtime::start_workgroup_interval() called with null queue", (uint64_t)&v173);
    std::logic_error::logic_error((std::logic_error *)&v171, &v173);
    v171.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)v185, (const std::logic_error *)&v171);
    long long v187 = 0uLL;
    float64x2_t v188 = 0;
    int v189 = -1;
    *(void *)v185 = &unk_1F1489CC8;
    *((void *)&v186 + 1) = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v185);
    *(void *)&buf[32] = "void AMCP::IO_Core::IO_Thread_Realtime::start_workgroup_interval()";
    *(void *)&unsigned char buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IO_Thread_Realtime.cpp";
    LODWORD(v183) = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v181.__r_.__value_.__l.__data_);
    *(void *)v176 = &unk_1F148AA90;
    *(std::string *)&v176[8] = v181;
    memset(&v181, 0, sizeof(v181));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  AMCP::Graph::Manifest_Queue::start_workgroup_interval((AMCP::Graph::Manifest_Queue *)*this);
  __int16 v10 = (AMCP::Graph::Manifest_Queue *)*this;
  unsigned int v11 = AMCP::Graph::Manifest_Queue::maybe_acquire_new_manifest((AMCP::Graph::Manifest_Queue *)*this);
  if (!v11)
  {
    wake_time_in_uint64_t host_time = AMCP::Graph::Manifest_Queue::get_wake_time_in_host_time(v10);
    if (wake_time_in_host_time > mach_absolute_time()) {
      AMCP::Graph::Manifest_Queue::wait_for_next_cycle(v10);
    }
  }
  caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this[2]);
  int v14 = v13;
  uint64_t v15 = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this[2]);
  unsigned int v169 = v11;
  char v17 = 0;
  if (!v11)
  {
    uint64_t v170 = HIDWORD(v16) & 1;
    char v18 = 1;
    while (1)
    {
      uint64_t v15 = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this[2]);
      if (((v15 != 0) & v18) != 1) {
        goto LABEL_13;
      }
      uint64_t v37 = pthread_self();
      BOOL is_thread_configured_for_realtime = AMCP::Utility::is_thread_configured_for_realtime(v37, v38);
      if (!is_thread_configured_for_realtime)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_thread_configured_for_realtime);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        v149 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v149, OS_LOG_TYPE_ERROR))
        {
          int v150 = pthread_self();
          mach_port_t v151 = pthread_mach_thread_np(v150);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v151;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "IO_Thread_Realtime.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 177;
          *(_WORD *)&unsigned char buf[24] = 2080;
          *(void *)&buf[26] = "(AMCP::Utility::is_thread_configured_for_realtime(pthread_self())) == false";
          _os_log_error_impl(&dword_1BAA78000, v149, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Only call maybe_sleep_thread_for_power_change from a realtime thread", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v175);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Only call maybe_sleep_thread_for_power_change from a realtime thread", (uint64_t)&v173);
        std::runtime_error::runtime_error(&v171, &v173);
        std::runtime_error::runtime_error((std::runtime_error *)v185, &v171);
        long long v187 = 0uLL;
        float64x2_t v188 = 0;
        int v189 = -1;
        *(void *)v185 = &unk_1F148A9A8;
        *((void *)&v186 + 1) = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)v185);
        *(void *)&buf[32] = "BOOL AMCP::IO_Core::IO_Thread_Realtime::maybe_sleep_thread_for_power_change(AMCP::Power_State)";
        *(void *)&unsigned char buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IO_Thread_Realtime.cpp";
        LODWORD(v183) = 177;
        std::vector<void *>::vector(&v181);
        int v152 = backtrace((void **)v181.__r_.__value_.__l.__data_, (v181.__r_.__value_.__l.__size_ - v181.__r_.__value_.__r.__words[0]) >> 3);
        std::vector<void *>::resize(&v181.__r_.__value_.__l.__data_, v152);
        *(void *)v176 = &unk_1F148AA90;
        *(std::string *)&v176[8] = v181;
        memset(&v181, 0, sizeof(v181));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      switch(v14)
      {
        case 1:
          if (*((unsigned char *)this + 33)) {
            goto LABEL_58;
          }
          goto LABEL_37;
        case 2:
        case 4:
          goto LABEL_58;
        case 3:
          if (!*((unsigned char *)this + 32)) {
            goto LABEL_37;
          }
          goto LABEL_58;
        default:
LABEL_37:
          char v40 = 0;
          break;
      }
      while (1)
      {
        long long v41 = (AMCP::Log::Scope_Registry *)caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this[2]);
        if (!v41) {
          break;
        }
        AMCP::Log::Scope_Registry::get(v41);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v42 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
        {
          int v51 = pthread_self();
          mach_port_t v52 = pthread_mach_thread_np(v51);
          int v53 = **this;
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v52;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "IO_Thread_Realtime.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 189;
          *(_WORD *)&unsigned char buf[24] = 1024;
          *(_DWORD *)&buf[26] = v53;
          _os_log_debug_impl(&dword_1BAA78000, v42, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Context(%d): IO_Thread_Realtime: parked for sleeping", buf, 0x1Eu);
        }
        unint64_t v43 = (AMCP::IO_Core::Thread_Control_State *)this[2];
        uint64_t v44 = mach_absolute_time();
        AMCP::IO_Core::Thread_Control_State::sleep_until_time(v43, v44 + 360000000);
        uint64_t v45 = (AMCP::Logging_Settings *)caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this[2]);
        int v47 = v46;
        if (v46 == 1)
        {
          if (*((unsigned char *)this + 33)) {
            goto LABEL_49;
          }
        }
        else if (v46 == 4 || v46 == 3 && *((unsigned char *)this + 32))
        {
LABEL_49:
          BOOL v48 = 1;
          goto LABEL_50;
        }
        BOOL v48 = v46 == 2;
LABEL_50:
        AMCP::Logging_Settings::instance(v45);
        if (BYTE1(AMCP::Logging_Settings::instance(void)::s_instance))
        {
          AMCP::Log::Scope_Registry::get(v49);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          long long v50 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v54 = pthread_self();
            mach_port_t v55 = pthread_mach_thread_np(v54);
            int v56 = **this;
            int v57 = *((unsigned __int8 *)this + 32);
            int v58 = *((unsigned __int8 *)this + 33);
            *(_DWORD *)buf = 67110914;
            *(_DWORD *)&uint8_t buf[4] = v55;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "IO_Thread_Realtime.cpp";
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = 202;
            *(_WORD *)&unsigned char buf[24] = 1024;
            *(_DWORD *)&buf[26] = v56;
            *(_WORD *)&buf[30] = 1024;
            *(_DWORD *)&buf[32] = v47;
            *(_WORD *)&buf[36] = 1024;
            *(_DWORD *)&buf[38] = v48;
            *(_WORD *)&buf[42] = 1024;
            *(_DWORD *)&buf[44] = v57;
            LOWORD(v183) = 1024;
            *(_DWORD *)((char *)&v183 + 2) = v58;
            _os_log_debug_impl(&dword_1BAA78000, v50, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Context(%d): %d Thread can play: %d, m_can_play_during_notification_wake: %d, m_can_play_during_dark_wake: %d", buf, 0x36u);
          }
        }
        char v40 = 1;
        if (v48) {
          goto LABEL_59;
        }
      }
      if ((v40 & 1) == 0) {
LABEL_58:
      }
        AMCP::Graph::Manifest_Queue::process_once((AMCP::Graph::Manifest_Queue *)*this, 0, *((unsigned __int8 *)this + 34));
LABEL_59:
      int v59 = (AMCP::Graph::Manifest_Queue *)*this;
      int v60 = (AMCP::Graph::Manifest_Queue *)*((void *)*this + 70);
      if (!v60) {
        goto LABEL_65;
      }
      if (*((unsigned char *)v59 + 424))
      {
        *((unsigned char *)v59 + 424) = AMCP::Graph::Manifest_Queue::check_if_catchup_mode_is_still_active((AMCP::Graph::Manifest_Queue *)*this);
        goto LABEL_148;
      }
      if (AMCP::Graph::Manifest_Queue::timebases_are_valid(v60))
      {
        uint64_t v61 = (AMCP::Graph::Manifest *)*((void *)v59 + 70);
        if (v61) {
          overload_time_in_uint64_t host_time = AMCP::Graph::Manifest::get_overload_time_in_host_time(v61, (AMCP::Graph::Manifest_Queue *)((char *)v59 + 312));
        }
        else {
          overload_time_in_uint64_t host_time = -1;
        }
        uint64_t v63 = mach_absolute_time();
        AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)&v173, *(void *)(*((void *)v59 + 70) + 72), *(std::__shared_weak_count **)(*((void *)v59 + 70) + 80));
        (*(void (**)(unsigned char *__return_ptr))(*(void *)v173.__r_.__value_.__l.__data_ + 32))(buf);
        double v64 = *((double *)v59 + 80);
        double v65 = *(double *)buf;
        long long v66 = v183;
        *((_OWORD *)v59 + 42) = *(_OWORD *)&buf[32];
        *((_OWORD *)v59 + 43) = v66;
        long long v67 = *(_OWORD *)&buf[16];
        *((_OWORD *)v59 + 40) = *(_OWORD *)buf;
        *((_OWORD *)v59 + 41) = v67;
        if (v64 != 0.0 && v64 > v65)
        {
          uint64_t v74 = *((void *)v59 + 70);
          if (v74)
          {
            uint64_t v76 = *(void **)(v74 + 72);
            uint64_t v75 = *(std::__shared_weak_count **)(v74 + 80);
            if (v75) {
              atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v168 = v75;
            int v77 = *(_DWORD *)v59;
            uint64_t v78 = v76[8];
            *(_DWORD *)(v78 + 40) = 0;
            *(void *)(v78 + 8) = 0;
            *(void *)(v78 + 16) = 0;
            for (int i = (void *)v76[3]; i; int i = (void *)*i)
            {
              uint64_t v80 = i[12];
              uint64_t v81 = *(void *)(v80 + 304);
              if (v81)
              {
                if (*(char *)(v80 + 31) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v176, *(const std::string::value_type **)(v80 + 8), *(void *)(v80 + 16));
                  uint64_t v81 = *(void *)(v80 + 304);
                }
                else
                {
                  *(_OWORD *)v176 = *(_OWORD *)(v80 + 8);
                  *(void *)&v176[16] = *(void *)(v80 + 24);
                }
                *(void *)&v176[24] = *(void *)(v80 + 32);
                LODWORD(v177) = *(_DWORD *)(v80 + 40);
                *(_DWORD *)v185 = v77;
                long long v186 = *(_OWORD *)v176;
                long long v187 = *(_OWORD *)&v176[16];
                memset(v176, 0, 24);
                LODWORD(v188) = v177;
                (*(void (**)(uint64_t, uint8_t *))(*(void *)v81 + 112))(v81, v185);
                if (SBYTE7(v187) < 0) {
                  operator delete((void *)v186);
                }
              }
            }
            uint64_t v82 = v76[12];
            float64x2_t v83 = (std::__shared_weak_count *)v76[13];
            if (v83) {
              atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(uint64_t))(*(void *)v82 + 216))(v82);
            if (v83) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v83);
            }
            if (v168) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v168);
            }
            AMCP::Graph::Manifest_Queue::reanchor_after_time_change(v59);
            caulk::make_string((caulk *)"%u - Discontinuous timestamps", (uint64_t)v185, *(unsigned int *)v59);
            AMCP::Log::Scope_Registry::get(v84);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v176, "com.apple.coreaudio", "AMCP");
            float64x2_t v85 = *(caulk::concurrent::messenger **)(*(void *)v176 + 8);
            float64x2_t v86 = pthread_self();
            mach_port_t v87 = pthread_mach_thread_np(v86);
            int v88 = SHIBYTE(v186);
            uint64_t v89 = *(uint8_t **)v185;
            uint64_t v90 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
            v91 = v185;
            if (v88 < 0) {
              v91 = v89;
            }
            *(_DWORD *)(v90 + 16) = 0;
            *(unsigned char *)(v90 + 20) = 16;
            *(_DWORD *)(v90 + 24) = v87;
            *(void *)(v90 + 32) = "Manifest_Queue.cpp";
            *(_DWORD *)(v90 + 40) = 560;
            *(void *)(v90 + 48) = v91;
            *(void *)uint64_t v90 = &unk_1F1464CC8;
            *(void *)(v90 + 8) = 0;
            caulk::concurrent::messenger::enqueue(v85, (caulk::concurrent::message *)v90);
            if (*(void *)&v176[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v176[8]);
            }
            if (SHIBYTE(v186) < 0) {
              operator delete(*(void **)v185);
            }
          }
          goto LABEL_116;
        }
        if (v63 < overload_time_in_host_time) {
          goto LABEL_116;
        }
        uint64_t v69 = *((void *)v59 + 70);
        if (!v69) {
          goto LABEL_116;
        }
        AMCP::Graph::Manifest::get_master_timebase((AMCP::Graph::Manifest *)v176, *(void *)(v69 + 72), *(std::__shared_weak_count **)(v69 + 80));
        uint64_t v70 = *(void *)v176;
        double v71 = (*(double (**)(void, uint64_t))(**(void **)v176 + 64))(*(void *)v176, v63);
        double v72 = (*(double (**)(uint64_t, unint64_t))(*(void *)v70 + 64))(v70, overload_time_in_host_time);
        kdebug_trace();
        kdebug_trace();
        if (*((unsigned char *)v59 + 425))
        {
          BOOL v73 = AMCP::Graph::Manifest_Queue::check_if_catchup_mode_is_still_active(v59);
          *((unsigned char *)v59 + 424) = v73;
        }
        else
        {
          uint64_t v92 = *((void *)v59 + 70);
          uint64_t v93 = *(void *)(v92 + 72);
          float64x2_t v94 = *(std::__shared_weak_count **)(v92 + 80);
          if (v94) {
            atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v95 = *(void *)(v93 + 160);
          if (v95) {
            std::function<void ()>::operator()(v95, *(_DWORD *)v59);
          }
          if (v94) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v94);
          }
          AMCP::Graph::Manifest_Queue::reanchor_after_time_change(v59);
        }
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v73);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v185, "com.apple.coreaudio", "AMCP");
        float64x2_t v96 = *(caulk::concurrent::messenger **)(*(void *)v185 + 8);
        float64x2_t v97 = pthread_self();
        mach_port_t v98 = pthread_mach_thread_np(v97);
        int v99 = *(_DWORD *)v59;
        uint64_t v100 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 80, 8);
        *(_DWORD *)(v100 + 16) = 0;
        *(unsigned char *)(v100 + 20) = 16;
        *(_DWORD *)(v100 + 24) = v98;
        *(void *)(v100 + 32) = "Manifest_Queue.cpp";
        *(_DWORD *)(v100 + 40) = 588;
        *(void *)(v100 + 48) = "";
        *(_DWORD *)(v100 + 56) = v99;
        *(double *)(v100 + 64) = v71;
        *(double *)(v100 + 72) = v72;
        *(void *)uint64_t v100 = &unk_1F1464D20;
        *(void *)(v100 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v96, (caulk::concurrent::message *)v100);
        if ((void)v186) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v186);
        }
        uint64_t v106 = *((void *)v59 + 70);
        uint64_t v108 = *(void *)(v106 + 96);
        long long v107 = *(std::__shared_weak_count **)(v106 + 104);
        if (v107)
        {
          atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v107);
          if (v108)
          {
            uint64_t v109 = *((void *)v59 + 70);
            uint64_t v108 = *(void *)(v109 + 96);
            uint64_t v110 = *(void *)(v109 + 104);
            if (v110) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v110 + 8), 1uLL, memory_order_relaxed);
            }
LABEL_113:
            AMCP::Graph::Manifest_Log::add_message(v108, 2, "Overload %s(%u) - current time: %0.f  deadline time: %0.f", v101, v102, v103, v104, v105, (char)"");
          }
        }
        else if (v108)
        {
          goto LABEL_113;
        }
        if (*(void *)&v176[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v176[8]);
        }
LABEL_116:
        if (v173.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v173.__r_.__value_.__l.__size_);
        }
        if (*((unsigned char *)v59 + 552))
        {
          if ((*((unsigned char *)v59 + 432) & 2) == 0) {
            AMCP::DAL::DAL_Time_Delta::validate((AMCP::Graph::Manifest_Queue *)((char *)v59 + 432));
          }
          double v111 = *((double *)v59 + 55);
          if ((*((unsigned char *)v59 + 312) & 2) == 0) {
            AMCP::DAL::DAL_Time_Delta::validate((AMCP::Graph::Manifest_Queue *)((char *)v59 + 312));
          }
          if (round(v111) != round(*((double *)v59 + 40)))
          {
            int v112 = (void *)*((void *)v59 + 70);
            uint64_t v114 = v112[12];
            int v113 = (std::__shared_weak_count *)v112[13];
            if (v113)
            {
              atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
              std::__shared_weak_count::__release_shared[abi:ne180100](v113);
              if (v114)
              {
                int v112 = (void *)*((void *)v59 + 70);
                uint64_t v114 = v112[12];
                uint64_t v115 = v112[13];
                if (v115)
                {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v115 + 8), 1uLL, memory_order_relaxed);
                  int v112 = (void *)*((void *)v59 + 70);
                }
LABEL_130:
                AMCP::Graph::Manifest::get_iocontext_uid((AMCP::Graph::Manifest *)buf, v112);
                if (buf[23] >= 0) {
                  float32x4_t v122 = buf;
                }
                else {
                  LOBYTE(v122) = buf[0];
                }
                if ((*((unsigned char *)v59 + 312) & 2) == 0) {
                  AMCP::DAL::DAL_Time_Delta::validate((AMCP::Graph::Manifest_Queue *)((char *)v59 + 312));
                }
                if ((*((unsigned char *)v59 + 432) & 2) == 0) {
                  AMCP::DAL::DAL_Time_Delta::validate((AMCP::Graph::Manifest_Queue *)((char *)v59 + 432));
                }
                AMCP::Graph::Manifest_Log::add_message(v114, 7, "Manifest %s from %lld to %lld", v117, v118, v119, v120, v121, (char)v122);
              }
            }
            else if (v114)
            {
              goto LABEL_130;
            }
          }
          double updated = AMCP::Graph::Manifest_Queue::update_execution_context(v59, (AMCP::Graph::Manifest_Queue *)((char *)v59 + 432));
          buf[0] = 0;
          char v184 = 0;
          std::__optional_storage_base<AMCP::Graph::Manifest_Execution_Context,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<AMCP::Graph::Manifest_Execution_Context,false>>((uint64_t)v59 + 432, (long long *)buf);
          std::__optional_destruct_base<AMCP::Graph::Manifest_Execution_Context,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
        }
        else
        {
          double updated = 0.0;
        }
        if (round(updated) != 0.0)
        {
          uint64_t v123 = *((void *)v59 + 70);
          uint64_t v124 = *(void *)(v123 + 72);
          uint64_t v125 = *(std::__shared_weak_count **)(v123 + 80);
          if (v125) {
            atomic_fetch_add_explicit(&v125->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          AMCP::Graph::Manifest_Counter::adjust_cycle_anchor_for_buffer_size_change(*(double **)(v124 + 64), updated);
          if (v125) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v125);
          }
          AMCP::Graph::Manifest_Queue::process_once(v59, 1, 0);
        }
        if (*((void *)v59 + 46)) {
          caulk::mach::os_workgroup_interval_managed::finish((AMCP::Graph::Manifest_Queue *)((char *)v59 + 360));
        }
        AMCP::Graph::Manifest_Queue::wait_for_next_cycle(v59);
        AMCP::Graph::Manifest_Queue::start_workgroup_interval(v59);
LABEL_148:
        char v18 = AMCP::Graph::Manifest_Queue::timebases_are_valid(*((AMCP::Graph::Manifest_Queue **)v59 + 70));
      }
      else
      {
LABEL_65:
        char v18 = 0;
      }
      caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this[2]);
      if (v14 != v126)
      {
        caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this[2]);
        int v14 = v127;
        if (v127 == 2)
        {
          *((unsigned char *)this + 34) = *((unsigned char *)this + 33) ^ 1;
          goto LABEL_153;
        }
        *((unsigned char *)this + 34) = 0;
        if (v127)
        {
LABEL_153:
          if (!caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this[2])) {
            goto LABEL_165;
          }
          uint64_t v128 = *((void *)*this + 70);
          if (!v128) {
            goto LABEL_165;
          }
          float32x4_t v129 = *(AMCP::Graph::Manifest_Inventory **)(v128 + 72);
          float32x4_t v130 = *(std::__shared_weak_count **)(v128 + 80);
          if (v130) {
            atomic_fetch_add_explicit(&v130->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          AMCP::Graph::Manifest_Inventory::take_power_assertions(v129);
          if (!v130) {
            goto LABEL_165;
          }
LABEL_163:
          std::__shared_weak_count::__release_shared[abi:ne180100](v130);
          goto LABEL_165;
        }
        uint64_t v131 = *((void *)*this + 70);
        if (!v131)
        {
          int v14 = 0;
          goto LABEL_165;
        }
        float32x4_t v132 = *(AMCP::Graph::Manifest_Inventory **)(v131 + 72);
        float32x4_t v130 = *(std::__shared_weak_count **)(v131 + 80);
        if (v130) {
          atomic_fetch_add_explicit(&v130->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        AMCP::Graph::Manifest_Inventory::release_power_assertions(v132);
        int v14 = 0;
        if (v130) {
          goto LABEL_163;
        }
      }
LABEL_165:
      caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this[2]);
      char v17 = 1;
      if ((v170 & 1) != (v133 & 1))
      {
        caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)this[2]);
        uint64_t v170 = HIDWORD(v134) & 1;
        uint64_t v135 = *((void *)*this + 70);
        if (v135)
        {
          int v136 = *(AMCP::Graph::Manifest_Inventory **)(v135 + 72);
          unsigned int v137 = *(std::__shared_weak_count **)(v135 + 80);
          if (v137) {
            atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *(unsigned char *)int v136 = (v134 & 0x100000000) >> 32;
          if ((v134 & 0x100000000) != 0) {
            AMCP::Graph::Manifest_Inventory::release_power_assertions(v136);
          }
          else {
            AMCP::Graph::Manifest_Inventory::take_power_assertions(v136);
          }
          if (v137) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v137);
          }
        }
      }
    }
  }
  char v18 = 0;
LABEL_13:
  __int16 v19 = (AMCP::Graph::Manifest_Queue *)*this;
  if (!*this)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v15);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    float64x2_t v159 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
    {
      float64x2_t v160 = pthread_self();
      mach_port_t v161 = pthread_mach_thread_np(v160);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v161;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "IO_Thread_Realtime.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 169;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "not ((m_manifest_queue) != nullptr)";
      _os_log_error_impl(&dword_1BAA78000, v159, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s IO_Thread_Realtime::finish_workgroup_interval() called with null queue", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v175);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"IO_Thread_Realtime::finish_workgroup_interval() called with null queue", (uint64_t)&v173);
    std::logic_error::logic_error((std::logic_error *)&v171, &v173);
    v171.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)v185, (const std::logic_error *)&v171);
    long long v187 = 0uLL;
    float64x2_t v188 = 0;
    int v189 = -1;
    *(void *)v185 = &unk_1F1489CC8;
    *((void *)&v186 + 1) = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v185);
    *(void *)&buf[32] = "void AMCP::IO_Core::IO_Thread_Realtime::finish_workgroup_interval()";
    *(void *)&unsigned char buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IO_Thread_Realtime.cpp";
    LODWORD(v183) = 169;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v181.__r_.__value_.__l.__data_);
    *(void *)v176 = &unk_1F148AA90;
    *(std::string *)&v176[8] = v181;
    memset(&v181, 0, sizeof(v181));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (*((void *)v19 + 46)) {
    uint64_t v15 = caulk::mach::os_workgroup_interval_managed::finish((AMCP::Graph::Manifest_Queue *)((char *)v19 + 360));
  }
  if (v11 == 2)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v15);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v20 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    uint64_t v15 = os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG);
    int v21 = v2;
    signed int v22 = (unsigned char *)&unk_1EBFFA000;
    uint64_t v23 = 2;
    if (v15)
    {
      long long v24 = pthread_self();
      mach_port_t v25 = pthread_mach_thread_np(v24);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v25;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "IO_Thread_Realtime.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 91;
      _os_log_debug_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Interrupted while trying to start the IO thread", buf, 0x18u);
    }
    goto LABEL_179;
  }
  char v26 = v17 & v18;
  int v21 = v2;
  signed int v22 = &unk_1EBFFA000;
  uint64_t v23 = v169;
  if (v26) {
    goto LABEL_179;
  }
  long long v27 = pthread_self();
  long long v28 = (AMCP::Log::Scope_Registry *)pthread_getname_np(v27, buf, 0xFAuLL);
  AMCP::Log::Scope_Registry::get(v28);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v185, "com.apple.coreaudio", "AMCP");
  uint64_t v29 = **(NSObject ***)v185;
  if ((void)v186) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v186);
  }
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    int v147 = pthread_self();
    mach_port_t v148 = pthread_mach_thread_np(v147);
    *(_DWORD *)v185 = 67109890;
    *(_DWORD *)&v185[4] = v148;
    LOWORD(v186) = 2080;
    *(void *)((char *)&v186 + 2) = "IO_Thread_Realtime.cpp";
    WORD5(v186) = 1024;
    HIDWORD(v186) = 98;
    LOWORD(v187) = 2080;
    *(void *)((char *)&v187 + 2) = buf;
    _os_log_error_impl(&dword_1BAA78000, v29, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d I/O thread exited unexpectedly: %s", v185, 0x22u);
  }
  int v30 = (AMCP::Graph::Manifest_Queue *)*this;
  uint64_t v31 = *((void *)*this + 70);
  uint64_t v33 = *(void *)(v31 + 72);
  long long v32 = *(atomic_ullong **)(v31 + 80);
  if (!v32)
  {
    if (v33)
    {
      long long v35 = 0;
      goto LABEL_176;
    }
LABEL_213:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v32);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v185, "com.apple.coreaudio", "AMCP");
    float64x2_t v165 = **(NSObject ***)v185;
    if ((void)v186) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v186);
    }
    if (os_log_type_enabled(v165, OS_LOG_TYPE_ERROR))
    {
      float64x2_t v166 = pthread_self();
      mach_port_t v167 = pthread_mach_thread_np(v166);
      *(_DWORD *)v185 = 67109890;
      *(_DWORD *)&v185[4] = v167;
      LOWORD(v186) = 2080;
      *(void *)((char *)&v186 + 2) = "Manifest_Queue.cpp";
      WORD5(v186) = 1024;
      HIDWORD(v186) = 802;
      LOWORD(v187) = 2080;
      *(void *)((char *)&v187 + 2) = "not (m_current_manifiest->get_inventory())";
      _os_log_error_impl(&dword_1BAA78000, v165, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We need a valid inventory in order to report a thread error", v185, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v180);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"We need a valid inventory in order to report a thread error", (uint64_t)&v181);
    std::logic_error::logic_error(&v175, &v181);
    v175.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)v176, &v175);
    *(void *)&v176[24] = 0;
    uint64_t v177 = 0;
    uint64_t v178 = 0;
    int v179 = -1;
    *(void *)v176 = &unk_1F1489CC8;
    *(void *)&v176[16] = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v185, (uint64_t)v176);
    *((void *)&v187 + 1) = "void AMCP::Graph::Manifest_Queue::report_thread_error() const";
    float64x2_t v188 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Queue.cpp";
    int v189 = 802;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v171);
    v173.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(std::runtime_error *)&v173.__r_.__value_.__r.__words[1] = v171;
    uint64_t v174 = v172;
    v171.__vftable = 0;
    v171.__imp_.__imp_ = 0;
    uint64_t v172 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  atomic_fetch_add_explicit(v32 + 1, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v32);
  if (!v33) {
    goto LABEL_213;
  }
  uint64_t v34 = *((void *)v30 + 70);
  uint64_t v33 = *(void *)(v34 + 72);
  long long v35 = *(std::__shared_weak_count **)(v34 + 80);
  if (v35)
  {
    char v36 = 0;
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_177;
  }
LABEL_176:
  char v36 = 1;
LABEL_177:
  uint64_t v15 = AMCP::Graph::Manifest_Inventory::report_thread_error(*(void *)(v33 + 192));
  if ((v36 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
LABEL_179:
  int v138 = (AMCP::Graph::Manifest_Queue *)*this;
  if (!*this)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v15);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    float64x2_t v162 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v162, OS_LOG_TYPE_ERROR))
    {
      float64x2_t v163 = pthread_self();
      mach_port_t v164 = pthread_mach_thread_np(v163);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v164;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "IO_Thread_Realtime.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 153;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "not ((m_manifest_queue) != nullptr)";
      _os_log_error_impl(&dword_1BAA78000, v162, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s IO_Thread_Realtime::leave_workgroup_interval() called with null queue", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v175);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"IO_Thread_Realtime::leave_workgroup_interval() called with null queue", (uint64_t)&v173);
    std::logic_error::logic_error((std::logic_error *)&v171, &v173);
    v171.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)v185, (const std::logic_error *)&v171);
    long long v187 = 0uLL;
    float64x2_t v188 = 0;
    int v189 = -1;
    *(void *)v185 = &unk_1F1489CC8;
    *((void *)&v186 + 1) = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v185);
    *(void *)&buf[32] = "void AMCP::IO_Core::IO_Thread_Realtime::leave_workgroup_interval()";
    *(void *)&unsigned char buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IO_Thread_Realtime.cpp";
    LODWORD(v183) = 153;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v181.__r_.__value_.__l.__data_);
    *(void *)v176 = &unk_1F148AA90;
    *(std::string *)&v176[8] = v181;
    memset(&v181, 0, sizeof(v181));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (*((void *)v138 + 46)) {
    caulk::mach::os_workgroup_managed::leave((AMCP::Graph::Manifest_Queue *)((char *)v138 + 360));
  }
  int v139 = pthread_self();
  AMCP::Utility::configure_thread_for_normal_priority(v139, v140);
  AMCP::Graph::Manifest_Queue::flush((AMCP::Graph::Manifest_Queue *)*this);
  v141 = (AMCP::Logging_Settings *)kdebug_trace();
  AMCP::Logging_Settings::instance(v141);
  if (v22[915])
  {
    AMCP::Log::Scope_Registry::get(v142);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v143 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v143, OS_LOG_TYPE_INFO))
    {
      v144 = pthread_self();
      mach_port_t v145 = pthread_mach_thread_np(v144);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v145;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "IO_Thread_Realtime.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 116;
      *(_WORD *)&unsigned char buf[24] = 1024;
      *(_DWORD *)&buf[26] = v21;
      _os_log_impl(&dword_1BAA78000, v143, OS_LOG_TYPE_INFO, "%6u %32s:%-5d IO_Thread_Realtime(%d)::end", buf, 0x1Eu);
    }
  }
  return v23;
}

void sub_1BACC5F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a2)
  {
    if (v56) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v56);
    }
    if (a40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a40);
    }
    if (a34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a34);
    }
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1BACC6104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::runtime_error a29,uint64_t a30,uint64_t a31,void *a32,void *a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,std::runtime_error a59,void *a60,uint64_t a61)
{
  if (a2)
  {
    std::runtime_error::~runtime_error(v61);
    if (__p)
    {
      a43 = (uint64_t)__p;
      operator delete(__p);
    }
    if (a52)
    {
      a53 = (uint64_t)a52;
      operator delete(a52);
    }
    a60 = &unk_1F148A9F0;
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a61);
    std::runtime_error::~runtime_error(&a59);
    *(void *)(v63 - 176) = &unk_1F148A9F0;
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v62 + 24));
    std::runtime_error::~runtime_error((std::runtime_error *)(v63 - 192));
    std::runtime_error::~runtime_error(&a29);
    if (a37 < 0) {
      operator delete(a32);
    }
    __cxa_free_exception(v61);
    AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a39);
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Packetized_Data_Handler::get_data@<X0>(AMCP::DAL::Packetized_Data_Handler *a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  double v7 = a5 - a4;
  if (round(a5 - a4) != round(AMCP::DAL::Packetized_Data_Handler::get_length_in_frames(a1)))
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v27 = **(NSObject ***)buf;
    if (v46.i64[0]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v46.i64[0]);
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      long long v28 = pthread_self();
      mach_port_t v29 = pthread_mach_thread_np(v28);
      unint64_t v30 = vcvtmd_s64_f64(v7);
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v29;
      v46.i16[0] = 2080;
      *(uint64_t *)((char *)v46.i64 + 2) = (uint64_t)"Packetized_Data_Handler.cpp";
      v46.i16[5] = 1024;
      v46.i32[3] = 152;
      *(_WORD *)int v47 = 2080;
      *(void *)&void v47[2] = "not (range.length() == get_length_in_frames())";
      *(_WORD *)&v47[10] = 2048;
      *(void *)&v47[12] = v30;
      _os_log_error_impl(&dword_1BAA78000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Bad range length for packetized data, requested range length %lld", buf, 0x2Cu);
    }
    else
    {
      unint64_t v30 = vcvtmd_s64_f64(v7);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Bad range length for packetized data, requested range length %lld", (uint64_t)&v36, v30);
    std::logic_error::logic_error(&v37, &v36);
    v37.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v38, &v37);
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    int v43 = -1;
    v38.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v39 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v38);
    *(void *)&v47[8] = "virtual Sample_Group<uint8_t> AMCP::DAL::Packetized_Data_Handler::get_data(const Container &, S"
                         "ample_Time_Range) const";
    *(void *)&v47[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_Data_Handler.cpp";
    int v48 = 152;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v31);
    long long v34 = v31;
    uint64_t v35 = v32;
    long long v31 = 0uLL;
    uint64_t v32 = 0;
    uint64_t v33 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t result = AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::Packetized_Data_Handler>(*a2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  __int16 v10 = *(unsigned int **)(result + 64);
  unsigned int v11 = *(unsigned int **)(result + 72);
  if (v10 != v11)
  {
    uint64_t v12 = 0;
    int v13 = a3 + 2;
    do
    {
      uint64_t v14 = *((void *)v10 + 1);
      uint64_t v15 = *v10;
      if ((unint64_t)v12 >= *v13)
      {
        uint64_t v16 = (uint64_t)((uint64_t)v12 - *a3) >> 4;
        if ((unint64_t)(v16 + 1) >> 60) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = *v13 - *a3;
        uint64_t v18 = v17 >> 3;
        if (v17 >> 3 <= (unint64_t)(v16 + 1)) {
          uint64_t v18 = v16 + 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        *(void *)&v47[8] = a3 + 2;
        if (v19) {
          unint64_t v19 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>(v19);
        }
        else {
          uint64_t v20 = 0;
        }
        int v21 = (void *)(v19 + 16 * v16);
        *int v21 = v14;
        v21[1] = v15;
        unint64_t v22 = *a3;
        unint64_t v23 = a3[1];
        if (v23 == *a3)
        {
          int64x2_t v25 = vdupq_n_s64(v23);
          unint64_t v24 = v19 + 16 * v16;
        }
        else
        {
          unint64_t v24 = v19 + 16 * v16;
          do
          {
            *(_OWORD *)(v24 - 16) = *(_OWORD *)(v23 - 16);
            v24 -= 16;
            v23 -= 16;
          }
          while (v23 != v22);
          int64x2_t v25 = *(int64x2_t *)a3;
        }
        uint64_t v12 = v21 + 2;
        *a3 = v24;
        a3[1] = (unint64_t)(v21 + 2);
        int64x2_t v46 = v25;
        unint64_t v26 = a3[2];
        a3[2] = v19 + 16 * v20;
        *(void *)int v47 = v26;
        *(void *)buf = v25.i64[0];
        uint64_t result = std::__split_buffer<AMCP::DAL::Audio_Samples<unsigned char>,caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>> &>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        *uint64_t v12 = v14;
        v12[1] = v15;
        v12 += 2;
      }
      a3[1] = (unint64_t)v12;
      v10 += 8;
    }
    while (v10 != v11);
  }
  return result;
}

void sub_1BACC6724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  int v39 = *(caulk::rt_safe_memory_resource **)v37;
  if (*(void *)v37)
  {
    *(void *)(v37 + 8) = v39;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>::deallocate[abi:ne180100](v39, (uint64_t)(*(void *)(v37 + 16) - (void)v39) >> 4);
  }
  _Unwind_Resume(exception_object);
}

double AMCP::DAL::Packetized_Data_Handler::get_length_in_frames(AMCP::DAL::Packetized_Data_Handler *this)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 8) == *((void *)this + 9))
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v2 = **(NSObject ***)buf;
    if (*(void *)v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v20);
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      double v3 = pthread_self();
      mach_port_t v4 = pthread_mach_thread_np(v3);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v4;
      *(_WORD *)uint64_t v20 = 2080;
      *(void *)&v20[2] = "Packetized_Data_Handler.cpp";
      __int16 v21 = 1024;
      int v22 = 97;
      __int16 v23 = 2080;
      *(void *)unint64_t v24 = "not (not m_samples.empty())";
      _os_log_error_impl(&dword_1BAA78000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Packetized_Data_Handler::get_length_in_frames: empty data buffer", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v18);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Packetized_Data_Handler::get_length_in_frames: empty data buffer", (uint64_t)&v10);
    std::logic_error::logic_error(&v11, &v10);
    v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v12, &v11);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v17 = -1;
    v12.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v13 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v12);
    *(void *)&v24[6] = "virtual Sample_Time AMCP::DAL::Packetized_Data_Handler::get_length_in_frames() const";
    int64x2_t v25 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_Data_Handler.cpp";
    int v26 = 97;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v5);
    long long v8 = v5;
    uint64_t v9 = v6;
    long long v5 = 0uLL;
    uint64_t v6 = 0;
    double v7 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return (double)(*((void *)this + 7) * (unint64_t)*((unsigned int *)this + 7));
}

void sub_1BACC6A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::Packetized_Data_Handler>(uint64_t result)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!result)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v1 = **(NSObject ***)buf;
    if (*(void *)v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v19);
    }
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      int v2 = pthread_self();
      mach_port_t v3 = pthread_mach_thread_np(v2);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v3;
      *(_WORD *)unint64_t v19 = 2080;
      *(void *)&v19[2] = "Container.h";
      __int16 v20 = 1024;
      int v21 = 121;
      __int16 v22 = 2080;
      *(void *)__int16 v23 = "not ((m_impl.get()) != nullptr)";
      _os_log_error_impl(&dword_1BAA78000, v1, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to call Container::GetContainerData on a null Container", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v17);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to call Container::GetContainerData on a null Container", (uint64_t)&v9);
    std::logic_error::logic_error(&v10, &v9);
    v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v11, &v10);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    int v16 = -1;
    v11.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    std::logic_error v12 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v11);
    *(void *)&v23[6] = "T *AMCP::DAL::Container::get_container_data_ptr() const [T = AMCP::DAL::Packetized_Data_Handler]";
    unint64_t v24 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Container.h";
    int v25 = 121;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v4);
    long long v7 = v4;
    uint64_t v8 = v5;
    long long v4 = 0uLL;
    uint64_t v5 = 0;
    uint64_t v6 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return result;
}

void sub_1BACC6D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

unint64_t std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>(unint64_t result)
{
  if (!(result >> 60))
  {
    uint64_t result = *MEMORY[0x1E4FB7E88];
    if (*MEMORY[0x1E4FB7E88]) {
      return caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)result);
    }
  }
  __break(1u);
  return result;
}

uint64_t std::__split_buffer<AMCP::DAL::Audio_Samples<unsigned char>,caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  }
  long long v4 = *(caulk::rt_safe_memory_resource **)a1;
  if (*(void *)a1) {
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>::deallocate[abi:ne180100](v4, (uint64_t)(*(void *)(a1 + 24) - (void)v4) >> 4);
  }
  return a1;
}

uint64_t AMCP::DAL::Packetized_Data_Handler::dal_operation_get_property()
{
  return 0;
}

double AMCP::DAL::Packetized_Data_Handler::dal_operation_apply()
{
  return 0.0;
}

void AMCP::DAL::Packetized_Data_Handler::dal_operation_context_create(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t *AMCP::DAL::Packetized_Data_Handler::get_ring_buffer_time_translator(AMCP::DAL::Packetized_Data_Handler *this)
{
  {
    AMCP::DAL::Packetized_Data_Handler::get_ring_buffer_time_translator(void)const::s_translator = (uint64_t)&unk_1F146B180;
  }
  return &AMCP::DAL::Packetized_Data_Handler::get_ring_buffer_time_translator(void)const::s_translator;
}

void AMCP::DAL::Packetized_Buffer_Time_Translator::translate_range(const AMCP::DAL::DAL_Time_Range *a1@<X1>, const AMCP::DAL::DAL_Time_Range *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  long long v7 = (const AMCP::DAL::DAL_Time_Range *)((char *)a2 + 40);
  AMCP::DAL::DAL_Time::operator-((uint64_t)buf, (const AMCP::DAL::DAL_Time_Range *)((char *)a2 + 40), a2);
  AMCP::DAL::DAL_Time::operator-((uint64_t)&v40, (const AMCP::DAL::DAL_Time_Range *)((char *)a1 + 40), a1);
  BOOL v8 = AMCP::DAL::DAL_Time_Delta::operator==((AMCP::DAL::DAL_Time_Delta *)buf, (uint64_t)&v40);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  std::string v9 = *(AMCP::Log::Scope_Registry **)&buf[32];
  if (*(void *)&buf[32]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[32]);
  }
  if (!v8)
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v27 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = pthread_self();
      mach_port_t v29 = pthread_mach_thread_np(v28);
      AMCP::DAL::DAL_Time::operator-((uint64_t)&v40, v7, a2);
      if (((uint64_t)v40.__vftable & 2) == 0) {
        AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v40);
      }
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v29;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Packetized_Data_Handler.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 173;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "not (range.length() == ref_range.length())";
      *(_WORD *)&buf[34] = 2048;
      *(void *)&buf[36] = vcvtmd_s64_f64(*(double *)&v40.__imp_.__imp_);
      _os_log_error_impl(&dword_1BAA78000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s invalid range length %lld", buf, 0x2Cu);
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v43);
      }
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v46);
    __cxa_allocate_exception(0x40uLL);
    AMCP::DAL::DAL_Time::operator-((uint64_t)v35, v7, a2);
    if ((v35[0] & 2) == 0) {
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)v35);
    }
    caulk::make_string((caulk *)"invalid range length %lld", (uint64_t)&v38, vcvtmd_s64_f64(v36));
    std::logic_error::logic_error(&v39, &v38);
    v39.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v40, &v39);
    uint64_t v42 = 0;
    int v43 = 0;
    uint64_t v44 = 0;
    int v45 = -1;
    v40.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v41 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v40);
    *(void *)&buf[32] = "virtual rt_safe_vector<Buffer_Time_Translator::Translation_Range> AMCP::DAL::Packetized_Buffer"
                          "_Time_Translator::translate_range(const DAL_Time_Range &, const DAL_Time_Range &) const";
    *(void *)&unsigned char buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_Data_Handler.cpp";
    *(_DWORD *)&unsigned char buf[48] = 173;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v30);
    uint64_t v32 = &unk_1F148AA90;
    long long v33 = v30;
    uint64_t v34 = v31;
    long long v30 = 0uLL;
    uint64_t v31 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  AMCP::DAL::DAL_Time::operator-((uint64_t)v35, (const AMCP::DAL::DAL_Time_Range *)((char *)a1 + 40), a1);
  if ((v35[0] & 2) == 0) {
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)v35);
  }
  *(void *)buf = 0;
  *(double *)&uint8_t buf[8] = v36;
  *(_OWORD *)&buf[16] = *(_OWORD *)a2;
  uint64_t v10 = *((void *)a2 + 3);
  *(void *)&buf[32] = *((void *)a2 + 2);
  *(void *)&unsigned char buf[40] = v10;
  uint64_t v11 = *((void *)a2 + 4);
  *(void *)&unsigned char buf[48] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  long long v48 = *(_OWORD *)v7;
  uint64_t v12 = *((void *)a2 + 8);
  uint64_t v13 = *((void *)a2 + 9);
  uint64_t v49 = *((void *)v7 + 2);
  *(void *)&long long v50 = v12;
  *((void *)&v50 + 1) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v14 = *(void *)(a3 + 16);
  unint64_t v15 = *(void *)(a3 + 8);
  if (v15 >= v14)
  {
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(void *)a3) >> 5);
    unint64_t v20 = v19 + 1;
    if (v19 + 1 > 0x2AAAAAAAAAAAAAALL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    if (0x5555555555555556 * ((uint64_t)(v14 - *(void *)a3) >> 5) > v20) {
      unint64_t v20 = 0x5555555555555556 * ((uint64_t)(v14 - *(void *)a3) >> 5);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *(void *)a3) >> 5) >= 0x155555555555555) {
      uint64_t v21 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      uint64_t v21 = v20;
    }
    int v43 = (std::__shared_weak_count *)(a3 + 16);
    __int16 v22 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>((caulk::rt_safe_memory_resource *)v21);
    __int16 v23 = (char *)v22 + 96 * v19;
    v40.__vftable = (std::logic_error_vtbl *)v22;
    v40.__imp_.__imp_ = v23;
    uint64_t v42 = (char *)v22 + 96 * v24;
    *(_OWORD *)__int16 v23 = *(_OWORD *)buf;
    long long v25 = *(_OWORD *)&buf[16];
    *((void *)v23 + 4) = *(void *)&buf[32];
    *((_OWORD *)v23 + 1) = v25;
    *(_OWORD *)(v23 + 40) = *(_OWORD *)&buf[40];
    long long v26 = v48;
    *((void *)v23 + 9) = v49;
    *(_OWORD *)(v23 + 56) = v26;
    *((_OWORD *)v23 + 5) = v50;
    uint64_t v41 = v23 + 96;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__swap_out_circular_buffer((uint64_t *)a3, &v40);
    unint64_t v18 = *(void *)(a3 + 8);
    std::__split_buffer<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range> &>::~__split_buffer((uint64_t)&v40);
  }
  else
  {
    *(_OWORD *)unint64_t v15 = *(_OWORD *)buf;
    uint64_t v16 = *(void *)&buf[32];
    *(_OWORD *)(v15 + 16) = *(_OWORD *)&buf[16];
    *(void *)(v15 + 32) = v16;
    *(void *)(v15 + 40) = v10;
    *(void *)(v15 + 48) = v11;
    uint64_t v17 = v49;
    *(_OWORD *)(v15 + 56) = v48;
    *(void *)(v15 + 72) = v17;
    *(void *)(v15 + 80) = v12;
    *(void *)(v15 + 88) = v13;
    unint64_t v18 = v15 + 96;
  }
  *(void *)(a3 + 8) = v18;
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
}

void sub_1BACC7438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::Packetized_Buffer_Time_Translator::~Packetized_Buffer_Time_Translator(AMCP::DAL::Packetized_Buffer_Time_Translator *this)
{
}

NSObject **AMCP::DAL::Packetized_Data_Handler::copy(uint64_t **a1, double *a2, uint64_t *a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a3;
  uint64_t v6 = (AMCP::DAL::Packetized_Data_Handler *)AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::Packetized_Data_Handler>(*a3);
  double length_in_frames = AMCP::DAL::Packetized_Data_Handler::get_length_in_frames(v6);
  double v8 = a2[1] - *a2;
  double v10 = round(AMCP::DAL::Packetized_Data_Handler::get_length_in_frames((AMCP::DAL::Packetized_Data_Handler *)a1));
  double v11 = round(v8);
  if (v10 != v11)
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v18 = **(NSObject ***)buf;
    if ((void)v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v41);
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      unint64_t v19 = pthread_self();
      mach_port_t v20 = pthread_mach_thread_np(v19);
      unint64_t v21 = vcvtmd_s64_f64(v8);
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v20;
      LOWORD(v41) = 2080;
      *(void *)((char *)&v41 + 2) = "Packetized_Data_Handler.cpp";
      WORD5(v41) = 1024;
      HIDWORD(v41) = 194;
      __int16 v42 = 2080;
      *(void *)int v43 = "not (get_length_in_frames() == source_frame_length)";
      *(_WORD *)&v43[8] = 2048;
      *(void *)&unsigned char v43[10] = v21;
      _os_log_error_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s invalid source frame length %lld", buf, 0x2Cu);
    }
    else
    {
      unint64_t v21 = vcvtmd_s64_f64(v8);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v39);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"invalid source frame length %lld", (uint64_t)&v31, v21);
    std::logic_error::logic_error(&v32, &v31);
    v32.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v33, &v32);
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    int v38 = -1;
    v33.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v34 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v33);
    *(void *)&v43[6] = "virtual void AMCP::DAL::Packetized_Data_Handler::copy(const Sample_Time_Range &, Container, Sam"
                         "ple_Time, DAL_Operation_Context_Ref) const";
    *(void *)&v43[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_Data_Handler.cpp";
    int v44 = 194;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v26);
    long long v29 = v26;
    uint64_t v30 = v27;
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    uint64_t v28 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (v11 != round(length_in_frames))
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    __int16 v22 = **(NSObject ***)buf;
    if ((void)v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v41);
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      __int16 v23 = pthread_self();
      mach_port_t v24 = pthread_mach_thread_np(v23);
      unint64_t v25 = vcvtmd_s64_f64(length_in_frames);
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v24;
      LOWORD(v41) = 2080;
      *(void *)((char *)&v41 + 2) = "Packetized_Data_Handler.cpp";
      WORD5(v41) = 1024;
      HIDWORD(v41) = 195;
      __int16 v42 = 2080;
      *(void *)int v43 = "not (source_frame_length == dest_frame_length)";
      *(_WORD *)&v43[8] = 2048;
      *(void *)&unsigned char v43[10] = v25;
      _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s invalid dest frame length %lld", buf, 0x2Cu);
    }
    else
    {
      unint64_t v25 = vcvtmd_s64_f64(length_in_frames);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v39);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"invalid dest frame length %lld", (uint64_t)&v31, v25);
    std::logic_error::logic_error(&v32, &v31);
    v32.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v33, &v32);
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    int v38 = -1;
    v33.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v34 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v33);
    *(void *)&v43[6] = "virtual void AMCP::DAL::Packetized_Data_Handler::copy(const Sample_Time_Range &, Container, Sam"
                         "ple_Time, DAL_Operation_Context_Ref) const";
    *(void *)&v43[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_Data_Handler.cpp";
    int v44 = 195;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v26);
    long long v29 = v26;
    uint64_t v30 = v27;
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    uint64_t v28 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v12 = (uint64_t **)(v5 + 64);
  AMCP::DAL::sample_group_from_packetized_samples((unint64_t *)buf, v12);
  AMCP::DAL::sample_group_from_packetized_samples((unint64_t *)&v33, a1 + 8);
  imp = (char *)v33.__imp_.__imp_;
  if (v33.__imp_.__imp_ == (const char *)v33.__vftable)
  {
    if (!v33.__imp_.__imp_) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    imp = (char *)v33.__vftable;
    do
    {
      memcpy(*(void **)(*(void *)buf + v14), *(const void **)&imp[v14], *(void *)&imp[v14 + 8]);
      imp = (char *)v33.__vftable;
      (*v12)[v15] = *(uint64_t *)((char *)&v33.~logic_error_0 + v14);
      ++v16;
      v15 += 4;
      v14 += 16;
    }
    while (v16 < (v33.__imp_.__imp_ - (const char *)imp) >> 4);
  }
  v33.__imp_.__imp_ = imp;
  std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)imp, (v34 - imp) >> 4);
LABEL_9:
  uint64_t result = *(NSObject ***)buf;
  if (*(void *)buf)
  {
    *(void *)&long long v41 = *(void *)buf;
    return (NSObject **)std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>::deallocate[abi:ne180100](*(caulk::rt_safe_memory_resource **)buf, (uint64_t)(*((void *)&v41 + 1) - *(void *)buf) >> 4);
  }
  return result;
}

void sub_1BACC7B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26)
{
  uint64_t v28 = *(caulk::rt_safe_memory_resource **)(v26 - 144);
  if (v28)
  {
    *(void *)(v26 - 136) = v28;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>::deallocate[abi:ne180100](v28, (uint64_t)(*(void *)(v26 - 128) - (void)v28) >> 4);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *AMCP::DAL::sample_group_from_packetized_samples(unint64_t *result, uint64_t **a2)
{
  uint64_t v2 = result;
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  uint64_t v3 = result + 2;
  long long v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = (char *)v5 - (char *)*a2;
  if (v5 != *a2)
  {
    if (v6 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    std::logic_error v32 = result + 2;
    unint64_t v8 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>(v6 >> 5);
    unint64_t v11 = *v2;
    unint64_t v10 = v2[1];
    if (v10 == *v2)
    {
      int64x2_t v13 = vdupq_n_s64(v10);
      unint64_t v12 = v8;
    }
    else
    {
      unint64_t v12 = v8;
      do
      {
        *(_OWORD *)(v12 - 16) = *(_OWORD *)(v10 - 16);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      int64x2_t v13 = *(int64x2_t *)v2;
    }
    unint64_t *v2 = v12;
    v2[1] = v8;
    int64x2_t v30 = v13;
    unint64_t v14 = v2[2];
    v2[2] = v8 + 16 * v9;
    unint64_t v31 = v14;
    uint64_t v29 = v13.i64[0];
    uint64_t result = (unint64_t *)std::__split_buffer<AMCP::DAL::Audio_Samples<unsigned char>,caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>> &>::~__split_buffer((uint64_t)&v29);
    long long v4 = *a2;
    uint64_t v5 = a2[1];
  }
  if (v4 != v5)
  {
    uint64_t v15 = (void *)v2[1];
    do
    {
      uint64_t v16 = *v4;
      uint64_t v17 = v4[1];
      if ((unint64_t)v15 >= *v3)
      {
        uint64_t v18 = (uint64_t)((uint64_t)v15 - *v2) >> 4;
        if ((unint64_t)(v18 + 1) >> 60) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = *v3 - *v2;
        uint64_t v20 = v19 >> 3;
        if (v19 >> 3 <= (unint64_t)(v18 + 1)) {
          uint64_t v20 = v18 + 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        std::logic_error v32 = v3;
        if (v21) {
          unint64_t v21 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>(v21);
        }
        else {
          uint64_t v22 = 0;
        }
        __int16 v23 = (void *)(v21 + 16 * v18);
        void *v23 = v17;
        v23[1] = v16;
        unint64_t v24 = *v2;
        unint64_t v25 = v2[1];
        if (v25 == *v2)
        {
          int64x2_t v27 = vdupq_n_s64(v25);
          unint64_t v26 = v21 + 16 * v18;
        }
        else
        {
          unint64_t v26 = v21 + 16 * v18;
          do
          {
            *(_OWORD *)(v26 - 16) = *(_OWORD *)(v25 - 16);
            v26 -= 16;
            v25 -= 16;
          }
          while (v25 != v24);
          int64x2_t v27 = *(int64x2_t *)v2;
        }
        uint64_t v15 = v23 + 2;
        unint64_t *v2 = v26;
        v2[1] = (unint64_t)(v23 + 2);
        int64x2_t v30 = v27;
        unint64_t v28 = v2[2];
        v2[2] = v21 + 16 * v22;
        unint64_t v31 = v28;
        uint64_t v29 = v27.i64[0];
        uint64_t result = (unint64_t *)std::__split_buffer<AMCP::DAL::Audio_Samples<unsigned char>,caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>> &>::~__split_buffer((uint64_t)&v29);
      }
      else
      {
        *uint64_t v15 = v17;
        v15[1] = v16;
        v15 += 2;
      }
      v2[1] = (unint64_t)v15;
      v4 += 4;
    }
    while (v4 != v5);
  }
  return result;
}

void sub_1BACC7DC0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(caulk::rt_safe_memory_resource **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>::deallocate[abi:ne180100](v3, (uint64_t)(*(void *)(v1 + 16) - (void)v3) >> 4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::DAL::Packetized_Data_Handler::set_audio_buffer_list(uint64_t result, void *a2)
{
  unint64_t v2 = *(unsigned int *)*a2;
  uint64_t v3 = *(void *)(result + 64);
  unint64_t v4 = (*(void *)(result + 72) - v3) >> 5;
  if (v4 >= v2) {
    uint64_t v5 = *(unsigned int *)*a2;
  }
  else {
    uint64_t v5 = (*(void *)(result + 72) - v3) >> 5;
  }
  if (v5)
  {
    uint64_t v6 = (unsigned int *)(*a2 + 12);
    long long v7 = *(void **)(result + 64);
    uint64_t v8 = v5;
    do
    {
      unsigned int v9 = *v6;
      v6 += 4;
      void *v7 = v9;
      v7 += 4;
      --v8;
    }
    while (v8);
  }
  if (v4 > v2)
  {
    unint64_t v10 = v4 - v5;
    unint64_t v11 = (void *)(v3 + 32 * v5);
    do
    {
      *unint64_t v11 = 0;
      v11 += 4;
      --v10;
    }
    while (v10);
  }
  return result;
}

caulk::rt_safe_memory_resource *AMCP::DAL::Packetized_Data_Handler::get_audio_buffer_list@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, caulk::rt_safe_memory_resource **a3@<X8>)
{
  v12[4] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v6 = *(AMCP::Utility **)(a1 + 56);
  v12[0] = &unk_1F1489E50;
  v12[3] = v12;
  *a3 = AMCP::Utility::AudioBufferList_Create(v6);
  std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100]((uint64_t)(a3 + 1), (uint64_t)v12);
  std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](v12);
  uint64_t v7 = AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::Packetized_Data_Handler>(*a2);
  AMCP::DAL::sample_group_from_packetized_samples((unint64_t *)v12, (uint64_t **)(v7 + 64));
  uint64_t result = (caulk::rt_safe_memory_resource *)v12[0];
  if (v6)
  {
    uint64_t v9 = 0;
    int v10 = *(_DWORD *)(a1 + 36);
    do
    {
      unint64_t v11 = (char *)*a3 + v9;
      *((_DWORD *)v11 + 2) = v10;
      *((_DWORD *)v11 + 3) = *(void *)((char *)result + v9 + 8);
      *((void *)v11 + 2) = *(void *)((char *)result + v9);
      v9 += 16;
    }
    while (16 * v6 != v9);
  }
  else if (!v12[0])
  {
    return result;
  }
  v12[1] = result;
  return std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>::deallocate[abi:ne180100](result, ((char *)v12[2] - (char *)result) >> 4);
}

void sub_1BACC7F7C(_Unwind_Exception *a1)
{
  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100](v1, 0);
  std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Packetized_Data_Handler::get_allocation_size(AMCP::DAL::Packetized_Data_Handler *this)
{
  uint64_t v1 = *((void *)this + 8);
  uint64_t v2 = *((void *)this + 9);
  if (v1 == v2) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    result += *(void *)(v1 + 16);
    v1 += 32;
  }
  while (v1 != v2);
  return result;
}

uint64_t AMCP::DAL::Packetized_Data_Handler::reuse_container(uint64_t this)
{
  uint64_t v1 = *(void **)(this + 64);
  uint64_t v2 = *(void **)(this + 72);
  while (v1 != v2)
  {
    *uint64_t v1 = v1[2];
    v1 += 4;
  }
  return this;
}

void AMCP::DAL::Packetized_Data_Handler::adopt(AMCP::Log::Scope_Registry *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v4, "com.apple.coreaudio", "AMCP");
  uint64_t v1 = *v4;
  if (*(void *)v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v5);
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    uint64_t v2 = pthread_self();
    mach_port_t v3 = pthread_mach_thread_np(v2);
    LODWORD(v4) = 67109890;
    HIDWORD(v4) = v3;
    *(_WORD *)uint64_t v5 = 2080;
    *(void *)&v5[2] = "Packetized_Data_Handler.cpp";
    __int16 v6 = 1024;
    int v7 = 71;
    __int16 v8 = 2080;
    uint64_t v9 = "false";
    _os_log_error_impl(&dword_1BAA78000, v1, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Packetized_Data_Handler::adopt unsupported", (uint8_t *)&v4, 0x22u);
  }
  abort();
}

uint64_t AMCP::DAL::Packetized_Data_Handler::dal_operation_is_supported()
{
  return 0;
}

void AMCP::DAL::Packetized_Data_Handler::~Packetized_Data_Handler(AMCP::DAL::Packetized_Data_Handler *this)
{
  *(void *)this = &unk_1F146B0C0;
  uint64_t v1 = (char *)this + 64;
  std::vector<std::pair<unsigned long,AMCP::DAL::Audio_Samples_Data>,caulk::rt_allocator<std::pair<unsigned long,AMCP::DAL::Audio_Samples_Data>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v1);

  JUMPOUT(0x1C1859840);
}

{
  char *v1;

  *(void *)this = &unk_1F146B0C0;
  uint64_t v1 = (char *)this + 64;
  std::vector<std::pair<unsigned long,AMCP::DAL::Audio_Samples_Data>,caulk::rt_allocator<std::pair<unsigned long,AMCP::DAL::Audio_Samples_Data>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v1);
}

caulk::rt_safe_memory_resource *std::vector<std::pair<unsigned long,AMCP::DAL::Audio_Samples_Data>,caulk::rt_allocator<std::pair<unsigned long,AMCP::DAL::Audio_Samples_Data>>>::__destroy_vector::operator()[abi:ne180100](caulk::rt_safe_memory_resource *result)
{
  uint64_t v1 = *(caulk::rt_safe_memory_resource ***)result;
  uint64_t v2 = **(caulk::rt_safe_memory_resource ***)result;
  if (v2)
  {
    mach_port_t v3 = (caulk::rt_safe_memory_resource ***)result;
    unint64_t v4 = v1[1];
    uint64_t v5 = **(caulk::rt_safe_memory_resource ***)result;
    __int16 v6 = v1;
    if (v4 != v2)
    {
      do
      {
        int v7 = (caulk::rt_safe_memory_resource *)((char *)v4 - 32);
        AMCP::DAL::Audio_Samples_Data::~Audio_Samples_Data((caulk::rt_safe_memory_resource *)((char *)v4 - 24));
        unint64_t v4 = v7;
      }
      while (v7 != v2);
      __int16 v6 = *v3;
      uint64_t v5 = **v3;
    }
    v1[1] = v2;
    unint64_t v8 = (v6[2] - v5) >> 5;
    return std::allocator_traits<caulk::rt_allocator<std::pair<unsigned long,AMCP::DAL::Audio_Samples_Data>>>::deallocate[abi:ne180100](v5, v8);
  }
  return result;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<std::pair<unsigned long,AMCP::DAL::Audio_Samples_Data>>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  if (!(a2 >> 59))
  {
    uint64_t v2 = result;
    uint64_t result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
    if (*MEMORY[0x1E4FB7E88]) {
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
    }
  }
  __break(1u);
  return result;
}

uint64_t AMCP::DAL::Packetized_Data_Handler::Packetized_Data_Handler(uint64_t a1, long long *a2, double a3)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  long long v5 = a2[1];
  long long v41 = *a2;
  long long v4 = v41;
  long long v42 = v5;
  uint64_t v43 = *((void *)a2 + 4);
  *(void *)(a1 + 40) = v43;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)a1 = &unk_1F146B0C0;
  *(void *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  __int16 v6 = (int64x2_t *)(a1 + 64);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  uint64_t v7 = *((unsigned int *)a2 + 4);
  if (!v7)
  {
    unint64_t v8 = 4.0;
    LODWORD(v8) = *((_DWORD *)a2 + 7);
    uint64_t v7 = (unint64_t)(a3 * 4.0 * (double)v8);
    if (!v7)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      __int16 v23 = **(NSObject ***)buf;
      if (*(void *)v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v45);
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        unint64_t v24 = pthread_self();
        mach_port_t v25 = pthread_mach_thread_np(v24);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v25;
        *(_WORD *)uint64_t v45 = 2080;
        *(void *)&v45[2] = "Packetized_Data_Handler.cpp";
        __int16 v46 = 1024;
        int v47 = 50;
        __int16 v48 = 2080;
        *(void *)uint64_t v49 = "not (size > 0)";
        _os_log_error_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v32);
      std::logic_error::logic_error(&v33, &v32);
      v33.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v34, &v33);
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      int v39 = -1;
      v34.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      uint64_t v35 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
      *(void *)&v49[6] = "AMCP::DAL::Packetized_Data_Handler::Packetized_Data_Handler(const CA::StreamDescription &, Sample_Time)";
      long long v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_Data_Handler.cpp";
      int v51 = 50;
      std::vector<void *>::vector(&v27);
      int v26 = backtrace((void **)v27, (*((void *)&v27 + 1) - (void)v27) >> 3);
      std::vector<void *>::resize((char **)&v27, v26);
      long long v30 = v27;
      uint64_t v31 = v28;
      long long v27 = 0uLL;
      uint64_t v28 = 0;
      uint64_t v29 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
  }
  if (!*MEMORY[0x1E4FB7E88]) {
    __break(1u);
  }
  uint64_t v9 = (_OWORD *)caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88]);
  uint64_t v10 = v9 + 2;
  *uint64_t v9 = 0u;
  v9[1] = 0u;
  uint64_t v12 = *(void *)(a1 + 64);
  unint64_t v11 = *(void *)(a1 + 72);
  if (v11 == v12)
  {
    int64x2_t v14 = vdupq_n_s64(v11);
  }
  else
  {
    do
    {
      long long v13 = *(_OWORD *)(v11 - 16);
      *(v9 - 2) = *(_OWORD *)(v11 - 32);
      *(v9 - 1) = v13;
      v9 -= 2;
      v11 -= 32;
    }
    while (v11 != v12);
    int64x2_t v14 = *v6;
  }
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v10;
  uint64_t v15 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v10;
  uint64_t v16 = v14.i64[1];
  uint64_t v17 = (caulk::rt_safe_memory_resource *)v14.i64[0];
  if (v14.i64[1] != v14.i64[0])
  {
    do
    {
      uint64_t v18 = (caulk::rt_safe_memory_resource *)(v16 - 32);
      AMCP::DAL::Audio_Samples_Data::~Audio_Samples_Data((AMCP::DAL::Audio_Samples_Data *)(v16 - 24));
      uint64_t v16 = (uint64_t)v18;
    }
    while (v18 != v17);
  }
  if (v17) {
    std::allocator_traits<caulk::rt_allocator<std::pair<unsigned long,AMCP::DAL::Audio_Samples_Data>>>::deallocate[abi:ne180100](v17, (v15 - (uint64_t)v17) >> 5);
  }
  uint64_t v19 = *(uint64_t **)(a1 + 64);
  uint64_t v20 = *(uint64_t **)(a1 + 72);
  while (v19 != v20)
  {
    uint64_t *v19 = v7;
    unint64_t v21 = (AMCP::DAL::Audio_Samples_Data *)(v19 + 1);
    AMCP::DAL::Audio_Samples_Data::allocate(v21, v7);
    uint64_t v19 = (uint64_t *)((char *)v21 + 24);
  }
  return a1;
}

void sub_1BACC873C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  *(void *)(v35 - 144) = v34;
  std::vector<std::pair<unsigned long,AMCP::DAL::Audio_Samples_Data>,caulk::rt_allocator<std::pair<unsigned long,AMCP::DAL::Audio_Samples_Data>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)(v35 - 144));
  _Unwind_Resume(a1);
}

uint64_t AMCP::DAL::Audio_Samples_Data::Audio_Samples_Data<gsl::details::span_iterator<gsl::span<std::byte,-1l>,false>>(uint64_t result, uint64_t a2, void *a3)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 1;
  mach_port_t v3 = *(void **)a2;
  if (!*(void *)a2
    || (uint64_t v4 = *(void *)(a2 + 8), v4 < 0)
    || *v3 <= v4
    || (*(void *)uint64_t result = v3[1] + v4, (void *)*a3 != v3))
  {
    std::terminate();
  }
  *(void *)(result + 8) = a3[1] - v4;
  return result;
}

BOOL AllowHALClientsInThisProcess(void)
{
  {
    AllowHALClientsInThisProcess(void)::global = AllowHALClientsInThisProcess(void)::$_0::operator()();
  }
  if (AllowHALClientsInThisProcess(void)::global) {
    return 1;
  }
  BOOL result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_error_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Use of the CoreAudio HAL in this process is being denied", v1, 2u);
    return AllowHALClientsInThisProcess(void)::global != 0;
  }
  return result;
}

void sub_1BACC8980(_Unwind_Exception *a1)
{
}

uint64_t AllowHALClientsInThisProcess(void)::$_0::operator()()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!_os_feature_enabled_impl()) {
    return 1;
  }
  MainBundle = CFBundleGetMainBundle();
  if (!MainBundle) {
    return 1;
  }
  CFStringRef Identifier = CFBundleGetIdentifier(MainBundle);
  if (!Identifier) {
    return 1;
  }
  CFStringRef v2 = Identifier;
  int v3 = CFEqual(Identifier, @"com.apple.mediaserverd");
  BOOL v4 = v3 == 0;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412546;
    CFStringRef v7 = v2;
    __int16 v8 = 1024;
    BOOL v9 = v3 == 0;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "HAL query bundle %@ -> allowed %d", (uint8_t *)&v6, 0x12u);
  }
  return v4;
}

void HALS_IOPerformer::TicksPerFrame::~TicksPerFrame(HALS_IOPerformer::TicksPerFrame *this)
{
}

uint64_t HALS_IOPerformer::update_frame_counter(HALS_IOPerformer *this, HALS_IOEngineInfo *a2, const HALS_IOPerformer::TicksPerFrame *a3, int a4, char a5)
{
  uint64_t v7 = *(void *)this;
  if (a5)
  {
    __int16 v8 = *(uint64_t (**)(void))(v7 + 240);
    return v8();
  }
  else
  {
    uint64_t v10 = (uint64_t)(*((double *)a2 + 2) / *((double *)a2 + 4) * (double)a4)
        + (*(unsigned int (**)(HALS_IOPerformer *, const HALS_IOPerformer::TicksPerFrame *))(v7 + 144))(this, a3);
    unint64_t v11 = *(uint64_t (**)(HALS_IOPerformer *, const HALS_IOPerformer::TicksPerFrame *, uint64_t))(*(void *)this + 248);
    return v11(this, a3, v10);
  }
}

uint64_t HALS_IOPerformer::update_io_parameters(uint64_t a1, HALS_IOPerformer *a2, uint64_t a3, int a4, char a5)
{
  double v10 = (*(double (**)(uint64_t))(*(void *)a1 + 16))(a1);
  double v11 = (*(double (**)(uint64_t))(*(void *)a1 + 24))(a1);
  double v12 = (*(double (**)(HALS_IOPerformer *))(*(void *)a2 + 152))(a2);
  double v13 = (*(double (**)(HALS_IOPerformer *))(*(void *)a2 + 160))(a2);
  if ((*(unsigned int (**)(HALS_IOPerformer *))(*(void *)a2 + 136))(a2)) {
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) ^ 1;
  }
  else {
    int v14 = 0;
  }
  int v26 = &unk_1F146B1C0;
  double v27 = v10;
  double v28 = v11;
  double v29 = v12;
  double v30 = v13;
  char v31 = v14;
  if (v14)
  {
    double v29 = v10;
    double v30 = v11;
    uint64_t v15 = a3;
  }
  else
  {
    uint64_t v15 = (v11 / v13 * (double)a3);
  }
  (*(void (**)(HALS_IOPerformer *, uint64_t))(*(void *)a2 + 256))(a2, v15);
  float v16 = (*(float (**)(uint64_t))(*(void *)a1 + 40))(a1);
  (*(void (**)(HALS_IOPerformer *, double))(*(void *)a2 + 232))(a2, v16);
  uint64_t v17 = 0;
  char v18 = 1;
  do
  {
    char v19 = v18;
    HALS_IOPerformer::update_frame_counter(a2, (HALS_IOEngineInfo *)&v26, (const HALS_IOPerformer::TicksPerFrame *)v17, a4, a5);
    (*(void (**)(uint64_t, double))(*(void *)a1 + 72))(a1, v27);
    if ((*(unsigned int (**)(HALS_IOPerformer *, uint64_t))(*(void *)a2 + 168))(a2, v17))
    {
      uint64_t v20 = 0;
      do
      {
        uint64_t v21 = (*(uint64_t (**)(HALS_IOPerformer *, uint64_t, uint64_t))(*(void *)a2 + 176))(a2, v17, v20);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v21 + 24))(v21)
          && (*(unsigned int (**)(uint64_t))(*(void *)v21 + 40))(v21))
        {
          (*(void (**)(uint64_t, double, double))(*(void *)v21 + 32))(v21, v27, v29);
        }
        uint64_t v20 = (v20 + 1);
      }
      while (v20 < (*(unsigned int (**)(HALS_IOPerformer *, uint64_t))(*(void *)a2 + 168))(a2, v17));
    }
    double v22 = v27 / v29;
    BOOL v23 = (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 56))(a1, v17 & 1) != 0;
    (*(void (**)(HALS_IOPerformer *, uint64_t, BOOL, uint64_t, double))(*(void *)a2 + 264))(a2, a3, v23, v17, v22);
    char v18 = 0;
    uint64_t v17 = 1;
  }
  while ((v19 & 1) != 0);
  uint64_t v24 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 64))(a1, 0);
  return (*(uint64_t (**)(HALS_IOPerformer *, uint64_t))(*(void *)a2 + 280))(a2, v24);
}

uint64_t HALS_IOPerformer::end_io_cycle(HALS_IOPerformer *this, uint64_t a2, HALS_IOEngineInfo *a3)
{
  return (*(uint64_t (**)(uint64_t, HALS_IOPerformer *))(*(void *)a2 + 40))(a2, this);
}

uint64_t HALS_IOPerformer::begin_reading(HALS_IOPerformer *this, uint64_t a2, HALS_IOEngineInfo *a3)
{
  return (*(uint64_t (**)(uint64_t, HALS_IOPerformer *))(*(void *)a2 + 48))(a2, this);
}

uint64_t HALS_IOPerformer::end_reading(HALS_IOPerformer *this, uint64_t a2, HALS_IOEngineInfo *a3)
{
  return (*(uint64_t (**)(uint64_t, HALS_IOPerformer *))(*(void *)a2 + 56))(a2, this);
}

uint64_t HALS_IOPerformer::begin_writing(HALS_IOPerformer *this, uint64_t a2, HALS_IOEngineInfo *a3)
{
  return (*(uint64_t (**)(uint64_t, HALS_IOPerformer *))(*(void *)a2 + 64))(a2, this);
}

uint64_t HALS_IOPerformer::end_writing(HALS_IOPerformer *this, uint64_t a2, HALS_IOEngineInfo *a3)
{
  return (*(uint64_t (**)(uint64_t, HALS_IOPerformer *))(*(void *)a2 + 72))(a2, this);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOPerformer::process_output_stream_data(IOContextView &,unsigned int,HALS_IOStreamInfo &,unsigned int)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  CFStringRef v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)double v11 = 2080;
    *(void *)&_OWORD v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d HALS_IOPerformer::process_output_stream_data clipped amount processed from:%u to:%u", (uint8_t *)&v10, 0x24u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BACC92B0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOPerformer::process_output_stream_data(IOContextView &,unsigned int,HALS_IOStreamInfo &,unsigned int)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t HALS_IOPerformer::can_read_from_stream(void *a1, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 108)
    || ((v3 = *(void **)(a2 + 112), *(void **)(a2 + 120) != v3) ? (BOOL v4 = v3 == 0) : (BOOL v4 = 1), v4))
  {
    os_log_type_t v3 = (void *)(a2 + 408);
  }
  uint64_t v5 = *v3;
  if (!(*(unsigned int (**)(void))(*(void *)*v3 + 16))(*v3)
    || ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 200))(v5) & 1) == 0
    && !(*(unsigned int (**)(uint64_t))(*(void *)v5 + 208))(v5))
  {
    return 0;
  }
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
  uint64_t v7 = *a1;
  if (v6)
  {
    int v8 = *(uint64_t (**)(void *))(v7 + 96);
    BOOL v9 = a1;
  }
  else
  {
    int v8 = *(uint64_t (**)(void *))(v7 + 104);
    BOOL v9 = a1;
  }
  return v8(v9);
}

OSStatus AudioHardwareAddRunLoopSource(CFRunLoopSourceRef inRunLoopSource)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  if (!inRunLoopSource)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_Framework-ios-imp.cpp";
      __int16 v25 = 1024;
      int v26 = 2568;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioHardwareAddRunLoopSource: can't add a NULL run loop source", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  v21[0] = 0;
  v21[1] = 0;
  HALS_System::GetInstance(&v22, 0, v21);
  uint64_t v2 = v22;
  if (!v22)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_Framework-ios-imp.cpp";
      __int16 v25 = 1024;
      int v26 = 2572;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioHardwareAddRunLoopSource: no system object", buf, 0x12u);
    }
    uint64_t v20 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v20 = off_1F148A5D8;
    v20[2] = 1852797029;
  }
  *(void *)buf = v22 + 1528;
  *(_DWORD *)&uint8_t buf[8] = HALB_Mutex::Lock((HALB_Mutex *)(v22 + 1528));
  if (!*(void *)(v2 + 1520)) {
    HALS_System::StartRunLoop((HALS_System *)v2);
  }
  os_log_type_t v3 = *(CFRunLoopSourceRef **)(v2 + 1808);
  BOOL v4 = *(CFRunLoopSourceRef **)(v2 + 1816);
  if (v3 != v4)
  {
    while (*v3 != inRunLoopSource)
    {
      if (++v3 == v4)
      {
        os_log_type_t v3 = *(CFRunLoopSourceRef **)(v2 + 1816);
        break;
      }
    }
  }
  if (v3 == v4)
  {
    CFRetain(inRunLoopSource);
    uint64_t v5 = *(CFRunLoopSourceRef **)(v2 + 1816);
    unint64_t v6 = *(void *)(v2 + 1824);
    if ((unint64_t)v5 >= v6)
    {
      BOOL v9 = *(void **)(v2 + 1808);
      uint64_t v10 = v5 - (CFRunLoopSourceRef *)v9;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 61) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = v6 - (void)v9;
      if (v12 >> 2 > v11) {
        unint64_t v11 = v12 >> 2;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        if (v13 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        __int16 v14 = (char *)operator new(8 * v13);
      }
      else
      {
        __int16 v14 = 0;
      }
      int v15 = (CFRunLoopSourceRef *)&v14[8 * v10];
      *int v15 = inRunLoopSource;
      uint64_t v7 = v15 + 1;
      if (v5 != v9)
      {
        do
        {
          __int16 v16 = *--v5;
          *--int v15 = v16;
        }
        while (v5 != v9);
        uint64_t v5 = *(CFRunLoopSourceRef **)(v2 + 1808);
      }
      *(void *)(v2 + 1808) = v15;
      *(void *)(v2 + 1816) = v7;
      *(void *)(v2 + 1824) = &v14[8 * v13];
      if (v5) {
        operator delete(v5);
      }
    }
    else
    {
      *uint64_t v5 = inRunLoopSource;
      uint64_t v7 = v5 + 1;
    }
    *(void *)(v2 + 1816) = v7;
    int v17 = *(__CFRunLoop **)(v2 + 1520);
    if (v17)
    {
      CFRunLoopAddSource(v17, inRunLoopSource, (CFRunLoopMode)*MEMORY[0x1E4F1D408]);
      CFRunLoopAddSource(*(CFRunLoopRef *)(v2 + 1520), inRunLoopSource, @"com.apple.audio.CoreAudio");
    }
  }
  HALB_Guard::Locker::~Locker((HALB_Mutex **)buf);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  return 0;
}

void sub_1BACC97DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BACC962CLL);
  }
  _Unwind_Resume(exception_object);
}

OSStatus AudioHardwareRemoveRunLoopSource(CFRunLoopSourceRef inRunLoopSource)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  if (!inRunLoopSource)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_Framework-ios-imp.cpp";
      __int16 v15 = 1024;
      int v16 = 2614;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioHardwareRemoveRunLoopSource: can't remove a NULL run loop source", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  v11[0] = 0;
  v11[1] = 0;
  HALS_System::GetInstance(&v12, 0, v11);
  uint64_t v2 = v12;
  if (!v12)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_Framework-ios-imp.cpp";
      __int16 v15 = 1024;
      int v16 = 2618;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioHardwareRemoveRunLoopSource: no system object", buf, 0x12u);
    }
    uint64_t v10 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v10 = off_1F148A5D8;
    v10[2] = 1852797029;
  }
  *(void *)buf = v12 + 1528;
  *(_DWORD *)&uint8_t buf[8] = HALB_Mutex::Lock((HALB_Mutex *)(v12 + 1528));
  os_log_type_t v3 = *(CFRunLoopSourceRef **)(v2 + 1808);
  BOOL v4 = *(CFRunLoopSourceRef **)(v2 + 1816);
  if (v3 != v4)
  {
    while (*v3 != inRunLoopSource)
    {
      if (++v3 == v4)
      {
        os_log_type_t v3 = *(CFRunLoopSourceRef **)(v2 + 1816);
        break;
      }
    }
  }
  if (v3 != v4)
  {
    int64_t v5 = (char *)v4 - (char *)(v3 + 1);
    if (v4 != v3 + 1) {
      memmove(v3, v3 + 1, (char *)v4 - (char *)(v3 + 1));
    }
    *(void *)(v2 + 1816) = (char *)v3 + v5;
    CFRelease(inRunLoopSource);
    unint64_t v6 = *(__CFRunLoop **)(v2 + 1520);
    if (v6)
    {
      CFRunLoopRemoveSource(v6, inRunLoopSource, (CFRunLoopMode)*MEMORY[0x1E4F1D408]);
      CFRunLoopRemoveSource(*(CFRunLoopRef *)(v2 + 1520), inRunLoopSource, @"com.apple.audio.CoreAudio");
    }
  }
  HALB_Guard::Locker::~Locker((HALB_Mutex **)buf);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  return 0;
}

void sub_1BACC9B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BACC996CLL);
  }
  _Unwind_Resume(exception_object);
}

OSStatus AudioHardwareGetPropertyInfo(AudioHardwarePropertyID inPropertyID, UInt32 *outSize, Boolean *outWritable)
{
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  HALS_System::StartServer(&v8, 0);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  inAddress.mSelector = inPropertyID;
  *(void *)&inAddress.mScope = 1735159650;
  if (AudioObjectHasProperty(1u, &inAddress))
  {
    if (outSize)
    {
      OSStatus result = AudioObjectGetPropertyDataSize(1u, &inAddress, 0, 0, outSize);
      if (!outWritable) {
        goto LABEL_13;
      }
    }
    else
    {
      OSStatus result = 0;
      if (!outWritable) {
        goto LABEL_13;
      }
    }
    if (!result) {
      OSStatus result = AudioObjectIsPropertySettable(1u, &inAddress, outWritable);
    }
LABEL_13:
    if (!result) {
      return result;
    }
    goto LABEL_14;
  }
  OSStatus result = 2003332927;
LABEL_14:
  if (outSize) {
    *outSize = 0;
  }
  if (outWritable) {
    *outWritable = 0;
  }
  return result;
}

void sub_1BACC9C6C(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (v3) {
      _DWORD *v3 = 0;
    }
    if (v2) {
      unsigned char *v2 = 0;
    }
  }
  else
  {
    if (v3) {
      _DWORD *v3 = 0;
    }
    if (v2) {
      unsigned char *v2 = 0;
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1BACC9C58);
}

OSStatus AudioHardwareGetProperty(AudioHardwarePropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  HALS_System::StartServer(&v8, 0);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  inAddress.mSelector = inPropertyID;
  *(void *)&inAddress.mScope = 1735159650;
  return AudioObjectGetPropertyData(1u, &inAddress, 0, 0, ioPropertyDataSize, outPropertyData);
}

void sub_1BACC9D4C(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (v2)
    {
      if (v3) {
        bzero(v3, *v2);
      }
      _DWORD *v2 = 0;
    }
  }
  else if (v2)
  {
    if (v3) {
      bzero(v3, *v2);
    }
    _DWORD *v2 = 0;
  }
  __cxa_end_catch();
  JUMPOUT(0x1BACC9D38);
}

OSStatus AudioHardwareSetProperty(AudioHardwarePropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  HALS_System::StartServer(&v9, 0);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  inAddress.mSelector = inPropertyID;
  *(void *)&inAddress.mScope = 1735159650;
  return AudioObjectSetPropertyData(1u, &inAddress, 0, 0, inPropertyDataSize, inPropertyData);
}

void sub_1BACC9E44(void *a1)
{
}

OSStatus AudioHardwareAddPropertyListener(AudioHardwarePropertyID inPropertyID, AudioHardwarePropertyListenerProc inProc, void *inClientData)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  HALS_System::StartServer(&v21, 0);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (!inProc)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v24 = "HALS_Framework-ios-imp.cpp";
      __int16 v25 = 1024;
      int v26 = 2875;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioHardwareAddPropertyListener: can't add a NULL listener proc", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  v18[0] = 0;
  v18[1] = 0;
  HALS_System::GetInstance(&v19, 0, v18);
  if (!v19)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v24 = "HALS_Framework-ios-imp.cpp";
      __int16 v25 = 1024;
      int v26 = 2879;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioHardwareAddPropertyListener: no system object", buf, 0x12u);
    }
    uint64_t v9 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v9 = off_1F148A5D8;
    v9[2] = 1852797029;
  }
  AudioHardwarePropertyID v16 = inPropertyID;
  uint64_t v17 = 1735159650;
  int v10 = 4;
  uint64_t v12 = 0;
  uint64_t v11 = 0;
  int v13 = 0;
  AudioHardwarePropertyListenerProc v14 = inProc;
  __int16 v15 = inClientData;
  buf[0] = 0;
  char v27 = 0;
  HALS_NotificationManager::AddPropertyListener((uint64_t)&v10, 1u, (char *)&v16, (uint64_t)buf);
  if (v27) {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)buf);
  }
  HALS_Listener::~HALS_Listener((HALS_Listener *)&v10);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  return 0;
}

void sub_1BACCA0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (a2)
  {
    if (a63) {
      AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a23);
    }
    HALS_Listener::~HALS_Listener((HALS_Listener *)&a10);
    if (a20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a20);
    }
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BACC9F5CLL);
  }
  _Unwind_Resume(exception_object);
}

OSStatus AudioHardwareRemovePropertyListener(AudioHardwarePropertyID inPropertyID, AudioHardwarePropertyListenerProc inProc)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  HALS_System::StartServer(&v15, 0);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (!inProc)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v18 = "HALS_Framework-ios-imp.cpp";
      LOWORD(v19) = 1024;
      *(_DWORD *)((char *)&v19 + 2) = 2923;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioHardwareRemovePropertyListener: can't remove a NULL listener proc", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  v12[0] = 0;
  v12[1] = 0;
  HALS_System::GetInstance(&v13, 0, v12);
  if (!v13)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v18 = "HALS_Framework-ios-imp.cpp";
      LOWORD(v19) = 1024;
      *(_DWORD *)((char *)&v19 + 2) = 2927;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioHardwareRemovePropertyListener: no system object", buf, 0x12u);
    }
    uint64_t v9 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v9 = off_1F148A5D8;
    v9[2] = 1852797029;
  }
  AudioHardwarePropertyID v10 = inPropertyID;
  uint64_t v11 = 1735159650;
  *(_DWORD *)buf = 4;
  uint64_t v19 = 0;
  uint64_t v18 = 0;
  int v20 = 0;
  AudioHardwarePropertyListenerProc v21 = inProc;
  uint64_t v22 = 0;
  HALS_NotificationManager::RemovePropertyListener((HALS_NotificationManager *)buf, (const HALS_Listener *)1, &v10, v4, v5);
  HALS_Listener::~HALS_Listener((HALS_Listener *)buf);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  return 0;
}

void sub_1BACCA3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
  {
    HALS_Listener::~HALS_Listener((HALS_Listener *)&a17);
    if (a14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a14);
    }
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BACCA258);
  }
  _Unwind_Resume(exception_object);
}

OSStatus AudioDeviceAddIOProc(AudioDeviceID inDevice, AudioDeviceIOProc inProc, void *inClientData)
{
  int64_t v5 = *(HALS_ObjectMap **)&inDevice;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (AllowHALClientsInThisProcess())
  {
    if (!inProc)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v18 = 136315394;
        uint64_t v19 = "HALS_Framework-ios-imp.cpp";
        __int16 v20 = 1024;
        int v21 = 2967;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceAddIOProc: can't add a NULL IOProc", (uint8_t *)&v18, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    unint64_t v6 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v5);
    uint64_t v8 = v6;
    if (v6)
    {
      int v10 = *((_DWORD *)v6 + 5);
      int v9 = *((_DWORD *)v6 + 6);
      if (v10 <= 1701078389)
      {
        if (v10 == 1633773415)
        {
LABEL_12:
          (*(void (**)(HALS_ObjectMap *, AudioDeviceIOProc, void *))(*(void *)v6 + 864))(v6, inProc, inClientData);
          HALS_ObjectMap::ReleaseObject(v8, v13);
          return 0;
        }
        int v11 = 1633969526;
      }
      else
      {
        if (v10 == 1701078390 || v10 == 1701733488) {
          goto LABEL_12;
        }
        int v11 = 1919182198;
      }
      if (v10 == v11) {
        goto LABEL_12;
      }
      if (v10 != v9)
      {
        if (v9 <= 1701078389)
        {
          if (v9 == 1633773415) {
            goto LABEL_12;
          }
          int v15 = 1633969526;
        }
        else
        {
          if (v9 == 1701078390 || v9 == 1701733488) {
            goto LABEL_12;
          }
          int v15 = 1919182198;
        }
        if (v9 == v15) {
          goto LABEL_12;
        }
      }
      HALS_ObjectMap::ReleaseObject(v6, v7);
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      uint64_t v19 = "HALS_Framework-ios-imp.cpp";
      __int16 v20 = 1024;
      int v21 = 2971;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceAddIOProc: no device with given ID", (uint8_t *)&v18, 0x12u);
    }
    AudioHardwarePropertyID v16 = __cxa_allocate_exception(0x10uLL);
    *(void *)AudioHardwarePropertyID v16 = off_1F148A5D8;
    v16[2] = 560227702;
  }
  return 560033144;
}

void sub_1BACCA784(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BACCA79C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BACCA578);
  }
  JUMPOUT(0x1BACCA78CLL);
}

void sub_1BACCA7FC()
{
}

OSStatus AudioDeviceRemoveIOProc(AudioDeviceID inDevice, AudioDeviceIOProc inProc)
{
  os_log_type_t v3 = *(HALS_ObjectMap **)&inDevice;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (AllowHALClientsInThisProcess())
  {
    if (!inProc)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v16 = 136315394;
        uint64_t v17 = "HALS_Framework-ios-imp.cpp";
        __int16 v18 = 1024;
        int v19 = 3010;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceRemoveIOProc: can't remove a NULL IOProc", (uint8_t *)&v16, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    unsigned int v4 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v3);
    unint64_t v6 = v4;
    if (v4)
    {
      int v8 = *((_DWORD *)v4 + 5);
      int v7 = *((_DWORD *)v4 + 6);
      if (v8 <= 1701078389)
      {
        if (v8 == 1633773415)
        {
LABEL_12:
          (*(void (**)(HALS_ObjectMap *, AudioDeviceIOProc))(*(void *)v4 + 872))(v4, inProc);
          HALS_ObjectMap::ReleaseObject(v6, v11);
          return 0;
        }
        int v9 = 1633969526;
      }
      else
      {
        if (v8 == 1701078390 || v8 == 1701733488) {
          goto LABEL_12;
        }
        int v9 = 1919182198;
      }
      if (v8 == v9) {
        goto LABEL_12;
      }
      if (v8 != v7)
      {
        if (v7 <= 1701078389)
        {
          if (v7 == 1633773415) {
            goto LABEL_12;
          }
          int v13 = 1633969526;
        }
        else
        {
          if (v7 == 1701078390 || v7 == 1701733488) {
            goto LABEL_12;
          }
          int v13 = 1919182198;
        }
        if (v7 == v13) {
          goto LABEL_12;
        }
      }
      HALS_ObjectMap::ReleaseObject(v4, v5);
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      uint64_t v17 = "HALS_Framework-ios-imp.cpp";
      __int16 v18 = 1024;
      int v19 = 3014;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceAddIOProc: no device with given ID", (uint8_t *)&v16, 0x12u);
    }
    AudioHardwarePropertyListenerProc v14 = __cxa_allocate_exception(0x10uLL);
    *(void *)AudioHardwarePropertyListenerProc v14 = off_1F148A5D8;
    v14[2] = 560227702;
  }
  return 560033144;
}

void sub_1BACCAB08(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BACCAB20(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BACCA8FCLL);
  }
  JUMPOUT(0x1BACCAB10);
}

void sub_1BACCAB80()
{
}

OSStatus AudioDeviceRead(AudioDeviceID inDevice, const AudioTimeStamp *inStartTime, AudioBufferList *outData)
{
  return 1970171760;
}

OSStatus AudioDeviceGetPropertyInfo(AudioDeviceID inDevice, UInt32 inChannel, Boolean isInput, AudioDevicePropertyID inPropertyID, UInt32 *outSize, Boolean *outWritable)
{
  int v9 = isInput;
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  if (v9) {
    AudioObjectPropertyScope v12 = 1768845428;
  }
  else {
    AudioObjectPropertyScope v12 = 1869968496;
  }
  inAddress.mSelector = inPropertyID;
  inAddress.mScope = v12;
  inAddress.mElement = inChannel;
  v16.mSelector = inPropertyID;
  v16.mScope = 1735159650;
  v16.mElement = inChannel;
  if (AudioObjectHasProperty(inDevice, &inAddress))
  {
    if (outSize)
    {
      OSStatus result = AudioObjectGetPropertyDataSize(inDevice, &inAddress, 0, 0, outSize);
      if (!outWritable) {
        return result;
      }
    }
    else
    {
      OSStatus result = 0;
      if (!outWritable) {
        return result;
      }
    }
    if (!result)
    {
      p_AudioObjectPropertyAddress inAddress = &inAddress;
      return AudioObjectIsPropertySettable(inDevice, p_inAddress, outWritable);
    }
  }
  else if (HALB_Info::IsReallyGlobalDeviceProperty((HALB_Info *)inAddress.mSelector, v13) {
         && AudioObjectHasProperty(inDevice, &v16))
  }
  {
    if (outSize)
    {
      OSStatus result = AudioObjectGetPropertyDataSize(inDevice, &v16, 0, 0, outSize);
      if (!outWritable) {
        return result;
      }
    }
    else
    {
      OSStatus result = 0;
      if (!outWritable) {
        return result;
      }
    }
    if (!result)
    {
      p_AudioObjectPropertyAddress inAddress = &v16;
      return AudioObjectIsPropertySettable(inDevice, p_inAddress, outWritable);
    }
  }
  else
  {
    if (outSize) {
      *outSize = 0;
    }
    OSStatus result = 2003332927;
    if (outWritable) {
      *outWritable = 0;
    }
  }
  return result;
}

void sub_1BACCACE4(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (v3) {
      _DWORD *v3 = 0;
    }
    if (v2) {
      unsigned char *v2 = 0;
    }
  }
  else
  {
    if (v3) {
      _DWORD *v3 = 0;
    }
    if (v2) {
      unsigned char *v2 = 0;
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1BACCACB8);
}

OSStatus AudioDeviceGetProperty(AudioDeviceID inDevice, UInt32 inChannel, Boolean isInput, AudioDevicePropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  int v9 = isInput;
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  if (v9) {
    AudioObjectPropertyScope v12 = 1768845428;
  }
  else {
    AudioObjectPropertyScope v12 = 1869968496;
  }
  inAddress.mSelector = inPropertyID;
  inAddress.mScope = v12;
  inAddress.mElement = inChannel;
  v17.mSelector = inPropertyID;
  v17.mScope = 1735159650;
  v17.mElement = inChannel;
  if (AudioObjectHasProperty(inDevice, &inAddress))
  {
    p_AudioObjectPropertyAddress inAddress = &inAddress;
    return AudioObjectGetPropertyData(inDevice, p_inAddress, 0, 0, ioPropertyDataSize, outPropertyData);
  }
  if (HALB_Info::IsReallyGlobalDeviceProperty((HALB_Info *)inAddress.mSelector, v13)
    && AudioObjectHasProperty(inDevice, &v17))
  {
    p_AudioObjectPropertyAddress inAddress = &v17;
    return AudioObjectGetPropertyData(inDevice, p_inAddress, 0, 0, ioPropertyDataSize, outPropertyData);
  }
  OSStatus v15 = 2003332927;
  if (ioPropertyDataSize)
  {
    if (outPropertyData) {
      bzero(outPropertyData, *ioPropertyDataSize);
    }
    *ioPropertyDataSize = 0;
  }
  return v15;
}

void sub_1BACCAE44(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (v2)
    {
      if (v3) {
        bzero(v3, *v2);
      }
      _DWORD *v2 = 0;
    }
  }
  else if (v2)
  {
    if (v3) {
      bzero(v3, *v2);
    }
    _DWORD *v2 = 0;
  }
  __cxa_end_catch();
  JUMPOUT(0x1BACCADE0);
}

OSStatus AudioDeviceSetProperty(AudioDeviceID inDevice, const AudioTimeStamp *inWhen, UInt32 inChannel, Boolean isInput, AudioDevicePropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  int v10 = isInput;
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  if (v10) {
    AudioObjectPropertyScope v13 = 1768845428;
  }
  else {
    AudioObjectPropertyScope v13 = 1869968496;
  }
  inAddress.mSelector = inPropertyID;
  inAddress.mScope = v13;
  inAddress.mElement = inChannel;
  v18.mSelector = inPropertyID;
  v18.mScope = 1735159650;
  v18.mElement = inChannel;
  if (AudioObjectHasProperty(inDevice, &inAddress))
  {
    p_AudioObjectPropertyAddress inAddress = &inAddress;
    return AudioObjectSetPropertyData(inDevice, p_inAddress, 0, 0, inPropertyDataSize, inPropertyData);
  }
  OSStatus v16 = 2003332927;
  if (HALB_Info::IsReallyGlobalDeviceProperty((HALB_Info *)inAddress.mSelector, v14)
    && AudioObjectHasProperty(inDevice, &v18))
  {
    p_AudioObjectPropertyAddress inAddress = &v18;
    return AudioObjectSetPropertyData(inDevice, p_inAddress, 0, 0, inPropertyDataSize, inPropertyData);
  }
  return v16;
}

void sub_1BACCAF94(void *a1)
{
}

OSStatus AudioDeviceAddPropertyListener(AudioDeviceID inDevice, UInt32 inChannel, Boolean isInput, AudioDevicePropertyID inPropertyID, AudioDevicePropertyListenerProc inProc, void *inClientData)
{
  int v8 = *(HALB_Info **)&inPropertyID;
  int v9 = isInput;
  int v11 = *(HALS_ObjectMap **)&inDevice;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  if (!inProc)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v37 = "HALS_Framework-ios-imp.cpp";
      __int16 v38 = 1024;
      int v39 = 3335;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceAddPropertyListener: can't add a NULL listener proc", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  AudioObjectPropertyScope v12 = (HALS_Device *)HALS_ObjectMap::CopyObjectByObjectID(v11);
  AudioHardwarePropertyListenerProc v14 = v12;
  if (!v12)
  {
LABEL_35:
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v37 = "HALS_Framework-ios-imp.cpp";
      __int16 v38 = 1024;
      int v39 = 3339;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceAddPropertyListener: no device with given ID", buf, 0x12u);
    }
    int v26 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v26 = off_1F148A5D8;
    v26[2] = 560947818;
  }
  int v16 = *((_DWORD *)v12 + 5);
  int v15 = *((_DWORD *)v12 + 6);
  if (v16 <= 1701078389)
  {
    if (v16 == 1633773415) {
      goto LABEL_12;
    }
    int v17 = 1633969526;
  }
  else
  {
    if (v16 == 1701078390 || v16 == 1701733488) {
      goto LABEL_12;
    }
    int v17 = 1919182198;
  }
  if (v16 == v17) {
    goto LABEL_12;
  }
  if (v16 == v15) {
    goto LABEL_34;
  }
  if (v15 <= 1701078389)
  {
    if (v15 == 1633773415) {
      goto LABEL_12;
    }
    int v25 = 1633969526;
    goto LABEL_33;
  }
  if (v15 != 1701078390 && v15 != 1701733488)
  {
    int v25 = 1919182198;
LABEL_33:
    if (v15 == v25) {
      goto LABEL_12;
    }
LABEL_34:
    HALS_ObjectMap::ReleaseObject(v12, v13);
    goto LABEL_35;
  }
LABEL_12:
  if (v9) {
    int v19 = 1768845428;
  }
  else {
    int v19 = 1869968496;
  }
  v35[0] = v8;
  v35[1] = v19;
  v35[2] = inChannel;
  if (HALB_Info::IsReallyGlobalDeviceProperty(v8, (const AudioObjectPropertyAddress *)v13))
  {
    v28[0] = v8;
    v28[1] = 1735159650;
    v28[2] = inChannel;
    if (HALB_Info::IsIOContextProperty(v8, v20))
    {
      unsigned int InternalIOContextID = HALS_Device::GetInternalIOContextID(v14);
      int v29 = 5;
      uint64_t v31 = 0;
      uint64_t v30 = 0;
      int v32 = 0;
      AudioDevicePropertyListenerProc v33 = inProc;
      uint64_t v34 = inClientData;
      buf[0] = 0;
      char v40 = 0;
      HALS_NotificationManager::AddPropertyListener((uint64_t)&v29, InternalIOContextID, (char *)v28, (uint64_t)buf);
    }
    else
    {
      int v29 = 5;
      uint64_t v31 = 0;
      uint64_t v30 = 0;
      int v32 = 0;
      AudioDevicePropertyListenerProc v33 = inProc;
      uint64_t v34 = inClientData;
      buf[0] = 0;
      char v40 = 0;
      HALS_NotificationManager::AddPropertyListener((uint64_t)&v29, v11, (char *)v28, (uint64_t)buf);
    }
  }
  else if (HALB_Info::IsIOContextProperty(v8, v20))
  {
    unsigned int v22 = HALS_Device::GetInternalIOContextID(v14);
    int v29 = 5;
    uint64_t v31 = 0;
    uint64_t v30 = 0;
    int v32 = 0;
    AudioDevicePropertyListenerProc v33 = inProc;
    uint64_t v34 = inClientData;
    buf[0] = 0;
    char v40 = 0;
    HALS_NotificationManager::AddPropertyListener((uint64_t)&v29, v22, (char *)v35, (uint64_t)buf);
  }
  else
  {
    int v29 = 5;
    uint64_t v31 = 0;
    uint64_t v30 = 0;
    int v32 = 0;
    AudioDevicePropertyListenerProc v33 = inProc;
    uint64_t v34 = inClientData;
    buf[0] = 0;
    char v40 = 0;
    HALS_NotificationManager::AddPropertyListener((uint64_t)&v29, v11, (char *)v35, (uint64_t)buf);
  }
  if (v40) {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)buf);
  }
  HALS_Listener::~HALS_Listener((HALS_Listener *)&v29);
  HALS_ObjectMap::ReleaseObject(v14, v23);
  return 0;
}

void sub_1BACCB408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a2)
  {
    if (a59) {
      AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a19);
    }
    HALS_Listener::~HALS_Listener((HALS_Listener *)&a12);
    HALS_ObjectMap::ReleaseObject(v59, v61);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BACCB1F8);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BACCB4CC()
{
}

OSStatus AudioDeviceRemovePropertyListener(AudioDeviceID inDevice, UInt32 inChannel, Boolean isInput, AudioDevicePropertyID inPropertyID, AudioDevicePropertyListenerProc inProc)
{
  unint64_t v6 = *(HALB_Info **)&inPropertyID;
  int v7 = isInput;
  int v9 = *(HALS_ObjectMap **)&inDevice;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  if (!inProc)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v37 = "HALS_Framework-ios-imp.cpp";
      LOWORD(v38) = 1024;
      *(_DWORD *)((char *)&v38 + 2) = 3407;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceRemovePropertyListener: can't remove a NULL listener proc", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  int v10 = (HALS_Device *)HALS_ObjectMap::CopyObjectByObjectID(v9);
  AudioObjectPropertyScope v12 = v10;
  if (!v10)
  {
LABEL_33:
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v37 = "HALS_Framework-ios-imp.cpp";
      LOWORD(v38) = 1024;
      *(_DWORD *)((char *)&v38 + 2) = 3411;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceRemovePropertyListener: no device with given ID", buf, 0x12u);
    }
    int v32 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v32 = off_1F148A5D8;
    v32[2] = 560947818;
  }
  int v14 = *((_DWORD *)v10 + 5);
  int v13 = *((_DWORD *)v10 + 6);
  if (v14 <= 1701078389)
  {
    if (v14 == 1633773415) {
      goto LABEL_12;
    }
    int v15 = 1633969526;
  }
  else
  {
    if (v14 == 1701078390 || v14 == 1701733488) {
      goto LABEL_12;
    }
    int v15 = 1919182198;
  }
  if (v14 == v15) {
    goto LABEL_12;
  }
  if (v14 == v13) {
    goto LABEL_32;
  }
  if (v13 <= 1701078389)
  {
    if (v13 == 1633773415) {
      goto LABEL_12;
    }
    int v31 = 1633969526;
    goto LABEL_31;
  }
  if (v13 != 1701078390 && v13 != 1701733488)
  {
    int v31 = 1919182198;
LABEL_31:
    if (v13 == v31) {
      goto LABEL_12;
    }
LABEL_32:
    HALS_ObjectMap::ReleaseObject(v10, v11);
    goto LABEL_33;
  }
LABEL_12:
  if (v7) {
    int v17 = 1768845428;
  }
  else {
    int v17 = 1869968496;
  }
  v35[0] = v6;
  v35[1] = v17;
  v35[2] = inChannel;
  if (HALB_Info::IsReallyGlobalDeviceProperty(v6, (const AudioObjectPropertyAddress *)v11))
  {
    v34[0] = v6;
    v34[1] = 1735159650;
    v34[2] = inChannel;
    if (HALB_Info::IsIOContextProperty(v6, v18))
    {
      unsigned int InternalIOContextID = (const HALS_Listener *)HALS_Device::GetInternalIOContextID(v12);
      *(_DWORD *)buf = 5;
      uint64_t v38 = 0;
      uint64_t v37 = 0;
      int v39 = 0;
      AudioDevicePropertyListenerProc v40 = inProc;
      uint64_t v41 = 0;
      HALS_NotificationManager::RemovePropertyListener((HALS_NotificationManager *)buf, InternalIOContextID, v34, v22, v23);
    }
    else
    {
      *(_DWORD *)buf = 5;
      uint64_t v38 = 0;
      uint64_t v37 = 0;
      int v39 = 0;
      AudioDevicePropertyListenerProc v40 = inProc;
      uint64_t v41 = 0;
      HALS_NotificationManager::RemovePropertyListener((HALS_NotificationManager *)buf, v9, v34, v19, v20);
    }
  }
  else if (HALB_Info::IsIOContextProperty(v6, v18))
  {
    int v26 = (const HALS_Listener *)HALS_Device::GetInternalIOContextID(v12);
    *(_DWORD *)buf = 5;
    uint64_t v38 = 0;
    uint64_t v37 = 0;
    int v39 = 0;
    AudioDevicePropertyListenerProc v40 = inProc;
    uint64_t v41 = 0;
    HALS_NotificationManager::RemovePropertyListener((HALS_NotificationManager *)buf, v26, v35, v27, v28);
  }
  else
  {
    *(_DWORD *)buf = 5;
    uint64_t v38 = 0;
    uint64_t v37 = 0;
    int v39 = 0;
    AudioDevicePropertyListenerProc v40 = inProc;
    uint64_t v41 = 0;
    HALS_NotificationManager::RemovePropertyListener((HALS_NotificationManager *)buf, v9, v35, v24, v25);
  }
  HALS_Listener::~HALS_Listener((HALS_Listener *)buf);
  HALS_ObjectMap::ReleaseObject(v12, v29);
  return 0;
}

void sub_1BACCB8CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
  {
    HALS_Listener::~HALS_Listener((HALS_Listener *)&a13);
    HALS_ObjectMap::ReleaseObject(v13, v15);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BACCB6C0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BACCB980()
{
}

OSStatus AudioStreamGetPropertyInfo(AudioStreamID inStream, UInt32 inChannel, AudioDevicePropertyID inPropertyID, UInt32 *outSize, Boolean *outWritable)
{
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  inAddress.mSelector = inPropertyID;
  inAddress.mScope = 1735159650;
  inAddress.mElement = inChannel;
  if (AudioObjectHasProperty(1u, &inAddress))
  {
    if (outSize)
    {
      OSStatus result = AudioObjectGetPropertyDataSize(inStream, &inAddress, 0, 0, outSize);
      if (!outWritable) {
        goto LABEL_11;
      }
    }
    else
    {
      OSStatus result = 0;
      if (!outWritable) {
        goto LABEL_11;
      }
    }
    if (!result) {
      OSStatus result = AudioObjectIsPropertySettable(inStream, &inAddress, outWritable);
    }
LABEL_11:
    if (!result) {
      return result;
    }
    goto LABEL_12;
  }
  OSStatus result = 2003332927;
LABEL_12:
  if (outSize) {
    *outSize = 0;
  }
  if (outWritable) {
    *outWritable = 0;
  }
  return result;
}

void sub_1BACCBA68(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (v3) {
      _DWORD *v3 = 0;
    }
    if (v2) {
      unsigned char *v2 = 0;
    }
  }
  else
  {
    if (v3) {
      _DWORD *v3 = 0;
    }
    if (v2) {
      unsigned char *v2 = 0;
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1BACCBA50);
}

OSStatus AudioStreamGetProperty(AudioStreamID inStream, UInt32 inChannel, AudioDevicePropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  inAddress.mSelector = inPropertyID;
  inAddress.mScope = 1735159650;
  inAddress.mElement = inChannel;
  return AudioObjectGetPropertyData(inStream, &inAddress, 0, 0, ioPropertyDataSize, outPropertyData);
}

void sub_1BACCBB40(void *a1, int a2)
{
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (v2)
    {
      if (v3) {
        bzero(v3, *v2);
      }
      _DWORD *v2 = 0;
    }
  }
  else if (v2)
  {
    if (v3) {
      bzero(v3, *v2);
    }
    _DWORD *v2 = 0;
  }
  __cxa_end_catch();
  JUMPOUT(0x1BACCBB28);
}

OSStatus AudioStreamSetProperty(AudioStreamID inStream, const AudioTimeStamp *inWhen, UInt32 inChannel, AudioDevicePropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  inAddress.mSelector = inPropertyID;
  inAddress.mScope = 1735159650;
  inAddress.mElement = inChannel;
  return AudioObjectSetPropertyData(inStream, &inAddress, 0, 0, inPropertyDataSize, inPropertyData);
}

void sub_1BACCBC30(void *a1)
{
}

OSStatus AudioStreamAddPropertyListener(AudioStreamID inStream, UInt32 inChannel, AudioDevicePropertyID inPropertyID, AudioStreamPropertyListenerProc inProc, void *inClientData)
{
  int v9 = *(HALS_ObjectMap **)&inStream;
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  if (!inProc)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      unsigned int v24 = "HALS_Framework-ios-imp.cpp";
      __int16 v25 = 1024;
      int v26 = 3678;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioStreamAddPropertyListener: can't add a NULL listener proc", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  int v10 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v9);
  if (!v10)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      unsigned int v24 = "HALS_Framework-ios-imp.cpp";
      __int16 v25 = 1024;
      int v26 = 3682;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioStreamAddPropertyListener: no stream with given ID", buf, 0x12u);
    }
    int v15 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v15 = off_1F148A5D8;
    void v15[2] = 561214578;
  }
  v22[0] = inPropertyID;
  v22[1] = 1735159650;
  v22[2] = inChannel;
  int v16 = 6;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  int v19 = 0;
  AudioStreamPropertyListenerProc v20 = inProc;
  int v21 = inClientData;
  buf[0] = 0;
  char v27 = 0;
  HALS_NotificationManager::AddPropertyListener((uint64_t)&v16, v9, (char *)v22, (uint64_t)buf);
  if (v27) {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)buf);
  }
  HALS_Listener::~HALS_Listener((HALS_Listener *)&v16);
  HALS_ObjectMap::ReleaseObject(v10, v11);
  return 0;
}

void sub_1BACCBED4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BACCBEEC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a2)
  {
    if (a57) {
      AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a17);
    }
    HALS_Listener::~HALS_Listener((HALS_Listener *)&a10);
    HALS_ObjectMap::ReleaseObject(v57, v59);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BACCBD30);
  }
  JUMPOUT(0x1BACCBEDCLL);
}

void sub_1BACCBF74()
{
}

OSStatus AudioStreamRemovePropertyListener(AudioStreamID inStream, UInt32 inChannel, AudioDevicePropertyID inPropertyID, AudioStreamPropertyListenerProc inProc)
{
  int v7 = *(HALS_ObjectMap **)&inStream;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  if (!inProc)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      unsigned int v22 = "HALS_Framework-ios-imp.cpp";
      __int16 v23 = 1024;
      int v24 = 3726;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioStreamRemovePropertyListener: can't remove a NULL listener proc", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  int v8 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v7);
  if (!v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      unsigned int v22 = "HALS_Framework-ios-imp.cpp";
      __int16 v23 = 1024;
      int v24 = 3730;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioStreamRemovePropertyListener: no stream with given ID", buf, 0x12u);
    }
    int v13 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v13 = off_1F148A5D8;
    v13[2] = 561214578;
  }
  v20[0] = inPropertyID;
  v20[1] = 1735159650;
  v20[2] = inChannel;
  int v14 = 6;
  uint64_t v16 = 0;
  uint64_t v15 = 0;
  int v17 = 0;
  AudioStreamPropertyListenerProc v18 = inProc;
  uint64_t v19 = 0;
  buf[0] = 0;
  char v25 = 0;
  HALS_NotificationManager::AddPropertyListener((uint64_t)&v14, v7, (char *)v20, (uint64_t)buf);
  if (v25) {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)buf);
  }
  HALS_Listener::~HALS_Listener((HALS_Listener *)&v14);
  HALS_ObjectMap::ReleaseObject(v8, v9);
  return 0;
}

void sub_1BACCC1E8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BACCC200(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a2)
  {
    if (a57) {
      AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a17);
    }
    HALS_Listener::~HALS_Listener((HALS_Listener *)&a10);
    HALS_ObjectMap::ReleaseObject(v57, v59);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BACCC048);
  }
  JUMPOUT(0x1BACCC1F0);
}

void sub_1BACCC288()
{
}

void AMCP::Stream::~Stream(AMCP::Stream *this)
{
  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t AMCP::Stream::Stream(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = (AMCP::Object *)AMCP::Object::Object(a1, a2, a3);
  *(void *)unsigned int v4 = &unk_1F146B248;
  uint64_t v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x61737472);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    int v7 = *v10;
    if (*(void *)v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      *(_WORD *)int v11 = 2080;
      *(void *)&uint64_t v11[2] = "Stream.cpp";
      __int16 v12 = 1024;
      int v13 = 25;
      __int16 v14 = 2080;
      uint64_t v15 = "constructed_correct_class(k_class_id_stream)";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1BACCC484(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = &unk_1F145F4E8;
  os_log_type_t v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t AMCP::Stream::get_direction(AMCP::Stream *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  os_log_type_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  unsigned int v4 = v3;
  uint64_t v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5) {
    unint64_t simple_required = AMCP::Core::Core::get_simple_required_property<1935960434u>(v5);
  }
  else {
    unint64_t simple_required = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return simple_required;
}

unint64_t AMCP::Stream::get_starting_channel(AMCP::Stream *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 1;
  }
  os_log_type_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 1;
  }
  unsigned int v4 = v3;
  uint64_t v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5) {
    unint64_t simple_required = AMCP::Core::Core::get_simple_required_property<1935894638u>(v5);
  }
  else {
    unint64_t simple_required = 1;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return simple_required;
}

BOOL AMCP::Stream::is_reference_stream(AMCP::Stream *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  os_log_type_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  unsigned int v4 = v3;
  uint64_t v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5)
  {
    strcpy(buf, "spatbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    unint64_t v6 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if (!HIDWORD(v6))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      mach_port_t v9 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        int v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        char v13 = 4;
        strcpy((char *)__p, "taps");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&uint8_t buf[4] = v11;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Core.h";
        __int16 v15 = 1024;
        int v16 = 391;
        __int16 v17 = 2080;
        AudioStreamPropertyListenerProc v18 = "optional_value.operator BOOL() == true";
        __int16 v19 = 2080;
        AudioStreamPropertyListenerProc v20 = __p;
        __int16 v21 = 1024;
        int v22 = 1735159650;
        __int16 v23 = 1024;
        int v24 = 0;
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }
      abort();
    }
    BOOL v7 = v6 != 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v7;
}

void sub_1BACCC780(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

unint64_t AMCP::Stream::get_terminal_type(AMCP::Stream *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  os_log_type_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  unsigned int v4 = v3;
  uint64_t v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5)
  {
    strcpy(buf, "mretbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    unint64_t v6 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if (!HIDWORD(v6))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      mach_port_t v9 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        int v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        char v13 = 4;
        strcpy((char *)__p, "term");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&uint8_t buf[4] = v11;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Core.h";
        __int16 v15 = 1024;
        int v16 = 391;
        __int16 v17 = 2080;
        AudioStreamPropertyListenerProc v18 = "optional_value.operator BOOL() == true";
        __int16 v19 = 2080;
        AudioStreamPropertyListenerProc v20 = __p;
        __int16 v21 = 1024;
        int v22 = 1735159650;
        __int16 v23 = 1024;
        int v24 = 0;
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }
      abort();
    }
    unint64_t v7 = v6;
  }
  else
  {
    unint64_t v7 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v7;
}

void sub_1BACCC93C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

AMCP::Core::Core *AMCP::Stream::get_latency(AMCP::Stream *this)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2)
  {
    os_log_type_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      unsigned int v4 = v3;
      uint64_t v5 = (AMCP::Core::Core *)*((void *)this + 2);
      if (!v5)
      {
LABEL_19:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return v5;
      }
      uint64_t v19 = 0x676C6F62736C7463;
      int v20 = 0;
      has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::has_property(v5, (const AMCP::Address *)&v19);
      if (!has_property)
      {
LABEL_21:
        AMCP::Log::Scope_Registry::get(has_property);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        char v13 = **(NSObject ***)buf;
        if (*(void *)v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v22);
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          __int16 v14 = pthread_self();
          mach_port_t v15 = pthread_mach_thread_np(v14);
          char v18 = 4;
          strcpy((char *)&__p, "sltc");
          *(_DWORD *)buf = 67110658;
          *(_DWORD *)&uint8_t buf[4] = v15;
          *(_WORD *)int v22 = 2080;
          *(void *)&v22[2] = "Core.h";
          __int16 v23 = 1024;
          int v24 = 391;
          __int16 v25 = 2080;
          *(void *)uint64_t v26 = "optional_value.operator BOOL() == true";
          *(_WORD *)&v26[8] = 2080;
          *(void *)&unsigned char v26[10] = &__p;
          __int16 v27 = 1024;
          int v28 = 1735159650;
          __int16 v29 = 1024;
          int v30 = 0;
          _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v18 < 0) {
            operator delete(__p);
          }
        }
        abort();
      }
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&__p, (int8x8_t *)v5, (unsigned int *)&v19);
      unint64_t v7 = __p;
      if (__p)
      {
        unint64_t v8 = AMCP::Implementation::get_type_marker<std::function<int ()(void)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v8))
        {
          LODWORD(v7) = AMCP::Core::Operation::call_function<int>(v7);
LABEL_8:
          char v9 = 0;
          unsigned int v10 = v7 & 0xFFFFFF00;
          goto LABEL_15;
        }
        unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v11))
        {
          AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)buf, v7);
          LODWORD(v7) = AMCP::Thing::convert_to<int>((uint64_t)buf);
          if (*(void *)&v26[6]) {
            (*(void (**)(void, uint8_t *, void, void))&v26[6])(0, buf, 0, 0);
          }
          goto LABEL_8;
        }
        LOBYTE(v7) = 0;
      }
      unsigned int v10 = 0;
      char v9 = 1;
LABEL_15:
      has_property = (AMCP::Log::Scope_Registry *)v17;
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      if ((v9 & 1) == 0)
      {
        uint64_t v5 = (AMCP::Core::Core *)(v10 | v7);
        goto LABEL_19;
      }
      goto LABEL_21;
    }
  }
  return 0;
}

void sub_1BACCCBA8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void AMCP::Stream::get_available_format_list(AMCP::Stream *this@<X0>, void *a2@<X8>)
{
  unsigned int v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (uint64_t v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    unint64_t v6 = v5;
    unint64_t v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7)
    {
      AMCP::Core::Core::get_simple_required_property<1718449187u>(a2, v7);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void AMCP::Stream::get_current_format(AMCP::Stream *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (uint64_t v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    unint64_t v6 = v5;
    unint64_t v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7)
    {
      AMCP::Core::Core::get_simple_required_property<1718444404u>(a2, v7);
    }
    else
    {
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
}

uint64_t AMCP::Stream::set_current_format(AMCP::Stream *this, const CA::StreamDescription *a2)
{
  os_log_type_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      unint64_t v6 = v5;
      unint64_t v7 = (int8x8_t *)*((void *)this + 2);
      if (!v7) {
        goto LABEL_15;
      }
      uint64_t v14 = 0x676C6F62666D6174;
      int v15 = 0;
      if (!AMCP::Core::Core::is_property_settable(v7, (const AMCP::Address *)&v14)) {
        goto LABEL_15;
      }
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v20, v7, (unsigned int *)&v14);
      unint64_t v8 = v20;
      if (v20)
      {
        unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<void ()(CA::StreamDescription const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
        {
          AMCP::Core::Operation::call_function<void,CA::StreamDescription const&>(v8, (uint64_t)a2);
          char v10 = 0;
          goto LABEL_12;
        }
        unint64_t v12 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v12))
        {
          uint64_t v16 = 0;
          uint64_t v17 = 0;
          uint64_t v18 = 0;
          uint64_t v19 = AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
          operator new();
        }
      }
      char v10 = 1;
LABEL_12:
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if ((v10 & 1) == 0)
      {
        uint64_t v11 = 1;
        goto LABEL_16;
      }
LABEL_15:
      uint64_t v11 = 0;
LABEL_16:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      return v11;
    }
  }
  return 0;
}

void sub_1BACCCE40(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void (*a16)(void, char *, void, void))
{
  if (a16) {
    a16(0, &a12, 0, 0);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 - 40);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BACCCE10);
}

uint64_t AMCP::Core::Operation::call_function<void,CA::StreamDescription const&>(void *a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = AMCP::Implementation::get_type_marker<std::function<void ()(CA::StreamDescription const&)>>();
  uint64_t v5 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v4);
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v12 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      char v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)int v30 = 2080;
      *(void *)&v30[2] = "Operation.h";
      __int16 v31 = 1024;
      int v32 = 154;
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    __int16 v23 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    AudioDevicePropertyListenerProc v33 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const CA::StreamDescription &>]";
    uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v35 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    uint64_t v17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v6 = v5;
  if (!*((void *)v5 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(CA::StreamDescription const&)>>(),
        (uint64_t v5 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v6 + 7))(4, (uint64_t)v6 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v9 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      char v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)int v30 = 2080;
      *(void *)&v30[2] = "Operation.h";
      __int16 v31 = 1024;
      int v32 = 161;
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    __int16 v23 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    AudioDevicePropertyListenerProc v33 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const CA::StreamDescription &>]";
    uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v35 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    uint64_t v17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v7 = *((void *)v5 + 3);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, a2);
}

void sub_1BACCD32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(CA::StreamDescription const&)>>()
{
  v0 = &unk_1E9F79000;
  {
    v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[342];
}

uint64_t AMCP::Stream::set_current_format_and_wait(AMCP::Stream *this, const CA::StreamDescription *a2)
{
  os_log_type_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      unint64_t v6 = v5;
      uint64_t v7 = (int8x8_t *)*((void *)this + 2);
      if (!v7) {
        goto LABEL_15;
      }
      uint64_t v14 = 0x676C6F62666D6174;
      int v15 = 0;
      if (!AMCP::Core::Core::is_property_settable(v7, (const AMCP::Address *)&v14)) {
        goto LABEL_15;
      }
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v20, v7, (unsigned int *)&v14);
      unint64_t v8 = v20;
      if (v20)
      {
        unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<void ()(CA::StreamDescription const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
        {
          AMCP::Core::Operation::call_function<void,CA::StreamDescription const&>(v8, (uint64_t)a2);
          char v10 = 0;
          goto LABEL_12;
        }
        unint64_t v12 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v12))
        {
          uint64_t v16 = 0;
          uint64_t v17 = 0;
          uint64_t v18 = 0;
          uint64_t v19 = AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
          operator new();
        }
      }
      char v10 = 1;
LABEL_12:
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if ((v10 & 1) == 0)
      {
        uint64_t v11 = 1;
        goto LABEL_16;
      }
LABEL_15:
      uint64_t v11 = 0;
LABEL_16:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      return v11;
    }
  }
  return 0;
}

void sub_1BACCD5A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void (*a16)(void, char *, void, void))
{
  if (a16) {
    a16(0, &a12, 0, 0);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 - 40);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BACCD574);
}

void AMCP::Stream::make_string_for_asbd(AMCP::Stream *this@<X0>, const CA::StreamDescription *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>, int16x8_t a5@<Q0>)
{
  int v5 = (int)a2;
  uint64_t v168 = 0;
  size_t v169 = 0;
  uint64_t v170 = 0;
  if (a3) {
    caulk::make_string((caulk *)"%.0f", (uint64_t)&v168, *(void *)this);
  }
  unsigned int v8 = *((_DWORD *)this + 2);
  if (v8 == 1633889587)
  {
    int v15 = "AC-3";
LABEL_24:
    std::string::basic_string[abi:ne180100]<0>((void *)a4, v15);
    goto LABEL_288;
  }
  if (v8 == 1667326771)
  {
    int v15 = "AC-3 for SPDIF";
    goto LABEL_24;
  }
  if (v8 != 1819304813)
  {
    a5.i32[0] = bswap32(v8);
    *(int8x8_t *)a5.i8 = vzip1_s8(*(int8x8_t *)a5.i8, *(int8x8_t *)a5.i8);
    v16.i64[0] = 0x1F0000001FLL;
    v16.i64[1] = 0x1F0000001FLL;
    v17.i64[0] = 0x5F0000005FLL;
    v17.i64[1] = 0x5F0000005FLL;
    *(int8x8_t *)a5.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v17, (uint32x4_t)vsraq_n_s32(v16, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a5.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a5.i8, (int8x8_t)0x2E002E002E002ELL);
    *(unsigned char *)(a4 + 23) = 4;
    *(_DWORD *)a4 = vmovn_s16(a5).u32[0];
    *(unsigned char *)(a4 + 4) = 0;
    goto LABEL_288;
  }
  float64x2_t v165 = 0;
  std::string::size_type v166 = 0;
  uint64_t v167 = 0;
  int v9 = *((_DWORD *)this + 3);
  if ((v9 & 2) != 0)
  {
    HIBYTE(v167) = 10;
    LOWORD(v166) = 28257;
    float64x2_t v165 = *(std::string::value_type **)"Big Endian";
  }
  *(_OWORD *)&v164.__r_.__value_.__l.__data_ = 0uLL;
  char v10 = "Unsigned Integer";
  if (v5) {
    char v10 = "UInt";
  }
  uint64_t v11 = "Signed Integer";
  v164.__r_.__value_.__r.__words[2] = 0;
  if (v5) {
    uint64_t v11 = "SInt";
  }
  if ((v9 & 4) != 0) {
    char v10 = v11;
  }
  unint64_t v12 = "Floating Point";
  if (v5) {
    unint64_t v12 = "Float";
  }
  if (v9) {
    char v13 = v12;
  }
  else {
    char v13 = v10;
  }
  std::string::__assign_external(&v164, v13);
  mach_port_t v161 = 0;
  std::string::size_type v162 = 0;
  uint64_t v163 = 0;
  int v14 = *((_DWORD *)this + 3);
  if ((v14 & 8) == 0)
  {
    if ((v14 & 0x10) != 0)
    {
      HIBYTE(v163) = 4;
      LODWORD(v161) = 1751607624;
    }
    else
    {
      HIBYTE(v163) = 3;
      qmemcpy(&v161, "Low", 3);
    }
  }
  mach_port_t v158 = 0;
  std::string::size_type v159 = 0;
  uint64_t v160 = 0;
  if ((v14 & 0x40) != 0)
  {
    LOBYTE(v159) = 101;
    mach_port_t v158 = *(std::string::value_type **)"Unmixable";
    char v18 = 9;
  }
  else
  {
    qmemcpy(&v158, "Mixable", 7);
    char v18 = 7;
  }
  HIBYTE(v160) = v18;
  if (v5)
  {
    int v19 = SHIBYTE(v170);
    if (v170 >= 0) {
      size_t v20 = HIBYTE(v170);
    }
    else {
      size_t v20 = v169;
    }
    if (v20) {
      std::runtime_error v21 = " ";
    }
    else {
      std::runtime_error v21 = "";
    }
    if (v20) {
      unint64_t v22 = v20 + 1;
    }
    else {
      unint64_t v22 = 0;
    }
    __int16 v23 = &v145;
    std::string::basic_string[abi:ne180100]((uint64_t)&v145, v22);
    if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v23 = (std::string *)v145.__r_.__value_.__r.__words[0];
    }
    if (v20)
    {
      if (v19 >= 0) {
        int v24 = (void **)&v168;
      }
      else {
        int v24 = v168;
      }
      memmove(v23, v24, v20);
      memcpy((char *)v23 + v20, v21, v20 != 0);
    }
    v23->__r_.__value_.__s.__data_[v20 + (v20 != 0)] = 0;
    if (v160 >= 0) {
      uint64_t v25 = (const std::string::value_type *)&v158;
    }
    else {
      uint64_t v25 = v158;
    }
    if (v160 >= 0) {
      std::string::size_type v26 = HIBYTE(v160);
    }
    else {
      std::string::size_type v26 = v159;
    }
    int v27 = std::string::append(&v145, v25, v26);
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v146.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    __int16 v29 = std::string::append(&v146, " ", 1uLL);
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v147.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    caulk::make_string((caulk *)"%u", (uint64_t)&v144, *((unsigned int *)this + 7));
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v31 = &v144;
    }
    else {
      __int16 v31 = (std::string *)v144.__r_.__value_.__r.__words[0];
    }
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v144.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v144.__r_.__value_.__l.__size_;
    }
    AudioDevicePropertyListenerProc v33 = std::string::append(&v147, (const std::string::value_type *)v31, size);
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    int v35 = std::string::append(&v148, " Ch ", 4uLL);
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    if (v167 >= 0) {
      uint64_t v37 = (const std::string::value_type *)&v165;
    }
    else {
      uint64_t v37 = v165;
    }
    if (v167 >= 0) {
      std::string::size_type v38 = HIBYTE(v167);
    }
    else {
      std::string::size_type v38 = v166;
    }
    int v39 = std::string::append(&v149, v37, v38);
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v150.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v41 = HIBYTE(v167);
    if (v167 < 0) {
      std::string::size_type v41 = v166;
    }
    if (v41) {
      uint64_t v42 = " ";
    }
    else {
      uint64_t v42 = "";
    }
    uint64_t v43 = std::string::append(&v150, v42, v41 != 0);
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v151.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    if (v163 >= 0) {
      uint64_t v45 = (const std::string::value_type *)&v161;
    }
    else {
      uint64_t v45 = v161;
    }
    if (v163 >= 0) {
      std::string::size_type v46 = HIBYTE(v163);
    }
    else {
      std::string::size_type v46 = v162;
    }
    int v47 = std::string::append(&v151, v45, v46);
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v152.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v49 = HIBYTE(v163);
    if (v163 < 0) {
      std::string::size_type v49 = v162;
    }
    if (v49) {
      long long v50 = " ";
    }
    else {
      long long v50 = "";
    }
    int v51 = std::string::append(&v152, v50, v49 != 0);
    long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v153.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v53 = &v164;
    }
    else {
      int v53 = (std::string *)v164.__r_.__value_.__r.__words[0];
    }
    if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v54 = HIBYTE(v164.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v54 = v164.__r_.__value_.__l.__size_;
    }
    mach_port_t v55 = std::string::append(&v153, (const std::string::value_type *)v53, v54);
    long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v154.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    caulk::make_string((caulk *)"%u", (uint64_t)&v141, *((unsigned int *)this + 8));
    if ((v143 & 0x80u) == 0) {
      int v57 = (const std::string::value_type *)&v141;
    }
    else {
      int v57 = (const std::string::value_type *)v141;
    }
    if ((v143 & 0x80u) == 0) {
      std::string::size_type v58 = v143;
    }
    else {
      std::string::size_type v58 = v142;
    }
    int v59 = std::string::append(&v154, v57, v58);
    long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    v155.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v61 = HIBYTE(v163);
    if (v163 < 0) {
      std::string::size_type v61 = v162;
    }
    if (v61) {
      uint64_t v62 = "/";
    }
    else {
      uint64_t v62 = "";
    }
    uint64_t v63 = std::string::append(&v155, v62, v61 != 0);
    long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    v156.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v65 = HIBYTE(v163);
    if (v163 < 0) {
      std::string::size_type v65 = v162;
    }
    if (v65)
    {
      if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v140, v164.__r_.__value_.__l.__data_, v164.__r_.__value_.__l.__size_);
      }
      else {
        std::string v140 = v164;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v140, "");
    }
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v128 = &v140;
    }
    else {
      uint64_t v128 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v129 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v129 = v140.__r_.__value_.__l.__size_;
    }
    float32x4_t v130 = std::string::append(&v156, (const std::string::value_type *)v128, v129);
    long long v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
    v157.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v131;
    v130->__r_.__value_.__l.__size_ = 0;
    v130->__r_.__value_.__r.__words[2] = 0;
    v130->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v132 = HIBYTE(v163);
    if (v163 < 0) {
      std::string::size_type v132 = v162;
    }
    if (v132) {
      caulk::make_string((caulk *)"%u", (uint64_t)&__p, (8 * (*((_DWORD *)this + 6) / *((_DWORD *)this + 7))));
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
    }
    if ((v139 & 0x80u) == 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if ((v139 & 0x80u) == 0) {
      std::string::size_type v134 = v139;
    }
    else {
      std::string::size_type v134 = v138;
    }
    uint64_t v135 = std::string::append(&v157, p_p, v134);
    long long v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
    *(void *)(a4 + 16) = *((void *)&v135->__r_.__value_.__l + 2);
    *(_OWORD *)a4 = v136;
    v135->__r_.__value_.__l.__size_ = 0;
    v135->__r_.__value_.__r.__words[2] = 0;
    v135->__r_.__value_.__r.__words[0] = 0;
    if ((char)v139 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v157.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v140.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v156.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v155.__r_.__value_.__l.__data_);
    }
    if ((char)v143 < 0) {
      operator delete(v141);
    }
    if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v154.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v153.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v152.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v150.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v149.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v148.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v144.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v147.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v146.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_280;
    }
    int v127 = (void *)v145.__r_.__value_.__r.__words[0];
  }
  else
  {
    int v66 = SHIBYTE(v170);
    if (v170 >= 0) {
      size_t v67 = HIBYTE(v170);
    }
    else {
      size_t v67 = v169;
    }
    if (v67) {
      int v68 = " ";
    }
    else {
      int v68 = "";
    }
    if (v67) {
      unint64_t v69 = v67 + 1;
    }
    else {
      unint64_t v69 = 0;
    }
    uint64_t v70 = &v144;
    std::string::basic_string[abi:ne180100]((uint64_t)&v144, v69);
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v70 = (std::string *)v144.__r_.__value_.__r.__words[0];
    }
    if (v67)
    {
      if (v66 >= 0) {
        double v71 = (void **)&v168;
      }
      else {
        double v71 = v168;
      }
      memmove(v70, v71, v67);
      memcpy((char *)v70 + v67, v68, v67 != 0);
    }
    v70->__r_.__value_.__s.__data_[v67 + (v67 != 0)] = 0;
    if (v160 >= 0) {
      double v72 = (const std::string::value_type *)&v158;
    }
    else {
      double v72 = v158;
    }
    if (v160 >= 0) {
      std::string::size_type v73 = HIBYTE(v160);
    }
    else {
      std::string::size_type v73 = v159;
    }
    uint64_t v74 = std::string::append(&v144, v72, v73);
    long long v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    v145.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v145.__r_.__value_.__l.__data_ = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    uint64_t v76 = std::string::append(&v145, " ", 1uLL);
    long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
    v146.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v146.__r_.__value_.__l.__data_ = v77;
    v76->__r_.__value_.__l.__size_ = 0;
    v76->__r_.__value_.__r.__words[2] = 0;
    v76->__r_.__value_.__r.__words[0] = 0;
    caulk::make_string((caulk *)"%u", (uint64_t)&v141, *((unsigned int *)this + 7));
    if ((v143 & 0x80u) == 0) {
      uint64_t v78 = (const std::string::value_type *)&v141;
    }
    else {
      uint64_t v78 = (const std::string::value_type *)v141;
    }
    if ((v143 & 0x80u) == 0) {
      std::string::size_type v79 = v143;
    }
    else {
      std::string::size_type v79 = v142;
    }
    uint64_t v80 = std::string::append(&v146, v78, v79);
    long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    v147.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v147.__r_.__value_.__l.__data_ = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    uint64_t v82 = std::string::append(&v147, " Channel ", 9uLL);
    long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    v148.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v148.__r_.__value_.__l.__data_ = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    caulk::make_string((caulk *)"%u", (uint64_t)&v140, *((unsigned int *)this + 8));
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float64x2_t v84 = &v140;
    }
    else {
      float64x2_t v84 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v85 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v85 = v140.__r_.__value_.__l.__size_;
    }
    float64x2_t v86 = std::string::append(&v148, (const std::string::value_type *)v84, v85);
    long long v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
    v149.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = v87;
    v86->__r_.__value_.__l.__size_ = 0;
    v86->__r_.__value_.__r.__words[2] = 0;
    v86->__r_.__value_.__r.__words[0] = 0;
    int v88 = std::string::append(&v149, " Bit ", 5uLL);
    long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    v150.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v89;
    v88->__r_.__value_.__l.__size_ = 0;
    v88->__r_.__value_.__r.__words[2] = 0;
    v88->__r_.__value_.__r.__words[0] = 0;
    if (v167 >= 0) {
      uint64_t v90 = (const std::string::value_type *)&v165;
    }
    else {
      uint64_t v90 = v165;
    }
    if (v167 >= 0) {
      std::string::size_type v91 = HIBYTE(v167);
    }
    else {
      std::string::size_type v91 = v166;
    }
    uint64_t v92 = std::string::append(&v150, v90, v91);
    long long v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
    v151.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v93;
    v92->__r_.__value_.__l.__size_ = 0;
    v92->__r_.__value_.__r.__words[2] = 0;
    v92->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v94 = HIBYTE(v167);
    if (v167 < 0) {
      std::string::size_type v94 = v166;
    }
    if (v94) {
      uint64_t v95 = " ";
    }
    else {
      uint64_t v95 = "";
    }
    float64x2_t v96 = std::string::append(&v151, v95, v94 != 0);
    long long v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
    v152.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v97;
    v96->__r_.__value_.__l.__size_ = 0;
    v96->__r_.__value_.__r.__words[2] = 0;
    v96->__r_.__value_.__r.__words[0] = 0;
    if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      mach_port_t v98 = &v164;
    }
    else {
      mach_port_t v98 = (std::string *)v164.__r_.__value_.__r.__words[0];
    }
    if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v99 = HIBYTE(v164.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v99 = v164.__r_.__value_.__l.__size_;
    }
    uint64_t v100 = std::string::append(&v152, (const std::string::value_type *)v98, v99);
    long long v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
    v153.__r_.__value_.__r.__words[2] = v100->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v101;
    v100->__r_.__value_.__l.__size_ = 0;
    v100->__r_.__value_.__r.__words[2] = 0;
    v100->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v102 = HIBYTE(v163);
    if (v163 < 0) {
      std::string::size_type v102 = v162;
    }
    if (v102) {
      uint64_t v103 = " Aligned ";
    }
    else {
      uint64_t v103 = "";
    }
    if (v102) {
      std::string::size_type v104 = 9;
    }
    else {
      std::string::size_type v104 = 0;
    }
    uint64_t v105 = std::string::append(&v153, v103, v104);
    long long v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
    v154.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v106;
    v105->__r_.__value_.__l.__size_ = 0;
    v105->__r_.__value_.__r.__words[2] = 0;
    v105->__r_.__value_.__r.__words[0] = 0;
    if (v163 >= 0) {
      long long v107 = (const std::string::value_type *)&v161;
    }
    else {
      long long v107 = v161;
    }
    if (v163 >= 0) {
      std::string::size_type v108 = HIBYTE(v163);
    }
    else {
      std::string::size_type v108 = v162;
    }
    uint64_t v109 = std::string::append(&v154, v107, v108);
    long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
    v155.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v110;
    v109->__r_.__value_.__l.__size_ = 0;
    v109->__r_.__value_.__r.__words[2] = 0;
    v109->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v111 = HIBYTE(v163);
    if (v163 < 0) {
      std::string::size_type v111 = v162;
    }
    BOOL v112 = v111 == 0;
    BOOL v113 = v111 != 0;
    if (v112) {
      uint64_t v114 = "";
    }
    else {
      uint64_t v114 = " in ";
    }
    uint64_t v115 = std::string::append(&v155, v114, 4 * v113);
    long long v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
    v156.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v116;
    v115->__r_.__value_.__l.__size_ = 0;
    v115->__r_.__value_.__r.__words[2] = 0;
    v115->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v117 = HIBYTE(v163);
    if (v163 < 0) {
      std::string::size_type v117 = v162;
    }
    if (v117) {
      caulk::make_string((caulk *)"%u", (uint64_t)&__p, (8 * (*((_DWORD *)this + 6) / *((_DWORD *)this + 7))));
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
    }
    if ((v139 & 0x80u) == 0) {
      uint64_t v118 = (const std::string::value_type *)&__p;
    }
    else {
      uint64_t v118 = (const std::string::value_type *)__p;
    }
    if ((v139 & 0x80u) == 0) {
      std::string::size_type v119 = v139;
    }
    else {
      std::string::size_type v119 = v138;
    }
    uint64_t v120 = std::string::append(&v156, v118, v119);
    long long v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
    v157.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v121;
    v120->__r_.__value_.__l.__size_ = 0;
    v120->__r_.__value_.__r.__words[2] = 0;
    v120->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v122 = HIBYTE(v163);
    if (v163 < 0) {
      std::string::size_type v122 = v162;
    }
    if (v122) {
      uint64_t v123 = " Bits";
    }
    else {
      uint64_t v123 = "";
    }
    if (v122) {
      std::string::size_type v124 = 5;
    }
    else {
      std::string::size_type v124 = 0;
    }
    uint64_t v125 = std::string::append(&v157, v123, v124);
    long long v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
    *(void *)(a4 + 16) = *((void *)&v125->__r_.__value_.__l + 2);
    *(_OWORD *)a4 = v126;
    v125->__r_.__value_.__l.__size_ = 0;
    v125->__r_.__value_.__r.__words[2] = 0;
    v125->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v157.__r_.__value_.__l.__data_);
    }
    if ((char)v139 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v156.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v155.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v154.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v153.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v152.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v151.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v150.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v149.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v140.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v148.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v147.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v147.__r_.__value_.__l.__data_);
    }
    if ((char)v143 < 0) {
      operator delete(v141);
    }
    if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v146.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v145.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_280;
    }
    int v127 = (void *)v144.__r_.__value_.__r.__words[0];
  }
  operator delete(v127);
LABEL_280:
  if (SHIBYTE(v160) < 0) {
    operator delete(v158);
  }
  if (SHIBYTE(v163) < 0) {
    operator delete(v161);
  }
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v164.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v167) < 0) {
    operator delete(v165);
  }
LABEL_288:
  if (SHIBYTE(v170) < 0) {
    operator delete(v168);
  }
}

uint64_t HALS_UCPlugIn::ObjectSetPropertyData(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6, uint64_t a7, const void *a8)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t result = *((void *)this + 3);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *))(*(void *)result + 120))(result, a2, a3, a4, a5, a6, a7, a8);
    if (result)
    {
LABEL_7:
      v11.i32[0] = a4->mSelector;
      int16x8_t v13 = (int16x8_t)vmovl_u8(v11);
      *(int16x4_t *)v13.i8 = vrev64_s16(*(int16x4_t *)v13.i8);
      *(int8x8_t *)v13.i8 = vmovn_s16(v13);
      __int32 v21 = v13.i32[0];
      char v22 = 0;
      v13.i32[0] = a4->mScope;
      int16x8_t v14 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v13.i8);
      *(int16x4_t *)v14.i8 = vrev64_s16(*(int16x4_t *)v14.i8);
      unsigned __int32 v19 = vmovn_s16(v14).u32[0];
      char v20 = 0;
      v18[0] = BYTE3(result);
      v18[1] = BYTE2(result);
      uint64_t v18[2] = BYTE1(result);
      int v17 = result;
      v18[3] = result;
      v18[4] = 0;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t mElement = a4->mElement;
        *(_DWORD *)buf = 136316674;
        int v24 = "HALS_UCPlugIn.cpp";
        __int16 v25 = 1024;
        int v26 = 1190;
        __int16 v27 = 2080;
        long long v28 = &v21;
        __int16 v29 = 2080;
        long long v30 = &v19;
        __int16 v31 = 2048;
        uint64_t v32 = mElement;
        __int16 v33 = 1024;
        int v34 = v17;
        __int16 v35 = 2080;
        long long v36 = v18;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_UCPlugIn::ObjectSetPropertyData: failed:  [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = v17;
    }
  }
  else
  {
    unint64_t v12 = (uint64_t (*)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *))*((void *)this + 70);
    if (v12)
    {
      uint64_t result = v12(a2, a4, a5, a6, a7, a8);
      if (result) {
        goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t HALS_UCPlugIn::ObjectGetPropertyData(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6, uint64_t a7, unsigned int *a8, void *a9)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t result = *((void *)this + 3);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, unsigned int *, void *))(*(void *)result + 112))(result, a2, a3, a4, a5, a6, a7, a8, a9);
    if (result)
    {
LABEL_7:
      v12.i32[0] = a4->mSelector;
      int16x8_t v14 = (int16x8_t)vmovl_u8(v12);
      *(int16x4_t *)v14.i8 = vrev64_s16(*(int16x4_t *)v14.i8);
      *(int8x8_t *)v14.i8 = vmovn_s16(v14);
      __int32 v22 = v14.i32[0];
      char v23 = 0;
      v14.i32[0] = a4->mScope;
      int16x8_t v15 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v14.i8);
      *(int16x4_t *)v15.i8 = vrev64_s16(*(int16x4_t *)v15.i8);
      unsigned __int32 v20 = vmovn_s16(v15).u32[0];
      char v21 = 0;
      v19[0] = BYTE3(result);
      v19[1] = BYTE2(result);
      v19[2] = BYTE1(result);
      int v18 = result;
      v19[3] = result;
      v19[4] = 0;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t mElement = a4->mElement;
        *(_DWORD *)buf = 136316674;
        __int16 v25 = "HALS_UCPlugIn.cpp";
        __int16 v26 = 1024;
        int v27 = 1176;
        __int16 v28 = 2080;
        __int16 v29 = &v22;
        __int16 v30 = 2080;
        __int16 v31 = &v20;
        __int16 v32 = 2048;
        uint64_t v33 = mElement;
        __int16 v34 = 1024;
        int v35 = v18;
        __int16 v36 = 2080;
        uint64_t v37 = v19;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_UCPlugIn::ObjectGetPropertyData: failed:  [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = v18;
    }
  }
  else
  {
    int16x8_t v13 = (uint64_t (*)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, unsigned int *, void *))*((void *)this + 69);
    if (v13)
    {
      uint64_t result = v13(a2, a4, a5, a6, a7, a8, a9);
      if (result) {
        goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t HALS_UCPlugIn::ObjectGetPropertyDataSize(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  unsigned int v23 = 0;
  uint64_t v8 = *((void *)this + 3);
  if (v8)
  {
    int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, unsigned int *))(*(void *)v8 + 104))(v8, a2, a3, a4, a5, a6, &v23);
    if (!v9) {
      return v23;
    }
LABEL_7:
    v10.i32[0] = a4->mSelector;
    int16x8_t v13 = (int16x8_t)vmovl_u8(v10);
    *(int16x4_t *)v13.i8 = vrev64_s16(*(int16x4_t *)v13.i8);
    *(int8x8_t *)v13.i8 = vmovn_s16(v13);
    __int32 v21 = v13.i32[0];
    char v22 = 0;
    v13.i32[0] = a4->mScope;
    int16x8_t v14 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v13.i8);
    *(int16x4_t *)v14.i8 = vrev64_s16(*(int16x4_t *)v14.i8);
    unsigned __int32 v19 = vmovn_s16(v14).u32[0];
    char v20 = 0;
    v18[0] = HIBYTE(v9);
    v18[1] = BYTE2(v9);
    uint64_t v18[2] = BYTE1(v9);
    int v17 = v9;
    v18[3] = v9;
    v18[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t mElement = a4->mElement;
      *(_DWORD *)buf = 136316674;
      __int16 v25 = "HALS_UCPlugIn.cpp";
      __int16 v26 = 1024;
      int v27 = 1161;
      __int16 v28 = 2080;
      __int16 v29 = &v21;
      __int16 v30 = 2080;
      __int16 v31 = &v19;
      __int16 v32 = 2048;
      uint64_t v33 = mElement;
      __int16 v34 = 1024;
      int v35 = v17;
      __int16 v36 = 2080;
      uint64_t v37 = v18;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_UCPlugIn::ObjectGetPropertyDataSize: failed:  [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v17;
  }
  uint8x8_t v12 = (uint64_t (*)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, unsigned int *))*((void *)this + 68);
  if (!v12) {
    return 0;
  }
  int v9 = v12(a2, a4, a5, a6, &v23);
  if (v9) {
    goto LABEL_7;
  }
  return v23;
}

BOOL HALS_UCPlugIn::ObjectIsPropertySettable(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  char v21 = 0;
  uint64_t v6 = *((void *)this + 3);
  if (v6)
  {
    int v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const AudioObjectPropertyAddress *, char *))(*(void *)v6 + 96))(v6, a2, a3, a4, &v21);
    if (!v7) {
      return v21 != 0;
    }
LABEL_7:
    v8.i32[0] = a4->mSelector;
    int16x8_t v11 = (int16x8_t)vmovl_u8(v8);
    *(int16x4_t *)v11.i8 = vrev64_s16(*(int16x4_t *)v11.i8);
    *(int8x8_t *)v11.i8 = vmovn_s16(v11);
    __int32 v19 = v11.i32[0];
    char v20 = 0;
    v11.i32[0] = a4->mScope;
    int16x8_t v12 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v11.i8);
    *(int16x4_t *)v12.i8 = vrev64_s16(*(int16x4_t *)v12.i8);
    unsigned __int32 v17 = vmovn_s16(v12).u32[0];
    char v18 = 0;
    v16[0] = HIBYTE(v7);
    v16[1] = BYTE2(v7);
    v16[2] = BYTE1(v7);
    int v15 = v7;
    v16[3] = v7;
    v16[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t mElement = a4->mElement;
      *(_DWORD *)buf = 136316674;
      unsigned int v23 = "HALS_UCPlugIn.cpp";
      __int16 v24 = 1024;
      int v25 = 1145;
      __int16 v26 = 2080;
      int v27 = &v19;
      __int16 v28 = 2080;
      __int16 v29 = &v17;
      __int16 v30 = 2048;
      uint64_t v31 = mElement;
      __int16 v32 = 1024;
      int v33 = v15;
      __int16 v34 = 2080;
      int v35 = v16;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_UCPlugIn::ObjectIsPropertySettable: failed:  [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v15;
  }
  uint8x8_t v10 = (uint64_t (*)(uint64_t, const AudioObjectPropertyAddress *, char *))*((void *)this + 67);
  if (!v10) {
    return 0;
  }
  int v7 = v10(a2, a4, &v21);
  if (v7) {
    goto LABEL_7;
  }
  return v21 != 0;
}

BOOL HALS_UCPlugIn::ObjectHasProperty(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4)
{
  uint64_t v5 = *((void *)this + 3);
  if (v5)
  {
    int v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const AudioObjectPropertyAddress *))(*(void *)v5 + 88))(v5, a2, a3, a4);
  }
  else
  {
    int v7 = (uint64_t (*)(uint64_t, const AudioObjectPropertyAddress *))*((void *)this + 66);
    if (!v7) {
      return 0;
    }
    int v6 = v7(a2, a4);
  }
  return v6 != 0;
}

uint64_t HALS_UCPlugIn::End_WriteMix(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v8 = *((void *)this + 3);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(void *)v8 + 176))(v8, a2, a3, 1919513701, a4, a5);
  }
  uint8x8_t v10 = (uint64_t (*)(uint64_t, uint64_t, AudioTimeStamp *))*((void *)this + 65);
  if (v10) {
    return v10(a2, a4, &a5->mOutputTime);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::Do_WriteMix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*(void *)a7) {
    uint64_t v7 = *(void *)a7 + *(unsigned int *)(a7 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void *)(a1 + 24);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v8 + 168))(v8, a2, a3, a4, 1919513701, a5, a6, v7, 0);
  }
  uint8x8_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 512);
  if (!v10) {
    return 1852797029;
  }

  return v10(a2, a3, a5, a6 + 144, v7, a5);
}

uint64_t HALS_UCPlugIn::Begin_WriteMix(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v8 = *((void *)this + 3);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(void *)v8 + 160))(v8, a2, a3, 1919513701, a4, a5);
  }
  uint8x8_t v10 = (uint64_t (*)(uint64_t, uint64_t, AudioTimeStamp *))*((void *)this + 63);
  if (v10) {
    return v10(a2, a4, &a5->mOutputTime);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::WillDo_WriteMix(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, BOOL *a4)
{
  uint64_t result = *((void *)this + 3);
  if (result)
  {
    char v10 = 0;
    char v9 = 1;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(void *)result + 152))(result, a2, a3, 1919513701, &v10, &v9);
    BOOL v7 = v10 == 0;
  }
  else
  {
    BOOL v7 = *((void *)this + 64) == 0;
  }
  BOOL v8 = !v7;
  *a4 = v8;
  return result;
}

uint64_t HALS_UCPlugIn::End_ConvertMix(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(void *)v5 + 176))(v5, a2, a3, 1668114808, a4, a5);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::Do_ConvertMix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 24);
  if (!v8) {
    return 1852797029;
  }
  if (*(void *)a8) {
    uint64_t v9 = *(void *)a8 + *(unsigned int *)(a8 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  if (*(void *)a7) {
    uint64_t v10 = *(void *)a7 + *(unsigned int *)(a7 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 168))(v8, a2, a3, a4, 1668114808, a5, a6, v10, v9);
}

uint64_t HALS_UCPlugIn::Begin_ConvertMix(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(void *)v5 + 160))(v5, a2, a3, 1668114808, a4, a5);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::WillDo_ConvertMix(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, BOOL *a4, BOOL *a5)
{
  uint64_t result = *((void *)this + 3);
  BOOL v8 = 1;
  if (result)
  {
    char v11 = 0;
    char v10 = 1;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(void *)result + 152))(result, a2, a3, 1668114808, &v11, &v10);
    BOOL v9 = v11 != 0;
    BOOL v8 = v10 != 0;
  }
  else
  {
    BOOL v9 = 0;
  }
  *a4 = v9;
  *a5 = v8;
  return result;
}

uint64_t HALS_UCPlugIn::End_ProcessMix(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(void *)v5 + 176))(v5, a2, a3, 1886218616, a4, a5);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::Do_ProcessMix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 24);
  if (!v8) {
    return 1852797029;
  }
  if (*(void *)a8) {
    uint64_t v9 = *(void *)a8 + *(unsigned int *)(a8 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  if (*(void *)a7) {
    uint64_t v10 = *(void *)a7 + *(unsigned int *)(a7 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 168))(v8, a2, a3, a4, 1886218616, a5, a6, v10, v9);
}

uint64_t HALS_UCPlugIn::Begin_ProcessMix(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(void *)v5 + 160))(v5, a2, a3, 1886218616, a4, a5);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::WillDo_ProcessMix(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, BOOL *a4, BOOL *a5)
{
  uint64_t result = *((void *)this + 3);
  BOOL v8 = 1;
  if (result)
  {
    char v11 = 0;
    char v10 = 1;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(void *)result + 152))(result, a2, a3, 1886218616, &v11, &v10);
    BOOL v9 = v11 != 0;
    BOOL v8 = v10 != 0;
  }
  else
  {
    BOOL v9 = 0;
  }
  *a4 = v9;
  *a5 = v8;
  return result;
}

uint64_t HALS_UCPlugIn::End_MixOutput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(void *)v5 + 176))(v5, a2, a3, 1835628655, a4, a5);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::Do_MixOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7) {
    return 1852797029;
  }
  if (*(void *)a7) {
    uint64_t v8 = *(void *)a7 + *(unsigned int *)(a7 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v7 + 168))(v7, a2, a3, a4, 1835628655, a5, a6, v8, 0);
}

uint64_t HALS_UCPlugIn::Begin_MixOutput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(void *)v5 + 160))(v5, a2, a3, 1835628655, a4, a5);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::WillDo_MixOutput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, BOOL *a4)
{
  uint64_t result = *((void *)this + 3);
  if (result)
  {
    char v10 = 0;
    char v9 = 1;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(void *)result + 152))(result, a2, a3, 1835628655, &v10, &v9);
    BOOL v7 = v10 == 0;
  }
  else
  {
    BOOL v7 = *((void *)this + 64) == 0;
  }
  BOOL v8 = !v7;
  *a4 = v8;
  return result;
}

uint64_t HALS_UCPlugIn::End_ProcessOutput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(void *)v5 + 176))(v5, a2, a3, 1886352756, a4, a5);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::Do_ProcessOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 24);
  if (!v8) {
    return 1852797029;
  }
  if (*(void *)a8) {
    uint64_t v9 = *(void *)a8 + *(unsigned int *)(a8 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  if (*(void *)a7) {
    uint64_t v10 = *(void *)a7 + *(unsigned int *)(a7 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 168))(v8, a2, a3, a4, 1886352756, a5, a6, v10, v9);
}

uint64_t HALS_UCPlugIn::Begin_ProcessOutput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(void *)v5 + 160))(v5, a2, a3, 1886352756, a4, a5);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::WillDo_ProcessOutput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, BOOL *a4, BOOL *a5)
{
  uint64_t result = *((void *)this + 3);
  BOOL v8 = 1;
  if (result)
  {
    char v11 = 0;
    char v10 = 1;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(void *)result + 152))(result, a2, a3, 1886352756, &v11, &v10);
    BOOL v9 = v11 != 0;
    BOOL v8 = v10 != 0;
  }
  else
  {
    BOOL v9 = 0;
  }
  *a4 = v9;
  *a5 = v8;
  return result;
}

uint64_t HALS_UCPlugIn::End_ProcessInput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(void *)v5 + 176))(v5, a2, a3, 1885957744, a4, a5);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::Do_ProcessInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 24);
  if (!v8) {
    return 1852797029;
  }
  if (*(void *)a8) {
    uint64_t v9 = *(void *)a8 + *(unsigned int *)(a8 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  if (*(void *)a7) {
    uint64_t v10 = *(void *)a7 + *(unsigned int *)(a7 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 168))(v8, a2, a3, a4, 1885957744, a5, a6, v10, v9);
}

uint64_t HALS_UCPlugIn::Begin_ProcessInput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(void *)v5 + 160))(v5, a2, a3, 1885957744, a4, a5);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::WillDo_ProcessInput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, BOOL *a4, BOOL *a5)
{
  uint64_t result = *((void *)this + 3);
  BOOL v8 = 1;
  if (result)
  {
    char v11 = 0;
    char v10 = 1;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(void *)result + 152))(result, a2, a3, 1885957744, &v11, &v10);
    BOOL v9 = v11 != 0;
    BOOL v8 = v10 != 0;
  }
  else
  {
    BOOL v9 = 0;
  }
  *a4 = v9;
  *a5 = v8;
  return result;
}

uint64_t HALS_UCPlugIn::End_ConvertInput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(void *)v5 + 176))(v5, a2, a3, 1667853936, a4, a5);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::Do_ConvertInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 24);
  if (!v8) {
    return 1852797029;
  }
  if (*(void *)a8) {
    uint64_t v9 = *(void *)a8 + *(unsigned int *)(a8 + 8);
  }
  else {
    uint64_t v9 = 0;
  }
  if (*(void *)a7) {
    uint64_t v10 = *(void *)a7 + *(unsigned int *)(a7 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 168))(v8, a2, a3, a4, 1667853936, a5, a6, v10, v9);
}

uint64_t HALS_UCPlugIn::Begin_ConvertInput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(void *)v5 + 160))(v5, a2, a3, 1667853936, a4, a5);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::WillDo_ConvertInput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, BOOL *a4, BOOL *a5)
{
  uint64_t result = *((void *)this + 3);
  BOOL v8 = 1;
  if (result)
  {
    char v11 = 0;
    char v10 = 1;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(void *)result + 152))(result, a2, a3, 1667853936, &v11, &v10);
    BOOL v9 = v11 != 0;
    BOOL v8 = v10 != 0;
  }
  else
  {
    BOOL v9 = 0;
  }
  *a4 = v9;
  *a5 = v8;
  return result;
}

uint64_t HALS_UCPlugIn::End_ReadInput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v8 = *((void *)this + 3);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(void *)v8 + 176))(v8, a2, a3, 1919246692, a4, a5);
  }
  char v10 = (uint64_t (*)(uint64_t, uint64_t, AudioTimeStamp *))*((void *)this + 62);
  if (v10) {
    return v10(a2, a4, &a5->mInputTime);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::InformDriverOfIOThreadStateChange(HALS_UCPlugIn *this, unsigned int a2, const applesauce::CF::DictionaryRef *a3)
{
  uint64_t result = *((void *)this + 5);
  if (result)
  {
    if (*(void *)a3) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
    }
  }
  return result;
}

uint64_t HALS_UCPlugIn::Do_TeardownForIsolatedIO(HALS_UCPlugIn *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 40))(v1);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::Do_SetupForIsolatedIO(HALS_UCPlugIn *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::Do_IsolatedReadInput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5, uint64_t a6)
{
  uint64_t v6 = *((void *)this + 4);
  if (v6) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(void *)v6 + 48))(v6, a2, a3, a6, 1919246692, a4, a5);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::Do_ReadInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*(void *)a7) {
    uint64_t v7 = *(void *)a7 + *(unsigned int *)(a7 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void *)(a1 + 24);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v8 + 168))(v8, a2, a3, a4, 1919246692, a5, a6, v7, 0);
  }
  char v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 488);
  if (!v10) {
    return 1852797029;
  }

  return v10(a2, a3, a5, a6 + 80, v7, a5);
}

uint64_t HALS_UCPlugIn::Begin_ReadInput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  uint64_t v8 = *((void *)this + 3);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(*(void *)v8 + 160))(v8, a2, a3, 1919246692, a4, a5);
  }
  char v10 = (uint64_t (*)(uint64_t, uint64_t, AudioTimeStamp *))*((void *)this + 60);
  if (v10) {
    return v10(a2, a4, &a5->mInputTime);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::WillDo_ReadInput(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, BOOL *a4)
{
  uint64_t result = *((void *)this + 3);
  if (result)
  {
    char v10 = 0;
    char v9 = 1;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(void *)result + 152))(result, a2, a3, 1919246692, &v10, &v9);
    BOOL v7 = v10 == 0;
  }
  else
  {
    BOOL v7 = *((void *)this + 61) == 0;
  }
  BOOL v8 = !v7;
  *a4 = v8;
  return result;
}

uint64_t HALS_UCPlugIn::End_IOCycle(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, const AudioServerPlugInIOCycleInfo *a4)
{
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v5 + 176))(v5, a2, a3, 1668899692, a4->mNominalIOBufferFrameSize);
  }
  BOOL v7 = (uint64_t (*)(uint64_t, void, AudioTimeStamp *, AudioTimeStamp *))*((void *)this + 59);
  if (v7) {
    return v7(a2, a4->mNominalIOBufferFrameSize, &a4->mInputTime, &a4->mOutputTime);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::Begin_IOCycle(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, const AudioServerPlugInIOCycleInfo *a4)
{
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v5 + 160))(v5, a2, a3, 1668899692, a4->mNominalIOBufferFrameSize);
  }
  BOOL v7 = (uint64_t (*)(uint64_t, void, AudioTimeStamp *, AudioTimeStamp *))*((void *)this + 58);
  if (v7) {
    return v7(a2, a4->mNominalIOBufferFrameSize, &a4->mInputTime, &a4->mOutputTime);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::WillDo_IOCycle(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, BOOL *a4)
{
  uint64_t result = *((void *)this + 3);
  if (result)
  {
    char v10 = 0;
    char v9 = 1;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(void *)result + 152))(result, a2, a3, 1668899692, &v10, &v9);
    BOOL v7 = v10 == 0;
  }
  else
  {
    BOOL v7 = *((void *)this + 58) == 0;
  }
  BOOL v8 = !v7;
  *a4 = v8;
  return result;
}

uint64_t HALS_UCPlugIn::End_IOThread(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, const AudioServerPlugInIOCycleInfo *a4)
{
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, const AudioServerPlugInIOCycleInfo *))(*(void *)v5 + 176))(v5, a2, a3, 1953002084, a4->mNominalIOBufferFrameSize, a4);
  }
  BOOL v7 = (uint64_t (*)(uint64_t))*((void *)this + 57);
  if (v7) {
    return v7(a2);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::Begin_IOThread(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, const AudioServerPlugInIOCycleInfo *a4)
{
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v5 + 160))(v5, a2, a3, 1953002084, a4->mNominalIOBufferFrameSize);
  }
  BOOL v7 = (uint64_t (*)(uint64_t, void))*((void *)this + 56);
  if (v7) {
    return v7(a2, a4->mNominalIOBufferFrameSize);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::WillDo_IOThread(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, BOOL *a4)
{
  uint64_t result = *((void *)this + 3);
  if (result)
  {
    char v10 = 0;
    char v9 = 1;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *))(*(void *)result + 152))(result, a2, a3, 1953002084, &v10, &v9);
    BOOL v7 = v10 == 0;
  }
  else
  {
    BOOL v7 = *((void *)this + 56) == 0;
  }
  BOOL v8 = !v7;
  *a4 = v8;
  return result;
}

uint64_t HALS_UCPlugIn::GetZeroTimeStamp(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, double *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v7 = *((void *)this + 3);
  if (v7) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double *, unint64_t *, unint64_t *))(*(void *)v7 + 144))(v7, a2, a3, a4, a5, a6);
  }
  char v9 = (uint64_t (*)(uint64_t, double *, unint64_t *, unint64_t *))*((void *)this + 55);
  if (v9) {
    return v9(a2, a4, a5, a6);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::Stop(HALS_UCPlugIn *this, uint64_t a2)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 136))(v3);
  }
  uint64_t v5 = (uint64_t (*)(uint64_t))*((void *)this + 54);
  if (v5) {
    return v5(a2);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::Start(HALS_UCPlugIn *this, uint64_t a2)
{
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 128))(v3);
  }
  uint64_t v5 = (uint64_t (*)(uint64_t))*((void *)this + 53);
  if (v5) {
    return v5(a2);
  }
  else {
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::Unregister_IOThread(HALS_UCPlugIn *this)
{
  return 0;
}

uint64_t HALS_UCPlugIn::Register_IOThread(HALS_UCPlugIn *this, double a2)
{
  return 0;
}

uint64_t HALS_UCPlugIn::RegisterIOBuffer(HALS_UCPlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, BOOL a5, unsigned int a6, void *a7)
{
  return 0;
}

void HALS_UCPlugIn::create_mcp_engine(HALS_UCPlugIn *this, HALS_PlugIn *a2, const HALS_IODevice *a3, unsigned int *a4)
{
  object[40] = *(dispatch_object_t *)MEMORY[0x1E4F143B8];
  BOOL v8 = (const void *)(*(uint64_t (**)(const HALS_IODevice *))(*(void *)a3 + 208))(a3);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v8);
  double v22 = (*(double (**)(const HALS_IODevice *))(*(void *)a3 + 264))(a3);
  int v21 = (*(uint64_t (**)(const HALS_IODevice *))(*(void *)a3 + 296))(a3);
  int v20 = (*(uint64_t (**)(const HALS_IODevice *))(*(void *)a3 + 320))(a3);
  int v19 = (*(uint64_t (**)(const HALS_IODevice *, uint64_t))(*(void *)a3 + 312))(a3, 1);
  int v18 = (*(uint64_t (**)(const HALS_IODevice *, void))(*(void *)a3 + 312))(a3, 0);
  int v17 = (*(uint64_t (**)(const HALS_IODevice *, uint64_t))(*(void *)a3 + 304))(a3, 1);
  int v16 = (*(uint64_t (**)(const HALS_IODevice *, void))(*(void *)a3 + 304))(a3, 0);
  AMCP::Utility::Dispatch_Queue::create_serial_with_workloop((AMCP::Utility::Dispatch_Queue *)object, "HALS_UCPlugIn::Engine Queue");
  char v9 = (NSObject **)((char *)this + 80);
  AMCP::Utility::Dispatch_Queue::operator=(v9, object[0]);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)object);
  make_stream_list((void **)object, a3, 1);
  make_stream_list(__p, a3, 0);
  long long v13 = 0uLL;
  unsigned __int8 v12 = 0;
  uint64_t v10 = *((void *)a2 + 51);
  *(void *)&long long v11 = *((void *)a2 + 50);
  *((void *)&v11 + 1) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  std::allocate_shared[abi:ne180100]<AMCP::ASP::Engine,std::allocator<AMCP::ASP::Engine>,std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int const&,applesauce::CF::StringRef &,double &,unsigned int &,unsigned int &,unsigned int &,unsigned int &,unsigned int &,unsigned int &,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> &,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> &,AMCP::Utility::Dispatch_Queue &,void>((uint64_t)&v14, &v13, &v12, &v11, a4, &cf, &v22, &v21, &v20, &v19, &v18, &v17, &v16, (uint64_t)object, (uint64_t)__p, v9);
}

void sub_1BACCFD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,void *a34)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BACCFE0C()
{
}

void make_stream_list(void **a1, HALS_IODevice *this, char a3)
{
  char v3 = a3;
  unint64_t v4 = a1;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unsigned int NumberStreams = HALS_IODevice::GetNumberStreams(this, a3);
  uint64_t v42 = NumberStreams;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::reserve(v4, NumberStreams);
  if (NumberStreams)
  {
    uint64_t v6 = 0;
    uint64_t v37 = v4;
    char v36 = v3;
    do
    {
      uint64_t v7 = (unsigned int *)HALS_IODevice::CopyStreamByIndex(this, v3, v6);
      int v8 = (*(uint64_t (**)(unsigned int *))(*(void *)v7 + 200))(v7);
      unsigned int v9 = v7[21];
      uint64_t v10 = v7[4];
      uint64_t v53 = 0x676C6F6270667420;
      int v54 = 0;
      int v55 = 0;
      (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, int *, uint64_t *, void, void, void))(*(void *)v7 + 112))(v7, v10, &v53, 40, &v55, &v44, 0, 0, 0);
      int v11 = v45;
      int v12 = v46;
      int v13 = v47;
      int v14 = v48;
      int v16 = v49;
      int v15 = v50;
      int v17 = v51;
      if (v45 == 1819304813 && (v46 & 0x40) == 0)
      {
        int v16 = 4 * v50;
        int v17 = 32;
        int v12 = 9;
        int v14 = 1;
        int v13 = 4 * v50;
      }
      uint64_t v18 = v44;
      int v19 = v52;
      int v21 = v4[1];
      unint64_t v20 = (unint64_t)v4[2];
      if ((unint64_t)v21 >= v20)
      {
        int v38 = v52;
        int v39 = v50;
        uint64_t v41 = v6;
        int v23 = v45;
        int v40 = v17;
        __int16 v24 = *v4;
        uint64_t v25 = 0x6DB6DB6DB6DB6DB7 * (((char *)v21 - (unsigned char *)*v4) >> 3);
        unint64_t v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) > 0x492492492492492) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v27 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v20 - (void)v24) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x249249249249249) {
          unint64_t v28 = 0x492492492492492;
        }
        else {
          unint64_t v28 = v26;
        }
        __int16 v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v28);
        uint64_t v31 = &v29[56 * v25];
        *(_DWORD *)uint64_t v31 = v8;
        *((_DWORD *)v31 + 1) = v9;
        *((_DWORD *)v31 + 2) = 0;
        *((void *)v31 + 2) = v18;
        *((_DWORD *)v31 + 6) = v23;
        *((_DWORD *)v31 + 7) = v12;
        *((_DWORD *)v31 + 8) = v13;
        *((_DWORD *)v31 + 9) = v14;
        *((_DWORD *)v31 + 10) = v16;
        *((_DWORD *)v31 + 11) = v39;
        *((_DWORD *)v31 + 12) = v40;
        *((_DWORD *)v31 + 13) = v38;
        __int16 v32 = v31;
        if (v21 == v24)
        {
          unint64_t v4 = v37;
          uint64_t v6 = v41;
        }
        else
        {
          unint64_t v4 = v37;
          uint64_t v6 = v41;
          do
          {
            long long v33 = *(_OWORD *)(v21 - 14);
            long long v34 = *(_OWORD *)(v21 - 10);
            long long v35 = *(_OWORD *)(v21 - 6);
            *((void *)v32 - 1) = *((void *)v21 - 1);
            *(_OWORD *)(v32 - 24) = v35;
            *(_OWORD *)(v32 - 40) = v34;
            *(_OWORD *)(v32 - 56) = v33;
            v32 -= 56;
            v21 -= 14;
          }
          while (v21 != v24);
          int v21 = v24;
        }
        double v22 = v31 + 56;
        *unint64_t v4 = v32;
        v4[1] = v31 + 56;
        v4[2] = &v29[56 * v30];
        char v3 = v36;
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *int v21 = v8;
        v21[1] = v9;
        uint64_t v21[2] = 0;
        *((void *)v21 + 2) = v18;
        v21[6] = v11;
        v21[7] = v12;
        v21[8] = v13;
        v21[9] = v14;
        unsigned char v21[10] = v16;
        v21[11] = v15;
        double v22 = v21 + 14;
        v21[12] = v17;
        v21[13] = v19;
      }
      v4[1] = v22;
      ++v6;
    }
    while (v6 != v42);
  }
}

void sub_1BACD00F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v14 = *(void **)v12;
  if (*(void *)v12)
  {
    *(void *)(v12 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void HALS_UCPlugIn::CreateEngine(HALS_UCPlugIn *this, HALS_PlugIn *a2, HALS_IODevice *a3)
{
}

void sub_1BACD0190(_Unwind_Exception *a1)
{
  MEMORY[0x1C1859840](v1, 0x10E1C40E0DFE791);
  _Unwind_Resume(a1);
}

uint64_t HALS_UCPlugInBase::ObjectWasDestroyed(HALS_UCPlugInBase *this)
{
  return 0;
}

uint64_t HALS_UCPlugIn::DestroyDevice(HALS_UCPlugIn *this)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
  }
  return result;
}

uint64_t HALS_UCPlugIn::CreateDevice(HALS_UCPlugIn *this, const __CFDictionary *a2, const AudioServerPlugInClientInfo *a3, unsigned int *a4)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    return (*(uint64_t (**)(uint64_t, const __CFDictionary *, const AudioServerPlugInClientInfo *, unsigned int *))(*(void *)result + 40))(result, a2, a3, a4);
  }
  return result;
}

uint64_t HALS_UCPlugIn::AbortDeviceConfigChange(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)result + 80))(result, a2, a3, a4);
  }
  return result;
}

uint64_t HALS_UCPlugIn::PerformDeviceConfigChange(HALS_UCPlugIn *this, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v5 + 72))(v5, a2, a3, a4);
  }
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *))*((void *)this + 52);
  if (v7) {
    return v7(a2, a3, a4);
  }
  else {
    return 0;
  }
}

uint64_t HALS_UCPlugIn::RemoveDeviceClient(HALS_UCPlugIn *this, uint64_t a2, const AudioServerPlugInClientInfo *a3)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, const AudioServerPlugInClientInfo *))(*(void *)result + 64))(result, a2, a3);
  }
  return result;
}

uint64_t HALS_UCPlugIn::AddDeviceClient(HALS_UCPlugIn *this, uint64_t a2, const AudioServerPlugInClientInfo *a3)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, const AudioServerPlugInClientInfo *))(*(void *)result + 56))(result, a2, a3);
  }
  return result;
}

void HALS_UCPlugIn::Teardown(HALS_UCPlugIn *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (uint64_t (*)(void))*((void *)this + 51);
  if (v1)
  {
    int v2 = v1();
    if (v2)
    {
      int v3 = v2;
      v4[0] = HIBYTE(v2);
      v4[1] = BYTE2(v2);
      v4[2] = BYTE1(v2);
      v4[3] = v2;
      v4[4] = 0;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        uint64_t v6 = "HALS_UCPlugIn.cpp";
        __int16 v7 = 1024;
        int v8 = 344;
        __int16 v9 = 1024;
        int v10 = v3;
        __int16 v11 = 2080;
        uint64_t v12 = v4;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_UCPlugIn::Teardown: failed, Error: %d (%s)", buf, 0x22u);
      }
    }
  }
}

uint64_t HALS_UCPlugIn::Initialize(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = *(uint64_t (**)(uint64_t))(a1 + 400);
  if (v2)
  {
    return v2(a2);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315394;
      uint64_t v5 = "HALS_UCPlugIn.cpp";
      __int16 v6 = 1024;
      int v7 = 333;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_UCPlugIn::Initialize: there isn't an initialize entry", (uint8_t *)&v4, 0x12u);
    }
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::Initialize(HALS_UCPlugIn *this, const AudioServerPlugInHostInterface *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 3);
  if (v3 || (uint64_t v3 = *((void *)this + 6)) != 0)
  {
    int v4 = *(uint64_t (**)(void))(*(void *)v3 + 32);
    return v4();
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      int v7 = "HALS_UCPlugIn.cpp";
      __int16 v8 = 1024;
      int v9 = 318;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_UCPlugIn::Initialize: there isn't an interface to intialize", (uint8_t *)&v6, 0x12u);
    }
    return 1852797029;
  }
}

uint64_t HALS_UCPlugIn::GetBundleLocation(HALS_UCPlugIn *this)
{
  return *((void *)this + 8);
}

uint64_t HALS_UCPlugIn::GetBundleID(HALS_UCPlugIn *this)
{
  return *((void *)this + 7);
}

BOOL HALS_UCPlugIn::SupportsIsolatedIO(HALS_UCPlugIn *this)
{
  return *((void *)this + 4) != 0;
}

uint64_t HALS_UCPlugIn::IsOldStyle(HALS_UCPlugIn *this)
{
  return *((unsigned __int8 *)this + 8);
}

BOOL HALS_UCPlugIn::IsNub(HALS_UCPlugIn *this)
{
  return !*((unsigned char *)this + 8) && *((void *)this + 6) != 0;
}

void HALS_UCPlugIn::~HALS_UCPlugIn(HALS_UCPlugIn *this)
{
  HALS_UCPlugIn::~HALS_UCPlugIn(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  uint64_t v10;

  *(void *)this = &unk_1F146B280;
  int v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  int v4 = *((void *)this + 5);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  int v6 = *((void *)this + 6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_UCPlugIn *)((char *)this + 80));
  int v7 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  __int16 v8 = (const void *)*((void *)this + 8);
  if (v8) {
    CFRelease(v8);
  }
  int v9 = (const void *)*((void *)this + 7);
  if (v9) {
    CFRelease(v9);
  }
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
}

uint64_t HALS_IOA2Stream::GetIOBufferByteSize(HALS_IOA2Stream *this)
{
  return *((unsigned int *)this + 34);
}

uint64_t HALS_IOA2Stream::GetIOBuffer(HALS_IOA2Stream *this)
{
  return *((void *)this + 16);
}

void HALS_IOA2Stream::SetPropertyData(HALS_IOA2Stream *this, uint64_t a2, const AudioObjectPropertyAddress *a3, unsigned int a4, const void *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_IOA2Stream *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *, const void *, uint64_t, const void *))(*(void *)this + 96))(this, a2, a3, a8, a5, a6, a7) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  int v15 = (HALS_Device *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  if (!v15)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_IOA2Stream.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 447;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Stream::SetPropertyData: owning device is missing", buf, 0x12u);
    }
    long long v34 = __cxa_allocate_exception(0x10uLL);
    int v35 = 560947818;
LABEL_35:
    *(void *)long long v34 = off_1F148A5D8;
    v34[2] = v35;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if (!HALB_Info::PropertyRequiresHogMode((HALB_Info *)a3->mSelector, v14)) {
    goto LABEL_6;
  }
  if (!HALS_Device::IsHogModeOwnerOrFree(v15, a8))
  {
    long long v34 = __cxa_allocate_exception(0x10uLL);
    int v35 = 560492391;
    goto LABEL_35;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
LABEL_6:
  if (mSelector == 1885762592)
  {
    if (a4 <= 0x27)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_44;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_IOA2Stream.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 519;
      char v36 = MEMORY[0x1E4F14500];
      uint64_t v37 = "%25s:%-5d  HALS_IOA2Stream::_SetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormat";
LABEL_43:
      _os_log_impl(&dword_1BAA78000, v36, OS_LOG_TYPE_ERROR, v37, buf, 0x12u);
LABEL_44:
      int v38 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v38 = off_1F148A5D8;
      void v38[2] = 561211770;
    }
    *(void *)buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x5002000000;
    int v51 = __Block_byref_object_copy__6492;
    int v52 = __Block_byref_object_dispose__6493;
    uint64_t v45 = 0;
    int v46 = &v45;
    uint64_t v47 = 0x2000000000;
    int v48 = 0;
    v43[0] = MEMORY[0x1E4F143A8];
    v43[1] = 0x40000000;
    v43[2] = ___ZN15HALS_IOA2Stream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_38;
    v43[3] = &unk_1E6232630;
    v43[6] = this;
    v43[7] = a5;
    v43[4] = buf;
    v43[5] = &v45;
    unint64_t v28 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v28, (uint64_t)v43);
    if (*((_DWORD *)v46 + 6))
    {
      uint64_t v41 = __cxa_allocate_exception(0x10uLL);
      int v42 = *((_DWORD *)v46 + 6);
      *(void *)uint64_t v41 = off_1F148A5D8;
      v41[2] = v42;
    }
    if (a8
      && (*(_DWORD *)(*(void *)&buf[8] + 48) != 1819304813 || (*(_DWORD *)(*(void *)&buf[8] + 52) & 0x40) != 0))
    {
      uint64_t v29 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
      uint64_t v31 = (HALS_ObjectMap *)v29;
      if (v29) {
        HALS_Client::SetNonMixableFormat(a8, *(_DWORD *)(v29 + 16));
      }
      HALS_ObjectMap::ReleaseObject(v31, v30);
    }
LABEL_28:
    _Block_object_dispose(&v45, 8);
    goto LABEL_29;
  }
  if (mSelector == 1936092532)
  {
    if (a4 <= 0x27)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_44;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_IOA2Stream.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 480;
      char v36 = MEMORY[0x1E4F14500];
      uint64_t v37 = "%25s:%-5d  HALS_IOA2Stream::_SetPropertyData: bad property data size for kAudioStreamPropertyVirtualFormat";
      goto LABEL_43;
    }
    *(void *)buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x5002000000;
    int v51 = __Block_byref_object_copy__6492;
    int v52 = __Block_byref_object_dispose__6493;
    uint64_t v45 = 0;
    int v46 = &v45;
    uint64_t v47 = 0x2000000000;
    int v48 = 0;
    v44[0] = MEMORY[0x1E4F143A8];
    v44[1] = 0x40000000;
    v44[2] = ___ZN15HALS_IOA2Stream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_36;
    v44[3] = &unk_1E6232608;
    v44[6] = this;
    v44[7] = a5;
    v44[4] = buf;
    v44[5] = &v45;
    __int16 v24 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v24, (uint64_t)v44);
    if (*((_DWORD *)v46 + 6))
    {
      int v39 = __cxa_allocate_exception(0x10uLL);
      int v40 = *((_DWORD *)v46 + 6);
      *(void *)int v39 = off_1F148A5D8;
      v39[2] = v40;
    }
    if (a8
      && (*(_DWORD *)(*(void *)&buf[8] + 48) != 1819304813 || (*(_DWORD *)(*(void *)&buf[8] + 52) & 0x40) != 0))
    {
      uint64_t v25 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
      unint64_t v27 = (HALS_ObjectMap *)v25;
      if (v25) {
        HALS_Client::SetNonMixableFormat(a8, *(_DWORD *)(v25 + 16));
      }
      HALS_ObjectMap::ReleaseObject(v27, v26);
    }
    goto LABEL_28;
  }
  if (mSelector != 1935762292) {
    HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v17, v18, v19, v20, (uint64_t)a8);
  }
  if (a4 <= 3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_44;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "HALS_IOA2Stream.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 455;
    char v36 = MEMORY[0x1E4F14500];
    uint64_t v37 = "%25s:%-5d  HALS_IOA2Stream::_SetPropertyData: bad property data size for kAudioStreamPropertyIsActive";
    goto LABEL_43;
  }
  *(void *)buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&buf[16] = 0x2000000000;
  LODWORD(v51) = 0;
  v49[0] = MEMORY[0x1E4F143A8];
  v49[1] = 0x40000000;
  v49[2] = ___ZN15HALS_IOA2Stream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
  v49[3] = &unk_1E62325E0;
  v49[5] = this;
  v49[6] = a5;
  v49[4] = buf;
  int v21 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v21, (uint64_t)v49);
  if (*(_DWORD *)(*(void *)&buf[8] + 24))
  {
    double v22 = __cxa_allocate_exception(0x10uLL);
    int v23 = *(_DWORD *)(*(void *)&buf[8] + 24);
    *(void *)double v22 = off_1F148A5D8;
    v22[2] = v23;
  }
LABEL_29:
  _Block_object_dispose(buf, 8);
  HALS_ObjectMap::ReleaseObject(v15, v32);
}

void sub_1BACD0EF8(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  HALS_ObjectMap::ReleaseObject(v27, a2);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v28 - 176), 8);
  HALS_ObjectMap::ReleaseObject(v26, v30);
  _Unwind_Resume(a1);
}

void ___ZN15HALS_IOA2Stream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v2 + 48));
  uint64_t v5 = (HALS_ObjectMap *)v3;
  if (v3 && !*(_DWORD *)(v2 + 56)) {
    HALS_IOA2UCDevice::SetStreamActive((HALS_IOA2UCDevice *)(v3 + 1808), *(_DWORD *)(v2 + 60), **(_DWORD **)(a1 + 48) != 0);
  }
  *(unsigned char *)(v2 + 64) = **(_DWORD **)(a1 + 48) != 0;
  HALS_ObjectMap::ReleaseObject(v5, v4);
}

void sub_1BACD1008(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v16 = (int)a2;
  HALS_ObjectMap::ReleaseObject(v15, a2);
  uint64_t v18 = __cxa_begin_catch(a1);
  if (v16 == 2) {
    int v19 = v18[2];
  }
  else {
    int v19 = 2003329396;
  }
  *(_DWORD *)(*(void *)(*(void *)(v14 + 32) + 8) + 24) = v19;
  __cxa_end_catch();
}

__n128 __Block_byref_object_copy__6492(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  long long v3 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v3;
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void ___ZN15HALS_IOA2Stream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_36(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[6];
  HALS_IOA2Stream::GetCurrentHWFormat((HALS_IOA2Stream *)v2, &v10);
  uint64_t v4 = a1[7];
  uint64_t v5 = (const AudioStreamBasicDescription *)(*(void *)(a1[4] + 8) + 40);
  long long v6 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)&v11.mSampleRate = *(_OWORD *)v4;
  *(_OWORD *)&v11.mBytesPerPacket = v6;
  *(void *)&v11.mBitsPerChannel = *(void *)(v4 + 32);
  if (v11.mFormatID == 1819304813)
  {
    v11.mBitsPerChannel = 0;
    *(void *)&v11.mFramesPerPacket = 0;
    *(void *)&v11.mFormatFlags = 0;
  }
  HALB_FormatList::BestMatchForPhysicalFormat((HALB_FormatList *)(v2 + 18), &v11, v5, v3, v10.mSampleRate);
  uint64_t v7 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)v2[12]);
  int v9 = (HALS_ObjectMap *)v7;
  if (v7) {
    HALS_IOA2UCDevice::SetStreamCurrentFormat((HALS_IOA2UCDevice *)(v7 + 1808), v2[15], (const AudioStreamBasicDescription *)(*(void *)(a1[4] + 8) + 40));
  }
  HALS_ObjectMap::ReleaseObject(v9, v8);
}

void sub_1BACD1158(void *a1, HALS_Object *a2)
{
  int v4 = (int)a2;
  HALS_ObjectMap::ReleaseObject(v3, a2);
  long long v6 = __cxa_begin_catch(a1);
  if (v4 == 2) {
    *(_DWORD *)(*(void *)(*(void *)(v2 + 40) + 8) + 24) = v6[2];
  }
  else {
    *(_DWORD *)(*(void *)(*(void *)(v2 + 40) + 8) + 24) = 2003329396;
  }
  __cxa_end_catch();
  JUMPOUT(0x1BACD1144);
}

void ___ZN15HALS_IOA2Stream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_38(uint64_t a1)
{
  uint64_t v2 = *(unsigned int **)(a1 + 48);
  HALS_IOA2Stream::GetCurrentHWFormat((HALS_IOA2Stream *)v2, &v7);
  HALB_FormatList::BestMatchForPhysicalFormat((HALB_FormatList *)(v2 + 18), *(const AudioStreamBasicDescription **)(a1 + 56), (const AudioStreamBasicDescription *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v3, v7.mSampleRate);
  uint64_t v4 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)v2[12]);
  long long v6 = (HALS_ObjectMap *)v4;
  if (v4) {
    HALS_IOA2UCDevice::SetStreamCurrentFormat((HALS_IOA2UCDevice *)(v4 + 1808), v2[15], (const AudioStreamBasicDescription *)(*(void *)(*(void *)(a1 + 32) + 8) + 40));
  }
  HALS_ObjectMap::ReleaseObject(v6, v5);
}

void sub_1BACD124C(void *a1, HALS_Object *a2)
{
  int v4 = (int)a2;
  HALS_ObjectMap::ReleaseObject(v3, a2);
  long long v6 = __cxa_begin_catch(a1);
  if (v4 == 2) {
    *(_DWORD *)(*(void *)(*(void *)(v2 + 40) + 8) + 24) = v6[2];
  }
  else {
    *(_DWORD *)(*(void *)(*(void *)(v2 + 40) + 8) + 24) = 2003329396;
  }
  __cxa_end_catch();
  JUMPOUT(0x1BACD1238);
}

void HALS_IOA2Stream::GetCurrentHWFormat(HALS_IOA2Stream *this, AudioStreamBasicDescription *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  long long v6 = (HALS_ObjectMap *)v4;
  if (v4)
  {
    CFArrayRef v7 = HALS_IOA2UCDevice::CopyStreamDictionaryByID((const __CFDictionary **)(v4 + 1808), *((_DWORD *)this + 15));
    CFArrayRef v15 = v7;
    __int16 v16 = 1;
    if (!v7)
    {
LABEL_16:
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v15);
      goto LABEL_17;
    }
    uint64_t v14 = 0;
    if (CACFDictionary::GetDictionary((uint64_t)v7, @"current format", &v14))
    {
      __int16 v8 = v14;
      unint64_t v17 = 0;
      *(void *)buf = v14;
      *(_WORD *)&uint8_t buf[8] = 0;
      *(_OWORD *)&a2->mSampleRate = 0u;
      *(_OWORD *)&a2->mBytesPerPacket = 0u;
      *(void *)&a2->mBitsPerChannel = 0;
      if (CACFDictionary::GetUInt64((uint64_t)v8, @"sample rate", &v17)
        && (uint64_t v9 = *(void *)buf,
            a2->mSampleRate = (double)v17 * 2.32830644e-10 + (double)HIDWORD(v17),
            CACFDictionary::GetUInt32(v9, @"format ID", &a2->mFormatID))
        && CACFDictionary::GetUInt32(*(uint64_t *)buf, @"format flags", &a2->mFormatFlags)
        && CACFDictionary::GetUInt32(*(uint64_t *)buf, @"bytes per packet", &a2->mBytesPerPacket)
        && CACFDictionary::GetUInt32(*(uint64_t *)buf, @"frames per packet", &a2->mFramesPerPacket)
        && CACFDictionary::GetUInt32(*(uint64_t *)buf, @"bytes per frame", &a2->mBytesPerFrame)
        && CACFDictionary::GetUInt32(*(uint64_t *)buf, @"channels per frame", &a2->mChannelsPerFrame))
      {
        char UInt32 = CACFDictionary::GetUInt32(*(uint64_t *)buf, @"bits per channel", &a2->mBitsPerChannel);
      }
      else
      {
        char UInt32 = 0;
      }
      if (a2->mFormatID == 1819304813) {
        a2->mFormatFlags &= ~0x40u;
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
      if (UInt32) {
        goto LABEL_16;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
LABEL_23:
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = off_1F148A5D8;
        exception[2] = 1852797029;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_IOA2UCDevice.cpp";
      __int16 v19 = 1024;
      int v20 = 655;
      AudioStreamBasicDescription v11 = MEMORY[0x1E4F14500];
      uint64_t v12 = "%25s:%-5d  HALS_IOA2UCDevice::GetStreamInfoByID_CurrentFormat: the current format is not formatted correctly";
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_23;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_IOA2UCDevice.cpp";
      __int16 v19 = 1024;
      int v20 = 653;
      AudioStreamBasicDescription v11 = MEMORY[0x1E4F14500];
      uint64_t v12 = "%25s:%-5d  HALS_IOA2UCDevice::GetStreamInfoByID_CurrentFormat: there is no current format";
    }
    _os_log_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0x12u);
    goto LABEL_23;
  }
LABEL_17:
  HALS_ObjectMap::ReleaseObject(v6, v5);
}

void sub_1BACD15A0(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  HALS_ObjectMap::ReleaseObject(v13, a2);
  _Unwind_Resume(a1);
}

void HALS_IOA2Stream::GetPropertyData(HALS_IOA2Stream *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, unsigned int *a5, char *a6, uint64_t a7, HALS_ObjectMap *a8, HALS_Client *a9)
{
  uint64_t v106 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_IOA2Stream *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a9) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  long long v77 = a5;
  if ((int)a3->mSelector > 1885762668)
  {
    BOOL v19 = mSelector - 1936092479 <= 0x35 && ((1 << (mSelector - 63)) & 0x20400400000001) != 0
       || mSelector == 1936092451;
    unsigned __int16 v20 = 29805;
  }
  else
  {
    BOOL v19 = mSelector - 1885762592 <= 0x1F && ((1 << (mSelector - 32)) & 0x80000009) != 0 || mSelector == 1819569763;
    unsigned __int16 v20 = 29793;
  }
  int v22 = v20 | 0x70660000;
  if (v19 || mSelector == v22)
  {
    uint64_t v24 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
    uint64_t v25 = (HALS_ObjectMap *)v24;
    if (!v24)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string::size_type v91 = 136315394;
        *(void *)&v91[4] = "HALS_IOA2Stream.cpp";
        *(_WORD *)&v91[12] = 1024;
        *(_DWORD *)&v91[14] = 128;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Stream::GetPropertyDataWithNominalSampleRate: owning device is missing", v91, 0x12u);
      }
      size_t v67 = __cxa_allocate_exception(0x10uLL);
      *(void *)size_t v67 = off_1F148A5D8;
      v67[2] = 560947818;
    }
    uint64_t v26 = (*(uint64_t (**)(uint64_t, HALS_Client *))(*(void *)v24 + 696))(v24, a9);
    uint64_t v76 = v27;
    unint64_t v28 = v26;
    if (a9) {
      BOOL v29 = *((unsigned char *)a9 + 258) == 0;
    }
    else {
      BOOL v29 = 1;
    }
    signed int v30 = a3->mSelector;
    if ((int)a3->mSelector <= 1885762668)
    {
      if (v30 > 1885762594)
      {
        switch(v30)
        {
          case 1885762595:
            uint64_t v84 = 0;
            uint64_t v85 = (uint64_t)&v84;
            uint64_t v86 = 0x2000000000;
            long long v87 = 0;
            *(void *)std::string::size_type v91 = MEMORY[0x1E4F143A8];
            *(void *)&v91[8] = 0x40000000;
            *(void *)&v91[16] = ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3_20;
            uint64_t v92 = &unk_1E6232530;
            LODWORD(v96) = a4;
            long long v93 = (HALS_IOA2Stream *)&v84;
            std::string::size_type v94 = this;
            uint64_t v95 = a6;
            long long v56 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(void *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v56, (uint64_t)v91);
            uint64_t v57 = *(void *)(v85 + 24);
            *long long v77 = 40 * v57;
            if ((_BYTE)v76 && v57)
            {
              do
              {
                *(void *)a6 = v28;
                a6 += 40;
                --v57;
              }
              while (v57);
            }
            break;
          case 1885762623:
            if (a4 <= 0x27)
            {
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
                goto LABEL_135;
              }
              *(_DWORD *)std::string::size_type v91 = 136315394;
              *(void *)&v91[4] = "HALS_IOA2Stream.cpp";
              *(_WORD *)&v91[12] = 1024;
              *(_DWORD *)&v91[14] = 278;
              unint64_t v69 = MEMORY[0x1E4F14500];
              uint64_t v70 = "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormatSupported";
              goto LABEL_134;
            }
            *long long v77 = 40;
            uint64_t v84 = 0;
            uint64_t v85 = (uint64_t)&v84;
            uint64_t v86 = 0x2000000000;
            LOBYTE(v87) = 0;
            *(void *)std::string::size_type v91 = MEMORY[0x1E4F143A8];
            *(void *)&v91[8] = 0x40000000;
            *(void *)&v91[16] = ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_22;
            uint64_t v92 = &unk_1E6232558;
            uint64_t v95 = (char *)v26;
            uint64_t v96 = (uint64_t)v27;
            long long v93 = (HALS_IOA2Stream *)&v84;
            std::string::size_type v94 = this;
            long long v97 = (HALS_Object *)a6;
            int v51 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(void *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v51, (uint64_t)v91);
            if (!*(unsigned char *)(v85 + 24))
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_IOA2Stream.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 295;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: kAudioStreamPropertyPhysicalFormatSupported: the format is not supported", buf, 0x12u);
              }
              int v52 = __cxa_allocate_exception(0x10uLL);
              *(void *)int v52 = off_1F148A5D8;
              v52[2] = 560226676;
            }
            break;
          case 1885762657:
            uint64_t v84 = 0;
            uint64_t v85 = (uint64_t)&v84;
            uint64_t v86 = 0x2000000000;
            long long v87 = 0;
            *(void *)std::string::size_type v91 = MEMORY[0x1E4F143A8];
            *(void *)&v91[8] = 0x40000000;
            *(void *)&v91[16] = ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_18;
            uint64_t v92 = &unk_1E6232508;
            LODWORD(v96) = a4;
            long long v93 = (HALS_IOA2Stream *)&v84;
            std::string::size_type v94 = this;
            uint64_t v95 = a6;
            long long v34 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(void *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v34, (uint64_t)v91);
            uint64_t v35 = *(void *)(v85 + 24);
            *long long v77 = 56 * v35;
            if ((_BYTE)v76 && v35)
            {
              int64x2_t v36 = vdupq_n_s64(v28);
              do
              {
                *(void *)a6 = v28;
                *(int64x2_t *)(a6 + 40) = v36;
                a6 += 56;
                --v35;
              }
              while (v35);
            }
            break;
          default:
            goto LABEL_94;
        }
        goto LABEL_91;
      }
      if (v30 == 1819569763)
      {
        if (a4 <= 3)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_135;
          }
          *(_DWORD *)std::string::size_type v91 = 136315394;
          *(void *)&v91[4] = "HALS_IOA2Stream.cpp";
          *(_WORD *)&v91[12] = 1024;
          *(_DWORD *)&v91[14] = 139;
          unint64_t v69 = MEMORY[0x1E4F14500];
          uint64_t v70 = "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: bad property data size for kAudioStreamPropertyLatency";
          goto LABEL_134;
        }
        *(void *)std::string::size_type v91 = MEMORY[0x1E4F143A8];
        *(void *)&v91[8] = 1174405120;
        *(void *)&v91[16] = ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
        uint64_t v92 = &__block_descriptor_tmp_5_6510;
        long long v93 = this;
        std::string::size_type v94 = v25;
        HALS_ObjectMap::RetainObject(v25, v27);
        uint64_t v95 = (char *)v28;
        uint64_t v96 = (uint64_t)v76;
        long long v97 = (HALS_Object *)a6;
        int v49 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v49, (uint64_t)v91);
        *long long v77 = 4;
        HALS_ObjectMap::ReleaseObject(v94, v50);
LABEL_93:
        HALS_ObjectMap::ReleaseObject(v25, v38);
        return;
      }
      if (v30 != 1885762592) {
        goto LABEL_94;
      }
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_135;
        }
        *(_DWORD *)std::string::size_type v91 = 136315394;
        *(void *)&v91[4] = "HALS_IOA2Stream.cpp";
        *(_WORD *)&v91[12] = 1024;
        *(_DWORD *)&v91[14] = 250;
        unint64_t v69 = MEMORY[0x1E4F14500];
        uint64_t v70 = "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormat";
        goto LABEL_134;
      }
      *(void *)std::string::size_type v91 = MEMORY[0x1E4F143A8];
      *(void *)&v91[8] = 0x40000000;
      *(void *)&v91[16] = ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_16;
      uint64_t v92 = &__block_descriptor_tmp_17_6522;
      long long v93 = this;
      std::string::size_type v94 = (HALS_ObjectMap *)a6;
      uint64_t v41 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v41, (uint64_t)v91);
    }
    else
    {
      if (v30 <= 1936092512)
      {
        if (v30 != 1885762669)
        {
          if (v30 != 1936092451)
          {
            if (v30 == 1936092479)
            {
              if (a4 > 0x27)
              {
                *long long v77 = 40;
                *(void *)buf = 0;
                *(void *)&uint8_t buf[8] = buf;
                *(void *)&buf[16] = 0x2000000000;
                char v105 = 0;
                *(void *)std::string::size_type v91 = MEMORY[0x1E4F143A8];
                *(void *)&v91[8] = 0x40000000;
                *(void *)&v91[16] = ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_10;
                uint64_t v92 = &unk_1E6232478;
                uint64_t v95 = (char *)v26;
                uint64_t v96 = (uint64_t)v27;
                long long v93 = (HALS_IOA2Stream *)buf;
                std::string::size_type v94 = this;
                long long v97 = (HALS_Object *)a6;
                uint64_t v31 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(void *)this + 56))(this);
                HALB_CommandGate::ExecuteCommand(v31, (uint64_t)v91);
                uint64_t v84 = MEMORY[0x1E4F143A8];
                uint64_t v85 = 0x40000000;
                uint64_t v86 = (uint64_t)___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_12;
                long long v87 = &unk_1E62324A0;
                int v88 = buf;
                long long v89 = this;
                uint64_t v90 = a6;
                __int16 v32 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(void *)this + 56))(this);
                HALB_CommandGate::ExecuteCommand(v32, (uint64_t)&v84);
                if (!*(unsigned char *)(*(void *)&buf[8] + 24))
                {
                  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)uint64_t v100 = 136315394;
                    long long v101 = "HALS_IOA2Stream.cpp";
                    __int16 v102 = 1024;
                    int v103 = 207;
                    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: kAudioDevicePropertyStreamFormatSupported: the format is not supported", v100, 0x12u);
                  }
                  double v72 = __cxa_allocate_exception(0x10uLL);
                  *(void *)double v72 = off_1F148A5D8;
                  v72[2] = 560226676;
                }
                long long v33 = (uint64_t *)buf;
                goto LABEL_92;
              }
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
LABEL_135:
                double v71 = __cxa_allocate_exception(0x10uLL);
                *(void *)double v71 = off_1F148A5D8;
                v71[2] = 561211770;
              }
              *(_DWORD *)std::string::size_type v91 = 136315394;
              *(void *)&v91[4] = "HALS_IOA2Stream.cpp";
              *(_WORD *)&v91[12] = 1024;
              *(_DWORD *)&v91[14] = 188;
              unint64_t v69 = MEMORY[0x1E4F14500];
              uint64_t v70 = "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: bad property data size for kAudioDevicePropertyStreamFormatSupported";
LABEL_134:
              _os_log_impl(&dword_1BAA78000, v69, OS_LOG_TYPE_ERROR, v70, v91, 0x12u);
              goto LABEL_135;
            }
LABEL_94:
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string::size_type v91 = 136315394;
              *(void *)&v91[4] = "HALS_IOA2Stream.cpp";
              *(_WORD *)&v91[12] = 1024;
              *(_DWORD *)&v91[14] = 336;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Stream::GetPropertyDataWithNominalSampleRate: Unhandled case.", v91, 0x12u);
            }
            goto LABEL_93;
          }
          uint64_t v84 = 0;
          uint64_t v85 = (uint64_t)&v84;
          uint64_t v86 = 0x2000000000;
          long long v87 = 0;
          *(void *)std::string::size_type v91 = MEMORY[0x1E4F143A8];
          *(void *)&v91[8] = 0x40000000;
          *(void *)&v91[16] = ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3;
          uint64_t v92 = &unk_1E6232450;
          BYTE4(v96) = v29;
          LODWORD(v96) = a4;
          long long v93 = (HALS_IOA2Stream *)&v84;
          std::string::size_type v94 = this;
          uint64_t v95 = a6;
          uint64_t v53 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v53, (uint64_t)v91);
          uint64_t v54 = *(void *)(v85 + 24);
          *long long v77 = 40 * v54;
          if ((_BYTE)v76 && v54)
          {
            do
            {
              *(void *)a6 = v28;
              a6 += 40;
              --v54;
            }
            while (v54);
          }
LABEL_91:
          long long v33 = &v84;
LABEL_92:
          _Block_object_dispose(v33, 8);
          goto LABEL_93;
        }
        if (a4 <= 0x27)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_135;
          }
          *(_DWORD *)std::string::size_type v91 = 136315394;
          *(void *)&v91[4] = "HALS_IOA2Stream.cpp";
          *(_WORD *)&v91[12] = 1024;
          *(_DWORD *)&v91[14] = 302;
          unint64_t v69 = MEMORY[0x1E4F14500];
          uint64_t v70 = "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormatMatch";
          goto LABEL_134;
        }
        *long long v77 = 40;
        *(void *)std::string::size_type v91 = MEMORY[0x1E4F143A8];
        *(void *)&v91[8] = 0x40000000;
        *(void *)&v91[16] = ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_24;
        uint64_t v92 = &__block_descriptor_tmp_25_6529;
        int v98 = a7;
        long long v93 = this;
        std::string::size_type v94 = a8;
        uint64_t v95 = a6;
        uint64_t v96 = v26;
        long long v97 = v27;
        int v55 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(void *)this + 56))(this);
        goto LABEL_86;
      }
      if (v30 == 1936092513)
      {
        uint64_t v84 = 0;
        uint64_t v85 = (uint64_t)&v84;
        uint64_t v86 = 0x2000000000;
        long long v87 = 0;
        *(void *)std::string::size_type v91 = MEMORY[0x1E4F143A8];
        *(void *)&v91[8] = 0x40000000;
        *(void *)&v91[16] = ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2;
        uint64_t v92 = &unk_1E6232428;
        BYTE4(v96) = v29;
        LODWORD(v96) = a4;
        long long v93 = (HALS_IOA2Stream *)&v84;
        std::string::size_type v94 = this;
        uint64_t v95 = a6;
        std::string::size_type v58 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v58, (uint64_t)v91);
        uint64_t v59 = *(void *)(v85 + 24);
        *long long v77 = 56 * v59;
        if ((_BYTE)v76 && v59)
        {
          int64x2_t v60 = vdupq_n_s64(v28);
          do
          {
            *(void *)a6 = v28;
            *(int64x2_t *)(a6 + 40) = v60;
            a6 += 56;
            --v59;
          }
          while (v59);
        }
        goto LABEL_91;
      }
      if (v30 == 1936092525)
      {
        if (a4 <= 0x27)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_135;
          }
          *(_DWORD *)std::string::size_type v91 = 136315394;
          *(void *)&v91[4] = "HALS_IOA2Stream.cpp";
          *(_WORD *)&v91[12] = 1024;
          *(_DWORD *)&v91[14] = 214;
          unint64_t v69 = MEMORY[0x1E4F14500];
          uint64_t v70 = "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: bad property data size for kAudioDevicePropertyStreamFormatMatch";
          goto LABEL_134;
        }
        *long long v77 = 40;
        *(void *)std::string::size_type v91 = MEMORY[0x1E4F143A8];
        *(void *)&v91[8] = 0x40000000;
        *(void *)&v91[16] = ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_14;
        uint64_t v92 = &__block_descriptor_tmp_15_6520;
        BOOL v99 = v29;
        int v98 = a7;
        long long v93 = this;
        std::string::size_type v94 = a8;
        uint64_t v95 = a6;
        uint64_t v96 = v26;
        long long v97 = v27;
        int v55 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(void *)this + 56))(this);
LABEL_86:
        HALB_CommandGate::ExecuteCommand(v55, (uint64_t)v91);
        goto LABEL_93;
      }
      if (v30 != 1936092532) {
        goto LABEL_94;
      }
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_135;
        }
        *(_DWORD *)std::string::size_type v91 = 136315394;
        *(void *)&v91[4] = "HALS_IOA2Stream.cpp";
        *(_WORD *)&v91[12] = 1024;
        *(_DWORD *)&v91[14] = 158;
        unint64_t v69 = MEMORY[0x1E4F14500];
        uint64_t v70 = "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: bad property data size for kAudioStreamPropertyVirtualFormat";
        goto LABEL_134;
      }
      *(void *)std::string::size_type v91 = MEMORY[0x1E4F143A8];
      *(void *)&v91[8] = 0x40000000;
      *(void *)&v91[16] = ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_6;
      uint64_t v92 = &__block_descriptor_tmp_7_6512;
      long long v93 = this;
      std::string::size_type v94 = (HALS_ObjectMap *)a6;
      uint64_t v37 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v37, (uint64_t)v91);
      if (*((_DWORD *)a6 + 2) == 1819304813 && (a6[12] & 0x40) == 0)
      {
        if (v29) {
          int v39 = 9;
        }
        else {
          int v39 = 11;
        }
        int v40 = 4 * *((_DWORD *)a6 + 7);
        *((_DWORD *)a6 + 3) = v39;
        *((_DWORD *)a6 + 4) = v40;
        *((_DWORD *)a6 + 5) = 1;
        *((_DWORD *)a6 + 6) = v40;
        *((_DWORD *)a6 + 8) = 32;
      }
    }
    if ((_BYTE)v76) {
      *(void *)a6 = v28;
    }
    *long long v77 = 40;
    goto LABEL_93;
  }
  int v42 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  uint64_t v45 = v42;
  if (!v42)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string::size_type v91 = 136315394;
      *(void *)&v91[4] = "HALS_IOA2Stream.cpp";
      *(_WORD *)&v91[12] = 1024;
      *(_DWORD *)&v91[14] = 375;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: owning device is missing", v91, 0x12u);
    }
    int v68 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v68 = off_1F148A5D8;
    v68[2] = 560947818;
  }
  AudioObjectPropertySelector v46 = a3->mSelector;
  if ((int)a3->mSelector <= 1935960433)
  {
    if (v46 != 1935762292)
    {
      if (v46 != 1935894638) {
        goto LABEL_110;
      }
      if (a4 <= 3)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_150;
        }
        *(_DWORD *)std::string::size_type v91 = 136315394;
        *(void *)&v91[4] = "HALS_IOA2Stream.cpp";
        *(_WORD *)&v91[12] = 1024;
        *(_DWORD *)&v91[14] = 410;
        std::string::size_type v73 = MEMORY[0x1E4F14500];
        uint64_t v74 = "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: bad property data size for kAudioStreamPropertyStartingChannel";
        goto LABEL_149;
      }
      if (*((_DWORD *)this + 14) != 1)
      {
        v78[0] = MEMORY[0x1E4F143A8];
        v78[1] = 1174405120;
        v78[2] = ___ZNK15HALS_IOA2Stream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_31;
        v78[3] = &__block_descriptor_tmp_34_6506;
        v78[4] = this;
        v78[5] = a6;
        std::string::size_type v79 = v42;
        HALS_ObjectMap::RetainObject(v42, v43);
        long long v64 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v64, (uint64_t)v78);
        HALS_ObjectMap::ReleaseObject(v79, v65);
        goto LABEL_109;
      }
      int NeighborStartingChannel = HALS_Device::GetNeighborStartingChannel(this, v42, v44);
      goto LABEL_105;
    }
    if (a4 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_150;
      }
      *(_DWORD *)std::string::size_type v91 = 136315394;
      *(void *)&v91[4] = "HALS_IOA2Stream.cpp";
      *(_WORD *)&v91[12] = 1024;
      *(_DWORD *)&v91[14] = 383;
      std::string::size_type v73 = MEMORY[0x1E4F14500];
      uint64_t v74 = "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: bad property data size for kAudioStreamPropertyIsActive";
LABEL_149:
      _os_log_impl(&dword_1BAA78000, v73, OS_LOG_TYPE_ERROR, v74, v91, 0x12u);
LABEL_150:
      long long v75 = __cxa_allocate_exception(0x10uLL);
      *(void *)long long v75 = off_1F148A5D8;
      v75[2] = 561211770;
    }
    uint64_t v62 = v83;
    v83[0] = MEMORY[0x1E4F143A8];
    v83[1] = 0x40000000;
    v83[2] = ___ZNK15HALS_IOA2Stream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
    v83[3] = &__block_descriptor_tmp_26_6500;
    v83[4] = this;
    v83[5] = a6;
    uint64_t v63 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(void *)this + 56))(this);
LABEL_108:
    HALB_CommandGate::ExecuteCommand(v63, (uint64_t)v62);
    goto LABEL_109;
  }
  if (v46 == 1935960434)
  {
    if (a4 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_150;
      }
      *(_DWORD *)std::string::size_type v91 = 136315394;
      *(void *)&v91[4] = "HALS_IOA2Stream.cpp";
      *(_WORD *)&v91[12] = 1024;
      *(_DWORD *)&v91[14] = 392;
      std::string::size_type v73 = MEMORY[0x1E4F14500];
      uint64_t v74 = "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: bad property data size for kAudioStreamPropertyDirection";
      goto LABEL_149;
    }
    uint64_t v62 = v82;
    v82[0] = MEMORY[0x1E4F143A8];
    v82[1] = 0x40000000;
    v82[2] = ___ZNK15HALS_IOA2Stream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_27;
    v82[3] = &__block_descriptor_tmp_28_6502;
    v82[4] = this;
    v82[5] = a6;
    uint64_t v63 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(void *)this + 56))(this);
    goto LABEL_108;
  }
  if (v46 == 1952542835)
  {
    if (a4 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_150;
      }
      *(_DWORD *)std::string::size_type v91 = 136315394;
      *(void *)&v91[4] = "HALS_IOA2Stream.cpp";
      *(_WORD *)&v91[12] = 1024;
      *(_DWORD *)&v91[14] = 430;
      std::string::size_type v73 = MEMORY[0x1E4F14500];
      uint64_t v74 = "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: bad property data size for kAudioStreamPropertyIsReferenceStream";
      goto LABEL_149;
    }
    int NeighborStartingChannel = *((_DWORD *)this + 14) == 1;
LABEL_105:
    *(_DWORD *)a6 = NeighborStartingChannel;
LABEL_109:
    *long long v77 = 4;
    goto LABEL_111;
  }
  if (v46 != 1952805485)
  {
LABEL_110:
    HALS_Stream::GetPropertyData(this, a2, a3, a4, v77, a6, a7, a8, a9);
    goto LABEL_111;
  }
  if (a4 <= 3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_150;
    }
    *(_DWORD *)std::string::size_type v91 = 136315394;
    *(void *)&v91[4] = "HALS_IOA2Stream.cpp";
    *(_WORD *)&v91[12] = 1024;
    *(_DWORD *)&v91[14] = 401;
    std::string::size_type v73 = MEMORY[0x1E4F14500];
    uint64_t v74 = "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: bad property data size for kAudioStreamPropertyTerminalType";
    goto LABEL_149;
  }
  v80[0] = MEMORY[0x1E4F143A8];
  v80[1] = 1174405120;
  v80[2] = ___ZNK15HALS_IOA2Stream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_29;
  v80[3] = &__block_descriptor_tmp_30_6504;
  v80[4] = this;
  v80[5] = a6;
  long long v81 = v42;
  HALS_ObjectMap::RetainObject(v42, v43);
  uint64_t v47 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v47, (uint64_t)v80);
  *long long v77 = 4;
  HALS_ObjectMap::ReleaseObject(v81, v48);
LABEL_111:
  HALS_ObjectMap::ReleaseObject(v45, v43);
}

void sub_1BACD2D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, HALS_ObjectMap *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,HALS_ObjectMap *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,HALS_ObjectMap *a50)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t ___ZNK15HALS_IOA2Stream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(unsigned __int8 *)(*(void *)(result + 32) + 64);
  return result;
}

uint64_t ___ZNK15HALS_IOA2Stream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_27(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(unsigned __int8 *)(*(void *)(result + 32) + 52);
  return result;
}

void ___ZNK15HALS_IOA2Stream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_29(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = (const __CFDictionary **)(*(void *)(a1 + 48) + 1808);
  int v4 = *(_DWORD *)(v2 + 60);
  unsigned int v9 = 0;
  CFArrayRef v5 = HALS_IOA2UCDevice::CopyStreamDictionaryByID(v3, v4);
  CFArrayRef v7 = v5;
  __int16 v8 = 1;
  if (v5)
  {
    CACFDictionary::GetUInt32((uint64_t)v5, @"terminal type", &v9);
    unsigned int v6 = v9;
  }
  else
  {
    unsigned int v6 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v7);
  **(_DWORD **)(a1 + 40) = v6;
}

void sub_1BACD2E80(void *a1)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Stream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_31(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (const __CFDictionary **)(*(void *)(a1 + 48) + 1808);
  int v4 = *(_DWORD *)(v2 + 60);
  unsigned int v10 = 0;
  CFArrayRef v5 = HALS_IOA2UCDevice::CopyStreamDictionaryByID(v3, v4);
  CFArrayRef v8 = v5;
  __int16 v9 = 1;
  if (v5)
  {
    if (!CACFDictionary::GetUInt32((uint64_t)v5, @"starting channel", &v10))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v12 = "HALS_IOA2UCDevice.cpp";
        __int16 v13 = 1024;
        int v14 = 682;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetStreamInfoByID_StartingChannel: there is no starting channel number", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    unsigned int v6 = v10;
  }
  else
  {
    unsigned int v6 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v8);
  **(_DWORD **)(a1 + 40) = v6;
}

void __destroy_helper_block_e8_48c38_ZTS13HALS_ReleaserI15HALS_IOA2DeviceE(uint64_t a1, HALS_Object *a2)
{
}

void __copy_helper_block_e8_48c38_ZTS13HALS_ReleaserI15HALS_IOA2DeviceE(uint64_t a1, HALS_Object *a2)
{
  uint64_t v2 = (HALS_ObjectMap *)*((void *)a2 + 6);
  *(void *)(a1 + 48) = v2;
  HALS_ObjectMap::RetainObject(v2, a2);
}

void ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 56);
  if (*(unsigned char *)(a1 + 56))
  {
    double v3 = *(double *)(a1 + 48);
    unsigned int v2 = (v3
                      / (*(double (**)(void))(**(void **)(a1 + 40) + 264))(*(void *)(a1 + 40))
                      * 0.0);
  }
  **(_DWORD **)(a1 + 64) = v2;
}

void sub_1BACD312C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_6(uint64_t a1)
{
}

void sub_1BACD3170(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2(uint64_t a1)
{
  return HALB_FormatList::GetVirtualFormats(*(void *)(a1 + 40) + 72, *(unsigned char *)(a1 + 60), *(unsigned int *)(a1 + 56) / 0x38uLL, (unint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(AudioStreamRangedDescription **)(a1 + 48));
}

uint64_t ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3(uint64_t a1)
{
  return HALB_FormatList::GetVirtualFormats(*(void *)(a1 + 40) + 72, *(unsigned char *)(a1 + 60), *(unsigned int *)(a1 + 56) / 0x28uLL, (unint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(AudioStreamBasicDescription **)(a1 + 48));
}

void sub_1BACD320C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_10(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(unsigned char *)(a1 + 56))
  {
    double v3 = &unk_1F1464420;
    long long v4 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    HALB_FormatList::GetFormatListWithUpdatedSampleRate(*(HALB_FormatList **)(v2 + 104), *(const HALB_FormatList **)(v2 + 112), (HALB_FormatList *)&v3, *(Float64 *)(a1 + 48));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALB_FormatList::IsVirtualFormatSupported((const AudioStreamBasicDescription *)v4, *((AudioStreamBasicDescription **)&v4 + 1), *(void *)(a1 + 64));
    HALB_FormatList::~HALB_FormatList((HALB_FormatList *)&v3);
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALB_FormatList::IsVirtualFormatSupported(*(const AudioStreamBasicDescription **)(v2 + 80), *(AudioStreamBasicDescription **)(v2 + 88), *(void *)(a1 + 64));
  }
}

void sub_1BACD32D4(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HALB_FormatList::~HALB_FormatList((HALB_FormatList *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BACD32C4);
}

BOOL ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_12(void *a1)
{
  BOOL result = HALB_FormatList::IsVirtualFormatSupported(*(const AudioStreamBasicDescription **)(a1[5] + 80), *(AudioStreamBasicDescription **)(a1[5] + 88), a1[6]);
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = result;
  return result;
}

void ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_14(uint64_t a1)
{
  uint64_t v2 = *(HALB_FormatList ***)(a1 + 32);
  HALS_IOA2Stream::GetCurrentHWFormat((HALS_IOA2Stream *)v2, &v13);
  if (v13.mFormatID == 1819304813 && (v13.mFormatFlags & 0x40) == 0)
  {
    if (*(unsigned char *)(a1 + 76)) {
      AudioFormatFlags v4 = 9;
    }
    else {
      AudioFormatFlags v4 = 11;
    }
    v13.mFormatFlags = v4;
    v13.mBytesPerPacket = 4 * v13.mChannelsPerFrame;
    v13.mFramesPerPacket = 1;
    v13.mBytesPerFrame = 4 * v13.mChannelsPerFrame;
    v13.mBitsPerChannel = 32;
  }
  if (*(_DWORD *)(a1 + 72) != 40 || (uint64_t v5 = *(void *)(a1 + 40)) == 0) {
    uint64_t v5 = *(void *)(a1 + 48);
  }
  long long v6 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)&v12.mSampleRate = *(_OWORD *)v5;
  *(_OWORD *)&v12.mBytesPerPacket = v6;
  *(void *)&v12.mBitsPerChannel = *(void *)(v5 + 32);
  if (*(unsigned char *)(a1 + 64))
  {
    CFArrayRef v8 = &unk_1F1464420;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    HALB_FormatList::GetFormatListWithUpdatedSampleRate(v2[13], v2[14], (HALB_FormatList *)&v8, *(Float64 *)(a1 + 56));
    HALB_FormatList::BestMatchForVirtualFormat((HALB_FormatList *)&v8, &v12, *(const AudioStreamBasicDescription **)(a1 + 48), v7, v13.mSampleRate);
    HALB_FormatList::~HALB_FormatList((HALB_FormatList *)&v8);
  }
  else
  {
    HALB_FormatList::BestMatchForVirtualFormat((HALB_FormatList *)(v2 + 9), &v12, *(const AudioStreamBasicDescription **)(a1 + 48), v3, v13.mSampleRate);
  }
}

void sub_1BACD344C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_16(uint64_t a1)
{
}

void sub_1BACD3494(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

__n128 ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_18(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(v3 + 24) = 0;
  if (v1 >= 0x38)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = v1 / 0x38uLL;
    uint64_t v8 = -1;
    do
    {
      uint64_t v9 = *(void *)(v2 + 104);
      if (++v8 >= (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((*(void *)(v2 + 112) - v9) >> 3))) {
        break;
      }
      uint64_t v10 = v9 + v5;
      v5 += 56;
      uint64_t v11 = v4 + 56 * v6;
      __n128 result = *(__n128 *)v10;
      long long v13 = *(_OWORD *)(v10 + 16);
      long long v14 = *(_OWORD *)(v10 + 32);
      *(void *)(v11 + 48) = *(void *)(v10 + 48);
      *(_OWORD *)(v11 + 16) = v13;
      *(_OWORD *)(v11 + 32) = v14;
      *(__n128 *)uint64_t v11 = result;
      unint64_t v6 = *(void *)(v3 + 24) + 1;
      *(void *)(v3 + 24) = v6;
    }
    while (v6 < v7);
  }
  return result;
}

uint64_t ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3_20(uint64_t a1)
{
  return HALB_FormatList::GetPhysicalFormats(*(void *)(a1 + 40) + 72, *(unsigned int *)(a1 + 56) / 0x38uLL, (unint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(AudioStreamBasicDescription **)(a1 + 48));
}

void sub_1BACD35A0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_22(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v3 = &unk_1F1464420;
    long long v4 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    HALB_FormatList::GetFormatListWithUpdatedSampleRate(*(HALB_FormatList **)(v2 + 104), *(const HALB_FormatList **)(v2 + 112), (HALB_FormatList *)&v3, *(Float64 *)(a1 + 48));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALB_FormatList::IsVirtualFormatSupported(*((const AudioStreamBasicDescription **)&v5 + 1), (AudioStreamBasicDescription *)v6, *(void *)(a1 + 64));
    HALB_FormatList::~HALB_FormatList((HALB_FormatList *)&v3);
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALB_FormatList::IsVirtualFormatSupported(*(const AudioStreamBasicDescription **)(v2 + 104), *(AudioStreamBasicDescription **)(v2 + 112), *(void *)(a1 + 64));
  }
}

void sub_1BACD3668(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HALB_FormatList::~HALB_FormatList((HALB_FormatList *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BACD3658);
}

void ___ZNK15HALS_IOA2Stream36GetPropertyDataWithNominalSampleRateERK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_24(uint64_t a1)
{
  uint64_t v2 = *(HALB_FormatList ***)(a1 + 32);
  HALS_IOA2Stream::GetCurrentHWFormat((HALS_IOA2Stream *)v2, &v12);
  if (*(_DWORD *)(a1 + 72) != 40 || (uint64_t v4 = *(void *)(a1 + 40)) == 0) {
    uint64_t v4 = *(void *)(a1 + 48);
  }
  long long v5 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)&v11.mSampleRate = *(_OWORD *)v4;
  *(_OWORD *)&v11.mBytesPerPacket = v5;
  *(void *)&v11.mBitsPerChannel = *(void *)(v4 + 32);
  if (*(unsigned char *)(a1 + 64))
  {
    unint64_t v7 = &unk_1F1464420;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    HALB_FormatList::GetFormatListWithUpdatedSampleRate(v2[13], v2[14], (HALB_FormatList *)&v7, *(Float64 *)(a1 + 56));
    HALB_FormatList::BestMatchForPhysicalFormat((HALB_FormatList *)&v7, &v11, *(const AudioStreamBasicDescription **)(a1 + 48), v6, v12.mSampleRate);
    HALB_FormatList::~HALB_FormatList((HALB_FormatList *)&v7);
  }
  else
  {
    HALB_FormatList::BestMatchForPhysicalFormat((HALB_FormatList *)(v2 + 9), &v11, *(const AudioStreamBasicDescription **)(a1 + 48), v3, v12.mSampleRate);
  }
}

void sub_1BACD375C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void __destroy_helper_block_e8_40c38_ZTS13HALS_ReleaserI15HALS_IOA2DeviceE(uint64_t a1, HALS_Object *a2)
{
}

void __copy_helper_block_e8_40c38_ZTS13HALS_ReleaserI15HALS_IOA2DeviceE(uint64_t a1, HALS_Object *a2)
{
  uint64_t v2 = (HALS_ObjectMap *)*((void *)a2 + 5);
  *(void *)(a1 + 40) = v2;
  HALS_ObjectMap::RetainObject(v2, a2);
}

uint64_t HALS_IOA2Stream::GetPropertyDataSize(HALS_IOA2Stream *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, const void *a5, HALS_Client *a6)
{
  if (((*(uint64_t (**)(HALS_IOA2Stream *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a6) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  uint64_t v19 = 0;
  unsigned __int16 v20 = &v19;
  uint64_t v21 = 0x2000000000;
  int v22 = 0;
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1936092450)
  {
    if (mSelector == 1936092451)
    {
      long long v10 = v17;
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 0x40000000;
      v17[2] = ___ZNK15HALS_IOA2Stream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2;
      v17[3] = &unk_1E6232390;
      std::runtime_error v17[4] = &v19;
      v17[5] = this;
      AudioStreamBasicDescription v11 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(void *)this + 56))(this);
      goto LABEL_12;
    }
    if (mSelector == 1936092513)
    {
      long long v10 = v18;
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 0x40000000;
      uint64_t v18[2] = ___ZNK15HALS_IOA2Stream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke;
      v18[3] = &unk_1E6232368;
      v18[4] = &v19;
      unsigned char v18[5] = this;
      AudioStreamBasicDescription v11 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(void *)this + 56))(this);
      goto LABEL_12;
    }
  }
  else
  {
    if (mSelector == 1885762595)
    {
      long long v10 = v15;
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 0x40000000;
      void v15[2] = ___ZNK15HALS_IOA2Stream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4;
      v15[3] = &unk_1E62323E0;
      v15[4] = &v19;
      v15[5] = this;
      AudioStreamBasicDescription v11 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(void *)this + 56))(this);
      goto LABEL_12;
    }
    if (mSelector == 1885762657)
    {
      long long v10 = v16;
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 0x40000000;
      v16[2] = ___ZNK15HALS_IOA2Stream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3;
      v16[3] = &unk_1E62323B8;
      v16[4] = &v19;
      unsigned char v16[5] = this;
      AudioStreamBasicDescription v11 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Stream *))(*(void *)this + 56))(this);
LABEL_12:
      HALB_CommandGate::ExecuteCommand(v11, (uint64_t)v10);
      uint64_t PropertyDataSize = *((unsigned int *)v20 + 6);
      goto LABEL_13;
    }
  }
  uint64_t PropertyDataSize = HALS_Stream::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
  *((_DWORD *)v20 + 6) = PropertyDataSize;
LABEL_13:
  _Block_object_dispose(&v19, 8);
  return PropertyDataSize;
}

void sub_1BACD3B14(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK15HALS_IOA2Stream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(void *)(result + 40) + 88)
                                                                   - *(_DWORD *)(*(void *)(result + 40) + 80)) & 0xFFFFFFF8;
  return result;
}

uint64_t ___ZNK15HALS_IOA2Stream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = -1840700264
                                                                  * ((*(void *)(*(void *)(result + 40) + 88)
                                                                    - *(void *)(*(void *)(result + 40) + 80)) >> 3);
  return result;
}

uint64_t ___ZNK15HALS_IOA2Stream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(void *)(result + 40) + 112)
                                                                   - *(_DWORD *)(*(void *)(result + 40) + 104)) & 0xFFFFFFF8;
  return result;
}

uint64_t ___ZNK15HALS_IOA2Stream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(void *)(result + 40) + 112)
                                                                   - *(_DWORD *)(*(void *)(result + 40) + 104)) & 0xFFFFFFF8;
  return result;
}

uint64_t HALS_IOA2Stream::IsPropertySettable(HALS_IOA2Stream *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  if (((*(uint64_t (**)(HALS_IOA2Stream *))(*(void *)this + 88))(this) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  if (a3->mSelector == 1935762292) {
    return 1;
  }

  return HALS_Stream::IsPropertySettable((uint64_t)this, a2, (int *)a3);
}

uint64_t HALS_IOA2Stream::HasProperty(HALS_IOA2Stream *this, unsigned int a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  uint64_t result = (*(uint64_t (**)(HALS_IOA2Stream *, const AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 176))(this, a3, a4);
  if (result)
  {
    if (a3->mSelector == 1935762292)
    {
      return 1;
    }
    else if (a3->mSelector == 1952542835)
    {
      return *((unsigned char *)this + 52) != 0;
    }
    else
    {
      return HALS_Stream::HasProperty(this, a2, a3, a4);
    }
  }
  return result;
}

void HALS_IOA2Stream::~HALS_IOA2Stream(HALS_IOA2Stream *this)
{
  *(void *)this = &unk_1F146B4F8;
  HALB_FormatList::~HALB_FormatList((HALS_IOA2Stream *)((char *)this + 72));
  HALS_Object::~HALS_Object(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F146B4F8;
  HALB_FormatList::~HALB_FormatList((HALS_IOA2Stream *)((char *)this + 72));

  HALS_Object::~HALS_Object(this);
}

void HALS_IOA2Stream::Activate(HALS_IOA2Stream *this)
{
  HALS_IOA2Stream::BuildFormatList(this);

  HALS_Object::Activate(this, v2);
}

void HALS_IOA2Stream::BuildFormatList(HALS_IOA2Stream *this)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (const __CFDictionary **)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  if (v2)
  {
    *((void *)this + 11) = *((void *)this + 10);
    *((void *)this + 14) = *((void *)this + 13);
    uint64_t v15 = (HALS_ObjectMap *)v2;
    int v4 = *((_DWORD *)this + 15);
    CFTypeRef cf = 0;
    long long v5 = HALS_IOA2UCDevice::CopyStreamDictionaryByID(v2 + 226, v4);
    uint64_t v21 = v5;
    __int16 v22 = 1;
    if (v5)
    {
      if ((CACFDictionary::GetArray((uint64_t)v5, @"available formats", (const __CFArray **)&cf) & 1) == 0)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.mFormat.mSampleRate) = 136315394;
          *(void *)((char *)&buf.mFormat.mSampleRate + 4) = "HALS_IOA2UCDevice.cpp";
          LOWORD(buf.mFormat.mFormatFlags) = 1024;
          *(AudioFormatFlags *)((char *)&buf.mFormat.mFormatFlags + 2) = 666;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::CopyStreamInfoByID_AvailableFormats: there are no available formats", (uint8_t *)&buf, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = off_1F148A5D8;
        exception[2] = 1852797029;
      }
      CFArrayRef v6 = (const __CFArray *)cf;
      if (cf) {
        CFRetain(cf);
      }
    }
    else
    {
      CFArrayRef v6 = 0;
    }
    unint64_t v7 = (HALS_IOA2Stream *)((char *)this + 72);
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v21);
    unsigned int v8 = 0;
    CFArrayRef v18 = v6;
    __int16 v19 = 1;
    if (!v6) {
      goto LABEL_9;
    }
LABEL_8:
    for (unsigned int i = CFArrayGetCount(v6); v8 < i; unsigned int i = 0)
    {
      CFTypeRef cf = 0;
      __int16 v17 = 1;
      CACFArray::GetCACFDictionary(&v18, v8, (CACFDictionary *)&cf);
      unint64_t v20 = 0;
      uint64_t v21 = (CACFDictionary *)cf;
      __int16 v22 = 0;
      memset(&buf, 0, sizeof(buf));
      if (CACFDictionary::GetUInt64((uint64_t)cf, @"min sample rate", &v20)
        && (buf.mSampleRateRange.mMinimuuint64_t m = (double)v20 * 2.32830644e-10 + (double)HIDWORD(v20),
            CACFDictionary::GetUInt64((uint64_t)v21, @"max sample rate", &v20)))
      {
        mMinimuuint64_t m = buf.mSampleRateRange.mMinimum;
        if (buf.mSampleRateRange.mMinimum != (double)v20 * 2.32830644e-10 + (double)HIDWORD(v20)) {
          mMinimuuint64_t m = 0.0;
        }
        buf.mSampleRateRange.mMaximuuint64_t m = (double)v20 * 2.32830644e-10 + (double)HIDWORD(v20);
        buf.mFormat.mSampleRate = mMinimum;
        if (CACFDictionary::GetUInt32((uint64_t)v21, @"format ID", &buf.mFormat.mFormatID)
          && CACFDictionary::GetUInt32((uint64_t)v21, @"format flags", &buf.mFormat.mFormatFlags)
          && CACFDictionary::GetUInt32((uint64_t)v21, @"bytes per packet", &buf.mFormat.mBytesPerPacket)&& CACFDictionary::GetUInt32((uint64_t)v21, @"frames per packet", &buf.mFormat.mFramesPerPacket)&& CACFDictionary::GetUInt32((uint64_t)v21, @"bytes per frame", &buf.mFormat.mBytesPerFrame)&& CACFDictionary::GetUInt32((uint64_t)v21, @"channels per frame", &buf.mFormat.mChannelsPerFrame))
        {
          int UInt32 = CACFDictionary::GetUInt32((uint64_t)v21, @"bits per channel", &buf.mFormat.mBitsPerChannel);
        }
        else
        {
          int UInt32 = 0;
        }
      }
      else
      {
        int UInt32 = 0;
        double v12 = buf.mSampleRateRange.mMinimum;
        if (buf.mSampleRateRange.mMinimum != buf.mSampleRateRange.mMaximum) {
          double v12 = 0.0;
        }
        buf.mFormat.mSampleRate = v12;
      }
      if (buf.mFormat.mFormatID == 1819304813) {
        buf.mFormat.mFormatFlags &= ~0x40u;
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v21);
      if (UInt32) {
        HALB_FormatList::AddPhysicalFormat(v7, &buf, v13);
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
      ++v8;
      CFArrayRef v6 = v18;
      if (v18) {
        goto LABEL_8;
      }
LABEL_9:
      ;
    }
    CACFArray::~CACFArray((CACFArray *)&v18);
    uint64_t v2 = (const __CFDictionary **)v15;
  }
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v2, v3);
}

void sub_1BACD4248(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, HALS_ObjectMap *a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
}

void AMCP::ASP::PlugIn::log_plugin_exception(AMCP::Log::Scope_Registry *a1, uint64_t *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  int v4 = **(NSObject ***)buf;
  if (*(void *)v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    long long v5 = pthread_self();
    mach_port_t v6 = pthread_mach_thread_np(v5);
    if (*((char *)a2 + 23) < 0) {
      a2 = (uint64_t *)*a2;
    }
    mcp_applesauce::CF::PlugInRef_proxy::get_bundle(&v9, *(__CFBundle **)a1);
    mcp_applesauce::CF::BundleRef_proxy::get_bundle_id((applesauce::CF::StringRef *)&cf, (__CFBundle *)v9);
    if (!cf)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
    if (v12 >= 0) {
      unint64_t v7 = __p;
    }
    else {
      unint64_t v7 = (void **)__p[0];
    }
    *(_DWORD *)AudioStreamRangedDescription buf = 67110146;
    *(_DWORD *)&uint8_t buf[4] = v6;
    *(_WORD *)long long v14 = 2080;
    *(void *)&v14[2] = "ASP_PlugIn.cpp";
    __int16 v15 = 1024;
    int v16 = 884;
    __int16 v17 = 2080;
    CFArrayRef v18 = a2;
    __int16 v19 = 2080;
    unint64_t v20 = v7;
    _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught unknown exception while trying to call %s on ASP with bundle id %s", buf, 0x2Cu);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v9) {
      CFRelease(v9);
    }
  }
}

void sub_1BACD4478(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *mcp_applesauce::CF::PlugInRef_proxy::get_bundle(void *this, __CFBundle *a2)
{
  uint64_t v2 = this;
  if (a2)
  {
    CFBundleRef Bundle = CFPlugInGetBundle(a2);
    return mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::BundleRef_Traits>::from_get(v2, Bundle);
  }
  else
  {
    *this = 0;
  }
  return this;
}

uint64_t AMCP::ASP::PlugIn::PerformDeviceConfigChange(AMCP::ASP::PlugIn *this, uint64_t a2, uint64_t a3, void *a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void *))(**((void **)this + 2) + 72))(*((void *)this + 2), a2, a3, a4);
}

void sub_1BACD4528(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "PerformDeviceConfigurationChange");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BACD4518);
}

BOOL AMCP::ASP::PlugIn::ObjectHasProperty(AMCP::ASP::PlugIn *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4)
{
  return (*(unsigned int (**)(void, uint64_t, uint64_t, const AudioObjectPropertyAddress *))(**((void **)this + 2) + 88))(*((void *)this + 2), a2, a3, a4) != 0;
}

void sub_1BACD45AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "HasProperty");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BACD459CLL);
}

unint64_t AMCP::ASP::PlugIn::ObjectIsPropertySettable(AMCP::ASP::PlugIn *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4)
{
  char v6 = 0;
  unsigned int v4 = (*(uint64_t (**)(void, uint64_t, uint64_t, const AudioObjectPropertyAddress *, char *))(**((void **)this + 2) + 96))(*((void *)this + 2), a2, a3, a4, &v6);
  return v4 | ((unint64_t)(v6 != 0) << 32);
}

void sub_1BACD4640(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "IsPropertySettable");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BACD461CLL);
}

unint64_t AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(AMCP::ASP::PlugIn *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6)
{
  unsigned int v8 = 0;
  unsigned int v6 = (*(uint64_t (**)(void, uint64_t, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, unsigned int *))(**((void **)this + 2) + 104))(*((void *)this + 2), a2, a3, a4, a5, a6, &v8);
  return v6 | ((unint64_t)v8 << 32);
}

void sub_1BACD46D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "GetPropertyDataSize");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BACD46B4);
}

unint64_t AMCP::ASP::PlugIn::ObjectGetPropertyData(AMCP::ASP::PlugIn *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6, uint64_t a7, void *a8)
{
  unsigned int v10 = a7;
  unsigned int v8 = (*(uint64_t (**)(void, uint64_t, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, unsigned int *, void *))(**((void **)this + 2) + 112))(*((void *)this + 2), a2, a3, a4, a5, a6, a7, &v10, a8);
  return v8 | ((unint64_t)v10 << 32);
}

void sub_1BACD4764(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "GetPropertyData");
  AMCP::ASP::PlugIn::log_plugin_exception(v16, (uint64_t *)&__p);
  if (a16 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BACD4748);
}

uint64_t AMCP::ASP::PlugIn::ObjectSetPropertyData(AMCP::ASP::PlugIn *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6, uint64_t a7, const void *a8)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *))(**((void **)this + 2) + 120))(*((void *)this + 2), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1BACD47E0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "SetPropertyData");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BACD47D0);
}

void HALS_PDPStream::SetPropertyData(HALS_PDPStream *this, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_PDPStream *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  __int16 v17 = (int *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  if (!v17)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_PDPStream.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 251;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPStream::SetPropertyData: owning device is missing", buf, 0x12u);
    }
    unint64_t v28 = __cxa_allocate_exception(0x10uLL);
    int v29 = 560947818;
LABEL_37:
    *(void *)unint64_t v28 = off_1F148A5D8;
    v28[2] = v29;
  }
  signed int mSelector = a3->mSelector;
  if (!HALB_Info::PropertyRequiresHogMode((HALB_Info *)a3->mSelector, v16)) {
    goto LABEL_6;
  }
  if (!HALS_Device::IsHogModeOwnerOrFree((HALS_Device *)v17, a8))
  {
    unint64_t v28 = __cxa_allocate_exception(0x10uLL);
    int v29 = 560492391;
    goto LABEL_37;
  }
  signed int mSelector = a3->mSelector;
LABEL_6:
  if (mSelector > 1885762591)
  {
    if (mSelector == 1885762592)
    {
      if (a4 > 0x27)
      {
        v45.uint64_t mElement = 0;
        *(void *)&v45.signed int mSelector = *(void *)" tfpbolg";
        unsigned int v41 = 40;
        HALS_PDPUCPlugIn::ObjectGetPropertyData(*(HALS_PDPUCPlugIn **)(*((void *)this + 8) + 72), a2, &v45, 0, 0, &v41, &v42);
        if (DWORD2(v42) == 1819304813) {
          HIDWORD(v42) &= ~0x40u;
        }
        *(void *)AudioStreamRangedDescription buf = 0;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&buf[16] = 0x5002000000;
        uint64_t v47 = __Block_byref_object_copy__15;
        int v48 = __Block_byref_object_dispose__16;
        v33[0] = MEMORY[0x1E4F143A8];
        v33[1] = 0x40000000;
        v33[2] = ___ZN14HALS_PDPStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_20;
        v33[3] = &unk_1E6232810;
        v33[5] = this;
        v33[6] = a5;
        long long v34 = v42;
        long long v35 = v43;
        uint64_t v36 = v44;
        v33[4] = buf;
        uint64_t v26 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPStream *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v26, (uint64_t)v33);
        HALS_PDPUCPlugIn::ObjectSetPropertyData(*(HALS_PDPUCPlugIn **)(*((void *)this + 8) + 80), a2, a3, a6, a7, a4, (const void *)(*(void *)&buf[8] + 40));
        if (a8
          && (*(_DWORD *)(*(void *)&buf[8] + 48) != 1819304813
           || (*(_DWORD *)(*(void *)&buf[8] + 52) & 0x40) != 0))
        {
          HALS_Client::SetNonMixableFormat(a8, v17[4]);
        }
        goto LABEL_28;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_PDPStream.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 312;
        signed int v30 = MEMORY[0x1E4F14500];
        uint64_t v31 = "%25s:%-5d  HALS_IOA2Stream::_SetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormat";
        goto LABEL_42;
      }
    }
    else
    {
      if (mSelector != 1936092532)
      {
        int v23 = 1937007734;
        goto LABEL_10;
      }
      if (a4 > 0x27)
      {
        v45.uint64_t mElement = 0;
        *(void *)&v45.signed int mSelector = *(void *)" tfpbolg";
        unsigned int v41 = 40;
        HALS_PDPUCPlugIn::ObjectGetPropertyData(*(HALS_PDPUCPlugIn **)(*((void *)this + 8) + 72), a2, &v45, 0, 0, &v41, &v42);
        if (DWORD2(v42) == 1819304813) {
          HIDWORD(v42) &= ~0x40u;
        }
        *(void *)AudioStreamRangedDescription buf = 0;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&buf[16] = 0x5002000000;
        uint64_t v47 = __Block_byref_object_copy__15;
        int v48 = __Block_byref_object_dispose__16;
        v37[0] = MEMORY[0x1E4F143A8];
        v37[1] = 0x40000000;
        v37[2] = ___ZN14HALS_PDPStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
        v37[3] = &unk_1E62327E8;
        long long v38 = v42;
        long long v39 = v43;
        v37[5] = this;
        v37[6] = a5;
        uint64_t v40 = v44;
        v37[4] = buf;
        uint64_t v25 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPStream *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v25, (uint64_t)v37);
        HALS_PDPUCPlugIn::ObjectSetPropertyData(*(HALS_PDPUCPlugIn **)(*((void *)this + 8) + 80), a2, &v45, 0, 0, a4, (const void *)(*(void *)&buf[8] + 40));
        if (a8
          && (*(_DWORD *)(*(void *)&buf[8] + 48) != 1819304813
           || (*(_DWORD *)(*(void *)&buf[8] + 52) & 0x40) != 0))
        {
          HALS_Client::SetNonMixableFormat(a8, v17[4]);
        }
LABEL_28:
        _Block_object_dispose(buf, 8);
        goto LABEL_29;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_PDPStream.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 266;
        signed int v30 = MEMORY[0x1E4F14500];
        uint64_t v31 = "%25s:%-5d  HALS_IOA2Stream::_SetPropertyData: bad property data size for kAudioStreamPropertyVirtualFormat";
LABEL_42:
        _os_log_impl(&dword_1BAA78000, v30, OS_LOG_TYPE_ERROR, v31, buf, 0x12u);
      }
    }
    __int16 v32 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v32 = off_1F148A5D8;
    v32[2] = 561211770;
  }
  if (mSelector == 1650682995 || mSelector == 1668047219) {
LABEL_31:
  }
    HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v19, v20, v21, v22, (uint64_t)a8);
  int v23 = 1869638759;
LABEL_10:
  if (mSelector == v23) {
    goto LABEL_31;
  }
  HALS_PDPUCPlugIn::ObjectSetPropertyData(*(HALS_PDPUCPlugIn **)(*((void *)this + 8) + 80), a2, a3, a6, a7, a4, a5);
LABEL_29:
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v17, v24);
}

void sub_1BACD4F1C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BACD4B38);
  }
  _Unwind_Resume(exception_object);
}

__n128 __Block_byref_object_copy__15(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  long long v3 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v3;
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void ___ZN14HALS_PDPStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, AudioStreamBasicDescription *a4)
{
  long long v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  unint64_t v7 = (const AudioStreamBasicDescription *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  long long v8 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)&v13.mSampleRate = *(_OWORD *)v6;
  *(_OWORD *)&v13.mBytesPerPacket = v8;
  *(void *)&v13.mBitsPerChannel = *(void *)(v6 + 32);
  if (v13.mFormatID == 1819304813)
  {
    v13.mBitsPerChannel = 0;
    *(_OWORD *)&v13.mFormatFlags = 0uLL;
  }
  HALB_FormatList::BestMatchForPhysicalFormat((HALB_FormatList *)(v5 + 16), &v13, v7, a4, *(double *)(a1 + 56));
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  unsigned int v10 = (const AudioStreamBasicDescription *)v5[13];
  AudioStreamBasicDescription v11 = (AudioStreamBasicDescription *)v5[14];
  if (!HALB_FormatList::IsVirtualFormatSupported(v10, v11, v9 + 40))
  {
    if (*(_DWORD *)(v9 + 48) == 1819304813)
    {
      *(_DWORD *)(v9 + 52) |= 0x40u;
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
    }
    BOOL IsVirtualFormatSupported = HALB_FormatList::IsVirtualFormatSupported(v10, v11, v9 + 40);
    if (!IsVirtualFormatSupported) {
      LogError((const char *)IsVirtualFormatSupported, *(void *)&v13.mSampleRate);
    }
  }
}

void sub_1BACD509C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZN14HALS_PDPStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_20(uint64_t a1, uint64_t a2, uint64_t a3, AudioStreamBasicDescription *a4)
{
  long long v5 = *(void **)(a1 + 40);
  HALB_FormatList::BestMatchForPhysicalFormat((HALB_FormatList *)(v5 + 16), *(const AudioStreamBasicDescription **)(a1 + 48), (const AudioStreamBasicDescription *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a4, *(double *)(a1 + 56));
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  unint64_t v7 = (const AudioStreamBasicDescription *)v5[13];
  long long v8 = (AudioStreamBasicDescription *)v5[14];
  if (!HALB_FormatList::IsVirtualFormatSupported(v7, v8, v6 + 40))
  {
    if (*(_DWORD *)(v6 + 48) == 1819304813)
    {
      *(_DWORD *)(v6 + 52) |= 0x40u;
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    }
    BOOL IsVirtualFormatSupported = HALB_FormatList::IsVirtualFormatSupported(v7, v8, v6 + 40);
    if (!IsVirtualFormatSupported) {
      LogError((const char *)IsVirtualFormatSupported);
    }
  }
}

void sub_1BACD516C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_PDPStream::GetPropertyData(HALS_PDPStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, unsigned int *a5, double *a6, uint64_t a7, const void *a8, HALS_Client *a9)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_PDPStream *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a9) & 1) == 0&& a3->mSelector == 1935894638)
  {
    *a5 = a4;
    *(_DWORD *)a6 = 1;
    return;
  }
  if (((*(uint64_t (**)(HALS_PDPStream *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a9) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  if (a9) {
    BOOL v17 = *((unsigned char *)a9 + 258) == 0;
  }
  else {
    BOOL v17 = 1;
  }
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1885762656)
  {
    if (mSelector <= 1936092512)
    {
      if (mSelector != 1885762657)
      {
        if (mSelector == 1936092451)
        {
          uint64_t v48 = 0;
          uint64_t v49 = &v48;
          uint64_t v50 = 0x2000000000;
          int v51 = 0;
          v55[0] = MEMORY[0x1E4F143A8];
          v55[1] = 0x40000000;
          v55[2] = ___ZNK14HALS_PDPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2;
          v55[3] = &unk_1E6232720;
          BOOL v57 = v17;
          int v56 = a4;
          v55[4] = &v48;
          v55[5] = this;
          v55[6] = a6;
          uint64_t v21 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPStream *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v21, (uint64_t)v55);
          goto LABEL_27;
        }
        goto LABEL_46;
      }
      uint64_t v48 = 0;
      uint64_t v49 = &v48;
      uint64_t v50 = 0x2000000000;
      int v51 = 0;
      v42[0] = MEMORY[0x1E4F143A8];
      v42[1] = 0x40000000;
      v42[2] = ___ZNK14HALS_PDPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_11;
      v42[3] = &unk_1E6232798;
      int v43 = a4;
      v42[4] = &v48;
      v42[5] = this;
      v42[6] = a6;
      int v23 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPStream *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v23, (uint64_t)v42);
    }
    else
    {
      if (mSelector != 1936092513)
      {
        if (mSelector == 1936092532)
        {
          *(void *)AudioStreamRangedDescription buf = 0;
          *(void *)&uint8_t buf[8] = buf;
          *(void *)&buf[16] = 0x2000000000;
          int v66 = 40;
          uint64_t v48 = 0;
          uint64_t v49 = &v48;
          uint64_t v50 = 0x3802000000;
          int v51 = __Block_byref_object_copy__6655;
          int v52 = __Block_byref_object_dispose__6656;
          int v53 = 1885762592;
          uint64_t v54 = *(void *)&a3->mScope;
          v46[0] = MEMORY[0x1E4F143A8];
          v46[1] = 0x40000000;
          v46[2] = ___ZNK14HALS_PDPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_7;
          v46[3] = &unk_1E6232748;
          int v47 = a2;
          v46[4] = &v48;
          v46[5] = buf;
          v46[6] = this;
          v46[7] = a6;
          signed int v30 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPStream *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v30, (uint64_t)v46);
          if (*((_DWORD *)a6 + 2) == 1819304813)
          {
            if (v17) {
              int v31 = 9;
            }
            else {
              int v31 = 11;
            }
            int v32 = 4 * *((_DWORD *)a6 + 7);
            *((_DWORD *)a6 + 3) = v31;
            *((_DWORD *)a6 + 4) = v32;
            *((_DWORD *)a6 + 5) = 1;
            *((_DWORD *)a6 + 6) = v32;
            *((_DWORD *)a6 + 8) = 32;
          }
          uint64_t v33 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
          long long v34 = (HALS_ObjectMap *)v33;
          if (!v33)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string::size_type v61 = 136315394;
              uint64_t v62 = "HALS_PDPStream.cpp";
              __int16 v63 = 1024;
              int v64 = 207;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPStream::GetPropertyData: owning device is missing", v61, 0x12u);
            }
            long long v39 = __cxa_allocate_exception(0x10uLL);
            *(void *)long long v39 = off_1F148A5D8;
            v39[2] = 560947818;
          }
          *a6 = (*(double (**)(uint64_t))(*(void *)v33 + 264))(v33);
          HALS_ObjectMap::ReleaseObject(v34, v35);
          _Block_object_dispose(&v48, 8);
          uint64_t v25 = (uint64_t *)buf;
          goto LABEL_33;
        }
        int v20 = 1937007734;
        goto LABEL_20;
      }
      uint64_t v48 = 0;
      uint64_t v49 = &v48;
      uint64_t v50 = 0x2000000000;
      int v51 = 0;
      v58[0] = MEMORY[0x1E4F143A8];
      v58[1] = 0x40000000;
      v58[2] = ___ZNK14HALS_PDPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
      v58[3] = &unk_1E62326F8;
      BOOL v60 = v17;
      int v59 = a4;
      void v58[4] = &v48;
      v58[5] = this;
      v58[6] = a6;
      uint64_t v24 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPStream *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v24, (uint64_t)v58);
    }
    int v22 = 56 * *((_DWORD *)v49 + 6);
    goto LABEL_31;
  }
  if (mSelector > 1869638758)
  {
    if (mSelector != 1869638759)
    {
      if (mSelector == 1885762592)
      {
        uint64_t v48 = 0;
        uint64_t v49 = &v48;
        uint64_t v50 = 0x2000000000;
        LODWORD(v51) = 40;
        v44[0] = MEMORY[0x1E4F143A8];
        v44[1] = 0x40000000;
        v44[2] = ___ZNK14HALS_PDPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_9;
        v44[3] = &unk_1E6232770;
        int v45 = a2;
        v44[4] = &v48;
        v44[5] = this;
        v44[6] = a3;
        v44[7] = a6;
        uint64_t v26 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPStream *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v26, (uint64_t)v44);
        if (*((_DWORD *)a6 + 2) == 1819304813) {
          *((_DWORD *)a6 + 3) &= ~0x40u;
        }
        uint64_t v27 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
        unint64_t v28 = (HALS_ObjectMap *)v27;
        if (!v27)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PDPStream.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 219;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPStream::GetPropertyData: owning device is missing", buf, 0x12u);
          }
          long long v38 = __cxa_allocate_exception(0x10uLL);
          *(void *)long long v38 = off_1F148A5D8;
          void v38[2] = 560947818;
        }
        *a6 = (*(double (**)(uint64_t))(*(void *)v27 + 264))(v27);
        HALS_ObjectMap::ReleaseObject(v28, v29);
        goto LABEL_32;
      }
      if (mSelector == 1885762595)
      {
        uint64_t v48 = 0;
        uint64_t v49 = &v48;
        uint64_t v50 = 0x2000000000;
        int v51 = 0;
        v40[0] = MEMORY[0x1E4F143A8];
        v40[1] = 0x40000000;
        v40[2] = ___ZNK14HALS_PDPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_13;
        v40[3] = &unk_1E62327C0;
        int v41 = a4;
        v40[4] = &v48;
        v40[5] = this;
        v40[6] = a6;
        uint64_t v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPStream *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v19, (uint64_t)v40);
LABEL_27:
        int v22 = 40 * *((_DWORD *)v49 + 6);
LABEL_31:
        *a5 = v22;
LABEL_32:
        uint64_t v25 = &v48;
LABEL_33:
        _Block_object_dispose(v25, 8);
        return;
      }
      goto LABEL_46;
    }
    goto LABEL_21;
  }
  if (mSelector == 1650682995) {
    goto LABEL_21;
  }
  int v20 = 1668047219;
LABEL_20:
  if (mSelector != v20)
  {
LABEL_46:
    *a5 = a4;
    uint64_t v36 = *(HALS_PDPUCPlugIn **)(*((void *)this + 8) + 72);
    HALS_PDPUCPlugIn::ObjectGetPropertyData(v36, a2, a3, a7, a8, a5, a6);
    return;
  }
LABEL_21:

  HALS_Stream::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1BACD5B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZNK14HALS_PDPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1)
{
  return HALB_FormatList::GetVirtualFormats(*(void *)(a1 + 40) + 128, *(unsigned char *)(a1 + 60), *(unsigned int *)(a1 + 56) / 0x38uLL, (unint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(AudioStreamRangedDescription **)(a1 + 48));
}

uint64_t ___ZNK14HALS_PDPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2(uint64_t a1)
{
  return HALB_FormatList::GetVirtualFormats(*(void *)(a1 + 40) + 128, *(unsigned char *)(a1 + 60), *(unsigned int *)(a1 + 56) / 0x28uLL, (unint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(AudioStreamBasicDescription **)(a1 + 48));
}

void sub_1BACD5C6C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t __Block_byref_object_copy__6655(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(result + 40) = v2;
  return result;
}

uint64_t ___ZNK14HALS_PDPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_7(uint64_t a1)
{
  return HALS_PDPUCPlugIn::ObjectGetPropertyData(*(HALS_PDPUCPlugIn **)(*(void *)(*(void *)(a1 + 48) + 64) + 72), *(unsigned int *)(a1 + 64), (const AudioObjectPropertyAddress *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), 0, 0, (unsigned int *)(*(void *)(*(void *)(a1 + 40) + 8) + 24), *(void **)(a1 + 56));
}

void sub_1BACD5CE4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK14HALS_PDPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_9(uint64_t a1)
{
  return HALS_PDPUCPlugIn::ObjectGetPropertyData(*(HALS_PDPUCPlugIn **)(*(void *)(*(void *)(a1 + 40) + 64) + 72), *(unsigned int *)(a1 + 64), *(const AudioObjectPropertyAddress **)(a1 + 48), 0, 0, (unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(void **)(a1 + 56));
}

void sub_1BACD5D3C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

__n128 ___ZNK14HALS_PDPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_11(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(v3 + 24) = 0;
  if (v1 >= 0x38)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = v1 / 0x38uLL;
    uint64_t v8 = -1;
    do
    {
      uint64_t v9 = *(void *)(v2 + 160);
      if (++v8 >= (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((*(void *)(v2 + 168) - v9) >> 3))) {
        break;
      }
      uint64_t v10 = v9 + v5;
      v5 += 56;
      uint64_t v11 = v4 + 56 * v6;
      __n128 result = *(__n128 *)v10;
      long long v13 = *(_OWORD *)(v10 + 16);
      long long v14 = *(_OWORD *)(v10 + 32);
      *(void *)(v11 + 48) = *(void *)(v10 + 48);
      *(_OWORD *)(v11 + 16) = v13;
      *(_OWORD *)(v11 + 32) = v14;
      *(__n128 *)uint64_t v11 = result;
      unint64_t v6 = *(void *)(v3 + 24) + 1;
      *(void *)(v3 + 24) = v6;
    }
    while (v6 < v7);
  }
  return result;
}

uint64_t ___ZNK14HALS_PDPStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_13(uint64_t a1)
{
  return HALB_FormatList::GetPhysicalFormats(*(void *)(a1 + 40) + 128, *(unsigned int *)(a1 + 56) / 0x38uLL, (unint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(AudioStreamBasicDescription **)(a1 + 48));
}

void sub_1BACD5E48(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_PDPStream::GetPropertyDataSize(HALS_PDPStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, HALS_Client *a6)
{
  if (((*(uint64_t (**)(HALS_PDPStream *, uint64_t, AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 88))(this, a2, a3, a6) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x2000000000;
  int v26 = 0;
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1885762656)
  {
    if (mSelector > 1936092512)
    {
      if (mSelector == 1936092513)
      {
        long long v13 = v22;
        v22[0] = MEMORY[0x1E4F143A8];
        v22[1] = 0x40000000;
        v22[2] = ___ZNK14HALS_PDPStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke;
        _DWORD v22[3] = &unk_1E6232658;
        v22[4] = &v23;
        v22[5] = this;
        long long v14 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPStream *))(*(void *)this + 56))(this);
        goto LABEL_22;
      }
      if (mSelector == 1937007734) {
        goto LABEL_18;
      }
    }
    else
    {
      if (mSelector == 1885762657)
      {
        long long v13 = v20;
        v20[0] = MEMORY[0x1E4F143A8];
        v20[1] = 0x40000000;
        v20[2] = ___ZNK14HALS_PDPStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3;
        _DWORD v20[3] = &unk_1E62326A8;
        v20[4] = &v23;
        v20[5] = this;
        long long v14 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPStream *))(*(void *)this + 56))(this);
        goto LABEL_22;
      }
      if (mSelector == 1936092451)
      {
        long long v13 = v21;
        v21[0] = MEMORY[0x1E4F143A8];
        v21[1] = 0x40000000;
        uint64_t v21[2] = ___ZNK14HALS_PDPStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2;
        v21[3] = &unk_1E6232680;
        v21[4] = &v23;
        v21[5] = this;
        long long v14 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPStream *))(*(void *)this + 56))(this);
LABEL_22:
        HALB_CommandGate::ExecuteCommand(v14, (uint64_t)v13);
        uint64_t v16 = *((unsigned int *)v24 + 6);
        goto LABEL_23;
      }
    }
LABEL_24:
    uint64_t PropertyDataSize = HALS_PDPUCPlugIn::ObjectGetPropertyDataSize(*(HALS_PDPUCPlugIn **)(*((void *)this + 8) + 64), a2, a3, a4, a5);
    goto LABEL_19;
  }
  if (mSelector > 1869638758)
  {
    if (mSelector == 1869638759) {
      goto LABEL_18;
    }
    if (mSelector == 1885762595)
    {
      long long v13 = v19;
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 0x40000000;
      v19[2] = ___ZNK14HALS_PDPStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4;
      v19[3] = &unk_1E62326D0;
      v19[4] = &v23;
      unsigned char v19[5] = this;
      long long v14 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PDPStream *))(*(void *)this + 56))(this);
      goto LABEL_22;
    }
    goto LABEL_24;
  }
  if (mSelector != 1650682995 && mSelector != 1668047219) {
    goto LABEL_24;
  }
LABEL_18:
  uint64_t PropertyDataSize = HALS_Stream::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
LABEL_19:
  uint64_t v16 = PropertyDataSize;
  *((_DWORD *)v24 + 6) = PropertyDataSize;
LABEL_23:
  _Block_object_dispose(&v23, 8);
  return v16;
}

void sub_1BACD6244(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14HALS_PDPStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(void *)(result + 40) + 144)
                                                                   - *(_DWORD *)(*(void *)(result + 40) + 136)) & 0xFFFFFFF8;
  return result;
}

uint64_t ___ZNK14HALS_PDPStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = -1840700264
                                                                  * ((*(void *)(*(void *)(result + 40) + 144)
                                                                    - *(void *)(*(void *)(result + 40) + 136)) >> 3);
  return result;
}

uint64_t ___ZNK14HALS_PDPStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(void *)(result + 40) + 168)
                                                                   - *(_DWORD *)(*(void *)(result + 40) + 160)) & 0xFFFFFFF8;
  return result;
}

uint64_t ___ZNK14HALS_PDPStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(void *)(result + 40) + 168)
                                                                   - *(_DWORD *)(*(void *)(result + 40) + 160)) & 0xFFFFFFF8;
  return result;
}

uint64_t HALS_PDPStream::IsPropertySettable(HALS_PDPStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  if (((*(uint64_t (**)(HALS_PDPStream *))(*(void *)this + 88))(this) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1885762656)
  {
    if (mSelector > 1936092512)
    {
      BOOL v8 = mSelector == 1937007734;
      unsigned __int16 v10 = 28001;
    }
    else
    {
      BOOL v8 = mSelector == 1885762657;
      unsigned __int16 v10 = 27939;
    }
    int v9 = v10 | 0x73660000;
  }
  else if (mSelector > 1869638758)
  {
    BOOL v8 = mSelector == 1869638759;
    int v9 = 1885762595;
  }
  else
  {
    BOOL v8 = mSelector == 1650682995;
    int v9 = 1668047219;
  }
  if (v8 || mSelector == v9)
  {
    return HALS_Stream::IsPropertySettable((uint64_t)this, a2, (int *)a3);
  }
  else
  {
    long long v13 = *(HALS_PDPUCPlugIn **)(*((void *)this + 8) + 56);
    return HALS_PDPUCPlugIn::ObjectIsPropertySettable(v13, a2, a3);
  }
}

uint64_t HALS_PDPStream::HasProperty(HALS_PDPStream *this, uint64_t a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  uint64_t result = (*(uint64_t (**)(HALS_PDPStream *, const AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 176))(this, a3, a4);
  if (result)
  {
    signed int mSelector = a3->mSelector;
    if ((int)a3->mSelector > 1885762656)
    {
      if (mSelector > 1936092512)
      {
        BOOL v10 = mSelector == 1937007734;
        unsigned __int16 v12 = 28001;
      }
      else
      {
        BOOL v10 = mSelector == 1885762657;
        unsigned __int16 v12 = 27939;
      }
      int v11 = v12 | 0x73660000;
    }
    else if (mSelector > 1869638758)
    {
      BOOL v10 = mSelector == 1869638759;
      int v11 = 1885762595;
    }
    else
    {
      BOOL v10 = mSelector == 1650682995;
      int v11 = 1668047219;
    }
    if (v10 || mSelector == v11)
    {
      return HALS_Stream::HasProperty(this, a2, a3, a4);
    }
    else
    {
      return (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *))(*((void *)this + 8) + 48))(a2, a3) != 0;
    }
  }
  return result;
}

void HALS_PDPStream::~HALS_PDPStream(HALS_PDPStream *this)
{
  HALS_PDPStream::~HALS_PDPStream(this);

  JUMPOUT(0x1C1859840);
}

{
  HALB_FormatList *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F146B698;
  uint64_t v2 = (HALS_PDPStream *)((char *)this + 72);
  HALB_FormatList::~HALB_FormatList((HALS_PDPStream *)((char *)this + 128));
  HALB_FormatList::~HALB_FormatList(v2);

  HALS_Object::~HALS_Object(this);
}

void HALS_PDPStream::Activate(HALS_PDPStream *this)
{
  HALS_PDPStream::BuildFormatList(this);
  int v5 = 0;
  unsigned int v4 = 4;
  *(void *)&v3.signed int mSelector = *(void *)"ridsbolg";
  v3.uint64_t mElement = 0;
  HALS_PDPUCPlugIn::ObjectGetPropertyData(*(HALS_PDPUCPlugIn **)(*((void *)this + 8) + 72), *((unsigned int *)this + 4), &v3, 0, 0, &v4, &v5);
  if (v5) {
    *((unsigned char *)this + 52) = 1;
  }
  HALS_Object::Activate(this, v2);
}

void HALS_PDPStream::BuildFormatList(HALS_PDPStream *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  *((void *)this + 11) = *((void *)this + 10);
  *((void *)this + 14) = *((void *)this + 13);
  *((void *)this + 18) = *((void *)this + 17);
  *((void *)this + 21) = *((void *)this + 20);
  *(void *)&v14.signed int mSelector = *(void *)"atfpbolg";
  v14.uint64_t mElement = 0;
  uint64_t v1 = (char *)this + 64;
  uint64_t v2 = (unsigned int *)((char *)this + 16);
  uint64_t PropertyDataSize = HALS_PDPUCPlugIn::ObjectGetPropertyDataSize(*(HALS_PDPUCPlugIn **)(*((void *)this + 8) + 64), *((unsigned int *)this + 4), &v14, 0, 0);
  unsigned int v4 = PropertyDataSize;
  unsigned int v13 = PropertyDataSize;
  LODWORD(v5) = PropertyDataSize / 0x38;
  MEMORY[0x1F4188790](PropertyDataSize);
  unint64_t v7 = (const AudioStreamRangedDescription *)&v12[-v6];
  HALS_PDPUCPlugIn::ObjectGetPropertyData(*(HALS_PDPUCPlugIn **)(*(void *)v1 + 72), *v2, &v14, 0, 0, &v13, &v12[-v6]);
  if (v4 >= 0x38)
  {
    int v9 = (HALB_FormatList *)(v1 + 8);
    BOOL v10 = (HALB_FormatList *)(v1 + 64);
    if (v5 <= 1) {
      uint64_t v5 = 1;
    }
    else {
      uint64_t v5 = v5;
    }
    do
    {
      HALB_FormatList::AddPhysicalFormat(v9, v7, v8);
      if (v7->mFormat.mFormatID == 1819304813) {
        v7->mFormat.mFormatFlags &= ~0x40u;
      }
      HALB_FormatList::AddPhysicalFormat(v10, v7++, v11);
      --v5;
    }
    while (v5);
  }
}

void sub_1BACD6974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<DSP_HAL_Mock_TestHooks ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_1BACD6A90(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &,applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100](v4);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v3);
  std::__function::__value_func<BOOL ()(applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<BOOL ()(applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(applesauce::CF::DictionaryRef const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1BACD6C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1BACD6D20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BACD6DE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double AMCP::DAL::PCM_File_Handler::get_length_in_frames(AMCP::DAL::PCM_File_Handler *this)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (OpaqueExtAudioFile *)*((void *)this + 6);
  if (!v1)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v6 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      unint64_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)AudioStreamRangedDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)int v29 = 2080;
      *(void *)&v29[2] = "PCM_File_Handler.cpp";
      __int16 v30 = 1024;
      int v31 = 57;
      __int16 v32 = 2080;
      *(void *)uint64_t v33 = "not (m_audio_File != nullptr)";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_File_Handler::GetLengthInFrames: mAudioFile is null", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&ioPropertyDataSize);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"PCM_File_Handler::GetLengthInFrames: mAudioFile is null", (uint64_t)&v12);
    std::logic_error::logic_error(&outPropertyData, &v12);
    outPropertyData.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v14, &outPropertyData);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = -1;
    v14.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v15 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(void *)&v33[6] = "virtual Sample_Time AMCP::DAL::PCM_File_Handler::get_length_in_frames() const";
    long long v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Handler.cpp";
    LODWORD(v35) = 57;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v22);
    long long v25 = v22;
    uint64_t v24 = &unk_1F148AA90;
    uint64_t v26 = v23;
    long long v22 = 0uLL;
    uint64_t v23 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  outPropertyData.__vftable = 0;
  iouint64_t PropertyDataSize = 8;
  Property = (AMCP::Utility::OSStatus_Error_Category *)ExtAudioFileGetProperty(v1, 0x2366726Du, &ioPropertyDataSize, &outPropertyData);
  unsigned int v3 = Property;
  AMCP::Utility::OSStatus_Error_Category::get(Property);
  if (v3)
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v9 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      BOOL v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)AudioStreamRangedDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)int v29 = 2080;
      *(void *)&v29[2] = "PCM_File_Handler.cpp";
      __int16 v30 = 1024;
      int v31 = 61;
      __int16 v32 = 2080;
      *(void *)uint64_t v33 = "the_error.operator BOOL()";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_File_Handler::GetFileLengthInFrames: couldn't get the file's length", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    __cxa_allocate_exception(0x50uLL);
    MEMORY[0x1C1859240](&v24, v3, &AMCP::Utility::OSStatus_Error_Category::get(void)::s_category);
    boost::enable_error_info<std::system_error>((std::runtime_error *)&v14, (uint64_t)&v24);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    long long v35 = "virtual Sample_Time AMCP::DAL::PCM_File_Handler::get_length_in_frames() const";
    uint64_t v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Handler.cpp";
    int v37 = 61;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v22);
    v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(_OWORD *)&v12.__r_.__value_.__r.__words[1] = v22;
    uint64_t v13 = v23;
    long long v22 = 0uLL;
    uint64_t v23 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>();
  }
  return (double)(uint64_t)outPropertyData.__vftable;
}

void sub_1BACD7244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,std::runtime_error a33,uint64_t a34)
{
  if (__p) {
    operator delete(__p);
  }
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl(v35 - 128);
  boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector((uint64_t)&a16);
  std::runtime_error::~runtime_error(&a33);
  if (a11) {
    __cxa_free_exception(v34);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a27);
  _Unwind_Resume(a1);
}

void AMCP::DAL::PCM_File_Factory(void *a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v19, "read");
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a1, (unsigned __int8 *)&v19);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (v2) {
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v19, "write");
  unsigned int v3 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a1, (unsigned __int8 *)&v19);
  unsigned int v4 = v3;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (v4) {
    operator new();
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v19, "com.apple.coreaudio", "AMCP");
  uint64_t v5 = *(NSObject **)v19.__r_.__value_.__l.__data_;
  if (v19.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v19.__r_.__value_.__l.__size_);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    uint64_t v6 = pthread_self();
    mach_port_t v7 = pthread_mach_thread_np(v6);
    LODWORD(v19.__r_.__value_.__l.__data_) = 67109634;
    HIDWORD(v19.__r_.__value_.__r.__words[0]) = v7;
    LOWORD(v19.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v19.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"PCM_File_Handler.cpp";
    WORD1(v19.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(v19.__r_.__value_.__r.__words[2]) = 39;
    _os_log_error_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: PCM_File_Factory must either read or write a file", (uint8_t *)&v19, 0x18u);
  }
  AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v9);
  __cxa_allocate_exception(0x40uLL);
  caulk::make_string((caulk *)"PCM_File_Factory must either read or write a file", (uint64_t)&inPropertyData);
  std::runtime_error::runtime_error(&v8, &inPropertyData);
  std::runtime_error::runtime_error((std::runtime_error *)__p, &v8);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  LODWORD(v18) = -1;
  __p[0] = &unk_1F148A9A8;
  std::logic_error v14 = &unk_1F148A9D0;
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v19, (uint64_t)__p);
  char v20 = "std::shared_ptr<DAL_File_Handler> AMCP::DAL::PCM_File_Factory(const DAL_Settings &)";
  uint64_t v21 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Handler.cpp";
  LODWORD(v22) = 39;
  applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v10);
  std::runtime_error outPropertyData_8 = v10;
  std::logic_error outPropertyData = &unk_1F148AA90;
  uint64_t v25 = v11;
  v10.__vftable = 0;
  v10.__imp_.__imp_ = 0;
  *(void *)&long long v11 = 0;
  boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
}

void sub_1BACDA5B0()
{
}

void sub_1BACDA5BC()
{
}

void sub_1BACDA61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,char a37)
{
  *(void *)(v40 - 144) = v38;
  long long v42 = *(void **)(v40 - 136);
  if (v42)
  {
    *(void *)(v40 - 128) = v42;
    operator delete(v42);
  }
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v40 - 224);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a37);
  std::runtime_error::~runtime_error(&a13);
  if (a34 < 0) {
    operator delete(a29);
  }
  if (v39) {
    __cxa_free_exception(v37);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a16);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::PCM_File_Writer *,std::shared_ptr<AMCP::DAL::DAL_File_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_File_Handler,AMCP::DAL::PCM_File_Writer>,std::allocator<AMCP::DAL::PCM_File_Writer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4AMCP3DAL16DAL_File_HandlerEE27__shared_ptr_default_deleteIS3_NS2_15PCM_File_WriterEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::PCM_File_Writer *,std::shared_ptr<AMCP::DAL::DAL_File_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_File_Handler,AMCP::DAL::PCM_File_Writer>,std::allocator<AMCP::DAL::PCM_File_Writer>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<AMCP::DAL::PCM_File_Writer *,std::shared_ptr<AMCP::DAL::DAL_File_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_File_Handler,AMCP::DAL::PCM_File_Writer>,std::allocator<AMCP::DAL::PCM_File_Writer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::PCM_File_Reader *,std::shared_ptr<AMCP::DAL::DAL_File_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_File_Handler,AMCP::DAL::PCM_File_Reader>,std::allocator<AMCP::DAL::PCM_File_Reader>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4AMCP3DAL16DAL_File_HandlerEE27__shared_ptr_default_deleteIS3_NS2_15PCM_File_ReaderEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::PCM_File_Reader *,std::shared_ptr<AMCP::DAL::DAL_File_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_File_Handler,AMCP::DAL::PCM_File_Reader>,std::allocator<AMCP::DAL::PCM_File_Reader>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<AMCP::DAL::PCM_File_Reader *,std::shared_ptr<AMCP::DAL::DAL_File_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_File_Handler,AMCP::DAL::PCM_File_Reader>,std::allocator<AMCP::DAL::PCM_File_Reader>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t AMCP::DAL::PCM_File_Handler::PCM_File_Handler(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1F1489E00;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "asbd");
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  uint64_t v6 = v5;
  if (SBYTE7(v11) < 0)
  {
    operator delete(__p[0]);
    if (!v6) {
      return a1;
    }
  }
  else if (!v5)
  {
    return a1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "asbd");
  uint64_t v13 = 0;
  mach_port_t v7 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, (unsigned __int8 *)__p);
  if (v7) {
    AMCP::Thing::convert_to<applesauce::CF::DictionaryRef>(&v14, (uint64_t)(v7 + 40));
  }
  else {
    CFDictionaryRef v14 = 0;
  }
  if (SBYTE7(v11) < 0) {
    operator delete(__p[0]);
  }
  dictionary_to_asbd((const applesauce::CF::DictionaryRef *)__p, &v14);
  long long v8 = v11;
  *(_OWORD *)uint64_t v4 = *(_OWORD *)__p;
  *(_OWORD *)(v4 + 16) = v8;
  *(void *)(v4 + 32) = v12;
  if (v14) {
    CFRelease(v14);
  }
  return a1;
}

void sub_1BACDA924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, const void *a18)
{
  applesauce::CF::DictionaryRef::~DictionaryRef(&a18);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v18 + 79) < 0) {
    operator delete(*(void **)(v18 + 56));
  }
  _Unwind_Resume(a1);
}

void *___Z28AudioStatisticsLibraryLoaderv_block_invoke_6808()
{
  uint64_t result = dlopen("/usr/lib/libAudioStatistics.dylib", 1);
  if (result)
  {
    uint64_t v1 = result;
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(result, "CreateSharedCAReportingClient");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientCreateReporterID");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientCreateReporterIDFromSessionID");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientCreatePerformanceReporterID");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientStartReporter");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientStopReporter");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientSetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientGetAudioServiceType");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientSetConfiguration");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientCopyConfiguration");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t (*)(void, void, void, void))dlsym(v1, "CAReportingClientSendMessage");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = dlsym(v1, "CAReportingClientSendSingleMessage");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)dlsym(v1, "CAReportingClientDestroyReporterID");
    uint64_t result = dlsym(v1, "CAReportingClientRequestMessage");
    AudioStatisticsLibraryLoader(void)::libSyuint64_t m = (uint64_t)result;
  }
  return result;
}

void HALS_System::StartScope::~StartScope(HALS_System::StartScope *this)
{
  HALS_System::StartScope::~StartScope(this);

  JUMPOUT(0x1C1859840);
}

{
  ADS::Simulator *v1;
  unsigned char *v2;
  unsigned char *v3;
  int64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t i;
  ADS::BaseObject *v8;
  ADS::Device *v9;
  unsigned __int8 v10;
  uint64_t v11;
  char v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15[2];
  uint64_t v16;
  std::__shared_weak_count *v17;
  void (**p_block)(HALS_NotificationManager *);
  void (*block)(HALS_NotificationManager *);
  uint64_t v20;
  uint64_t v21;

  uint64_t v21 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F146B8F8;
  if (*((_DWORD *)this + 2) == 1)
  {
    block_on_all_queues(0);
    block_on_all_queues(0);
    v15[0] = 0;
    v15[1] = 0;
    HALS_System::GetInstance(&v16, 2, v15);
    uint64_t v1 = (ADS::Simulator *)v17;
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    unsigned int v3 = *(unsigned char **)(ADS::Simulator::sInstance + 144);
    uint64_t v2 = *(unsigned char **)(ADS::Simulator::sInstance + 152);
    uint64_t v4 = v2 - v3;
    if (v2 == v3)
    {
      uint64_t v5 = 0;
    }
    else
    {
      if (v4 < 0) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v5 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v4 >> 2);
      uint64_t v1 = (ADS::Simulator *)memmove(v5, v3, v4);
      uint64_t v6 = 4 * (v4 >> 2);
      if (v6)
      {
        for (unsigned int i = 0; i != v6; i += 4)
        {
          std::logic_error v9 = (ADS::Device *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*(unsigned int *)&v5[i]);
          if (v9) {
            ADS::Simulator::RemoveDevice((ADS::Simulator *)ADS::Simulator::sInstance, v9);
          }
          ADS::ObjectManager::ReleaseObject(v9, v8);
        }
      }
    }
    while (1)
    {
      ADS::Simulator::FlushAllQueues(v1);
      if (!ADS::Simulator::sServerHighPriorityQueue) {
        break;
      }
      std::runtime_error v10 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerHighPriorityQueue + 33));
      long long v11 = ADS::Simulator::sServerDefaultPriorityQueue;
      if (ADS::Simulator::sServerDefaultPriorityQueue)
      {
        uint64_t v12 = v10 & 1;
LABEL_18:
        uint64_t v13 = atomic_load((unsigned __int8 *)(v11 + 33));
        if ((v12 & 1) == 0 && (v13 & 1) == 0)
        {
LABEL_22:
          if (v5) {
            operator delete(v5);
          }
          block_on_all_queues(1);
          if (atomic_load_explicit((atomic_ullong *volatile)&HALS_NotificationManager::sInitialized, memory_order_acquire) != -1)
          {
            block = HALS_NotificationManager::Initialize;
            p_block = &block;
            std::__call_once(&HALS_NotificationManager::sInitialized, &p_block, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>);
          }
          block = (void (*)(HALS_NotificationManager *))HALS_NotificationManager::sObjectListLock;
          LODWORD(v20) = HALB_Mutex::Lock((HALB_Mutex *)HALS_NotificationManager::sObjectListLock);
          CFDictionaryRef v14 = HALS_NotificationManager::sObjectList;
          if (HALS_NotificationManager::sObjectList)
          {
            p_block = (void (**)(HALS_NotificationManager *))HALS_NotificationManager::sObjectList;
            std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_block);
            MEMORY[0x1C1859840](v14, 0x20C40960023A9);
          }
          operator new();
        }
      }
      else if ((v10 & 1) == 0)
      {
        goto LABEL_22;
      }
    }
    long long v11 = ADS::Simulator::sServerDefaultPriorityQueue;
    if (!ADS::Simulator::sServerDefaultPriorityQueue) {
      goto LABEL_22;
    }
    uint64_t v12 = 0;
    goto LABEL_18;
  }
}

void sub_1BACDB16C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a2)
  {
    MEMORY[0x1C1859840](v29, 0x10A1C40D646F767);
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&a24);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void block_on_all_queues(int a1)
{
  do
  {
    uint64_t v1 = (ADS::Simulator *)pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    ADS::Simulator::FlushAllQueues(v1);
    pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
    AMCP::Utility::Dispatch_Queue::flush_all_work((AMCP::Utility::Dispatch_Queue *)HALS_ObjectMap::sNormalPriorityQueue);
    v55[0] = 0;
    v55[1] = 0;
    HALS_System::GetInstance(&v56, 0, v55);
    uint64_t v2 = v56;
    if (v56)
    {
      unsigned int NumberDevices = HALS_System::GetNumberDevices(v56, 2, 1, 0);
      LODWORD(v60[0]) = NumberDevices;
      __x[0] = 0;
      std::vector<unsigned int>::vector(&v58, NumberDevices, __x);
      HALS_System::GetDeviceList(v2, NumberDevices, (unsigned int *)v60, (uint64_t)v58.__begin_, 2, 1, 0);
      if (LODWORD(v60[0]))
      {
        unint64_t v4 = 0;
        uint64_t v5 = 4 * LODWORD(v60[0]);
        do
        {
          uint64_t v6 = (HALS_IODevice *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)v58.__begin_[v4 / 4]);
          long long v8 = v6;
          if (v6)
          {
            uint64_t v9 = HALS_IODevice::CopyIOEngine(v6);
            std::runtime_error v10 = (HALS_ObjectMap *)v9;
            if (v9) {
              (*(void (**)(uint64_t))(*(void *)v9 + 304))(v9);
            }
            (*(void (**)(HALS_ObjectMap *))(*(void *)v8 + 232))(v8);
            HALS_ObjectMap::ReleaseObject(v10, v11);
          }
          HALS_ObjectMap::ReleaseObject(v8, v7);
          v4 += 4;
        }
        while (v5 != v4);
      }
      *(void *)__x = 0;
      std::string::size_type v79 = __x;
      uint64_t v80 = 0x4002000000;
      long long v81 = __Block_byref_object_copy__6832;
      uint64_t v82 = __Block_byref_object_dispose__6833;
      uint64_t v84 = 0;
      uint64_t v85 = 0;
      long long v83 = 0;
      uint64_t v70 = 0;
      double v71 = &v70;
      uint64_t v72 = 0x4002000000;
      std::string::size_type v73 = __Block_byref_object_copy__49_6834;
      uint64_t v74 = __Block_byref_object_dispose__50_6835;
      uint64_t v76 = 0;
      uint64_t v77 = 0;
      uint64_t v75 = 0;
      uint64_t v63 = MEMORY[0x1E4F143A8];
      uint64_t v64 = 0x40000000;
      std::string::size_type v65 = ___ZNK11HALS_System14FlushAllQueuesEv_block_invoke;
      int v66 = &unk_1E62331F8;
      int v68 = &v70;
      unint64_t v69 = (void **)v2;
      uint64_t v67 = __x;
      uint64_t v12 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
      HALB_CommandGate::ExecuteCommand(v12, (uint64_t)&v63);
      uint64_t v13 = *((void *)v79 + 5);
      uint64_t v14 = *((void *)v79 + 6);
      while (v13 != v14)
      {
        (*(void (**)(void))(**(void **)v13 + 8))();
        (*(void (**)(void))(**(void **)v13 + 208))();
        v13 += 8;
      }
      uint64_t v15 = (uint64_t *)v71[5];
      uint64_t v16 = (uint64_t *)v71[6];
      while (v15 != v16)
      {
        (*(void (**)(void))(*(void *)*v15 + 8))();
        uint64_t v17 = *v15++;
        AMCP::Utility::Dispatch_Queue::flush_all_work((AMCP::Utility::Dispatch_Queue *)(v17 + 376));
      }
      AMCP::Utility::Dispatch_Queue::flush_all_work(*(AMCP::Utility::Dispatch_Queue **)(*(void *)(v2 + 1408) + 16));
      AMCP::Utility::Dispatch_Queue::flush_all_work((AMCP::Utility::Dispatch_Queue *)(v2 + 896));
      AMCP::Utility::Dispatch_Queue::flush_all_work(*(AMCP::Utility::Dispatch_Queue **)(v2 + 240));
      AMCP::Utility::Dispatch_Queue::flush_all_work((AMCP::Utility::Dispatch_Queue *)(v2 + 256));
      AMCP::Utility::Dispatch_Queue::flush_all_work((AMCP::Utility::Dispatch_Queue *)(v2 + 576));
      uint64_t v18 = *(AMCP::Utility::Dispatch_Queue ***)(v2 + 1480);
      if (v18 && *v18) {
        AMCP::Utility::Dispatch_Queue::flush_all_work(*v18);
      }
      _Block_object_dispose(&v70, 8);
      std::string::size_type v61 = (void **)&v75;
      std::vector<HALS_Releaser<HALS_Client>>::__destroy_vector::operator()[abi:ne180100](&v61);
      _Block_object_dispose(__x, 8);
      HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(&v83, v19);
      if (v58.__begin_)
      {
        v58.__end_ = v58.__begin_;
        operator delete(v58.__begin_);
      }
    }
    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    if (ADS::Simulator::sServerHighPriorityQueue)
    {
      unsigned __int8 v20 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerHighPriorityQueue + 33));
      int v21 = v20 & 1;
    }
    else
    {
      int v21 = 0;
    }
    if (ADS::Simulator::sServerDefaultPriorityQueue)
    {
      int v22 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 33));
      v21 |= v22;
    }
    pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
    int v23 = atomic_load((unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 33));
    v60[0] = 0;
    v60[1] = 0;
    HALS_System::GetInstance(&v61, 0, v60);
    int v24 = v21 | v23;
    uint64_t v25 = v61;
    if (v61)
    {
      unsigned int v26 = HALS_System::GetNumberDevices((uint64_t)v61, 2, 1, 0);
      unsigned int v59 = v26;
      __x[0] = 0;
      std::vector<unsigned int>::vector(&v58, v26, __x);
      HALS_System::GetDeviceList((uint64_t)v25, v26, &v59, (uint64_t)v58.__begin_, 2, 1, 0);
      if (v59)
      {
        unint64_t v27 = 0;
        uint64_t v28 = 4 * v59;
        do
        {
          uint64_t v29 = (HALS_IODevice *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)v58.__begin_[v27 / 4]);
          int v31 = v29;
          if (v29)
          {
            uint64_t v32 = HALS_IODevice::CopyIOEngine(v29);
            uint64_t v33 = (HALS_ObjectMap *)v32;
            if (v32) {
              v24 |= (*(uint64_t (**)(uint64_t))(*(void *)v32 + 312))(v32);
            }
            int v34 = (*(uint64_t (**)(HALS_ObjectMap *))(*(void *)v31 + 240))(v31);
            HALS_ObjectMap::ReleaseObject(v33, v35);
            v24 |= v34;
          }
          HALS_ObjectMap::ReleaseObject(v31, v30);
          v27 += 4;
        }
        while (v28 != v27);
      }
      pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
      if (ADS::Simulator::sServerHighPriorityQueue)
      {
        unsigned __int8 v36 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerHighPriorityQueue + 33));
        int v37 = v36 & 1;
      }
      else
      {
        int v37 = 0;
      }
      if (ADS::Simulator::sServerDefaultPriorityQueue)
      {
        int v38 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 33));
        v37 |= v38;
      }
      pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
      int v39 = atomic_load((unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 33));
      uint64_t v40 = v61;
      *(void *)__x = 0;
      std::string::size_type v79 = __x;
      uint64_t v80 = 0x4002000000;
      long long v81 = __Block_byref_object_copy__6832;
      uint64_t v82 = __Block_byref_object_dispose__6833;
      uint64_t v84 = 0;
      uint64_t v85 = 0;
      long long v83 = 0;
      uint64_t v70 = 0;
      double v71 = &v70;
      uint64_t v72 = 0x4002000000;
      std::string::size_type v73 = __Block_byref_object_copy__49_6834;
      uint64_t v74 = __Block_byref_object_dispose__50_6835;
      uint64_t v76 = 0;
      uint64_t v77 = 0;
      uint64_t v75 = 0;
      uint64_t v63 = MEMORY[0x1E4F143A8];
      uint64_t v64 = 0x40000000;
      std::string::size_type v65 = ___ZNK11HALS_System29DoAnyQueuesHaveWorkAfterFlushEv_block_invoke;
      int v66 = &unk_1E6233220;
      int v68 = &v70;
      unint64_t v69 = v61;
      uint64_t v67 = __x;
      int v41 = (HALB_Mutex *)(*((uint64_t (**)(void **))*v61 + 7))(v61);
      HALB_CommandGate::ExecuteCommand(v41, (uint64_t)&v63);
      uint64_t v43 = *((void *)v79 + 5);
      uint64_t v42 = *((void *)v79 + 6);
      if (v43 == v42)
      {
        int v44 = 0;
      }
      else
      {
        int v44 = 0;
        do
        {
          v44 |= (*(uint64_t (**)(void))(**(void **)v43 + 216))();
          v43 += 8;
        }
        while (v43 != v42);
      }
      for (unsigned int i = (uint64_t *)v71[5]; i != (uint64_t *)v71[6]; ++i)
      {
        uint64_t v46 = *i;
        int v47 = atomic_load((unsigned __int8 *)(v46 + 409));
        v44 |= v47;
      }
      int v48 = atomic_load((unsigned __int8 *)v40 + 929);
      int v49 = v44 | v48;
      uint64_t v50 = (uint64_t *)v40[185];
      if (v50)
      {
        uint64_t v51 = *v50;
        if (v51)
        {
          unsigned __int8 v52 = atomic_load((unsigned __int8 *)(v51 + 33));
          LODWORD(v51) = v52 & 1;
        }
        v49 |= v51;
      }
      _Block_object_dispose(&v70, 8);
      uint64_t v86 = (void **)&v75;
      std::vector<HALS_Releaser<HALS_Client>>::__destroy_vector::operator()[abi:ne180100](&v86);
      _Block_object_dispose(__x, 8);
      HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(&v83, v53);
      if (v58.__begin_)
      {
        v58.__end_ = v58.__begin_;
        operator delete(v58.__begin_);
      }
      v24 |= v49 | v37 | v39;
    }
    if (v62) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v62);
    }
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
  }
  while ((a1 & v24 & 1) != 0);
}

void sub_1BACDBA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(exception_object);
}

void HALS_System::GetInstance(void *a1, int a2, uint64_t *a3)
{
  {
    std::runtime_error v10 = a3;
    int v8 = a2;
    a2 = v8;
    a3 = v10;
    if (v9)
    {
      HALS_System::GetInstance(HALS_System::GetInstanceSetting,std::shared_ptr<HALS_System>)::sInstance = 0;
      qword_1EBFFA1B8 = 0;
      a2 = v8;
      a3 = v10;
    }
  }
  switch(a2)
  {
    case 3:
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      std::atomic_store[abi:ne180100]<HALS_System>(&v11);
      uint64_t v5 = v12;
      if (!v12) {
        break;
      }
      goto LABEL_10;
    case 2:
      (*(void (**)(uint64_t))(*(void *)HALS_System::GetInstance(HALS_System::GetInstanceSetting,std::shared_ptr<HALS_System>)::sInstance
                                      + 8))(HALS_System::GetInstance(HALS_System::GetInstanceSetting,std::shared_ptr<HALS_System>)::sInstance);
      break;
    case 1:
      uint64_t v4 = a3[1];
      uint64_t v13 = *a3;
      uint64_t v14 = (std::__shared_weak_count *)v4;
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
      std::atomic_store[abi:ne180100]<HALS_System>(&v13);
      uint64_t v5 = v14;
      if (v14) {
LABEL_10:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      break;
  }
  sp_mut = std::__get_sp_mut(&HALS_System::GetInstance(HALS_System::GetInstanceSetting,std::shared_ptr<HALS_System>)::sInstance);
  std::__sp_mut::lock(sp_mut);
  uint64_t v7 = qword_1EBFFA1B8;
  *a1 = HALS_System::GetInstance(HALS_System::GetInstanceSetting,std::shared_ptr<HALS_System>)::sInstance;
  a1[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }

  std::__sp_mut::unlock(sp_mut);
}

void sub_1BACDBCD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BACDBCEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (!a14) {
    JUMPOUT(0x1BACDBCE4);
  }
  JUMPOUT(0x1BACDBCE0);
}

void std::atomic_store[abi:ne180100]<HALS_System>(uint64_t *a1)
{
  sp_mut = std::__get_sp_mut(&HALS_System::GetInstance(HALS_System::GetInstanceSetting,std::shared_ptr<HALS_System>)::sInstance);
  std::__sp_mut::lock(sp_mut);
  uint64_t v3 = HALS_System::GetInstance(HALS_System::GetInstanceSetting,std::shared_ptr<HALS_System>)::sInstance;
  uint64_t v4 = a1[1];
  HALS_System::GetInstance(HALS_System::GetInstanceSetting,std::shared_ptr<HALS_System>)::sInstance = *a1;
  *a1 = v3;
  uint64_t v5 = qword_1EBFFA1B8;
  qword_1EBFFA1B8 = v4;
  a1[1] = v5;

  std::__sp_mut::unlock(sp_mut);
}

uint64_t HALS_System::GetNumberDevices(uint64_t a1, int a2, char a3, HALS_Client *a4)
{
  uint64_t v20 = 0;
  int v21 = &v20;
  uint64_t v22 = 0x4002000000;
  int v23 = __Block_byref_object_copy__6832;
  int v24 = __Block_byref_object_dispose__6833;
  memset(v25, 0, sizeof(v25));
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 0x40000000;
  v19[2] = ___ZNK11HALS_System16GetNumberDevicesENS_14DeviceListKindEbP11HALS_Client_block_invoke;
  v19[3] = &unk_1E6232AD0;
  v19[4] = &v20;
  unsigned char v19[5] = a1;
  uint64_t v7 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v7, (uint64_t)v19);
  int v8 = (HALS_DeviceManager **)v21[5];
  int v9 = (HALS_DeviceManager **)v21[6];
  if (v8 != v9)
  {
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      HALS_DeviceManager::CopyDeviceList(*v8, (HALS_DeviceManager::BasicDeviceList *)&v16, a3, a4);
      uint64_t v12 = v16;
      uint64_t v13 = v17;
      while (v12 != v13)
      {
        if (a2 == 1)
        {
          if ((*(uint64_t (**)(void))(*(void *)*v12 + 224))()) {
            goto LABEL_11;
          }
LABEL_10:
          uint64_t v10 = (v10 + 1);
          goto LABEL_11;
        }
        if (a2 || ((*(uint64_t (**)(void))(*(void *)*v12 + 224))() & 1) != 0) {
          goto LABEL_10;
        }
LABEL_11:
        ++v12;
      }
      HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v16, v11);
      if (++v8 == v9) {
        goto LABEL_15;
      }
    }
  }
  uint64_t v10 = 0;
LABEL_15:
  _Block_object_dispose(&v20, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v25, v14);
  return v10;
}

void sub_1BACDBF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v11, v13);
  _Unwind_Resume(a1);
}

void HALS_System::GetDeviceList(uint64_t a1, unsigned int a2, unsigned int *a3, uint64_t a4, int a5, char a6, HALS_Client *a7)
{
  if (a2)
  {
    uint64_t v28 = 0;
    uint64_t v29 = &v28;
    uint64_t v30 = 0x4002000000;
    int v31 = __Block_byref_object_copy__6832;
    uint64_t v32 = __Block_byref_object_dispose__6833;
    memset(v33, 0, sizeof(v33));
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 0x40000000;
    v27[2] = ___ZNK11HALS_System13GetDeviceListEjRjPjNS_14DeviceListKindEbP11HALS_Client_block_invoke;
    v27[3] = &unk_1E6232B98;
    v27[4] = &v28;
    v27[5] = a1;
    uint64_t v13 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    HALB_CommandGate::ExecuteCommand(v13, (uint64_t)v27);
    *a3 = 0;
    uint64_t v14 = (HALS_DeviceManager **)v29[5];
    uint64_t v15 = (HALS_DeviceManager **)v29[6];
    while (1)
    {
      if (v14 == v15)
      {
LABEL_20:
        _Block_object_dispose(&v28, 8);
        HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v33, v23);
        return;
      }
      int v24 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      HALS_DeviceManager::CopyDeviceList(*v14, (HALS_DeviceManager::BasicDeviceList *)&v24, a6, a7);
      uint64_t v18 = v24;
      uint64_t v17 = v25;
LABEL_5:
      if (v18 != v17) {
        break;
      }
LABEL_18:
      unsigned int v22 = *a3;
      HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v24, v16);
      if (v22 >= a2) {
        goto LABEL_20;
      }
      ++v14;
    }
    while (1)
    {
      if (a5 == 1)
      {
        if ((*(uint64_t (**)(void))(*(void *)*v18 + 224))()) {
          goto LABEL_17;
        }
      }
      else if (!a5 && ((*(uint64_t (**)(void))(*(void *)*v18 + 224))() & 1) == 0)
      {
LABEL_17:
        ++v18;
        goto LABEL_5;
      }
      uint64_t v19 = (uint64_t)*v18++;
      *(_DWORD *)(a4 + 4 * *a3) = *(_DWORD *)(v19 + 16);
      unsigned int v20 = *a3 + 1;
      *a3 = v20;
      if (v20 >= a2 || v18 == v17) {
        goto LABEL_18;
      }
    }
  }
  *a3 = 0;
}

void sub_1BACDC1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, HALS_ObjectMap ***a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  _Block_object_dispose(&a19, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(a9, v20);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__6832(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__6833(uint64_t a1, HALS_Object *a2)
{
}

__n128 __Block_byref_object_copy__49_6834(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__50_6835(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<HALS_Releaser<HALS_Client>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZNK11HALS_System29DoAnyQueuesHaveWorkAfterFlushEv_block_invoke(void *a1, HALS_Object *a2)
{
  uint64_t v3 = a1[6];
  uint64_t v4 = *(void *)(a1[4] + 8);
  if (v4 + 40 != v3 + 1232)
  {
    std::vector<long long>::__assign_with_size[abi:ne180100]<long long *,long long *>((char *)(v4 + 40), *(char **)(v3 + 1232), *(void *)(v3 + 1240), (uint64_t)(*(void *)(v3 + 1240) - *(void *)(v3 + 1232)) >> 3);
    uint64_t v4 = *(void *)(a1[4] + 8);
  }
  uint64_t v5 = *(HALS_ObjectMap ***)(v4 + 40);
  uint64_t v6 = *(HALS_ObjectMap ***)(v4 + 48);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    HALS_ObjectMap::RetainObject(v7, a2);
  }
  uint64_t v8 = *(void *)(a1[5] + 8) + 40;
  if (v8 != v3 + 1288)
  {
    int v9 = *(HALS_Object **)(v3 + 1288);
    uint64_t v10 = *(HALS_ObjectMap ***)(v3 + 1296);
    std::vector<HALS_Releaser<HALS_Client>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*>(v8, v9, v10, ((char *)v10 - (char *)v9) >> 3);
  }
}

void std::vector<HALS_Releaser<HALS_Client>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (HALS_Object **)*a1;
  if (*v2)
  {
    std::vector<HALS_Releaser<HALS_Client>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(HALS_ObjectMap ***this, HALS_Object *a2)
{
  uint64_t v3 = *this;
  if (*this != this[1])
  {
    do
      HALS_ObjectMap::ReleaseObject(*v3++, a2);
    while (v3 != this[1]);
    uint64_t v3 = *this;
  }
  if (v3)
  {
    this[1] = v3;
    operator delete(v3);
  }
}

void std::vector<HALS_Releaser<HALS_Client>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, HALS_Object *a2)
{
  for (unsigned int i = *(HALS_Object **)(a1 + 8); i != a2; unsigned int i = (HALS_Object *)((char *)i - 8))
  {
    uint64_t v5 = (HALS_ObjectMap *)*((void *)i - 1);
    HALS_ObjectMap::ReleaseObject(v5, a2);
  }
  *(void *)(a1 + 8) = a2;
}

void std::vector<HALS_Releaser<HALS_Client>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*>(uint64_t a1, HALS_Object *a2, HALS_ObjectMap **a3, unint64_t a4)
{
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = *(HALS_Object **)a1;
  if (a4 > (v8 - *(void *)a1) >> 3)
  {
    if (v10)
    {
      std::vector<HALS_Releaser<HALS_Client>>::__base_destruct_at_end[abi:ne180100](a1, *(HALS_Object **)a1);
      operator delete(*(void **)a1);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<__CFString const*>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_Releaser<HALS_Client>>,HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*>(v9, a2, a3, *(HALS_ObjectMap ***)(a1 + 8));
    goto LABEL_13;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v10) >> 3;
  if (v14 < a4)
  {
    uint64_t v15 = (HALS_Object *)((char *)a2 + 8 * v14);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HALS_Releaser<HALS_Client> *,HALS_Releaser<HALS_Client> *,HALS_Releaser<HALS_Client> *>((HALS_ObjectMap **)a2, v15, (HALS_ObjectMap **)v10);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_Releaser<HALS_Client>>,HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*>(v9, v15, a3, *(HALS_ObjectMap ***)(a1 + 8));
LABEL_13:
    *(void *)(a1 + 8) = v13;
    return;
  }
  uint64_t v16 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HALS_Releaser<HALS_Client> *,HALS_Releaser<HALS_Client> *,HALS_Releaser<HALS_Client> *>((HALS_ObjectMap **)a2, (HALS_Object *)a3, (HALS_ObjectMap **)v10);

  std::vector<HALS_Releaser<HALS_Client>>::__base_destruct_at_end[abi:ne180100](a1, (HALS_Object *)v16);
}

void sub_1BACDC564(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BACDC56C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

HALS_ObjectMap **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HALS_Releaser<HALS_Client> *,HALS_Releaser<HALS_Client> *,HALS_Releaser<HALS_Client> *>(HALS_ObjectMap **a1, HALS_Object *a2, HALS_ObjectMap **a3)
{
  if (a1 != (HALS_ObjectMap **)a2)
  {
    uint64_t v5 = a1;
    do
    {
      uint64_t v6 = *a3;
      uint64_t v7 = *v5++;
      *a3++ = v7;
      HALS_ObjectMap::RetainObject(v7, a2);
      HALS_ObjectMap::ReleaseObject(v6, v8);
    }
    while (v5 != (HALS_ObjectMap **)a2);
  }
  return a3;
}

HALS_ObjectMap **std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_Releaser<HALS_Client>>,HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*>(uint64_t a1, HALS_Object *a2, HALS_ObjectMap **a3, HALS_ObjectMap **a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  unint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != (HALS_Object *)a3)
  {
    uint64_t v6 = (HALS_ObjectMap **)a2;
    do
    {
      uint64_t v7 = *v6;
      *uint64_t v4 = *v6;
      HALS_ObjectMap::RetainObject(v7, a2);
      ++v6;
      uint64_t v4 = ++v12;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HALS_Releaser<HALS_Client>>,HALS_Releaser<HALS_Client>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9, a2);
  return v4;
}

void sub_1BACDC660(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HALS_Releaser<HALS_Client>>,HALS_Releaser<HALS_Client>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1, HALS_Object *a2)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = **(void **)(a1 + 16);
    uint64_t v5 = **(void **)(a1 + 8);
    while (v4 != v5)
    {
      uint64_t v6 = *(HALS_ObjectMap **)(v4 - 8);
      v4 -= 8;
      HALS_ObjectMap::ReleaseObject(v6, a2);
    }
  }
  return a1;
}

void ___ZNK11HALS_System14FlushAllQueuesEv_block_invoke(void *a1, HALS_Object *a2)
{
  uint64_t v3 = a1[6];
  uint64_t v4 = *(void *)(a1[4] + 8);
  if (v4 + 40 != v3 + 1232)
  {
    std::vector<long long>::__assign_with_size[abi:ne180100]<long long *,long long *>((char *)(v4 + 40), *(char **)(v3 + 1232), *(void *)(v3 + 1240), (uint64_t)(*(void *)(v3 + 1240) - *(void *)(v3 + 1232)) >> 3);
    uint64_t v4 = *(void *)(a1[4] + 8);
  }
  uint64_t v5 = *(HALS_ObjectMap ***)(v4 + 40);
  uint64_t v6 = *(HALS_ObjectMap ***)(v4 + 48);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    HALS_ObjectMap::RetainObject(v7, a2);
  }
  uint64_t v8 = *(void *)(a1[5] + 8) + 40;
  if (v8 != v3 + 1288)
  {
    uint64_t v9 = *(HALS_Object **)(v3 + 1288);
    char v10 = *(HALS_ObjectMap ***)(v3 + 1296);
    std::vector<HALS_Releaser<HALS_Client>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*>(v8, v9, v10, ((char *)v10 - (char *)v9) >> 3);
  }
}

void ___ZNK11HALS_System13GetDeviceListEjRjPjNS_14DeviceListKindEbP11HALS_Client_block_invoke(uint64_t a1)
{
}

void sub_1BACDC7B4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_System::_CopyDeviceManagerList(HALS_System *this, HALS_System::BasicDeviceManagerList *a2)
{
  if ((HALS_System *)((char *)this + 1232) != a2) {
    std::vector<long long>::__assign_with_size[abi:ne180100]<long long *,long long *>((char *)a2, *((char **)this + 154), *((void *)this + 155), (uint64_t)(*((void *)this + 155) - *((void *)this + 154)) >> 3);
  }
  uint64_t v4 = *(HALS_ObjectMap ***)a2;
  uint64_t v3 = (HALS_ObjectMap **)*((void *)a2 + 1);
  while (v4 != v3)
  {
    uint64_t v5 = *v4++;
    HALS_ObjectMap::RetainObject(v5, a2);
  }
}

void ___ZNK11HALS_System16GetNumberDevicesENS_14DeviceListKindEbP11HALS_Client_block_invoke(uint64_t a1)
{
}

void sub_1BACDC854(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_System::HandleOwnedObjectGroupPropertiesChanged(HALS_System *this, unsigned int a2, uint64_t a3, unsigned int a4, const unsigned int *a5, const unsigned int *a6, int a7, const AudioObjectPropertyAddress *a8, BOOL a9)
{
  if (!a7)
  {
    unsigned int v20 = 0;
    *(_OWORD *)__p = 0u;
    long long v25 = 0u;
    goto LABEL_35;
  }
  uint64_t v11 = 0;
  char v12 = 0;
  unsigned int v13 = 0;
  unsigned int v14 = 0;
  char v15 = 0;
  char v16 = 0;
  while (2)
  {
    uint64_t v17 = (uint64_t)&a8[v11];
    while (1)
    {
      int v19 = *(_DWORD *)v17;
      v17 += 12;
      int v18 = v19;
      if (v19 > 1886548770) {
        break;
      }
      if (v18 != 1684370979)
      {
        if (v18 == 1668049699) {
          uint64_t v17 = 1;
        }
        else {
          uint64_t v17 = v14;
        }
        if (v18 == 1651472419) {
          char v15 = 1;
        }
        else {
          unsigned int v14 = v17;
        }
        goto LABEL_22;
      }
LABEL_8:
      ++v11;
      char v16 = 1;
      if (a7 == v11)
      {
        *(_OWORD *)__p = 0u;
        long long v25 = 0u;
LABEL_24:
        *(void *)&v23.signed int mSelector = 0x676C6F6264657623;
        v23.uint64_t mElement = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)__p, &v23, (const AudioObjectPropertyAddress *)v17);
        goto LABEL_25;
      }
    }
    if (v18 == 1919186467) {
      goto LABEL_8;
    }
    if (v18 == 1886548771) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v13;
    }
    if (v18 == 1953526563) {
      char v12 = 1;
    }
    else {
      unsigned int v13 = v17;
    }
LABEL_22:
    if (++v11 != a7) {
      continue;
    }
    break;
  }
  *(_OWORD *)__p = 0u;
  long long v25 = 0u;
  if (v16) {
    goto LABEL_24;
  }
LABEL_25:
  if (v15)
  {
    *(void *)&v23.signed int mSelector = 0x676C6F62626F7823;
    v23.uint64_t mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)__p, &v23, (const AudioObjectPropertyAddress *)v17);
  }
  if (v14)
  {
    *(void *)&v23.signed int mSelector = 0x676C6F62636C6B23;
    v23.uint64_t mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)__p, &v23, (const AudioObjectPropertyAddress *)v17);
  }
  if (v13)
  {
    *(void *)&v23.signed int mSelector = 0x676C6F6270727323;
    v23.uint64_t mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)__p, &v23, (const AudioObjectPropertyAddress *)v17);
  }
  if (v12)
  {
    *(void *)&v23.signed int mSelector = 0x676C6F6274707323;
    v23.uint64_t mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)__p, &v23, (const AudioObjectPropertyAddress *)v17);
  }
  unsigned int v20 = (AudioObjectPropertyAddress *)__p[0];
LABEL_35:
  if (v20 != __p[1])
  {
    int v21 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    unsigned int v22 = -1431655765 * ((unint64_t)((char *)__p[1] - (char *)v20) >> 2);
    if (a9) {
      HALS_Object::PropertiesChanged_Sync(this, v21, a3, v22, v20);
    }
    else {
      HALS_Object::PropertiesChanged(this, v21, a3, v22, v20);
    }
  }
  if (v20)
  {
    operator delete(v20);
  }
}

void sub_1BACDCAD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void HALS_System::HandleOwnedObjectPropertiesChanged(HALS_System *this, const HALS_Object *a2, uint64_t a3, int a4, const AudioObjectPropertyAddress *a5, int a6)
{
  if (!a4)
  {
    int v24 = 0;
    *(_OWORD *)__p = 0u;
    long long v29 = 0u;
    goto LABEL_41;
  }
  uint64_t v9 = 0;
  char v10 = 0;
  char v11 = 0;
  int v12 = 0;
  int v13 = 0;
  char v14 = 0;
  char v15 = 0;
  uint64_t v16 = 1953526563;
  while (2)
  {
    uint64_t v17 = &a5[v9];
    while (1)
    {
      int mSelector = v17->mSelector;
      ++v17;
      int v18 = mSelector;
      if (mSelector > 1886152482) {
        break;
      }
      if (v18 != 1684370979)
      {
        if (v18 == 1668049699) {
          int v20 = 1;
        }
        else {
          int v20 = v13;
        }
        if (v18 == 1651472419) {
          char v14 = 1;
        }
        else {
          int v13 = v20;
        }
        goto LABEL_25;
      }
LABEL_9:
      ++v9;
      char v15 = 1;
      if (a4 == v9)
      {
        *(_OWORD *)__p = 0u;
        long long v29 = 0u;
LABEL_27:
        *(void *)&v27.int mSelector = 0x676C6F6264657623;
        v27.uint64_t mElement = 0;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)__p, &v27, (const AudioObjectPropertyAddress *)0x74707323);
        platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(v22);
        if ((*(unsigned int (**)(uint64_t *))(*platform_behaviors + 24))(platform_behaviors) == 1)
        {
          *(void *)&v27.int mSelector = 0x676C6F6272647623;
          v27.uint64_t mElement = 0;
          CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)__p, &v27, (const AudioObjectPropertyAddress *)v16);
        }
        goto LABEL_29;
      }
    }
    if (v18 <= 1919186466)
    {
      if (v18 == 1886548771) {
        int v21 = 1;
      }
      else {
        int v21 = v12;
      }
      if (v18 == 1886152483) {
        char v10 = 1;
      }
      else {
        int v12 = v21;
      }
      goto LABEL_25;
    }
    if (v18 == 1919186467) {
      goto LABEL_9;
    }
    if (v18 == 1953526563) {
      char v11 = 1;
    }
LABEL_25:
    if (++v9 != a4) {
      continue;
    }
    break;
  }
  *(_OWORD *)__p = 0u;
  long long v29 = 0u;
  if (v15) {
    goto LABEL_27;
  }
LABEL_29:
  if (v14)
  {
    *(void *)&v27.int mSelector = 0x676C6F62626F7823;
    v27.uint64_t mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)__p, &v27, (const AudioObjectPropertyAddress *)v16);
  }
  if (v13)
  {
    *(void *)&v27.int mSelector = 0x676C6F62636C6B23;
    v27.uint64_t mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)__p, &v27, (const AudioObjectPropertyAddress *)v16);
  }
  if (v12)
  {
    *(void *)&v27.int mSelector = 0x676C6F6270727323;
    v27.uint64_t mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)__p, &v27, (const AudioObjectPropertyAddress *)v16);
  }
  if (v11)
  {
    *(void *)&v27.int mSelector = 0x676C6F6274707323;
    v27.uint64_t mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)__p, &v27, (const AudioObjectPropertyAddress *)v16);
  }
  if (v10)
  {
    *(void *)&v27.int mSelector = 0x676C6F62706C6723;
    v27.uint64_t mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)__p, &v27, (const AudioObjectPropertyAddress *)v16);
  }
  int v24 = (AudioObjectPropertyAddress *)__p[0];
LABEL_41:
  if (v24 != __p[1])
  {
    long long v25 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
    unsigned int v26 = -1431655765 * ((unint64_t)((char *)__p[1] - (char *)v24) >> 2);
    if (a6) {
      HALS_Object::PropertiesChanged_Sync(this, v25, a3, v26, v24);
    }
    else {
      HALS_Object::PropertiesChanged(this, v25, a3, v26, v24);
    }
  }
  if (v24)
  {
    operator delete(v24);
  }
}

void sub_1BACDCDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_System::WantsOwnedObjectPropertiesChanged(HALS_System *this)
{
  return 1;
}

void HALS_System::SetPropertyData(HALS_System *this, HALS_Object *a2, const AudioObjectPropertyAddress *a3, uint64_t a4, _DWORD *a5, uint64_t a6, _DWORD *a7, HALS_Client *a8)
{
  int v10 = a6;
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1886353255)
  {
    if (mSelector > 1936224867)
    {
      switch(mSelector)
      {
        case 1936224868:
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_System.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4854;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::SetPropertyData: bad property data size for kAudioHardwarePropertyDefaultSystemOutputDevice", buf, 0x12u);
            }
            exception = __cxa_allocate_exception(0x10uLL);
            *(void *)exception = off_1F148A5D8;
            exception[2] = 561211770;
          }
          if (!HALS_ClientEntitlements::HasEntitlementWithBooleanValue((HALS_Client *)((char *)a8 + 288), @"com.apple.private.audio.default-shared-device"))
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_System.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4855;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::SetPropertyData: no entitlement for kAudioHardwarePropertyDefaultSharedOutputDevice", buf, 0x12u);
            }
            uint64_t v76 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v76 = off_1F148A5D8;
            v76[2] = 560492391;
          }
          if (v10 == 4)
          {
            if (*a7 != 1)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_System.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4860;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::SetPropertyData: transient qualifier required for shared device assignment.", buf, 0x12u);
              }
              uint64_t v77 = __cxa_allocate_exception(0x10uLL);
              *(void *)uint64_t v77 = off_1F148A5D8;
              v77[2] = 1852797029;
            }
            uint64_t v17 = (HALS_DefaultDeviceManager *)*((void *)this + 158);
            int v18 = (HALS_ObjectMap *)*a5;
            signed int v19 = 1936224868;
            BOOL v33 = 1;
            goto LABEL_107;
          }
          if (!v10)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_System.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4856;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::SetPropertyData: no qualifier given for shared device assignment.", buf, 0x12u);
            }
            uint64_t v32 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v32 = off_1F148A5D8;
            v32[2] = 1852797029;
          }
          break;
        case 1936483696:
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_System.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4940;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_SetPropertyData: bad property data size for kAudioHardwarePropertySleepingIsAllowed", buf, 0x12u);
            }
            uint64_t v75 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v75 = off_1F148A5D8;
            v75[2] = 561211770;
          }
          if (a8 && (*a5 != 0) != (*((unsigned char *)a8 + 256) != 0))
          {
            *((unsigned char *)a8 + 256) = *a5 != 0;
            v78[0] = MEMORY[0x1E4F143A8];
            v78[1] = 0x40000000;
            v78[2] = ___ZN11HALS_System15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_175;
            v78[3] = &__block_descriptor_tmp_176;
            v78[4] = this;
            v78[5] = a8;
            uint64_t v46 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v46, (uint64_t)v78);
            int v47 = *((_DWORD *)a8 + 4);
            *(void *)AudioStreamRangedDescription buf = MEMORY[0x1E4F143A8];
            *(void *)&uint8_t buf[8] = 0x40000000;
            *(void *)&buf[16] = ___ZNK11HALS_Client33SendSleepingIsAllowedNotificationEv_block_invoke;
            *(void *)&long long v88 = &__block_descriptor_tmp_18_2448;
            DWORD2(v88) = v47;
            LOBYTE(v47) = atomic_load((unsigned __int8 *)a8 + 408);
            if (v47) {
              atomic_store(1u, (unsigned __int8 *)a8 + 409);
            }
            dispatch_async(*((dispatch_queue_t *)a8 + 47), buf);
          }
          break;
        case 1937010031:
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_System.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4894;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_SetPropertyData: bad property data size for kAudioHardwarePropertyMixStereoToMono", buf, 0x12u);
            }
            uint64_t v67 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v67 = off_1F148A5D8;
            v67[2] = 561211770;
          }
          uint64_t v83 = 0;
          uint64_t v84 = &v83;
          uint64_t v85 = 0x2000000000;
          char v86 = *((unsigned char *)this + 1224);
          v80[0] = MEMORY[0x1E4F143A8];
          v80[1] = 0x40000000;
          v80[2] = ___ZN11HALS_System15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
          v80[3] = &unk_1E6233190;
          v80[5] = this;
          void v80[6] = a5;
          v80[4] = &v83;
          int v21 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v21, (uint64_t)v80);
          unsigned int v22 = (CFMutableDictionaryRef **)*((void *)this + 176);
          LODWORD(valuePtr) = *((unsigned __int8 *)v84 + 24);
          *(void *)AudioStreamRangedDescription buf = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
          uint8_t buf[8] = 1;
          HALS_SettingsManager::_WriteSetting(v22, @"System_MixStereoToMono", *(CFPropertyListRef *)buf);
          CACFNumber::~CACFNumber((CACFNumber *)buf);
          if (AMCP::Feature_Flags::run_hybrid_hal(v23, v24))
          {
            uint64_t v25 = *((void *)this + 169);
            if (v25 != *((void *)this + 170))
            {
              uint64_t v26 = MEMORY[0x1E4F143A8];
              do
              {
                int v27 = *(_DWORD *)(*(void *)v25 + 16);
                *(void *)AudioStreamRangedDescription buf = v26;
                *(void *)&uint8_t buf[8] = 0x40000000;
                *(void *)&buf[16] = ___ZNK11HALS_System21update_all_iocontextsEv_block_invoke;
                *(void *)&long long v88 = &__block_descriptor_tmp_140_6889;
                DWORD2(v88) = v27;
                LOBYTE(v27) = atomic_load((unsigned __int8 *)this + 928);
                if (v27) {
                  atomic_store(1u, (unsigned __int8 *)this + 929);
                }
                dispatch_async(*((dispatch_queue_t *)this + 112), buf);
                v25 += 8;
              }
              while (v25 != *((void *)this + 170));
            }
          }
          uint64_t v28 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
          if (a8) {
            uint64_t v29 = *((unsigned int *)a8 + 4);
          }
          else {
            uint64_t v29 = 0;
          }
          strcpy(buf, "omtsbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          HALS_Object::PropertiesChanged(this, v28, v29, 1u, (const AudioObjectPropertyAddress *)buf);
          goto LABEL_89;
        default:
LABEL_164:
          HALS_Object::SetPropertyData((uint64_t)this, (uint64_t)a2, (uint64_t)a3, a4, (uint64_t)a5, a6, (uint64_t)a7, (uint64_t)a8);
      }
    }
    else
    {
      switch(mSelector)
      {
        case 1886353256:
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_System.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4912;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_SetPropertyData: bad property data size for kAudioHardwarePropertyPowerHint", buf, 0x12u);
            }
            unint64_t v69 = __cxa_allocate_exception(0x10uLL);
            *(void *)unint64_t v69 = off_1F148A5D8;
            v69[2] = 561211770;
          }
          if (a8)
          {
            *((_DWORD *)a8 + 71) = *a5;
            v79[0] = MEMORY[0x1E4F143A8];
            v79[1] = 0x40000000;
            v79[2] = ___ZN11HALS_System15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_173;
            v79[3] = &__block_descriptor_tmp_174;
            v79[4] = this;
            v79[5] = a8;
            uint64_t v30 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v30, (uint64_t)v79);
            uint64_t v31 = *((unsigned int *)a8 + 4);
            strcpy(buf, "hwopbolg");
            buf[9] = 0;
            *(_WORD *)&buf[10] = 0;
            HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)v31, v31, 1u, (const AudioObjectPropertyAddress *)buf);
          }
          break;
        case 1919839344:
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_System.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4931;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_SetPropertyData: bad property data size for kAudioHardwarePropertyRunLoop", buf, 0x12u);
            }
            std::string::size_type v73 = __cxa_allocate_exception(0x10uLL);
            *(void *)std::string::size_type v73 = off_1F148A5D8;
            v73[2] = 561211770;
          }
          int v34 = *(const void **)a5;
          *(void *)AudioStreamRangedDescription buf = (char *)this + 1528;
          *(_DWORD *)&uint8_t buf[8] = HALB_Mutex::Lock((HALS_System *)((char *)this + 1528));
          uint64_t v35 = (const void *)*((void *)this + 190);
          if (v35 != v34)
          {
            if (v35)
            {
              if (v34)
              {
                unsigned __int8 v36 = (CFRunLoopSourceRef *)*((void *)this + 226);
                int v37 = (CFRunLoopSourceRef *)*((void *)this + 227);
                int v38 = (const __CFString **)MEMORY[0x1E4F1D408];
                if (v36 != v37)
                {
                  CFStringRef v39 = (const __CFString *)*MEMORY[0x1E4F1D408];
                  do
                  {
                    CFRunLoopRemoveSource(*((CFRunLoopRef *)this + 190), *v36, v39);
                    CFRunLoopRemoveSource(*((CFRunLoopRef *)this + 190), *v36++, @"com.apple.audio.CoreAudio");
                  }
                  while (v36 != v37);
                  uint64_t v35 = (const void *)*((void *)this + 190);
                }
                CFRelease(v35);
                *((void *)this + 190) = v34;
                CFRetain(v34);
                uint64_t v40 = (CFRunLoopSourceRef *)*((void *)this + 226);
                int v41 = (CFRunLoopSourceRef *)*((void *)this + 227);
                if (v40 != v41)
                {
                  CFStringRef v42 = *v38;
                  do
                  {
                    CFRunLoopAddSource(*((CFRunLoopRef *)this + 190), *v40, v42);
                    CFRunLoopAddSource(*((CFRunLoopRef *)this + 190), *v40++, @"com.apple.audio.CoreAudio");
                  }
                  while (v40 != v41);
                }
              }
              else if (!atomic_load((unint64_t *)this + 210))
              {
                int v53 = (CFRunLoopSourceRef *)*((void *)this + 226);
                uint64_t v54 = (CFRunLoopSourceRef *)*((void *)this + 227);
                if (v53 != v54)
                {
                  CFStringRef v55 = (const __CFString *)*MEMORY[0x1E4F1D408];
                  do
                  {
                    CFRunLoopRemoveSource(*((CFRunLoopRef *)this + 190), *v53, v55);
                    CFRunLoopRemoveSource(*((CFRunLoopRef *)this + 190), *v53++, @"com.apple.audio.CoreAudio");
                  }
                  while (v53 != v54);
                }
                CFRelease(*((CFTypeRef *)this + 190));
                *((void *)this + 190) = 0;
                HALS_System::StartRunLoop(this);
                uint64_t v56 = (CFRunLoopSourceRef *)*((void *)this + 226);
                BOOL v57 = (CFRunLoopSourceRef *)*((void *)this + 227);
                if (v56 != v57)
                {
                  CFStringRef v58 = (const __CFString *)*MEMORY[0x1E4F1D408];
                  do
                  {
                    CFRunLoopAddSource(*((CFRunLoopRef *)this + 190), *v56, v58);
                    CFRunLoopAddSource(*((CFRunLoopRef *)this + 190), *v56++, @"com.apple.audio.CoreAudio");
                  }
                  while (v56 != v57);
                }
              }
            }
            else if (v34)
            {
              *((void *)this + 190) = v34;
              CFRetain(v34);
              int v49 = (CFRunLoopSourceRef *)*((void *)this + 226);
              uint64_t v50 = (CFRunLoopSourceRef *)*((void *)this + 227);
              if (v49 != v50)
              {
                CFStringRef v51 = (const __CFString *)*MEMORY[0x1E4F1D408];
                do
                {
                  CFRunLoopAddSource(*((CFRunLoopRef *)this + 190), *v49, v51);
                  CFRunLoopAddSource(*((CFRunLoopRef *)this + 190), *v49++, @"com.apple.audio.CoreAudio");
                }
                while (v49 != v50);
              }
            }
            else
            {
              HALS_System::StartRunLoop(this);
              unsigned int v59 = (CFRunLoopSourceRef *)*((void *)this + 226);
              BOOL v60 = (CFRunLoopSourceRef *)*((void *)this + 227);
              if (v59 != v60)
              {
                CFStringRef v61 = (const __CFString *)*MEMORY[0x1E4F1D408];
                do
                {
                  CFRunLoopAddSource(*((CFRunLoopRef *)this + 190), *v59, v61);
                  CFRunLoopAddSource(*((CFRunLoopRef *)this + 190), *v59++, @"com.apple.audio.CoreAudio");
                }
                while (v59 != v60);
              }
            }
          }
          HALB_Guard::Locker::~Locker((HALB_Mutex **)buf);
          break;
        case 1934587252:
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_System.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4833;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::SetPropertyData: bad property data size for kAudioHardwarePropertyDefaultSystemOutputDevice", buf, 0x12u);
            }
            int v66 = __cxa_allocate_exception(0x10uLL);
            *(void *)int v66 = off_1F148A5D8;
            v66[2] = 561211770;
          }
          if (a6 != 4)
          {
            if (a6) {
              return;
            }
            uint64_t v17 = (HALS_DefaultDeviceManager *)*((void *)this + 158);
            int v18 = (HALS_ObjectMap *)*a5;
            signed int v19 = 1934587252;
LABEL_57:
            BOOL v33 = 0;
LABEL_107:
            HALS_DefaultDeviceManager::SetDefaultDevice(v17, v19, v18, v33);
            return;
          }
          uint64_t v17 = (HALS_DefaultDeviceManager *)*((void *)this + 158);
          if (*a7 != 2)
          {
            int v18 = (HALS_ObjectMap *)*a5;
            BOOL v33 = *a7 == 1;
            signed int v19 = 1934587252;
            goto LABEL_107;
          }
          signed int v48 = 1934587252;
LABEL_96:
          HALS_DefaultDeviceManager::ResetDefaultDevice(v17, v48);
          return;
        default:
          goto LABEL_164;
      }
    }
  }
  else
  {
    if (mSelector <= 1698776146)
    {
      if (mSelector != 1682533920)
      {
        if (mSelector != 1682929012)
        {
          if (mSelector == 1685288048)
          {
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_System.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4972;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::SetPropertyData: bad property data size for kAudioHardwarePropertyDefaultInputDevice", buf, 0x12u);
              }
              std::string::size_type v65 = __cxa_allocate_exception(0x10uLL);
              *(void *)std::string::size_type v65 = off_1F148A5D8;
              v65[2] = 561211770;
            }
            if (!a8)
            {
              AMCP::Log::Scope_Registry::get(this);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
              uint64_t v62 = **(NSObject ***)buf;
              if (*(void *)&buf[8]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
              }
              if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
              {
                uint64_t v63 = pthread_self();
                mach_port_t v64 = pthread_mach_thread_np(v63);
                *(_DWORD *)AudioStreamRangedDescription buf = 67109890;
                *(_DWORD *)&uint8_t buf[4] = v64;
                *(_WORD *)&uint8_t buf[8] = 2080;
                *(void *)&buf[10] = "HALS_System.cpp";
                *(_WORD *)&unsigned char buf[18] = 1024;
                *(_DWORD *)&buf[20] = 2859;
                LOWORD(v88) = 2080;
                *(void *)((char *)&v88 + 2) = "inClient != nullptr";
                _os_log_error_impl(&dword_1BAA78000, v62, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Must provide a client object", buf, 0x22u);
              }
              abort();
            }
            int v15 = *a5;
            uint64_t v83 = 0;
            uint64_t v84 = &v83;
            uint64_t v85 = 0x2000000000;
            char v86 = 0;
            *(void *)AudioStreamRangedDescription buf = MEMORY[0x1E4F143A8];
            *(void *)&uint8_t buf[8] = 0x40000000;
            *(void *)&buf[16] = ___ZN11HALS_System10DestroyTapEjP11HALS_Client_block_invoke;
            *(void *)&long long v88 = &unk_1E6232EA8;
            int v91 = v15;
            long long v89 = this;
            uint64_t v90 = a8;
            *((void *)&v88 + 1) = &v83;
            uint64_t v16 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v16, (uint64_t)buf);
            if (*((unsigned char *)v84 + 24))
            {
              uint64_t valuePtr = 0x676C6F6274707323;
              int v82 = 0;
              (*(void (**)(HALS_System *, HALS_System *, void, uint64_t, uint64_t *, void))(*(void *)this + 144))(this, this, *((unsigned int *)a8 + 4), 1, &valuePtr, 0);
            }
LABEL_89:
            _Block_object_dispose(&v83, 8);
            return;
          }
          goto LABEL_164;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_System.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4812;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::SetPropertyData: bad property data size for kAudioHardwarePropertyDefaultOutputDevice", buf, 0x12u);
          }
          uint64_t v72 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v72 = off_1F148A5D8;
          v72[2] = 561211770;
        }
        if (a6 != 4)
        {
          if (a6) {
            return;
          }
          uint64_t v17 = (HALS_DefaultDeviceManager *)*((void *)this + 158);
          int v18 = (HALS_ObjectMap *)*a5;
          signed int v19 = 1682929012;
          goto LABEL_57;
        }
        uint64_t v17 = (HALS_DefaultDeviceManager *)*((void *)this + 158);
        if (*a7 != 2)
        {
          int v18 = (HALS_ObjectMap *)*a5;
          BOOL v33 = *a7 == 1;
          signed int v19 = 1682929012;
          goto LABEL_107;
        }
        signed int v48 = 1682929012;
        goto LABEL_96;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_System.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4791;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::SetPropertyData: bad property data size for kAudioHardwarePropertyDefaultInputDevice", buf, 0x12u);
        }
        int v68 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v68 = off_1F148A5D8;
        v68[2] = 561211770;
      }
      if (a6 != 4)
      {
        if (a6) {
          return;
        }
        uint64_t v17 = (HALS_DefaultDeviceManager *)*((void *)this + 158);
        int v18 = (HALS_ObjectMap *)*a5;
        signed int v19 = 1682533920;
        goto LABEL_57;
      }
      uint64_t v17 = (HALS_DefaultDeviceManager *)*((void *)this + 158);
      if (*a7 != 2)
      {
        int v18 = (HALS_ObjectMap *)*a5;
        BOOL v33 = *a7 == 1;
        signed int v19 = 1682533920;
        goto LABEL_107;
      }
      signed int v48 = 1682533920;
      goto LABEL_96;
    }
    switch(mSelector)
    {
      case 1698776147:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_System.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4923;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_SetPropertyData: bad property data size for kAudioDevicePropertyEnableAdaptableDeviceSimulator", buf, 0x12u);
          }
          uint64_t v70 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v70 = off_1F148A5D8;
          v70[2] = 561211770;
        }
        *((unsigned char *)this + 1280) = *a5 != 0;
        break;
      case 1886218606:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_System.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4867;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_SetPropertyData: bad property data size for kAudioHardwarePropertyProcessIsAudible", buf, 0x12u);
          }
          uint64_t v74 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v74 = off_1F148A5D8;
          v74[2] = 561211770;
        }
        HALS_ObjectMap::RetainObject(a8, a2);
        if (a8)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            int v44 = *((_DWORD *)a8 + 58);
            if (*a5) {
              int v45 = "on";
            }
            else {
              int v45 = "off";
            }
            *(_DWORD *)AudioStreamRangedDescription buf = 136315906;
            *(void *)&uint8_t buf[4] = "HALS_System.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4879;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = v44;
            LOWORD(v88) = 2080;
            *(void *)((char *)&v88 + 2) = v45;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_System::SetPropertyData: PID: %d Setting Process Input Mute To: %s", buf, 0x22u);
          }
          strcpy(buf, "tmipbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          (*(void (**)(HALS_Client *, void, unsigned char *, uint64_t, _DWORD *, void, void, HALS_Client *))(*(void *)a8 + 120))(a8, *((unsigned int *)a8 + 4), buf, a4, a5, 0, 0, a8);
        }
        HALS_ObjectMap::ReleaseObject(a8, v43);
        break;
      case 1886221684:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_System.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4888;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_SetPropertyData: bad property data size for kAudioHardwarePropertyProcessIsAudible", buf, 0x12u);
          }
          int v20 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v20 = off_1F148A5D8;
          v20[2] = 561211770;
        }
        break;
      default:
        goto LABEL_164;
    }
  }
}

void sub_1BACDE5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

uint64_t ___ZN11HALS_System15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t result)
{
  BOOL v1 = **(_DWORD **)(result + 48) != 0;
  *(unsigned char *)(*(void *)(result + 40) + 1224) = v1;
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v1;
  return result;
}

void ___ZN11HALS_System15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_173(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    int v21 = *(_DWORD *)(v1 + 284);
    uint64_t v3 = (std::__shared_weak_count *)operator new(0x30uLL);
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3[1].__vftable = 0;
    uint64_t v4 = (void **)&v3[1].__vftable;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1483780;
    v3[1].__shared_owners_ = 0;
    v3[1].__shared_weak_owners_ = 0;
    uint64_t v5 = *(void *)(v2 + 1352);
    uint64_t v6 = *(void *)(v2 + 1360);
    if (v5 != v6)
    {
      shared_owners = 0;
      int v8 = *(_DWORD *)(v1 + 16);
      do
      {
        if (v8 == **(_DWORD **)(*(void *)v5 + 64))
        {
          int v9 = *(_DWORD *)(*(void *)v5 + 16);
          unint64_t shared_weak_owners = v3[1].__shared_weak_owners_;
          if ((unint64_t)shared_owners >= shared_weak_owners)
          {
            int v12 = (char *)*v4;
            uint64_t v13 = (shared_owners - (unsigned char *)*v4) >> 2;
            unint64_t v14 = v13 + 1;
            if ((unint64_t)(v13 + 1) >> 62) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v15 = shared_weak_owners - (void)v12;
            if (v15 >> 1 > v14) {
              unint64_t v14 = v15 >> 1;
            }
            if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v16 = v14;
            }
            if (v16)
            {
              unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v16);
              int v12 = (char *)v3[1].__vftable;
              shared_owners = (char *)v3[1].__shared_owners_;
            }
            else
            {
              uint64_t v17 = 0;
            }
            int v18 = (std::__shared_weak_count_vtbl *)(v16 + 4 * v13);
            LODWORD(v18->~__shared_weak_count) = v9;
            char v11 = (char *)&v18->~__shared_weak_count + 4;
            while (shared_owners != v12)
            {
              int v19 = *((_DWORD *)shared_owners - 1);
              shared_owners -= 4;
              HIDWORD(v18[-1].__on_zero_shared_weak) = v19;
              int v18 = (std::__shared_weak_count_vtbl *)((char *)v18 - 4);
            }
            v3[1].__vftable = v18;
            v3[1].__shared_owners_ = (uint64_t)v11;
            v3[1].__shared_weak_owners_ = v16 + 4 * v17;
            if (v12) {
              operator delete(v12);
            }
          }
          else
          {
            *(_DWORD *)shared_owners = v9;
            char v11 = shared_owners + 4;
          }
          v3[1].__shared_owners_ = (uint64_t)v11;
          shared_owners = v11;
        }
        v5 += 8;
      }
      while (v5 != v6);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZN11HALS_System41_TellAllIOContextsForClientAboutPowerHintEP11HALS_Client_block_invoke;
    block[3] = &__block_descriptor_tmp_157;
    block[4] = v3 + 1;
    AudioObjectPropertyAddress v23 = v3;
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    int v24 = v21;
    unsigned __int8 v20 = atomic_load((unsigned __int8 *)(v2 + 928));
    if (v20) {
      atomic_store(1u, (unsigned __int8 *)(v2 + 929));
    }
    dispatch_async(*(dispatch_queue_t *)(v2 + 896), block);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1BACDE894(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN11HALS_System15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_175(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    char v21 = *(unsigned char *)(v1 + 256);
    int v3 = *(_DWORD *)(v1 + 16);
    uint64_t v4 = (std::__shared_weak_count *)operator new(0x30uLL);
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = 0;
    uint64_t v5 = (void **)&v4[1].__vftable;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1483780;
    v4[1].__shared_owners_ = 0;
    v4[1].__shared_weak_owners_ = 0;
    uint64_t v6 = *(void *)(v2 + 1352);
    uint64_t v7 = *(void *)(v2 + 1360);
    if (v6 != v7)
    {
      shared_owners = 0;
      do
      {
        if (v3 == **(_DWORD **)(*(void *)v6 + 64))
        {
          int v9 = *(_DWORD *)(*(void *)v6 + 16);
          unint64_t shared_weak_owners = v4[1].__shared_weak_owners_;
          if ((unint64_t)shared_owners >= shared_weak_owners)
          {
            int v12 = (char *)*v5;
            uint64_t v13 = (shared_owners - (unsigned char *)*v5) >> 2;
            unint64_t v14 = v13 + 1;
            if ((unint64_t)(v13 + 1) >> 62) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v15 = shared_weak_owners - (void)v12;
            if (v15 >> 1 > v14) {
              unint64_t v14 = v15 >> 1;
            }
            if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v16 = v14;
            }
            if (v16)
            {
              unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v16);
              int v12 = (char *)v4[1].__vftable;
              shared_owners = (char *)v4[1].__shared_owners_;
            }
            else
            {
              uint64_t v17 = 0;
            }
            int v18 = (std::__shared_weak_count_vtbl *)(v16 + 4 * v13);
            LODWORD(v18->~__shared_weak_count) = v9;
            char v11 = (char *)&v18->~__shared_weak_count + 4;
            while (shared_owners != v12)
            {
              int v19 = *((_DWORD *)shared_owners - 1);
              shared_owners -= 4;
              HIDWORD(v18[-1].__on_zero_shared_weak) = v19;
              int v18 = (std::__shared_weak_count_vtbl *)((char *)v18 - 4);
            }
            v4[1].__vftable = v18;
            v4[1].__shared_owners_ = (uint64_t)v11;
            v4[1].__shared_weak_owners_ = v16 + 4 * v17;
            if (v12) {
              operator delete(v12);
            }
          }
          else
          {
            *(_DWORD *)shared_owners = v9;
            char v11 = shared_owners + 4;
          }
          v4[1].__shared_owners_ = (uint64_t)v11;
          shared_owners = v11;
        }
        v6 += 8;
      }
      while (v6 != v7);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 1174405120;
    block[2] = ___ZN11HALS_System49_TellAllIOContextsForClientAboutSleepingIsAllowedEP11HALS_Client_block_invoke;
    block[3] = &__block_descriptor_tmp_126_6884;
    block[4] = v4 + 1;
    AudioObjectPropertyAddress v23 = v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    char v24 = v21;
    unsigned __int8 v20 = atomic_load((unsigned __int8 *)(v2 + 928));
    if (v20) {
      atomic_store(1u, (unsigned __int8 *)(v2 + 929));
    }
    dispatch_async(*(dispatch_queue_t *)(v2 + 896), block);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1BACDEAB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN11HALS_System10DestroyTapEjP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(HALS_Tap ****)(a1 + 40);
  int v3 = v2[164];
  uint64_t v4 = v2[165];
  if (v3 != v4)
  {
    while (*((_DWORD *)*v3 + 4) != *(_DWORD *)(a1 + 56))
    {
      if (++v3 == v4) {
        return;
      }
    }
  }
  if (v3 != v4)
  {
    HALS_System::_DestroyTap(v2, *v3, *(HALS_Client **)(a1 + 48));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
}

void HALS_System::_DestroyTap(HALS_Tap ***this, HALS_Tap *a2, HALS_Client *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!a3)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v17 = **(NSObject ***)buf;
    if (*(void *)v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v25);
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      int v18 = pthread_self();
      mach_port_t v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)AudioStreamRangedDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v19;
      *(_WORD *)uint64_t v25 = 2080;
      *(void *)&v25[2] = "HALS_System.cpp";
      __int16 v26 = 1024;
      int v27 = 2955;
      __int16 v28 = 2080;
      uint64_t v29 = "client != nullptr";
      _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Must provide a client object", buf, 0x22u);
    }
    abort();
  }
  if (!a2)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unsigned __int8 v20 = **(NSObject ***)buf;
    if (*(void *)v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v25);
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      char v21 = pthread_self();
      mach_port_t v22 = pthread_mach_thread_np(v21);
      *(_DWORD *)AudioStreamRangedDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v22;
      *(_WORD *)uint64_t v25 = 2080;
      *(void *)&v25[2] = "HALS_System.cpp";
      __int16 v26 = 1024;
      int v27 = 2956;
      __int16 v28 = 2080;
      uint64_t v29 = "tap != nullptr";
      _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Must provide a tap object", buf, 0x22u);
    }
    abort();
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  uint64_t v6 = **(NSObject ***)buf;
  if (*(void *)v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v25);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v14 = pthread_self();
    mach_port_t v15 = pthread_mach_thread_np(v14);
    int v16 = *((_DWORD *)a2 + 4);
    *(_DWORD *)AudioStreamRangedDescription buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v15;
    *(_WORD *)uint64_t v25 = 2080;
    *(void *)&v25[2] = "HALS_System.cpp";
    __int16 v26 = 1024;
    int v27 = 2957;
    __int16 v28 = 1024;
    LODWORD(v29) = v16;
    _os_log_debug_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_System::_DestroyTap(%d)", buf, 0x1Eu);
  }
  uint64_t v8 = *((void *)a2 + 6);
  if ((v8 & 0xFF00000000) != 0 && *((_DWORD *)a3 + 4) == v8 || !*((unsigned char *)a2 + 83))
  {
    HALS_ObjectMap::RetainObject(a2, v7);
    atomic_fetch_add(&HALS_Tap::gPendingTapDelete, 1uLL);
    int v9 = this[165];
    int v10 = this[164];
    if (v10 != v9)
    {
      while (*v10 != a2)
      {
        if (++v10 == v9)
        {
          int v10 = this[165];
          break;
        }
      }
    }
    if (v10 != v9)
    {
      char v11 = v10 + 1;
      if (v10 + 1 != v9)
      {
        do
        {
          if (*v11 != a2) {
            *v10++ = *v11;
          }
          ++v11;
        }
        while (v11 != v9);
        int v9 = this[165];
      }
    }
    if (v9 != v10) {
      this[165] = v10;
    }
    pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
    int v12 = (dispatch_queue_t *)HALS_ObjectMap::sNormalPriorityQueue;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZN11HALS_System11_DestroyTapEP8HALS_TapP11HALS_Client_block_invoke;
    block[3] = &__block_descriptor_tmp_139_6883;
    block[4] = a2;
    unsigned __int8 v13 = atomic_load((unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 32));
    if (v13) {
      atomic_store(1u, (unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 33));
    }
    dispatch_async(*v12, block);
  }
}

void ___ZN11HALS_System11_DestroyTapEP8HALS_TapP11HALS_Client_block_invoke(uint64_t a1)
{
  v6[0] = 0;
  v6[1] = 0;
  HALS_System::GetInstance(&v7, 0, v6);
  if (v7)
  {
    uint64_t v2 = *(unsigned char **)(a1 + 32);
    if (v2)
    {
      if (v2[240])
      {
        (*(void (**)(unsigned char *))(*(void *)v2 + 8))(v2);
        HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 32), v3);
        HALS_ObjectMap::ObjectIsDead(*(HALS_ObjectMap **)(a1 + 32), v4);
      }
    }
  }
  uint64_t v5 = v8;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1BACDEFE0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZN11HALS_System49_TellAllIOContextsForClientAboutSleepingIsAllowedEP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(unsigned int ***)(a1 + 32);
  uint64_t v2 = *v1;
  int v3 = v1[1];
  if (*v1 != v3)
  {
    do
    {
      uint64_t v5 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v2);
      uint64_t v7 = (HALS_ObjectMap *)v5;
      if (v5)
      {
        char v8 = *(unsigned char *)(a1 + 48);
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 0x40000000;
        v10[2] = ___ZN14HALS_IOContext24SleepingIsAllowedChangedEb_block_invoke;
        v10[3] = &__block_descriptor_tmp_14_10860;
        v10[4] = v5;
        char v11 = v8;
        int v9 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
        HALB_CommandGate::ExecuteCommand(v9, (uint64_t)v10);
      }
      HALS_ObjectMap::ReleaseObject(v7, v6);
      ++v2;
    }
    while (v2 != v3);
  }
}

void __destroy_helper_block_e8_32c57_ZTSNSt3__110shared_ptrINS_6vectorIjNS_9allocatorIjEEEEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_e8_32c57_ZTSNSt3__110shared_ptrINS_6vectorIjNS_9allocatorIjEEEEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__shared_ptr_emplace<std::vector<unsigned int>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<std::vector<unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1483780;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<std::vector<unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1483780;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void HALS_System::StartRunLoop(HALS_System *this)
{
  uint64_t v2 = (HALS_System *)((char *)this + 1528);
  int v3 = HALB_Mutex::Lock((HALS_System *)((char *)this + 1528));
  *((unsigned char *)this + 1800) = 0;
  CADeprecated::CAPThread::Start((HALS_System *)((char *)this + 1672));
  HALB_Guard::Wait(v2);
  HALB_Guard::Locker::~Locker(&v2);
}

void sub_1BACDF25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HALB_Mutex *a9)
{
}

void ___ZN11HALS_System41_TellAllIOContextsForClientAboutPowerHintEP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(unsigned int ***)(a1 + 32);
  uint64_t v2 = *v1;
  int v3 = v1[1];
  if (*v1 != v3)
  {
    do
    {
      uint64_t v5 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v2);
      uint64_t v7 = (unsigned int *)v5;
      if (v5)
      {
        int v8 = *(_DWORD *)(a1 + 48);
        uint64_t v13 = 0;
        unint64_t v14 = &v13;
        uint64_t v15 = 0x2000000000;
        char v16 = 0;
        v11[0] = MEMORY[0x1E4F143A8];
        v11[1] = 0x40000000;
        uint64_t v11[2] = ___ZN14HALS_IOContext16PowerHintChangedEj_block_invoke;
        v11[3] = &unk_1E6233F08;
        v11[4] = &v13;
        void v11[5] = v5;
        int v12 = v8;
        int v9 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
        HALB_CommandGate::ExecuteCommand(v9, (uint64_t)v11);
        if (*((unsigned char *)v14 + 24))
        {
          int v10 = (HALS_NotificationManager *)v7[18];
          if (!v10) {
            int v10 = (HALS_NotificationManager *)v7[4];
          }
          *(void *)&v17.signed int mSelector = 0x676C6F626673697ALL;
          v17.uint64_t mElement = 0;
          HALS_Object::PropertiesChanged((HALS_Object *)v7, v10, 0, 1u, &v17);
        }
        _Block_object_dispose(&v13, 8);
      }
      HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v7, v6);
      ++v2;
    }
    while (v2 != v3);
  }
}

void ___ZNK11HALS_System21update_all_iocontextsEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 32));
  int v3 = (HALS_ObjectMap *)v1;
  if (v1) {
    (*(void (**)(void))(**(void **)(v1 + 96) + 272))(*(void *)(v1 + 96));
  }
  HALS_ObjectMap::ReleaseObject(v3, v2);
}

void sub_1BACDF480(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  HALS_ObjectMap::ReleaseObject(v12, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_System::GetPropertyData(HALS_System *this, HALS_Object *a2, AudioObjectPropertyAddress *a3, uint64_t a4, unsigned int *a5, uint64_t *a6, unsigned int a7, const __CFString **a8, HALS_Client *a9)
{
  int v12 = this;
  uint64_t v203 = *MEMORY[0x1E4F143B8];
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1886353255)
  {
    if (mSelector <= 1768845171)
    {
      if (mSelector > 1682929011)
      {
        if (mSelector > 1685288047)
        {
          if (mSelector != 1685288048)
          {
            if (mSelector != 1685416292)
            {
              if (mSelector == 1698776147)
              {
                if (a4 <= 3)
                {
                  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
                    *(void *)&uint8_t buf[4] = "HALS_System.cpp";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 4601;
                    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_GetPropertyData: bad property data size for kAudioDevicePropertyEnableAdaptableDeviceSimulator", buf, 0x12u);
                  }
                  exception = __cxa_allocate_exception(0x10uLL);
                  *(void *)exception = off_1F148A5D8;
                  exception[2] = 561211770;
                }
                unsigned int v14 = *((unsigned __int8 *)this + 1280);
                goto LABEL_247;
              }
LABEL_286:
              HALS_Object::GetPropertyData((uint64_t)this, (uint64_t)a2, (int *)a3, a4, (int *)a5, a6);
              return;
            }
            if (a4 <= 0x1F)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_System.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4329;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyDeviceForUID", buf, 0x12u);
              }
              mach_port_t v158 = __cxa_allocate_exception(0x10uLL);
              *(void *)mach_port_t v158 = off_1F148A5D8;
              v158[2] = 561211770;
            }
            if (!a6)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_System.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4330;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: translation data is NULL for kAudioHardwarePropertyDeviceForUID", buf, 0x12u);
              }
              uint64_t v172 = __cxa_allocate_exception(0x10uLL);
              *(void *)uint64_t v172 = off_1F148A5D8;
              v172[2] = 1852797029;
            }
            if (*((_DWORD *)a6 + 2) != 8)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_System.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4336;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: wrong data size for input to kAudioHardwarePropertyDeviceForUID", buf, 0x12u);
              }
              uint64_t v178 = __cxa_allocate_exception(0x10uLL);
              *(void *)uint64_t v178 = off_1F148A5D8;
              v178[2] = 561211770;
            }
            if (!*a6)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_System.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4337;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: input to kAudioHardwarePropertyDeviceForUID is NULL", buf, 0x12u);
              }
              char v180 = __cxa_allocate_exception(0x10uLL);
              *(void *)char v180 = off_1F148A5D8;
              v180[2] = 1852797029;
            }
            if (*((_DWORD *)a6 + 6) != 4)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_System.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4341;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: wrong data size for output to kAudioHardwarePropertyDeviceForUID", buf, 0x12u);
              }
              long long v183 = __cxa_allocate_exception(0x10uLL);
              *(void *)long long v183 = off_1F148A5D8;
              v183[2] = 561211770;
            }
            BOOL v60 = (_DWORD *)a6[2];
            if (!v60)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_System.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4342;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: output to kAudioHardwarePropertyDeviceForUID is NULL", buf, 0x12u);
              }
              v185 = __cxa_allocate_exception(0x10uLL);
              *(void *)v185 = off_1F148A5D8;
              v185[2] = 1852797029;
            }
            CFStringRef v61 = HALS_System::CopyDeviceByUID(this, *(const __CFString **)*a6, a9);
            if (v61) {
              int v63 = *((_DWORD *)v61 + 4);
            }
            else {
              int v63 = 0;
            }
LABEL_320:
            *BOOL v60 = v63;
            *a5 = a4;
            HALS_ObjectMap::ReleaseObject(v61, v62);
            return;
          }
          if (a4 != 4)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_System.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4770;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: wrong data size for kAudioHardwareDestroyTap", buf, 0x12u);
            }
            std::string::size_type v162 = __cxa_allocate_exception(0x10uLL);
            *(void *)std::string::size_type v162 = off_1F148A5D8;
            v162[2] = 561211770;
          }
          if (!a6)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_System.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4771;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: nowhere to put the output data for kAudioHardwareDestroyTap", buf, 0x12u);
            }
            std::string v173 = __cxa_allocate_exception(0x10uLL);
            *(void *)std::string v173 = off_1F148A5D8;
            v173[2] = 1852797029;
          }
LABEL_250:
          *(_DWORD *)a6 = 0;
          goto LABEL_254;
        }
        if (mSelector != 1682929012)
        {
          if (mSelector != 1684370979) {
            goto LABEL_286;
          }
          platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(this);
          int v53 = (HALS_PlatformBehaviors *)(*(uint64_t (**)(uint64_t *))(*platform_behaviors + 24))(platform_behaviors);
          if (v53)
          {
            uint64_t v54 = HALS_PlatformBehaviors::get_platform_behaviors(v53);
            if ((*(unsigned int (**)(uint64_t *))(*v54 + 24))(v54) == 1)
            {
              unsigned int v55 = a4 >> 2;
              this = v12;
              uint64_t v56 = a5;
              BOOL v57 = a6;
              int v58 = 1;
              char v59 = 0;
LABEL_303:
              HALS_System::GetDeviceList((uint64_t)this, v55, v56, (uint64_t)v57, v58, v59, a9);
            }
LABEL_304:
            unsigned int v107 = 4 * *a5;
            goto LABEL_339;
          }
          unsigned int v55 = a4 >> 2;
          this = v12;
          uint64_t v56 = a5;
          BOOL v57 = a6;
          int v58 = 2;
LABEL_302:
          char v59 = 1;
          goto LABEL_303;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_System.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4284;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyDefaultOutputDevice", buf, 0x12u);
          }
          std::string v156 = __cxa_allocate_exception(0x10uLL);
          *(void *)std::string v156 = off_1F148A5D8;
          v156[2] = 561211770;
        }
        *(void *)AudioStreamRangedDescription buf = *((void *)this + 158);
        *(_DWORD *)&uint8_t buf[8] = HALB_Mutex::Lock(*(HALB_Mutex **)buf);
        int v45 = *(_DWORD *)(*(void *)buf + 208);
LABEL_253:
        HALB_Mutex::Locker::~Locker((HALB_Mutex **)buf);
        *(_DWORD *)a6 = v45;
        goto LABEL_254;
      }
      if (mSelector <= 1668049698)
      {
        if (mSelector != 1651074160)
        {
          if (mSelector != 1651472419) {
            goto LABEL_286;
          }
          *(void *)AudioStreamRangedDescription buf = 0;
          *(void *)&uint8_t buf[8] = buf;
          *(void *)&buf[16] = 0x4002000000;
          *(void *)&long long v199 = __Block_byref_object_copy__6832;
          *((void *)&v199 + 1) = __Block_byref_object_dispose__6833;
          uint64_t v200 = 0;
          int v201 = 0;
          uint64_t v202 = 0;
          uint64_t v191 = MEMORY[0x1E4F143A8];
          uint64_t v192 = 0x40000000;
          uint64_t v193 = (uint64_t)___ZNK11HALS_System10GetBoxListEjRjPjP11HALS_Client_block_invoke;
          float v194 = &unk_1E6232A08;
          float v195 = buf;
          float v196 = this;
          uint64_t v18 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v18, (uint64_t)&v191);
          *a5 = 0;
          mach_port_t v19 = *(uint64_t **)(*(void *)&buf[8] + 40);
          unsigned __int8 v20 = *(uint64_t **)(*(void *)&buf[8] + 48);
          if (v19 != v20)
          {
            unsigned int v21 = a4 >> 2;
            do
            {
              uint64_t v188 = 0;
              int v189 = 0;
              uint64_t v190 = 0;
              HALS_DeviceManager::CopyBoxList(*v19, (uint64_t)&v188, (uint64_t)a9);
              AudioObjectPropertyAddress v23 = v189;
              unsigned int v24 = *a5;
              if ((HALS_ObjectMap **)v188 != v189)
              {
                uint64_t v25 = (HALS_ObjectMap **)(v188 + 8);
                do
                {
                  *((_DWORD *)a6 + v24) = *((_DWORD *)*(v25 - 1) + 4);
                  unsigned int v24 = *a5 + 1;
                  *a5 = v24;
                  BOOL v26 = v24 >= v21 || v25++ == v23;
                }
                while (!v26);
              }
              HALS_DeviceManager::BasicBoxList::~BasicBoxList((HALS_ObjectMap ***)&v188, v22);
              ++v19;
            }
            while (v24 < v21 && v19 != v20);
          }
          goto LABEL_280;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_System.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4390;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyTranslateBundleIDToPlugIn", buf, 0x12u);
          }
          std::string v152 = __cxa_allocate_exception(0x10uLL);
          *(void *)std::string v152 = off_1F148A5D8;
          v152[2] = 561211770;
        }
        if (a7 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_System.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4391;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad qualifier data size for kAudioHardwarePropertyTranslateBundleIDToPlugIn", buf, 0x12u);
          }
          uint64_t v167 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v167 = off_1F148A5D8;
          v167[2] = 561211770;
        }
        mach_port_t v64 = HALS_System::CopyPlugInByBundleID(this, *a8);
        if (v64) {
          int v66 = *((_DWORD *)v64 + 4);
        }
        else {
          int v66 = 0;
        }
LABEL_309:
        *(_DWORD *)a6 = v66;
        *a5 = 4;
        HALS_ObjectMap::ReleaseObject(v64, v65);
        return;
      }
      if (mSelector != 1668049699)
      {
        if (mSelector != 1682533920) {
          goto LABEL_286;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_System.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4277;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyDefaultInputDevice", buf, 0x12u);
          }
          std::string v146 = __cxa_allocate_exception(0x10uLL);
          *(void *)std::string v146 = off_1F148A5D8;
          v146[2] = 561211770;
        }
        *(void *)AudioStreamRangedDescription buf = *((void *)this + 158);
        *(_DWORD *)&uint8_t buf[8] = HALB_Mutex::Lock(*(HALB_Mutex **)buf);
        int v45 = *(_DWORD *)(*(void *)buf + 104);
        goto LABEL_253;
      }
      *(void *)AudioStreamRangedDescription buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&buf[16] = 0x4002000000;
      *(void *)&long long v199 = __Block_byref_object_copy__6832;
      *((void *)&v199 + 1) = __Block_byref_object_dispose__6833;
      uint64_t v200 = 0;
      int v201 = 0;
      uint64_t v202 = 0;
      uint64_t v191 = MEMORY[0x1E4F143A8];
      uint64_t v192 = 0x40000000;
      uint64_t v193 = (uint64_t)___ZNK11HALS_System18GetClockDeviceListEjRjPjP11HALS_Client_block_invoke;
      float v194 = &unk_1E6232A80;
      float v195 = buf;
      float v196 = this;
      uint64_t v80 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v80, (uint64_t)&v191);
      *a5 = 0;
      long long v81 = *(uint64_t **)(*(void *)&buf[8] + 40);
      int v82 = *(uint64_t **)(*(void *)&buf[8] + 48);
      if (v81 != v82)
      {
        unsigned int v83 = a4 >> 2;
        do
        {
          uint64_t v188 = 0;
          int v189 = 0;
          uint64_t v190 = 0;
          HALS_DeviceManager::CopyClockDeviceList(*v81, (uint64_t)&v188);
          uint64_t v85 = v189;
          unsigned int v86 = *a5;
          if ((HALS_ObjectMap **)v188 != v189)
          {
            long long v87 = (HALS_ObjectMap **)(v188 + 8);
            do
            {
              *((_DWORD *)a6 + v86) = *((_DWORD *)*(v87 - 1) + 4);
              unsigned int v86 = *a5 + 1;
              *a5 = v86;
            }
            while (v86 < v83 && v87++ != v85);
          }
          HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList((HALS_ObjectMap ***)&v188, v84);
          ++v81;
        }
        while (v86 < v83 && v81 != v82);
      }
LABEL_280:
      _Block_object_dispose(buf, 8);
      HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(&v200, v119);
      goto LABEL_304;
    }
    if (mSelector > 1870098019)
    {
      if (mSelector <= 1886152482)
      {
        if (mSelector == 1870098020)
        {
          BOOL v99 = a8 == 0;
          if (a8 && a7 >= 4)
          {
            unint64_t v100 = 0;
            do
            {
              BOOL v26 = *((_DWORD *)a8 + v100) == 1634757735;
              BOOL v99 = v26;
              ++v100;
            }
            while (!v26 && v100 < a7 >> 2);
          }
          if (v99)
          {
            *(void *)AudioStreamRangedDescription buf = 0;
            *(void *)&uint8_t buf[8] = buf;
            *(void *)&buf[16] = 0x4002000000;
            *(void *)&long long v199 = __Block_byref_object_copy__6832;
            *((void *)&v199 + 1) = __Block_byref_object_dispose__6833;
            uint64_t v200 = 0;
            int v201 = 0;
            uint64_t v202 = 0;
            v186[0] = MEMORY[0x1E4F143A8];
            v186[1] = 0x40000000;
            v186[2] = ___ZNK11HALS_System15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_169;
            v186[3] = &unk_1E6233168;
            v186[4] = buf;
            v186[5] = this;
            __int16 v102 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v102, (uint64_t)v186);
            if (a4 >= 4)
            {
              uint64_t v130 = 0;
              uint64_t v131 = 0;
              LODWORD(v103) = a4 >> 2;
              uint64_t v132 = *(void *)(*(void *)&buf[8] + 40);
              uint64_t v133 = *(void *)(*(void *)&buf[8] + 48);
              if (a4 >> 2 <= 1) {
                uint64_t v103 = 1;
              }
              else {
                uint64_t v103 = v103;
              }
              while (v132 + v130 != v133)
              {
                *((_DWORD *)a6 + v131) = *(_DWORD *)(*(void *)(v132 + 8 * v131) + 16);
                ++v131;
                v130 += 8;
                if (v103 == v131) {
                  goto LABEL_342;
                }
              }
              LODWORD(v103) = v131;
            }
            else
            {
              LODWORD(v103) = 0;
            }
LABEL_342:
            *a5 = 4 * v103;
            _Block_object_dispose(buf, 8);
            HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(&v200, v139);
          }
          else
          {
            *a5 = 0;
          }
          return;
        }
        if (mSelector != 1885954665) {
          goto LABEL_286;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_System.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4408;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyPlugInForBundleID", buf, 0x12u);
          }
          std::string v151 = __cxa_allocate_exception(0x10uLL);
          *(void *)std::string v151 = off_1F148A5D8;
          v151[2] = 561211770;
        }
        if (!a6)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_System.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4409;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: translation data is NULL for kAudioHardwarePropertyPlugInForBundleID", buf, 0x12u);
          }
          std::runtime_error v171 = __cxa_allocate_exception(0x10uLL);
          *(void *)std::runtime_error v171 = off_1F148A5D8;
          v171[2] = 1852797029;
        }
        if (*((_DWORD *)a6 + 2) != 8)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_System.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4415;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: wrong data size for input to kAudioHardwarePropertyPlugInForBundleID", buf, 0x12u);
          }
          v176 = __cxa_allocate_exception(0x10uLL);
          *(void *)v176 = off_1F148A5D8;
          v176[2] = 561211770;
        }
        if (!*a6)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_System.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4416;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: input to kAudioHardwarePropertyPlugInForBundleID is NULL", buf, 0x12u);
          }
          std::string v181 = __cxa_allocate_exception(0x10uLL);
          *(void *)std::string v181 = off_1F148A5D8;
          v181[2] = 1852797029;
        }
        if (*((_DWORD *)a6 + 6) != 4)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_System.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4420;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: wrong data size for output to kAudioHardwarePropertyPlugInForBundleID", buf, 0x12u);
          }
          float v182 = __cxa_allocate_exception(0x10uLL);
          *(void *)float v182 = off_1F148A5D8;
          v182[2] = 561211770;
        }
        BOOL v60 = (_DWORD *)a6[2];
        if (!v60)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_System.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4421;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: output to kAudioHardwarePropertyPlugInForBundleID is NULL", buf, 0x12u);
          }
          char v184 = __cxa_allocate_exception(0x10uLL);
          *(void *)char v184 = off_1F148A5D8;
          v184[2] = 1852797029;
        }
        CFStringRef v61 = HALS_System::CopyPlugInByBundleID(this, *(const __CFString **)*a6);
        if (v61) {
          int v63 = *((_DWORD *)v61 + 4);
        }
        else {
          int v63 = 0;
        }
        goto LABEL_320;
      }
      if (mSelector != 1886152483)
      {
        if (mSelector == 1886218606)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_System.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4547;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_GetPropertyData: bad property data size for kAudioHardwarePropertyProcessInputMute", buf, 0x12u);
            }
            uint64_t v160 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v160 = off_1F148A5D8;
            v160[2] = 561211770;
          }
          HALS_ObjectMap::RetainObject(a9, a2);
          if (a9)
          {
            uint64_t v191 = 0x676C6F6270696D74;
            LODWORD(v192) = 0;
            (*(void (**)(HALS_Client *, void, uint64_t *, uint64_t, unsigned int *, uint64_t *, void, void, HALS_Client *))(*(void *)a9 + 112))(a9, *((unsigned int *)a9 + 4), &v191, a4, a5, a6, 0, 0, a9);
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
            {
              int v105 = *((_DWORD *)a9 + 58);
              if (*(_DWORD *)a6) {
                uint64_t v106 = "on";
              }
              else {
                uint64_t v106 = "off";
              }
              *(_DWORD *)AudioStreamRangedDescription buf = 136315906;
              *(void *)&uint8_t buf[4] = "HALS_System.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4561;
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = v105;
              LOWORD(v199) = 2080;
              *(void *)((char *)&v199 + 2) = v106;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_System::GetPropertyData: PID: %d Process Input Mute: %s", buf, 0x22u);
            }
          }
          else
          {
            *(_DWORD *)a6 = 0;
            *a5 = 4;
          }
          HALS_ObjectMap::ReleaseObject(a9, v104);
          return;
        }
        if (mSelector != 1886221684) {
          goto LABEL_286;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_System.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4573;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_GetPropertyData: bad property data size for kAudioHardwarePropertyProcessIsAudible", buf, 0x12u);
          }
          char v16 = __cxa_allocate_exception(0x10uLL);
          *(void *)char v16 = off_1F148A5D8;
          v16[2] = 561211770;
        }
        goto LABEL_246;
      }
      *(void *)AudioStreamRangedDescription buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&buf[16] = 0x4002000000;
      *(void *)&long long v199 = __Block_byref_object_copy__6832;
      *((void *)&v199 + 1) = __Block_byref_object_dispose__6833;
      uint64_t v200 = 0;
      int v201 = 0;
      uint64_t v202 = 0;
      uint64_t v191 = MEMORY[0x1E4F143A8];
      uint64_t v192 = 0x40000000;
      uint64_t v193 = (uint64_t)___ZNK11HALS_System13GetPlugInListEjRjPj_block_invoke;
      float v194 = &unk_1E6232918;
      float v195 = buf;
      float v196 = this;
      std::string::size_type v108 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v108, (uint64_t)&v191);
      *a5 = 0;
      uint64_t v109 = *(void *)(*(void *)&buf[8] + 40);
      uint64_t v110 = *(void *)(*(void *)&buf[8] + 48);
      if (v109 == v110) {
        goto LABEL_280;
      }
      unsigned int v111 = 0;
      while (1)
      {
        while (1)
        {
          int v112 = *(_DWORD *)(*(void *)v109 + 20);
          int v113 = *(_DWORD *)(*(void *)v109 + 24);
          if (v112 == v113) {
            break;
          }
          if (v112 != 1634757735 && v112 != 1953656941 && v113 != 1634757735 && v113 != 1953656941) {
            goto LABEL_262;
          }
LABEL_275:
          *((_DWORD *)a6 + v111) = *(_DWORD *)(*(void *)v109 + 16);
          unsigned int v111 = *a5 + 1;
          *a5 = v111;
          v109 += 8;
          if (v111 >= a4 >> 2 || v109 == v110) {
            goto LABEL_280;
          }
        }
        if (v112 == 1953656941 || v112 == 1634757735) {
          goto LABEL_275;
        }
LABEL_262:
        v109 += 8;
        if (v109 == v110) {
          goto LABEL_280;
        }
      }
    }
    if (mSelector <= 1835758703)
    {
      if (mSelector != 1768845172)
      {
        if (mSelector == 1769302372)
        {
          if (a7 != 4)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_System.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4720;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: wrong qualifier size for kAudioHardwarePropertyDeviceForUseCaseID", buf, 0x12u);
            }
            std::string v145 = __cxa_allocate_exception(0x10uLL);
            *(void *)std::string v145 = off_1F148A5D8;
            v145[2] = 561211770;
          }
          if (!a8)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_System.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4721;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: qualifier data is NULL for kAudioHardwarePropertyDeviceForUseCaseID", buf, 0x12u);
            }
            float64x2_t v165 = __cxa_allocate_exception(0x10uLL);
            *(void *)float64x2_t v165 = off_1F148A5D8;
            v165[2] = 1852797029;
          }
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_System.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4723;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyDeviceForUseCaseID", buf, 0x12u);
            }
            std::logic_error v175 = __cxa_allocate_exception(0x10uLL);
            *(void *)std::logic_error v175 = off_1F148A5D8;
            v175[2] = 561211770;
          }
          if (!a6)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_System.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4724;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: out data is NULL for kAudioHardwarePropertyDeviceForUseCaseID", buf, 0x12u);
            }
            int v179 = __cxa_allocate_exception(0x10uLL);
            *(void *)int v179 = off_1F148A5D8;
            v179[2] = 1852797029;
          }
          *(_DWORD *)a6 = 0;
          *a5 = 4;
          uint64_t v31 = *(unsigned int *)a8;
          *(void *)AudioStreamRangedDescription buf = 0;
          *(void *)&uint8_t buf[8] = buf;
          *(void *)&buf[16] = 0x4002000000;
          *(void *)&long long v199 = __Block_byref_object_copy__6832;
          *((void *)&v199 + 1) = __Block_byref_object_dispose__6833;
          uint64_t v200 = 0;
          int v201 = 0;
          uint64_t v202 = 0;
          uint64_t v191 = MEMORY[0x1E4F143A8];
          uint64_t v192 = 0x40000000;
          uint64_t v193 = (uint64_t)___ZNK11HALS_System36CopyNonMetaDeviceByIsolatedUseCaseIDE23IsolatedAudio_UseCaseIDP11HALS_Client_block_invoke;
          float v194 = &unk_1E6232B70;
          float v195 = buf;
          float v196 = this;
          uint64_t v32 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v32, (uint64_t)&v191);
          BOOL v33 = *(void **)(*(void *)&buf[8] + 40);
          int v34 = *(void **)(*(void *)&buf[8] + 48);
          while (v33 != v34)
          {
            uint64_t v35 = (HALS_ObjectMap *)(*(uint64_t (**)(void, uint64_t, HALS_Client *))(*(void *)*v33 + 256))(*v33, v31, a9);
            if (v35) {
              goto LABEL_295;
            }
            ++v33;
          }
          uint64_t v35 = 0;
LABEL_295:
          _Block_object_dispose(buf, 8);
          HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(&v200, v125);
          if (v35) {
            *(_DWORD *)a6 = *((_DWORD *)v35 + 4);
          }
          HALS_ObjectMap::ReleaseObject(v35, v126);
          return;
        }
        goto LABEL_286;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_System.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4630;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_GetPropertyData: wrong size for kAudioHardwarePropertyIsInitingOrExiting", buf, 0x12u);
        }
        uint64_t v67 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v67 = off_1F148A5D8;
        v67[2] = 561211770;
      }
      goto LABEL_250;
    }
    if (mSelector != 1835758704)
    {
      if (mSelector == 1835821926)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_System.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4713;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_GetPropertyData: bad property data size for kAudioHardwarePropertyMlockFailHandling", buf, 0x12u);
          }
          std::string v148 = __cxa_allocate_exception(0x10uLL);
          *(void *)std::string v148 = off_1F148A5D8;
          v148[2] = 561211770;
        }
        unsigned int v14 = atomic_load((unsigned int *)&HALB_MlockFailHandling::mHandling);
        goto LABEL_247;
      }
      goto LABEL_286;
    }
    if (a7 != 8)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_System.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4749;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: wrong qualifier size for kAudioHardwareCreateTap", buf, 0x12u);
      }
      std::string v155 = __cxa_allocate_exception(0x10uLL);
      *(void *)std::string v155 = off_1F148A5D8;
      v155[2] = 561211770;
    }
    if (a4 != 8)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_System.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4750;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: wrong data size for kAudioHardwareCreateTap", buf, 0x12u);
      }
      size_t v169 = __cxa_allocate_exception(0x10uLL);
      *(void *)size_t v169 = off_1F148A5D8;
      v169[2] = 561211770;
    }
    if (!a6)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_System.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4751;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: nowhere to put the output data for kAudioHardwareCreateTap", buf, 0x12u);
      }
      uint64_t v177 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v177 = off_1F148A5D8;
      v177[2] = 1852797029;
    }
    CFStringRef v90 = *a8;
    uint64_t v191 = 0;
    uint64_t v192 = (uint64_t)&v191;
    uint64_t v193 = 0x2000000000;
    LODWORD(v194) = 0;
    if (!v90) {
      goto LABEL_298;
    }
    *(void *)AudioStreamRangedDescription buf = MEMORY[0x1E4F143A8];
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&buf[16] = ___ZN11HALS_System9CreateTapEPK14__CFDictionaryP11HALS_Client_block_invoke;
    *(void *)&long long v199 = &unk_1E6232E80;
    *((void *)&v199 + 1) = &v191;
    uint64_t v200 = (HALS_ObjectMap **)this;
    int v201 = (HALS_ObjectMap **)v90;
    uint64_t v202 = a9;
    int v91 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v91, (uint64_t)buf);
    if (*(_DWORD *)(v192 + 24))
    {
      uint64_t v188 = 0x676C6F6274707323;
      LODWORD(v189) = 0;
      if (a9) {
        uint64_t v92 = *((unsigned int *)a9 + 4);
      }
      else {
        uint64_t v92 = 0;
      }
      (*(void (**)(HALS_System *, HALS_System *, uint64_t, uint64_t, uint64_t *, void))(*(void *)v12 + 144))(v12, v12, v92, 1, &v188, 0);
      int v137 = *(_DWORD *)(v192 + 24);
      _Block_object_dispose(&v191, 8);
      if (v137)
      {
        *(void *)AudioStreamRangedDescription buf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
        applesauce::CF::StringRef::StringRef((CFStringRef *)&v191, (const UInt8 *)"TapObjectID", 11);
        applesauce::CF::NumberRef::NumberRef<unsigned int,void>((CFNumberRef *)&v188, v137);
        mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(*(__CFDictionary **)buf, (const void *)v191, (const void *)v188);
        applesauce::CF::NumberRef::~NumberRef((const void **)&v188);
        applesauce::CF::StringRef::~StringRef((const void **)&v191);
        mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v191, *(const void **)buf);
        uint64_t v138 = v191;
        uint64_t v191 = 0;
        *a6 = v138;
        applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&v191);
        mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)buf);
        goto LABEL_338;
      }
    }
    else
    {
LABEL_298:
      _Block_object_dispose(&v191, 8);
    }
    *a6 = 0;
LABEL_338:
    unsigned int v107 = 8;
    goto LABEL_339;
  }
  if (mSelector <= 1953325672)
  {
    if (mSelector <= 1920297315)
    {
      if (mSelector > 1919186466)
      {
        if (mSelector == 1919186467)
        {
          unsigned int v55 = a4 >> 2;
          uint64_t v56 = a5;
          BOOL v57 = a6;
          int v58 = 0;
          goto LABEL_302;
        }
        if (mSelector != 1919839344) {
          goto LABEL_286;
        }
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_System.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4618;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_GetPropertyData: bad property data size for kAudioHardwarePropertyRunLoop", buf, 0x12u);
          }
          std::string v147 = __cxa_allocate_exception(0x10uLL);
          *(void *)std::string v147 = off_1F148A5D8;
          v147[2] = 561211770;
        }
        *(void *)AudioStreamRangedDescription buf = (char *)this + 1528;
        *(_DWORD *)&uint8_t buf[8] = HALB_Mutex::Lock((HALS_System *)((char *)this + 1528));
        uint64_t v46 = (const void *)*((void *)v12 + 190);
        HALB_Guard::Locker::~Locker((HALB_Mutex **)buf);
        *a6 = (uint64_t)v46;
        if (v46) {
          CFRetain(v46);
        }
        goto LABEL_338;
      }
      if (mSelector != 1886353256)
      {
        if (mSelector == 1886548771)
        {
          unsigned int NumberProcessObjects = HALS_System::GetNumberProcessObjects(this);
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_System.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4702;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyProcessObjectList", buf, 0x12u);
            }
            std::string v144 = __cxa_allocate_exception(0x10uLL);
            *(void *)std::string v144 = off_1F148A5D8;
            v144[2] = 561211770;
          }
          if (a4 >> 2 >= NumberProcessObjects) {
            LODWORD(v29) = NumberProcessObjects;
          }
          else {
            LODWORD(v29) = a4 >> 2;
          }
          HALS_System::GetProcessObjectList((HALS_System *)buf, (uint64_t)v12);
          uint64_t v30 = *(void **)buf;
          if (v29)
          {
            size_t v29 = (4 * v29);
            memmove(a6, *(const void **)buf, v29);
          }
          *a5 = v29;
          if (v30) {
            operator delete(v30);
          }
          return;
        }
        goto LABEL_286;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_System.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4594;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_GetPropertyData: bad property data size for kAudioHardwarePropertyPowerHint", buf, 0x12u);
        }
        std::string v153 = __cxa_allocate_exception(0x10uLL);
        *(void *)std::string v153 = off_1F148A5D8;
        v153[2] = 561211770;
      }
      if (a9)
      {
        unsigned int v14 = *((_DWORD *)a9 + 71);
LABEL_247:
        *(_DWORD *)a6 = v14;
LABEL_254:
        unsigned int v107 = 4;
LABEL_339:
        *a5 = v107;
        return;
      }
LABEL_289:
      unsigned int v14 = 0;
      goto LABEL_247;
    }
    if (mSelector > 1936224867)
    {
      if (mSelector == 1936224868)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_System.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4298;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyDefaultSharedOutputDevice", buf, 0x12u);
          }
          uint64_t v163 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v163 = off_1F148A5D8;
          v163[2] = 561211770;
        }
        *(void *)AudioStreamRangedDescription buf = *((void *)this + 158);
        *(_DWORD *)&uint8_t buf[8] = HALB_Mutex::Lock(*(HALB_Mutex **)buf);
        int v45 = *(_DWORD *)(*(void *)buf + 416);
        goto LABEL_253;
      }
      if (mSelector != 1936483696)
      {
        if (mSelector == 1937010031)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_System.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4587;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_GetPropertyData: bad property data size for kAudioHardwarePropertyMixStereoToMono", buf, 0x12u);
            }
            unsigned __int8 v143 = __cxa_allocate_exception(0x10uLL);
            *(void *)unsigned __int8 v143 = off_1F148A5D8;
            v143[2] = 561211770;
          }
          v187[0] = MEMORY[0x1E4F143A8];
          v187[1] = 0x40000000;
          v187[2] = ___ZNK11HALS_System15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
          v187[3] = &__block_descriptor_tmp_168;
          v187[4] = this;
          v187[5] = a6;
          uint64_t v15 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v15, (uint64_t)v187);
          goto LABEL_254;
        }
        goto LABEL_286;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_System.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4678;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_GetPropertyData: wrong size for kAudioHardwarePropertySleepingIsAllowed", buf, 0x12u);
        }
        std::string::size_type v159 = __cxa_allocate_exception(0x10uLL);
        *(void *)std::string::size_type v159 = off_1F148A5D8;
        v159[2] = 561211770;
      }
      if (a9)
      {
        unsigned int v14 = *((unsigned __int8 *)a9 + 256);
        goto LABEL_247;
      }
      goto LABEL_289;
    }
    if (mSelector != 1920297316)
    {
      if (mSelector != 1934587252) {
        goto LABEL_286;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_System.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4291;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyDefaultSystemOutputDevice", buf, 0x12u);
        }
        std::string v150 = __cxa_allocate_exception(0x10uLL);
        *(void *)std::string v150 = off_1F148A5D8;
        v150[2] = 561211770;
      }
      *(void *)AudioStreamRangedDescription buf = *((void *)this + 158);
      *(_DWORD *)&uint8_t buf[8] = HALB_Mutex::Lock(*(HALB_Mutex **)buf);
      int v45 = *(_DWORD *)(*(void *)buf + 312);
      goto LABEL_253;
    }
LABEL_142:
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_System.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4364;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyPhysicalDeviceForUID", buf, 0x12u);
      }
      std::string v140 = __cxa_allocate_exception(0x10uLL);
      *(void *)std::string v140 = off_1F148A5D8;
      v140[2] = 561211770;
    }
    if (a7 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_System.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4365;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad qualifier data size for kAudioHardwarePropertyPhysicalDeviceForUID", buf, 0x12u);
      }
      v141 = __cxa_allocate_exception(0x10uLL);
      *(void *)v141 = off_1F148A5D8;
      v141[2] = 561211770;
    }
    mach_port_t v64 = HALS_System::CopyDeviceByUID(this, *a8, a9);
    if (v64) {
      int v66 = *((_DWORD *)v64 + 4);
    }
    else {
      int v66 = 0;
    }
    goto LABEL_309;
  }
  if (mSelector > 1969841250)
  {
    if (mSelector <= 1969841267)
    {
      if (mSelector == 1969841251)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_System.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4522;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyTranslateUIDToClockDevice", buf, 0x12u);
          }
          std::string v157 = __cxa_allocate_exception(0x10uLL);
          *(void *)std::string v157 = off_1F148A5D8;
          v157[2] = 561211770;
        }
        if (a7 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_System.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4523;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad qualifier data size for kAudioHardwarePropertyTranslateUIDToClockDevice", buf, 0x12u);
          }
          uint64_t v170 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v170 = off_1F148A5D8;
          v170[2] = 561211770;
        }
        mach_port_t v64 = HALS_System::CopyClockDeviceByUID(this, *a8, (HALS_Client *)a3);
        if (v64) {
          int v66 = *((_DWORD *)v64 + 4);
        }
        else {
          int v66 = 0;
        }
        goto LABEL_309;
      }
      if (mSelector != 1969841252) {
        goto LABEL_286;
      }
      goto LABEL_142;
    }
    if (mSelector != 1969841268)
    {
      if (mSelector == 1970496882)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_System.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4580;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_GetPropertyData: bad property data size for kAudioHardwarePropertyUserSessionIsActiveOrHeadless", buf, 0x12u);
          }
          mach_port_t v161 = __cxa_allocate_exception(0x10uLL);
          *(void *)mach_port_t v161 = off_1F148A5D8;
          v161[2] = 561211770;
        }
      }
      else
      {
        if (mSelector != 1986359923) {
          goto LABEL_286;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_System.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4539;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertySystemVersion", buf, 0x12u);
          }
          AudioObjectPropertyAddress v17 = __cxa_allocate_exception(0x10uLL);
          *(void *)AudioObjectPropertyAddress v17 = off_1F148A5D8;
          v17[2] = 561211770;
        }
      }
LABEL_246:
      unsigned int v14 = 1;
      goto LABEL_247;
    }
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_System.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4495;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyTranslateUIDToTap", buf, 0x12u);
      }
      std::string v164 = __cxa_allocate_exception(0x10uLL);
      *(void *)std::string v164 = off_1F148A5D8;
      v164[2] = 561211770;
    }
    if (a7 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_System.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4496;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad qualifier data size for kAudioHardwarePropertyTranslateUIDToTap", buf, 0x12u);
      }
      uint64_t v174 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v174 = off_1F148A5D8;
      v174[2] = 561211770;
    }
    CFStringRef v120 = *a8;
    if (*a8)
    {
      CFRetain(*a8);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)buf, v120);
      CFStringRef v120 = *(const __CFString **)buf;
      if (*(void *)buf)
      {
        CFRetain(*(CFTypeRef *)buf);
        char v121 = 0;
LABEL_312:
        v187[6] = v120;
        uint64_t v128 = (HALS_ObjectMap *)HALS_System::CopyTapByUID((uint64_t)v12, v120, (uint64_t)a9);
        if ((v121 & 1) == 0) {
          CFRelease(v120);
        }
        if (v128) {
          int v129 = *((_DWORD *)v128 + 4);
        }
        else {
          int v129 = 0;
        }
        *(_DWORD *)a6 = v129;
        *a5 = 4;
        HALS_ObjectMap::ReleaseObject(v128, v127);
        if (*(void *)buf) {
          CFRelease(*(CFTypeRef *)buf);
        }
        return;
      }
    }
    else
    {
      *(void *)AudioStreamRangedDescription buf = 0;
    }
    char v121 = 1;
    goto LABEL_312;
  }
  if (mSelector > 1953526562)
  {
    if (mSelector != 1953526563)
    {
      if (mSelector == 1969841250)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_System.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4477;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyTranslateUIDToBox", buf, 0x12u);
          }
          std::string v149 = __cxa_allocate_exception(0x10uLL);
          *(void *)std::string v149 = off_1F148A5D8;
          v149[2] = 561211770;
        }
        if (a7 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_System.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4478;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad qualifier data size for kAudioHardwarePropertyTranslateUIDToBox", buf, 0x12u);
          }
          std::string::size_type v166 = __cxa_allocate_exception(0x10uLL);
          *(void *)std::string::size_type v166 = off_1F148A5D8;
          v166[2] = 561211770;
        }
        CFStringRef v47 = *a8;
        *(void *)AudioStreamRangedDescription buf = 0;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&buf[16] = 0x4002000000;
        *(void *)&long long v199 = __Block_byref_object_copy__6832;
        *((void *)&v199 + 1) = __Block_byref_object_dispose__6833;
        uint64_t v200 = 0;
        int v201 = 0;
        uint64_t v202 = 0;
        uint64_t v191 = MEMORY[0x1E4F143A8];
        uint64_t v192 = 0x40000000;
        uint64_t v193 = (uint64_t)___ZNK11HALS_System12CopyBoxByUIDEPK10__CFStringP11HALS_Client_block_invoke;
        float v194 = &unk_1E62329E0;
        float v195 = buf;
        float v196 = this;
        signed int v48 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v48, (uint64_t)&v191);
        int v49 = *(HALS_DeviceManager ***)(*(void *)&buf[8] + 40);
        uint64_t v50 = *(HALS_DeviceManager ***)(*(void *)&buf[8] + 48);
        while (v49 != v50)
        {
          CFStringRef v51 = HALS_DeviceManager::CopyBoxByUID(*v49, v47, a9);
          if (v51) {
            goto LABEL_292;
          }
          ++v49;
        }
        CFStringRef v51 = 0;
LABEL_292:
        _Block_object_dispose(buf, 8);
        HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(&v200, v122);
        if (v51) {
          int v124 = *((_DWORD *)v51 + 4);
        }
        else {
          int v124 = 0;
        }
        *(_DWORD *)a6 = v124;
        *a5 = 4;
        HALS_ObjectMap::ReleaseObject(v51, v123);
        return;
      }
      goto LABEL_286;
    }
    *a5 = 0;
    *(void *)AudioStreamRangedDescription buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x4002000000;
    *(void *)&long long v199 = __Block_byref_object_copy__115_6956;
    *((void *)&v199 + 1) = __Block_byref_object_dispose__116_6957;
    uint64_t v200 = 0;
    int v201 = 0;
    uint64_t v202 = 0;
    uint64_t v191 = MEMORY[0x1E4F143A8];
    uint64_t v192 = 0x40000000;
    uint64_t v193 = (uint64_t)___ZNK11HALS_System10GetTapListEjRjPjP11HALS_Client_block_invoke;
    float v194 = &unk_1E6232ED0;
    float v195 = buf;
    float v196 = this;
    float v197 = a9;
    long long v93 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v93, (uint64_t)&v191);
    uint64_t v95 = *(void *)(*(void *)&buf[8] + 40);
    uint64_t v94 = *(void *)(*(void *)&buf[8] + 48);
    if (v95 != v94)
    {
      unsigned int v96 = *a5;
      uint64_t v97 = v95 + 4;
      do
      {
        *((_DWORD *)a6 + v96) = *(_DWORD *)(v97 - 4);
        unsigned int v96 = *a5 + 1;
        *a5 = v96;
        BOOL v98 = v96 >= a4 >> 2 || v97 == v94;
        v97 += 4;
      }
      while (!v98);
    }
    _Block_object_dispose(buf, 8);
    if (v200)
    {
      int v201 = v200;
      operator delete(v200);
    }
    goto LABEL_304;
  }
  if (mSelector != 1953325673)
  {
    if (mSelector != 1953326883) {
      goto LABEL_286;
    }
    *(void *)AudioStreamRangedDescription buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x4002000000;
    *(void *)&long long v199 = __Block_byref_object_copy__6832;
    *((void *)&v199 + 1) = __Block_byref_object_dispose__6833;
    uint64_t v200 = 0;
    int v201 = 0;
    uint64_t v202 = 0;
    uint64_t v191 = MEMORY[0x1E4F143A8];
    uint64_t v192 = 0x40000000;
    uint64_t v193 = (uint64_t)___ZNK11HALS_System23GetTransportManagerListEjRjPj_block_invoke;
    float v194 = &unk_1E6232990;
    float v195 = buf;
    float v196 = this;
    unsigned __int8 v36 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v36, (uint64_t)&v191);
    *a5 = 0;
    uint64_t v37 = *(void *)(*(void *)&buf[8] + 40);
    uint64_t v38 = *(void *)(*(void *)&buf[8] + 48);
    if (v37 == v38) {
      goto LABEL_280;
    }
    unsigned int v39 = 0;
    while (1)
    {
      while (1)
      {
        int v41 = *(_DWORD *)(*(void *)v37 + 20);
        int v40 = *(_DWORD *)(*(void *)v37 + 24);
        if (v41 != v40 && v41 != 1953656941) {
          break;
        }
        if (v41 == 1953656941 || v41 != v40) {
          goto LABEL_94;
        }
LABEL_91:
        v37 += 8;
        if (v37 == v38) {
          goto LABEL_280;
        }
      }
      if (v40 != 1953656941) {
        goto LABEL_91;
      }
LABEL_94:
      *((_DWORD *)a6 + v39) = *(_DWORD *)(*(void *)v37 + 16);
      unsigned int v39 = *a5 + 1;
      *a5 = v39;
      v37 += 8;
      if (v39 >= a4 >> 2 || v37 == v38) {
        goto LABEL_280;
      }
    }
  }
  if (a4 <= 3)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_System.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4451;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad property data size for kAudioHardwarePropertyTranslateBundleIDToTransportManager", buf, 0x12u);
    }
    std::string v154 = __cxa_allocate_exception(0x10uLL);
    *(void *)std::string v154 = off_1F148A5D8;
    v154[2] = 561211770;
  }
  if (a7 <= 7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_System.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4452;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::GetPropertyData: bad qualifier data size for kAudioHardwarePropertyTranslateBundleIDToTransportManager", buf, 0x12u);
    }
    uint64_t v168 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v168 = off_1F148A5D8;
    v168[2] = 561211770;
  }
  CFStringRef v68 = *a8;
  *(void *)AudioStreamRangedDescription buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&buf[16] = 0x4002000000;
  *(void *)&long long v199 = __Block_byref_object_copy__6832;
  *((void *)&v199 + 1) = __Block_byref_object_dispose__6833;
  uint64_t v200 = 0;
  int v201 = 0;
  uint64_t v202 = 0;
  uint64_t v191 = MEMORY[0x1E4F143A8];
  uint64_t v192 = 0x40000000;
  uint64_t v193 = (uint64_t)___ZNK11HALS_System30CopyTransportManagerByBundleIDEPK10__CFString_block_invoke;
  float v194 = &unk_1E6232968;
  float v195 = buf;
  float v196 = this;
  unint64_t v69 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v69, (uint64_t)&v191);
  uint64_t v70 = *(HALS_ObjectMap ***)(*(void *)&buf[8] + 40);
  double v71 = *(HALS_ObjectMap ***)(*(void *)&buf[8] + 48);
  if (v70 == v71)
  {
LABEL_177:
    std::string::size_type v79 = 0;
    goto LABEL_331;
  }
  while (1)
  {
    uint64_t v72 = *v70;
    int v74 = *((_DWORD *)*v70 + 5);
    int v73 = *((_DWORD *)*v70 + 6);
    if (v74 == v73 || v74 == 1953656941) {
      break;
    }
    if (v73 == 1953656941) {
      goto LABEL_172;
    }
LABEL_176:
    if (++v70 == v71) {
      goto LABEL_177;
    }
  }
  if (v74 != 1953656941 && v74 == v73) {
    goto LABEL_176;
  }
LABEL_172:
  CFStringRef v77 = (const __CFString *)*((void *)v72 + 6);
  if (v77)
  {
    CFRetain(v77);
    CFStringRef v77 = (const __CFString *)*((void *)v72 + 6);
  }
  uint64_t v188 = (uint64_t)v77;
  LOBYTE(v189) = 1;
  if (CFStringCompare(v77, v68, 0))
  {
    CACFString::~CACFString((CACFString *)&v188);
    goto LABEL_176;
  }
  std::string::size_type v79 = *v70;
  HALS_ObjectMap::RetainObject(v79, v78);
  CACFString::~CACFString((CACFString *)&v188);
LABEL_331:
  _Block_object_dispose(buf, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(&v200, v134);
  if (v79) {
    int v136 = *((_DWORD *)v79 + 4);
  }
  else {
    int v136 = 0;
  }
  *(_DWORD *)a6 = v136;
  *a5 = 4;
  HALS_ObjectMap::ReleaseObject(v79, v135);
}

void sub_1BACE2F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  CACFString::~CACFString((CACFString *)va);
  _Block_object_dispose((const void *)(v16 - 160), 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v15, v18);
  _Unwind_Resume(a1);
}

HALS_ObjectMap *HALS_System::CopyDeviceByUID(HALS_System *this, const __CFString *a2, HALS_Client *a3)
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x4002000000;
  uint64_t v15 = __Block_byref_object_copy__6832;
  uint64_t v16 = __Block_byref_object_dispose__6833;
  memset(v17, 0, sizeof(v17));
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  uint64_t v11[2] = ___ZNK11HALS_System15CopyDeviceByUIDEPK10__CFStringP11HALS_Client_block_invoke;
  v11[3] = &unk_1E6232B20;
  v11[4] = &v12;
  void v11[5] = this;
  uint64_t v5 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v11);
  uint64_t v6 = (HALS_DeviceManager **)v13[5];
  uint64_t v7 = (HALS_DeviceManager **)v13[6];
  while (v6 != v7)
  {
    int v8 = HALS_DeviceManager::CopyDeviceByUID(*v6, a2, a3);
    if (v8) {
      goto LABEL_6;
    }
    ++v6;
  }
  int v8 = 0;
LABEL_6:
  _Block_object_dispose(&v12, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v17, v9);
  return v8;
}

void sub_1BACE3254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v7, v9);
  _Unwind_Resume(a1);
}

HALS_ObjectMap *HALS_System::CopyPlugInByBundleID(HALS_System *this, const __CFString *a2)
{
  uint64_t v21 = 0;
  mach_port_t v22 = &v21;
  uint64_t v23 = 0x4002000000;
  unsigned int v24 = __Block_byref_object_copy__6832;
  uint64_t v25 = __Block_byref_object_dispose__6833;
  memset(v26, 0, sizeof(v26));
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 0x40000000;
  v20[2] = ___ZNK11HALS_System20CopyPlugInByBundleIDEPK10__CFString_block_invoke;
  _DWORD v20[3] = &unk_1E62328C8;
  v20[4] = &v21;
  v20[5] = this;
  int v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v20);
  uint64_t v4 = (HALS_ObjectMap **)v22[5];
  for (unsigned int i = (HALS_ObjectMap **)v22[6]; v4 != i; ++v4)
  {
    uint64_t v6 = *v4;
    int v7 = *((_DWORD *)*v4 + 5);
    int v8 = *((_DWORD *)*v4 + 6);
    if (v7 == v8)
    {
      if (v7 != 1953656941 && v7 != 1634757735) {
        continue;
      }
    }
    else if (v7 != 1634757735 && v7 != 1953656941 && v8 != 1634757735 && v8 != 1953656941)
    {
      continue;
    }
    CFStringRef v13 = (const __CFString *)*((void *)v6 + 6);
    if (v13)
    {
      CFRetain(v13);
      CFStringRef v13 = (const __CFString *)*((void *)v6 + 6);
    }
    CFStringRef v18 = v13;
    char v19 = 1;
    if (CFEqual(v13, a2))
    {
      uint64_t v15 = *v4;
      HALS_ObjectMap::RetainObject(*v4, v14);
      CACFString::~CACFString((CACFString *)&v18);
      goto LABEL_26;
    }
    CACFString::~CACFString((CACFString *)&v18);
  }
  uint64_t v15 = 0;
LABEL_26:
  _Block_object_dispose(&v21, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v26, v16);
  return v15;
}

void sub_1BACE3438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  CACFString::~CACFString((CACFString *)&a9);
  _Block_object_dispose(&a17, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v17, v19);
  _Unwind_Resume(a1);
}

uint64_t HALS_System::CopyTapByUID(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v12 = 0;
  CFStringRef v13 = &v12;
  uint64_t v14 = 0x2000000000;
  uint64_t v15 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 1174405120;
  v9[2] = ___ZNK11HALS_System12CopyTapByUIDEN10applesauce2CF9StringRefEP11HALS_Client_block_invoke;
  void v9[3] = &unk_1F146BAC8;
  v9[4] = &v12;
  v9[5] = a1;
  if (a2) {
    CFRetain(a2);
  }
  CFTypeRef cf = a2;
  uint64_t v11 = a3;
  uint64_t v6 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v9);
  uint64_t v7 = v13[3];
  if (cf) {
    CFRelease(cf);
  }
  _Block_object_dispose(&v12, 8);
  return v7;
}

void sub_1BACE3578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  applesauce::CF::StringRef::~StringRef(v17);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

HALS_ObjectMap *HALS_System::CopyClockDeviceByUID(HALS_System *this, const __CFString *a2, HALS_Client *a3)
{
  uint64_t v12 = 0;
  CFStringRef v13 = &v12;
  uint64_t v14 = 0x4002000000;
  uint64_t v15 = __Block_byref_object_copy__6832;
  uint64_t v16 = __Block_byref_object_dispose__6833;
  memset(v17, 0, sizeof(v17));
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  uint64_t v11[2] = ___ZNK11HALS_System20CopyClockDeviceByUIDEPK10__CFStringP11HALS_Client_block_invoke;
  v11[3] = &unk_1E6232A58;
  v11[4] = &v12;
  void v11[5] = this;
  uint64_t v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *, const __CFString *, HALS_Client *))(*(void *)this + 56))(this, a2, a3);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v11);
  uint64_t v6 = (HALS_DeviceManager **)v13[5];
  uint64_t v7 = (HALS_DeviceManager **)v13[6];
  while (v6 != v7)
  {
    int v8 = HALS_DeviceManager::CopyClockDeviceByUID(*v6, a2, v5);
    if (v8) {
      goto LABEL_6;
    }
    ++v6;
  }
  int v8 = 0;
LABEL_6:
  _Block_object_dispose(&v12, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v17, v9);
  return v8;
}

void sub_1BACE36D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v7, v9);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK11HALS_System15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(unsigned __int8 *)(*(void *)(result + 32) + 1224);
  return result;
}

void ___ZNK11HALS_System15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_169(uint64_t a1)
{
}

void sub_1BACE372C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_System::GetNumberProcessObjects(HALS_System *this)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK11HALS_System23GetNumberProcessObjectsEv_block_invoke;
  v4[3] = &unk_1E6232DD8;
  v4[4] = &v5;
  unsigned char v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BACE3810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void HALS_System::GetProcessObjectList(HALS_System *this, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x4002000000;
  int v9 = __Block_byref_object_copy__115_6956;
  int v10 = __Block_byref_object_dispose__116_6957;
  __p = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK11HALS_System20GetProcessObjectListEv_block_invoke;
  v5[3] = &unk_1E6232DB0;
  v5[4] = &v6;
  v5[5] = a2;
  int v3 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v5);
  uint64_t v4 = v7;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(this, (const void *)v4[5], v4[6], (v4[6] - v4[5]) >> 2);
  _Block_object_dispose(&v6, 8);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
}

void sub_1BACE3944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

CFNumberRef *applesauce::CF::NumberRef::NumberRef<unsigned int,void>(CFNumberRef *a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return a1;
}

void sub_1BACE39F8(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN11HALS_System9CreateTapEPK14__CFDictionaryP11HALS_Client_block_invoke()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1BACE41C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,CFTypeRef cf,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void applesauce::dispatch::v1::async<HALS_System::_CreateTap(__CFDictionary const*,HALS_Client *)::$_0 &>(dispatch_queue_s *,HALS_System::_CreateTap(__CFDictionary const*,HALS_Client *)::$_0 &)::{lambda(void *)#1}::__invoke(unsigned int *a1)
{
  uint64_t v1 = (HALS_Tap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*a1);
  CFNumberRef v3 = v1;
  if (v1)
  {
    memset(v4, 0, sizeof(v4));
    HALS_Tap::UpdateReadingContexts(v1, v4);
  }
  HALS_ObjectMap::ReleaseObject(v3, v2);

  JUMPOUT(0x1C1859840);
}

void sub_1BACE44AC(void *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BACE4474);
}

void sub_1BACE44D8(_Unwind_Exception *a1)
{
  MEMORY[0x1C1859840](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__115_6956(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__116_6957(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZNK11HALS_System10GetTapListEjRjPjP11HALS_Client_block_invoke(void *a1)
{
  uint64_t v1 = a1[5];
  uint64_t v2 = *(void **)(a1[4] + 8);
  uint64_t v3 = a1[6];
  CFStringRef v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  HALS_System::_GetVisibleTapList(v1, (void **)&v18, v3);
  uint64_t v4 = v18;
  uint64_t v5 = v19;
  if (v18 != v19)
  {
    uint64_t v6 = (char *)v2[6];
    do
    {
      int v7 = *(_DWORD *)(*(void *)v4 + 16);
      unint64_t v8 = v2[7];
      if ((unint64_t)v6 >= v8)
      {
        int v10 = (char *)v2[5];
        uint64_t v11 = (v6 - v10) >> 2;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v8 - (void)v10;
        if (v13 >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v14);
          int v10 = (char *)v2[5];
          uint64_t v6 = (char *)v2[6];
        }
        else
        {
          uint64_t v15 = 0;
        }
        uint64_t v16 = (_DWORD *)(v14 + 4 * v11);
        *uint64_t v16 = v7;
        int v9 = (char *)(v16 + 1);
        while (v6 != v10)
        {
          int v17 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *--uint64_t v16 = v17;
        }
        v2[5] = v16;
        v2[6] = v9;
        v2[7] = v14 + 4 * v15;
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v6 = v7;
        int v9 = v6 + 4;
      }
      v2[6] = v9;
      v4 += 8;
      uint64_t v6 = v9;
    }
    while (v4 != v5);
    uint64_t v4 = v18;
  }
  if (v4)
  {
    char v19 = v4;
    operator delete(v4);
  }
}

void sub_1BACE467C(void *a1)
{
}

void sub_1BACE468C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void HALS_System::_GetVisibleTapList(uint64_t a1, void **a2, uint64_t a3)
{
  if (!a3)
  {
    if ((void **)(a1 + 1312) == a2) {
      return;
    }
    mach_port_t v22 = *(char **)(a1 + 1312);
    uint64_t v23 = *(unsigned char **)(a1 + 1320);
    size_t v24 = v23 - v22;
    unint64_t v25 = (v23 - v22) >> 3;
    uint64_t v26 = (uint64_t)a2[2];
    int v27 = (char *)*a2;
    if (v25 <= (v26 - (uint64_t)*a2) >> 3)
    {
      uint64_t v30 = a2 + 1;
      uint64_t v32 = a2[1];
      unint64_t v33 = (v32 - v27) >> 3;
      if (v33 < v25)
      {
        int v34 = &v22[8 * v33];
        if (v32 != v27)
        {
          memmove(v27, v22, v32 - v27);
          int v27 = (char *)*v30;
        }
        size_t v24 = v23 - v34;
        if (v23 == v34) {
          goto LABEL_46;
        }
        uint64_t v35 = v27;
        unsigned __int8 v36 = v34;
        goto LABEL_45;
      }
    }
    else
    {
      if (v27)
      {
        a2[1] = v27;
        operator delete(v27);
        uint64_t v26 = 0;
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
      }
      if ((v24 & 0x8000000000000000) != 0) {
LABEL_48:
      }
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      uint64_t v28 = v26 >> 2;
      if (v26 >> 2 <= v25) {
        uint64_t v28 = (v23 - v22) >> 3;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v28;
      }
      std::vector<void const*>::__vallocate[abi:ne180100](a2, v29);
      uint64_t v31 = (char *)a2[1];
      uint64_t v30 = a2 + 1;
      int v27 = v31;
    }
    if (v23 == v22)
    {
LABEL_46:
      *uint64_t v30 = &v27[v24];
      return;
    }
    uint64_t v35 = v27;
    unsigned __int8 v36 = v22;
LABEL_45:
    memmove(v35, v36, v24);
    goto LABEL_46;
  }
  uint64_t v4 = *(uint64_t **)(a1 + 1312);
  for (unsigned int i = *(uint64_t **)(a1 + 1320); v4 != i; ++v4)
  {
    uint64_t v7 = *v4;
    uint64_t v8 = *(void *)(*v4 + 48);
    BOOL v9 = (v8 & 0xFF00000000) != 0 && *(_DWORD *)(a3 + 16) == v8;
    if (v9 || !*(unsigned char *)(v7 + 83))
    {
      uint64_t v11 = a2[1];
      unint64_t v10 = (unint64_t)a2[2];
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v13 = ((char *)v11 - (unsigned char *)*a2) >> 3;
        if ((unint64_t)(v13 + 1) >> 61) {
          goto LABEL_48;
        }
        uint64_t v14 = v10 - (void)*a2;
        uint64_t v15 = v14 >> 2;
        if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
          uint64_t v15 = v13 + 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16)
        {
          unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v16);
          uint64_t v7 = *v4;
        }
        else
        {
          uint64_t v17 = 0;
        }
        CFStringRef v18 = (void *)(v16 + 8 * v13);
        *CFStringRef v18 = v7;
        unint64_t v12 = v18 + 1;
        uint64_t v20 = (char *)*a2;
        char v19 = (char *)a2[1];
        if (v19 != *a2)
        {
          do
          {
            uint64_t v21 = *((void *)v19 - 1);
            v19 -= 8;
            *--CFStringRef v18 = v21;
          }
          while (v19 != v20);
          char v19 = (char *)*a2;
        }
        *a2 = v18;
        a2[1] = v12;
        a2[2] = (void *)(v16 + 8 * v17);
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *uint64_t v11 = v7;
        unint64_t v12 = v11 + 1;
      }
      a2[1] = v12;
    }
  }
}

void ___ZNK11HALS_System36CopyNonMetaDeviceByIsolatedUseCaseIDE23IsolatedAudio_UseCaseIDP11HALS_Client_block_invoke(uint64_t a1)
{
}

void sub_1BACE48E0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

double ___ZNK11HALS_System20GetProcessObjectListEv_block_invoke(uint64_t a1)
{
  HALS_System::_GetProcessObjectList((HALS_System *)&v5, *(void *)(*(void *)(a1 + 40) + 1288), *(void *)(*(void *)(a1 + 40) + 1296));
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 8);
  uint64_t v3 = (void *)v2[5];
  if (v3)
  {
    v2[6] = v3;
    operator delete(v3);
  }
  double result = *(double *)&v5;
  *(_OWORD *)(v2 + 5) = v5;
  v2[7] = v6;
  return result;
}

void HALS_System::_GetProcessObjectList(HALS_System *this, uint64_t a2, uint64_t a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    do
    {
      int v9 = *(_DWORD *)(*(void *)v4 + 232);
      unint64_t v10 = (HALS_PlatformBehaviors *)getpid();
      if (v9 != v10
        || (platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(v10),
            (*(unsigned int (**)(uint64_t *))(*platform_behaviors + 96))(platform_behaviors)))
      {
        int v12 = *(_DWORD *)(*(void *)v4 + 16);
        if ((unint64_t)v8 >= v7)
        {
          uint64_t v14 = (v8 - v6) >> 2;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v7 - (void)v6) >> 1 > v15) {
            unint64_t v15 = (uint64_t)(v7 - (void)v6) >> 1;
          }
          if (v7 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16) {
            unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v16);
          }
          else {
            uint64_t v17 = 0;
          }
          CFStringRef v18 = (char *)(v16 + 4 * v14);
          *(_DWORD *)CFStringRef v18 = v12;
          uint64_t v13 = v18 + 4;
          while (v8 != v6)
          {
            int v19 = *((_DWORD *)v8 - 1);
            v8 -= 4;
            *((_DWORD *)v18 - 1) = v19;
            v18 -= 4;
          }
          unint64_t v7 = v16 + 4 * v17;
          *(void *)this = v18;
          *((void *)this + 1) = v13;
          *((void *)this + 2) = v7;
          if (v6) {
            operator delete(v6);
          }
          uint64_t v6 = v18;
        }
        else
        {
          *(_DWORD *)uint64_t v8 = v12;
          uint64_t v13 = v8 + 4;
        }
        *((void *)this + 1) = v13;
        uint64_t v8 = v13;
      }
      v4 += 8;
    }
    while (v4 != a3);
  }
}

void sub_1BACE4ABC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK11HALS_System23GetNumberProcessObjectsEv_block_invoke(uint64_t a1)
{
  HALS_System::_GetProcessObjectList((HALS_System *)v4, *(void *)(*(void *)(a1 + 40) + 1288), *(void *)(*(void *)(a1 + 40) + 1296));
  uint64_t v2 = v4[0];
  uint64_t v3 = v4[1];
  if (v4[0]) {
    operator delete(v4[0]);
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (unint64_t)(v3 - v2) >> 2;
}

void ___ZNK11HALS_System20CopyClockDeviceByUIDEPK10__CFStringP11HALS_Client_block_invoke(uint64_t a1)
{
}

void sub_1BACE4B70(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System18GetClockDeviceListEjRjPjP11HALS_Client_block_invoke(uint64_t a1)
{
}

void sub_1BACE4BB4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System12CopyTapByUIDEN10applesauce2CF9StringRefEP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 40);
  CFStringRef v2 = *(const __CFString **)(a1 + 48);
  if (v2) {
    CFRetain(*(CFTypeRef *)(a1 + 48));
  }
  CFStringRef v4 = v2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALS_System::_CopyTapByUID(v3, &v4, *(void *)(a1 + 56));
  if (v2) {
    CFRelease(v2);
  }
}

void sub_1BACE4C44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_48c31_ZTSN10applesauce2CF9StringRefE(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 48);
  if (v1) {
    CFRelease(v1);
  }
}

void *__copy_helper_block_e8_48c31_ZTSN10applesauce2CF9StringRefE(void *result, uint64_t a2)
{
  CFStringRef v2 = result;
  uint64_t v3 = *(void *)(a2 + 48);
  if (v3) {
    double result = CFRetain(*(CFTypeRef *)(a2 + 48));
  }
  v2[6] = v3;
  return result;
}

HALS_ObjectMap *HALS_System::_CopyTapByUID(uint64_t a1, const __CFString **a2, uint64_t a3)
{
  __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  HALS_System::_GetVisibleTapList(a1, &__p, a3);
  long long v5 = (HALS_ObjectMap **)__p;
  uint64_t v6 = v13;
  while (v5 != v6)
  {
    unint64_t v7 = *v5;
    HALS_Tap::GetUID(&cf, *((const void **)*v5 + 8));
    CFTypeRef v8 = cf;
    CFComparisonResult v9 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)cf, a2);
    if (v8) {
      CFRelease(v8);
    }
    if (v9 == kCFCompareEqualTo) {
      goto LABEL_8;
    }
    ++v5;
  }
  unint64_t v7 = 0;
LABEL_8:
  HALS_ObjectMap::RetainObject(v7, v4);
  if (__p)
  {
    uint64_t v13 = (HALS_ObjectMap **)__p;
    operator delete(__p);
  }
  return v7;
}

void sub_1BACE4D64(void *a1)
{
}

void sub_1BACE4D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK11HALS_System12CopyBoxByUIDEPK10__CFStringP11HALS_Client_block_invoke(uint64_t a1)
{
}

void sub_1BACE4DBC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System10GetBoxListEjRjPjP11HALS_Client_block_invoke(uint64_t a1)
{
}

void sub_1BACE4E00(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System30CopyTransportManagerByBundleIDEPK10__CFString_block_invoke(uint64_t a1)
{
}

void sub_1BACE4E44(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System23GetTransportManagerListEjRjPj_block_invoke(uint64_t a1)
{
}

void sub_1BACE4E88(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System20CopyPlugInByBundleIDEPK10__CFString_block_invoke(uint64_t a1)
{
}

void sub_1BACE4ECC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System13GetPlugInListEjRjPj_block_invoke(uint64_t a1)
{
}

void sub_1BACE4F10(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System15CopyDeviceByUIDEPK10__CFStringP11HALS_Client_block_invoke(uint64_t a1)
{
}

void sub_1BACE4F54(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_System::GetPropertyDataSize(HALS_ObjectMap **this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, _DWORD *a5, HALS_Client *a6)
{
  unint64_t v7 = (HALS_System *)this;
  signed int mSelector = a3->mSelector;
  uint64_t v9 = 4;
  if ((int)a3->mSelector > 1886353255)
  {
    if (mSelector > 1953325672)
    {
      if (mSelector > 1969841249)
      {
        BOOL v11 = (mSelector - 1969841250) > 0x12 || ((1 << (mSelector - 98)) & 0x40007) == 0;
        if (v11 && mSelector != 1970496882 && mSelector != 1986359923) {
          goto LABEL_66;
        }
        return v9;
      }
      if (mSelector == 1953325673) {
        return v9;
      }
      if (mSelector != 1953326883)
      {
        if (mSelector == 1953526563)
        {
          uint64_t v50 = 0;
          uint64_t v51 = (uint64_t)&v50;
          uint64_t v52 = 0x2000000000;
          LODWORD(v53) = 0;
          uint64_t v56 = MEMORY[0x1E4F143A8];
          uint64_t v57 = 0x40000000;
          uint64_t v58 = (uint64_t)___ZNK11HALS_System14GetTapListSizeEP11HALS_Client_block_invoke;
          char v59 = (__n128 (*)(void *, uint64_t))&unk_1E6232EF8;
          BOOL v60 = (void (*)(uint64_t, HALS_Object *))&v50;
          CFStringRef v61 = this;
          uint64_t v62 = a6;
          uint64_t v20 = (HALB_Mutex *)(*((uint64_t (**)(HALS_ObjectMap **))*this + 7))(this);
          HALB_CommandGate::ExecuteCommand(v20, (uint64_t)&v56);
          int v21 = *(_DWORD *)(v51 + 24);
          _Block_object_dispose(&v50, 8);
          return (4 * v21);
        }
        goto LABEL_66;
      }
      uint64_t v56 = 0;
      uint64_t v57 = (uint64_t)&v56;
      uint64_t v58 = 0x4002000000;
      char v59 = __Block_byref_object_copy__6832;
      BOOL v60 = __Block_byref_object_dispose__6833;
      CFStringRef v61 = 0;
      uint64_t v62 = 0;
      uint64_t v63 = 0;
      uint64_t v50 = MEMORY[0x1E4F143A8];
      uint64_t v51 = 0x40000000;
      uint64_t v52 = (uint64_t)___ZNK11HALS_System26GetNumberTransportManagersEv_block_invoke;
      int v53 = &unk_1E6232940;
      uint64_t v54 = &v56;
      unsigned int v55 = this;
      unsigned __int8 v36 = (HALB_Mutex *)(*((uint64_t (**)(HALS_ObjectMap **))*this + 7))(this);
      HALB_CommandGate::ExecuteCommand(v36, (uint64_t)&v50);
      uint64_t v37 = *(uint64_t **)(v57 + 40);
      uint64_t v38 = *(uint64_t **)(v57 + 48);
      if (v37 != v38)
      {
        int v39 = 0;
        do
        {
          uint64_t v40 = *v37++;
          int v42 = *(_DWORD *)(v40 + 20);
          int v41 = *(_DWORD *)(v40 + 24);
          BOOL v43 = v42 == v41;
          if (v42 == 1953656941) {
            BOOL v43 = 1;
          }
          BOOL v44 = v42 != v41 || v42 == 1953656941;
          int v45 = v41 == 1953656941;
          if (v43) {
            int v45 = v44;
          }
          v39 += v45;
        }
        while (v37 != v38);
        uint64_t v9 = (4 * v39);
        goto LABEL_104;
      }
      goto LABEL_98;
    }
    if (mSelector > 1920297315)
    {
      if (mSelector <= 1936224867)
      {
        if (mSelector == 1920297316) {
          return v9;
        }
        int v10 = 1934587252;
      }
      else
      {
        if (mSelector == 1936224868 || mSelector == 1936483696) {
          return v9;
        }
        int v10 = 1937010031;
      }
      goto LABEL_65;
    }
    if (mSelector <= 1919186466)
    {
      if (mSelector == 1886353256) {
        return v9;
      }
      if (mSelector != 1886548771) {
        goto LABEL_66;
      }
      int NumberProcessObjects = HALS_System::GetNumberProcessObjects((HALS_System *)this);
      return (4 * NumberProcessObjects);
    }
    if (mSelector == 1919186467)
    {
      int v25 = 0;
      goto LABEL_100;
    }
    if (mSelector != 1919839344) {
      goto LABEL_66;
    }
    return 8;
  }
  if (mSelector > 1768845171)
  {
    if (mSelector > 1870098019)
    {
      if (mSelector <= 1886152482)
      {
        if (mSelector != 1870098020)
        {
          int v10 = 1885954665;
          goto LABEL_65;
        }
        BOOL v28 = a5 == 0;
        if (a5 && a4 >= 4)
        {
          unint64_t v29 = 0;
          do
          {
            BOOL v11 = a5[v29] == 1634757735;
            BOOL v28 = v11;
            ++v29;
          }
          while (!v11 && v29 < a4 >> 2);
        }
        if (!v28) {
          return 0;
        }
      }
      else if (mSelector != 1886152483)
      {
        if (mSelector == 1886218606) {
          return v9;
        }
        int v10 = 1886221684;
        goto LABEL_65;
      }
      int NumberProcessObjects = HALS_System::GetNumberPlugIns((HALS_System *)this);
      return (4 * NumberProcessObjects);
    }
    if (mSelector <= 1835758703)
    {
      if (mSelector == 1768845172) {
        return v9;
      }
      int v10 = 1769302372;
      goto LABEL_65;
    }
    if (mSelector != 1835758704)
    {
      int v10 = 1835821926;
LABEL_65:
      if (mSelector != v10) {
        goto LABEL_66;
      }
      return v9;
    }
    return 8;
  }
  if (mSelector <= 1682929011)
  {
    if (mSelector <= 1668049698)
    {
      if (mSelector == 1651074160) {
        return v9;
      }
      if (mSelector != 1651472419) {
        goto LABEL_66;
      }
      uint64_t v56 = 0;
      uint64_t v57 = (uint64_t)&v56;
      uint64_t v58 = 0x4002000000;
      char v59 = __Block_byref_object_copy__6832;
      BOOL v60 = __Block_byref_object_dispose__6833;
      CFStringRef v61 = 0;
      uint64_t v62 = 0;
      uint64_t v63 = 0;
      uint64_t v50 = MEMORY[0x1E4F143A8];
      uint64_t v51 = 0x40000000;
      uint64_t v52 = (uint64_t)___ZNK11HALS_System14GetNumberBoxesEP11HALS_Client_block_invoke;
      int v53 = &unk_1E62329B8;
      uint64_t v54 = &v56;
      unsigned int v55 = this;
      uint64_t v14 = (HALB_Mutex *)(*((uint64_t (**)(HALS_ObjectMap **))*this + 7))(this);
      HALB_CommandGate::ExecuteCommand(v14, (uint64_t)&v50);
      unint64_t v15 = *(uint64_t **)(v57 + 40);
      unint64_t v16 = *(uint64_t **)(v57 + 48);
      if (v15 == v16)
      {
        uint64_t v9 = 0;
      }
      else
      {
        int v17 = 0;
        do
        {
          CFStringRef v47 = 0;
          uint64_t v48 = 0;
          uint64_t v49 = 0;
          HALS_DeviceManager::CopyBoxList(*v15, (uint64_t)&v47, (uint64_t)a6);
          v17 += (unint64_t)(v48 - (void)v47) >> 3;
          HALS_DeviceManager::BasicBoxList::~BasicBoxList(&v47, v18);
          ++v15;
        }
        while (v15 != v16);
        uint64_t v9 = (4 * v17);
      }
LABEL_104:
      _Block_object_dispose(&v56, 8);
      HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(&v61, v46);
      return v9;
    }
    if (mSelector != 1668049699)
    {
      int v10 = 1682533920;
      goto LABEL_65;
    }
    uint64_t v56 = 0;
    uint64_t v57 = (uint64_t)&v56;
    uint64_t v58 = 0x4002000000;
    char v59 = __Block_byref_object_copy__6832;
    BOOL v60 = __Block_byref_object_dispose__6833;
    CFStringRef v61 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    uint64_t v50 = MEMORY[0x1E4F143A8];
    uint64_t v51 = 0x40000000;
    uint64_t v52 = (uint64_t)___ZNK11HALS_System21GetNumberClockDevicesEP11HALS_Client_block_invoke;
    int v53 = &unk_1E6232A30;
    uint64_t v54 = &v56;
    unsigned int v55 = this;
    uint64_t v31 = (HALB_Mutex *)(*((uint64_t (**)(HALS_ObjectMap **))*this + 7))(this);
    HALB_CommandGate::ExecuteCommand(v31, (uint64_t)&v50);
    uint64_t v32 = *(uint64_t **)(v57 + 40);
    unint64_t v33 = *(uint64_t **)(v57 + 48);
    if (v32 != v33)
    {
      int v34 = 0;
      do
      {
        CFStringRef v47 = 0;
        uint64_t v48 = 0;
        uint64_t v49 = 0;
        HALS_DeviceManager::CopyClockDeviceList(*v32, (uint64_t)&v47);
        v34 += (unint64_t)(v48 - (void)v47) >> 3;
        HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v47, v35);
        ++v32;
      }
      while (v32 != v33);
      uint64_t v9 = (4 * v34);
      goto LABEL_104;
    }
LABEL_98:
    uint64_t v9 = 0;
    goto LABEL_104;
  }
  if (mSelector > 1685288047)
  {
    if (mSelector == 1685288048) {
      return v9;
    }
    if (mSelector == 1685416292) {
      return 32;
    }
    int v10 = 1698776147;
    goto LABEL_65;
  }
  if (mSelector == 1682929012) {
    return v9;
  }
  if (mSelector == 1684370979)
  {
    platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors((HALS_PlatformBehaviors *)this);
    uint64_t v23 = (HALS_PlatformBehaviors *)(*(uint64_t (**)(uint64_t *))(*platform_behaviors + 24))(platform_behaviors);
    if (v23)
    {
      size_t v24 = HALS_PlatformBehaviors::get_platform_behaviors(v23);
      if ((*(unsigned int (**)(uint64_t *))(*v24 + 24))(v24) == 1)
      {
        this = (HALS_ObjectMap **)v7;
        int v25 = 1;
        char v26 = 0;
LABEL_101:
        int NumberProcessObjects = HALS_System::GetNumberDevices((uint64_t)this, v25, v26, a6);
        return (4 * NumberProcessObjects);
      }
      return 0;
    }
    this = (HALS_ObjectMap **)v7;
    int v25 = 2;
LABEL_100:
    char v26 = 1;
    goto LABEL_101;
  }
LABEL_66:

  return HALS_Object::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
}

void sub_1BACE57E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v11, v13);
  _Unwind_Resume(a1);
}

uint64_t HALS_System::GetNumberPlugIns(HALS_System *this)
{
  uint64_t v18 = 0;
  int v19 = &v18;
  uint64_t v20 = 0x4002000000;
  int v21 = __Block_byref_object_copy__6832;
  mach_port_t v22 = __Block_byref_object_dispose__6833;
  memset(v23, 0, sizeof(v23));
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 0x40000000;
  v17[2] = ___ZNK11HALS_System16GetNumberPlugInsEv_block_invoke;
  v17[3] = &unk_1E62328A0;
  std::runtime_error v17[4] = &v18;
  v17[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v17);
  CFStringRef v2 = (uint64_t *)v19[5];
  uint64_t v3 = (uint64_t *)v19[6];
  if (v2 == v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    LODWORD(v4) = 0;
    do
    {
      uint64_t v5 = *v2++;
      int v7 = *(_DWORD *)(v5 + 20);
      int v6 = *(_DWORD *)(v5 + 24);
      BOOL v9 = v7 == 1634757735 || v7 == 1953656941;
      BOOL v10 = v7 == v6;
      BOOL v11 = v9 || v7 != v6;
      BOOL v13 = v6 == 1634757735 || v6 == 1953656941;
      if (v7 == 1634757735 || v7 == 1953656941) {
        BOOL v13 = v11;
      }
      if (v10) {
        BOOL v13 = v11;
      }
      uint64_t v4 = v4 + v13;
    }
    while (v2 != v3);
  }
  _Block_object_dispose(&v18, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v23, v15);
  return v4;
}

void sub_1BACE59C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v7, v9);
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_System14GetTapListSizeEP11HALS_Client_block_invoke(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[6];
  int v6 = 0;
  int v7 = 0;
  uint64_t v8 = 0;
  HALS_System::_GetVisibleTapList(v2, (void **)&v6, v3);
  uint64_t v4 = v6;
  uint64_t v5 = v7;
  if (v6)
  {
    int v7 = v6;
    operator delete(v6);
  }
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = (unint64_t)(v5 - v4) >> 3;
}

void sub_1BACE5A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK11HALS_System21GetNumberClockDevicesEP11HALS_Client_block_invoke(uint64_t a1)
{
}

void sub_1BACE5A9C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System14GetNumberBoxesEP11HALS_Client_block_invoke(uint64_t a1)
{
}

void sub_1BACE5AE0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System26GetNumberTransportManagersEv_block_invoke(uint64_t a1)
{
}

void sub_1BACE5B24(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System16GetNumberPlugInsEv_block_invoke(uint64_t a1)
{
}

void sub_1BACE5B68(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_System::IsPropertySettable(HALS_System *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  signed int mSelector = a3->mSelector;
  uint64_t result = 1;
  if ((int)a3->mSelector > 1886353255)
  {
    if (mSelector > 1953325672)
    {
      if (mSelector <= 1969841250)
      {
        if (mSelector <= 1953526562)
        {
          if (mSelector == 1953325673) {
            return 0;
          }
          int v7 = 1953326883;
          goto LABEL_54;
        }
        if (mSelector == 1953526563) {
          return 0;
        }
        unsigned __int16 v8 = 25698;
      }
      else
      {
        if (mSelector > 1969841267)
        {
          if (mSelector == 1969841268 || mSelector == 1970496882) {
            return 0;
          }
          int v7 = 1986359923;
          goto LABEL_54;
        }
        if (mSelector == 1969841251) {
          return 0;
        }
        unsigned __int16 v8 = 25700;
      }
      int v7 = v8 | 0x75690000;
    }
    else
    {
      if (mSelector > 1920297315)
      {
        if (mSelector <= 1936224867)
        {
          if (mSelector != 1920297316)
          {
            int v6 = 1934587252;
            goto LABEL_45;
          }
        }
        else
        {
          if (mSelector != 1936224868)
          {
            if (mSelector == 1936483696) {
              return result;
            }
            int v6 = 1937010031;
            goto LABEL_45;
          }
          if (a4) {
            return HALS_ClientEntitlements::HasEntitlementWithBooleanValue((HALS_Client *)((char *)a4 + 288), @"com.apple.private.audio.default-shared-device");
          }
        }
        return 0;
      }
      if (mSelector > 1919186466)
      {
        if (mSelector != 1919186467)
        {
          int v6 = 1919839344;
          goto LABEL_45;
        }
        return 0;
      }
      if (mSelector == 1886353256) {
        return result;
      }
      int v7 = 1886548771;
    }
LABEL_54:
    if (mSelector != v7) {
      return HALS_Object::IsPropertySettable(1, a2, (int *)a3);
    }
    return 0;
  }
  if (mSelector > 1698776146)
  {
    if (mSelector <= 1835821925)
    {
      if (mSelector > 1769302371)
      {
        if (mSelector == 1769302372) {
          return 0;
        }
        int v7 = 1835758704;
      }
      else
      {
        if (mSelector == 1698776147) {
          return result;
        }
        int v7 = 1768845172;
      }
    }
    else
    {
      if (mSelector > 1886152482)
      {
        if (mSelector != 1886152483)
        {
          if (mSelector == 1886218606) {
            return result;
          }
          int v6 = 1886221684;
LABEL_45:
          if (mSelector == v6) {
            return result;
          }
          return HALS_Object::IsPropertySettable(1, a2, (int *)a3);
        }
        return 0;
      }
      if (mSelector == 1835821926) {
        return 0;
      }
      int v7 = 1885954665;
    }
    goto LABEL_54;
  }
  if (mSelector <= 1682929011)
  {
    if (mSelector > 1668049698)
    {
      if (mSelector != 1668049699)
      {
        int v6 = 1682533920;
        goto LABEL_45;
      }
      return 0;
    }
    if (mSelector == 1651074160) {
      return 0;
    }
    int v7 = 1651472419;
    goto LABEL_54;
  }
  if (mSelector <= 1685288047)
  {
    if (mSelector == 1682929012) {
      return result;
    }
    int v7 = 1684370979;
    goto LABEL_54;
  }
  if (mSelector != 1685288048)
  {
    int v7 = 1685416292;
    goto LABEL_54;
  }
  return result;
}

uint64_t HALS_System::HasProperty(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = *a3;
  uint64_t result = 1;
  if (*a3 > 1886221683)
  {
    if (v3 > 1937010030)
    {
      if (v3 > 1969841249)
      {
        if (((v3 - 1969841250) > 0x12 || ((1 << (v3 - 98)) & 0x40007) == 0)
          && v3 != 1970496882
          && v3 != 1986359923)
        {
          return 0;
        }
        return result;
      }
      if (v3 > 1953326882)
      {
        if (v3 == 1953326883) {
          return result;
        }
        int v5 = 1953526563;
      }
      else
      {
        if (v3 == 1937010031) {
          return result;
        }
        int v5 = 1953325673;
      }
    }
    else if (v3 > 1920297315)
    {
      if (v3 <= 1936224867)
      {
        if (v3 == 1920297316) {
          return result;
        }
        int v5 = 1934587252;
      }
      else
      {
        if (v3 == 1936224868 || v3 == 1936483696) {
          return result;
        }
        int v5 = 1937007734;
      }
    }
    else if (v3 <= 1886548770)
    {
      if (v3 == 1886221684) {
        return result;
      }
      int v5 = 1886353256;
    }
    else
    {
      if (v3 == 1886548771 || v3 == 1919186467) {
        return result;
      }
      int v5 = 1919839344;
    }
  }
  else if (v3 <= 1698776146)
  {
    if (v3 > 1682533919)
    {
      if (v3 <= 1684370978)
      {
        if (v3 == 1682533920) {
          return result;
        }
        int v5 = 1682929012;
      }
      else
      {
        if (v3 == 1684370979 || v3 == 1685288048) {
          return result;
        }
        int v5 = 1685416292;
      }
    }
    else if (v3 <= 1651472418)
    {
      if (v3 == 1650682995) {
        return result;
      }
      int v5 = 1651074160;
    }
    else
    {
      if (v3 == 1651472419 || v3 == 1668047219) {
        return result;
      }
      int v5 = 1668049699;
    }
  }
  else if (v3 <= 1835821925)
  {
    if (v3 <= 1768845171)
    {
      if (v3 == 1698776147) {
        return result;
      }
      int v5 = 1768174192;
    }
    else
    {
      if (v3 == 1768845172 || v3 == 1769302372) {
        return result;
      }
      int v5 = 1835758704;
    }
  }
  else if (v3 > 1885954664)
  {
    if (v3 == 1885954665 || v3 == 1886152483) {
      return result;
    }
    int v5 = 1886218606;
  }
  else
  {
    if (v3 == 1835821926 || v3 == 1869638759) {
      return result;
    }
    int v5 = 1870098020;
  }
  if (v3 != v5) {
    return 0;
  }
  return result;
}

uint64_t HALS_System::GetMIGDispatchQueue(HALS_System *this)
{
  return *((void *)this + 30);
}

{
  return *((void *)this + 30);
}

uint64_t HALS_System::GetCommandGate(HALS_System *this)
{
  return (uint64_t)this + 144;
}

{
  return (uint64_t)this + 144;
}

void HALS_System::_Deactivate(HALS_System *this)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 169);
  uint64_t v3 = *((void *)this + 170);
  if (v2 == v3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    int v5 = 0;
    unint64_t v6 = 0;
    do
    {
      int v7 = *(_DWORD *)(*(void *)v2 + 16);
      if ((unint64_t)v5 >= v6)
      {
        uint64_t v8 = (v5 - v4) >> 2;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        if ((uint64_t)(v6 - (void)v4) >> 1 > v9) {
          unint64_t v9 = (uint64_t)(v6 - (void)v4) >> 1;
        }
        if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          unint64_t v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v10);
        }
        else {
          uint64_t v11 = 0;
        }
        int v12 = (char *)(v10 + 4 * v8);
        *(_DWORD *)int v12 = v7;
        BOOL v13 = v12 + 4;
        while (v5 != v4)
        {
          int v14 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v12 - 1) = v14;
          v12 -= 4;
        }
        unint64_t v6 = v10 + 4 * v11;
        if (v4) {
          operator delete(v4);
        }
        uint64_t v4 = v12;
        int v5 = v13;
      }
      else
      {
        *(_DWORD *)int v5 = v7;
        v5 += 4;
      }
      v2 += 8;
    }
    while (v2 != v3);
    if (v4 != v5)
    {
      unint64_t v15 = v4;
      do
      {
        HALS_System::_DestroyIOContext((uint64_t)this, 0, *(unsigned int *)v15);
        v15 += 4;
      }
      while (v15 != v5);
    }
  }
  unint64_t v33 = 0;
  int v34 = 0;
  uint64_t v35 = 0;
  unint64_t v16 = (HALS_Object *)*((void *)this + 161);
  int v17 = (HALS_ObjectMap **)*((void *)this + 162);
  *(void *)AudioStreamRangedDescription buf = &v33;
  uint8_t buf[8] = 0;
  if (v17 != (HALS_ObjectMap **)v16)
  {
    std::vector<__CFString const*>::__vallocate[abi:ne180100](&v33, ((char *)v17 - (char *)v16) >> 3);
    uint64_t v18 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_Releaser<HALS_Client>>,HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*>((uint64_t)&v35, v16, v17, v34);
    int v34 = v18;
    int v19 = v33;
    if (v33 != v18)
    {
      uint64_t v20 = MEMORY[0x1E4F143A8];
      do
      {
        int v21 = *((_DWORD *)*v19 + 58);
        *(void *)AudioStreamRangedDescription buf = v20;
        *(void *)&uint8_t buf[8] = 0x40000000;
        *(void *)&buf[16] = ___ZN11HALS_System12RemoveClientEi_block_invoke;
        uint64_t v38 = &__block_descriptor_tmp_110;
        int v39 = this;
        int v40 = v21;
        mach_port_t v22 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v22, (uint64_t)buf);
        uint64_t v23 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
        *(void *)&v36.signed int mSelector = 0x676C6F6270727323;
        v36.uint64_t mElement = 0;
        HALS_Object::PropertiesChanged(this, v23, 0, 1u, &v36);
        ++v19;
      }
      while (v19 != v18);
    }
  }
  *(void *)AudioStreamRangedDescription buf = &v33;
  std::vector<HALS_Releaser<HALS_Client>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v4) {
    operator delete(v4);
  }
  if (*((void *)this + 190))
  {
    *(void *)AudioStreamRangedDescription buf = (char *)this + 1528;
    *(_DWORD *)&uint8_t buf[8] = HALB_Mutex::Lock((HALS_System *)((char *)this + 1528));
    CFRunLoopStop(*((CFRunLoopRef *)this + 190));
    *((unsigned char *)this + 1800) = 1;
    HALB_Guard::Wait(*(HALB_Guard **)buf);
    HALB_Guard::Locker::~Locker((HALB_Mutex **)buf);
  }
  uint64_t v24 = *((void *)this + 179);
  if (!v24)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_System.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3714;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_InitPowerManagement: PowerManager is null", buf, 0x12u);
      uint64_t v24 = *((void *)this + 179);
    }
    else
    {
      uint64_t v24 = 0;
    }
  }
  (*(void (**)(uint64_t))(*(void *)v24 + 24))(v24);
  uint64_t v26 = *((void *)this + 157);
  if (v26)
  {
    *((void *)this + 157) = 0;
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  memset(buf, 0, sizeof(buf));
  int v27 = (unsigned char *)*((void *)this + 154);
  BOOL v28 = (unsigned char *)*((void *)this + 155);
  int64_t v29 = v28 - v27;
  if (v28 != v27)
  {
    if (v29 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v30 = (HALS_DeviceManager **)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v29 >> 3);
    *(void *)AudioStreamRangedDescription buf = v30;
    *(void *)&buf[16] = &v30[v31];
    memmove(v30, v27, v29);
    uint64_t v32 = v29 >> 3;
    for (*(void *)&uint8_t buf[8] = &v30[v32]; v32 * 8; --v32)
      HALS_System::DeviceManagerDestroyed(this, *v30++);
  }
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList((HALS_ObjectMap ***)buf, v25);
  *((_DWORD *)this + 2) = 0;
}

void sub_1BACE6614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::vector<HALS_Releaser<HALS_Client>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v7) {
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

void HALS_System::DeviceManagerDestroyed(HALS_System *this, HALS_DeviceManager *a2)
{
  (*(void (**)(HALS_DeviceManager *))(*(void *)a2 + 8))(a2);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZN11HALS_System22DeviceManagerDestroyedEP18HALS_DeviceManager_block_invoke;
  v5[3] = &__block_descriptor_tmp_100_6978;
  v5[4] = this;
  v5[5] = a2;
  uint64_t v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v5);
}

void sub_1BACE6758(void *a1)
{
}

void ___ZN11HALS_System22DeviceManagerDestroyedEP18HALS_DeviceManager_block_invoke(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 1232);
  uint64_t v4 = *(char **)(v2 + 1240);
  if (v3 != (void *)v4)
  {
    while (*v3 != *(void *)(a1 + 40))
    {
      if (++v3 == (void *)v4)
      {
        uint64_t v3 = *(void **)(v2 + 1240);
        break;
      }
    }
  }
  if (v3 == (void *)v4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      uint64_t v8 = "HALS_System.cpp";
      __int16 v9 = 1024;
      int v10 = 2304;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_System::DeviceManagerDestroyed: unable to destroy old device manager.", (uint8_t *)&v7, 0x12u);
    }
  }
  else
  {
    int v5 = v3 + 1;
    int64_t v6 = v4 - (char *)(v3 + 1);
    if (v4 != (char *)(v3 + 1)) {
      memmove(v3, v5, v4 - (char *)(v3 + 1));
    }
    *(void *)(v2 + 1240) = (char *)v3 + v6;
    HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 40), (HALS_Object *)v5);
  }
}

uint64_t HALS_System::_DestroyIOContext(uint64_t this, HALS_Client *a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(HALS_ObjectMap ***)(this + 1352);
  uint64_t v4 = *(HALS_ObjectMap ***)(this + 1360);
  if (v3 != v4)
  {
    while (1)
    {
      int v5 = *v3;
      if (*((_DWORD *)*v3 + 4) == a3) {
        break;
      }
      if (++v3 == v4) {
        return this;
      }
    }
    int v7 = v3;
    if (v3 != v4)
    {
      if (!a2 || **((_DWORD **)v5 + 8) == *((_DWORD *)a2 + 4)) {
        remove_context_helper(a3, (HALS_Object *)(this + 1352), &v7);
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
        __int16 v9 = "HALS_System.cpp";
        __int16 v10 = 1024;
        int v11 = 3332;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOEngine::_DestroyIOContext: the client does not own the IO context being destroyed", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 560492391;
    }
  }
  return this;
}

void ___ZN11HALS_System12RemoveClientEi_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v4 = (HALS_Client *)HALS_System::CopyClientByProcessID((HALS_System *)v2, *(_DWORD *)(a1 + 40));
  if (v4)
  {
    int v5 = *(unsigned char **)(v2 + 1312);
    int64_t v6 = *(unsigned char **)(v2 + 1320);
    int64_t v7 = v6 - v5;
    if (v6 != v5)
    {
      if (v7 < 0) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v7 >> 3);
      memmove(v8, v5, v7);
      uint64_t v9 = 8 * (v7 >> 3);
      if (v9)
      {
        uint64_t v10 = 0;
        int v11 = (HALS_ObjectMap **)MEMORY[0x1E4F143A8];
        do
        {
          uint64_t v12 = *(HALS_ObjectMap **)&v8[v10];
          int v13 = *((_DWORD *)v4 + 4);
          block = v11;
          uint64_t v55 = 0x40000000;
          uint64_t v56 = ___ZN8HALS_Tap16HandleClientExitEj_block_invoke;
          uint64_t v57 = &__block_descriptor_tmp_33_3777;
          uint64_t v58 = v12;
          LODWORD(v59) = v13;
          int v14 = (HALB_Mutex *)(*(uint64_t (**)(HALS_ObjectMap *))(*(void *)v12 + 56))(v12);
          HALB_CommandGate::ExecuteCommand(v14, (uint64_t)&block);
          uint64_t v15 = *((void *)v12 + 6);
          BOOL v16 = (v15 & 0xFF00000000) != 0 && *((_DWORD *)v4 + 4) == v15;
          if (v16 && *((unsigned char *)v12 + 83)) {
            HALS_System::_DestroyTap((HALS_Tap ***)v2, v12, v4);
          }
          v10 += 8;
        }
        while (v9 != v10);
      }
      if (v8) {
        operator delete(v8);
      }
    }
  }
  HALS_ObjectMap::ReleaseObject(v4, v3);
  uint64_t v18 = (HALS_ObjectMap *)HALS_System::CopyClientByProcessID((HALS_System *)v2, *(_DWORD *)(a1 + 40));
  if (v18)
  {
    uint64_t v19 = *(void *)(v2 + 1360);
    uint64_t v20 = *(void *)(v2 + 1352);
    if (v19 != v20)
    {
      uint64_t v21 = 0;
      unsigned int v22 = 0;
      do
      {
        block = (HALS_ObjectMap **)(v20 + 8 * v21);
        if (**((_DWORD **)*block + 8) == *((_DWORD *)v18 + 4)) {
          remove_context_helper(*((unsigned int *)*block + 4), (HALS_Object *)(v2 + 1352), &block);
        }
        uint64_t v21 = ++v22;
      }
      while (v22 < (unint64_t)((v19 - v20) >> 3));
    }
  }
  HALS_ObjectMap::ReleaseObject(v18, v17);
  int v24 = *(_DWORD *)(a1 + 40);
  int v25 = *(HALS_ObjectMap ***)(v2 + 1288);
  uint64_t v26 = *(HALS_ObjectMap ***)(v2 + 1296);
  while (v25 != v26)
  {
    uint64_t v27 = (uint64_t)*v25++;
    int v28 = *(_DWORD *)(v27 + 232);
    if (v28 == v24)
    {
      int64_t v29 = &v25[(v28 != v24) - 1];
      if (v29 != v26)
      {
        int v53 = *v29;
        HALS_ObjectMap::RetainObject(*v29, v23);
        uint64_t v31 = (std::__shared_weak_count *)operator new(0x30uLL);
        v31->__shared_owners_ = 0;
        v31->__shared_weak_owners_ = 0;
        v31[1].__vftable = 0;
        uint64_t v32 = (void **)&v31[1].__vftable;
        v31->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1483780;
        v31[1].__shared_owners_ = 0;
        v31[1].__shared_weak_owners_ = 0;
        uint64_t v33 = *(void *)(v2 + 1232);
        uint64_t v34 = *(void *)(v2 + 1240);
        if (v33 != v34)
        {
          shared_owners = 0;
          do
          {
            int v36 = *(_DWORD *)(*(void *)v33 + 16);
            unint64_t shared_weak_owners = v31[1].__shared_weak_owners_;
            if ((unint64_t)shared_owners >= shared_weak_owners)
            {
              int v39 = (char *)*v32;
              uint64_t v40 = (shared_owners - (unsigned char *)*v32) >> 2;
              unint64_t v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 62) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v42 = shared_weak_owners - (void)v39;
              if (v42 >> 1 > v41) {
                unint64_t v41 = v42 >> 1;
              }
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v43 = v41;
              }
              if (v43)
              {
                unint64_t v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v43);
                int v39 = (char *)v31[1].__vftable;
                shared_owners = (char *)v31[1].__shared_owners_;
              }
              else
              {
                uint64_t v30 = 0;
              }
              BOOL v44 = (std::__shared_weak_count_vtbl *)(v43 + 4 * v40);
              LODWORD(v44->~__shared_weak_count) = v36;
              uint64_t v38 = (char *)&v44->~__shared_weak_count + 4;
              while (shared_owners != v39)
              {
                int v45 = *((_DWORD *)shared_owners - 1);
                shared_owners -= 4;
                HIDWORD(v44[-1].__on_zero_shared_weak) = v45;
                BOOL v44 = (std::__shared_weak_count_vtbl *)((char *)v44 - 4);
              }
              v31[1].__vftable = v44;
              v31[1].__shared_owners_ = (uint64_t)v38;
              v31[1].__shared_weak_owners_ = v43 + 4 * (void)v30;
              if (v39) {
                operator delete(v39);
              }
            }
            else
            {
              *(_DWORD *)shared_owners = v36;
              uint64_t v38 = shared_owners + 4;
            }
            v31[1].__shared_owners_ = (uint64_t)v38;
            v33 += 8;
            shared_owners = v38;
          }
          while (v33 != v34);
        }
        HALS_ObjectMap::RetainObject(v53, v30);
        block = (HALS_ObjectMap **)MEMORY[0x1E4F143A8];
        uint64_t v55 = 1174405120;
        uint64_t v56 = ___ZNK11HALS_System27_TellDevicesAboutDeadClientEP11HALS_Client_block_invoke;
        uint64_t v57 = &__block_descriptor_tmp_123;
        uint64_t v58 = (HALS_ObjectMap *)&v31[1];
        char v59 = v31;
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        BOOL v60 = v53;
        unsigned __int8 v46 = atomic_load((unsigned __int8 *)(v2 + 928));
        if (v46) {
          atomic_store(1u, (unsigned __int8 *)(v2 + 929));
        }
        dispatch_async(*(dispatch_queue_t *)(v2 + 896), &block);
        if (v59) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v59);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        CFStringRef v47 = v29 + 1;
        uint64_t v48 = *(HALS_ObjectMap ***)(v2 + 1296);
        if (v29 + 1 == v48)
        {
          uint64_t v50 = v2 + 1288;
        }
        else
        {
          uint64_t v49 = *v29;
          uint64_t v50 = v2 + 1288;
          do
          {
            *(v47 - 1) = *v47;
            *v47++ = v49;
          }
          while (v47 != v48);
          int64_t v29 = v47 - 1;
        }
        std::vector<HALS_Releaser<HALS_Client>>::__base_destruct_at_end[abi:ne180100](v50, (HALS_Object *)v29);
        pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
        uint64_t v51 = (dispatch_queue_t *)HALS_ObjectMap::sNormalPriorityQueue;
        block = (HALS_ObjectMap **)MEMORY[0x1E4F143A8];
        uint64_t v55 = 0x40000000;
        uint64_t v56 = ___ZN11HALS_System13_RemoveClientEi_block_invoke;
        uint64_t v57 = &__block_descriptor_tmp_122_6983;
        uint64_t v58 = v53;
        unsigned __int8 v52 = atomic_load((unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 32));
        if (v52) {
          atomic_store(1u, (unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 33));
        }
        dispatch_async(*v51, &block);
      }
      return;
    }
  }
}

void sub_1BACE6F1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN11HALS_System13_RemoveClientEi_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 32) + 8))(*(void *)(a1 + 32));
  HALS_ObjectMap::ObjectIsDead(*(HALS_ObjectMap **)(a1 + 32), v2);
}

void sub_1BACE6FCC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System27_TellDevicesAboutDeadClientEP11HALS_Client_block_invoke(uint64_t a1, HALS_Object *a2)
{
  uint64_t v3 = *(unsigned int ***)(a1 + 32);
  uint64_t v4 = *v3;
  int v5 = v3[1];
  while (v4 != v5)
  {
    uint64_t v6 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v4);
    uint64_t v8 = (HALS_ObjectMap *)v6;
    if (v6)
    {
      int64_t v7 = *(HALS_Object **)(a1 + 48);
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v6 + 272))(v6);
      }
    }
    HALS_ObjectMap::ReleaseObject(v8, v7);
    ++v4;
  }
  uint64_t v9 = *(HALS_ObjectMap **)(a1 + 48);

  HALS_ObjectMap::ReleaseObject(v9, a2);
}

uint64_t HALS_System::CopyClientByProcessID(HALS_System *this, int a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  uint64_t v10 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK11HALS_System21CopyClientByProcessIDEi_block_invoke;
  v5[3] = &unk_1E6232D38;
  v5[4] = &v7;
  v5[5] = this;
  int v6 = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  uint64_t v3 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1BACE7190(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void remove_context_helper(uint64_t a1, HALS_Object *a2, HALS_ObjectMap ***a3)
{
  HALS_ObjectMap::RetainObject(**a3, a2);
  int v5 = *a3;
  int v6 = *a3 + 1;
  uint64_t v7 = (HALS_ObjectMap **)*((void *)a2 + 1);
  if (v6 != v7)
  {
    uint64_t v8 = *v5;
    do
    {
      *(v6 - 1) = *v6;
      *v6++ = v8;
    }
    while (v6 != v7);
    int v5 = v6 - 1;
  }
  std::vector<HALS_Releaser<HALS_IOContext>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a2, (HALS_Object *)v5);
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  unsigned __int8 v9 = atomic_load((unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 32));
  if (v9) {
    atomic_store(1u, (unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 33));
  }
  operator new();
}

void std::vector<HALS_Releaser<HALS_IOContext>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, HALS_Object *a2)
{
  for (unsigned int i = *(HALS_Object **)(a1 + 8); i != a2; unsigned int i = (HALS_Object *)((char *)i - 8))
  {
    int v5 = (HALS_ObjectMap *)*((void *)i - 1);
    HALS_ObjectMap::ReleaseObject(v5, a2);
  }
  *(void *)(a1 + 8) = a2;
}

void applesauce::dispatch::v1::async<remove_context_helper(unsigned int,std::vector<HALS_Releaser<HALS_IOContext>> &,std::__wrap_iter<HALS_Releaser<HALS_IOContext>*> const&)::$_0 &>(dispatch_queue_s *,remove_context_helper(unsigned int,std::vector<HALS_Releaser<HALS_IOContext>> &,std::__wrap_iter<HALS_Releaser<HALS_IOContext>*> const&)::$_0 &)::{lambda(void *)#1}::__invoke(unsigned int *a1)
{
  uint64_t v1 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*a1);
  uint64_t v2 = (HALS_ObjectMap *)v1;
  if (v1)
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
    HALS_ObjectMap::ReleaseObject(v2, v3);
    HALS_ObjectMap::ObjectIsDead(v2, v4);
  }

  JUMPOUT(0x1C1859840);
}

void sub_1BACE737C(void *a1)
{
}

void sub_1BACE7388(_Unwind_Exception *a1)
{
  MEMORY[0x1C1859840](v1, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_System21CopyClientByProcessIDEi_block_invoke(uint64_t a1, HALS_Object *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(HALS_ObjectMap ***)(v3 + 1288);
  int v5 = *(HALS_ObjectMap ***)(v3 + 1296);
  if (v4 == v5)
  {
LABEL_4:
    int v6 = 0;
  }
  else
  {
    while (1)
    {
      int v6 = *v4;
      if (*((_DWORD *)*v4 + 58) == *(_DWORD *)(a1 + 48)) {
        break;
      }
      if (++v4 == v5) {
        goto LABEL_4;
      }
    }
    HALS_ObjectMap::RetainObject(*v4, a2);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v6;
}

void HALS_System::~HALS_System(HALS_System *this)
{
  HALS_System::~HALS_System(this);

  JUMPOUT(0x1C1859840);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  HALS_Object *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  void **v17;
  uint64_t vars8;

  *(void *)this = &unk_1F146B918;
  g_static_start_options = 0;
  uint64_t v2 = (void *)*((void *)this + 226);
  if (v2)
  {
    *((void *)this + 227) = v2;
    operator delete(v2);
  }
  HALB_Guard::~HALB_Guard((pthread_cond_t *)((char *)this + 1528));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 189);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 186);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  int v5 = (std::__shared_weak_count *)*((void *)this + 182);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  int v6 = (std::__shared_weak_count *)*((void *)this + 180);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 177);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 175);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  int v17 = (void **)((char *)this + 1352);
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v17);
  unsigned __int8 v9 = (std::__shared_weak_count *)*((void *)this + 168);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = (void *)*((void *)this + 164);
  if (v10)
  {
    *((void *)this + 165) = v10;
    operator delete(v10);
  }
  int v17 = (void **)((char *)this + 1288);
  std::vector<HALS_Releaser<HALS_Client>>::__destroy_vector::operator()[abi:ne180100](&v17);
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 159);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  int v13 = *((void *)this + 157);
  *((void *)this + 157) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList((HALS_ObjectMap ***)this + 154, v11);
  std::unique_ptr<HALB_AsyncLog>::reset[abi:ne180100]((uint64_t *)this + 152);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_System *)((char *)this + 896));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_System *)((char *)this + 576));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_System *)((char *)this + 256));
  int v14 = (std::__shared_weak_count *)*((void *)this + 31);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  HALB_Mutex::~HALB_Mutex((HALS_System *)((char *)this + 144));
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  BOOL v16 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 48));

  HALS_Object::~HALS_Object(this);
}

void std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (HALS_Object **)*a1;
  if (*v2)
  {
    std::vector<HALS_Releaser<HALS_IOContext>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t *std::unique_ptr<HALB_AsyncLog>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    atomic_store(0, (unsigned __int8 *)(v1 + 32));
    ca::concurrent::details::service_thread::drain(*(ca::concurrent::details::service_thread **)v1);
    for (unsigned int i = OSAtomicDequeue((OSQueueHead *)(v1 + 16), 0x150uLL);
          i;
          unsigned int i = OSAtomicDequeue((OSQueueHead *)(v1 + 16), 0x150uLL))
    {
      (*(void (**)(void *))(*(void *)i + 8))(i);
    }
    ca::concurrent::messenger::~messenger((ca::concurrent::details::service_thread **)v1);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

void HALS_System::Activate(HALS_System *this, HALS_Object *a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  HALS_Object::Activate(this, a2);
  if (g_static_start_options) {
    CreateAndInsert<HALS_MetaManager>();
  }
  operator new();
}

void sub_1BACE9978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef a17, CFTypeRef a18, CFTypeRef cf)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void load_mcp_server_settings(void)
{
  uint64_t v0 = (char *)operator new(0x98uLL);
  *((void *)v0 + 1) = 0;
  *((void *)v0 + 2) = 0;
  *(void *)uint64_t v0 = &unk_1F146C000;
  std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Preferences/Audio/com.apple.audio.ServerSettings.plist");
  *((void *)v0 + 3) = 0;
  *((void *)v0 + 4) = 0;
  uint64_t v1 = (uint64_t)(v0 + 24);
  *((void *)v0 + 5) = 850045863;
  *((_OWORD *)v0 + 3) = 0u;
  *((_OWORD *)v0 + 4) = 0u;
  *((_OWORD *)v0 + 5) = 0u;
  *((void *)v0 + 12) = 0;
  uint64_t v2 = v0 + 104;
  if (SHIBYTE(v85) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v0 + 104), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    _OWORD *v2 = *(_OWORD *)__p;
    *((void *)v0 + 15) = v85;
  }
  *((_WORD *)v0 + 64) = 436;
  CFDictionaryRef v3 = CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  uint64_t v4 = (const void **)(v0 + 136);
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)(v0 + 136), v3);
  v0[144] = 0;
  *((_DWORD *)v0 + 37) = 2;
  int v5 = v0 + 104;
  if (v0[127] < 0) {
    int v5 = *(const char **)v2;
  }
  int v6 = fopen(v5, "r");
  uint64_t v7 = v6;
  if (v6)
  {
    if ((fseek(v6, 0, 2) & 0x80000000) == 0)
    {
      uint64_t v8 = MEMORY[0x1C1859E30](v7);
      if (v8 >= 1)
      {
        size_t v9 = v8;
        if ((fseek(v7, 0, 0) & 0x80000000) == 0)
        {
          std::vector<unsigned char>::vector(&__ptr, v9);
          if (fread(__ptr, 1uLL, v9, v7) == v9)
          {
            CFDataRef v10 = CFDataCreate(0, (const UInt8 *)__ptr, v87 - (unsigned char *)__ptr);
            if (!v10)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
              __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            CFPropertyListRef v11 = CFPropertyListCreateWithData(0, v10, 0, 0, 0);
            uint64_t v12 = v11;
            if (v11)
            {
              CFTypeID v13 = CFGetTypeID(v11);
              if (v13 == CFDictionaryGetTypeID())
              {
                CFRetain(v12);
                applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)v95, v12);
                int v14 = *v4;
                *uint64_t v4 = v95[0];
                v95[0] = v14;
                if (v14) {
                  CFRelease(v14);
                }
              }
              CFRelease(v12);
            }
            CFRelease(v10);
          }
          if (__ptr)
          {
            long long v87 = __ptr;
            operator delete(__ptr);
          }
        }
      }
    }
    fclose(v7);
  }
  if (SHIBYTE(v85) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)v0 + 4);
  if (v15)
  {
    if (v15->__shared_owners_ != -1) {
      goto LABEL_28;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v0 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v0 + 2, 1uLL, memory_order_relaxed);
    *((void *)v0 + 3) = v0 + 24;
    *((void *)v0 + 4) = v0;
    std::__shared_weak_count::__release_weak(v15);
  }
  else
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v0 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v0 + 2, 1uLL, memory_order_relaxed);
    *((void *)v0 + 3) = v0 + 24;
    *((void *)v0 + 4) = v0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v0);
LABEL_28:
  unsigned int v83 = (std::__shared_weak_count *)v0;
  AMCP::Graph::File_Capture_Settings::instance((AMCP::Graph::File_Capture_Settings *)v15);
  BOOL v16 = (__CFString *)CFStringCreateWithBytes(0, (const UInt8 *)"DataTapsEnabled", 15, 0x8000100u, 0);
  __ptr = v16;
  if (!v16)
  {
    uint64_t v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v49, "Could not construct");
    __cxa_throw(v49, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v17 = CFStringCreateWithBytes(0, (const UInt8 *)"mcp_enable_all_file_captures", 28, 0x8000100u, 0);
  __p[0] = (void *)v17;
  if (!v17)
  {
    uint64_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v50, "Could not construct");
    __cxa_throw(v50, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v18 = CFStringCreateWithBytes(0, (const UInt8 *)"mcp_enable_post_mix_captures", 28, 0x8000100u, 0);
  v95[0] = v18;
  if (!v18)
  {
    uint64_t v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v51, "Could not construct");
    __cxa_throw(v51, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v19 = CFStringCreateWithBytes(0, (const UInt8 *)"mcp_enable_graph_wire_captures", 30, 0x8000100u, 0);
  CFStringRef v94 = v19;
  if (!v19)
  {
    unsigned __int8 v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v52, "Could not construct");
    __cxa_throw(v52, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v20 = CFStringCreateWithBytes(0, (const UInt8 *)"mcp_enable_input_device_captures", 32, 0x8000100u, 0);
  CFStringRef v93 = v20;
  if (!v20)
  {
    int v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v53, "Could not construct");
    __cxa_throw(v53, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v21 = CFStringCreateWithBytes(0, (const UInt8 *)"mcp_enable_converter_captures", 29, 0x8000100u, 0);
  CFStringRef v92 = v21;
  if (!v21)
  {
    uint64_t v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v54, "Could not construct");
    __cxa_throw(v54, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v91 = CFStringCreateWithBytes(0, (const UInt8 *)"mcp_enable_manifest_dot_file", 28, 0x8000100u, 0);
  CFStringRef v82 = v91;
  if (!v91)
  {
    uint64_t v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v55, "Could not construct");
    __cxa_throw(v55, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v22 = (const void *)*MEMORY[0x1E4F1CFC0];
  CFTypeRef cf = (CFTypeRef)*MEMORY[0x1E4F1CFC0];
  AMCP::Utility::Settings_Storage::at_or<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&v90, v1, (const void **)&__ptr, &cf);
  CFBooleanRef v23 = v90;
  if (!v90)
  {
    uint64_t v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v56, "Could not construct");
    __cxa_throw(v56, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v81 = applesauce::CF::convert_to<BOOL,0>(v90);
  CFRelease(v23);
  CFStringRef v80 = v20;
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef cf = v22;
  AMCP::Utility::Settings_Storage::at_or<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&v90, v1, (const void **)__p, &cf);
  CFBooleanRef v24 = v90;
  if (!v90)
  {
    uint64_t v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v57, "Could not construct");
    __cxa_throw(v57, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v25 = applesauce::CF::convert_to<BOOL,0>(v90);
  CFRelease(v24);
  CFStringRef v78 = v19;
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef cf = v22;
  AMCP::Utility::Settings_Storage::at_or<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&v90, v1, (const void **)&v94, &cf);
  CFBooleanRef v26 = v90;
  if (!v90)
  {
    uint64_t v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v58, "Could not construct");
    __cxa_throw(v58, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v79 = applesauce::CF::convert_to<BOOL,0>(v90);
  CFRelease(v26);
  CFStringRef v77 = v18;
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef cf = v22;
  AMCP::Utility::Settings_Storage::at_or<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&v90, v1, (const void **)&v93, &cf);
  CFBooleanRef v27 = v90;
  if (!v90)
  {
    char v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v59, "Could not construct");
    __cxa_throw(v59, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v28 = applesauce::CF::convert_to<BOOL,0>(v90);
  CFRelease(v27);
  CFStringRef v76 = v17;
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef cf = v22;
  AMCP::Utility::Settings_Storage::at_or<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&v90, v1, v95, &cf);
  CFBooleanRef v29 = v90;
  if (!v90)
  {
    BOOL v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v60, "Could not construct");
    __cxa_throw(v60, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v30 = applesauce::CF::convert_to<BOOL,0>(v90);
  CFRelease(v29);
  uint64_t v31 = v16;
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef cf = v22;
  AMCP::Utility::Settings_Storage::at_or<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&v90, v1, (const void **)&v92, &cf);
  CFBooleanRef v32 = v90;
  if (!v90)
  {
    CFStringRef v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v61, "Could not construct");
    __cxa_throw(v61, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v33 = applesauce::CF::convert_to<BOOL,0>(v90);
  CFRelease(v32);
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef cf = v22;
  AMCP::Utility::Settings_Storage::at_or<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&v90, v1, (const void **)&v91, &cf);
  CFBooleanRef v34 = v90;
  if (!v90)
  {
    uint64_t v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v62, "Could not construct");
    __cxa_throw(v62, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v35 = applesauce::CF::convert_to<BOOL,0>(v90);
  CFRelease(v34);
  if (cf) {
    CFRelease(cf);
  }
  if (v25 || v79) {
    BYTE1(AMCP::Graph::File_Capture_Settings::instance(void)::s_instance) = 1;
  }
  if (v25 || v28 || v81) {
    BYTE2(AMCP::Graph::File_Capture_Settings::instance(void)::s_instance) = 1;
  }
  if (v25 || v30 || v81) {
    LOBYTE(AMCP::Graph::File_Capture_Settings::instance(void)::s_instance) = 1;
  }
  if (v25 || v33) {
    HIBYTE(AMCP::Graph::File_Capture_Settings::instance(void)::s_instance) = 1;
  }
  if (v35) {
    byte_1E9F78AB4 = 1;
  }
  CFRelease(v82);
  CFRelease(v21);
  CFRelease(v80);
  CFRelease(v78);
  CFRelease(v77);
  CFRelease(v76);
  CFRelease(v31);
  AMCP::Logging_Settings::instance(v36);
  CFStringRef v37 = CFStringCreateWithBytes(0, (const UInt8 *)"PowerManagementLogging", 22, 0x8000100u, 0);
  v95[0] = v37;
  if (!v37)
  {
    uint64_t v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v63, "Could not construct");
    __cxa_throw(v63, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v38 = CFStringCreateWithBytes(0, (const UInt8 *)"power_logging", 13, 0x8000100u, 0);
  CFStringRef v94 = v38;
  if (!v38)
  {
    mach_port_t v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v64, "Could not construct");
    __cxa_throw(v64, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  __p[0] = (void *)v22;
  AMCP::Utility::Settings_Storage::at_or<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&__ptr, v1, (const void **)&v94, __p);
  int v39 = __ptr;
  if (!__ptr)
  {
    std::string::size_type v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v65, "Could not construct");
    __cxa_throw(v65, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v40 = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)__ptr);
  CFRelease(v39);
  if (__p[0]) {
    CFRelease(__p[0]);
  }
  __p[0] = (void *)v22;
  AMCP::Utility::Settings_Storage::at_or<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&__ptr, v1, v95, __p);
  unint64_t v41 = __ptr;
  if (!__ptr)
  {
    int v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v66, "Could not construct");
    __cxa_throw(v66, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v42 = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)__ptr);
  CFRelease(v41);
  if (__p[0]) {
    CFRelease(__p[0]);
  }
  BYTE1(AMCP::Logging_Settings::instance(void)::s_instance) = v42 || v40;
  LOBYTE(AMCP::Logging_Settings::instance(void)::s_instance) = 1;
  CFStringRef v43 = CFStringCreateWithBytes(0, (const UInt8 *)"DefaultDeviceLogging", 20, 0x8000100u, 0);
  CFStringRef v93 = v43;
  if (!v43)
  {
    uint64_t v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v67, "Could not construct");
    __cxa_throw(v67, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v44 = CFStringCreateWithBytes(0, (const UInt8 *)"default_device_logging", 22, 0x8000100u, 0);
  CFStringRef v92 = v44;
  if (!v44)
  {
    CFStringRef v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v68, "Could not construct");
    __cxa_throw(v68, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Utility::Settings_Storage::at_as<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&__ptr, v1, (const void **)&v93);
  AMCP::Utility::Settings_Storage::at_as<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(__p, v1, (const void **)&v92);
  if ((_BYTE)v87)
  {
    if (!__ptr)
    {
      int v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v73, "Could not construct");
      __cxa_throw(v73, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    LOBYTE(AMCP::Logging_Settings::instance(void)::s_instance) = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)__ptr);
  }
  if (LOBYTE(__p[1]))
  {
    if (!__p[0])
    {
      int v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v74, "Could not construct");
      __cxa_throw(v74, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    LOBYTE(AMCP::Logging_Settings::instance(void)::s_instance) = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)__p[0]);
  }
  CFStringRef v45 = CFStringCreateWithBytes(0, (const UInt8 *)"start_stop_logging", 18, 0x8000100u, 0);
  CFStringRef v91 = v45;
  if (!v45)
  {
    unint64_t v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v69, "Could not construct");
    __cxa_throw(v69, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFTypeRef cf = v22;
  AMCP::Utility::Settings_Storage::at_or<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&v90, v1, (const void **)&v91, &cf);
  CFBooleanRef v46 = v90;
  if (!v90)
  {
    uint64_t v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v70, "Could not construct");
    __cxa_throw(v70, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BYTE2(AMCP::Logging_Settings::instance(void)::s_instance) = applesauce::CF::convert_to<BOOL,0>(v90);
  CFRelease(v46);
  if (cf) {
    CFRelease(cf);
  }
  CFStringRef v47 = CFStringCreateWithBytes(0, (const UInt8 *)"start_stop_verbose_logging", 26, 0x8000100u, 0);
  CFBooleanRef v90 = (const __CFBoolean *)v47;
  if (!v47)
  {
    double v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v71, "Could not construct");
    __cxa_throw(v71, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFTypeRef v88 = v22;
  AMCP::Utility::Settings_Storage::at_or<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&cf, v1, (const void **)&v90, &v88);
  CFTypeRef v48 = cf;
  if (!cf)
  {
    uint64_t v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v72, "Could not construct");
    __cxa_throw(v72, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance) = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)cf);
  CFRelease(v48);
  if (v88) {
    CFRelease(v88);
  }
  CFRelease(v47);
  CFRelease(v45);
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__ptr);
  CFRelease(v44);
  CFRelease(v43);
  CFRelease(v38);
  CFRelease(v37);
  std::__shared_weak_count::__release_shared[abi:ne180100](v83);
}

void sub_1BACEAF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,uint64_t a26,char a27,int a28,__int16 a29,char a30,char a31,int a32,__int16 a33,char a34,char a35)
{
  CFRelease(v40);
  CFRelease(v35);
  if (__p) {
    operator delete(__p);
  }
  fclose(v38);
  if (*v39) {
    CFRelease(*v39);
  }
  if (*(char *)(v41 + 127) < 0) {
    operator delete(*v37);
  }
  std::mutex::~mutex(v36);
  CFStringRef v43 = *(std::__shared_weak_count **)(v41 + 32);
  if (v43) {
    std::__shared_weak_count::__release_weak(v43);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v41);
  operator delete(v44);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<DSP_Host,std::allocator<DSP_Host>,decltype(nullptr),DSP_Host::DefaultConstruction,void>(void *a1, const BOOL *a2)
{
  uint64_t v4 = operator new(0x98uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1F146BF60;
  DSP_Host::DSP_Host((uint64_t)(v4 + 3), a2);
  *a1 = v4 + 3;
  a1[1] = v4;

  std::shared_ptr<AMCP::ASP::Engine>::__enable_weak_this[abi:ne180100]<AMCP::Core::Engine,AMCP::ASP::Engine,void>((uint64_t)a1, v4 + 3, (uint64_t)(v4 + 3));
}

void sub_1BACEB40C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<DSP_Host>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  CFDictionaryRef v3 = *(std::__shared_weak_count **)(a1 + 144);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::mutex::unlock(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  int v6 = *(std::__shared_weak_count **)(a1 + 144);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::mutex::~mutex(v2);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 64);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  size_t v9 = *(std::__shared_weak_count **)(a1 + 32);
  if (v9)
  {
    std::__shared_weak_count::__release_weak(v9);
  }
}

void std::__shared_ptr_emplace<DSP_Host>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146BF60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<DSP_Host>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146BF60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Utility::Settings_Storage>::__on_zero_shared(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 148) != 2)
  {
    std::mutex::lock((std::mutex *)(a1 + 40));
    CFDataRef Data = CFPropertyListCreateData(0, *(CFPropertyListRef *)(a1 + 136), kCFPropertyListXMLFormat_v1_0, 0, 0);
    applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&theData, Data);
    if (theData)
    {
      CFDictionaryRef v3 = (const char *)(a1 + 104);
      if (*(char *)(a1 + 127) < 0) {
        CFDictionaryRef v3 = *(const char **)v3;
      }
      uint64_t v4 = fopen(v3, "w+");
      uint64_t v5 = v4;
      if (v4)
      {
        if (*(_WORD *)(a1 + 128))
        {
          int v6 = fileno(v4);
          fchmod(v6, *(_WORD *)(a1 + 128));
        }
        if (!theData || (BytePtr = CFDataGetBytePtr(theData), !theData))
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        CFIndex Length = CFDataGetLength(theData);
        fwrite(BytePtr, Length, 1uLL, v5);
        fflush(v5);
        fclose(v5);
      }
      if (theData) {
        CFRelease(theData);
      }
    }
    std::mutex::unlock((std::mutex *)(a1 + 40));
  }
  size_t v9 = *(const void **)(a1 + 136);
  if (v9) {
    CFRelease(v9);
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  std::mutex::~mutex((std::mutex *)(a1 + 40));
  CFDataRef v10 = *(std::__shared_weak_count **)(a1 + 32);
  if (v10)
  {
    std::__shared_weak_count::__release_weak(v10);
  }
}

void sub_1BACEB748(void *a1)
{
  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

void std::__shared_ptr_emplace<AMCP::Utility::Settings_Storage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146C000;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Utility::Settings_Storage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146C000;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void _ZNSt3__115allocate_sharedB8ne180100I13HALB_TailspinNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_()
{
  uint64_t v0 = operator new(0x28uLL);
  v0[1] = 0;
  v0[2] = 0;
  void *v0 = &unk_1F146BF10;
  operator new();
}

void sub_1BACEB870(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

AMCP::Utility::Dispatch_Queue *std::__shared_ptr_emplace<HALB_Tailspin>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (AMCP::Utility::Dispatch_Queue **)(a1 + 24);
  do
  {
    if (!*v1) {
      break;
    }
    AMCP::Utility::Dispatch_Queue::flush_all_work(*v1);
    if (!*v1) {
      break;
    }
    unsigned __int8 v2 = atomic_load((unsigned __int8 *)*v1 + 33);
  }
  while ((v2 & 1) != 0);

  return std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100](v1, 0);
}

void std::__shared_ptr_emplace<HALB_Tailspin>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146BF10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALB_Tailspin>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146BF10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void CreateAndInsert<HALS_MetaManager>()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void HALS_System::DeviceManagerCreated(HALS_System *this, HALS_DeviceManager *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v22 = 0;
  CFBooleanRef v23 = &v22;
  uint64_t v24 = 0x2000000000;
  char v25 = 0;
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 0x40000000;
  uint64_t v21[2] = ___ZN11HALS_System20DeviceManagerCreatedEP18HALS_DeviceManager_block_invoke;
  v21[3] = &unk_1E6232CB0;
  v21[5] = this;
  void v21[6] = a2;
  v21[4] = &v22;
  CFDictionaryRef v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v21);
  if (!*((unsigned char *)v23 + 24))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v5 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = pthread_self();
      mach_port_t v7 = pthread_mach_thread_np(v6);
      *(_DWORD *)AudioStreamRangedDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)CFBooleanRef v27 = 2080;
      *(void *)&v27[2] = "HALS_System.cpp";
      __int16 v28 = 1024;
      int v29 = 2268;
      __int16 v30 = 2080;
      *(void *)uint64_t v31 = "inserted == false";
      _os_log_error_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to insert device manager", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v13, "Failed to insert device manager");
    std::runtime_error::runtime_error(&v14, &v13);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = -1;
    v14.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v15 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(void *)&v31[6] = "void HALS_System::DeviceManagerCreated(HALS_DeviceManager *)";
    CFBooleanRef v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_System.cpp";
    int v33 = 2268;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v8);
    long long v11 = v8;
    uint64_t v12 = v9;
    long long v8 = 0uLL;
    uint64_t v9 = 0;
    CFDataRef v10 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  (**(void (***)(HALS_DeviceManager *))a2)(a2);
  _Block_object_dispose(&v22, 8);
}

void sub_1BACEBF0C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void (*a11)(uint64_t a1), void *a12, uint64_t a13, uint64_t a14, long long a15, uint64_t a16, void *a17, long long a18, uint64_t a19, std::runtime_error a20,std::runtime_error a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,int a27,int a28,__int16 a29,char a30,char a31)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    a9 = MEMORY[0x1E4F143A8];
    a10 = v34;
    a11 = ___ZN11HALS_System20DeviceManagerCreatedEP18HALS_DeviceManager_block_invoke_97;
    a12 = &__block_descriptor_tmp_98_7047;
    BOOL v35 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v31 + 56))(v31);
    HALB_CommandGate::ExecuteCommand(v35, (uint64_t)&a9);
    AMCP::Log::Scope_Registry::get(v36);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)(v33 - 144), "com.apple.coreaudio", "AMCP");
    CFStringRef v37 = *(std::__shared_weak_count **)(v33 - 136);
    CFStringRef v38 = **(NSObject ***)(v33 - 144);
    if (v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v37);
    }
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      int v39 = pthread_self();
      mach_port_t v40 = pthread_mach_thread_np(v39);
      *(_DWORD *)(v33 - 144) = 67109634;
      *(_DWORD *)(v33 - 140) = v40;
      *(_WORD *)(v33 - 136) = 2080;
      *(void *)(v32 + 10) = "HALS_System.cpp";
      *(_WORD *)(v33 - 126) = 1024;
      *(_DWORD *)(v33 - 124) = 2286;
      _os_log_error_impl(&dword_1BAA78000, v38, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Failed to activate device manager", (uint8_t *)(v33 - 144), 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a31);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&a20, "Failed to activate device manager");
    std::runtime_error::runtime_error(&a21, &a20);
    a23 = 0;
    a24 = 0;
    a25 = 0;
    a26 = -1;
    a21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    a22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl(v33 - 144, (uint64_t)&a21);
    *(void *)(v33 - 112) = "void HALS_System::DeviceManagerCreated(HALS_DeviceManager *)";
    *(void *)(v33 - 104) = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_System.cpp";
    *(_DWORD *)(v33 - 96) = 2286;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&a15);
    a18 = a15;
    a19 = a16;
    a15 = 0uLL;
    a16 = 0;
    a17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  JUMPOUT(0x1BACEC264);
}

void sub_1BACEC154(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,std::runtime_error a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
}

void sub_1BACEC1D4(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BACEC264);
}

void sub_1BACEC1E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,std::runtime_error a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v35 - 144);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (v34) {
    __cxa_free_exception(v33);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a33);
  JUMPOUT(0x1BACEC258);
}

void sub_1BACEC254(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void ___ZN11HALS_System20DeviceManagerCreatedEP18HALS_DeviceManager_block_invoke(uint64_t a1, HALS_Object *a2)
{
  CFDictionaryRef v3 = *(void **)(a1 + 40);
  uint64_t v4 = (HALS_ObjectMap **)v3[154];
  uint64_t v5 = (HALS_ObjectMap **)v3[155];
  int v6 = (HALS_ObjectMap **)(a1 + 48);
  if (v5 == v4)
  {
    std::runtime_error v14 = (char *)v3[154];
  }
  else
  {
    unint64_t v7 = v5 - v4;
    do
    {
      long long v8 = &v4[v7 >> 1];
      uint64_t v9 = *v8;
      CFDataRef v10 = *v6;
      CFStringRef v11 = (const __CFString *)*((void *)*v8 + 6);
      if (v11)
      {
        CFRetain(v11);
        CFStringRef v11 = (const __CFString *)*((void *)v9 + 6);
      }
      CFStringRef v41 = v11;
      char v42 = 1;
      if (*((void *)v10 + 6))
      {
        CFRetain(*((CFTypeRef *)v10 + 6));
        CFStringRef v12 = (const __CFString *)*((void *)v10 + 6);
        CFStringRef v11 = v41;
      }
      else
      {
        CFStringRef v12 = 0;
      }
      CFStringRef v39 = v12;
      char v40 = 1;
      CFComparisonResult v13 = CFStringCompare(v11, v12, 0);
      CACFString::~CACFString((CACFString *)&v39);
      CACFString::~CACFString((CACFString *)&v41);
      if (v13 == kCFCompareLessThan) {
        v7 += ~(v7 >> 1);
      }
      else {
        v7 >>= 1;
      }
      if (v13 == kCFCompareLessThan) {
        uint64_t v4 = v8 + 1;
      }
    }
    while (v7);
    uint64_t v5 = v4;
    std::runtime_error v14 = (char *)v3[154];
    uint64_t v4 = (HALS_ObjectMap **)v3[155];
  }
  unint64_t v15 = v3[156];
  if ((unint64_t)v4 >= v15)
  {
    unint64_t v21 = (((char *)v4 - v14) >> 3) + 1;
    if (v21 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v22 = v15 - (void)v14;
    if (v22 >> 2 > v21) {
      unint64_t v21 = v22 >> 2;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23)
    {
      uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v23);
    }
    else
    {
      uint64_t v24 = 0;
      a2 = 0;
    }
    uint64_t v25 = (char *)v5 - v14;
    uint64_t v26 = ((char *)v5 - v14) >> 3;
    CFBooleanRef v27 = (HALS_ObjectMap **)&v24[8 * v26];
    __int16 v28 = &v24[8 * (void)a2];
    if ((HALS_Object *)v26 == a2)
    {
      if (v25 < 1)
      {
        if (v5 == (HALS_ObjectMap **)v14) {
          unint64_t v30 = 1;
        }
        else {
          unint64_t v30 = v25 >> 2;
        }
        uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v30);
        CFBooleanRef v27 = (HALS_ObjectMap **)&v31[8 * (v30 >> 2)];
        __int16 v28 = &v31[8 * (void)a2];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        if (v26 >= -1) {
          unint64_t v29 = v26 + 1;
        }
        else {
          unint64_t v29 = v26 + 2;
        }
        v27 -= v29 >> 1;
      }
    }
    *CFBooleanRef v27 = *v6;
    uint64_t v32 = (char *)(v27 + 1);
    uint64_t v33 = (HALS_ObjectMap **)v3[154];
    if (v33 != v5)
    {
      int v34 = v5;
      do
      {
        uint64_t v35 = *--v34;
        *--CFBooleanRef v27 = v35;
      }
      while (v34 != v33);
    }
    int v36 = (char *)v3[155];
    int64_t v37 = v36 - (char *)v5;
    if (v36 != (char *)v5) {
      memmove(v32, v5, v36 - (char *)v5);
    }
    CFStringRef v38 = (void *)v3[154];
    v3[154] = v27;
    v3[155] = &v32[v37];
    v3[156] = v28;
    if (v38) {
      operator delete(v38);
    }
  }
  else if (v5 == v4)
  {
    *uint64_t v4 = *v6;
    v3[155] = v4 + 1;
  }
  else
  {
    uint64_t v16 = (char *)(v5 + 1);
    uint64_t v17 = v4 - 1;
    uint64_t v18 = v4;
    if ((unint64_t)v4 >= 8)
    {
      uint64_t v18 = v4;
      do
      {
        int v19 = *v17++;
        *v18++ = v19;
      }
      while (v17 < v4);
    }
    v3[155] = v18;
    if (v4 != (HALS_ObjectMap **)v16) {
      memmove(&v4[-(((char *)v4 - v16) >> 3)], v5, (char *)v4 - v16);
    }
    char v20 = v6;
    if (v5 <= v6) {
      char v20 = &v6[v3[155] > (unint64_t)v6];
    }
    *uint64_t v5 = *v20;
  }
  HALS_ObjectMap::RetainObject(*v6, a2);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
}

void sub_1BACEC538(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (v11) {
    operator delete(v11);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BACEC510);
}

void ___ZN11HALS_System20DeviceManagerCreatedEP18HALS_DeviceManager_block_invoke_97(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CFDictionaryRef v3 = *(char **)(v2 + 1232);
  uint64_t v4 = *(char **)(v2 + 1240);
  if (v3 == v4)
  {
    uint64_t v4 = *(char **)(v2 + 1232);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 40);
    while (*(void *)v3 != v5)
    {
      v3 += 8;
      if (v3 == v4)
      {
        CFDictionaryRef v3 = *(char **)(v2 + 1240);
        goto LABEL_13;
      }
    }
    if (v3 != v4)
    {
      int v6 = v3 + 8;
      if (v3 + 8 != v4)
      {
        do
        {
          if (*(void *)v6 != v5)
          {
            *(void *)CFDictionaryRef v3 = *(void *)v6;
            v3 += 8;
          }
          v6 += 8;
        }
        while (v6 != v4);
        uint64_t v4 = *(char **)(v2 + 1240);
      }
    }
  }
LABEL_13:
  unint64_t v7 = v3 + 8;
  int64_t v8 = v4 - (v3 + 8);
  if (v4 != v3 + 8) {
    memmove(v3, v7, v4 - (v3 + 8));
  }
  *(void *)(v2 + 1240) = &v3[v8];
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 40), (HALS_Object *)v7);
}

void sub_1BACEC64C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_System::HALS_System(uint64_t a1, int a2, HALS_Object *a3)
{
  g_static_start_options = a2;
  *(void *)a1 = &unk_1F1481040;
  *(_DWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 12) = 1;
  *(_OWORD *)(a1 + 16) = xmmword_1BAFF9620;
  *(void *)(a1 + 32) = &stru_1F148AD50;
  *(unsigned char *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  HALS_ObjectMap::MapObject((HALS_ObjectMap *)1, a1, a3);
  *(void *)a1 = &unk_1F146B918;
  *(void *)(a1 + 48) = 850045863;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 0;
  HALB_Mutex::HALB_Mutex((HALB_Mutex *)(a1 + 144));
  uint64_t v4 = operator new(0x158uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1F146BBE0;
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((uint64_t)(v4 + 3), "com.apple.audio.system-event");
  *(void *)(a1 + 240) = v4 + 3;
  *(void *)(a1 + 248) = v4;
  std::shared_ptr<AMCP::ASP::Engine>::__enable_weak_this[abi:ne180100]<AMCP::Core::Engine,AMCP::ASP::Engine,void>(a1 + 240, v4 + 4, (uint64_t)(v4 + 3));
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue(a1 + 256, "HALS_System IO Context Running Queue");
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue(a1 + 576, "Power Manager Queue");
  AMCP::Utility::Dispatch_Queue::create_concurrent_with_workloop((AMCP::Utility::Dispatch_Queue *)(a1 + 896), "HALS_System Concurrent Queue");
  operator new();
}

void sub_1BACEDFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, pthread_cond_t *a10, uint64_t *a11, AMCP::Utility::Dispatch_Queue *a12, AMCP::Utility::Dispatch_Queue *a13, AMCP::Utility::Dispatch_Queue *a14, HALB_Mutex *a15, std::mutex *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CFTypeRef cf,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v51);
  uint64_t v56 = (std::__shared_weak_count *)v50[19].__vftable;
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  AMCP::IO_Core::Graph_Manager::~Graph_Manager(v52);
  std::__shared_weak_count::~__shared_weak_count(v50);
  operator delete(v57);
  os_unfair_lock_unlock(v49);
  std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  uint64_t v58 = *(void **)(v53 + 1808);
  if (v58)
  {
    *(void *)(v53 + 1816) = v58;
    operator delete(v58);
  }
  HALB_Guard::~HALB_Guard(a10);
  char v59 = *(std::__shared_weak_count **)(v53 + 1512);
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  BOOL v60 = *(std::__shared_weak_count **)(v53 + 1488);
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  CFStringRef v61 = *(std::__shared_weak_count **)(v53 + 1456);
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  uint64_t v62 = *(std::__shared_weak_count **)(v53 + 1440);
  if (v62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
  uint64_t v63 = *(std::__shared_weak_count **)(v53 + 1416);
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  mach_port_t v64 = *(std::__shared_weak_count **)(v53 + 1400);
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  a49 = a17;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  std::string::size_type v65 = *(std::__shared_weak_count **)(v53 + 1344);
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  int v66 = *(void **)(v53 + 1312);
  if (v66)
  {
    *(void *)(v53 + 1320) = v66;
    operator delete(v66);
  }
  a49 = a19;
  std::vector<HALS_Releaser<HALS_Client>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  CFStringRef v68 = *(std::__shared_weak_count **)(v53 + 1272);
  if (v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v68);
  }
  uint64_t v69 = *(void *)(v53 + 1256);
  *(void *)(v53 + 1256) = 0;
  if (v69) {
    (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
  }
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList((HALS_ObjectMap ***)(v53 + 1232), v67);
  std::unique_ptr<HALB_AsyncLog>::reset[abi:ne180100](a11);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(a12);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(a13);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(a14);
  uint64_t v70 = *(std::__shared_weak_count **)(v53 + 248);
  if (v70) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
  }
  HALB_Mutex::~HALB_Mutex(a15);
  double v71 = *(std::__shared_weak_count **)(v53 + 136);
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  uint64_t v72 = *(std::__shared_weak_count **)(v53 + 120);
  if (v72) {
    std::__shared_weak_count::__release_weak(v72);
  }
  std::mutex::~mutex(a16);
  HALS_Object::~HALS_Object((HALS_Object *)v53);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(void *,AMCP::Power_State)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void TellKernelAudioIOIsRunning(int a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (TellKernelAudioIOIsRunning(BOOL)::isInitialized != -1) {
    dispatch_once(&TellKernelAudioIOIsRunning(BOOL)::isInitialized, &__block_literal_global_193);
  }
  if (TellKernelAudioIOIsRunning(BOOL)::theMIBLength)
  {
    int v5 = a1;
    if (sysctl(TellKernelAudioIOIsRunning(BOOL)::theMIB, TellKernelAudioIOIsRunning(BOOL)::theMIBLength, 0, 0, &v5, 4uLL))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        int v2 = *__error();
        CFDictionaryRef v3 = __error();
        uint64_t v4 = strerror(*v3);
        *(_DWORD *)AudioStreamRangedDescription buf = 136315906;
        unint64_t v7 = "HALS_System.cpp";
        __int16 v8 = 1024;
        int v9 = 443;
        __int16 v10 = 1024;
        int v11 = v2;
        __int16 v12 = 2080;
        CFComparisonResult v13 = v4;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  TellKernelAudioIOIsRunning: sysctl for security.mac.sandbox.audio_active failed: %d %s", buf, 0x22u);
      }
    }
  }
}

void ___ZL26TellKernelAudioIOIsRunningb_block_invoke()
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (sysctlnametomib("security.mac.sandbox.audio_active", TellKernelAudioIOIsRunning(BOOL)::theMIB, (size_t *)&TellKernelAudioIOIsRunning(BOOL)::theMIBLength))
  {
    BOOL v0 = 1;
  }
  else
  {
    BOOL v0 = TellKernelAudioIOIsRunning(BOOL)::theMIBLength == 0;
  }
  if (v0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v1 = *__error();
      int v2 = __error();
      CFDictionaryRef v3 = strerror(*v2);
      int v4 = 136315906;
      int v5 = "HALS_System.cpp";
      __int16 v6 = 1024;
      int v7 = 428;
      __int16 v8 = 1024;
      int v9 = v1;
      __int16 v10 = 2080;
      int v11 = v3;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  TellKernelAudioIOIsRunning: sysctlnametomib for security.mac.sandbox.audio_active failed: %d %s", (uint8_t *)&v4, 0x22u);
    }
    TellKernelAudioIOIsRunning(BOOL)::theMIBCFIndex Length = 0;
  }
}

uint64_t std::vector<HALS_Releaser<HALS_IOContext>>::__swap_out_circular_buffer(uint64_t *a1, HALS_Object *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)&long long v15 = v6;
  *((void *)&v15 + 1) = v6;
  long long v14 = v15;
  v12[0] = a1 + 2;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  char v13 = 0;
  while (v4 != v5)
  {
    int v7 = *(HALS_ObjectMap **)(v4 - 8);
    v4 -= 8;
    *(void *)(v6 - 8) = v7;
    HALS_ObjectMap::RetainObject(v7, a2);
    uint64_t v6 = *((void *)&v15 + 1) - 8;
    *((void *)&v15 + 1) -= 8;
  }
  char v13 = 1;
  uint64_t result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HALS_Releaser<HALS_IOContext>>,std::reverse_iterator<HALS_Releaser<HALS_IOContext>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12, a2);
  *((void *)a2 + 1) = v6;
  uint64_t v9 = *a1;
  *a1 = v6;
  *((void *)a2 + 1) = v9;
  uint64_t v10 = a1[1];
  a1[1] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v10;
  uint64_t v11 = a1[2];
  a1[2] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v11;
  *(void *)a2 = *((void *)a2 + 1);
  return result;
}

void sub_1BACEE92C(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__split_buffer<HALS_Releaser<HALS_IOContext>>::~__split_buffer(uint64_t a1, HALS_Object *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4 == v3) {
      break;
    }
    uint64_t v5 = *(HALS_ObjectMap **)(v4 - 8);
    *(void *)(a1 + 16) = v4 - 8;
    HALS_ObjectMap::ReleaseObject(v5, a2);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HALS_Releaser<HALS_IOContext>>,std::reverse_iterator<HALS_Releaser<HALS_IOContext>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1, HALS_Object *a2)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = *(HALS_ObjectMap ***)(*(void *)(a1 + 16) + 8);
    uint64_t v5 = *(HALS_ObjectMap ***)(*(void *)(a1 + 8) + 8);
    while (v4 != v5)
      HALS_ObjectMap::ReleaseObject(*v4++, a2);
  }
  return a1;
}

uint64_t std::__split_buffer<HALS_Releaser<HALS_Client>>::~__split_buffer(uint64_t a1, HALS_Object *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4 == v3) {
      break;
    }
    uint64_t v5 = *(HALS_ObjectMap **)(v4 - 8);
    *(void *)(a1 + 16) = v4 - 8;
    HALS_ObjectMap::ReleaseObject(v5, a2);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HALS_Releaser<HALS_Client>>,std::reverse_iterator<HALS_Releaser<HALS_Client>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1, HALS_Object *a2)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = *(HALS_ObjectMap ***)(*(void *)(a1 + 16) + 8);
    uint64_t v5 = *(HALS_ObjectMap ***)(*(void *)(a1 + 8) + 8);
    while (v4 != v5)
      HALS_ObjectMap::ReleaseObject(*v4++, a2);
  }
  return a1;
}

uint64_t std::__shared_ptr_emplace<HALS_PowerManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<HALS_PowerManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146BFB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALS_PowerManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146BFB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::__function::__func<void (*)(void *,AMCP::Power_State),std::allocator<void (*)(void *,AMCP::Power_State)>,void ()(void *,AMCP::Power_State)>::target_type()
{
}

uint64_t std::__function::__func<void (*)(void *,AMCP::Power_State),std::allocator<void (*)(void *,AMCP::Power_State)>,void ()(void *,AMCP::Power_State)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"PFvPvN4AMCP11Power_StateEE")) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t std::__function::__func<void (*)(void *,AMCP::Power_State),std::allocator<void (*)(void *,AMCP::Power_State)>,void ()(void *,AMCP::Power_State)>::operator()(uint64_t a1, void *a2, unsigned int *a3)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*a2, *a3);
}

uint64_t std::__function::__func<void (*)(void *,AMCP::Power_State),std::allocator<void (*)(void *,AMCP::Power_State)>,void ()(void *,AMCP::Power_State)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F146BDC0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<void (*)(void *,AMCP::Power_State),std::allocator<void (*)(void *,AMCP::Power_State)>,void ()(void *,AMCP::Power_State)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F146BDC0;
  result[1] = v3;
  return result;
}

void std::__function::__func<void (*)(void *,AMCP::Power_State),std::allocator<void (*)(void *,AMCP::Power_State)>,void ()(void *,AMCP::Power_State)>::~__func()
{
}

void HALS_System::PowerStateChangedCallback(_DWORD *a1, int a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (!a1 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
    *(void *)&uint8_t buf[4] = "HALS_System.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3721;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::PowerStateChangedCallback: HALS_System object is null", buf, 0x12u);
  }
  if (a1[347] != a2)
  {
    a1[347] = a2;
    *(void *)AudioStreamRangedDescription buf = MEMORY[0x1E4F143A8];
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&buf[16] = ___ZN11HALS_System33TellAllIOContextsAboutPowerChangeEN4AMCP11Power_StateE_block_invoke;
    uint64_t v6 = &__block_descriptor_tmp_143;
    int v7 = a1;
    int v8 = a2;
    uint64_t v4 = (HALB_Mutex *)(*(uint64_t (**)(_DWORD *))(*(void *)a1 + 56))(a1);
    HALB_CommandGate::ExecuteCommand(v4, (uint64_t)buf);
  }
}

void sub_1BACEED6C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  uint64_t v11 = (int *)__cxa_begin_catch(a1);
  BOOL v12 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
  if (a2 == 2)
  {
    if (v12)
    {
      uint64_t v13 = v11[2];
      LODWORD(a9) = 136315650;
      *(void *)((char *)&a9 + 4) = "HALS_System.cpp";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 3737;
      WORD1(a10) = 2048;
      *(void *)((char *)&a10 + 4) = v13;
      long long v14 = MEMORY[0x1E4F14500];
      long long v15 = "%25s:%-5d  HALS_System::PowerStateChangedCallback: Uncaught exception: %ld";
      uint32_t v16 = 28;
LABEL_7:
      _os_log_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&a9, v16);
    }
  }
  else if (v12)
  {
    LODWORD(a9) = 136315394;
    *(void *)((char *)&a9 + 4) = "HALS_System.cpp";
    WORD6(a9) = 1024;
    *(_DWORD *)((char *)&a9 + 14) = 3741;
    long long v14 = MEMORY[0x1E4F14500];
    long long v15 = "%25s:%-5d  HALS_System::PowerStateChangedCallback: Uncaught exception";
    uint32_t v16 = 18;
    goto LABEL_7;
  }
  __cxa_end_catch();
  JUMPOUT(0x1BACEED40);
}

void ___ZN11HALS_System33TellAllIOContextsAboutPowerChangeEN4AMCP11Power_StateE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(a1 + 40);
  uint64_t v3 = (char *)operator new(0x30uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)uint64_t v3 = &unk_1F1483780;
  *((void *)v3 + 3) = 0;
  uint64_t v4 = (void **)(v3 + 24);
  *((void *)v3 + 4) = 0;
  *((void *)v3 + 5) = 0;
  std::vector<unsigned int>::reserve((std::vector<unsigned int> *)v3 + 1, (uint64_t)(*(void *)(v1 + 1360) - *(void *)(v1 + 1352)) >> 3);
  uint64_t v5 = *(void *)(v1 + 1352);
  uint64_t v6 = *(void *)(v1 + 1360);
  if (v5 != v6)
  {
    int v7 = (char *)*((void *)v3 + 4);
    do
    {
      int v8 = *(_DWORD *)(*(void *)v5 + 16);
      unint64_t v9 = *((void *)v3 + 5);
      if ((unint64_t)v7 >= v9)
      {
        uint64_t v11 = (char *)*v4;
        uint64_t v12 = (v7 - (unsigned char *)*v4) >> 2;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = v9 - (void)v11;
        if (v14 >> 1 > v13) {
          unint64_t v13 = v14 >> 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15)
        {
          unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v15);
          uint64_t v11 = (char *)*((void *)v3 + 3);
          int v7 = (char *)*((void *)v3 + 4);
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v17 = (_DWORD *)(v15 + 4 * v12);
        *uint64_t v17 = v8;
        uint64_t v10 = (char *)(v17 + 1);
        while (v7 != v11)
        {
          int v18 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *--uint64_t v17 = v18;
        }
        *((void *)v3 + 3) = v17;
        *((void *)v3 + 4) = v10;
        *((void *)v3 + 5) = v15 + 4 * v16;
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *(_DWORD *)int v7 = v8;
        uint64_t v10 = v7 + 4;
      }
      *((void *)v3 + 4) = v10;
      v5 += 8;
      int v7 = v10;
    }
    while (v5 != v6);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 1174405120;
  block[2] = ___ZN11HALS_System34_TellAllIOContextsAboutPowerChangeEN4AMCP11Power_StateE_block_invoke;
  block[3] = &__block_descriptor_tmp_154_7067;
  block[4] = v3 + 24;
  unint64_t v21 = (std::__shared_weak_count *)v3;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v3 + 1, 1uLL, memory_order_relaxed);
  int v22 = v2;
  unsigned __int8 v19 = atomic_load((unsigned __int8 *)(v1 + 928));
  if (v19) {
    atomic_store(1u, (unsigned __int8 *)(v1 + 929));
  }
  dispatch_async(*(dispatch_queue_t *)(v1 + 896), block);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v3);
}

void sub_1BACEF058(void *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZN11HALS_System34_TellAllIOContextsAboutPowerChangeEN4AMCP11Power_StateE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(unsigned int ***)(a1 + 32);
  int v2 = *v1;
  uint64_t v3 = v1[1];
  if (*v1 != v3)
  {
    do
    {
      uint64_t v5 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v2);
      int v7 = (HALS_ObjectMap *)v5;
      if (v5)
      {
        int v8 = *(_DWORD *)(a1 + 48);
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 0x40000000;
        v10[2] = ___ZN14HALS_IOContext12PowerChangedEN4AMCP11Power_StateE_block_invoke;
        v10[3] = &__block_descriptor_tmp_12_10854;
        v10[4] = v5;
        int v11 = v8;
        unint64_t v9 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
        HALB_CommandGate::ExecuteCommand(v9, (uint64_t)v10);
      }
      HALS_ObjectMap::ReleaseObject(v7, v6);
      ++v2;
    }
    while (v2 != v3);
  }
}

uint64_t std::__shared_ptr_emplace<Mock_Power_Manager_System_Interface>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<Mock_Power_Manager_System_Interface>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146BD70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<Mock_Power_Manager_System_Interface>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146BD70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<HALS_PowerManager::True_System_Interface>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<HALS_PowerManager::True_System_Interface>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146BD20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALS_PowerManager::True_System_Interface>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146BD20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t HALS_System::RunLoopThread(HALS_System *this, void *a2)
{
  v21[0] = 0;
  v21[1] = 0;
  HALS_System::GetInstance(&v22, 0, v21);
  HALB_Mutex::Lock((HALB_Mutex *)(v22 + 1528));
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  v20[0] = 0;
  v20[1] = 0;
  HALS_System::GetInstance(&v22, 0, v20);
  uint64_t v3 = v23;
  *(void *)(v22 + 1520) = Current;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  v19[0] = 0;
  v19[1] = 0;
  HALS_System::GetInstance(&v22, 0, v19);
  CFRetain(*(CFTypeRef *)(v22 + 1520));
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  v18[0] = 0;
  v18[1] = 0;
  HALS_System::GetInstance(&v22, 0, v18);
  HALB_Guard::NotifyAll((pthread_cond_t *)(v22 + 1528));
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F1D420];
  while (1)
  {
    v17[0] = 0;
    v17[1] = 0;
    HALS_System::GetInstance(&v22, 0, v17);
    int v5 = *(unsigned __int8 *)(v22 + 1800);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    if (v5) {
      break;
    }
    v16[0] = 0;
    v16[1] = 0;
    HALS_System::GetInstance(&v22, 0, v16);
    HALB_Mutex::Unlock((HALB_Mutex *)(v22 + 1528));
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    v15[0] = 0;
    v15[1] = 0;
    HALS_System::GetInstance(&v22, 0, v15);
    uint64_t v6 = *(void *)(v22 + 1816);
    uint64_t v7 = *(void *)(v22 + 1808);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    if (v6 == v7)
    {
      usleep(0x4C4B40u);
    }
    else if (CFRunLoopRunInMode(v4, 1.0e10, 0) != kCFRunLoopRunTimedOut)
    {
      usleep(0xF4240u);
    }
    v14[0] = 0;
    v14[1] = 0;
    HALS_System::GetInstance(&v22, 0, v14);
    HALB_Mutex::Lock((HALB_Mutex *)(v22 + 1528));
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
  }
  v13[0] = 0;
  v13[1] = 0;
  HALS_System::GetInstance(&v22, 0, v13);
  CFRelease(*(CFTypeRef *)(v22 + 1520));
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  v12[0] = 0;
  v12[1] = 0;
  HALS_System::GetInstance(&v22, 0, v12);
  int v8 = v23;
  *(void *)(v22 + 1520) = 0;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  v11[0] = 0;
  v11[1] = 0;
  HALS_System::GetInstance(&v22, 0, v11);
  HALB_Guard::NotifyAll((pthread_cond_t *)(v22 + 1528));
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  v10[0] = 0;
  v10[1] = 0;
  HALS_System::GetInstance(&v22, 0, v10);
  HALB_Mutex::Unlock((HALB_Mutex *)(v22 + 1528));
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  return 0;
}

void sub_1BACEF59C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v24 = *(std::__shared_weak_count **)(v22 - 56);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    a15 = 0;
    a16 = 0;
    HALS_System::GetInstance((void *)(v22 - 64), 0, &a15);
    uint64_t v25 = *(std::__shared_weak_count **)(v22 - 56);
    uint64_t v26 = *(void *)(*(void *)(v22 - 64) + 1520);
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    if (v26)
    {
      a13 = 0;
      a14 = 0;
      HALS_System::GetInstance((void *)(v22 - 64), 0, &a13);
      CFRelease(*(CFTypeRef *)(*(void *)(v22 - 64) + 1520));
      CFBooleanRef v27 = *(std::__shared_weak_count **)(v22 - 56);
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      a11 = 0;
      a12 = 0;
      HALS_System::GetInstance((void *)(v22 - 64), 0, &a11);
LABEL_16:
      uint64_t v31 = *(std::__shared_weak_count **)(v22 - 56);
      *(void *)(*(void *)(v22 - 64) + 1520) = 0;
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
    }
  }
  else
  {
    a21 = 0;
    a22 = 0;
    HALS_System::GetInstance((void *)(v22 - 64), 0, &a21);
    __int16 v28 = *(std::__shared_weak_count **)(v22 - 56);
    uint64_t v29 = *(void *)(*(void *)(v22 - 64) + 1520);
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    if (v29)
    {
      a19 = 0;
      a20 = 0;
      HALS_System::GetInstance((void *)(v22 - 64), 0, &a19);
      CFRelease(*(CFTypeRef *)(*(void *)(v22 - 64) + 1520));
      unint64_t v30 = *(std::__shared_weak_count **)(v22 - 56);
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      a17 = 0;
      a18 = 0;
      HALS_System::GetInstance((void *)(v22 - 64), 0, &a17);
      goto LABEL_16;
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1BACEF580);
}

void sub_1BACEF734(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_emplace<AMCP::Utility::Dispatch_Queue>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<AMCP::Utility::Dispatch_Queue>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146BBE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Utility::Dispatch_Queue>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146BBE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_SettingsManager>::__on_zero_shared(uint64_t a1)
{
  std::unique_ptr<CASettingsStorage>::reset[abi:ne180100]((void *)(a1 + 64), 0);
  std::unique_ptr<CASettingsStorage>::reset[abi:ne180100]((void *)(a1 + 56), 0);
  std::unique_ptr<CASettingsStorage>::reset[abi:ne180100]((void *)(a1 + 48), 0);
  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100]((AMCP::Utility::Dispatch_Queue **)(a1 + 40), 0);
  int v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void std::__shared_ptr_emplace<HALS_SettingsManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146BCD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALS_SettingsManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146BCD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_IOContext_Manager>::__on_zero_shared(uint64_t a1)
{
  std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100]((AMCP::Utility::Dispatch_Queue **)(a1 + 280), 0);
  std::mutex::~mutex((std::mutex *)(a1 + 216));
  std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::~__hash_table(a1 + 176);
  int v2 = *(std::__shared_weak_count **)(a1 + 168);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 152);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(a1 + 104);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(a1 + 64);
  CFStringRef v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  int v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void std::__shared_ptr_emplace<HALS_IOContext_Manager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146BC80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALS_IOContext_Manager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146BC80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Graph::Synchronized_Mixer_Manager>::__on_zero_shared(void *a1)
{
  int v2 = (void *)a1[10];
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<AMCP::Graph::Node>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
  CFStringRef v4 = (void *)a1[8];
  a1[8] = 0;
  if (v4) {
    operator delete(v4);
  }
  int v5 = (void *)a1[5];
  if (v5)
  {
    do
    {
      uint64_t v6 = (void *)*v5;
      std::__destroy_at[abi:ne180100]<std::pair<AMCP::Terminal_Identifier const,std::shared_ptr<AMCP::DAL::Synchronized_Mixer>>,0>((uint64_t)(v5 + 2));
      operator delete(v5);
      int v5 = v6;
    }
    while (v6);
  }
  uint64_t v7 = (void *)a1[3];
  a1[3] = 0;
  if (v7)
  {
    operator delete(v7);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<AMCP::Terminal_Identifier const,std::shared_ptr<AMCP::DAL::Synchronized_Mixer>>,0>(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::__shared_ptr_emplace<AMCP::Graph::Synchronized_Mixer_Manager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14866D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Graph::Synchronized_Mixer_Manager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14866D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HALS_DefaultDeviceManager>::__on_zero_shared(uint64_t a1)
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 448));
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 416));
  for (uint64_t i = 0; i != -72; i -= 24)
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 392 + i));
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 312));
  for (uint64_t j = 0; j != -72; j -= 24)
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 288 + j));
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + 208));
  for (uint64_t k = 184; k != 112; k -= 24)
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(a1 + k));

  HALB_Mutex::~HALB_Mutex((HALB_Mutex *)(a1 + 24));
}

void std::__shared_ptr_emplace<HALS_DefaultDeviceManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146BC30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALS_DefaultDeviceManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146BC30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void HALS_System::StartServer(void *a1, int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  v18[0] = 0;
  v18[1] = 0;
  HALS_System::GetInstance(&v19, 0, v18);
  uint64_t v4 = v19;
  if ((void)v19)
  {
    *a1 = 0;
    a1[1] = 0;
    int v5 = *(std::__shared_weak_count **)(v4 + 120);
    if (v5)
    {
      uint64_t v6 = std::__shared_weak_count::lock(v5);
      a1[1] = v6;
      if (v6)
      {
        uint64_t v7 = *(void *)(v4 + 112);
        *a1 = v7;
        if (v7) {
          goto LABEL_19;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
  uint64_t v16 = (void **)&v17;
  uint64_t v17 = os_transaction_create();
  int v8 = pthread_mutex_lock(&HALS_System::sInitializationMutex);
  *a1 = 0;
  a1[1] = 0;
  if (v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamRangedDescription buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALS_System.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 592;
      __int16 v21 = 1024;
      int v22 = v8;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::StartServer: failed to lock the mutex, Error: 0x%X", buf, 0x18u);
    }
  }
  else
  {
    v15[0] = 0;
    v15[1] = 0;
    HALS_System::GetInstance(buf, 0, v15);
    unint64_t v9 = (std::__shared_weak_count *)*((void *)&v19 + 1);
    long long v19 = *(_OWORD *)buf;
    uint64_t v10 = *(void *)buf;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (!v10)
    {
      kdebug_trace();
      unint64_t v13 = operator new(0x740uLL);
      v13[1] = 0;
      uint64_t v13[2] = 0;
      *unint64_t v13 = &unk_1F146BE70;
      HALS_System::HALS_System((uint64_t)(v13 + 3), a2, v14);
    }
    int v11 = *(std::__shared_weak_count **)(v10 + 120);
    if (v11 && (uint64_t v12 = std::__shared_weak_count::lock(v11)) != 0)
    {
      *a1 = *(void *)(v10 + 112);
      a1[1] = v12;
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
    }
    pthread_mutex_unlock(&HALS_System::sInitializationMutex);
  }
  applesauce::raii::v1::detail::ScopeGuard<HALS_System::StartServer(HALS_System::Server_Start_Options)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(&v16);
LABEL_19:
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
}

void sub_1BACF0ED8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,std::__shared_weak_count *a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a39);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a41);
  if (a49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a49);
  }
  uint64_t v56 = *(std::__shared_weak_count **)(a16 + 8);
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  applesauce::raii::v1::detail::ScopeGuard<HALS_System::StartServer(HALS_System::Server_Start_Options)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(&a27);
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  _Unwind_Resume(v57);
}

void HALS_System::CheckForDefaultDeviceChanges(HALS_System *this)
{
  platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(this);
  if ((*(unsigned int (**)(uint64_t *))(*platform_behaviors + 56))(platform_behaviors) == 1
    && HALS_System::sIsInitialized != 0)
  {
    uint64_t v4 = *((void *)this + 158);
    int v5 = (std::__shared_weak_count *)*((void *)this + 159);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = *((void *)this + 30);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 1174405120;
    CFDictionaryRef v7[2] = ___ZN11HALS_System28CheckForDefaultDeviceChangesEv_block_invoke;
    v7[3] = &__block_descriptor_tmp_104_7088;
    v7[4] = v4;
    int v8 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::Utility::Dispatch_Queue::after(v6, (uint64_t)v7);
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void ***applesauce::raii::v1::detail::ScopeGuard<HALS_System::StartServer(HALS_System::Server_Start_Options)::$_0,applesauce::raii::v1::detail::StackExitPolicy>::~ScopeGuard(void ***a1)
{
  int v2 = **a1;
  if (v2)
  {
    os_release(v2);
    **a1 = 0;
  }
  return a1;
}

void ___ZN11HALS_System11StartServerENS_20Server_Start_OptionsE_block_invoke()
{
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  v88[0] = 0;
  v88[1] = 0;
  HALS_System::GetInstance(&v89, 0, v88);
  uint64_t v0 = v89;
  uint64_t v110 = 0;
  unsigned int v111 = &v110;
  uint64_t v112 = 0x4002000000;
  int v113 = __Block_byref_object_copy__6832;
  uint64_t v114 = __Block_byref_object_dispose__6833;
  memset(v115, 0, sizeof(v115));
  uint64_t v104 = 0;
  int v105 = &v104;
  uint64_t v106 = 0x4002000000;
  unsigned int v107 = __Block_byref_object_copy__47;
  std::string::size_type v108 = __Block_byref_object_dispose__48;
  memset(v109, 0, sizeof(v109));
  uint64_t v98 = 0;
  BOOL v99 = &v98;
  uint64_t v100 = 0x4002000000;
  long long v101 = __Block_byref_object_copy__49_6834;
  __int16 v102 = __Block_byref_object_dispose__50_6835;
  memset(v103, 0, sizeof(v103));
  HALS_ObjectMap::Dump(v1);
  v97[0] = MEMORY[0x1E4F143A8];
  v97[1] = 0x40000000;
  v97[2] = ___ZNK11HALS_System8LogStateEv_block_invoke;
  v97[3] = &unk_1E6232878;
  v97[4] = &v110;
  v97[5] = &v104;
  v97[6] = &v98;
  v97[7] = v0;
  int v2 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v0 + 56))(v0);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v97);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v93);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"Number of Device Managers: ", 27);
  uint64_t v3 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)));
  uint64_t v4 = std::locale::use_facet((const std::locale *)v135, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale((std::locale *)v135);
  std::ostream::put();
  std::ostream::flush();
  int v5 = (const __CFString ***)v111[5];
  uint64_t v6 = (const __CFString ***)v111[6];
  while (v5 != v6)
    HALS_DeviceManager::LogState(*v5++, (uint64_t)v93);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"Number of IO Contexts: ", 23);
  uint64_t v7 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
  int v8 = std::locale::use_facet((const std::locale *)v135, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale((std::locale *)v135);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v9 = v105[5];
  uint64_t v10 = v105[6];
  while (v9 != v10)
  {
    (*(void (**)(void, void ***, uint64_t))(**(void **)(*(void *)v9 + 96) + 376))(*(void *)(*(void *)v9 + 96), v93, 1);
    v9 += 8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"Number of Clients: ", 19);
  int v11 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  uint64_t v12 = std::locale::use_facet((const std::locale *)v135, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale((std::locale *)v135);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v13 = (uint64_t *)v99[5];
  uint64_t v14 = (uint64_t *)v99[6];
  if (v13 != v14)
  {
    unint64_t v15 = (std::locale::id *)MEMORY[0x1E4FBA258];
    do
    {
      uint64_t v16 = *v13;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"Client ", 7);
      uint64_t v17 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
      int v18 = std::locale::use_facet(&v121, v15);
      ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
      std::locale::~locale(&v121);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"PID:       ", 11);
      long long v19 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
      char v20 = std::locale::use_facet(&v122, v15);
      ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
      std::locale::~locale(&v122);
      std::ostream::put();
      std::ostream::flush();
      *(_DWORD *)CFStringRef v120 = 128;
      CACFString::GetCString(*(const __CFString **)(v16 + 240), v135, v120, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"Bundle ID: ", 11);
      size_t v22 = strlen((const char *)v135);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)v135, v22);
      std::ios_base::getloc((const std::ios_base *)((char *)v94 + *(void *)(v94[0] - 24)));
      uint64_t v23 = std::locale::use_facet(&v123, v15);
      ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
      std::locale::~locale(&v123);
      std::ostream::put();
      std::ostream::flush();
      ++v13;
    }
    while (v13 != v14);
  }
  v124.__locale_ = 0;
  LODWORD(v125) = 16;
  BYTE4(v125) = 0;
  *((void *)&v125 + 1) = 0;
  long long v126 = 0uLL;
  io_iterator_t existing = 0;
  CFDictionaryRef v24 = IOServiceMatching("AppleEmbeddedAudio");
  if (!IOServiceGetMatchingServices(*MEMORY[0x1E4F2EEF0], v24, &existing))
  {
    LODWORD(v124.__locale_) = 0;
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF88];
    uint64_t v35 = (std::locale::id *)MEMORY[0x1E4FBA258];
    int v36 = "%8Xh: 0x%02x";
    while (1)
    {
      do
      {
        io_registry_entry_t v37 = IOIteratorNext(existing);
        LODWORD(v124.__locale_) = v37;
        if (!v37) {
          goto LABEL_11;
        }
        CFTypeRef cf = IORegistryEntryCreateCFProperty(v37, @"CodecRegisterData", allocator, 0);
      }
      while (!cf);
      CFNumberRef CFProperty = (const __CFNumber *)IORegistryEntryCreateCFProperty((io_registry_entry_t)v124.__locale_, @"CodecRegisterStartIndex", allocator, 0);
      CFNumberRef v39 = CFProperty;
      if (CFProperty)
      {
        LODWORD(valuePtr) = 0;
        if (CFNumberGetValue(CFProperty, kCFNumberSInt32Type, &valuePtr)) {
          HIDWORD(v124.__locale_) = valuePtr;
        }
        CFRelease(v39);
      }
      CFNumberRef v40 = (const __CFNumber *)IORegistryEntryCreateCFProperty((io_registry_entry_t)v124.__locale_, @"CodecRegisterDisplayBase", allocator, 0);
      CFNumberRef v41 = v40;
      if (v40)
      {
        if (!CFNumberGetValue(v40, kCFNumberSInt32Type, &v125)) {
          LODWORD(v125) = 16;
        }
        CFRelease(v41);
      }
      CFTypeID v42 = CFGetTypeID(cf);
      if (v42 != CFArrayGetTypeID()) {
        break;
      }
      CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
      uint64_t v44 = Count;
      CFStringRef v45 = v36;
      if (Count >= 0) {
        uint64_t v46 = Count;
      }
      else {
        uint64_t v46 = Count + 1;
      }
      uint64_t v47 = *((void *)&v125 + 1);
      for (uint64_t i = v126; i != v47; i -= 32)
      {
        uint64_t v49 = *(void **)(i - 24);
        if (v49)
        {
          *(void *)(i - 16) = v49;
          operator delete(v49);
        }
      }
      int64_t v53 = v46 >> 1;
      *(void *)&long long v126 = v47;
      std::vector<std::pair<unsigned int,std::vector<unsigned int>>>::reserve((uint64_t *)&v125 + 1, v53);
      int v36 = v45;
      if (v44 < 2) {
        goto LABEL_75;
      }
      CFIndex v54 = 0;
      int64_t v55 = 0;
      BOOL v56 = 0;
      unsigned int v57 = 0;
      while (1)
      {
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)cf, v54);
        LODWORD(v116[0]) = 0;
        if (ValueAtIndex)
        {
          if (CFNumberGetValue(ValueAtIndex, kCFNumberIntType, v116))
          {
            unsigned int v59 = v116[0];
            if (LODWORD(v116[0]) < v57) {
              BYTE4(v125) = 1;
            }
            CFDataRef v60 = (const __CFData *)CFArrayGetValueAtIndex((CFArrayRef)cf, v54 + 1);
            int v61 = BYTE4(v125) ? 4 : 1;
            unsigned int v57 = v59;
            if (!CodecRegistryEntry::ReadRegistersFromCFData<CodecRegistryEntry::RegisterWidth>((uint64_t *)&v125 + 1, v60, (int)v116[0], v61))break; {
          }
            }
        }
        ++v55;
        v54 += 2;
        BOOL v56 = v53 <= v55;
        int v36 = v45;
        if (v53 == v55) {
          goto LABEL_75;
        }
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"Error encountered while reading register data for register address ", 67);
      int v36 = v45;
      uint64_t v69 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(void *)(*v69 - 24)));
      uint64_t v70 = std::locale::use_facet((const std::locale *)&valuePtr, v35);
      ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
      std::locale::~locale((std::locale *)&valuePtr);
      std::ostream::put();
      std::ostream::flush();
      if (v56) {
        goto LABEL_75;
      }
LABEL_98:
      CFRelease(cf);
    }
    if (v42 == CFDataGetTypeID())
    {
      uint64_t v50 = *((void *)&v125 + 1);
      for (uint64_t j = v126; j != v50; j -= 32)
      {
        unsigned __int8 v52 = *(void **)(j - 24);
        if (v52)
        {
          *(void *)(j - 16) = v52;
          operator delete(v52);
        }
      }
      *(void *)&long long v126 = v50;
      int locale_high = HIDWORD(v124.__locale_);
      int v63 = BYTE4(v125);
      CFIndex Length = CFDataGetLength((CFDataRef)cf);
      unint64_t v65 = v63 ? Length / 4 : Length;
      std::vector<std::pair<unsigned int,std::vector<unsigned int>>>::reserve((uint64_t *)&v125 + 1, v65);
      int v66 = BYTE4(v125) ? 4 : 2;
      if (!CodecRegistryEntry::ReadRegistersFromCFData<CodecRegistryEntry::RegisterWidth>((uint64_t *)&v125 + 1, (CFDataRef)cf, locale_high, v66))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"Error encountered while reading register data for register address ", 67);
        uint64_t v67 = (void *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v67 + *(void *)(*v67 - 24)));
        CFStringRef v68 = std::locale::use_facet((const std::locale *)&valuePtr, v35);
        ((void (*)(const std::locale::facet *, uint64_t))v68->__vftable[2].~facet_0)(v68, 10);
        std::locale::~locale((std::locale *)&valuePtr);
        std::ostream::put();
        std::ostream::flush();
        goto LABEL_98;
      }
    }
LABEL_75:
    long long v133 = 0u;
    long long v134 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    long long valuePtr = 0u;
    long long v128 = 0u;
    if (MEMORY[0x1C1858A00](LODWORD(v124.__locale_), &valuePtr)) {
      p_long long valuePtr = "";
    }
    else {
      p_long long valuePtr = (char *)&valuePtr;
    }
    std::string::basic_string[abi:ne180100]<0>(v116, p_valuePtr);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"Codec Device: ", 14);
    if ((v117 & 0x80u) == 0) {
      uint64_t v72 = v116;
    }
    else {
      uint64_t v72 = (void **)v116[0];
    }
    if ((v117 & 0x80u) == 0) {
      uint64_t v73 = v117;
    }
    else {
      uint64_t v73 = (uint64_t)v116[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)v72, v73);
    std::ios_base::getloc((const std::ios_base *)((char *)v94 + *(void *)(v94[0] - 24)));
    int v74 = std::locale::use_facet((const std::locale *)&valuePtr, v35);
    ((void (*)(const std::locale::facet *, uint64_t))v74->__vftable[2].~facet_0)(v74, 10);
    std::locale::~locale((std::locale *)&valuePtr);
    std::ostream::put();
    std::ostream::flush();
    uint64_t v75 = (int *)*((void *)&v125 + 1);
    CFStringRef v76 = (int *)v126;
    while (v75 != v76)
    {
      uint64_t v78 = *((void *)v75 + 1);
      uint64_t v77 = *((void *)v75 + 2);
      if (v77 != v78)
      {
        LODWORD(v79) = 0;
        int v80 = *v75;
        unint64_t v81 = (v77 - v78) >> 2;
        do
        {
          int v82 = v79;
          if (v81 > v79)
          {
            uint64_t v83 = *(unsigned int *)(v78 + 4 * v79);
            LODWORD(v133) = 0;
            long long v131 = 0u;
            long long v132 = 0u;
            long long v129 = 0u;
            long long v130 = 0u;
            long long valuePtr = 0u;
            long long v128 = 0u;
            if (v125 == 16)
            {
              snprintf((char *)&valuePtr, 0x64uLL, v36, (v80 + v79), v83);
            }
            else if (v125 == 10)
            {
              snprintf((char *)&valuePtr, 0x64uLL, "R%06ud: %04d");
            }
            size_t v84 = strlen((const char *)&valuePtr);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)&valuePtr, v84);
            std::ios_base::getloc((const std::ios_base *)((char *)v94 + *(void *)(v94[0] - 24)));
            uint64_t v85 = std::locale::use_facet(&v119, v35);
            ((void (*)(const std::locale::facet *, uint64_t))v85->__vftable[2].~facet_0)(v85, 10);
            std::locale::~locale(&v119);
            std::ostream::put();
            std::ostream::flush();
            uint64_t v78 = *((void *)v75 + 1);
            uint64_t v77 = *((void *)v75 + 2);
          }
          unint64_t v79 = (v82 + 1);
          unint64_t v81 = (v77 - v78) >> 2;
        }
        while (v81 > v79);
      }
      v75 += 8;
    }
    if ((char)v117 < 0) {
      operator delete(v116[0]);
    }
    goto LABEL_98;
  }
LABEL_11:
  if (existing) {
    IOObjectRelease(existing);
  }
  *(void *)&long long valuePtr = (char *)&v125 + 8;
  std::vector<std::pair<unsigned int,std::vector<unsigned int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&valuePtr);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v92 = 0;
  uint64_t v25 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v93 + (unint64_t)*(v93[0] - 3)));
    uint64_t v26 = std::locale::use_facet(&v124, v25);
    unsigned __int8 v27 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
    std::locale::~locale(&v124);
    __int16 v28 = (AMCP::Log::Scope_Registry *)std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, (uint64_t)__p, v27);
    if ((*((unsigned char *)&v94[2] + (unint64_t)*(v93[0] - 3)) & 5) != 0) {
      break;
    }
    AMCP::Log::Scope_Registry::get(v28);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v124, "com.apple.coreaudio", "AMCP");
    uint64_t v29 = *(NSObject **)v124.__locale_;
    if ((void)v125) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v125);
    }
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v30 = pthread_self();
      mach_port_t v31 = pthread_mach_thread_np(v30);
      uint64_t v32 = __p;
      if (v92 < 0) {
        uint64_t v32 = (void **)__p[0];
      }
      LODWORD(v124.__locale_) = 67109890;
      HIDWORD(v124.__locale_) = v31;
      LOWORD(v125) = 2080;
      *(void *)((char *)&v125 + 2) = "HALS_System.cpp";
      WORD5(v125) = 1024;
      HIDWORD(v125) = 996;
      LOWORD(v126) = 2080;
      *(void *)((char *)&v126 + 2) = v32;
      _os_log_impl(&dword_1BAA78000, v29, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d %s", (uint8_t *)&v124, 0x22u);
    }
  }
  if (SHIBYTE(v92) < 0) {
    operator delete(__p[0]);
  }
  v93[0] = *(void ***)MEMORY[0x1E4FBA408];
  uint64_t v33 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void ***)((char *)v93 + (unint64_t)*(v93[0] - 3)) = *(void ***)(MEMORY[0x1E4FBA408] + 64);
  v94[0] = v33;
  v94[1] = MEMORY[0x1E4FBA470] + 16;
  if (v95 < 0) {
    operator delete((void *)v94[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C1859700](&v96);
  _Block_object_dispose(&v98, 8);
  v93[0] = (void **)v103;
  std::vector<HALS_Releaser<HALS_Client>>::__destroy_vector::operator()[abi:ne180100](v93);
  _Block_object_dispose(&v104, 8);
  v93[0] = (void **)v109;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](v93);
  _Block_object_dispose(&v110, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v115, v34);
  if (v90) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v90);
  }
}

void sub_1BACF2330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, HALS_ObjectMap ***a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a27);
  _Block_object_dispose(&a70, 8);
  a27 = a11;
  std::vector<HALS_Releaser<HALS_Client>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  _Block_object_dispose(&STACK[0x228], 8);
  a27 = a12;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  _Block_object_dispose(&STACK[0x268], 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(a13, v71);
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__47(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__48(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZNK11HALS_System8LogStateEv_block_invoke(void *a1, HALS_Object *a2)
{
  uint64_t v3 = a1[7];
  uint64_t v4 = *(void *)(a1[4] + 8);
  if (v4 + 40 != v3 + 1232)
  {
    std::vector<long long>::__assign_with_size[abi:ne180100]<long long *,long long *>((char *)(v4 + 40), *(char **)(v3 + 1232), *(void *)(v3 + 1240), (uint64_t)(*(void *)(v3 + 1240) - *(void *)(v3 + 1232)) >> 3);
    uint64_t v4 = *(void *)(a1[4] + 8);
  }
  int v5 = *(HALS_ObjectMap ***)(v4 + 40);
  uint64_t v6 = *(HALS_ObjectMap ***)(v4 + 48);
  while (v5 != v6)
    HALS_ObjectMap::RetainObject(*v5++, a2);
  uint64_t v7 = *(void *)(a1[5] + 8) + 40;
  if (v7 != v3 + 1352) {
    std::vector<HALS_Releaser<HALS_IOContext>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v7, *(HALS_Object **)(v3 + 1352), *(HALS_ObjectMap ***)(v3 + 1360), (uint64_t)(*(void *)(v3 + 1360) - *(void *)(v3 + 1352)) >> 3);
  }
  uint64_t v8 = *(void *)(a1[6] + 8) + 40;
  if (v8 != v3 + 1288) {
    std::vector<HALS_Releaser<HALS_Client>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*>(v8, *(HALS_Object **)(v3 + 1288), *(HALS_ObjectMap ***)(v3 + 1296), (uint64_t)(*(void *)(v3 + 1296) - *(void *)(v3 + 1288)) >> 3);
  }
}

void sub_1BACF25C4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void std::vector<HALS_Releaser<HALS_IOContext>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(uint64_t a1, HALS_Object *a2, HALS_ObjectMap **a3, unint64_t a4)
{
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = *(HALS_Object **)a1;
  if (a4 > (v8 - *(void *)a1) >> 3)
  {
    if (v10)
    {
      std::vector<HALS_Releaser<HALS_IOContext>>::__base_destruct_at_end[abi:ne180100](a1, *(HALS_Object **)a1);
      operator delete(*(void **)a1);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 >> 61) {
      goto LABEL_18;
    }
    uint64_t v11 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v11;
    if (v12 >> 61) {
LABEL_18:
    }
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    unint64_t v13 = (HALS_ObjectMap **)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v13;
    *(void *)(a1 + 16) = &v13[v14];
    unint64_t v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_Releaser<HALS_IOContext>>,HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v9, a2, a3, v13);
    goto LABEL_14;
  }
  unint64_t v16 = (uint64_t)(*(void *)(a1 + 8) - (void)v10) >> 3;
  if (v16 < a4)
  {
    uint64_t v17 = (HALS_Object *)((char *)a2 + 8 * v16);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HALS_Releaser<HALS_Client> *,HALS_Releaser<HALS_Client> *,HALS_Releaser<HALS_Client> *>((HALS_ObjectMap **)a2, v17, (HALS_ObjectMap **)v10);
    unint64_t v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_Releaser<HALS_IOContext>>,HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v9, v17, a3, *(HALS_ObjectMap ***)(a1 + 8));
LABEL_14:
    *(void *)(a1 + 8) = v15;
    return;
  }
  int v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<HALS_Releaser<HALS_Client> *,HALS_Releaser<HALS_Client> *,HALS_Releaser<HALS_Client> *>((HALS_ObjectMap **)a2, (HALS_Object *)a3, (HALS_ObjectMap **)v10);

  std::vector<HALS_Releaser<HALS_IOContext>>::__base_destruct_at_end[abi:ne180100](a1, (HALS_Object *)v18);
}

void sub_1BACF2738(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BACF2740(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

HALS_ObjectMap **std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<HALS_Releaser<HALS_IOContext>>,HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(uint64_t a1, HALS_Object *a2, HALS_ObjectMap **a3, HALS_ObjectMap **a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  unint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != (HALS_Object *)a3)
  {
    uint64_t v6 = (HALS_ObjectMap **)a2;
    do
    {
      uint64_t v7 = *v6;
      *uint64_t v4 = *v6;
      HALS_ObjectMap::RetainObject(v7, a2);
      ++v6;
      uint64_t v4 = ++v12;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HALS_Releaser<HALS_IOContext>>,HALS_Releaser<HALS_IOContext>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9, a2);
  return v4;
}

void sub_1BACF27D8(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<HALS_Releaser<HALS_IOContext>>,HALS_Releaser<HALS_IOContext>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1, HALS_Object *a2)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = **(void **)(a1 + 16);
    uint64_t v5 = **(void **)(a1 + 8);
    while (v4 != v5)
    {
      uint64_t v6 = *(HALS_ObjectMap **)(v4 - 8);
      v4 -= 8;
      HALS_ObjectMap::ReleaseObject(v6, a2);
    }
  }
  return a1;
}

void ___ZN11HALS_System28CheckForDefaultDeviceChangesEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(HALS_DefaultDeviceManager **)(a1 + 32);
      if (v5)
      {
        v9[0] = 0;
        v9[1] = 0;
        HALS_System::GetInstance(&v10, 0, v9);
        uint64_t v6 = v10;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        if (v6)
        {
          v8[0] = 0;
          v8[1] = 0;
          HALS_System::GetInstance(&v10, 0, v8);
          uint64_t v7 = (std::mutex *)(v10 + 48);
          std::mutex::lock((std::mutex *)(v10 + 48));
          if (v11) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          }
          HALS_DefaultDeviceManager::CheckForChanges(v5);
          std::mutex::unlock(v7);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1BACF291C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  std::mutex::unlock(v21);
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void __destroy_helper_block_e8_32c50_ZTSNSt3__18weak_ptrI25HALS_DefaultDeviceManagerEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t __copy_helper_block_e8_32c50_ZTSNSt3__18weak_ptrI25HALS_DefaultDeviceManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__shared_ptr_emplace<HALS_System::StartScope>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<HALS_System::StartScope>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146BEC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALS_System::StartScope>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146BEC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<HALS_System>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void std::__shared_ptr_emplace<HALS_System>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146BE70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALS_System>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146BE70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t ___ZN11HALS_System20ReloadServerSettingsEv_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  uint64_t v2 = *(HALS_IOContext ***)(v1 + 1352);
  uint64_t v3 = *(HALS_IOContext ***)(v1 + 1360);
  while (v2 != v3)
  {
    uint64_t v4 = *v2++;
    uint64_t v5 = *((void *)v4 + 12);
    uint64_t AudioCaptureMode = HALS_IOContext::GetAudioCaptureMode(v4);
    __n128 result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 528))(v5, AudioCaptureMode);
  }
  return result;
}

HALS_ObjectMap *HALS_System::CopyPlugInByReferenceID(HALS_System *this, HALS_ObjectMap *a2)
{
  uint64_t v2 = a2;
  if (!a2) {
    return v2;
  }
  uint64_t v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x4002000000;
  uint64_t v25 = __Block_byref_object_copy__6832;
  uint64_t v26 = __Block_byref_object_dispose__6833;
  memset(v27, 0, sizeof(v27));
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 0x40000000;
  uint64_t v21[2] = ___ZNK11HALS_System23CopyPlugInByReferenceIDEPv_block_invoke;
  v21[3] = &unk_1E62328F0;
  v21[4] = &v22;
  v21[5] = this;
  uint64_t v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v21);
  uint64_t v4 = (HALS_ObjectMap **)v23[5];
  uint64_t v5 = (HALS_ObjectMap **)v23[6];
  if (v4 == v5)
  {
LABEL_26:
    uint64_t v2 = 0;
    goto LABEL_28;
  }
  while (1)
  {
    int v6 = *((_DWORD *)*v4 + 5);
    int v7 = *((_DWORD *)*v4 + 6);
    if (v6 == v7)
    {
      if (v6 != 1953656941 && v6 != 1634757735) {
        goto LABEL_25;
      }
    }
    else if (v6 != 1634757735 && v6 != 1953656941 && v7 != 1634757735 && v7 != 1953656941)
    {
      goto LABEL_25;
    }
    uint64_t v13 = (*(uint64_t (**)(HALS_ObjectMap *))(*(void *)*v4 + 200))(*v4);
    uint64_t v14 = *v4;
    unint64_t v15 = (const void *)*((void *)*v4 + 6);
    if (v15)
    {
      CFRetain(v15);
      uint64_t v16 = *((void *)v14 + 6);
    }
    else
    {
      uint64_t v16 = 0;
    }
    uint64_t v19 = v16;
    char v20 = 1;
    if ((HALS_ObjectMap *)v13 == v2) {
      break;
    }
    CACFString::~CACFString((CACFString *)&v19);
LABEL_25:
    if (++v4 == v5) {
      goto LABEL_26;
    }
  }
  uint64_t v2 = *v4;
  HALS_ObjectMap::RetainObject(*v4, v12);
  CACFString::~CACFString((CACFString *)&v19);
LABEL_28:
  _Block_object_dispose(&v22, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v27, v17);
  return v2;
}

void sub_1BACF2D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  CACFString::~CACFString((CACFString *)&a9);
  _Block_object_dispose(&a17, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v17, v19);
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_System23CopyPlugInByReferenceIDEPv_block_invoke(uint64_t a1)
{
}

void sub_1BACF2DB4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System17CopyIODeviceByUIDEPK10__CFStringP11HALS_Client_block_invoke(uint64_t a1)
{
}

void sub_1BACF2DF8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_System17CopyDeviceByIndexEjNS_14DeviceListKindEbP11HALS_Client_block_invoke(uint64_t a1)
{
}

void sub_1BACF2E3C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

HALS_ObjectMap *HALS_System::CopyDeviceByObjectID(HALS_System *this, int a2, HALS_Client *a3)
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x4002000000;
  unint64_t v15 = __Block_byref_object_copy__6832;
  uint64_t v16 = __Block_byref_object_dispose__6833;
  memset(v17, 0, sizeof(v17));
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  uint64_t v11[2] = ___ZNK11HALS_System20CopyDeviceByObjectIDEjP11HALS_Client_block_invoke;
  v11[3] = &unk_1E6232B48;
  v11[4] = &v12;
  void v11[5] = this;
  uint64_t v5 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v11);
  int v6 = (HALS_DeviceManager **)v13[5];
  int v7 = (HALS_DeviceManager **)v13[6];
  while (v6 != v7)
  {
    uint64_t v8 = HALS_DeviceManager::CopyDeviceByObjectID(*v6, a2, a3);
    if (v8) {
      goto LABEL_6;
    }
    ++v6;
  }
  uint64_t v8 = 0;
LABEL_6:
  _Block_object_dispose(&v12, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v17, v9);
  return v8;
}

void sub_1BACF2F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v7, v9);
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_System20CopyDeviceByObjectIDEjP11HALS_Client_block_invoke(uint64_t a1)
{
}

void sub_1BACF2FE4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_System::GetRawDeviceListUsingClockDevice(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v31 = 0;
  uint64_t v32 = &v31;
  uint64_t v33 = 0x4002000000;
  int v34 = __Block_byref_object_copy__6832;
  uint64_t v35 = __Block_byref_object_dispose__6833;
  memset(v36, 0, 24);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 0x40000000;
  v30[2] = ___ZNK11HALS_System32GetRawDeviceListUsingClockDeviceERNSt3__16vectorIjNS0_9allocatorIjEEEEN10applesauce2CF9StringRefE_block_invoke;
  v30[3] = &unk_1E6232BC0;
  v30[4] = &v31;
  v30[5] = a1;
  uint64_t v5 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v30);
  int v6 = (HALS_DeviceManager **)v32[5];
  for (uint64_t i = (HALS_DeviceManager **)v32[6]; v6 != i; ++v6)
  {
    unsigned __int8 v27 = 0;
    __int16 v28 = 0;
    uint64_t v29 = 0;
    HALS_DeviceManager::CopyRawDeviceList(*v6, (HALS_DeviceManager::BasicDeviceList *)&v27);
    uint64_t v10 = v27;
    uint64_t v9 = v28;
    while (v10 != v9)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        CFTypeRef v12 = *a3;
        if (*a3) {
          CFRetain(*a3);
        }
        CFTypeRef cf = v12;
        int v13 = (*(uint64_t (**)(HALS_ObjectMap *, CFTypeRef *))(*(void *)v11 + 688))(v11, &cf);
        if (cf) {
          CFRelease(cf);
        }
        if (v13)
        {
          int v14 = *((_DWORD *)*v10 + 4);
          uint64_t v16 = *(_DWORD **)(a2 + 8);
          unint64_t v15 = *(void *)(a2 + 16);
          if ((unint64_t)v16 >= v15)
          {
            int v18 = *(_DWORD **)a2;
            uint64_t v19 = ((uint64_t)v16 - *(void *)a2) >> 2;
            unint64_t v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 62) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v21 = v15 - (void)v18;
            if (v21 >> 1 > v20) {
              unint64_t v20 = v21 >> 1;
            }
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v22 = v20;
            }
            if (v22)
            {
              unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v22);
              int v18 = *(_DWORD **)a2;
              uint64_t v16 = *(_DWORD **)(a2 + 8);
            }
            else
            {
              uint64_t v8 = 0;
            }
            uint64_t v23 = (_DWORD *)(v22 + 4 * v19);
            _DWORD *v23 = v14;
            uint64_t v17 = v23 + 1;
            while (v16 != v18)
            {
              int v24 = *--v16;
              *--uint64_t v23 = v24;
            }
            *(void *)a2 = v23;
            *(void *)(a2 + 8) = v17;
            *(void *)(a2 + 16) = v22 + 4 * (void)v8;
            if (v18) {
              operator delete(v18);
            }
          }
          else
          {
            *uint64_t v16 = v14;
            uint64_t v17 = v16 + 1;
          }
          *(void *)(a2 + 8) = v17;
        }
      }
      ++v10;
    }
    HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v27, v8);
  }
  _Block_object_dispose(&v31, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v36, v25);
}

void sub_1BACF3280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, HALS_ObjectMap ***a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  _Block_object_dispose(&a23, 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(a9, v24);
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_System32GetRawDeviceListUsingClockDeviceERNSt3__16vectorIjNS0_9allocatorIjEEEEN10applesauce2CF9StringRefE_block_invoke(uint64_t a1)
{
}

void sub_1BACF32F8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_System::ClockDeviceArrived(HALS_System *this, const BOOL *a2, unsigned int a3, const __CFString *a4)
{
  unsigned int v6 = a2;
  if (AMCP::Feature_Flags::run_hybrid_hal(this, a2))
  {
    uint64_t v8 = (os_unfair_lock_s *)*((void *)this + 174);
    if (a4)
    {
      CFRetain(a4);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v19, a4);
    }
    else
    {
      CFStringRef v19 = 0;
    }
    uint64_t v13 = 0;
    int v14 = 0;
    uint64_t v15 = 0;
    HALS_IOContext_Manager::device_arrived(v8, v6, a3, &v19, (uint64_t)&v13, 0);
    if (v19) {
      CFRelease(v19);
    }
  }
  uint64_t v13 = 0;
  int v14 = &v13;
  uint64_t v15 = 0x4002000000;
  uint64_t v16 = __Block_byref_object_copy__47;
  uint64_t v17 = __Block_byref_object_dispose__48;
  memset(v18, 0, sizeof(v18));
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  uint64_t v12[2] = ___ZN11HALS_System18ClockDeviceArrivedEjjPK10__CFString_block_invoke;
  void v12[3] = &unk_1E6232BE8;
  unsigned char v12[4] = &v13;
  v12[5] = this;
  uint64_t v9 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v9, (uint64_t)v12);
  uint64_t v10 = v14[5];
  uint64_t v11 = v14[6];
  while (v10 != v11)
  {
    (*(void (**)(void, const __CFString *))(**(void **)(*(void *)v10 + 96) + 104))(*(void *)(*(void *)v10 + 96), a4);
    v10 += 8;
  }
  _Block_object_dispose(&v13, 8);
  unint64_t v20 = (void **)v18;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v20);
}

void sub_1BACF34DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  *(void *)(v8 - 56) = v7;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v8 - 56));
  _Unwind_Resume(a1);
}

void ___ZN11HALS_System18ClockDeviceArrivedEjjPK10__CFString_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8) + 40;
  if (v2 != v1 + 1352) {
    std::vector<HALS_Releaser<HALS_IOContext>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v2, *(HALS_Object **)(v1 + 1352), *(HALS_ObjectMap ***)(v1 + 1360), (uint64_t)(*(void *)(v1 + 1360) - *(void *)(v1 + 1352)) >> 3);
  }
}

void HALS_System::ClockDeviceDied(HALS_System *this, const BOOL *a2, unsigned int a3, const __CFString *a4)
{
  unsigned int v6 = a2;
  if (AMCP::Feature_Flags::run_hybrid_hal(this, a2))
  {
    uint64_t v8 = *((void *)this + 174);
    if (a4)
    {
      CFRetain(a4);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v19, a4);
    }
    else
    {
      CFTypeRef v19 = 0;
    }
    HALS_IOContext_Manager::device_died(v8, v6, a3, &v19);
    if (v19) {
      CFRelease(v19);
    }
  }
  uint64_t v13 = 0;
  int v14 = &v13;
  uint64_t v15 = 0x4002000000;
  uint64_t v16 = __Block_byref_object_copy__47;
  uint64_t v17 = __Block_byref_object_dispose__48;
  memset(v18, 0, sizeof(v18));
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  uint64_t v12[2] = ___ZN11HALS_System15ClockDeviceDiedEjjPK10__CFString_block_invoke;
  void v12[3] = &unk_1E6232C10;
  unsigned char v12[4] = &v13;
  v12[5] = this;
  uint64_t v9 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v9, (uint64_t)v12);
  uint64_t v10 = v14[5];
  uint64_t v11 = v14[6];
  while (v10 != v11)
  {
    (*(void (**)(void, const __CFString *))(**(void **)(*(void *)v10 + 96) + 112))(*(void *)(*(void *)v10 + 96), a4);
    v10 += 8;
  }
  _Block_object_dispose(&v13, 8);
  unint64_t v20 = (void **)v18;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v20);
}

void sub_1BACF3704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  *(void *)(v8 - 56) = v7;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v8 - 56));
  _Unwind_Resume(a1);
}

void ___ZN11HALS_System15ClockDeviceDiedEjjPK10__CFString_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8) + 40;
  if (v2 != v1 + 1352) {
    std::vector<HALS_Releaser<HALS_IOContext>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v2, *(HALS_Object **)(v1 + 1352), *(HALS_ObjectMap ***)(v1 + 1360), (uint64_t)(*(void *)(v1 + 1360) - *(void *)(v1 + 1352)) >> 3);
  }
}

void ___ZN11HALS_System23ProcessMuteStateChangedEPK11HALS_DeviceP11HALS_Clientb_block_invoke(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = *(void *)(a1[4] + 8) + 40;
  if (v3 != v2 + 1288) {
    std::vector<HALS_Releaser<HALS_Client>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*>(v3, *(HALS_Object **)(v2 + 1288), *(HALS_ObjectMap ***)(v2 + 1296), (uint64_t)(*(void *)(v2 + 1296) - *(void *)(v2 + 1288)) >> 3);
  }
  uint64_t v4 = *(void *)(a1[5] + 8) + 40;
  if (v4 != v2 + 1352)
  {
    uint64_t v5 = *(HALS_Object **)(v2 + 1352);
    unsigned int v6 = *(HALS_ObjectMap ***)(v2 + 1360);
    std::vector<HALS_Releaser<HALS_IOContext>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v4, v5, v6, ((char *)v6 - (char *)v5) >> 3);
  }
}

void HALS_System::DeviceArrived(os_unfair_lock_s **this, HALS_Device *a2)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  if ((AMCP::Feature_Flags::run_hybrid_hal((AMCP::Feature_Flags *)this, (const BOOL *)a2) & 1) != 0
    && ((*(uint64_t (**)(HALS_Device *))(*(void *)a2 + 832))(a2) & 1) == 0)
  {
    HALS_IOContext_Manager::create_stream_info_for_device((HALS_IOContext_Manager *)buf, this[174], a2);
    uint64_t v4 = this[174];
    unsigned int v5 = *((_DWORD *)a2 + 4);
    unsigned int v6 = *((_DWORD *)a2 + 7);
    uint64_t v7 = (const void *)(*(uint64_t (**)(HALS_Device *))(*(void *)a2 + 208))(a2);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v7);
    char v8 = (*(uint64_t (**)(HALS_Device *))(*(void *)a2 + 224))(a2);
    HALS_IOContext_Manager::device_arrived(v4, v5, v6, (const __CFString **)&cf, (uint64_t)buf, v8 ^ 1);
    if (cf) {
      CFRelease(cf);
    }
    if (*(void *)buf) {
      operator delete(*(void **)buf);
    }
  }
  if (HALS_Device::GetNumberStreamsExcludingReferenceStreams(a2, 1))
  {
    int NumberDevices = HALS_System::GetNumberDevices((uint64_t)this, 0, 0, 0);
    if (NumberDevices)
    {
      unsigned int v9 = 0;
      uint64_t v10 = &v96;
      CFStringRef v68 = (void **)MEMORY[0x1E4F143A8];
      do
      {
        uint64_t v11 = v10;
        *(void *)AudioStreamRangedDescription buf = 0;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&buf[16] = 0x4002000000;
        uint64_t v96 = __Block_byref_object_copy__6832;
        uint64_t v97 = __Block_byref_object_dispose__6833;
        *(void *)&long long v99 = 0;
        long long v98 = 0uLL;
        long long v87 = v68;
        uint64_t v88 = 0x40000000;
        uint64_t v89 = (uint64_t)___ZNK11HALS_System17CopyDeviceByIndexEjNS_14DeviceListKindEbP11HALS_Client_block_invoke;
        CFBooleanRef v90 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E6232AF8;
        CFStringRef v91 = (void (*)(uint64_t))buf;
        uint64_t v92 = (void ***)this;
        CFTypeRef v12 = (HALB_Mutex *)(*(uint64_t (**)(os_unfair_lock_s **))&(*this)[14]._os_unfair_lock_opaque)(this);
        HALB_CommandGate::ExecuteCommand(v12, (uint64_t)&v87);
        uint64_t v13 = *(HALS_DeviceManager ***)(*(void *)&buf[8] + 40);
        int v14 = *(HALS_DeviceManager ***)(*(void *)&buf[8] + 48);
        if (v13 != v14)
        {
          unsigned int v15 = 0;
          while (2)
          {
            unint64_t v79 = 0;
            uint64_t v80 = 0;
            uint64_t v81 = 0;
            HALS_DeviceManager::CopyDeviceList(*v13, (HALS_DeviceManager::BasicDeviceList *)&v79, 0, 0);
            unint64_t v2 = (unint64_t)v79;
            uint64_t v17 = v80;
            while (v2 != v17)
            {
              if ((*(uint64_t (**)(void))(**(void **)v2 + 224))(*(void *)v2))
              {
                if (v15 == v9)
                {
                  int v18 = *(HALS_ObjectMap **)v2;
                  HALS_ObjectMap::RetainObject(*(HALS_ObjectMap **)v2, v16);
LABEL_22:
                  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v79, v16);
                  goto LABEL_23;
                }
                ++v15;
              }
              v2 += 8;
            }
            if (v15 >= v9)
            {
              int v18 = 0;
              goto LABEL_22;
            }
            HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v79, v16);
            if (++v13 != v14) {
              continue;
            }
            break;
          }
        }
        int v18 = 0;
LABEL_23:
        uint64_t v10 = v11;
        _Block_object_dispose(buf, 8);
        HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList((HALS_ObjectMap ***)&v98, v19);
        if (v18 && *((_DWORD *)a2 + 4) != *((_DWORD *)v18 + 4))
        {
          *(void *)AudioStreamRangedDescription buf = 0;
          *(void *)&uint8_t buf[8] = buf;
          *(void *)&buf[16] = 0x5002000000;
          uint64_t v96 = __Block_byref_object_copy__309;
          uint64_t v97 = __Block_byref_object_dispose__310;
          long long v98 = 0u;
          long long v99 = 0u;
          int v100 = 1065353216;
          unint64_t v79 = (HALS_ObjectMap **)MEMORY[0x1E4F143A8];
          uint64_t v80 = 0x40000000;
          uint64_t v81 = (uint64_t)___ZNK11HALS_Device16CopyClientDSPMapEb_block_invoke;
          int v82 = &unk_1E62364A0;
          uint64_t v83 = buf;
          size_t v84 = (void ***)v18;
          LOBYTE(v85) = 1;
          uint64_t v21 = (HALB_Mutex *)(*(uint64_t (**)(HALS_ObjectMap *))(*(void *)v18 + 56))(v18);
          HALB_CommandGate::ExecuteCommand(v21, (uint64_t)&v79);
          uint64_t v67 = v18;
          uint64_t v22 = *(void *)&buf[8];
          *(_OWORD *)__p = 0u;
          long long v77 = 0u;
          float v78 = *(float *)(*(void *)&buf[8] + 72);
          std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)__p, *(void *)(*(void *)&buf[8] + 48));
          for (uint64_t i = *(uint64_t **)(v22 + 56); i; uint64_t i = (uint64_t *)*i)
          {
            unint64_t v24 = *((unsigned int *)i + 4);
            unint64_t v25 = (unint64_t)__p[1];
            if (__p[1])
            {
              uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
              v26.i16[0] = vaddlv_u8(v26);
              if (v26.u32[0] > 1uLL)
              {
                unint64_t v2 = *((unsigned int *)i + 4);
                if (__p[1] <= (void *)v24) {
                  unint64_t v2 = v24 % (unint64_t)__p[1];
                }
              }
              else
              {
                unint64_t v2 = (LODWORD(__p[1]) - 1) & v24;
              }
              unsigned __int8 v27 = (uint64_t **)*((void *)__p[0] + v2);
              if (v27)
              {
                for (uint64_t j = *v27; j; uint64_t j = (uint64_t *)*j)
                {
                  unint64_t v29 = j[1];
                  if (v29 == v24)
                  {
                    if (*((_DWORD *)j + 4) == v24) {
                      goto LABEL_64;
                    }
                  }
                  else
                  {
                    if (v26.u32[0] > 1uLL)
                    {
                      if ((void *)v29 >= __p[1]) {
                        v29 %= (unint64_t)__p[1];
                      }
                    }
                    else
                    {
                      v29 &= (unint64_t)__p[1] - 1;
                    }
                    if (v29 != v2) {
                      break;
                    }
                  }
                }
              }
            }
            unint64_t v30 = operator new(0x30uLL);
            *unint64_t v30 = 0;
            v30[1] = v24;
            *((_DWORD *)v30 + 4) = *((_DWORD *)i + 4);
            std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v30 + 3, i + 3);
            float v31 = (float)(unint64_t)(*((void *)&v77 + 1) + 1);
            if (!v25 || (float)(v78 * (float)v25) < v31)
            {
              BOOL v32 = (v25 & (v25 - 1)) != 0;
              if (v25 < 3) {
                BOOL v32 = 1;
              }
              unint64_t v33 = v32 | (2 * v25);
              unint64_t v34 = vcvtps_u32_f32(v31 / v78);
              if (v33 <= v34) {
                size_t v35 = v34;
              }
              else {
                size_t v35 = v33;
              }
              std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)__p, v35);
              unint64_t v25 = (unint64_t)__p[1];
              if (((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0)
              {
                if (__p[1] <= (void *)v24) {
                  unint64_t v2 = v24 % (unint64_t)__p[1];
                }
                else {
                  unint64_t v2 = v24;
                }
              }
              else
              {
                unint64_t v2 = (LODWORD(__p[1]) - 1) & v24;
              }
            }
            int v36 = __p[0];
            io_registry_entry_t v37 = (void *)*((void *)__p[0] + v2);
            if (v37)
            {
              *unint64_t v30 = *v37;
            }
            else
            {
              *unint64_t v30 = v77;
              *(void *)&long long v77 = v30;
              v36[v2] = &v77;
              if (!*v30) {
                goto LABEL_63;
              }
              unint64_t v38 = *(void *)(*v30 + 8);
              if ((v25 & (v25 - 1)) != 0)
              {
                if (v38 >= v25) {
                  v38 %= v25;
                }
              }
              else
              {
                v38 &= v25 - 1;
              }
              io_registry_entry_t v37 = (char *)__p[0] + 8 * v38;
            }
            *io_registry_entry_t v37 = v30;
LABEL_63:
            ++*((void *)&v77 + 1);
LABEL_64:
            ;
          }
          _Block_object_dispose(buf, 8);
          std::__hash_table<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>>>::__deallocate_node((void **)v99);
          CFNumberRef v39 = (void *)v98;
          *(void *)&long long v98 = 0;
          if (v39) {
            operator delete(v39);
          }
          CFNumberRef v40 = (uint64_t **)v77;
          uint64_t v10 = v11;
          unint64_t v2 = (unint64_t)buf;
          if ((void)v77)
          {
            do
            {
              CFNumberRef v41 = (void **)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)v40 + 4));
              CFTypeID v42 = (HALS_ObjectMap *)v41;
              if (v41)
              {
                unint64_t v79 = 0;
                uint64_t v80 = (uint64_t)&v79;
                uint64_t v81 = 0x2000000000;
                LOBYTE(v82) = 1;
                v75[0] = 0;
                v75[1] = (void **)v75;
                v75[2] = (void **)0x2000000000;
                v75[3] = v41;
                *(void *)AudioStreamRangedDescription buf = 0;
                *(void *)&uint8_t buf[8] = buf;
                *(void *)&buf[16] = 0x4002000000;
                uint64_t v96 = __Block_byref_object_copy__306;
                uint64_t v97 = __Block_byref_object_dispose__307;
                std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100]((uint64_t *)&v98, v40 + 3);
                long long v87 = (void **)MEMORY[0x1E4F143A8];
                uint64_t v88 = 0x40000000;
                uint64_t v89 = (uint64_t)___ZN11HALS_Device26MirrorOtherDeviceClientDSPEbPKS__block_invoke;
                CFBooleanRef v90 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E6236478;
                CFStringRef v91 = (void (*)(uint64_t))&v79;
                uint64_t v92 = v75;
                CFStringRef v93 = buf;
                CFStringRef v94 = a2;
                CFStringRef v43 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)a2 + 56))(a2);
                HALB_CommandGate::ExecuteCommand(v43, (uint64_t)&v87);
                _Block_object_dispose(buf, 8);
                std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)&v98 + 1));
                _Block_object_dispose(v75, 8);
                _Block_object_dispose(&v79, 8);
              }
              else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)AudioStreamRangedDescription buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 5619;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Can't add invalid client DSP to device.", buf, 0x12u);
              }
              HALS_ObjectMap::ReleaseObject(v42, v44);
              CFNumberRef v40 = (uint64_t **)*v40;
            }
            while (v40);
            CFStringRef v45 = (void **)v77;
          }
          else
          {
            CFStringRef v45 = 0;
          }
          std::__hash_table<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>>>::__deallocate_node(v45);
          uint64_t v46 = __p[0];
          __p[0] = 0;
          int v18 = v67;
          if (v46) {
            operator delete(v46);
          }
        }
        HALS_ObjectMap::ReleaseObject(v18, v20);
        ++v9;
      }
      while (v9 != NumberDevices);
    }
  }
  if ((*(unsigned int (**)(HALS_Device *))(*(void *)a2 + 224))(a2)
    && HALS_MetaManager::sInstance
    && *((_DWORD *)a2 + 5) != 1633773415)
  {
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v77 = 0;
    HALS_DeviceManager::CopyDeviceList((HALS_DeviceManager *)HALS_MetaManager::sInstance, (HALS_DeviceManager::BasicDeviceList *)__p, 1, 0);
    CFTypeRef v48 = (unsigned int **)__p[0];
    uint64_t v72 = (unsigned int **)__p[1];
    if (__p[0] != __p[1])
    {
      uint64_t v69 = (HALS_ObjectMap **)MEMORY[0x1E4F143A8];
      do
      {
        uint64_t v49 = *v48;
        *(void *)AudioStreamRangedDescription buf = 0;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&buf[16] = 0x4802000000;
        uint64_t v96 = __Block_byref_object_copy__5289;
        uint64_t v97 = __Block_byref_object_dispose__5290;
        long long v98 = 0u;
        long long v99 = 0u;
        long long v87 = 0;
        uint64_t v88 = (uint64_t)&v87;
        uint64_t v89 = 0x4002000000;
        CFBooleanRef v90 = __Block_byref_object_copy__1;
        CFStringRef v91 = __Block_byref_object_dispose__2;
        CFStringRef v93 = 0;
        CFStringRef v94 = 0;
        uint64_t v92 = 0;
        unint64_t v79 = v69;
        uint64_t v80 = 0x40000000;
        uint64_t v81 = (uint64_t)___ZN15HALS_MetaDevice17RealDeviceArrivedEP11HALS_Device_block_invoke;
        int v82 = &unk_1E6231C48;
        uint64_t v85 = v49;
        unsigned int v86 = a2;
        uint64_t v83 = buf;
        size_t v84 = &v87;
        uint64_t v50 = (HALB_Mutex *)(*(uint64_t (**)(unsigned int *))(*(void *)v49 + 56))(v49);
        HALB_CommandGate::ExecuteCommand(v50, (uint64_t)&v79);
        uint64_t v51 = *(const AudioObjectPropertyAddress **)(*(void *)&buf[8] + 40);
        unsigned __int8 v52 = *(const AudioObjectPropertyAddress **)(*(void *)&buf[8] + 48);
        if (v51 != v52) {
          HALS_Object::PropertiesChanged((HALS_Object *)v49, (HALS_NotificationManager *)v49[4], 0, -1431655765 * ((unint64_t)((char *)v52 - (char *)v51) >> 2), v51);
        }
        uint64_t v53 = *(void *)(v88 + 40);
        uint64_t v54 = *(void *)(v88 + 48);
        if (((v54 - v53) & 0x1FFFFFFFE0) != 0)
        {
          if (v54 == v53) {
LABEL_106:
          }
            std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
          uint64_t v55 = 0;
          unint64_t v56 = 0;
          while (1)
          {
            uint64_t v57 = v53 + v55;
            uint64_t v58 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v53 + v55 + 24));
            CFDataRef v60 = (HALS_ObjectMap *)v58;
            uint64_t v61 = *(void *)(v57 + 8);
            if (*(void *)v57 != v61 && v58 != 0) {
              HALS_Object::PropertiesChanged((HALS_Object *)v49, (HALS_NotificationManager *)*(unsigned int *)(v58 + 16), 0, -1431655765 * ((unint64_t)(v61 - *(void *)v57) >> 2), *(const AudioObjectPropertyAddress **)v57);
            }
            HALS_ObjectMap::ReleaseObject(v60, v59);
            ++v56;
            uint64_t v53 = *(void *)(v88 + 40);
            uint64_t v63 = *(void *)(v88 + 48) - v53;
            if (v56 >= ((unint64_t)v63 >> 5)) {
              break;
            }
            v55 += 32;
            if (v56 >= v63 >> 5) {
              goto LABEL_106;
            }
          }
        }
        _Block_object_dispose(&v87, 8);
        v75[0] = (void **)&v92;
        std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](v75);
        _Block_object_dispose(buf, 8);
        if ((void)v98)
        {
          *((void *)&v98 + 1) = v98;
          operator delete((void *)v98);
        }
        ++v48;
      }
      while (v48 != v72);
    }
    HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)__p, v47);
  }
  *(void *)AudioStreamRangedDescription buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&buf[16] = 0x4002000000;
  uint64_t v96 = __Block_byref_object_copy__47;
  uint64_t v97 = __Block_byref_object_dispose__48;
  long long v98 = 0uLL;
  *(void *)&long long v99 = 0;
  v73[0] = MEMORY[0x1E4F143A8];
  v73[1] = 0x40000000;
  v73[2] = ___ZN11HALS_System13DeviceArrivedEP11HALS_Device_block_invoke;
  v73[3] = &unk_1E6232C60;
  v73[4] = buf;
  v73[5] = this;
  mach_port_t v64 = (HALB_Mutex *)(*(uint64_t (**)(os_unfair_lock_s **))&(*this)[14]._os_unfair_lock_opaque)(this);
  HALB_CommandGate::ExecuteCommand(v64, (uint64_t)v73);
  uint64_t v65 = *(void *)(*(void *)&buf[8] + 40);
  uint64_t v66 = *(void *)(*(void *)&buf[8] + 48);
  while (v65 != v66)
  {
    (*(void (**)(void, HALS_Device *))(**(void **)(*(void *)v65 + 96) + 120))(*(void *)(*(void *)v65 + 96), a2);
    v65 += 8;
  }
  _Block_object_dispose(buf, 8);
  long long v87 = (void **)&v98;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v87);
}

void sub_1BACF4474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void **a47)
{
  _Block_object_dispose((const void *)(v47 - 224), 8);
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&a47);
  _Unwind_Resume(a1);
}

void sub_1BACF44C8(_Unwind_Exception *a1)
{
}

void sub_1BACF44D8()
{
}

void sub_1BACF44E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29,uint64_t a30,uint64_t a31,uint64_t a32,HALS_ObjectMap **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a47, 8);
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](&a29);
  _Block_object_dispose((const void *)(v47 - 224), 8);
  uint64_t v49 = *(void **)(v47 - 184);
  if (v49)
  {
    *(void *)(v47 - 176) = v49;
    operator delete(v49);
  }
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&a33, v48);
  JUMPOUT(0x1BACF4634);
}

void sub_1BACF4568()
{
}

void sub_1BACF457C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, HALS_ObjectMap *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  std::__hash_table<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>>>::~__hash_table((uint64_t)&a33);
  _Block_object_dispose((const void *)(v34 - 224), 8);
  std::__hash_table<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>>>::~__hash_table(v33);
  HALS_ObjectMap::ReleaseObject(a10, v36);
  _Unwind_Resume(a1);
}

void sub_1BACF4600(uint64_t a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BACF4634);
}

void sub_1BACF4614(uint64_t a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,HALS_ObjectMap **a39)
{
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&a39, a2);
  _Block_object_dispose((const void *)(v40 - 224), 8);
  HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v39, v41);
  JUMPOUT(0x1BACF4634);
}

void ___ZN11HALS_System13DeviceArrivedEP11HALS_Device_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8) + 40;
  if (v2 != v1 + 1352) {
    std::vector<HALS_Releaser<HALS_IOContext>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v2, *(HALS_Object **)(v1 + 1352), *(HALS_ObjectMap ***)(v1 + 1360), (uint64_t)(*(void *)(v1 + 1360) - *(void *)(v1 + 1352)) >> 3);
  }
}

void HALS_System::DeviceDied(HALS_System *this, HALS_Device *a2)
{
  uint64_t v3 = this;
  if (AMCP::Feature_Flags::run_hybrid_hal(this, (const BOOL *)a2))
  {
    uint64_t v4 = *((void *)v3 + 174);
    unsigned int v5 = *((_DWORD *)a2 + 4);
    unsigned int v6 = *((_DWORD *)a2 + 7);
    uint64_t v7 = (const void *)(*(uint64_t (**)(HALS_Device *))(*(void *)a2 + 208))(a2);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v7);
    HALS_IOContext_Manager::device_died(v4, v5, v6, &cf);
    if (cf) {
      CFRelease(cf);
    }
  }
  int v8 = (*(uint64_t (**)(HALS_Device *))(*(void *)a2 + 224))(a2);
  unsigned int v9 = (void *)&GCC_except_table18060;
  uint64_t v10 = (void *)&GCC_except_table18060;
  if (v8 && HALS_MetaManager::sInstance && *((_DWORD *)a2 + 5) != 1633773415)
  {
    CFTypeID v42 = v3;
    uint64_t v47 = 0;
    CFTypeRef v48 = 0;
    uint64_t v49 = 0;
    HALS_DeviceManager::CopyDeviceList((HALS_DeviceManager *)HALS_MetaManager::sInstance, (HALS_DeviceManager::BasicDeviceList *)&v47, 1, 0);
    CFTypeRef v12 = (unsigned int **)v47;
    uint64_t v44 = (unsigned int **)v48;
    if (v47 != v48)
    {
      CFStringRef v43 = (void **)MEMORY[0x1E4F143A8];
      do
      {
        uint64_t v13 = *v12;
        uint64_t v66 = 0;
        uint64_t v67 = &v66;
        uint64_t v68 = 0x4802000000;
        uint64_t v69 = __Block_byref_object_copy__5289;
        uint64_t v70 = __Block_byref_object_dispose__5290;
        long long v71 = 0u;
        long long v72 = 0u;
        uint64_t v58 = 0;
        unsigned int v59 = &v58;
        uint64_t v60 = 0x4002000000;
        uint64_t v61 = __Block_byref_object_copy__1;
        uint64_t v62 = __Block_byref_object_dispose__2;
        uint64_t v64 = 0;
        uint64_t v65 = 0;
        uint64_t v63 = 0;
        uint64_t v50 = v43;
        uint64_t v51 = 0x40000000;
        unsigned __int8 v52 = ___ZN15HALS_MetaDevice14RealDeviceDiedEP11HALS_Device_block_invoke;
        uint64_t v53 = &unk_1E6231C70;
        unint64_t v56 = v13;
        uint64_t v57 = a2;
        uint64_t v54 = &v66;
        uint64_t v55 = &v58;
        int v14 = (HALB_Mutex *)(*(uint64_t (**)(unsigned int *))(*(void *)v13 + 56))(v13);
        HALB_CommandGate::ExecuteCommand(v14, (uint64_t)&v50);
        unsigned int v15 = (const AudioObjectPropertyAddress *)v67[5];
        uint64_t v16 = (const AudioObjectPropertyAddress *)v67[6];
        if (v15 != v16) {
          HALS_Object::PropertiesChanged((HALS_Object *)v13, (HALS_NotificationManager *)v13[4], 0, -1431655765 * ((unint64_t)((char *)v16 - (char *)v15) >> 2), v15);
        }
        uint64_t v17 = v59[5];
        int v18 = v59[6];
        if ((((char *)v18 - (char *)v17) & 0x1FFFFFFFE0) != 0)
        {
          if (v18 == v17) {
LABEL_38:
          }
            std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
          uint64_t v19 = 0;
          unint64_t v20 = 0;
          while (1)
          {
            uint64_t v21 = &v17[v19];
            uint64_t v22 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)LODWORD(v17[v19 + 3]));
            unint64_t v24 = (HALS_ObjectMap *)v22;
            unint64_t v25 = v21[1];
            if (*v21 != v25 && v22 != 0) {
              HALS_Object::PropertiesChanged((HALS_Object *)v13, (HALS_NotificationManager *)*(unsigned int *)(v22 + 16), 0, -1431655765 * ((unint64_t)(v25 - (unsigned char *)*v21) >> 2), (const AudioObjectPropertyAddress *)*v21);
            }
            HALS_ObjectMap::ReleaseObject(v24, v23);
            ++v20;
            uint64_t v17 = v59[5];
            uint64_t v27 = (char *)v59[6] - (char *)v17;
            if (v20 >= ((unint64_t)v27 >> 5)) {
              break;
            }
            v19 += 4;
            if (v20 >= v27 >> 5) {
              goto LABEL_38;
            }
          }
        }
        _Block_object_dispose(&v58, 8);
        uint64_t v73 = (void **)&v63;
        std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](&v73);
        _Block_object_dispose(&v66, 8);
        if ((void)v71)
        {
          *((void *)&v71 + 1) = v71;
          operator delete((void *)v71);
        }
        ++v12;
      }
      while (v12 != v44);
    }
    HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v47, v11);
    uint64_t v3 = v42;
    uint64_t v10 = &GCC_except_table18060;
    unsigned int v9 = &GCC_except_table18060;
  }
  uint64_t v66 = 0;
  uint64_t v67 = &v66;
  uint64_t v68 = v9[272];
  uint64_t v69 = __Block_byref_object_copy__49_6834;
  uint64_t v70 = __Block_byref_object_dispose__50_6835;
  long long v71 = 0uLL;
  *(void *)&long long v72 = 0;
  uint64_t v58 = 0;
  unsigned int v59 = &v58;
  uint64_t v60 = v68;
  uint64_t v61 = __Block_byref_object_copy__47;
  uint64_t v62 = __Block_byref_object_dispose__48;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  v45[0] = MEMORY[0x1E4F143A8];
  uint64_t v28 = v10[241];
  v45[1] = v28;
  v45[2] = ___ZN11HALS_System10DeviceDiedEP11HALS_Device_block_invoke;
  v45[3] = &unk_1E6232C88;
  v45[5] = &v58;
  v45[6] = v3;
  v45[4] = &v66;
  unint64_t v29 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)v3 + 56))(v3);
  HALB_CommandGate::ExecuteCommand(v29, (uint64_t)v45);
  float v31 = (uint64_t **)v67[5];
  BOOL v32 = (uint64_t **)v67[6];
  if (v31 != v32)
  {
    uint64_t v33 = (void **)MEMORY[0x1E4F143A8];
    do
    {
      uint64_t v34 = *v31;
      int v35 = *((_DWORD *)a2 + 4);
      uint64_t v50 = v33;
      uint64_t v51 = v28;
      unsigned __int8 v52 = ___ZN11HALS_Client28StopListeningToAllPropertiesEj_block_invoke;
      uint64_t v53 = &__block_descriptor_tmp_12_2440;
      uint64_t v54 = v34;
      LODWORD(v55) = v35;
      int v36 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t *))(*v34 + 56))(v34);
      HALB_CommandGate::ExecuteCommand(v36, (uint64_t)&v50);
      ++v31;
    }
    while (v31 != v32);
  }
  io_registry_entry_t v37 = v59[5];
  unint64_t v38 = v59[6];
  while (v37 != v38)
  {
    platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(InternalIOContextID);
    if ((*(unsigned int (**)(uint64_t *))(*platform_behaviors + 16))(platform_behaviors) != 2)
    {
      uint64_t v40 = (void **)*v37;
LABEL_35:
      uint64_t v41 = (*(uint64_t (**)(HALS_Device *))(*(void *)a2 + 200))(a2);
      unsigned int InternalIOContextID = (HALS_PlatformBehaviors *)(*(uint64_t (**)(void *, uint64_t))(*v40[12] + 128))(v40[12], v41);
      goto LABEL_36;
    }
    unsigned int InternalIOContextID = (HALS_PlatformBehaviors *)HALS_Device::GetInternalIOContextID(a2);
    uint64_t v40 = (void **)*v37;
    if (InternalIOContextID != *((_DWORD *)*v37 + 4)) {
      goto LABEL_35;
    }
LABEL_36:
    ++v37;
  }
  _Block_object_dispose(&v58, 8);
  uint64_t v50 = (void **)&v63;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v50);
  _Block_object_dispose(&v66, 8);
  uint64_t v58 = (void **)&v71;
  std::vector<HALS_Releaser<HALS_Client>>::__destroy_vector::operator()[abi:ne180100](&v58);
}

void sub_1BACF4C98(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,HALS_ObjectMap **a27)
{
}

void ___ZN11HALS_System10DeviceDiedEP11HALS_Device_block_invoke(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = *(void *)(a1[4] + 8) + 40;
  if (v3 != v2 + 1288) {
    std::vector<HALS_Releaser<HALS_Client>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_Client>*,HALS_Releaser<HALS_Client>*>(v3, *(HALS_Object **)(v2 + 1288), *(HALS_ObjectMap ***)(v2 + 1296), (uint64_t)(*(void *)(v2 + 1296) - *(void *)(v2 + 1288)) >> 3);
  }
  uint64_t v4 = *(void *)(a1[5] + 8) + 40;
  if (v4 != v2 + 1352)
  {
    unsigned int v5 = *(HALS_Object **)(v2 + 1352);
    unsigned int v6 = *(HALS_ObjectMap ***)(v2 + 1360);
    std::vector<HALS_Releaser<HALS_IOContext>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v4, v5, v6, ((char *)v6 - (char *)v5) >> 3);
  }
}

uint64_t HALS_System::GetCurrentDeviceArrivalTime(HALS_System *this)
{
  v4[0] = 0;
  v4[1] = 0;
  HALS_System::GetInstance(&v5, 0, v4);
  uint64_t v1 = *(void *)(*(void *)(v5 + 1408) + 48);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (HALS_System::sIsInitialized == 1)
  {
    mach_absolute_time();
    v3[0] = 0;
    v3[1] = 0;
    HALS_System::GetInstance(&v5, 0, v3);
    uint64_t v1 = *(void *)(*(void *)(v5 + 1408) + 48);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  return v1;
}

void HALS_System::CheckForDefaultDeviceChanges(HALS_PlatformBehaviors *a1, uint64_t a2)
{
  platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(a1);
  if ((*(unsigned int (**)(uint64_t *))(*platform_behaviors + 56))(platform_behaviors) == 1
    && HALS_System::sIsInitialized != 0)
  {
    uint64_t v6 = *((void *)a1 + 158);
    uint64_t v7 = (std::__shared_weak_count *)*((void *)a1 + 159);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v15, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    uint64_t v8 = *((void *)a1 + 30);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 1174405120;
    uint64_t v10[2] = ___ZN11HALS_System28CheckForDefaultDeviceChangesERKNSt3__16vectorIjNS0_9allocatorIjEEEE_block_invoke;
    v10[3] = &__block_descriptor_tmp_105_7126;
    v10[4] = v6;
    uint64_t v11 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    __p = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    unsigned int v9 = v15;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v15, v16, (v16 - (uint64_t)v15) >> 2);
    AMCP::Utility::Dispatch_Queue::after(v8, (uint64_t)v10);
    if (__p)
    {
      uint64_t v13 = __p;
      operator delete(__p);
    }
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
    if (v9) {
      operator delete(v9);
    }
    if (v7) {
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1BACF5010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    if (!v15)
    {
LABEL_3:
      if (!v14) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v15)
  {
    goto LABEL_3;
  }
  operator delete(v15);
  if (!v14) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  std::__shared_weak_count::__release_weak(v14);
  goto LABEL_5;
}

void sub_1BACF504C()
{
  if (!v0) {
    JUMPOUT(0x1BACF502CLL);
  }
  JUMPOUT(0x1BACF5024);
}

void ___ZN11HALS_System28CheckForDefaultDeviceChangesERKNSt3__16vectorIjNS0_9allocatorIjEEEE_block_invoke(void *a1)
{
  buf[41] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v1);
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = a1[4];
      if (v4)
      {
        v42[0] = 0;
        v42[1] = 0;
        HALS_System::GetInstance(buf, 0, v42);
        uint64_t v5 = buf[0];
        if (buf[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf[1]);
        }
        if (v5)
        {
          v41[0] = 0;
          v41[1] = 0;
          HALS_System::GetInstance(buf, 0, v41);
          uint64_t v6 = (std::mutex *)(buf[0] + 48);
          std::mutex::lock((std::mutex *)(buf[0] + 48));
          if (buf[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf[1]);
          }
          if (a1[6] != a1[7])
          {
            int v35 = v6;
            int v36 = v3;
            if (*(unsigned char *)(v4 + 98))
            {
              if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)
                || (LODWORD(buf[0]) = 136315394,
                    *(void *)((char *)buf + 4) = "HALS_DefaultDeviceManager.cpp",
                    WORD2(buf[1]) = 1024,
                    *(_DWORD *)((char *)&buf[1] + 6) = 1231,
                    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ===================================", (uint8_t *)buf, 0x12u), *(unsigned char *)(v4 + 98)))
              {
                if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf[0]) = 136315394;
                  *(void *)((char *)buf + 4) = "HALS_DefaultDeviceManager.cpp";
                  WORD2(buf[1]) = 1024;
                  *(_DWORD *)((char *)&buf[1] + 6) = 1232;
                  _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::CheckForChanges(newdevices):     --->>>", (uint8_t *)buf, 0x12u);
                }
              }
            }
            uint64_t v7 = 0;
            CFNumberRef v39 = (uint64_t *)(v4 + 400);
            unint64_t v38 = (uint64_t *)(v4 + 296);
            io_registry_entry_t v37 = (uint64_t *)(v4 + 192);
            while (1)
            {
              int v8 = dword_1BAFF96F0[v7];
              int v50 = 0;
              uint64_t v51 = &unk_1F1489A20;
              CFTypeRef cf = 0;
              memset(v53, 0, 284);
              *(void *)&v53[71] = 0x600000005;
              LOWORD(v53[73]) = 0;
              BYTE2(v53[73]) = 0;
              LOWORD(v53[74]) = 0;
              unsigned int v9 = (unsigned int *)a1[6];
              uint64_t v10 = (unsigned int *)a1[7];
              while (v9 != v10)
              {
                DeviceInfo::DeviceInfo((DeviceInfo *)buf, (HALS_ObjectMap *)*v9);
                if (v8 > 1934587251)
                {
                  if (v8 != 1936224868)
                  {
                    int v11 = 1934587252;
                    goto LABEL_23;
                  }
LABEL_24:
                  if (!LODWORD(buf[39])) {
                    goto LABEL_29;
                  }
                  goto LABEL_27;
                }
                if (v8 != 1682533920)
                {
                  int v11 = 1682929012;
LABEL_23:
                  if (v8 != v11) {
                    goto LABEL_27;
                  }
                  goto LABEL_24;
                }
                if (!HIDWORD(buf[38])) {
                  goto LABEL_29;
                }
LABEL_27:
                if (LODWORD(buf[37]) == 1668506482)
                {
LABEL_29:
                  int v50 = buf[0];
                  CFTypeRef v12 = cf;
                  CFTypeRef cf = (CFTypeRef)buf[2];
                  buf[2] = v12;
                  memcpy(v53, &buf[3], 0x12AuLL);
                  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&buf[1]);
                  break;
                }
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&buf[1]);
                ++v9;
              }
              if (!v50 || BYTE1(v53[74])) {
                goto LABEL_104;
              }
              for (uint64_t i = 0; i != 72; i += 24)
              {
                uint64_t v14 = (char *)&v46 + i;
                *(void *)uint64_t v14 = &unk_1F1489A20;
                *((void *)v14 + 1) = 0;
                *((_DWORD *)v14 + 4) = 0;
              }
              CFStringRef v43 = &unk_1F1489A20;
              CFTypeRef v44 = 0;
              int v45 = 0;
              buf[0] = v4;
              LODWORD(buf[1]) = HALB_Mutex::Lock((HALB_Mutex *)v4);
              switch(v8)
              {
                case 1682533920:
                  for (uint64_t j = 0; j != 72; j += 24)
                    *(_DWORD *)(OS::CF::UntypedObject::operator=((uint64_t)&v46 + j, *(CFTypeRef *)(v4 + j + 120)) + 16) = *(_DWORD *)(v4 + j + 128);
                  uint64_t v17 = (int *)(v4 + 200);
                  uint64_t v16 = (CFTypeRef *)(v4 + 192);
                  goto LABEL_46;
                case 1682929012:
                  for (uint64_t k = 0; k != 72; k += 24)
                    *(_DWORD *)(OS::CF::UntypedObject::operator=((uint64_t)&v46 + k, *(CFTypeRef *)(v4 + k + 224)) + 16) = *(_DWORD *)(v4 + k + 232);
                  uint64_t v17 = (int *)(v4 + 304);
                  uint64_t v16 = (CFTypeRef *)(v4 + 296);
LABEL_46:
                  OS::CF::UntypedObject::operator=((uint64_t)&v43, *v16);
                  int v45 = *v17;
                  break;
                case 1934587252:
                  for (uint64_t m = 0; m != 72; m += 24)
                    *(_DWORD *)(OS::CF::UntypedObject::operator=((uint64_t)&v46 + m, *(CFTypeRef *)(v4 + m + 328)) + 16) = *(_DWORD *)(v4 + m + 336);
                  uint64_t v17 = (int *)(v4 + 408);
                  uint64_t v16 = (CFTypeRef *)(v4 + 400);
                  goto LABEL_46;
              }
              HALB_Mutex::Locker::~Locker((HALB_Mutex **)buf);
              Preferredint DefaultDevice = (HALS_ObjectMap *)HALS_DefaultDeviceManager::FindPreferredDefaultDevice(v4, (uint64_t)&v43, (uint64_t)&v46, v8);
              int v21 = (int)PreferredDefaultDevice;
              BOOL v22 = v44 != 0;
              if (!v44 && PreferredDefaultDevice)
              {
                DeviceInfo::DeviceInfo((DeviceInfo *)buf, PreferredDefaultDevice);
                if (v8 == 1934587252 || v8 == 1682929012)
                {
                  BOOL v23 = SLODWORD(buf[39]) < 4;
                  goto LABEL_54;
                }
                if (v8 == 1682533920)
                {
                  BOOL v23 = SHIDWORD(buf[38]) < 3;
LABEL_54:
                  BOOL v22 = v23;
                }
                else
                {
                  BOOL v22 = 0;
                }
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&buf[1]);
              }
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v43);
              for (uint64_t n = 48; n != -24; n -= 24)
                OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)((char *)&v46 + n));
              if (v21)
              {
                if (v50 != v21)
                {
                  int DefaultDevice = HALS_DefaultDeviceManager::GetDefaultDevice((HALS_DefaultDeviceManager *)v4, v8);
                  if (v22 || v53[68] == 1651274862 && DefaultDevice == v50)
                  {
                    if (cf)
                    {
                      if (v8 > 1934587251)
                      {
                        if (v8 == 1934587252)
                        {
                          if (!BYTE2(v53[73])) {
                            goto LABEL_104;
                          }
                          goto LABEL_79;
                        }
                        if (v8 == 1936224868 && HIBYTE(v53[73])) {
                          goto LABEL_79;
                        }
                      }
                      else
                      {
                        if (v8 == 1682533920)
                        {
                          if (!LOBYTE(v53[73])) {
                            goto LABEL_104;
                          }
                        }
                        else if (v8 != 1682929012 || !BYTE1(v53[73]))
                        {
                          goto LABEL_104;
                        }
LABEL_79:
                        if (!v50) {
                          goto LABEL_104;
                        }
                        v49[0] = HIBYTE(v8);
                        v49[1] = BYTE2(v8);
                        v49[2] = BYTE1(v8);
                        v49[3] = v8;
                        v49[4] = 0;
                        uint8x8_t v26 = &v53[69];
                        if (v8 != 1682533920) {
                          uint8x8_t v26 = &v53[70];
                        }
                        int v27 = *v26;
                        v48[0] = HIBYTE(v27);
                        v48[1] = BYTE2(v27);
                        v48[2] = BYTE1(v27);
                        v48[3] = v27;
                        v48[4] = 0;
                        if (*(unsigned char *)(v4 + 98))
                        {
                          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)
                            || (LODWORD(buf[0]) = 136315394,
                                *(void *)((char *)buf + 4) = "HALS_DefaultDeviceManager.cpp",
                                WORD2(buf[1]) = 1024,
                                *(_DWORD *)((char *)&buf[1] + 6) = 1480,
                                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ===================================", (uint8_t *)buf, 0x12u), *(unsigned char *)(v4 + 98)))
                          {
                            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
                            {
                              LODWORD(buf[0]) = 136315650;
                              *(void *)((char *)buf + 4) = "HALS_DefaultDeviceManager.cpp";
                              WORD2(buf[1]) = 1024;
                              *(_DWORD *)((char *)&buf[1] + 6) = 1481;
                              WORD1(buf[2]) = 2082;
                              *(void *)((char *)&buf[2] + 4) = v49;
                              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::SetTransientDefaultDeviceQuietly: '%{public}s' --->>>", (uint8_t *)buf, 0x1Cu);
                            }
                          }
                        }
                        if (*(unsigned char *)(v4 + 97) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
                        {
                          LODWORD(buf[0]) = 136316418;
                          *(void *)((char *)buf + 4) = "HALS_DefaultDeviceManager.cpp";
                          WORD2(buf[1]) = 1024;
                          *(_DWORD *)((char *)&buf[1] + 6) = 1482;
                          WORD1(buf[2]) = 2082;
                          *(void *)((char *)&buf[2] + 4) = v49;
                          WORD2(buf[3]) = 1024;
                          *(_DWORD *)((char *)&buf[3] + 6) = v50;
                          WORD1(buf[4]) = 2082;
                          *(void *)((char *)&buf[4] + 4) = v53;
                          WORD2(buf[5]) = 2082;
                          *(void *)((char *)&buf[5] + 6) = v48;
                          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::SetTransientDefaultDeviceQuietly: '%{public}s' | %d: '%{public}s'/'%{public}s'", (uint8_t *)buf, 0x36u);
                        }
                        uint64_t v46 = (HALB_Mutex *)v4;
                        int v47 = HALB_Mutex::Lock((HALB_Mutex *)v4);
                        if (v8 > 1934587251)
                        {
                          if (v8 == 1934587252)
                          {
                            OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)&v43, cf);
                            CFStringRef v43 = &unk_1F1489A20;
                            int v28 = v53[70];
                            OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)buf, v44);
                            buf[0] = &unk_1F1489A20;
                            LODWORD(buf[2]) = v28;
                            uint64_t v34 = *v39;
                            *CFNumberRef v39 = buf[1];
                            buf[1] = v34;
                            unint64_t v30 = (_DWORD *)(v4 + 408);
                            goto LABEL_97;
                          }
                          OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)&v43, cf);
                          CFStringRef v43 = &unk_1F1489A20;
                          int v31 = v53[70];
                          OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)buf, v44);
                          LODWORD(buf[2]) = v31;
                          uint64_t v32 = *(void *)(v4 + 432);
                          *(void *)(v4 + 432) = buf[1];
                          buf[0] = &unk_1F1489A20;
                          buf[1] = v32;
                          *(_DWORD *)(v4 + 440) = v31;
                        }
                        else
                        {
                          OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)&v43, cf);
                          CFStringRef v43 = &unk_1F1489A20;
                          if (v8 == 1682533920)
                          {
                            int v28 = v53[69];
                            OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)buf, v44);
                            buf[0] = &unk_1F1489A20;
                            LODWORD(buf[2]) = v28;
                            uint64_t v33 = *v37;
                            *io_registry_entry_t v37 = buf[1];
                            buf[1] = v33;
                            unint64_t v30 = (_DWORD *)(v4 + 200);
                          }
                          else
                          {
                            int v28 = v53[70];
                            OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)buf, v44);
                            buf[0] = &unk_1F1489A20;
                            LODWORD(buf[2]) = v28;
                            uint64_t v29 = *v38;
                            uint64_t *v38 = buf[1];
                            buf[1] = v29;
                            unint64_t v30 = (_DWORD *)(v4 + 304);
                          }
LABEL_97:
                          *unint64_t v30 = v28;
                        }
                        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
                        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v43);
                        if (*(unsigned char *)(v4 + 98))
                        {
                          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)
                            || (LODWORD(buf[0]) = 136315650,
                                *(void *)((char *)buf + 4) = "HALS_DefaultDeviceManager.cpp",
                                WORD2(buf[1]) = 1024,
                                *(_DWORD *)((char *)&buf[1] + 6) = 1504,
                                WORD1(buf[2]) = 2082,
                                *(void *)((char *)&buf[2] + 4) = v49,
                                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::SetTransientDefaultDeviceQuietly: '%{public}s' <<<---", (uint8_t *)buf, 0x1Cu), *(unsigned char *)(v4 + 98)))
                          {
                            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
                            {
                              LODWORD(buf[0]) = 136315394;
                              *(void *)((char *)buf + 4) = "HALS_DefaultDeviceManager.cpp";
                              WORD2(buf[1]) = 1024;
                              *(_DWORD *)((char *)&buf[1] + 6) = 1505;
                              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ===================================", (uint8_t *)buf, 0x12u);
                            }
                          }
                        }
                        HALB_Mutex::Locker::~Locker(&v46);
                      }
                    }
                  }
                }
              }
LABEL_104:
              OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v51);
              if (++v7 == 4)
              {
                uint64_t v6 = v35;
                uint64_t v3 = v36;
                if (*(unsigned char *)(v4 + 98))
                {
                  if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)
                    || (LODWORD(buf[0]) = 136315394,
                        *(void *)((char *)buf + 4) = "HALS_DefaultDeviceManager.cpp",
                        WORD2(buf[1]) = 1024,
                        *(_DWORD *)((char *)&buf[1] + 6) = 1275,
                        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::CheckForChanges(newdevices):     <<<---", (uint8_t *)buf, 0x12u), *(unsigned char *)(v4 + 98)))
                  {
                    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
                    {
                      LODWORD(buf[0]) = 136315394;
                      *(void *)((char *)buf + 4) = "HALS_DefaultDeviceManager.cpp";
                      WORD2(buf[1]) = 1024;
                      *(_DWORD *)((char *)&buf[1] + 6) = 1276;
                      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ===================================", (uint8_t *)buf, 0x12u);
                    }
                  }
                }
                break;
              }
            }
          }
          HALS_DefaultDeviceManager::CheckForChanges((HALS_DefaultDeviceManager *)v4);
          std::mutex::unlock(v6);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
}

void sub_1BACF5CCC(_Unwind_Exception *a1, int a2)
{
  uint64_t v5 = v3;
  if (a2)
  {
    std::mutex::unlock(v2);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BACF5C90);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c50_ZTSNSt3__18weak_ptrI25HALS_DefaultDeviceManagerEE48c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(void *a1)
{
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *__copy_helper_block_e8_32c50_ZTSNSt3__18weak_ptrI25HALS_DefaultDeviceManagerEE48c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1 + 6, *(const void **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 2);
}

void sub_1BACF5E30(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK11HALS_System20CopyClientByBundleIDERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = (unsigned __int8 *)a1[6];
  uint64_t v4 = *(HALS_ObjectMap ***)(v2 + 1288);
  while (v4 != *(HALS_ObjectMap ***)(v2 + 1296))
  {
    uint64_t v5 = *v4;
    uint64_t v6 = (const void *)*((void *)*v4 + 30);
    if (v6)
    {
      CFRetain(v6);
      uint64_t v7 = (const void *)*((void *)v5 + 30);
    }
    else
    {
      uint64_t v7 = 0;
    }
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v7);
    if (!cf)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
    uint64_t v9 = v3[23];
    if ((v9 & 0x80u) == 0) {
      uint64_t v10 = (void *)v3[23];
    }
    else {
      uint64_t v10 = (void *)*((void *)v3 + 1);
    }
    unint64_t v11 = v24;
    int v12 = (char)v24;
    if ((v24 & 0x80u) != 0) {
      unint64_t v11 = (unint64_t)__p[1];
    }
    if (v10 == (void *)v11)
    {
      if ((v24 & 0x80u) == 0) {
        int v8 = __p;
      }
      else {
        int v8 = (void **)__p[0];
      }
      if ((v9 & 0x80) != 0)
      {
        BOOL v21 = memcmp(*(const void **)v3, v8, *((void *)v3 + 1)) == 0;
        if ((v12 & 0x80000000) == 0) {
          goto LABEL_25;
        }
      }
      else if (v3[23])
      {
        uint64_t v13 = v9 - 1;
        uint64_t v14 = v3;
        do
        {
          int v16 = *v14++;
          int v15 = v16;
          int v18 = *(unsigned __int8 *)v8;
          int v8 = (void **)((char *)v8 + 1);
          int v17 = v18;
          BOOL v20 = v13-- != 0;
          BOOL v21 = v15 == v17;
        }
        while (v15 == v17 && v20);
        if (((char)v24 & 0x80000000) == 0)
        {
LABEL_25:
          if (!v21) {
            goto LABEL_29;
          }
          goto LABEL_26;
        }
      }
      else
      {
        BOOL v21 = 1;
        if (((char)v24 & 0x80000000) == 0) {
          goto LABEL_25;
        }
      }
    }
    else
    {
      BOOL v21 = 0;
      if (((char)v24 & 0x80000000) == 0) {
        goto LABEL_25;
      }
    }
    operator delete(__p[0]);
    if (!v21)
    {
LABEL_29:
      uint64_t v5 = 0;
      ++v4;
      goto LABEL_30;
    }
LABEL_26:
    HALS_ObjectMap::RetainObject(v5, (HALS_Object *)v8);
LABEL_30:
    if (cf) {
      CFRelease(cf);
    }
    if (v5) {
      goto LABEL_39;
    }
  }
  uint64_t v5 = 0;
LABEL_39:
  *(void *)(*(void *)(a1[4] + 8) + 24) = v5;
}

void sub_1BACF5FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_System::CopyClientByObjectID(HALS_System *this, int a2)
{
  uint64_t v7 = 0;
  int v8 = &v7;
  uint64_t v9 = 0x2000000000;
  uint64_t v10 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK11HALS_System20CopyClientByObjectIDEj_block_invoke;
  v5[3] = &unk_1E6232D88;
  v5[4] = &v7;
  v5[5] = this;
  int v6 = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  uint64_t v3 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1BACF60F8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_System20CopyClientByObjectIDEj_block_invoke(uint64_t a1, HALS_Object *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(HALS_ObjectMap ***)(v3 + 1288);
  uint64_t v5 = *(HALS_ObjectMap ***)(v3 + 1296);
  if (v4 == v5)
  {
LABEL_4:
    int v6 = 0;
  }
  else
  {
    while (1)
    {
      int v6 = *v4;
      if (*((_DWORD *)*v4 + 4) == *(_DWORD *)(a1 + 48)) {
        break;
      }
      if (++v4 == v5) {
        goto LABEL_4;
      }
    }
  }
  HALS_ObjectMap::RetainObject(v6, a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v6;
}

void sub_1BACF617C(void *a1)
{
}

void HALS_System::ProcessPropertyChanged(HALS_System *this, int a2, int a3, int a4, int a5)
{
  if (a5)
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 0x40000000;
    uint64_t v12[2] = ___ZN11HALS_System22ProcessPropertyChangedEjjjjb_block_invoke;
    void v12[3] = &__block_descriptor_tmp_119;
    unsigned char v12[4] = this;
    int v13 = a2;
    int v14 = a3;
    int v15 = a4;
    int v16 = 0;
    uint64_t v5 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v12);
  }
  else
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 0x40000000;
    CFDictionaryRef v7[2] = ___ZN11HALS_System22ProcessPropertyChangedEjjjjb_block_invoke_2;
    v7[3] = &__block_descriptor_tmp_121_7137;
    v7[4] = this;
    int v8 = a2;
    int v9 = a3;
    int v10 = a4;
    int v11 = 0;
    unsigned __int8 v6 = atomic_load((unsigned __int8 *)this + 928);
    if (v6) {
      atomic_store(1u, (unsigned __int8 *)this + 929);
    }
    dispatch_async(*((dispatch_queue_t *)this + 112), v7);
  }
}

void ___ZN11HALS_System22ProcessPropertyChangedEjjjjb_block_invoke(uint64_t a1)
{
}

void ___ZN11HALS_System22ProcessPropertyChangedEjjjjb_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  uint64_t v3[2] = ___ZN11HALS_System22ProcessPropertyChangedEjjjjb_block_invoke_3;
  v3[3] = &__block_descriptor_tmp_120_7138;
  v3[4] = v1;
  long long v4 = *(_OWORD *)(a1 + 40);
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 56))(v1);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

void ___ZN11HALS_System22ProcessPropertyChangedEjjjjb_block_invoke_3(uint64_t a1)
{
}

void HALS_System::_ProcessPropertyChanged(HALS_ObjectMap **this, HALS_Object *a2, int a3, int a4, int a5, int a6)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (this != (HALS_ObjectMap **)a2)
  {
    int v10 = this;
    int v11 = (HALS_System *)this;
    while (1)
    {
      uint64_t v12 = *(void *)v11;
      if (*(_DWORD *)(*(void *)v11 + 16) == a3) {
        break;
      }
      int v11 = (HALS_System *)((char *)v11 + 8);
      if (v11 == a2) {
        return;
      }
    }
    do
    {
      int v13 = *v10;
      HALS_ObjectMap::RetainObject(*v10, a2);
      v15[0] = a4;
      v15[1] = a5;
      uint64_t v15[2] = a6;
      (*(void (**)(HALS_ObjectMap *, uint64_t, void, uint64_t, _DWORD *))(*(void *)v13 + 160))(v13, v12, 0, 1, v15);
      HALS_ObjectMap::ReleaseObject(v13, v14);
      ++v10;
    }
    while (v10 != (HALS_ObjectMap **)a2);
  }
}

void sub_1BACF6474(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_System::CopyTapByUUID(HALS_System *this, const __CFString *a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  uint64_t v9 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK11HALS_System13CopyTapByUUIDEPK10__CFString_block_invoke;
  v5[3] = &unk_1E6232F20;
  v5[4] = &v6;
  v5[5] = this;
  void v5[6] = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_System *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  uint64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1BACF6570(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_System13CopyTapByUUIDEPK10__CFString_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2
    && (uint64_t v3 = *(void *)(a1 + 40),
        CFRetain(*(CFTypeRef *)(a1 + 48)),
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v2),
        (CFStringRef v4 = (const __CFString *)cf) != 0))
  {
    CFRetain(cf);
    CFStringRef v6 = v4;
    uint64_t v5 = HALS_System::_CopyTapByUID(v3, &v6, 0);
    CFRelease(v4);
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v5;
}

void sub_1BACF6630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  CFRelease(v10);
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

void ___ZN11HALS_System15CreateIOContextEP11HALS_ClientPK14__CFDictionary_block_invoke()
{
}

void sub_1BACF7918(void *a1, HALS_Object *a2)
{
  uint64_t v8 = *(const void **)(v6 - 120);
  if (v8) {
    CFRelease(v8);
  }
  HALS_ObjectMap::ReleaseObject(v4, a2);
  std::unique_ptr<HALS_IOContextHostedDSP>::reset[abi:ne180100]((uint64_t *)(v3 + 2104));
  if (*(char *)(v3 + 2103) < 0) {
    operator delete(*v5);
  }
  std::thread::~thread((std::thread *)(v3 + 2040));
  std::__hash_table<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::__unordered_map_hasher<HALS_MultiTap *,std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::hash<HALS_MultiTap *>,std::equal_to<HALS_MultiTap *>,true>,std::__unordered_map_equal<HALS_MultiTap *,std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>,std::equal_to<HALS_MultiTap *>,std::hash<HALS_MultiTap *>,true>,std::allocator<std::__hash_value_type<HALS_MultiTap *,HALS_IOContext_Legacy_Impl::ActiveTap>>>::~__hash_table(v3 + 2000);
  HALS_IOContextDescription::~HALS_IOContextDescription(v17);
  uint64_t v9 = *(void **)(v3 + 1456);
  if (v9)
  {
    *(void *)(v3 + 1464) = v9;
    operator delete(v9);
  }
  std::__function::__value_func<void ()(IORunningState)>::~__value_func[abi:ne180100]((void *)(v3 + 1416));
  int v10 = *(std::__shared_weak_count **)(v3 + 1392);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  int v11 = *(std::__shared_weak_count **)(v3 + 1376);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__function::__value_func<void ()(HALS_IOContext_Legacy_Impl *)>::~__value_func[abi:ne180100]((void *)(v3 + 1088));
  HALS_IOThread::~HALS_IOThread(v16);
  uint64_t v12 = *(std::__shared_weak_count **)(v3 + 40);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v3);
  operator delete(v13);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  int v14 = (std::__shared_weak_count *)*((void *)v2 + 11);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v15 = *((void *)v2 + 8);
  *((void *)v2 + 8) = 0;
  if (v15) {
    MEMORY[0x1C1859840](v15, 0x1000C40B62306B4);
  }
  HALS_Object::~HALS_Object(v2);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  MEMORY[0x1C1859840](v2, 0x10F1C4091E7A958);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZN11HALS_System16DestroyIOContextEP11HALS_Clientj_block_invoke(uint64_t a1)
{
  return HALS_System::_DestroyIOContext(*(void *)(a1 + 32), *(HALS_Client **)(a1 + 40), *(unsigned int *)(a1 + 48));
}

void sub_1BACF8110(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_System::SetIOContextIsRunning(HALS_System *this, int a2, char a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (HALS_System::sIsInitialized)
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 0x40000000;
    CFDictionaryRef v7[2] = ___ZN11HALS_System21SetIOContextIsRunningEjb_block_invoke;
    v7[3] = &__block_descriptor_tmp_148;
    v7[4] = this;
    int v8 = a2;
    char v9 = a3;
    unsigned __int8 v3 = atomic_load((unsigned __int8 *)this + 288);
    if (v3) {
      atomic_store(1u, (unsigned __int8 *)this + 289);
    }
    dispatch_async(*((dispatch_queue_t *)this + 32), v7);
  }
  else
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    CFStringRef v4 = **(NSObject ***)buf;
    if (*(void *)v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = pthread_self();
      mach_port_t v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)AudioStreamRangedDescription buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)int v11 = 2080;
      *(void *)&uint64_t v11[2] = "HALS_System.cpp";
      __int16 v12 = 1024;
      int v13 = 3153;
      _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Cannot send IO Context Is Running on an uninitialized system.", buf, 0x18u);
    }
  }
}

void ___ZN11HALS_System21SetIOContextIsRunningEjb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(HALS_SettingsManager ***)(a1 + 32);
  unsigned __int8 v3 = (HALS_ObjectMap *)*(unsigned int *)(a1 + 40);
  char v4 = *(unsigned char *)(a1 + 44);
  uint64_t v5 = HALS_ObjectMap::CopyObjectByObjectID(v3);
  uint64_t v7 = (HALS_ObjectMap *)v5;
  if (v5)
  {
    char v9 = (int *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**(unsigned int **)(v5 + 64));
    if (v9)
    {
      uint64_t v10 = HALS_ObjectMap::CopyObjectByObjectID(v3);
      __int16 v12 = (HALS_ObjectMap *)v10;
      if (v10 && (*(unsigned int (**)(uint64_t))(*(void *)v10 + 216))(v10))
      {
        uint64_t v29 = 0;
        unint64_t v30 = &v29;
        uint64_t v31 = 0x2000000000;
        char v32 = 0;
        uint64_t v22 = MEMORY[0x1E4F143A8];
        uint64_t v23 = 0x40000000;
        uint64_t v24 = (uint64_t)___ZN11HALS_Client46UpdateStartCountAndMaybeNotifyProcessIsRunningEjb_block_invoke;
        unint64_t v25 = &unk_1E6230C10;
        uint8x8_t v26 = &v29;
        int v27 = v9;
        char v28 = v4;
        int v13 = (HALB_Mutex *)(*(uint64_t (**)(int *))(*(void *)v9 + 56))(v9);
        HALB_CommandGate::ExecuteCommand(v13, (uint64_t)&v22);
        if (*((unsigned char *)v30 + 24))
        {
          v19[0] = 0;
          v19[1] = 0;
          HALS_System::GetInstance(&v20, 0, v19);
          if (v20) {
            HALS_System::ProcessPropertyChanged(v20, v9[4], 1885958719, 1735159650, 1);
          }
          if (v21) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          }
        }
        _Block_object_dispose(&v29, 8);
      }
      HALS_ObjectMap::ReleaseObject(v12, v11);
    }
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v9, v8);
  }
  HALS_ObjectMap::ReleaseObject(v7, v6);
  char ServerBooleanSetting = HALS_SettingsManager::ReadServerBooleanSetting(v2[176], @"AllowStackShotsDuringIO", 0);
  uint64_t v22 = 0;
  uint64_t v23 = (uint64_t)&v22;
  uint64_t v24 = 0x2000000000;
  LOBYTE(v25) = 0;
  uint64_t v29 = 0;
  unint64_t v30 = &v29;
  uint64_t v31 = 0x2000000000;
  char v32 = 0;
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 0x40000000;
  uint64_t v16[2] = ___ZN11HALS_System21SetIOContextIsRunningEjb_block_invoke_2;
  v16[3] = &unk_1E6232FF0;
  unsigned char v16[5] = &v29;
  void v16[6] = v2;
  char v17 = *(unsigned char *)(a1 + 44);
  char v18 = ServerBooleanSetting;
  v16[4] = &v22;
  uint64_t v15 = (HALB_Mutex *)(*((uint64_t (**)(HALS_SettingsManager **))*v2 + 7))(v2);
  HALB_CommandGate::ExecuteCommand(v15, (uint64_t)v16);
  if (*(unsigned char *)(v23 + 24)) {
    TellKernelAudioIOIsRunning(*((unsigned __int8 *)v30 + 24));
  }
  _Block_object_dispose(&v29, 8);
  _Block_object_dispose(&v22, 8);
}

void sub_1BACF8548(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  _Block_object_dispose((const void *)(v24 - 112), 8);
  HALS_ObjectMap::ReleaseObject(v23, v26);
  HALS_ObjectMap::ReleaseObject(v22, v27);
  HALS_ObjectMap::ReleaseObject(v21, v28);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BACF8528);
}

uint64_t ___ZN11HALS_System21SetIOContextIsRunningEjb_block_invoke_2(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 48);
  uint64_t v2 = *(void *)(v1 + 1376);
  if (*(unsigned char *)(result + 56))
  {
    *(void *)(v1 + 1376) = v2 + 1;
    if (!v2 && !*(unsigned char *)(result + 57))
    {
      *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
      *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = 1;
LABEL_12:
      *(unsigned char *)(v1 + 1384) = *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24);
      return result;
    }
  }
  else
  {
    uint64_t v3 = v2 - 1;
    *(void *)(v1 + 1376) = v3;
    if (!v3 && !*(unsigned char *)(result + 57))
    {
      *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
      *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = 0;
      goto LABEL_12;
    }
  }
  if (*(unsigned char *)(v1 + 1384))
  {
    if (*(unsigned char *)(result + 57))
    {
      *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
      *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = 0;
      *(unsigned char *)(v1 + 1384) = 0;
    }
  }
  return result;
}

void ___ZN11HALS_System37IsUnderlyingIOContextRunningForDeviceEj_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8) + 40;
  if (v2 != v1 + 1352) {
    std::vector<HALS_Releaser<HALS_IOContext>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v2, *(HALS_Object **)(v1 + 1352), *(HALS_ObjectMap ***)(v1 + 1360), (uint64_t)(*(void *)(v1 + 1360) - *(void *)(v1 + 1352)) >> 3);
  }
}

void ___ZNK11HALS_System46CountRunningIOContextsForDeviceExcludingClientEjP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8) + 40;
  if (v2 != v1 + 1352) {
    std::vector<HALS_Releaser<HALS_IOContext>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v2, *(HALS_Object **)(v1 + 1352), *(HALS_ObjectMap ***)(v1 + 1360), (uint64_t)(*(void *)(v1 + 1360) - *(void *)(v1 + 1352)) >> 3);
  }
}

void ___ZNK11HALS_System32GetSmallestActiveBufferFrameSizeEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8) + 40;
  if (v2 != v1 + 1352) {
    std::vector<HALS_Releaser<HALS_IOContext>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v2, *(HALS_Object **)(v1 + 1352), *(HALS_ObjectMap ***)(v1 + 1360), (uint64_t)(*(void *)(v1 + 1360) - *(void *)(v1 + 1352)) >> 3);
  }
}

void ___ZNK11HALS_System23GetActiveIOContextsInfoEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8) + 40;
  if (v2 != v1 + 1352) {
    std::vector<HALS_Releaser<HALS_IOContext>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v2, *(HALS_Object **)(v1 + 1352), *(HALS_ObjectMap ***)(v1 + 1360), (uint64_t)(*(void *)(v1 + 1360) - *(void *)(v1 + 1352)) >> 3);
  }
}

void std::vector<IOContextInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    char v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 17) < 0) {
          operator delete(*(v4 - 5));
        }
        v4 -= 5;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 __Block_byref_object_copy__160(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

HALS_ObjectMap ***__Block_byref_object_dispose__161(uint64_t a1, HALS_Object *a2)
{
  return HALS_ArrayReleaser<HALS_Tap>::~HALS_ArrayReleaser((HALS_ObjectMap ***)(a1 + 40), a2);
}

void ___ZNK11HALS_System23UpdateTapsForNewContextEP14HALS_IOContext_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(HALS_ObjectMap ***)(v1 + 1312);
  for (uint64_t i = *(HALS_ObjectMap ***)(v1 + 1320); v2 != i; ++v2)
  {
    uint64_t v5 = *v2;
    uint64_t v7 = *((void *)*v2 + 31);
    mach_port_t v6 = (std::__shared_weak_count *)*((void *)*v2 + 32);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    os_unfair_lock_lock((os_unfair_lock_t)(v7 + 72));
    int v8 = *(uint64_t **)(v7 + 96);
    int v27 = 0;
    uint64_t v28 = 0;
    uint8x8_t v26 = 0;
    unint64_t v9 = 0;
    if (v8)
    {
      uint64_t v10 = v8;
      do
      {
        ++v9;
        uint64_t v10 = (uint64_t *)*v10;
      }
      while (v10);
    }
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>,std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>>((char *)&v26, v8, v9);
    os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 72));
    __int16 v12 = v26;
    if (v26 != v27)
    {
      int v13 = *(void **)(*(void *)(a1 + 32) + 8);
      uint64_t v15 = (HALS_ObjectMap **)v13[6];
      unint64_t v14 = v13[7];
      if ((unint64_t)v15 >= v14)
      {
        uint64_t v17 = v13[5];
        uint64_t v18 = ((uint64_t)v15 - v17) >> 3;
        if ((unint64_t)(v18 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v14 - v17;
        uint64_t v20 = v19 >> 2;
        if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
          uint64_t v20 = v18 + 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21) {
          unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v21);
        }
        else {
          int v11 = 0;
        }
        uint64_t v22 = (HALS_ObjectMap **)(v21 + 8 * v18);
        HALS_ObjectMap *v22 = v5;
        uint64_t v16 = v22 + 1;
        uint64_t v24 = (char *)v13[5];
        uint64_t v23 = (char *)v13[6];
        if (v23 != v24)
        {
          do
          {
            unint64_t v25 = (HALS_ObjectMap *)*((void *)v23 - 1);
            v23 -= 8;
            *--uint64_t v22 = v25;
          }
          while (v23 != v24);
          uint64_t v23 = (char *)v13[5];
        }
        v13[5] = v22;
        v13[6] = v16;
        v13[7] = v21 + 8 * (void)v11;
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        *uint64_t v15 = v5;
        uint64_t v16 = v15 + 1;
      }
      v13[6] = v16;
      HALS_ObjectMap::RetainObject(v5, v11);
      __int16 v12 = v26;
    }
    if (v12) {
      operator delete(v12);
    }
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1BACF89CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v11) {
    operator delete(v11);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

HALS_ObjectMap ***HALS_ArrayReleaser<HALS_Tap>::~HALS_ArrayReleaser(HALS_ObjectMap ***a1, HALS_Object *a2)
{
  uint64_t v3 = *a1;
  char v4 = a1[1];
  if (*a1 != v4)
  {
    do
      HALS_ObjectMap::ReleaseObject(*v3++, a2);
    while (v3 != v4);
    uint64_t v3 = *a1;
  }
  if (v3)
  {
    a1[1] = v3;
    operator delete(v3);
  }
  return a1;
}

void HALS_System::RemoveTapFromAllContexts(uint64_t a1, uint64_t *a2)
{
  uint64_t v10 = 0;
  int v11 = &v10;
  uint64_t v12 = 0x4002000000;
  int v13 = __Block_byref_object_copy__47;
  unint64_t v14 = __Block_byref_object_dispose__48;
  memset(v15, 0, sizeof(v15));
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  uint64_t v9[2] = ___ZNK11HALS_System24RemoveTapFromAllContextsENSt3__110shared_ptrI13HALS_MultiTapEE_block_invoke;
  void v9[3] = &unk_1E6233100;
  v9[4] = &v10;
  v9[5] = a1;
  uint64_t v3 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v9);
  char v4 = (uint64_t *)v11[5];
  for (uint64_t i = (uint64_t *)v11[6]; v4 != i; ++v4)
  {
    uint64_t v6 = *v4;
    uint64_t v7 = *a2;
    int v8 = (std::__shared_weak_count *)a2[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    HALS_IOContext::RemoveTap(*(void *)(v6 + 96), v7, v8);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  _Block_object_dispose(&v10, 8);
  uint64_t v16 = (void **)v15;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v16);
}

void sub_1BACF8BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  *(void *)(v9 - 56) = v8;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v9 - 56));
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_System24RemoveTapFromAllContextsENSt3__110shared_ptrI13HALS_MultiTapEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8) + 40;
  if (v2 != v1 + 1352) {
    std::vector<HALS_Releaser<HALS_IOContext>>::__assign_with_size[abi:ne180100]<HALS_Releaser<HALS_IOContext>*,HALS_Releaser<HALS_IOContext>*>(v2, *(HALS_Object **)(v1 + 1352), *(HALS_ObjectMap ***)(v1 + 1360), (uint64_t)(*(void *)(v1 + 1360) - *(void *)(v1 + 1352)) >> 3);
  }
}

void _ZNSt3__115allocate_sharedB8ne180100I26DSP_Host_OffloadDictionaryNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1)
{
  uint64_t v2 = operator new(0x30uLL);
  *(_OWORD *)((char *)v2 + 8) = 0u;
  *(void *)uint64_t v2 = &unk_1F147F230;
  v2[2] = 0u;
  *((void *)v2 + 3) = 0;
  *a1 = (char *)v2 + 24;
  a1[1] = v2;

  std::shared_ptr<AMCP::ASP::Engine>::__enable_weak_this[abi:ne180100]<AMCP::Core::Engine,AMCP::ASP::Engine,void>((uint64_t)a1, (void *)v2 + 3, (uint64_t)v2 + 24);
}

void std::__shared_ptr_emplace<DSP_Host_OffloadDictionary>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void std::__shared_ptr_emplace<DSP_Host_OffloadDictionary>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F230;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<DSP_Host_OffloadDictionary>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F230;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t ___ZN11HALS_System31ServerHighPriorityAsyncDispatchENSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 48))(v1);
}

void sub_1BACF8DB4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void *__destroy_helper_block_e8_32c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

uint64_t __copy_helper_block_e8_32c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void *AMCP::DAL::Container::get_data_handler(AMCP::DAL *a1, uint64_t a2, double a3)
{
  AMCP::DAL::demand_map(a1);
  if (!*((void *)&AMCP::DAL::demand_map(void)::s_map + 1)) {
    goto LABEL_17;
  }
  unint64_t v6 = *(unsigned int *)(a2 + 8);
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&AMCP::DAL::demand_map(void)::s_map + 8));
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = *(unsigned int *)(a2 + 8);
    if (*((void *)&AMCP::DAL::demand_map(void)::s_map + 1) <= v6) {
      unint64_t v8 = v6 % *((void *)&AMCP::DAL::demand_map(void)::s_map + 1);
    }
  }
  else
  {
    unint64_t v8 = (DWORD2(AMCP::DAL::demand_map(void)::s_map) - 1) & v6;
  }
  uint64_t v9 = *(uint64_t ***)(AMCP::DAL::demand_map(void)::s_map + 8 * v8);
  if (!v9 || (uint64_t v10 = *v9) == 0)
  {
LABEL_17:
    uint64_t v12 = operator new(0x68uLL);
    v12[1] = 0;
    uint64_t v12[2] = 0;
    *uint64_t v12 = &unk_1F146C050;
    long long v13 = *(_OWORD *)(a2 + 16);
    *((_OWORD *)v12 + 2) = *(_OWORD *)a2;
    *((_OWORD *)v12 + 3) = v13;
    v12[8] = *(void *)(a2 + 32);
    *((unsigned char *)v12 + 72) = 0;
    void v12[3] = &unk_1F1471660;
    __n128 result = std::vector<unsigned char>::vector(v12 + 10, *(_DWORD *)(a2 + 24) * vcvtmd_s64_f64(a3));
    *(void *)&long long v15 = v12 + 3;
    *((void *)&v15 + 1) = v12;
    *(_OWORD *)a1 = v15;
    return result;
  }
  while (1)
  {
    unint64_t v11 = v10[1];
    if (v11 == v6) {
      break;
    }
    if (v7.u32[0] > 1uLL)
    {
      if (v11 >= *((void *)&AMCP::DAL::demand_map(void)::s_map + 1)) {
        v11 %= *((void *)&AMCP::DAL::demand_map(void)::s_map + 1);
      }
    }
    else
    {
      v11 &= *((void *)&AMCP::DAL::demand_map(void)::s_map + 1) - 1;
    }
    if (v11 != v8) {
      goto LABEL_17;
    }
LABEL_16:
    uint64_t v10 = (uint64_t *)*v10;
    if (!v10) {
      goto LABEL_17;
    }
  }
  if (*((_DWORD *)v10 + 4) != v6) {
    goto LABEL_16;
  }
  double v17 = a3;
  uint64_t v16 = v10[6];
  if (!v16) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (void *)(*(uint64_t (**)(uint64_t, uint64_t, double *))(*(void *)v16 + 48))(v16, a2, &v17);
}

void sub_1BACF8F9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void AMCP::DAL::demand_map(AMCP::DAL *this)
{
  {
    if (this)
    {
      AMCP::DAL::demand_map(void)::s_map = 0u;
      *(_OWORD *)&qword_1EBFFA1F8 = 0u;
      dword_1EBFFA208 = 1065353216;
    }
  }
  if ((AMCP::DAL::demand_map(void)::hasBeenInitialized & 1) == 0)
  {
    AMCP::DAL::demand_map(void)::hasBeenInitialized = 1;
    AMCP::DAL::DALSupport::initialize_data_handlers(this);
  }
}

void std::__shared_ptr_emplace<AMCP::DAL::Default_Data_Handler>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<AMCP::DAL::Default_Data_Handler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146C050;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::DAL::Default_Data_Handler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146C050;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *AMCP::DAL::DALSupport::initialize_data_handlers(AMCP::DAL::DALSupport *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1C1858C00](this);
  uint64_t v2 = &unk_1F146C0A0;
  char v4 = &v2;
  AMCP::DAL::Container::set_data_handler_format((AMCP::DAL *)0x6C70636D, &v2);
  std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::~__value_func[abi:ne180100](&v2);
  uint64_t v2 = &unk_1F146C180;
  char v4 = &v2;
  AMCP::DAL::Container::set_data_handler_format((AMCP::DAL *)0x73707673, &v2);
  std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::~__value_func[abi:ne180100](&v2);
  uint64_t v2 = &unk_1F146C250;
  char v4 = &v2;
  AMCP::DAL::Container::set_data_handler_format((AMCP::DAL *)0x616C6163, &v2);
  std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::~__value_func[abi:ne180100](&v2);
  uint64_t v2 = &unk_1F146C320;
  char v4 = &v2;
  AMCP::DAL::Container::set_data_handler_format((AMCP::DAL *)0x63616333, &v2);
  std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::~__value_func[abi:ne180100](&v2);
  uint64_t v2 = &unk_1F146C3A0;
  char v4 = &v2;
  AMCP::DAL::Container::set_data_handler_format((AMCP::DAL *)0x61632D33, &v2);
  std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::~__value_func[abi:ne180100](&v2);
  uint64_t v2 = &unk_1F146C420;
  uint64_t v3 = AMCP::DAL::PCM_File_Factory;
  char v4 = &v2;
  AMCP::DAL::File::set_file_handler_format((AMCP::DAL::DALSupport *)0x6C70636D, &v2);
  std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_File_Handler> ()(AMCP::DAL::DAL_Settings const&)>::~__value_func[abi:ne180100](&v2);
  uint64_t v2 = &unk_1F146C420;
  uint64_t v3 = AMCP::DAL::Packetized_File_Factory;
  char v4 = &v2;
  AMCP::DAL::File::set_file_handler_format((AMCP::DAL::DALSupport *)0x616C6163, &v2);
  std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_File_Handler> ()(AMCP::DAL::DAL_Settings const&)>::~__value_func[abi:ne180100](&v2);
  uint64_t v2 = &unk_1F146C420;
  uint64_t v3 = AMCP::DAL::Packetized_File_Factory;
  char v4 = &v2;
  AMCP::DAL::File::set_file_handler_format((AMCP::DAL::DALSupport *)0x63616333, &v2);
  std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_File_Handler> ()(AMCP::DAL::DAL_Settings const&)>::~__value_func[abi:ne180100](&v2);
  uint64_t v2 = &unk_1F146C420;
  uint64_t v3 = AMCP::DAL::Packetized_File_Factory;
  char v4 = &v2;
  AMCP::DAL::File::set_file_handler_format((AMCP::DAL::DALSupport *)0x61632D33, &v2);
  return std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_File_Handler> ()(AMCP::DAL::DAL_Settings const&)>::~__value_func[abi:ne180100](&v2);
}

void sub_1BACF937C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_File_Handler> ()(AMCP::DAL::DAL_Settings const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *AMCP::DAL::Container::set_data_handler_format(AMCP::DAL *a1, void *a2)
{
  unsigned int v4 = a1;
  v39[3] = *MEMORY[0x1E4F143B8];
  AMCP::DAL::demand_map(a1);
  unint64_t v5 = v4;
  unint64_t v6 = *((void *)&AMCP::DAL::demand_map(void)::s_map + 1);
  if (*((void *)&AMCP::DAL::demand_map(void)::s_map + 1))
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&AMCP::DAL::demand_map(void)::s_map + 8));
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v2 = v4;
      if (*((void *)&AMCP::DAL::demand_map(void)::s_map + 1) <= (unint64_t)v4) {
        unint64_t v2 = (unint64_t)v4 % *((void *)&AMCP::DAL::demand_map(void)::s_map + 1);
      }
    }
    else
    {
      unint64_t v2 = (DWORD2(AMCP::DAL::demand_map(void)::s_map) - 1) & v4;
    }
    unint64_t v8 = *(uint64_t **)(AMCP::DAL::demand_map(void)::s_map + 8 * v2);
    if (v8)
    {
      for (uint64_t i = *v8; i; uint64_t i = *(void *)i)
      {
        unint64_t v10 = *(void *)(i + 8);
        if (v10 == v4)
        {
          if (*(_DWORD *)(i + 16) == v4) {
            goto LABEL_74;
          }
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= *((void *)&AMCP::DAL::demand_map(void)::s_map + 1)) {
              v10 %= *((void *)&AMCP::DAL::demand_map(void)::s_map + 1);
            }
          }
          else
          {
            v10 &= *((void *)&AMCP::DAL::demand_map(void)::s_map + 1) - 1;
          }
          if (v10 != v2) {
            break;
          }
        }
      }
    }
  }
  unint64_t v11 = operator new(0x38uLL);
  v36[0] = v11;
  v36[1] = &qword_1EBFFA1F8;
  *unint64_t v11 = 0;
  v11[1] = v4;
  *((_DWORD *)v11 + 4) = v4;
  void v11[6] = 0;
  char v37 = 1;
  float v12 = (float)(unint64_t)(qword_1EBFFA200 + 1);
  if (v6 && (float)(*(float *)&dword_1EBFFA208 * (float)v6) >= v12)
  {
    unint64_t v5 = v2;
    goto LABEL_64;
  }
  BOOL v13 = 1;
  if (v6 >= 3) {
    BOOL v13 = (v6 & (v6 - 1)) != 0;
  }
  unint64_t v14 = v13 | (2 * v6);
  unint64_t v15 = vcvtps_u32_f32(v12 / *(float *)&dword_1EBFFA208);
  if (v14 <= v15) {
    int8x8_t prime = (int8x8_t)v15;
  }
  else {
    int8x8_t prime = (int8x8_t)v14;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v6 = *((void *)&AMCP::DAL::demand_map(void)::s_map + 1);
  }
  if (*(void *)&prime <= v6)
  {
    if (*(void *)&prime >= v6) {
      goto LABEL_60;
    }
    unint64_t v23 = vcvtps_u32_f32((float)(unint64_t)qword_1EBFFA200 / *(float *)&dword_1EBFFA208);
    if (v6 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
    {
      unint64_t v23 = std::__next_prime(v23);
    }
    else
    {
      uint64_t v25 = 1 << -(char)__clz(v23 - 1);
      if (v23 >= 2) {
        unint64_t v23 = v25;
      }
    }
    if (*(void *)&prime <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime >= v6)
    {
      unint64_t v6 = *((void *)&AMCP::DAL::demand_map(void)::s_map + 1);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      int v35 = (void *)AMCP::DAL::demand_map(void)::s_map;
      *(void *)&AMCP::DAL::demand_map(void)::s_map = 0;
      if (v35) {
        operator delete(v35);
      }
      unint64_t v6 = 0;
      *((void *)&AMCP::DAL::demand_map(void)::s_map + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  double v17 = operator new(8 * *(void *)&prime);
  uint64_t v18 = (void *)AMCP::DAL::demand_map(void)::s_map;
  *(void *)&AMCP::DAL::demand_map(void)::s_map = v17;
  if (v18) {
    operator delete(v18);
  }
  uint64_t v19 = 0;
  *((int8x8_t *)&AMCP::DAL::demand_map(void)::s_map + 1) = prime;
  do
    *(void *)(AMCP::DAL::demand_map(void)::s_map + 8 * v19++) = 0;
  while (*(void *)&prime != v19);
  uint64_t v20 = (void **)qword_1EBFFA1F8;
  if (qword_1EBFFA1F8)
  {
    unint64_t v21 = *(void *)(qword_1EBFFA1F8 + 8);
    uint8x8_t v22 = (uint8x8_t)vcnt_s8(prime);
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.u32[0] > 1uLL)
    {
      if (v21 >= *(void *)&prime) {
        v21 %= *(void *)&prime;
      }
    }
    else
    {
      v21 &= *(void *)&prime - 1;
    }
    *(void *)(AMCP::DAL::demand_map(void)::s_map + 8 * v21) = &qword_1EBFFA1F8;
    for (j = *v20; j; unint64_t v21 = v27)
    {
      unint64_t v27 = j[1];
      if (v22.u32[0] > 1uLL)
      {
        if (v27 >= *(void *)&prime) {
          v27 %= *(void *)&prime;
        }
      }
      else
      {
        v27 &= *(void *)&prime - 1;
      }
      if (v27 != v21)
      {
        if (!*(void *)(AMCP::DAL::demand_map(void)::s_map + 8 * v27))
        {
          *(void *)(AMCP::DAL::demand_map(void)::s_map + 8 * v27) = v20;
          goto LABEL_56;
        }
        *uint64_t v20 = (void *)*j;
        void *j = **(void **)(AMCP::DAL::demand_map(void)::s_map + 8 * v27);
        **(void **)(AMCP::DAL::demand_map(void)::s_map + 8 * v27) = j;
        uint64_t j = v20;
      }
      unint64_t v27 = v21;
LABEL_56:
      uint64_t v20 = (void **)j;
      uint64_t j = (void *)*j;
    }
  }
  unint64_t v6 = (unint64_t)prime;
LABEL_60:
  if ((v6 & (v6 - 1)) != 0)
  {
    if (v6 <= v5) {
      v5 %= v6;
    }
  }
  else
  {
    unint64_t v5 = (v6 - 1) & v5;
  }
LABEL_64:
  uint64_t v28 = *(uint64_t **)(AMCP::DAL::demand_map(void)::s_map + 8 * v5);
  uint64_t i = v36[0];
  if (v28)
  {
    *(void *)v36[0] = *v28;
LABEL_72:
    uint64_t *v28 = i;
    goto LABEL_73;
  }
  *(void *)v36[0] = qword_1EBFFA1F8;
  qword_1EBFFA1F8 = i;
  *(void *)(AMCP::DAL::demand_map(void)::s_map + 8 * v5) = &qword_1EBFFA1F8;
  if (*(void *)i)
  {
    unint64_t v29 = *(void *)(*(void *)i + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v29 >= v6) {
        v29 %= v6;
      }
    }
    else
    {
      v29 &= v6 - 1;
    }
    uint64_t v28 = (uint64_t *)(AMCP::DAL::demand_map(void)::s_map + 8 * v29);
    goto LABEL_72;
  }
LABEL_73:
  v36[0] = 0;
  ++qword_1EBFFA200;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::function<std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::function<std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v36);
LABEL_74:
  unint64_t v30 = (void *)a2[3];
  if (v30)
  {
    if (v30 == a2)
    {
      unint64_t v38 = v36;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v36);
    }
    else
    {
      unint64_t v38 = (void *)(*(uint64_t (**)(void *))(*v30 + 16))(v30);
    }
  }
  else
  {
    unint64_t v38 = 0;
  }
  uint64_t v31 = i + 24;
  if ((void *)(i + 24) != v36)
  {
    char v32 = v38;
    uint64_t v33 = *(void *)(i + 48);
    if (v38 == v36)
    {
      if (v33 == v31)
      {
        (*(void (**)(void *, void *))(v36[0] + 24))(v36, v39);
        (*(void (**)(void *))(*v38 + 32))(v38);
        unint64_t v38 = 0;
        (*(void (**)(void, void *))(**(void **)(i + 48) + 24))(*(void *)(i + 48), v36);
        (*(void (**)(void))(**(void **)(i + 48) + 32))(*(void *)(i + 48));
        *(void *)(i + 48) = 0;
        unint64_t v38 = v36;
        (*(void (**)(void *, uint64_t))(v39[0] + 24))(v39, i + 24);
        (*(void (**)(void *))(v39[0] + 32))(v39);
      }
      else
      {
        (*(void (**)(void *, uint64_t))(v36[0] + 24))(v36, i + 24);
        (*(void (**)(void *))(*v38 + 32))(v38);
        unint64_t v38 = *(void **)(i + 48);
      }
      *(void *)(i + 48) = v31;
    }
    else if (v33 == v31)
    {
      (*(void (**)(uint64_t, void *))(*(void *)v31 + 24))(i + 24, v36);
      (*(void (**)(void))(**(void **)(i + 48) + 32))(*(void *)(i + 48));
      *(void *)(i + 48) = v38;
      unint64_t v38 = v36;
    }
    else
    {
      unint64_t v38 = *(void **)(i + 48);
      *(void *)(i + 48) = v32;
    }
  }
  return std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::~__value_func[abi:ne180100](v36);
}

void sub_1BACF9AB8(_Unwind_Exception *exception_object)
{
}

void *std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_File_Handler> ()(AMCP::DAL::DAL_Settings const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::DAL::DAL_File_Handler> (*)(AMCP::DAL::DAL_Settings const&),std::allocator<std::shared_ptr<AMCP::DAL::DAL_File_Handler> (*)(AMCP::DAL::DAL_Settings const&)>,std::shared_ptr<AMCP::DAL::DAL_File_Handler> ()(AMCP::DAL::DAL_Settings const&)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::DAL::DAL_File_Handler> (*)(AMCP::DAL::DAL_Settings const&),std::allocator<std::shared_ptr<AMCP::DAL::DAL_File_Handler> (*)(AMCP::DAL::DAL_Settings const&)>,std::shared_ptr<AMCP::DAL::DAL_File_Handler> ()(AMCP::DAL::DAL_Settings const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"PFNSt3__110shared_ptrIN4AMCP3DAL16DAL_File_HandlerEEERKNS2_12DAL_SettingsEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::DAL::DAL_File_Handler> (*)(AMCP::DAL::DAL_Settings const&),std::allocator<std::shared_ptr<AMCP::DAL::DAL_File_Handler> (*)(AMCP::DAL::DAL_Settings const&)>,std::shared_ptr<AMCP::DAL::DAL_File_Handler> ()(AMCP::DAL::DAL_Settings const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::DAL::DAL_File_Handler> (*)(AMCP::DAL::DAL_Settings const&),std::allocator<std::shared_ptr<AMCP::DAL::DAL_File_Handler> (*)(AMCP::DAL::DAL_Settings const&)>,std::shared_ptr<AMCP::DAL::DAL_File_Handler> ()(AMCP::DAL::DAL_Settings const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F146C420;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<std::shared_ptr<AMCP::DAL::DAL_File_Handler> (*)(AMCP::DAL::DAL_Settings const&),std::allocator<std::shared_ptr<AMCP::DAL::DAL_File_Handler> (*)(AMCP::DAL::DAL_Settings const&)>,std::shared_ptr<AMCP::DAL::DAL_File_Handler> ()(AMCP::DAL::DAL_Settings const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F146C420;
  result[1] = v3;
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::DAL::DAL_File_Handler> (*)(AMCP::DAL::DAL_Settings const&),std::allocator<std::shared_ptr<AMCP::DAL::DAL_File_Handler> (*)(AMCP::DAL::DAL_Settings const&)>,std::shared_ptr<AMCP::DAL::DAL_File_Handler> ()(AMCP::DAL::DAL_Settings const&)>::~__func()
{
}

void *std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_4,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_4>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_4,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_4>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3DAL10DALSupport24initialize_data_handlersEvE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_4,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_4>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::operator()()
{
}

void sub_1BACF9D8C(_Unwind_Exception *a1)
{
  MEMORY[0x1C1859840](v1, 0x10A1C40F66DBFEBLL);
  _Unwind_Resume(a1);
}

void std::shared_ptr<AMCP::DAL::DAL_Data_Handler>::shared_ptr[abi:ne180100]<AMCP::DAL::Packetized_Data_Handler,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1BACF9E18(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::Packetized_Data_Handler *,std::shared_ptr<AMCP::DAL::DAL_Data_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_Data_Handler,AMCP::DAL::Packetized_Data_Handler>,std::allocator<AMCP::DAL::Packetized_Data_Handler>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4AMCP3DAL16DAL_Data_HandlerEE27__shared_ptr_default_deleteIS3_NS2_23Packetized_Data_HandlerEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::Packetized_Data_Handler *,std::shared_ptr<AMCP::DAL::DAL_Data_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_Data_Handler,AMCP::DAL::Packetized_Data_Handler>,std::allocator<AMCP::DAL::Packetized_Data_Handler>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<AMCP::DAL::Packetized_Data_Handler *,std::shared_ptr<AMCP::DAL::DAL_Data_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_Data_Handler,AMCP::DAL::Packetized_Data_Handler>,std::allocator<AMCP::DAL::Packetized_Data_Handler>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_4,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_4>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F146C3A0;
}

void *std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_4,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_4>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F146C3A0;
  return result;
}

void std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_4,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_4>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::~__func()
{
}

void *std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_3,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_3,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3DAL10DALSupport24initialize_data_handlersEvE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_3,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::operator()()
{
}

void sub_1BACFA034(_Unwind_Exception *a1)
{
  MEMORY[0x1C1859840](v1, 0x10A1C40F66DBFEBLL);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_3,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F146C320;
}

void *std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_3,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F146C320;
  return result;
}

void std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_3,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_3>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::~__func()
{
}

void *std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_2,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_2,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3DAL10DALSupport24initialize_data_handlersEvE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_2,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::operator()()
{
}

void sub_1BACFA190(_Unwind_Exception *a1)
{
  MEMORY[0x1C1859840](v1, 0x10A1C40F66DBFEBLL);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_2,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F146C250;
}

void *std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_2,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F146C250;
  return result;
}

void std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_2,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_2>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::~__func()
{
}

void *std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_1,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_1,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3DAL10DALSupport24initialize_data_handlersEvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_1,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::operator()()
{
}

void sub_1BACFA374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<AMCP::DAL::AUParameter_Data_Handler>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<AMCP::DAL::AUParameter_Data_Handler>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    std::__hash_table<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::__unordered_map_hasher<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::hash<AMCP::DAL::AUParameterKey>,std::equal_to<void>,true>,std::__unordered_map_equal<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::equal_to<void>,std::hash<AMCP::DAL::AUParameterKey>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>>>::~__hash_table(v1 + 56);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::__unordered_map_hasher<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::hash<AMCP::DAL::AUParameterKey>,std::equal_to<void>,true>,std::__unordered_map_equal<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::equal_to<void>,std::hash<AMCP::DAL::AUParameterKey>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::__unordered_map_hasher<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::hash<AMCP::DAL::AUParameterKey>,std::equal_to<void>,true>,std::__unordered_map_equal<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::equal_to<void>,std::hash<AMCP::DAL::AUParameterKey>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>>>::__deallocate_node(a1, *(void **)(a1 + 24));
  uint64_t v2 = *(void *)a1;
  *(void *)a1 = 0;
  if (v2) {
    std::allocator_traits<std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,void *> *> *>>::deallocate[abi:ne180100](*(void *)(a1 + 16), v2, *(void *)(a1 + 8));
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::__unordered_map_hasher<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::hash<AMCP::DAL::AUParameterKey>,std::equal_to<void>,true>,std::__unordered_map_equal<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::equal_to<void>,std::hash<AMCP::DAL::AUParameterKey>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>>>::__deallocate_node(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    do
    {
      unsigned int v4 = (void *)*v2;
      unint64_t v5 = (caulk::rt_safe_memory_resource *)v2[4];
      if (v5)
      {
        v2[5] = v5;
        std::allocator_traits<caulk::rt_allocator<AMCP::DAL::AU_Stream_Parameter>>::deallocate[abi:ne180100](v5, (uint64_t)(v2[6] - (void)v5) >> 4);
      }
      uint64_t result = std::allocator_traits<std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,void *>>>::deallocate[abi:ne180100](*(void *)(v3 + 32), (uint64_t)v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  return result;
}

uint64_t std::allocator_traits<std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,void *> *> *>>::deallocate[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2, 8 * a3, 8);
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AMCP::DAL::AU_Stream_Parameter>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  if (!(a2 >> 60))
  {
    uint64_t v2 = result;
    uint64_t result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
    if (*MEMORY[0x1E4FB7E88]) {
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
    }
  }
  __break(1u);
  return result;
}

uint64_t std::allocator_traits<std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,void *>>>::deallocate[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2, 56, 8);
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::AUParameter_Data_Handler *,std::shared_ptr<AMCP::DAL::DAL_Data_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_Data_Handler,AMCP::DAL::AUParameter_Data_Handler>,std::allocator<AMCP::DAL::AUParameter_Data_Handler>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4AMCP3DAL16DAL_Data_HandlerEE27__shared_ptr_default_deleteIS3_NS2_24AUParameter_Data_HandlerEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::AUParameter_Data_Handler *,std::shared_ptr<AMCP::DAL::DAL_Data_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_Data_Handler,AMCP::DAL::AUParameter_Data_Handler>,std::allocator<AMCP::DAL::AUParameter_Data_Handler>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    std::__hash_table<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::__unordered_map_hasher<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::hash<AMCP::DAL::AUParameterKey>,std::equal_to<void>,true>,std::__unordered_map_equal<AMCP::DAL::AUParameterKey,std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>,std::equal_to<void>,std::hash<AMCP::DAL::AUParameterKey>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<AMCP::DAL::AUParameterKey,caulk::rt_vector<AMCP::DAL::AU_Stream_Parameter>>>>::~__hash_table(v1 + 56);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

void std::__shared_ptr_pointer<AMCP::DAL::AUParameter_Data_Handler *,std::shared_ptr<AMCP::DAL::DAL_Data_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_Data_Handler,AMCP::DAL::AUParameter_Data_Handler>,std::allocator<AMCP::DAL::AUParameter_Data_Handler>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_1,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F146C180;
}

void *std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_1,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F146C180;
  return result;
}

void std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_1,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_1>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::~__func()
{
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::function<std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::function<std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::~__value_func[abi:ne180100](v1 + 3);
    }
    operator delete(v1);
  }
}

void *std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_0,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_0>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_0,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_0>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3DAL10DALSupport24initialize_data_handlersEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_0,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_0>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::operator()()
{
}

void sub_1BACFA8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::vector<AMCP::DAL::Audio_Samples_Data,caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&a9);
  MEMORY[0x1C1859840](v9, 0x10A1C40EACBC41BLL);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::PCM_Data_Handler *,std::shared_ptr<AMCP::DAL::DAL_Data_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_Data_Handler,AMCP::DAL::PCM_Data_Handler>,std::allocator<AMCP::DAL::PCM_Data_Handler>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4AMCP3DAL16DAL_Data_HandlerEE27__shared_ptr_default_deleteIS3_NS2_16PCM_Data_HandlerEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::PCM_Data_Handler *,std::shared_ptr<AMCP::DAL::DAL_Data_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_Data_Handler,AMCP::DAL::PCM_Data_Handler>,std::allocator<AMCP::DAL::PCM_Data_Handler>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<AMCP::DAL::PCM_Data_Handler *,std::shared_ptr<AMCP::DAL::DAL_Data_Handler>::__shared_ptr_default_delete<AMCP::DAL::DAL_Data_Handler,AMCP::DAL::PCM_Data_Handler>,std::allocator<AMCP::DAL::PCM_Data_Handler>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_0,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_0>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F146C0A0;
}

void *std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_0,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_0>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F146C0A0;
  return result;
}

void std::__function::__func<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_0,std::allocator<AMCP::DAL::DALSupport::initialize_data_handlers(void)::$_0>,std::shared_ptr<AMCP::DAL::DAL_Data_Handler> ()(CA::StreamDescription const&,AMCP::DAL::Sample_Time)>::~__func()
{
}

void *AMCP::DAL::Container::Container(void *a1, uint64_t a2, double a3)
{
  *a1 = 0;
  a1[1] = 0;
  AMCP::DAL::Container::get_data_handler((AMCP::DAL *)&v7, a2, a3);
  long long v4 = v7;
  long long v7 = 0uLL;
  unint64_t v5 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v4;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    if (*((void *)&v7 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
    }
  }
  return a1;
}

void sub_1BACFAAE0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::Container::erase_range(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = 0;
    uint64_t v2 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 96))(a1, &v1);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
  }
}

void sub_1BACFAB58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::Container::copy_from_this_container(uint64_t *a1, uint64_t a2, uint64_t *a3, double *a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  if (*a1)
  {
    uint64_t v8 = *a3;
    BOOL is_compatible = AMCP::DAL::Container::container_is_compatible(*a1, *a3);
    if (!is_compatible)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_compatible);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      float v12 = **(NSObject ***)buf;
      if (*(void *)v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v34);
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        BOOL v13 = pthread_self();
        mach_port_t v14 = pthread_mach_thread_np(v13);
        *(_DWORD *)AudioStreamRangedDescription buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v14;
        *(_WORD *)uint64_t v34 = 2080;
        *(void *)&v34[2] = "Container.cpp";
        __int16 v35 = 1024;
        int v36 = 142;
        __int16 v37 = 2080;
        *(void *)unint64_t v38 = "not (container_is_compatible(dest_container))";
        _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Container::copy_from_this_container: Containers Are Not Compatible", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Container::copy_from_this_container: Containers Are Not Compatible", (uint64_t)&v24);
      std::logic_error::logic_error(&v25, &v24);
      v25.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v26, &v25);
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      int v31 = -1;
      v26.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      unint64_t v27 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v26);
      *(void *)&v38[6] = "void AMCP::DAL::Container::copy_from_this_container(const Sample_Time_Range &, const Containe"
                           "r &, const Sample_Time_Range &, DAL_Operation_Context_Ref)";
      CFNumberRef v39 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Container.cpp";
      int v40 = 142;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
      long long v22 = v19;
      uint64_t v23 = v20;
      long long v19 = 0uLL;
      uint64_t v20 = 0;
      unint64_t v21 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    unint64_t v10 = (std::__shared_weak_count *)a3[1];
    uint64_t v17 = v8;
    uint64_t v18 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    double v11 = *a4;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *, double))(*(void *)v4 + 80))(v4, a2, &v17, &v15, v11);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
}

void sub_1BACFAE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,char a28)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL AMCP::DAL::Container::container_is_compatible(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    memset(v7, 0, 40);
    if (a2) {
      goto LABEL_3;
    }
LABEL_5:
    memset(&v6, 0, sizeof(v6));
    double mSampleRate = 0.0;
    return *(double *)v7 == mSampleRate
        && DWORD2(v7[0]) == v6.mFormatID
        && *(void *)&v7[1] == *(void *)&v6.mBytesPerPacket
        && *(void *)((char *)&v7[1] + 12) == *(void *)&v6.mChannelsPerFrame
        && CA::Implementation::EquivalentFormatFlags((CA::Implementation *)v7, &v6, 0, 0);
  }
  long long v2 = *(_OWORD *)(a1 + 24);
  v7[0] = *(_OWORD *)(a1 + 8);
  v7[1] = v2;
  *(void *)&CFDictionaryRef v7[2] = *(void *)(a1 + 40);
  if (!a2) {
    goto LABEL_5;
  }
LABEL_3:
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)&v6.double mSampleRate = *(_OWORD *)(a2 + 8);
  *(_OWORD *)&v6.mBytesPerPacket = v3;
  *(void *)&v6.mBitsPerChannel = *(void *)(a2 + 40);
  double mSampleRate = v6.mSampleRate;
  return *(double *)v7 == mSampleRate
      && DWORD2(v7[0]) == v6.mFormatID
      && *(void *)&v7[1] == *(void *)&v6.mBytesPerPacket
      && *(void *)((char *)&v7[1] + 12) == *(void *)&v6.mChannelsPerFrame
      && CA::Implementation::EquivalentFormatFlags((CA::Implementation *)v7, &v6, 0, 0);
}

uint64_t AMCP::Graph::Converter_Cross_Timebase_Processor::get_dest_copy_buffer(AMCP::Graph::Converter_Cross_Timebase_Processor *this)
{
  return *(void *)(*((void *)this + 1) + 160);
}

uint64_t AMCP::Graph::Converter_Cross_Timebase_Processor::get_source_copy_buffer(AMCP::Graph::Converter_Cross_Timebase_Processor *this)
{
  return *(void *)(*((void *)this + 1) + 152);
}

double AMCP::Graph::Converter_Cross_Timebase_Processor::calculate_samples_through_processor(AMCP::Graph::Converter **a1, int a2, double *a3, double a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  double v4 = floor(a4);
  if (a4 != v4)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v10 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      double v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)AudioStreamRangedDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)uint64_t v28 = 2080;
      *(void *)&v28[2] = "Converter.cpp";
      __int16 v29 = 1024;
      int v30 = 557;
      __int16 v31 = 2080;
      *(void *)char v32 = "not (samples.get_double() == samples.floor().get_double())";
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We should have no fractional samples", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"We should have no fractional samples", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unint64_t v21 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(void *)&v32[6] = "virtual AMCP::DAL::Sample_Time AMCP::Graph::Converter_Cross_Timebase_Processor::calculate_sampl"
                         "es_through_processor(Buffer_Alignment, AMCP::DAL::Sample_Time, AMCP::DAL::Sample_Time &) const";
    uint64_t v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    int v34 = 557;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    uint64_t v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v6 = (uint64_t)v4;
  if (a2)
  {
    uint64_t required_input_samples_for_output_samples = AMCP::Graph::Converter::get_required_input_samples_for_output_samples(a1[1], v6);
  }
  else
  {
    *(void *)AudioStreamRangedDescription buf = (uint64_t)v4;
    uint64_t required_input_samples_for_output_samples = AMCP::Graph::Converter::get_expected_output_samples_for_input_samples(a1[1], v6, (unint64_t *)buf);
    *a3 = (double)*(unint64_t *)buf;
  }
  return (double)(unint64_t)required_input_samples_for_output_samples;
}

void sub_1BACFB2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Converter::get_expected_output_samples_for_input_samples(AMCP::Graph::Converter *this, uint64_t a2, unint64_t *a3)
{
  uint64_t v6 = (void *)((char *)this + 48);
  std::string::basic_string[abi:ne180100]<0>(&__p, "scale");
  long long v7 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v6, (unsigned __int8 *)&__p);
  if (v7) {
    BOOL v8 = AMCP::Thing::convert_to<BOOL>((uint64_t)(v7 + 40));
  }
  else {
    BOOL v8 = 0;
  }
  if (SHIBYTE(v50) < 0)
  {
    operator delete(__p);
    if (!v8) {
      return a2;
    }
  }
  else if (!v8)
  {
    return a2;
  }
  v40[0] = 0;
  v40[1] = 0;
  AMCP::DAL::DAL_Settings::DAL_Settings((unint64_t)&__p, (uint64_t *)v40);
  std::string::basic_string[abi:ne180100]<0>(v40, "expected output samples for input samples");
  AMCP::DAL::DAL_Settings::add<unsigned long long>((unint64_t)&__p, (long long *)v40, a2);
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  unint64_t v10 = (std::__shared_weak_count *)*((void *)this + 14);
  uint64_t v9 = *((void *)this + 15);
  uint64_t v46 = *((void *)this + 13);
  int v47 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t *, void **))(*(void *)v9 + 136))(v9, &v46, &__p);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  v39[0] = 0;
  v39[1] = 0;
  AMCP::DAL::DAL_Settings::DAL_Settings((unint64_t)v40, v39);
  if (v52 == v43 || (*(unsigned int (**)(uint64_t))(*(void *)v52 + 32))(v52))
  {
    if (v53)
    {
      std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__deallocate_node((uint64_t)&__p, v51);
      uint64_t v51 = 0;
      uint64_t v12 = v49;
      if (v49)
      {
        uint64_t v13 = 0;
        do
          *((void *)__p + v13++) = 0;
        while (v12 != v13);
      }
      uint64_t v53 = 0;
    }
    uint64_t v14 = v40[0];
    v40[0] = 0;
    uint64_t v15 = __p;
    __p = v14;
    if (v15) {
      std::allocator_traits<std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *> *> *>>::deallocate[abi:ne180100](v50, (uint64_t)v15, v49);
    }
    unint64_t v16 = (unint64_t)v40[1];
    v40[1] = 0;
    uint64_t v53 = v44;
    int v54 = v45;
    unint64_t v49 = v16;
    uint64_t v51 = v42;
    if (v44)
    {
      unint64_t v17 = v42[1];
      if ((v16 & (v16 - 1)) != 0)
      {
        if (v17 >= v16) {
          v17 %= v16;
        }
      }
      else
      {
        v17 &= v16 - 1;
      }
      *((void *)__p + v17) = &v51;
      CFTypeID v42 = 0;
      uint64_t v44 = 0;
    }
  }
  else
  {
    int v54 = v45;
    uint64_t v18 = v49;
    if (v49)
    {
      uint64_t v19 = 0;
      do
        *((void *)__p + v19++) = 0;
      while (v18 != v19);
      std::logic_error v20 = v51;
      uint64_t v53 = 0;
      uint64_t v51 = 0;
      for (uint64_t i = v42; ; uint64_t i = v23)
      {
        uint64_t v22 = (uint64_t)v20;
        if (!v20 || !v44) {
          break;
        }
        uint64_t v23 = (void *)*i;
        std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::remove((uint64_t)&v57, v40, i);
        uint64_t v25 = v57;
        char v26 = (void **)(v22 + 16);
        if (*(char *)(v22 + 39) < 0) {
          operator delete(*v26);
        }
        long long v27 = *(_OWORD *)(v25 + 16);
        *(void *)(v22 + 32) = *(void *)(v25 + 32);
        *(_OWORD *)char v26 = v27;
        *(unsigned char *)(v25 + 39) = 0;
        *(unsigned char *)(v25 + 16) = 0;
        AMCP::swap((AMCP::Thing *)(v25 + 40), (AMCP::Thing *)(v22 + 40), v24);
        uint64_t v28 = v57;
        if (v57)
        {
          if (v59) {
            std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *>>::destroy[abi:ne180100]<std::pair<std::string const,AMCP::Thing>>(v57 + 16);
          }
          std::allocator_traits<std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *>>>::deallocate[abi:ne180100](*v58, v28);
        }
        std::logic_error v20 = *(void **)v22;
        std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__node_insert_multi((uint64_t)&__p, v22);
      }
      std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__deallocate_node((uint64_t)&__p, v20);
    }
    if (v44)
    {
      __int16 v29 = v42;
      do
      {
        int v30 = (void *)*v29;
        std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::remove((uint64_t)v55, v40, v29);
        uint64_t v31 = v55[0];
        char v32 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v52 + 16))(v52, 80, 8);
        uint64_t v58 = &v52;
        void *v32 = 0;
        v32[1] = 0;
        uint64_t v33 = std::pair<std::string const,AMCP::Thing>::pair[abi:ne180100]<std::string&&,AMCP::Thing&&>((uint64_t)(v32 + 2), (long long *)(v31 + 16), v31 + 40);
        char v59 = 1;
        v32[1] = std::__string_hash<char>::operator()[abi:ne180100](v33);
        if (v31)
        {
          if (v56) {
            std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *>>::destroy[abi:ne180100]<std::pair<std::string const,AMCP::Thing>>(v31 + 16);
          }
          std::allocator_traits<std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *>>>::deallocate[abi:ne180100](*(void *)v55[1], v31);
        }
        std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__node_insert_multi((uint64_t)&__p, (uint64_t)v32);
        __int16 v29 = v30;
      }
      while (v44);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)v40);
  std::string::basic_string[abi:ne180100]<0>(v40, "actual input samples consumed");
  AMCP::DAL::DAL_Settings::add<unsigned long long>((unint64_t)&__p, (long long *)v40, a2);
  if (v41 < 0) {
    operator delete(v40[0]);
  }
  uint64_t v35 = (std::__shared_weak_count *)*((void *)this + 14);
  uint64_t v34 = *((void *)this + 15);
  uint64_t v37 = *((void *)this + 13);
  unint64_t v38 = v35;
  if (v35) {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *a3 = (*(uint64_t (**)(uint64_t, uint64_t *, void **))(*(void *)v34 + 136))(v34, &v37, &__p);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)&__p);
  return v11;
}

void sub_1BACFB804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Converter::get_required_input_samples_for_output_samples(AMCP::Graph::Converter *this, uint64_t a2)
{
  double v4 = (void *)((char *)this + 48);
  std::string::basic_string[abi:ne180100]<0>(__p, "scale");
  unint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v4, (unsigned __int8 *)__p);
  if (v5) {
    BOOL v6 = AMCP::Thing::convert_to<BOOL>((uint64_t)(v5 + 40));
  }
  else {
    BOOL v6 = 0;
  }
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if (!v6) {
      return a2;
    }
  }
  else if (!v6)
  {
    return a2;
  }
  v12[0] = 0;
  v12[1] = 0;
  AMCP::DAL::DAL_Settings::DAL_Settings((unint64_t)__p, (uint64_t *)v12);
  std::string::basic_string[abi:ne180100]<0>(v12, "required input samples for output samples");
  AMCP::DAL::DAL_Settings::add<unsigned long long>((unint64_t)__p, (long long *)v12, a2);
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  BOOL v8 = (std::__shared_weak_count *)*((void *)this + 14);
  uint64_t v7 = *((void *)this + 15);
  uint64_t v10 = *((void *)this + 13);
  uint64_t v11 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  a2 = (*(uint64_t (**)(uint64_t, uint64_t *, void **))(*(void *)v7 + 136))(v7, &v10, __p);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
  return a2;
}

void sub_1BACFBA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_1BACFBA44(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1BACFBA3CLL);
}

void AMCP::DAL::DAL_Settings::add<unsigned long long>(unint64_t a1, long long *a2, uint64_t a3)
{
  v4[0] = a3;
  memset(&v4[1], 0, 24);
  unint64_t v5 = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
  std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<std::string const&,AMCP::Thing,0>(&__p, a2, (uint64_t)v4);
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__emplace_unique_key_args<std::string,std::pair<std::string,AMCP::Thing>>(a1, (unsigned __int8 *)&__p, (long long *)&__p);
  if (v8) {
    v8(0, &v7, 0, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v5) {
    v5(0, (uint64_t)v4, 0, 0);
  }
}

void sub_1BACFBB0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::pair<std::string,AMCP::Thing>::~pair((uint64_t)va1);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<std::string const&,AMCP::Thing,0>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = 0u;
  this[2].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(a3 + 32);
  if (v6) {
    v6(2, a3);
  }
  return this;
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__emplace_unique_key_args<std::string,std::pair<std::string,AMCP::Thing>>(unint64_t a1, unsigned __int8 *a2, long long *a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          unint64_t result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(i + 16, a2);
          if (result) {
            return result;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v16 = (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), 80, 8);
  *unint64_t v16 = 0;
  v16[1] = v8;
  unint64_t result = std::pair<std::string const,AMCP::Thing>::pair[abi:ne180100]<std::string&&,AMCP::Thing&&>((uint64_t)(v16 + 2), a3, (uint64_t)a3 + 24);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
  float v18 = *(float *)(a1 + 48);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    unint64_t result = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__rehash<true>(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *unint64_t v16 = *v23;
LABEL_38:
    void *v23 = v16;
    goto LABEL_39;
  }
  *unint64_t v16 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v16;
  *(void *)(*(void *)a1 + 8 * v3) = a1 + 24;
  if (*v16)
  {
    unint64_t v24 = *(void *)(*v16 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 40);
  return result;
}

void sub_1BACFBE1C(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,AMCP::Thing>::pair[abi:ne180100]<std::string&&,AMCP::Thing&&>(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  long long v5 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(a3 + 32);
  if (v5) {
    v5(2, a3, a1 + 24, 0);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::remove(uint64_t result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)a2[1];
  unint64_t v4 = a3[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*a2 + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 3) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*a2 + 8 * v4) = 0;
  }
  uint64_t v10 = *a3;
  if (*a3)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*a2 + 8 * v11) = v7;
      uint64_t v10 = *a3;
    }
  }
  void *v7 = v10;
  *a3 = 0;
  --a2[5];
  *(void *)unint64_t result = a3;
  *(void *)(result + 8) = a2 + 4;
  *(unsigned char *)(result + 16) = 1;
  return result;
}

size_t std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  unint64_t v4 = (unsigned __int8 *)(a2 + 16);
  size_t result = std::__string_hash<char>::operator()[abi:ne180100](a2 + 16);
  size_t v41 = result;
  v2[1] = result;
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
  float v8 = *(float *)(a1 + 48);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      size_t v12 = v11;
    }
    else {
      size_t v12 = v10;
    }
    if (v12 == 1)
    {
      size_t v12 = 2;
    }
    else if ((v12 & (v12 - 1)) != 0)
    {
      size_t result = std::__next_prime(v12);
      size_t v12 = result;
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (v12 > v6) {
      goto LABEL_13;
    }
    if (v12 >= v6) {
      goto LABEL_59;
    }
    size_t result = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 48));
    if (v6 < 3 || (uint8x8_t v19 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v19.i16[0] = vaddlv_u8(v19), v19.u32[0] > 1uLL))
    {
      size_t result = std::__next_prime(result);
    }
    else
    {
      uint64_t v20 = 1 << -(char)__clz(result - 1);
      if (result >= 2) {
        size_t result = v20;
      }
    }
    if (v12 <= result) {
      size_t v12 = result;
    }
    if (v12 >= v6)
    {
      unint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_59;
    }
    if (v12)
    {
LABEL_13:
      size_t result = std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *> *> *>::allocate[abi:ne180100](a1 + 16, v12);
      uint64_t v13 = *(void *)a1;
      *(void *)a1 = result;
      if (v13) {
        size_t result = std::allocator_traits<std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *> *> *>>::deallocate[abi:ne180100](*(void *)(a1 + 16), v13, *(void *)(a1 + 8));
      }
      CFNumberRef v39 = v4;
      uint64_t v14 = 0;
      *(void *)(a1 + 8) = v12;
      do
        *(void *)(*(void *)a1 + 8 * v14++) = 0;
      while (v12 != v14);
      char v15 = *(uint64_t **)(a1 + 24);
      if (v15)
      {
        size_t v16 = v15[1];
        uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v17.i16[0] = vaddlv_u8(v17);
        unint64_t v18 = v17.u32[0];
        unint64_t v38 = v2;
        if (v17.u32[0] > 1uLL)
        {
          if (v16 >= v12) {
            v16 %= v12;
          }
        }
        else
        {
          v16 &= v12 - 1;
        }
        *(void *)(*(void *)a1 + 8 * v16) = a1 + 24;
        uint64_t v21 = *v15;
        if (*v15)
        {
          unint64_t v40 = v17.u32[0];
          do
          {
            size_t v22 = *(void *)(v21 + 8);
            if (v18 > 1)
            {
              if (v22 >= v12) {
                v22 %= v12;
              }
            }
            else
            {
              v22 &= v12 - 1;
            }
            if (v22 == v16)
            {
              char v15 = (uint64_t *)v21;
            }
            else if (*(void *)(*(void *)a1 + 8 * v22))
            {
              uint64_t v23 = *(void **)v21;
              if (*(void *)v21)
              {
                unint64_t v24 = (void *)v21;
                while (1)
                {
                  uint64_t v25 = v23;
                  size_t result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>((unsigned __int8 *)(v21 + 16), (unsigned __int8 *)v23 + 16);
                  if (!result) {
                    break;
                  }
                  uint64_t v23 = (void *)*v25;
                  unint64_t v24 = v25;
                  if (!*v25) {
                    goto LABEL_46;
                  }
                }
                uint64_t v23 = v25;
                uint64_t v25 = v24;
LABEL_46:
                unint64_t v18 = v40;
              }
              else
              {
                uint64_t v25 = (void *)v21;
              }
              *char v15 = (uint64_t)v23;
              void *v25 = **(void **)(*(void *)a1 + 8 * v22);
              **(void **)(*(void *)a1 + 8 * v22) = v21;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v22) = v15;
              char v15 = (uint64_t *)v21;
              size_t v16 = v22;
            }
            uint64_t v21 = *v15;
          }
          while (*v15);
        }
        unint64_t v6 = v12;
        uint64_t v2 = v38;
        unint64_t v4 = v39;
      }
      else
      {
        unint64_t v6 = v12;
        unint64_t v4 = v39;
      }
    }
    else
    {
      uint64_t v26 = *(void *)a1;
      *(void *)a1 = 0;
      if (v26) {
        size_t result = std::allocator_traits<std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *> *> *>>::deallocate[abi:ne180100](*(void *)(a1 + 16), v26, *(void *)(a1 + 8));
      }
      unint64_t v6 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_59:
  uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v27.i16[0] = vaddlv_u8(v27);
  unint64_t v28 = v27.u32[0];
  if (v27.u32[0] > 1uLL)
  {
    unint64_t v29 = v41;
    if (v6 <= v41) {
      unint64_t v29 = v41 % v6;
    }
  }
  else
  {
    unint64_t v29 = (v6 - 1) & v41;
  }
  int v30 = *(unsigned __int8 **)(*(void *)a1 + 8 * v29);
  if (v30)
  {
    uint64_t v31 = *(unsigned __int8 **)v30;
    if (*(void *)v30)
    {
      int v32 = 0;
      do
      {
        uint64_t v33 = v31;
        unint64_t v34 = *((void *)v31 + 1);
        if (v28 > 1)
        {
          unint64_t v35 = v34;
          if (v34 >= v6) {
            unint64_t v35 = v34 % v6;
          }
        }
        else
        {
          unint64_t v35 = v34 & (v6 - 1);
        }
        if (v35 != v29) {
          break;
        }
        size_t result = v34 == v41 && (uint64_t)std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v33 + 16, v4);
        if (v32 & (result ^ 1)) {
          break;
        }
        v32 |= result;
        uint64_t v31 = *(unsigned __int8 **)v33;
        int v30 = v33;
      }
      while (*(void *)v33);
    }
  }
  unint64_t v36 = v2[1];
  if (v28 > 1)
  {
    if (v36 >= v6) {
      v36 %= v6;
    }
  }
  else
  {
    v36 &= v6 - 1;
  }
  if (!v30)
  {
    void *v2 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v2;
    *(void *)(*(void *)a1 + 8 * v36) = a1 + 24;
    if (!*v2) {
      goto LABEL_94;
    }
    unint64_t v37 = *(void *)(*v2 + 8);
    if (v28 > 1)
    {
      if (v37 >= v6) {
        v37 %= v6;
      }
    }
    else
    {
      v37 &= v6 - 1;
    }
LABEL_93:
    *(void *)(*(void *)a1 + 8 * v37) = v2;
    goto LABEL_94;
  }
  void *v2 = *(void *)v30;
  *(void *)int v30 = v2;
  if (*v2)
  {
    unint64_t v37 = *(void *)(*v2 + 8);
    if (v28 > 1)
    {
      if (v37 >= v6) {
        v37 %= v6;
      }
    }
    else
    {
      v37 &= v6 - 1;
    }
    if (v37 != v36) {
      goto LABEL_93;
    }
  }
LABEL_94:
  ++*(void *)(a1 + 40);
  return result;
}

void AMCP::Graph::Converter_Cross_Timebase_Processor::process(uint64_t a1@<X0>, AMCP::Log::Scope_Registry **a2@<X1>, double *a3@<X2>, void *a4@<X3>, double *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  long double v12 = *(double *)(a1 + 24);
  if (round(v12) != 0.0)
  {
    if (*a2)
    {
      long double v13 = (*(double (**)(AMCP::Log::Scope_Registry *))(*(void *)*a2 + 48))(*a2);
      long double v12 = *(double *)(a1 + 24);
    }
    else
    {
      long double v13 = 0.0;
    }
    if (round(*a3) != round(fmod(v12, v13)))
    {
      AMCP::Log::Scope_Registry::get(v14);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unint64_t v40 = **(NSObject ***)buf;
      if (*(void *)v62) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v62);
      }
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        size_t v41 = pthread_self();
        mach_port_t v42 = pthread_mach_thread_np(v41);
        *(_DWORD *)AudioStreamRangedDescription buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v42;
        *(_WORD *)uint64_t v62 = 2080;
        *(void *)&v62[2] = "Converter.cpp";
        __int16 v63 = 1024;
        int v64 = 543;
        __int16 v65 = 2080;
        *(void *)uint64_t v66 = "not (m_current_source == 0_S or source_local_range.start() == (m_current_source % source_contai"
                         "ner.get_length_in_frames()))";
        _os_log_error_impl(&dword_1BAA78000, v40, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Discontiguous source ranges", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v60);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Discontiguous source ranges", (uint64_t)&v52);
      std::logic_error::logic_error(&v53, &v52);
      v53.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v54, &v53);
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      int v59 = -1;
      v54.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      uint64_t v55 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v54);
      *(void *)&v66[6] = "virtual std::pair<Object_ID, AMCP::DAL::Sample_Time_Range> AMCP::Graph::Converter_Cross_Timeb"
                           "ase_Processor::process(AMCP::DAL::Container, const AMCP::DAL::Sample_Time_Range &, AMCP::DAL:"
                           ":Container, const AMCP::DAL::Sample_Time_Range &) const";
      uint64_t v67 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
      int v68 = 543;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v47);
      long long v50 = v47;
      uint64_t v51 = v48;
      long long v47 = 0uLL;
      uint64_t v48 = 0;
      unint64_t v49 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
  }
  long double v15 = *(double *)(a1 + 32);
  if (round(v15) != 0.0)
  {
    if (*a4)
    {
      long double v16 = (*(double (**)(void))(*(void *)*a4 + 48))(*a4);
      long double v15 = *(double *)(a1 + 32);
    }
    else
    {
      long double v16 = 0.0;
    }
    if (round(*a5) != round(fmod(v15, v16)))
    {
      AMCP::Log::Scope_Registry::get(v17);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v43 = **(NSObject ***)buf;
      if (*(void *)v62) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v62);
      }
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        uint64_t v44 = pthread_self();
        mach_port_t v45 = pthread_mach_thread_np(v44);
        *(_DWORD *)AudioStreamRangedDescription buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v45;
        *(_WORD *)uint64_t v62 = 2080;
        *(void *)&v62[2] = "Converter.cpp";
        __int16 v63 = 1024;
        int v64 = 544;
        __int16 v65 = 2080;
        *(void *)uint64_t v66 = "not (m_current_dest == 0_S or dest_local_range.start() == (m_current_dest % dest_container.get_"
                         "length_in_frames()))";
        _os_log_error_impl(&dword_1BAA78000, v43, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Discontiguous source ranges", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v60);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Discontiguous source ranges", (uint64_t)&v52);
      std::logic_error::logic_error(&v53, &v52);
      v53.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v54, &v53);
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      int v59 = -1;
      v54.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      uint64_t v55 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v54);
      *(void *)&v66[6] = "virtual std::pair<Object_ID, AMCP::DAL::Sample_Time_Range> AMCP::Graph::Converter_Cross_Timeb"
                           "ase_Processor::process(AMCP::DAL::Container, const AMCP::DAL::Sample_Time_Range &, AMCP::DAL:"
                           ":Container, const AMCP::DAL::Sample_Time_Range &) const";
      uint64_t v67 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
      int v68 = 544;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v47);
      long long v50 = v47;
      uint64_t v51 = v48;
      long long v47 = 0uLL;
      uint64_t v48 = 0;
      unint64_t v49 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
  }
  uint64_t v18 = *(void *)(a1 + 8);
  std::logic_error v19 = *(std::logic_error *)(v18 + 104);
  std::logic_error v46 = v19;
  if (v19.__imp_.__imp_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v19.__imp_.__imp_ + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = *a2;
  if (*a2)
  {
    if (*a4) {
      int v21 = *(_DWORD *)(*a4 + 16);
    }
    else {
      int v21 = 0;
    }
    if (*((_DWORD *)v20 + 4) != v21)
    {
      AMCP::Log::Scope_Registry::get(v20);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unint64_t v34 = **(NSObject ***)buf;
      if (*(void *)v62) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v62);
      }
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        unint64_t v35 = pthread_self();
        mach_port_t v36 = pthread_mach_thread_np(v35);
        *(_DWORD *)AudioStreamRangedDescription buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v36;
        *(_WORD *)uint64_t v62 = 2080;
        *(void *)&v62[2] = "Container.cpp";
        __int16 v63 = 1024;
        int v64 = 129;
        __int16 v65 = 2080;
        *(void *)uint64_t v66 = "not (get_format().mFormatID == dest_container.get_format().mFormatID)";
        _os_log_error_impl(&dword_1BAA78000, v34, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Container::dal_operation_apply: Containers Are Not Compatible", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v60);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Container::dal_operation_apply: Containers Are Not Compatible", (uint64_t)&v52);
      std::logic_error::logic_error(&v53, &v52);
      v53.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v54, &v53);
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      int v59 = -1;
      v54.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      uint64_t v55 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v54);
      *(void *)&v66[6] = "Sample_Time_Range AMCP::DAL::Container::dal_operation_apply(const Sample_Time_Range &, const "
                           "Container &, const Sample_Time_Range &, const DAL_Settings &, DAL_Operation_Context_Ref)";
      uint64_t v67 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Container.cpp";
      int v68 = 129;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v47);
      long long v50 = v47;
      uint64_t v51 = v48;
      long long v47 = 0uLL;
      uint64_t v48 = 0;
      unint64_t v49 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    uint64_t v24 = v18 + 48;
    uint64_t v25 = a4[1];
    *(void *)AudioStreamRangedDescription buf = *a4;
    *(void *)uint64_t v62 = v25;
    if (v25) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
    }
    double v26 = *a5;
    double v27 = a5[1];
    std::logic_error v54 = v46;
    double v22 = (*(double (**)(AMCP::Log::Scope_Registry *, double *, uint8_t *, uint64_t, std::logic_error *, double, double))(*(void *)v20 + 128))(v20, a3, buf, v24, &v54, v26, v27);
    double v23 = v28;
    if (v54.__imp_.__imp_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v54.__imp_.__imp_);
    }
    std::logic_error v46 = (std::logic_error)0;
    if (*(void *)v62) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v62);
    }
  }
  else
  {
    double v22 = *a5;
    double v23 = a5[1];
  }
  imp = (AMCP::Log::Scope_Registry *)v46.__imp_.__imp_;
  if (v46.__imp_.__imp_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v46.__imp_.__imp_);
  }
  if (round(v22) != round(*a5))
  {
    AMCP::Log::Scope_Registry::get(imp);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v31 = **(NSObject ***)buf;
    if (*(void *)v62) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v62);
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      int v32 = pthread_self();
      mach_port_t v33 = pthread_mach_thread_np(v32);
      *(_DWORD *)AudioStreamRangedDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v33;
      *(_WORD *)uint64_t v62 = 2080;
      *(void *)&v62[2] = "Converter.cpp";
      __int16 v63 = 1024;
      int v64 = 548;
      __int16 v65 = 2080;
      *(void *)uint64_t v66 = "not (result_range.start() == dest_local_range.start())";
      _os_log_error_impl(&dword_1BAA78000, v31, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v60);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v52);
    std::logic_error::logic_error(&v53, &v52);
    v53.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v54, &v53);
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    int v59 = -1;
    v54.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v55 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v54);
    *(void *)&v66[6] = "virtual std::pair<Object_ID, AMCP::DAL::Sample_Time_Range> AMCP::Graph::Converter_Cross_Timebas"
                         "e_Processor::process(AMCP::DAL::Container, const AMCP::DAL::Sample_Time_Range &, AMCP::DAL::Con"
                         "tainer, const AMCP::DAL::Sample_Time_Range &) const";
    uint64_t v67 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    int v68 = 548;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v47);
    long long v50 = v47;
    uint64_t v51 = v48;
    long long v47 = 0uLL;
    uint64_t v48 = 0;
    unint64_t v49 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  double v30 = v23 - a5[1];
  if (round(v30) < 0.0) {
    double v30 = 0.0 - v30;
  }
  if (round(v30) >= 2.0 && round(v23 - v22) != round(a3[1] - *a3))
  {
    AMCP::Log::Scope_Registry::get(imp);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v37 = **(NSObject ***)buf;
    if (*(void *)v62) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v62);
    }
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      unint64_t v38 = pthread_self();
      mach_port_t v39 = pthread_mach_thread_np(v38);
      *(_DWORD *)AudioStreamRangedDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v39;
      *(_WORD *)uint64_t v62 = 2080;
      *(void *)&v62[2] = "Converter.cpp";
      __int16 v63 = 1024;
      int v64 = 549;
      __int16 v65 = 2080;
      *(void *)uint64_t v66 = "not ((abs(result_range.end() - dest_local_range.end()) < 2_S) or result_range.length() == source_"
                       "local_range.length())";
      _os_log_error_impl(&dword_1BAA78000, v37, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v60);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v52);
    std::logic_error::logic_error(&v53, &v52);
    v53.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v54, &v53);
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    int v59 = -1;
    v54.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v55 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v54);
    *(void *)&v66[6] = "virtual std::pair<Object_ID, AMCP::DAL::Sample_Time_Range> AMCP::Graph::Converter_Cross_Timebas"
                         "e_Processor::process(AMCP::DAL::Container, const AMCP::DAL::Sample_Time_Range &, AMCP::DAL::Con"
                         "tainer, const AMCP::DAL::Sample_Time_Range &) const";
    uint64_t v67 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    int v68 = 549;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v47);
    long long v50 = v47;
    uint64_t v51 = v48;
    long long v47 = 0uLL;
    uint64_t v48 = 0;
    unint64_t v49 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  *(_DWORD *)a6 = *(_DWORD *)(a1 + 16);
  *(double *)(a6 + 8) = v22;
  *(double *)(a6 + 16) = v23;
}

void sub_1BACFD124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25,std::__shared_weak_count *a26)
{
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  double v28 = *(std::__shared_weak_count **)(v26 - 152);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Converter_Cross_Timebase_Processor::~Converter_Cross_Timebase_Processor(AMCP::Graph::Converter_Cross_Timebase_Processor *this)
{
}

void AMCP::Graph::Converter::Converter(AMCP::Graph::Converter *this, const AMCP::Graph::Graph_Wire::Conversion_Info *a2, const AMCP::Graph::Graph_Wire::Wire_Info *a3)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  unint64_t v6 = (std::string *)((char *)this + 16);
  std::string::basic_string[abi:ne180100]<0>((void *)this + 2, "converter");
  *((_DWORD *)this + 10) = *((_DWORD *)a3 + 50);
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
  AMCP::DAL::DAL_Settings::DAL_Settings((unint64_t)this + 48, (uint64_t *)&buf);
  uint64_t v7 = *((void *)a2 + 19);
  uint64_t v8 = *((void *)a2 + 21);
  if (v7 && v8)
  {
    BOOL v9 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
    uint64_t v10 = (*(uint64_t (**)(void))(**((void **)a2 + 21) + 16))(*((void *)a2 + 21));
    uint64_t v11 = v9[23];
    if ((v11 & 0x80u) == 0) {
      uint64_t v12 = v9[23];
    }
    else {
      uint64_t v12 = *((void *)v9 + 1);
    }
    uint64_t v13 = *(unsigned __int8 *)(v10 + 23);
    int v14 = (char)v13;
    if ((v13 & 0x80u) != 0) {
      uint64_t v13 = *(void *)(v10 + 8);
    }
    if (v12 == v13)
    {
      if (v14 >= 0) {
        long double v15 = (unsigned __int8 *)v10;
      }
      else {
        long double v15 = *(unsigned __int8 **)v10;
      }
      if ((v11 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v9, v15, *((void *)v9 + 1))) {
          goto LABEL_39;
        }
      }
      else
      {
        if (!v9[23]) {
          goto LABEL_39;
        }
        while (*v9 == *v15)
        {
          ++v9;
          ++v15;
          if (!--v11) {
            goto LABEL_39;
          }
        }
      }
    }
  }
  else if (!(v7 | v8))
  {
    goto LABEL_39;
  }
  (*(void (**)(long long *__return_ptr))(**((void **)a2 + 19) + 24))(&v43);
  int v16 = SBYTE7(v44);
  uint8x8_t v17 = (long long *)v43;
  (*(void (**)(void **__return_ptr))(**((void **)a2 + 21) + 24))(__p);
  uint64_t v18 = &v43;
  if (v16 < 0) {
    uint64_t v18 = v17;
  }
  if (v42 >= 0) {
    std::logic_error v19 = __p;
  }
  else {
    std::logic_error v19 = (void **)__p[0];
  }
  caulk::make_string((caulk *)" timebase(%s -> %s)", (uint64_t)&buf, v18, v19);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string buf = &buf;
  }
  else {
    p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = buf.__r_.__value_.__l.__size_;
  }
  std::string::append(v6, (const std::string::value_type *)p_buf, size);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (v42 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v44) < 0) {
    operator delete((void *)v43);
  }
  if (*(unsigned char *)a2)
  {
LABEL_40:
    double v22 = *((double *)a2 + 6);
    if (*((double *)a2 + 1) != v22)
    {
      caulk::make_string((caulk *)" - %s (%0.f -> %0.f)", (uint64_t)&buf, "scale", *((void *)a2 + 1), *(void *)&v22);
      double v23 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &buf
          : (std::string *)buf.__r_.__value_.__r.__words[0];
      std::string::size_type v24 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(buf.__r_.__value_.__r.__words[2])
          : buf.__r_.__value_.__l.__size_;
      std::string::append(v6, (const std::string::value_type *)v23, v24);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&buf, "scale");
    AMCP::DAL::DAL_Settings::add<BOOL>((unint64_t)this + 48, (long long *)&buf, 1);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "resampler type");
    long long v43 = 0u;
    long long v44 = 0u;
    LODWORD(v43) = *((_DWORD *)a2 + 22);
    mach_port_t v45 = AMCP::Implementation::In_Place_Storage<AMCP::Resampler_Type>::dispatch;
    std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<std::string const&,AMCP::Thing,0>(&buf, (long long *)__p, (uint64_t)&v43);
    std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__emplace_unique_key_args<std::string,std::pair<std::string,AMCP::Thing>>((unint64_t)this + 48, (unsigned __int8 *)&buf, (long long *)&buf);
    if (v48) {
      v48(0, &v47, 0, 0);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (v45) {
      v45(0, (uint64_t)&v43, 0, 0);
    }
    if (v42 < 0) {
      operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "resampler quality");
    long long v43 = 0u;
    long long v44 = 0u;
    LODWORD(v43) = *((_DWORD *)a2 + 23);
    mach_port_t v45 = AMCP::Implementation::In_Place_Storage<AMCP::Resampler_Quality>::dispatch;
    std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<std::string const&,AMCP::Thing,0>(&buf, (long long *)__p, (uint64_t)&v43);
    std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__emplace_unique_key_args<std::string,std::pair<std::string,AMCP::Thing>>((unint64_t)this + 48, (unsigned __int8 *)&buf, (long long *)&buf);
    if (v48) {
      v48(0, &v47, 0, 0);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (v45) {
      v45(0, (uint64_t)&v43, 0, 0);
    }
    if (v42 < 0) {
      operator delete(__p[0]);
    }
LABEL_67:
    if (*((unsigned char *)a2 + 2))
    {
      std::string::basic_string[abi:ne180100]<0>(&buf, "map channels");
      AMCP::DAL::DAL_Settings::add<BOOL>((unint64_t)this + 48, (long long *)&buf, 1);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v43, " - ");
      uint64_t v25 = std::string::append((std::string *)&v43, "map channels", 0xCuLL);
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      buf.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        double v27 = &buf;
      }
      else {
        double v27 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v28 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v28 = buf.__r_.__value_.__l.__size_;
      }
      std::string::append(v6, (const std::string::value_type *)v27, v28);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (SBYTE7(v44) < 0) {
        operator delete((void *)v43);
      }
    }
    if (*((unsigned char *)a2 + 3))
    {
      std::string::basic_string[abi:ne180100]<0>(&buf, "convert format");
      AMCP::DAL::DAL_Settings::add<BOOL>((unint64_t)this + 48, (long long *)&buf, 1);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v43, " - ");
      unint64_t v29 = std::string::append((std::string *)&v43, "convert format", 0xEuLL);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      buf.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v31 = &buf;
      }
      else {
        uint64_t v31 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v32 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v32 = buf.__r_.__value_.__l.__size_;
      }
      std::string::append(v6, (const std::string::value_type *)v31, v32);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (SBYTE7(v44) < 0) {
        operator delete((void *)v43);
      }
    }
    if (*((unsigned char *)a2 + 4))
    {
      std::string::basic_string[abi:ne180100]<0>(&buf, "mix channels to mono");
      AMCP::DAL::DAL_Settings::add<BOOL>((unint64_t)this + 48, (long long *)&buf, 1);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v43, " - ");
      mach_port_t v33 = std::string::append((std::string *)&v43, "mix channels to mono", 0x14uLL);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      buf.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v35 = &buf;
      }
      else {
        unint64_t v35 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v36 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v36 = buf.__r_.__value_.__l.__size_;
      }
      std::string::append(v6, (const std::string::value_type *)v35, v36);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (SBYTE7(v44) < 0) {
        operator delete((void *)v43);
      }
    }
    if (*((unsigned char *)a2 + 5))
    {
      std::string::basic_string[abi:ne180100]<0>(&buf, "volume processing");
      AMCP::DAL::DAL_Settings::add<BOOL>((unint64_t)this + 48, (long long *)&buf, 1);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v43, " - ");
      unint64_t v37 = std::string::append((std::string *)&v43, "volume processing", 0x11uLL);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      buf.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        mach_port_t v39 = &buf;
      }
      else {
        mach_port_t v39 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v40 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v40 = buf.__r_.__value_.__l.__size_;
      }
      std::string::append(v6, (const std::string::value_type *)v39, v40);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (SBYTE7(v44) < 0) {
        operator delete((void *)v43);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&buf, "source timebase");
    AMCP::DAL::DAL_Settings::add<std::shared_ptr<AMCP::Graph::Timebase>>((unint64_t)this + 48, (long long *)&buf, *((void *)a2 + 19), *((void *)a2 + 20));
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&buf, "dest timebase");
    AMCP::DAL::DAL_Settings::add<std::shared_ptr<AMCP::Graph::Timebase>>((unint64_t)this + 48, (long long *)&buf, *((void *)a2 + 21), *((void *)a2 + 22));
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&buf, "source format");
    AMCP::DAL::DAL_Settings::add<CA::StreamDescription>();
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "change clock with drift correction disabled");
  AMCP::DAL::DAL_Settings::add<BOOL>((unint64_t)this + 48, (long long *)&buf, 1);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
LABEL_39:
  if (!*(unsigned char *)a2) {
    goto LABEL_67;
  }
  goto LABEL_40;
}

void sub_1BACFE8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, void *a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  uint64_t v59 = *(void *)(v55 + 160);
  *(void *)(v55 + 160) = 0;
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
  }
  uint64_t v60 = *(void *)(v55 + 152);
  *(void *)(v55 + 152) = 0;
  if (v60) {
    (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
  }
  uint64_t v61 = *(std::__shared_weak_count **)(v55 + 144);
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  uint64_t v62 = *(std::__shared_weak_count **)(v55 + 128);
  if (v62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
  __int16 v63 = *(std::__shared_weak_count **)(v55 + 112);
  if (v63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v63);
  }
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table(v56);
  if (*(char *)(v55 + 39) < 0) {
    operator delete(*v57);
  }
  int v64 = *(std::__shared_weak_count **)(v55 + 8);
  if (v64) {
    std::__shared_weak_count::__release_weak(v64);
  }
  _Unwind_Resume(a1);
}

__n128 AMCP::DAL::DAL_Settings::at_or<std::shared_ptr<AMCP::Graph::Timebase>>(__n128 *a1, void *a2, unsigned __int8 *a3, __n128 *a4)
{
  unint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, a3);
  if (v6)
  {
    AMCP::Thing::convert_to<std::shared_ptr<AMCP::Graph::Timebase>>(a1, (uint64_t)(v6 + 40));
  }
  else
  {
    __n128 result = *a4;
    *a1 = *a4;
    a4->n128_u64[0] = 0;
    a4->n128_u64[1] = 0;
  }
  return result;
}

void AMCP::Graph::Converter::update_settings(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, double *a5)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "scale");
  uint64_t v10 = (void *)(a1 + 48);
  uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(v10, (unsigned __int8 *)&__p);
  if (v11) {
    BOOL v12 = AMCP::Thing::convert_to<BOOL>((uint64_t)(v11 + 40));
  }
  else {
    BOOL v12 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v12) {
      return;
    }
  }
  else if (!v12)
  {
    return;
  }
  if ((*(double (**)(void))(**(void **)a2 + 152))() != *a4)
  {
    AMCP::Log::Scope_Registry::get(v13);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    int v21 = *(NSObject **)__p.__r_.__value_.__l.__data_;
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      double v22 = pthread_self();
      mach_port_t v23 = pthread_mach_thread_np(v22);
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v23;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Converter.cpp";
      WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(__p.__r_.__value_.__r.__words[2]) = 284;
      __int16 v48 = 2080;
      *(void *)uint64_t v49 = "not (source_timebase->get_sample_rate() == source_format.mSampleRate)";
      _os_log_error_impl(&dword_1BAA78000, v21, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s source sample rate differs from source timebase rate", (uint8_t *)&__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v46);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"source sample rate differs from source timebase rate", (uint64_t)&v38);
    std::logic_error::logic_error(&v39, &v38);
    v39.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v40, &v39);
    uint64_t v42 = 0;
    long long v43 = 0;
    uint64_t v44 = 0;
    int v45 = -1;
    v40.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    size_t v41 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v40);
    *(void *)&v49[6] = "void AMCP::Graph::Converter::update_settings(const Timebase_Ref &, const Timebase_Ref &, const "
                         "CA::StreamDescription &, const CA::StreamDescription &) const";
    long long v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    int v51 = 284;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v33);
    long long v36 = v33;
    uint64_t v37 = v34;
    long long v33 = 0uLL;
    uint64_t v34 = 0;
    unint64_t v35 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if ((*(double (**)(void))(**(void **)a3 + 152))() != *a5)
  {
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    std::string::size_type v24 = *(NSObject **)__p.__r_.__value_.__l.__data_;
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = pthread_self();
      mach_port_t v26 = pthread_mach_thread_np(v25);
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = v26;
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Converter.cpp";
      WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(__p.__r_.__value_.__r.__words[2]) = 285;
      __int16 v48 = 2080;
      *(void *)uint64_t v49 = "not (dest_timebase->get_sample_rate() == dest_format.mSampleRate)";
      _os_log_error_impl(&dword_1BAA78000, v24, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s dest sample rate differs from source timebase rate", (uint8_t *)&__p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v46);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"dest sample rate differs from source timebase rate", (uint64_t)&v38);
    std::logic_error::logic_error(&v39, &v38);
    v39.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v40, &v39);
    uint64_t v42 = 0;
    long long v43 = 0;
    uint64_t v44 = 0;
    int v45 = -1;
    v40.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    size_t v41 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v40);
    *(void *)&v49[6] = "void AMCP::Graph::Converter::update_settings(const Timebase_Ref &, const Timebase_Ref &, const "
                         "CA::StreamDescription &, const CA::StreamDescription &) const";
    long long v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    int v51 = 285;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v33);
    long long v36 = v33;
    uint64_t v37 = v34;
    long long v33 = 0uLL;
    uint64_t v34 = 0;
    unint64_t v35 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  int v15 = (*(uint64_t (**)(void))(**(void **)a2 + 48))();
  if (v15 == (*(unsigned int (**)(void))(**(void **)a3 + 48))()
    && (*(unsigned int (**)(void))(**(void **)a2 + 48))()
    && (double v16 = (*(double (**)(void))(**(void **)a2 + 152))(), v16 == (*(double (**)(void))(**(void **)a3 + 152))()))
  {
    double v20 = 1.0;
  }
  else
  {
    if ((*(double (**)(void))(**(void **)a2 + 152))() != *a4)
    {
      AMCP::Log::Scope_Registry::get(v17);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
      double v27 = *(NSObject **)__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        std::string::size_type v28 = pthread_self();
        mach_port_t v29 = pthread_mach_thread_np(v28);
        LODWORD(__p.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(__p.__r_.__value_.__r.__words[0]) = v29;
        LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Converter.cpp";
        WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(__p.__r_.__value_.__r.__words[2]) = 291;
        __int16 v48 = 2080;
        *(void *)uint64_t v49 = "not (source_timebase->get_sample_rate() == source_format.mSampleRate)";
        _os_log_error_impl(&dword_1BAA78000, v27, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&__p, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v46);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v38);
      std::logic_error::logic_error(&v39, &v38);
      v39.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v40, &v39);
      uint64_t v42 = 0;
      long long v43 = 0;
      uint64_t v44 = 0;
      int v45 = -1;
      v40.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      size_t v41 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v40);
      *(void *)&v49[6] = "void AMCP::Graph::Converter::update_settings(const Timebase_Ref &, const Timebase_Ref &, cons"
                           "t CA::StreamDescription &, const CA::StreamDescription &) const";
      long long v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
      int v51 = 291;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v33);
      long long v36 = v33;
      uint64_t v37 = v34;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      unint64_t v35 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    if ((*(double (**)(void))(**(void **)a3 + 152))() != *a5)
    {
      AMCP::Log::Scope_Registry::get(v18);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
      long long v30 = *(NSObject **)__p.__r_.__value_.__l.__data_;
      if (__p.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        uint64_t v31 = pthread_self();
        mach_port_t v32 = pthread_mach_thread_np(v31);
        LODWORD(__p.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(__p.__r_.__value_.__r.__words[0]) = v32;
        LOWORD(__p.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Converter.cpp";
        WORD1(__p.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(__p.__r_.__value_.__r.__words[2]) = 292;
        __int16 v48 = 2080;
        *(void *)uint64_t v49 = "not (dest_timebase->get_sample_rate() == dest_format.mSampleRate)";
        _os_log_error_impl(&dword_1BAA78000, v30, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&__p, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v46);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v38);
      std::logic_error::logic_error(&v39, &v38);
      v39.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v40, &v39);
      uint64_t v42 = 0;
      long long v43 = 0;
      uint64_t v44 = 0;
      int v45 = -1;
      v40.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      size_t v41 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v40);
      *(void *)&v49[6] = "void AMCP::Graph::Converter::update_settings(const Timebase_Ref &, const Timebase_Ref &, cons"
                           "t CA::StreamDescription &, const CA::StreamDescription &) const";
      long long v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
      int v51 = 292;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v33);
      long long v36 = v33;
      uint64_t v37 = v34;
      long long v33 = 0uLL;
      uint64_t v34 = 0;
      unint64_t v35 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    double v19 = (*(double (**)(void))(**(void **)a3 + 72))();
    double v20 = v19 / (*(double (**)(void))(**(void **)a2 + 72))();
  }
  std::string::basic_string[abi:ne180100]<0>(&v35, "scale ratio");
  v40.__imp_.__imp_ = 0;
  size_t v41 = 0;
  *(double *)&v40.__vftable = v20;
  uint64_t v42 = 0;
  long long v43 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
  std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<std::string const&,AMCP::Thing,0>(&__p, (long long *)&v35, (uint64_t)&v40);
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__emplace_unique_key_args<std::string,std::pair<std::string,AMCP::Thing>>((unint64_t)v10, (unsigned __int8 *)&__p, (long long *)&__p);
  if (v52) {
    v52(0, &v48, 0, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v43) {
    v43(0, (uint64_t)&v40, 0, 0);
  }
  if (SHIBYTE(v36) < 0) {
    operator delete(v35);
  }
}

void sub_1BACFFA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, void *a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::DAL_Settings::add<BOOL>(unint64_t a1, long long *a2, char a3)
{
  memset(v4, 0, sizeof(v4));
  LOBYTE(v4[0]) = a3;
  uint8x8_t v5 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
  std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<std::string const&,AMCP::Thing,0>(&__p, a2, (uint64_t)v4);
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__emplace_unique_key_args<std::string,std::pair<std::string,AMCP::Thing>>(a1, (unsigned __int8 *)&__p, (long long *)&__p);
  if (v8) {
    v8(0, &v7, 0, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v5) {
    v5(0, (uint64_t)v4, 0, 0);
  }
}

void sub_1BACFFC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void AMCP::DAL::DAL_Settings::add<std::shared_ptr<AMCP::Graph::Timebase>>(unint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  v5[2] = 0;
  v5[3] = 0;
  v5[0] = a3;
  v5[1] = a4;
  if (a4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a4 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = AMCP::Implementation::In_Place_Storage<std::shared_ptr<AMCP::Graph::Timebase>>::dispatch;
  std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<std::string const&,AMCP::Thing,0>(&__p, a2, (uint64_t)v5);
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__emplace_unique_key_args<std::string,std::pair<std::string,AMCP::Thing>>(a1, (unsigned __int8 *)&__p, (long long *)&__p);
  if (v9) {
    v9(0, &v8, 0, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v6) {
    v6(0, (uint64_t)v5, 0, 0);
  }
}

void sub_1BACFFCE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::pair<std::string,AMCP::Thing>::~pair((uint64_t)va1);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::DAL::DAL_Settings::add<CA::StreamDescription>()
{
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  uint64_t v3 = AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
  operator new();
}

void sub_1BACFFDF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::pair<std::string,AMCP::Thing>::~pair((uint64_t)va1);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::DAL::DAL_Settings::add<std::string>(unint64_t a1, long long *a2, long long *a3)
{
  long long v5 = 0u;
  long long v6 = 0u;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v5, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    *(void *)&long long v6 = *((void *)a3 + 2);
  }
  uint64_t v7 = AMCP::Implementation::In_Place_Storage<std::string>::dispatch;
  std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<std::string const&,AMCP::Thing,0>(&__p, a2, (uint64_t)&v5);
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__emplace_unique_key_args<std::string,std::pair<std::string,AMCP::Thing>>(a1, (unsigned __int8 *)&__p, (long long *)&__p);
  if (v10) {
    v10(0, &v9, 0, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v7) {
    v7(0, (uint64_t)&v5, 0, 0);
  }
}

void sub_1BACFFEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t AMCP::Implementation::In_Place_Storage<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>::dispatch(uint64_t result, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      uint64_t v7 = *(std::__shared_weak_count **)(a2 + 8);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      __n128 result = 0;
      *(void *)(a2 + 32) = 0;
      long long v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(void *)a3 = *(void *)a2;
      uint64_t v9 = *(void *)(a2 + 8);
      *((void *)a3 + 1) = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      __n128 result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>::dispatch;
      return result;
    case 2:
      __n128 result = 0;
      long long v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>();
      __n128 result = 0;
      *a4 = v10;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v11 = AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>();
      BOOL v12 = *(void (**)(uint64_t, uint64_t, void, _OWORD *))(a2 + 32);
      *(void *)&v17[0] = 0;
      if (v12)
      {
        v12(3, a2, 0, v17);
        BOOL v12 = *(void (**)(uint64_t, uint64_t, void, _OWORD *))&v17[0];
      }
      if (v12 != (void (*)(uint64_t, uint64_t, void, _OWORD *))v11) {
        goto LABEL_24;
      }
      uint64_t v13 = (void (*)(uint64_t, AMCP::Thing *, void, void))*((void *)a3 + 4);
      double v19 = 0;
      if (v13)
      {
        v13(3, a3, 0, &v19);
        uint64_t v13 = v19;
      }
      if (v13 == (void (*)(uint64_t, AMCP::Thing *, void, void))v11)
      {
        if (*(void *)(a2 + 32))
        {
          *(void *)&v17[0] = AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>();
          int v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void, _OWORD *))(a2 + 32))(4, a2, 0, v17);
        }
        else
        {
          int v14 = 0;
        }
        *(void *)&v17[0] = AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>();
        if (*v14 == *(void *)(*((uint64_t (**)(uint64_t, AMCP::Thing *, void, _OWORD *))a3 + 4))(4, a3, 0, v17))return 1; {
      }
        }
      else
      {
LABEL_24:
        AMCP::Thing::convert_to<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>(v17, a2);
        AMCP::Thing::convert_to<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>(&v19, (uint64_t)a3);
        int v15 = *(void (**)(void, void, void, void))&v17[0];
        double v16 = (void (*)(void, void, void, void))v19;
        if (v20) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
        if (*((void *)&v17[0] + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17[0] + 1));
        }
        if (v15 == v16) {
          return 1;
        }
      }
      return 0;
    case 6:
      uint64_t v18 = 0;
      memset(v17, 0, sizeof(v17));
      AMCP::swap((AMCP::Thing *)v17, a3, a3);
      if (v18) {
        v18(0, v17, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>()
{
  uint64_t v0 = &unk_1E9F79000;
  {
    uint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      uint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[419];
}

void *AMCP::Thing::convert_to<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_15;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>();
  long long v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  double v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    long long v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    __n128 result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (result)
    {
      uint64_t v7 = result[1];
      *a1 = *result;
      a1[1] = v7;
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      return result;
    }
LABEL_15:
    exceptiouint64_t n = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>();
  memset(v17, 0, sizeof(v17));
  uint64_t v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    uint64_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    BOOL v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  __n128 result = (void *)v18(4, v17, 0, &v15);
  if (!result)
  {
    uint64_t v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v8 = result[1];
  *a1 = *result;
  a1[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  if (v18) {
    return (void *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAD003F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::In_Place_Storage<AMCP::Resampler_Quality>::dispatch(uint64_t result, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      __n128 result = 0;
      *(void *)(a2 + 32) = 0;
      long long v7 = 0uLL;
      goto LABEL_5;
    case 1:
      __n128 result = 0;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<AMCP::Resampler_Quality>::dispatch;
      return result;
    case 2:
      __n128 result = 0;
      long long v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<AMCP::Resampler_Quality>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_5:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t v8 = AMCP::Implementation::get_type_marker<AMCP::Resampler_Quality>();
      __n128 result = 0;
      *a4 = v8;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Resampler_Quality>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<AMCP::Resampler_Quality>();
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, void, _OWORD *))(a2 + 32);
      *(void *)&v14[0] = 0;
      if (v10)
      {
        v10(3, a2, 0, v14);
        uint64_t v10 = *(void (**)(uint64_t, uint64_t, void, _OWORD *))&v14[0];
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, _OWORD *))v9) {
        goto LABEL_20;
      }
      uint64_t v11 = (void (*)(uint64_t, AMCP::Thing *, void, void))*((void *)a3 + 4);
      uint64_t v16 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v16);
        uint64_t v11 = v16;
      }
      if (v11 == (void (*)(uint64_t, AMCP::Thing *, void, void))v9)
      {
        if (*(void *)(a2 + 32))
        {
          *(void *)&v14[0] = AMCP::Implementation::get_type_marker<AMCP::Resampler_Quality>();
          BOOL v12 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, void, _OWORD *))(a2 + 32))(4, a2, 0, v14);
        }
        else
        {
          BOOL v12 = 0;
        }
        *(void *)&v14[0] = AMCP::Implementation::get_type_marker<AMCP::Resampler_Quality>();
        if (*v12 == *(_DWORD *)(*((uint64_t (**)(uint64_t, AMCP::Thing *, void, _OWORD *))a3 + 4))(4, a3, 0, v14))return 1; {
      }
        }
      else
      {
LABEL_20:
        int v13 = AMCP::Thing::convert_to<AMCP::Resampler_Quality>(a2);
        if (v13 == AMCP::Thing::convert_to<AMCP::Resampler_Quality>((uint64_t)a3)) {
          return 1;
        }
      }
      return 0;
    case 6:
      uint64_t v15 = 0;
      memset(v14, 0, sizeof(v14));
      AMCP::swap((AMCP::Thing *)v14, a3, a3);
      if (v15) {
        v15(0, v14, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::In_Place_Storage<AMCP::Resampler_Type>::dispatch(uint64_t result, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      __n128 result = 0;
      *(void *)(a2 + 32) = 0;
      long long v7 = 0uLL;
      goto LABEL_5;
    case 1:
      __n128 result = 0;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<AMCP::Resampler_Type>::dispatch;
      return result;
    case 2:
      __n128 result = 0;
      long long v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<AMCP::Resampler_Type>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_5:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t v8 = AMCP::Implementation::get_type_marker<AMCP::Resampler_Type>();
      __n128 result = 0;
      *a4 = v8;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Resampler_Type>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<AMCP::Resampler_Type>();
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, void, _OWORD *))(a2 + 32);
      *(void *)&v14[0] = 0;
      if (v10)
      {
        v10(3, a2, 0, v14);
        uint64_t v10 = *(void (**)(uint64_t, uint64_t, void, _OWORD *))&v14[0];
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, _OWORD *))v9) {
        goto LABEL_20;
      }
      uint64_t v11 = (void (*)(uint64_t, AMCP::Thing *, void, void))*((void *)a3 + 4);
      uint64_t v16 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v16);
        uint64_t v11 = v16;
      }
      if (v11 == (void (*)(uint64_t, AMCP::Thing *, void, void))v9)
      {
        if (*(void *)(a2 + 32))
        {
          *(void *)&v14[0] = AMCP::Implementation::get_type_marker<AMCP::Resampler_Type>();
          BOOL v12 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, void, _OWORD *))(a2 + 32))(4, a2, 0, v14);
        }
        else
        {
          BOOL v12 = 0;
        }
        *(void *)&v14[0] = AMCP::Implementation::get_type_marker<AMCP::Resampler_Type>();
        if (*v12 == *(_DWORD *)(*((uint64_t (**)(uint64_t, AMCP::Thing *, void, _OWORD *))a3 + 4))(4, a3, 0, v14))return 1; {
      }
        }
      else
      {
LABEL_20:
        int v13 = AMCP::Thing::convert_to<AMCP::Resampler_Type>(a2);
        if (v13 == AMCP::Thing::convert_to<AMCP::Resampler_Type>((uint64_t)a3)) {
          return 1;
        }
      }
      return 0;
    case 6:
      uint64_t v15 = 0;
      memset(v14, 0, sizeof(v14));
      AMCP::swap((AMCP::Thing *)v14, a3, a3);
      if (v15) {
        v15(0, v14, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<AMCP::Resampler_Type>()
{
  uint64_t v0 = &unk_1E9F79000;
  {
    uint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      uint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[421];
}

uint64_t AMCP::Thing::convert_to<AMCP::Resampler_Type>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  uint64_t v2 = AMCP::Implementation::get_type_marker<AMCP::Resampler_Type>();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  uint64_t v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    uint64_t v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))v2)
  {
    uint64_t v18 = v2;
    uint64_t v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4) {
      return *v4;
    }
LABEL_12:
    exceptiouint64_t n = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = AMCP::Implementation::get_type_marker<AMCP::Resampler_Type>();
  memset(v16, 0, sizeof(v16));
  uint8x8_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    uint64_t v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v14 = v2;
  long long v6 = (unsigned int *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    BOOL v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v5 = *v6;
  if (v17) {
    v17(0, v16, 0, 0);
  }
  return v5;
}

void sub_1BAD00AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

double _ZNSt3__115allocate_sharedB8ne180100IN4AMCP5Graph9Node_ProcENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1)
{
  uint64_t v2 = (char *)operator new(0x268uLL);
  double result = 0.0;
  *(_OWORD *)(v2 + 8) = 0u;
  *(void *)uint64_t v2 = &unk_1F1481198;
  *((void *)v2 + 6) = 0;
  *((void *)v2 + 10) = 0;
  *((void *)v2 + 14) = 0;
  *((void *)v2 + 18) = 0;
  *((void *)v2 + 22) = 0;
  *((void *)v2 + 26) = 0;
  *((void *)v2 + 30) = 0;
  *((void *)v2 + 34) = 0;
  *((void *)v2 + 38) = 0;
  *((void *)v2 + 42) = 0;
  *((void *)v2 + 46) = 0;
  *((void *)v2 + 50) = 0;
  *((void *)v2 + 54) = 0;
  *((void *)v2 + 58) = 0;
  *((void *)v2 + 62) = 0;
  *((void *)v2 + 66) = 0;
  *((void *)v2 + 70) = 0;
  *((void *)v2 + 76) = 0;
  *((_OWORD *)v2 + 37) = 0u;
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void *std::__function::__value_func<void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1BAD00DD4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_7,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_7>,long long ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_7,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_7>,long long ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK4AMCP5Graph9Converter8get_procEvE3$_7"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_7,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_7>,long long ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(v10, "scale");
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>((void *)(v1 + 48), (unsigned __int8 *)v10);
  if (v2) {
    BOOL v3 = AMCP::Thing::convert_to<BOOL>((uint64_t)(v2 + 40));
  }
  else {
    BOOL v3 = 0;
  }
  if (v11 < 0)
  {
    operator delete(v10[0]);
    if (v3) {
      goto LABEL_6;
    }
    return 0;
  }
  if (!v3) {
    return 0;
  }
LABEL_6:
  __p[0] = 0;
  __p[1] = 0;
  AMCP::DAL::DAL_Settings::DAL_Settings((unint64_t)v10, (uint64_t *)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "get latency");
  AMCP::DAL::DAL_Settings::add<BOOL>((unint64_t)v10, (long long *)__p, 1);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = *(atomic_ullong **)(v1 + 112);
  uint64_t v4 = *(void *)(v1 + 120);
  __p[0] = *(void **)(v1 + 104);
  __p[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void **, void **))(*(void *)v4 + 136))(v4, __p, v10);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)v10);
  return v6;
}

void sub_1BAD00FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, std::__shared_weak_count *a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1BAD01010(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1BAD01008);
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_7,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_7>,long long ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_7,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_7>,long long ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_7,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_7>,long long ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F146C8E8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_7,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_7>,long long ()(void)>::__clone(uint64_t a1)
{
  double result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *double result = &unk_1F146C8E8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_7,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_7>,long long ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146C8E8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_7,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_7>,long long ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146C8E8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_6,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_6>,unsigned long long ()(unsigned long long,unsigned long long &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_6,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_6>,unsigned long long ()(unsigned long long,unsigned long long &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK4AMCP5Graph9Converter8get_procEvE3$_6"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_6,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_6>,unsigned long long ()(unsigned long long,unsigned long long &)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  return AMCP::Graph::Converter::get_expected_output_samples_for_input_samples(*(AMCP::Graph::Converter **)(a1 + 8), *a2, a3);
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_6,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_6>,unsigned long long ()(unsigned long long,unsigned long long &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_6,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_6>,unsigned long long ()(unsigned long long,unsigned long long &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_6,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_6>,unsigned long long ()(unsigned long long,unsigned long long &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F146C858;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_6,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_6>,unsigned long long ()(unsigned long long,unsigned long long &)>::__clone(uint64_t a1)
{
  double result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *double result = &unk_1F146C858;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_6,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_6>,unsigned long long ()(unsigned long long,unsigned long long &)>::~__func(void *a1)
{
  *a1 = &unk_1F146C858;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_6,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_6>,unsigned long long ()(unsigned long long,unsigned long long &)>::~__func(void *a1)
{
  *a1 = &unk_1F146C858;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_5,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_5>,unsigned long long ()(unsigned long long)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_5,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_5>,unsigned long long ()(unsigned long long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK4AMCP5Graph9Converter8get_procEvE3$_5"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_5,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_5>,unsigned long long ()(unsigned long long)>::operator()(uint64_t a1, uint64_t *a2)
{
  return AMCP::Graph::Converter::get_required_input_samples_for_output_samples(*(AMCP::Graph::Converter **)(a1 + 8), *a2);
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_5,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_5>,unsigned long long ()(unsigned long long)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_5,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_5>,unsigned long long ()(unsigned long long)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_5,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_5>,unsigned long long ()(unsigned long long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F146C7C8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_5,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_5>,unsigned long long ()(unsigned long long)>::__clone(uint64_t a1)
{
  double result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *double result = &unk_1F146C7C8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_5,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_5>,unsigned long long ()(unsigned long long)>::~__func(void *a1)
{
  *a1 = &unk_1F146C7C8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_5,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_5>,unsigned long long ()(unsigned long long)>::~__func(void *a1)
{
  *a1 = &unk_1F146C7C8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_4,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_4>,void ()(unsigned int)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_4,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_4>,void ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK4AMCP5Graph9Converter8get_procEvE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_4,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_4>,void ()(unsigned int)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  int v2 = *(_DWORD *)(v1 + 208) - 1;
  *(_DWORD *)(v1 + 208) = v2;
  if (!v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 144);
    *(void *)(v1 + 136) = 0;
    *(void *)(v1 + 144) = 0;
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_4,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_4>,void ()(unsigned int)>::destroy_deallocate(void *__p)
{
  int v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_4,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_4>,void ()(unsigned int)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_4,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_4>,void ()(unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F146C748;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_4,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_4>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  double result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *double result = &unk_1F146C748;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_4,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_4>,void ()(unsigned int)>::~__func(void *a1)
{
  *a1 = &unk_1F146C748;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_4,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_4>,void ()(unsigned int)>::~__func(void *a1)
{
  *a1 = &unk_1F146C748;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_3,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_3>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_3,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_3>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK4AMCP5Graph9Converter8get_procEvE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_3,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_3>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_3,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_3>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_3,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_3>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F146C6C8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_3,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_3>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *double result = &unk_1F146C6C8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_3,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_3>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146C6C8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_3,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_3>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146C6C8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_2,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_2>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_2,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_2>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK4AMCP5Graph9Converter8get_procEvE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_2,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_2>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::operator()(AMCP::Log::Scope_Registry *a1, int *a2, uint64_t a3, AMCP::DAL::DAL_Time **a4, uint64_t *a5)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a4;
  if (a4[1] - *a4 != 88)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v21 = **(NSObject ***)buf;
    if (*(void *)v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v45);
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      double v22 = pthread_self();
      mach_port_t v23 = pthread_mach_thread_np(v22);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v23;
      *(_WORD *)int v45 = 2080;
      *(void *)&v45[2] = "Converter.cpp";
      *(_WORD *)&unsigned char v45[10] = 1024;
      *(_DWORD *)&v45[12] = 117;
      *(_WORD *)&v45[16] = 2080;
      *(void *)&v45[18] = "not (sources.size() == 1)";
      _os_log_error_impl(&dword_1BAA78000, v21, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Converter nodes should never be connected to more than one incoming buffer", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v38);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Converter nodes should never be connected to more than one incoming buffer", (uint64_t)&v39);
    std::logic_error::logic_error(&v43, &v39);
    v43.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&__p, &v43);
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    int v36 = -1;
    __p.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    mach_port_t v32 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(void *)&v45[24] = "auto AMCP::Graph::Converter::get_proc()::(anonymous class)::operator()(Object_ID, const IO_Pro"
                          "c_Cycle_Info &, const rt_safe_vector<AMCP::DAL::Readable_Range> &, const rt_safe_vector<AMCP::"
                          "DAL::Writable_Range> &) const";
    *(void *)&v45[32] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    LODWORD(v46) = 117;
    std::vector<void *>::vector(&v29);
    int v24 = backtrace((void **)v29, (*((void *)&v29 + 1) - (void)v29) >> 3);
    std::vector<void *>::resize((char **)&v29, v24);
    long long v41 = v29;
    std::logic_error v40 = &unk_1F148AA90;
    uint64_t v42 = v30;
    long long v29 = 0uLL;
    uint64_t v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v7 = *a5;
  if (a5[1] - *a5 != 88)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v25 = **(NSObject ***)buf;
    if (*(void *)v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v45);
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v26 = pthread_self();
      mach_port_t v27 = pthread_mach_thread_np(v26);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v27;
      *(_WORD *)int v45 = 2080;
      *(void *)&v45[2] = "Converter.cpp";
      *(_WORD *)&unsigned char v45[10] = 1024;
      *(_DWORD *)&v45[12] = 118;
      *(_WORD *)&v45[16] = 2080;
      *(void *)&v45[18] = "not (dests.size() == 1)";
      _os_log_error_impl(&dword_1BAA78000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Converter nodes should never be connected to more than one outgoing buffer", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v38);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Converter nodes should never be connected to more than one outgoing buffer", (uint64_t)&v39);
    std::logic_error::logic_error(&v43, &v39);
    v43.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&__p, &v43);
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    int v36 = -1;
    __p.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    mach_port_t v32 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&__p);
    *(void *)&v45[24] = "auto AMCP::Graph::Converter::get_proc()::(anonymous class)::operator()(Object_ID, const IO_Pro"
                          "c_Cycle_Info &, const rt_safe_vector<AMCP::DAL::Readable_Range> &, const rt_safe_vector<AMCP::"
                          "DAL::Writable_Range> &) const";
    *(void *)&v45[32] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    LODWORD(v46) = 118;
    std::vector<void *>::vector(&v29);
    int v28 = backtrace((void **)v29, (*((void *)&v29 + 1) - (void)v29) >> 3);
    std::vector<void *>::resize((char **)&v29, v28);
    long long v41 = v29;
    std::logic_error v40 = &unk_1F148AA90;
    uint64_t v42 = v30;
    long long v29 = 0uLL;
    uint64_t v30 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  int v10 = *a2;
  uint64_t v11 = *((void *)a1 + 1);
  BOOL v12 = (std::__shared_weak_count *)*((void *)v5 + 4);
  *(void *)&long long v29 = *((void *)v5 + 3);
  *((void *)&v29 + 1) = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(void *)(v7 + 32);
  v43.__vftable = *(std::logic_error_vtbl **)(v7 + 24);
  v43.__imp_.__imp_ = (const char *)v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  AMCP::DAL::DAL_Timed_Segment::get_format((AMCP::DAL::DAL_Timed_Segment *)&v40, *((void *)v5 + 10));
  AMCP::DAL::DAL_Timed_Segment::get_format((AMCP::DAL::DAL_Timed_Segment *)&v39, *(void *)(v7 + 80));
  AMCP::Graph::Converter::update_settings(v11, (uint64_t)&v29, (uint64_t)&v43, (double *)&v40, (double *)&v39);
  std::string::basic_string[abi:ne180100]<0>(buf, "volume processing");
  uint64_t v14 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>((void *)(v11 + 48), buf);
  if (v14 && AMCP::Thing::convert_to<BOOL>((uint64_t)(v14 + 40)))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "volume connection");
    BOOL v15 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>((void *)(v11 + 48), (unsigned __int8 *)&__p) != 0;
    if (SHIBYTE(v32) < 0) {
      operator delete(__p.__vftable);
    }
  }
  else
  {
    BOOL v15 = 0;
  }
  if ((v45[15] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v15) {
      goto LABEL_29;
    }
  }
  else if (!v15)
  {
    goto LABEL_29;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "volume connection");
  __p.__vftable = 0;
  __p.__imp_.__imp_ = 0;
  AMCP::DAL::DAL_Settings::at_or<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>(&v38, (void *)(v11 + 48), buf, (__n128 *)&__p);
  if (__p.__imp_.__imp_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__imp_.__imp_);
  }
  if ((v45[15] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v16 = v38.n128_u64[0];
  caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::load((uint64_t)&__p, v38.n128_i64[0]);
  if (!v37 && *(double *)&__p.__imp_.__imp_ == 0.0)
  {
    double sample_time = AMCP::DAL::DAL_Time::get_sample_time(v5);
    caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::load((uint64_t)buf, v16);
    long long v46 = 0u;
    memset(&v45[8], 0, 32);
    *(double *)int v45 = sample_time;
    uint64_t v47 = 1;
    caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::store(v16, (long long *)buf);
  }
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v18 = AMCP::DAL::DAL_Time::get_sample_time(v5);
  double v19 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)((char *)v5 + 40));
  caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::load((uint64_t)buf, v16);
  double v48 = v18;
  double v49 = v19;
  caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::store(v16, (long long *)buf);
  if (v12)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v38.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v38.n128_u64[1]);
  }
LABEL_29:
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  double v20 = *(void **)(v11 + 136);
  if (v20)
  {
    AMCP::DAL::create_timestamp_data((AMCP::DAL *)buf, (const AMCP::DAL::DAL_Time *)(a3 + 80), *((const AMCP::DAL::DAL_Timed_Segment **)*a4 + 3), *((std::__shared_weak_count **)*a4 + 4));
    (*(void (**)(void, uint8_t *, AMCP::DAL::DAL_Time *))(*(void *)*v20 + 16))(*v20, buf, *a4);
    std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)buf);
  }
  *(void *)std::string buf = &unk_1F146C4E0;
  *(void *)int v45 = v11;
  *(_DWORD *)&v45[8] = v10;
  *(void *)&v45[16] = 0;
  *(void *)&v45[24] = 0;
  AMCP::Graph::process_once_across_timebases(*(_DWORD *)(v11 + 40), a4, a5, (uint64_t)buf);
}

void sub_1BAD02368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0) {
    operator delete(__p);
  }
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::process_once_across_timebases(int a1, AMCP::DAL::DAL_Time **a2, void *a3, uint64_t a4)
{
  uint64_t v269 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a2;
  std::string::size_type v9 = *((void *)*a2 + 2);
  uint64_t v10 = *((void *)*a2 + 3);
  *(_OWORD *)&v236.__r_.__value_.__l.__data_ = *(_OWORD *)*a2;
  v236.__r_.__value_.__r.__words[2] = v9;
  *(void *)&long long v237 = v10;
  uint64_t v11 = *((void *)v8 + 4);
  *((void *)&v237 + 1) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *((void *)v8 + 7);
  uint64_t v13 = *((void *)v8 + 8);
  long long v238 = *(_OWORD *)((char *)v8 + 40);
  uint64_t v239 = v12;
  *(void *)&long long v240 = v13;
  uint64_t v14 = *((void *)v8 + 9);
  *((void *)&v240 + 1) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 32))(a4);
  memset(&__p[8], 0, 32);
  *(_DWORD *)std::logic_error __p = 0;
  LODWORD(v259) = 0;
  (*(void (**)(uint64_t, unsigned char *, std::string *, void))(*(void *)v15 + 96))(v15, __p, &v236, 0);
  if ((__p[31] & 0x80000000) != 0) {
    operator delete(*(void **)&__p[8]);
  }
  std::string v208 = v236;
  long long v209 = v237;
  if (*((void *)&v237 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v237 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  long long v210 = v238;
  uint64_t v211 = v239;
  long long v212 = v240;
  if (*((void *)&v240 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v240 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(unsigned char *__return_ptr, uint64_t, std::string *))(*(void *)v15 + 160))(__p, v15, &v208);
  if (*((void *)&v212 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v212 + 1));
  }
  if (*((void *)&v209 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v209 + 1));
  }
  *(_OWORD *)&v203.__r_.__value_.__r.__words[1] = 0u;
  long long v204 = 0u;
  LODWORD(v203.__r_.__value_.__l.__data_) = 0;
  LODWORD(v205) = 0;
  AMCP::DAL::Writable_Range::pad_and_receive_data((uint64_t)__p, (uint64_t)&v203, *a2);
  memset(&v186, 0, sizeof(v186));
  std::string v231 = v236;
  long long v232 = v237;
  if (*((void *)&v237 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v237 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  long long v233 = v238;
  uint64_t v234 = v239;
  long long v235 = v240;
  if (*((void *)&v240 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v240 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(std::logic_error *__return_ptr, uint64_t, std::string *))(*(void *)v15 + 144))(&v224, v15, &v231);
  std::string::size_type size = v186.__r_.__value_.__l.__size_;
  if (v186.__r_.__value_.__l.__size_ >= v186.__r_.__value_.__r.__words[2])
  {
    unint64_t v19 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v186.__r_.__value_.__l.__size_ - v186.__r_.__value_.__r.__words[0]) >> 3)
        + 1;
    if (v19 > 0x2E8BA2E8BA2E8BALL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    if (0x5D1745D1745D1746 * ((uint64_t)(v186.__r_.__value_.__r.__words[2] - v186.__r_.__value_.__r.__words[0]) >> 3) > v19) {
      unint64_t v19 = 0x5D1745D1745D1746
    }
          * ((uint64_t)(v186.__r_.__value_.__r.__words[2] - v186.__r_.__value_.__r.__words[0]) >> 3);
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3
                          * ((uint64_t)(v186.__r_.__value_.__r.__words[2] - v186.__r_.__value_.__r.__words[0]) >> 3)) >= 0x1745D1745D1745DLL)
      uint64_t v20 = 0x2E8BA2E8BA2E8BALL;
    else {
      uint64_t v20 = v19;
    }
    uint64_t v198 = (std::__shared_weak_count *)&v186.__r_.__value_.__r.__words[2];
    if (v20) {
      uint64_t v20 = (uint64_t)std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Writable_Range>>((caulk::rt_safe_memory_resource *)v20);
    }
    else {
      uint64_t v21 = 0;
    }
    double v22 = (char *)(v20 + 8 * ((uint64_t)(v186.__r_.__value_.__l.__size_ - v186.__r_.__value_.__r.__words[0]) >> 3));
    *(void *)float v196 = v20;
    *(void *)&v196[8] = v22;
    std::string::size_type v197 = v20 + 88 * v21;
    std::logic_error v23 = v224;
    *((void *)v22 + 2) = *(void *)v225;
    *(std::logic_error *)double v22 = v23;
    *(_OWORD *)(v22 + 24) = *(_OWORD *)&v225[8];
    *(void *)&v225[16] = 0;
    *(void *)&v225[8] = 0;
    long long v24 = v226;
    *((void *)v22 + 7) = *(void *)v227;
    *(_OWORD *)(v22 + 40) = v24;
    *((_OWORD *)v22 + 4) = *(_OWORD *)&v227[8];
    *(_OWORD *)&v227[8] = 0uLL;
    *((void *)v22 + 10) = v228;
    std::string::size_type v25 = (std::string::size_type)(v22 + 88);
    *(void *)&v196[16] = v22 + 88;
    std::string::size_type v26 = v186.__r_.__value_.__l.__size_;
    std::string::size_type v27 = v186.__r_.__value_.__r.__words[0];
    std::string::size_type v28 = *(void *)&v196[8];
    if (v186.__r_.__value_.__l.__size_ == v186.__r_.__value_.__r.__words[0])
    {
      int64x2_t v31 = vdupq_n_s64(v186.__r_.__value_.__l.__size_);
    }
    else
    {
      do
      {
        long long v29 = *(_OWORD *)(v26 - 88);
        *(void *)(v28 - 72) = *(void *)(v26 - 72);
        *(_OWORD *)(v28 - 88) = v29;
        *(_OWORD *)(v28 - 64) = *(_OWORD *)(v26 - 64);
        *(void *)(v26 - 64) = 0;
        *(void *)(v26 - 56) = 0;
        long long v30 = *(_OWORD *)(v26 - 48);
        *(void *)(v28 - 32) = *(void *)(v26 - 32);
        *(_OWORD *)(v28 - 48) = v30;
        *(_OWORD *)(v28 - 24) = *(_OWORD *)(v26 - 24);
        *(void *)(v26 - 24) = 0;
        *(void *)(v26 - 16) = 0;
        *(void *)(v28 - 8) = *(void *)(v26 - 8);
        v28 -= 88;
        v26 -= 88;
      }
      while (v26 != v27);
      int64x2_t v31 = *(int64x2_t *)&v186.__r_.__value_.__l.__data_;
      std::string::size_type v25 = *(void *)&v196[16];
    }
    v186.__r_.__value_.__r.__words[0] = v28;
    *(int64x2_t *)&v196[8] = v31;
    std::string::size_type v32 = v186.__r_.__value_.__r.__words[2];
    v186.__r_.__value_.__r.__words[2] = v197;
    std::string::size_type v197 = v32;
    *(void *)float v196 = v31.i64[0];
    std::__split_buffer<AMCP::DAL::Readable_Range,caulk::rt_allocator<AMCP::DAL::Readable_Range> &>::~__split_buffer((uint64_t)v196);
    v186.__r_.__value_.__l.__size_ = v25;
    if (*(void *)&v227[16]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v227[16]);
    }
  }
  else
  {
    std::logic_error v17 = v224;
    *(void *)(v186.__r_.__value_.__l.__size_ + 16) = *(void *)v225;
    *(std::logic_error *)std::string::size_type size = v17;
    *(_OWORD *)(size + 24) = *(_OWORD *)&v225[8];
    *(void *)&v225[16] = 0;
    *(void *)&v225[8] = 0;
    uint64_t v18 = *(void *)v227;
    *(_OWORD *)(size + 40) = v226;
    *(void *)(size + 56) = v18;
    *(_OWORD *)(size + 64) = *(_OWORD *)&v227[8];
    *(_OWORD *)&v227[8] = 0uLL;
    *(void *)(size + 80) = v228;
    v186.__r_.__value_.__l.__size_ = size + 88;
  }
  if (*(void *)&v225[16]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v225[16]);
  }
  if (*((void *)&v235 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v235 + 1));
  }
  if (*((void *)&v232 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v232 + 1));
  }
  std::string v191 = v186;
  memset(&v186, 0, sizeof(v186));
  char v192 = 1;
  v224.__vftable = (std::logic_error_vtbl *)&v186;
  std::vector<AMCP::DAL::Readable_Range,caulk::rt_allocator<AMCP::DAL::Readable_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v224);
  if (SBYTE7(v204) < 0) {
    operator delete((void *)v203.__r_.__value_.__l.__size_);
  }
  if (*(void *)&v260[16]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v260[16]);
  }
  if (*(void *)&__p[32]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[32]);
  }
  if (*((void *)&v240 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v240 + 1));
  }
  uint64_t v33 = (AMCP::Log::Scope_Registry *)*((void *)&v237 + 1);
  if (*((void *)&v237 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v237 + 1));
  }
  if (v192) {
    uint64_t v34 = &v191;
  }
  else {
    uint64_t v34 = (std::string *)a2;
  }
  p_std::string::size_type size = &v191.__r_.__value_.__l.__size_;
  if (!v192) {
    p_std::string::size_type size = (std::string::size_type *)(a2 + 1);
  }
  if (*p_size - v34->__r_.__value_.__r.__words[0] != 88)
  {
    AMCP::Log::Scope_Registry::get(v33);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    long long v132 = **(NSObject ***)__p;
    if (*(void *)&__p[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
    }
    if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
    {
      long long v133 = pthread_self();
      mach_port_t v134 = pthread_mach_thread_np(v133);
      *(_DWORD *)std::logic_error __p = 67109890;
      *(_DWORD *)&__p[4] = v134;
      *(_WORD *)&__p[8] = 2080;
      *(void *)&__p[10] = "Converter.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 619;
      *(_WORD *)&__p[24] = 2080;
      *(void *)&__p[26] = "not (sources.size() == 1)";
      _os_log_error_impl(&dword_1BAA78000, v132, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Converter should have one source range", __p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)v196);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Converter should have one source range", (uint64_t)&v208);
    std::logic_error::logic_error((std::logic_error *)&v203, &v208);
    v203.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error(&v224, (const std::logic_error *)&v203);
    *(void *)&v225[16] = 0;
    *(void *)&v225[8] = 0;
    *(void *)&long long v226 = 0;
    DWORD2(v226) = -1;
    v224.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    *(void *)float64x2_t v225 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v224);
    *(void *)&__p[32] = "void AMCP::Graph::process_once_across_timebases(AMCP::Object_ID, Buffer_Alignment, const rt_sa"
                          "fe_vector<AMCP::DAL::Readable_Range> &, const rt_safe_vector<AMCP::DAL::Writable_Range> &, con"
                          "st Cross_Timebase_Processor &)";
    *(void *)&long long v259 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    DWORD2(v259) = 619;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v231.__r_.__value_.__l.__data_);
    *(_OWORD *)&v236.__r_.__value_.__r.__words[1] = *(_OWORD *)&v231.__r_.__value_.__l.__data_;
    v236.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(void *)&long long v237 = *((void *)&v231.__r_.__value_.__l + 2);
    memset(&v231, 0, sizeof(v231));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v36 = *a3;
  if (a3[1] - *a3 != 88)
  {
    AMCP::Log::Scope_Registry::get(v33);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    uint64_t v135 = **(NSObject ***)__p;
    if (*(void *)&__p[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
    }
    if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
    {
      uint64_t v136 = pthread_self();
      mach_port_t v137 = pthread_mach_thread_np(v136);
      *(_DWORD *)std::logic_error __p = 67109890;
      *(_DWORD *)&__p[4] = v137;
      *(_WORD *)&__p[8] = 2080;
      *(void *)&__p[10] = "Converter.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 620;
      *(_WORD *)&__p[24] = 2080;
      *(void *)&__p[26] = "not (dests.size() == 1)";
      _os_log_error_impl(&dword_1BAA78000, v135, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Converter should have one dest range", __p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)v196);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Converter should have one dest range", (uint64_t)&v208);
    std::logic_error::logic_error((std::logic_error *)&v203, &v208);
    v203.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error(&v224, (const std::logic_error *)&v203);
    *(void *)&v225[16] = 0;
    *(void *)&v225[8] = 0;
    *(void *)&long long v226 = 0;
    DWORD2(v226) = -1;
    v224.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    *(void *)float64x2_t v225 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v224);
    *(void *)&__p[32] = "void AMCP::Graph::process_once_across_timebases(AMCP::Object_ID, Buffer_Alignment, const rt_sa"
                          "fe_vector<AMCP::DAL::Readable_Range> &, const rt_safe_vector<AMCP::DAL::Writable_Range> &, con"
                          "st Cross_Timebase_Processor &)";
    *(void *)&long long v259 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    DWORD2(v259) = 620;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v231.__r_.__value_.__l.__data_);
    *(_OWORD *)&v236.__r_.__value_.__r.__words[1] = *(_OWORD *)&v231.__r_.__value_.__l.__data_;
    v236.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(void *)&long long v237 = *((void *)&v231.__r_.__value_.__l + 2);
    memset(&v231, 0, sizeof(v231));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  std::string::size_type v37 = *(void *)(v36 + 16);
  uint64_t v38 = *(void *)(v36 + 24);
  *(_OWORD *)&v186.__r_.__value_.__l.__data_ = *(_OWORD *)v36;
  v186.__r_.__value_.__r.__words[2] = v37;
  *(void *)&long long v187 = v38;
  uint64_t v39 = *(void *)(v36 + 32);
  *((void *)&v187 + 1) = v39;
  if (v39) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v40 = *(void *)(v36 + 56);
  uint64_t v41 = *(void *)(v36 + 64);
  long long v188 = *(_OWORD *)(v36 + 40);
  uint64_t v189 = v40;
  *(void *)&long long v190 = v41;
  uint64_t v42 = *(void *)(v36 + 72);
  *((void *)&v190 + 1) = v42;
  if (v42) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
  }
  AMCP::DAL::DAL_Timed_Segment::translate_range(v185, *(const AMCP::DAL::DAL_Time_Range **)(v34->__r_.__value_.__r.__words[0] + 80), v34->__r_.__value_.__r.__words[0]);
  double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v186);
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v188);
  double v44 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v186);
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v188);
  if (sample_time != floor(v44))
  {
    AMCP::Log::Scope_Registry::get(v45);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    uint64_t v138 = **(NSObject ***)__p;
    if (*(void *)&__p[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
    }
    if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR))
    {
      unsigned __int8 v139 = pthread_self();
      mach_port_t v140 = pthread_mach_thread_np(v139);
      *(_DWORD *)std::logic_error __p = 67109890;
      *(_DWORD *)&__p[4] = v140;
      *(_WORD *)&__p[8] = 2080;
      *(void *)&__p[10] = "Converter.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 625;
      *(_WORD *)&__p[24] = 2080;
      *(void *)&__p[26] = "not (dest_range.get_range().start().get_double() == dest_range.get_range().start().floor().get_double())";
      _os_log_error_impl(&dword_1BAA78000, v138, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We should have no fractional samples", __p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)v196);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"We should have no fractional samples", (uint64_t)&v208);
    std::logic_error::logic_error((std::logic_error *)&v203, &v208);
    v203.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error(&v224, (const std::logic_error *)&v203);
    *(void *)&v225[16] = 0;
    *(void *)&v225[8] = 0;
    *(void *)&long long v226 = 0;
    DWORD2(v226) = -1;
    v224.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    *(void *)float64x2_t v225 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v224);
    *(void *)&__p[32] = "void AMCP::Graph::process_once_across_timebases(AMCP::Object_ID, Buffer_Alignment, const rt_sa"
                          "fe_vector<AMCP::DAL::Readable_Range> &, const rt_safe_vector<AMCP::DAL::Writable_Range> &, con"
                          "st Cross_Timebase_Processor &)";
    *(void *)&long long v259 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    DWORD2(v259) = 625;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v231.__r_.__value_.__l.__data_);
    *(_OWORD *)&v236.__r_.__value_.__r.__words[1] = *(_OWORD *)&v231.__r_.__value_.__l.__data_;
    v236.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(void *)&long long v237 = *((void *)&v231.__r_.__value_.__l + 2);
    memset(&v231, 0, sizeof(v231));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v186);
  double v46 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v188);
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v186);
  if (v46 != floor(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v188)))
  {
    AMCP::Log::Scope_Registry::get(v47);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    v141 = **(NSObject ***)__p;
    if (*(void *)&__p[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
    }
    if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v142 = pthread_self();
      mach_port_t v143 = pthread_mach_thread_np(v142);
      *(_DWORD *)std::logic_error __p = 67109890;
      *(_DWORD *)&__p[4] = v143;
      *(_WORD *)&__p[8] = 2080;
      *(void *)&__p[10] = "Converter.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 626;
      *(_WORD *)&__p[24] = 2080;
      *(void *)&__p[26] = "not (dest_range.get_range().end().get_double() == dest_range.get_range().end().floor().get_double())";
      _os_log_error_impl(&dword_1BAA78000, v141, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We should have no fractional samples", __p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)v196);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"We should have no fractional samples", (uint64_t)&v208);
    std::logic_error::logic_error((std::logic_error *)&v203, &v208);
    v203.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error(&v224, (const std::logic_error *)&v203);
    *(void *)&v225[16] = 0;
    *(void *)&v225[8] = 0;
    *(void *)&long long v226 = 0;
    DWORD2(v226) = -1;
    v224.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    *(void *)float64x2_t v225 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v224);
    *(void *)&__p[32] = "void AMCP::Graph::process_once_across_timebases(AMCP::Object_ID, Buffer_Alignment, const rt_sa"
                          "fe_vector<AMCP::DAL::Readable_Range> &, const rt_safe_vector<AMCP::DAL::Writable_Range> &, con"
                          "st Cross_Timebase_Processor &)";
    *(void *)&long long v259 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    DWORD2(v259) = 626;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v231.__r_.__value_.__l.__data_);
    *(_OWORD *)&v236.__r_.__value_.__r.__words[1] = *(_OWORD *)&v231.__r_.__value_.__l.__data_;
    v236.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(void *)&long long v237 = *((void *)&v231.__r_.__value_.__l + 2);
    memset(&v231, 0, sizeof(v231));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v48 = v34->__r_.__value_.__r.__words[0];
  double v49 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v34->__r_.__value_.__l.__data_);
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v48 + 40));
  uint64_t v50 = v34->__r_.__value_.__r.__words[0];
  double v51 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v34->__r_.__value_.__l.__data_);
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v50 + 40));
  if (v49 != floor(v51))
  {
    AMCP::Log::Scope_Registry::get(v52);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    std::string v144 = **(NSObject ***)__p;
    if (*(void *)&__p[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
    }
    if (os_log_type_enabled(v144, OS_LOG_TYPE_ERROR))
    {
      std::string v145 = pthread_self();
      mach_port_t v146 = pthread_mach_thread_np(v145);
      *(_DWORD *)std::logic_error __p = 67109890;
      *(_DWORD *)&__p[4] = v146;
      *(_WORD *)&__p[8] = 2080;
      *(void *)&__p[10] = "Converter.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 627;
      *(_WORD *)&__p[24] = 2080;
      *(void *)&__p[26] = "not (sources[0].get_time_range().get_range().start().get_double() == sources[0].get_time_ran"
                            "ge().get_range().start().floor().get_double())";
      _os_log_error_impl(&dword_1BAA78000, v144, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We should have no fractional samples", __p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)v196);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"We should have no fractional samples", (uint64_t)&v208);
    std::logic_error::logic_error((std::logic_error *)&v203, &v208);
    v203.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error(&v224, (const std::logic_error *)&v203);
    *(void *)&v225[16] = 0;
    *(void *)&v225[8] = 0;
    *(void *)&long long v226 = 0;
    DWORD2(v226) = -1;
    v224.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    *(void *)float64x2_t v225 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v224);
    *(void *)&__p[32] = "void AMCP::Graph::process_once_across_timebases(AMCP::Object_ID, Buffer_Alignment, const rt_sa"
                          "fe_vector<AMCP::DAL::Readable_Range> &, const rt_safe_vector<AMCP::DAL::Writable_Range> &, con"
                          "st Cross_Timebase_Processor &)";
    *(void *)&long long v259 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    DWORD2(v259) = 627;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v231.__r_.__value_.__l.__data_);
    *(_OWORD *)&v236.__r_.__value_.__r.__words[1] = *(_OWORD *)&v231.__r_.__value_.__l.__data_;
    v236.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(void *)&long long v237 = *((void *)&v231.__r_.__value_.__l + 2);
    memset(&v231, 0, sizeof(v231));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v53 = v34->__r_.__value_.__r.__words[0];
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v34->__r_.__value_.__l.__data_);
  double v54 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v53 + 40));
  uint64_t v55 = v34->__r_.__value_.__r.__words[0];
  AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v34->__r_.__value_.__l.__data_);
  if (v54 != floor(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v55 + 40))))
  {
    AMCP::Log::Scope_Registry::get(v56);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    std::string v147 = **(NSObject ***)__p;
    if (*(void *)&__p[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
    }
    if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
    {
      std::string v148 = pthread_self();
      mach_port_t v149 = pthread_mach_thread_np(v148);
      *(_DWORD *)std::logic_error __p = 67109890;
      *(_DWORD *)&__p[4] = v149;
      *(_WORD *)&__p[8] = 2080;
      *(void *)&__p[10] = "Converter.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 628;
      *(_WORD *)&__p[24] = 2080;
      *(void *)&__p[26] = "not (sources[0].get_time_range().get_range().end().get_double() == sources[0].get_time_range"
                            "().get_range().end().floor().get_double())";
      _os_log_error_impl(&dword_1BAA78000, v147, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We should have no fractional samples", __p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)v196);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"We should have no fractional samples", (uint64_t)&v208);
    std::logic_error::logic_error((std::logic_error *)&v203, &v208);
    v203.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error(&v224, (const std::logic_error *)&v203);
    *(void *)&v225[16] = 0;
    *(void *)&v225[8] = 0;
    *(void *)&long long v226 = 0;
    DWORD2(v226) = -1;
    v224.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    *(void *)float64x2_t v225 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v224);
    *(void *)&__p[32] = "void AMCP::Graph::process_once_across_timebases(AMCP::Object_ID, Buffer_Alignment, const rt_sa"
                          "fe_vector<AMCP::DAL::Readable_Range> &, const rt_safe_vector<AMCP::DAL::Writable_Range> &, con"
                          "st Cross_Timebase_Processor &)";
    *(void *)&long long v259 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    DWORD2(v259) = 628;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v231.__r_.__value_.__l.__data_);
    *(_OWORD *)&v236.__r_.__value_.__r.__words[1] = *(_OWORD *)&v231.__r_.__value_.__l.__data_;
    v236.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(void *)&long long v237 = *((void *)&v231.__r_.__value_.__l + 2);
    memset(&v231, 0, sizeof(v231));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v57 = v185[0];
  if ((double *)((char *)v185[1] - (char *)v185[0]) != (double *)96)
  {
    AMCP::Log::Scope_Registry::get(v56);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    std::string v150 = **(NSObject ***)__p;
    if (*(void *)&__p[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
    }
    if (os_log_type_enabled(v150, OS_LOG_TYPE_ERROR))
    {
      std::string v151 = pthread_self();
      mach_port_t v152 = pthread_mach_thread_np(v151);
      *(_DWORD *)std::logic_error __p = 67109890;
      *(_DWORD *)&__p[4] = v152;
      *(_WORD *)&__p[8] = 2080;
      *(void *)&__p[10] = "Converter.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 630;
      *(_WORD *)&__p[24] = 2080;
      *(void *)&__p[26] = "not (source_ranges.size() == 1)";
      _os_log_error_impl(&dword_1BAA78000, v150, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We should only ever have one source after copying from the ring buffer into the temp fixed buffer.", __p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)v196);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"We should only ever have one source after copying from the ring buffer into the temp fixed buffer.", (uint64_t)&v208);
    std::logic_error::logic_error((std::logic_error *)&v203, &v208);
    v203.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error(&v224, (const std::logic_error *)&v203);
    *(void *)&v225[16] = 0;
    *(void *)&v225[8] = 0;
    *(void *)&long long v226 = 0;
    DWORD2(v226) = -1;
    v224.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    *(void *)float64x2_t v225 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v224);
    *(void *)&__p[32] = "void AMCP::Graph::process_once_across_timebases(AMCP::Object_ID, Buffer_Alignment, const rt_sa"
                          "fe_vector<AMCP::DAL::Readable_Range> &, const rt_safe_vector<AMCP::DAL::Writable_Range> &, con"
                          "st Cross_Timebase_Processor &)";
    *(void *)&long long v259 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    DWORD2(v259) = 630;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v231.__r_.__value_.__l.__data_);
    *(_OWORD *)&v236.__r_.__value_.__r.__words[1] = *(_OWORD *)&v231.__r_.__value_.__l.__data_;
    v236.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(void *)&long long v237 = *((void *)&v231.__r_.__value_.__l + 2);
    memset(&v231, 0, sizeof(v231));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v176 = *a3;
  std::string v180 = v186;
  long long v181 = v187;
  if (*((void *)&v187 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v187 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  long long v182 = v188;
  uint64_t v183 = v189;
  long long v184 = v190;
  if (*((void *)&v190 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v190 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(std::string::size_type *__return_ptr))(**(void **)(v34->__r_.__value_.__r.__words[0] + 80)
                                                               + 56))(&v178);
  (*(void (**)(long long *__return_ptr))(**(void **)(*a3 + 80) + 56))(&v177);
  *(_OWORD *)float v196 = *((_OWORD *)v57 + 1);
  std::string::size_type v58 = *((void *)v57 + 5);
  *(double *)&v196[16] = v57[4];
  std::string::size_type v197 = v58;
  uint64_t v59 = (std::__shared_weak_count *)*((void *)v57 + 6);
  uint64_t v198 = v59;
  if (v59) {
    atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v199 = *(_OWORD *)(v57 + 7);
  uint64_t v60 = *((void *)v57 + 10);
  uint64_t v200 = *((void *)v57 + 9);
  uint64_t v201 = v60;
  uint64_t v61 = (std::__shared_weak_count *)*((void *)v57 + 11);
  uint64_t v202 = v61;
  if (v61) {
    atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a1)
  {
    AMCP::DAL::DAL_Time::operator-((uint64_t)v193, (AMCP::DAL::DAL_Time *)&v182, (AMCP::DAL::DAL_Time *)&v180);
    if ((v193[0] & 2) == 0) {
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)v193);
    }
    v236.__r_.__value_.__r.__words[0] = 0;
    double v62 = (*(double (**)(uint64_t, uint64_t, std::string *, double))(*(void *)a4 + 24))(a4, 1, &v236, round(v194));
    double v63 = v62 + AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v57 + 2));
    long long v64 = *(_OWORD *)(v57 + 5);
    __int16 v65 = (std::__shared_weak_count *)*((void *)v57 + 6);
    if (v65) {
      atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(v224.__vftable) = 2;
    *(double *)&v224.__imp_.__imp_ = v63;
    *(void *)float64x2_t v225 = 0;
    *(_OWORD *)&v225[8] = v64;
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)__p, (const AMCP::DAL::DAL_Time *)(v57 + 2), (const AMCP::DAL::DAL_Time *)&v224);
    if (v65) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v65);
    }
    uint64_t v66 = *(std::__shared_weak_count **)&__p[32];
    *(_OWORD *)float v196 = *(_OWORD *)__p;
    std::string::size_type v67 = *(void *)&__p[24];
    *(void *)&__p[32] = 0;
    *(void *)&__p[24] = 0;
    *(void *)&v196[16] = *(void *)&__p[16];
    std::string::size_type v197 = v67;
    uint64_t v198 = v66;
    if (v59) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v59);
    }
    long long v199 = v259;
    uint64_t v68 = *(void *)&v260[8];
    uint64_t v200 = *(void *)v260;
    uint64_t v69 = *(std::__shared_weak_count **)&v260[16];
    *(_OWORD *)&v260[8] = 0uLL;
    uint64_t v201 = v68;
    uint64_t v202 = v69;
    if (v61)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v61);
      if (*(void *)&v260[16]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v260[16]);
      }
    }
    if (*(void *)&__p[32]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[32]);
    }
    if (v195) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v195);
    }
    uint64_t v59 = v66;
    uint64_t v61 = v69;
  }
  else
  {
    AMCP::DAL::DAL_Time::operator-((uint64_t)&v224, (AMCP::DAL::DAL_Time *)(v57 + 7), (AMCP::DAL::DAL_Time *)(v57 + 2));
    if (((uint64_t)v224.__vftable & 2) == 0) {
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v224);
    }
    imp = v224.__imp_.__imp_;
    if (*(void *)&v225[16]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v225[16]);
    }
    v236.__r_.__value_.__r.__words[0] = (std::string::size_type)imp;
    double v71 = (*(double (**)(uint64_t, void, std::string *, double))(*(void *)a4 + 24))(a4, 0, &v236, *(double *)&imp);
    double v72 = v71 + AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v180);
    long long v73 = v181;
    int v74 = (std::__shared_weak_count *)*((void *)&v181 + 1);
    if (*((void *)&v181 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v181 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    LODWORD(v224.__vftable) = 2;
    *(double *)&v224.__imp_.__imp_ = v72;
    *(void *)float64x2_t v225 = 0;
    *(_OWORD *)&v225[8] = v73;
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)__p, (const AMCP::DAL::DAL_Time *)&v180, (const AMCP::DAL::DAL_Time *)&v224);
    if (v74) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v74);
    }
    long long v75 = *(_OWORD *)&__p[24];
    CFStringRef v76 = (std::__shared_weak_count *)*((void *)&v181 + 1);
    std::string v180 = *(std::string *)__p;
    *(void *)&__p[32] = 0;
    *(void *)&__p[24] = 0;
    long long v181 = v75;
    if (v76) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v76);
    }
    long long v182 = v259;
    uint64_t v183 = *(void *)v260;
    long long v77 = *(_OWORD *)&v260[8];
    *(_OWORD *)&v260[8] = 0uLL;
    float v78 = (std::__shared_weak_count *)*((void *)&v184 + 1);
    long long v184 = v77;
    if (v78)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v78);
      if (*(void *)&v260[16]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v260[16]);
      }
    }
    if (*(void *)&__p[32]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[32]);
    }
  }
  uint64_t v80 = (std::__shared_weak_count *)*((void *)&v181 + 1);
  unint64_t v79 = v181;
  if (*((void *)&v181 + 1))
  {
    char v81 = 1;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v181 + 1) + 8), 1uLL, memory_order_relaxed);
    int v82 = (std::__shared_weak_count *)*((void *)&v181 + 1);
    uint64_t v83 = v181;
    if (*((void *)&v181 + 1))
    {
      char v81 = 0;
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v181 + 1) + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    int v82 = 0;
    char v81 = 1;
    uint64_t v83 = v181;
  }
  uint64_t v172 = v59;
  BOOL v84 = (v79 | v83) == 0;
  if (!v79 || !v83)
  {
LABEL_135:
    if (v81) {
      goto LABEL_137;
    }
    goto LABEL_136;
  }
  uint64_t v85 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(void *)v79 + 16))(v79);
  unint64_t v79 = (*(uint64_t (**)(uint64_t))(*(void *)v83 + 16))(v83);
  uint64_t v86 = v85[23];
  if ((v86 & 0x80u) == 0) {
    uint64_t v87 = v85[23];
  }
  else {
    uint64_t v87 = *((void *)v85 + 1);
  }
  uint64_t v88 = *(unsigned __int8 *)(v79 + 23);
  int v89 = (char)v88;
  if ((v88 & 0x80u) != 0) {
    uint64_t v88 = *(void *)(v79 + 8);
  }
  if (v87 != v88)
  {
    BOOL v84 = 0;
    if (v81) {
      goto LABEL_137;
    }
LABEL_136:
    std::__shared_weak_count::__release_shared[abi:ne180100](v82);
    goto LABEL_137;
  }
  if (v89 >= 0) {
    CFBooleanRef v90 = (unsigned __int8 *)v79;
  }
  else {
    CFBooleanRef v90 = *(unsigned __int8 **)v79;
  }
  if ((v86 & 0x80) != 0)
  {
    unint64_t v79 = memcmp(*(const void **)v85, v90, *((void *)v85 + 1));
    BOOL v84 = v79 == 0;
    goto LABEL_135;
  }
  if (v85[23])
  {
    uint64_t v91 = v86 - 1;
    do
    {
      int v93 = *v85++;
      int v92 = v93;
      int v95 = *v90++;
      int v94 = v95;
      BOOL v97 = v91-- != 0;
      BOOL v84 = v92 == v94;
    }
    while (v92 == v94 && v97);
    goto LABEL_135;
  }
  BOOL v84 = 1;
  if ((v81 & 1) == 0) {
    goto LABEL_136;
  }
LABEL_137:
  if (v80) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v80);
  }
  if (!v84)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v79);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    std::string v153 = **(NSObject ***)__p;
    if (*(void *)&__p[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
    }
    if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
    {
      std::string v154 = pthread_self();
      mach_port_t v155 = pthread_mach_thread_np(v154);
      *(_DWORD *)std::logic_error __p = 67109890;
      *(_DWORD *)&__p[4] = v155;
      *(_WORD *)&__p[8] = 2080;
      *(void *)&__p[10] = "Converter.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 516;
      *(_WORD *)&__p[24] = 2080;
      *(void *)&__p[26] = "not (is_same_timebase(destination_range.start().get_clock(), destination_range.start().get_clock()))";
      _os_log_error_impl(&dword_1BAA78000, v153, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", __p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v264);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v208);
    std::logic_error::logic_error((std::logic_error *)&v203, &v208);
    v203.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error(&v224, (const std::logic_error *)&v203);
    *(void *)&v225[16] = 0;
    *(void *)&v225[8] = 0;
    *(void *)&long long v226 = 0;
    DWORD2(v226) = -1;
    v224.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    *(void *)float64x2_t v225 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v224);
    *(void *)&__p[32] = "Process_Range_Results AMCP::Graph::process_variable_size_range(Buffer_Alignment, const Cross_T"
                          "imebase_Processor &, const AMCP::DAL::Buffer_Time_Translator::Translation_Range &, AMCP::DAL::"
                          "Writable_Range &, DAL::DAL_Time_Range, const DAL::Container, DAL::Container)";
    *(void *)&long long v259 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
    DWORD2(v259) = 516;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v231.__r_.__value_.__l.__data_);
    *(_OWORD *)&v236.__r_.__value_.__r.__words[1] = *(_OWORD *)&v231.__r_.__value_.__l.__data_;
    v236.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(void *)&long long v237 = *((void *)&v231.__r_.__value_.__l + 2);
    memset(&v231, 0, sizeof(v231));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  std::string::size_type v98 = v178;
  long long v99 = v179;
  if (v179) {
    atomic_fetch_add_explicit(&v179->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v173 = v177;
  int v100 = (std::__shared_weak_count *)*((void *)&v177 + 1);
  if (*((void *)&v177 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v177 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  AMCP::DAL::DAL_Timed_Segment::translate_range(&v242, *(const AMCP::DAL::DAL_Time_Range **)(v176 + 80), (uint64_t)&v180);
  uint64_t v174 = v99;
  std::logic_error v175 = v100;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v243 - (char *)v242) >> 5) >= 2)
  {
    uint64_t v101 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 40))(a4);
    memset(&__p[8], 0, 32);
    *(_DWORD *)std::logic_error __p = 0;
    LODWORD(v259) = 0;
    (*(void (**)(uint64_t, unsigned char *, std::string *, void))(*(void *)v101 + 96))(v101, __p, &v180, 0);
    if ((__p[31] & 0x80000000) != 0) {
      operator delete(*(void **)&__p[8]);
    }
    std::string v231 = v180;
    long long v232 = v181;
    if (*((void *)&v181 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v181 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v233 = v182;
    uint64_t v234 = v183;
    long long v235 = v184;
    if (*((void *)&v184 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v184 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(void *)v101 + 160))(&v236, v101, &v231);
    if (*((void *)&v235 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v235 + 1));
    }
    if (*((void *)&v232 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v232 + 1));
    }
    AMCP::DAL::DAL_Timed_Segment::translate_range(v230, v241, (uint64_t)&v180);
    uint64_t v103 = v230[0];
    if ((double *)((char *)v230[1] - (char *)v230[0]) != (double *)96)
    {
      AMCP::Log::Scope_Registry::get(v102);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
      std::string v156 = **(NSObject ***)__p;
      if (*(void *)&__p[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
      }
      if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
      {
        std::string v157 = pthread_self();
        mach_port_t v158 = pthread_mach_thread_np(v157);
        *(_DWORD *)std::logic_error __p = 67109890;
        *(_DWORD *)&__p[4] = v158;
        *(_WORD *)&__p[8] = 2080;
        *(void *)&__p[10] = "Converter.cpp";
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = 456;
        *(_WORD *)&__p[24] = 2080;
        *(void *)&__p[26] = "not (temp_buffer_translated_ranges.size() == 1)";
        _os_log_error_impl(&dword_1BAA78000, v156, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s temp_buffer local range needs to be contiguous!", __p, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)v213);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"temp_buffer local range needs to be contiguous!", (uint64_t)&v203);
      std::logic_error::logic_error(&v251, &v203);
      v251.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v224, &v251);
      *(void *)&v225[16] = 0;
      *(void *)&v225[8] = 0;
      *(void *)&long long v226 = 0;
      DWORD2(v226) = -1;
      v224.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      *(void *)float64x2_t v225 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v224);
      *(void *)&__p[32] = "Process_Range_Results AMCP::Graph::process_data_into_destination(const Cross_Timebase_Proces"
                            "sor &, const DAL::DAL_Time_Range &, const AMCP::DAL::Buffer_Time_Translator::Translation_Ran"
                            "ge &, AMCP::DAL::Writable_Range &, const DAL::Container, DAL::Container)";
      *(void *)&long long v259 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
      DWORD2(v259) = 456;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v264.__r_.__value_.__l.__data_);
      *(_OWORD *)&v208.__r_.__value_.__r.__words[1] = *(_OWORD *)&v264.__r_.__value_.__l.__data_;
      v208.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
      *(void *)&long long v209 = *((void *)&v264.__r_.__value_.__l + 2);
      memset(&v264, 0, sizeof(v264));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    long long v104 = *((_OWORD *)v230[0] + 1);
    uint64_t v105 = *((void *)v230[0] + 4);
    uint64_t v106 = *((void *)v230[0] + 5);
    std::logic_error v224 = *(std::logic_error *)v230[0];
    *(_OWORD *)float64x2_t v225 = v104;
    *(void *)&v225[16] = v105;
    *(void *)&long long v226 = v106;
    unsigned int v107 = (std::__shared_weak_count *)*((void *)v230[0] + 6);
    *((void *)&v226 + 1) = v107;
    if (v107) {
      atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v108 = *((void *)v103 + 9);
    uint64_t v109 = *((void *)v103 + 10);
    *(_OWORD *)float64x2_t v227 = *(_OWORD *)(v103 + 7);
    *(void *)&v227[16] = v108;
    uint64_t v228 = v109;
    uint64_t v110 = (std::__shared_weak_count *)*((void *)v103 + 11);
    float64x2_t v229 = v110;
    if (v110) {
      atomic_fetch_add_explicit(&v110->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::logic_error v223 = v224;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v101 + 56))(&v221, v101);
    std::string::size_type v219 = v98;
    float64x2_t v220 = v174;
    if (v174) {
      atomic_fetch_add_explicit(&v174->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v217 = v221;
    float64x2_t v218 = v222;
    if (v222) {
      atomic_fetch_add_explicit(&v222->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t, std::string::size_type *, double *, uint64_t *, std::logic_error *))(*(void *)a4 + 16))(__p, a4, &v219, v57, &v217, &v223);
    int v111 = *(_DWORD *)__p;
    double v112 = *(double *)&__p[8];
    double v113 = *(double *)&__p[16];
    if (v218) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v218);
    }
    if (v220) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v220);
    }
    double v114 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v180);
    double v116 = round(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v182) - v114);
    double v117 = round(v113 - v112);
    if (v116 != v117)
    {
      AMCP::Log::Scope_Registry::get(v115);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
      std::string::size_type v159 = **(NSObject ***)__p;
      if (*(void *)&__p[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
      }
      if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
      {
        uint64_t v160 = pthread_self();
        mach_port_t v161 = pthread_mach_thread_np(v160);
        *(_DWORD *)std::logic_error __p = 67109890;
        *(_DWORD *)&__p[4] = v161;
        *(_WORD *)&__p[8] = 2080;
        *(void *)&__p[10] = "Converter.cpp";
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = 466;
        *(_WORD *)&__p[24] = 2080;
        *(void *)&__p[26] = "not (destination_range.get_range().length() == processed_range.length())";
        _os_log_error_impl(&dword_1BAA78000, v159, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", __p, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v246);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v264);
      std::logic_error::logic_error((std::logic_error *)v213, &v264);
      *(void *)float64x2_t v213 = MEMORY[0x1E4FBA4C8] + 16;
      std::logic_error::logic_error((std::logic_error *)&v208, (const std::logic_error *)v213);
      long long v209 = 0uLL;
      *(void *)&long long v210 = 0;
      DWORD2(v210) = -1;
      v208.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
      v208.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v208);
      *(void *)&__p[32] = "Process_Range_Results AMCP::Graph::process_data_into_destination(const Cross_Timebase_Proces"
                            "sor &, const DAL::DAL_Time_Range &, const AMCP::DAL::Buffer_Time_Translator::Translation_Ran"
                            "ge &, AMCP::DAL::Writable_Range &, const DAL::Container, DAL::Container)";
      *(void *)&long long v259 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
      DWORD2(v259) = 466;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v251);
      *(std::logic_error *)&v203.__r_.__value_.__r.__words[1] = v251;
      v203.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
      *(void *)&long long v204 = v252;
      v251.__vftable = 0;
      v251.__imp_.__imp_ = 0;
      float64x2_t v252 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    if (round(*(double *)&v224.__imp_.__imp_ - *(double *)&v224.__vftable) != v117)
    {
      AMCP::Log::Scope_Registry::get(v115);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
      std::string::size_type v162 = **(NSObject ***)__p;
      if (*(void *)&__p[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
      }
      if (os_log_type_enabled(v162, OS_LOG_TYPE_ERROR))
      {
        uint64_t v163 = pthread_self();
        mach_port_t v164 = pthread_mach_thread_np(v163);
        *(_DWORD *)std::logic_error __p = 67109890;
        *(_DWORD *)&__p[4] = v164;
        *(_WORD *)&__p[8] = 2080;
        *(void *)&__p[10] = "Converter.cpp";
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = 467;
        *(_WORD *)&__p[24] = 2080;
        *(void *)&__p[26] = "not (temp_buffer_translated_range.m_local_range.length() == processed_range.length())";
        _os_log_error_impl(&dword_1BAA78000, v162, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", __p, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v246);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v264);
      std::logic_error::logic_error((std::logic_error *)v213, &v264);
      *(void *)float64x2_t v213 = MEMORY[0x1E4FBA4C8] + 16;
      std::logic_error::logic_error((std::logic_error *)&v208, (const std::logic_error *)v213);
      long long v209 = 0uLL;
      *(void *)&long long v210 = 0;
      DWORD2(v210) = -1;
      v208.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
      v208.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v208);
      *(void *)&__p[32] = "Process_Range_Results AMCP::Graph::process_data_into_destination(const Cross_Timebase_Proces"
                            "sor &, const DAL::DAL_Time_Range &, const AMCP::DAL::Buffer_Time_Translator::Translation_Ran"
                            "ge &, AMCP::DAL::Writable_Range &, const DAL::Container, DAL::Container)";
      *(void *)&long long v259 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Converter.cpp";
      DWORD2(v259) = 467;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v251);
      *(std::logic_error *)&v203.__r_.__value_.__r.__words[1] = v251;
      v203.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
      *(void *)&long long v204 = v252;
      v251.__vftable = 0;
      v251.__imp_.__imp_ = 0;
      float64x2_t v252 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v101 + 56))(&v216, v101);
    *(std::logic_error *)std::logic_error __p = v224;
    *(_OWORD *)&__p[16] = *(_OWORD *)v225;
    *(void *)&__p[32] = *(void *)&v225[16];
    *(void *)&long long v259 = v106;
    *((void *)&v259 + 1) = v107;
    if (v107) {
      atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)int v260 = *(_OWORD *)v227;
    *(void *)&v260[16] = *(void *)&v227[16];
    uint64_t v261 = v109;
    v262 = v110;
    if (v110) {
      atomic_fetch_add_explicit(&v110->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v263 = v216;
    long long v216 = 0uLL;
    *(_OWORD *)&v213[8] = 0u;
    long long v214 = 0u;
    *(_DWORD *)float64x2_t v213 = v111;
    int v215 = 0;
    AMCP::DAL::Writable_Range::commit_direct_write((uint64_t)v241, (uint64_t)v213, (uint64_t)__p);
    std::string v203 = v180;
    long long v204 = v181;
    if (*((void *)&v181 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v181 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v205 = v182;
    uint64_t v206 = v183;
    long long v207 = v184;
    if (*((void *)&v184 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v184 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(void *)v101 + 144))(&v208, v101, &v203);
    long long v99 = v174;
    uint64_t v118 = v175;
    BOOL v119 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v210, (AMCP::DAL::DAL_Time *)&v208);
    if (v119)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v119);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v264, "com.apple.coreaudio", "AMCP");
      float64x2_t v165 = *(NSObject **)v264.__r_.__value_.__l.__data_;
      if (v264.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v264.__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v165, OS_LOG_TYPE_ERROR))
      {
        std::string::size_type v166 = pthread_self();
        mach_port_t v167 = pthread_mach_thread_np(v166);
        LODWORD(v264.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(v264.__r_.__value_.__r.__words[0]) = v167;
        LOWORD(v264.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v264.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"DAL_Timed_Segment.cpp";
        WORD1(v264.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v264.__r_.__value_.__r.__words[2]) = 181;
        __int16 v265 = 2080;
        *(void *)float64x2_t v266 = "not (incoming_data.get_time_range().end() >= incoming_data.get_time_range().start())";
        _os_log_error_impl(&dword_1BAA78000, v165, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Writable_Range::RecieveData: Bad time range", (uint8_t *)&v264, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v257);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Writable_Range::RecieveData: Bad time range", (uint64_t)&v249);
      std::logic_error::logic_error(&v250, &v249);
      v250.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v251, &v250);
      float64x2_t v254 = 0;
      uint64_t v253 = 0;
      uint64_t v255 = 0;
      int v256 = -1;
      v251.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      float64x2_t v252 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v264, (uint64_t)&v251);
      *(void *)&v266[6] = "void AMCP::DAL::Writable_Range::receive_data_at_range(const Source_ID &, const Readable_Rang"
                            "e &, const DAL_Time_Range &)";
      float64x2_t v267 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
      int v268 = 181;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v244);
      long long v247 = v244;
      float64x2_t v246 = &unk_1F148AA90;
      uint64_t v248 = v245;
      long long v244 = 0uLL;
      uint64_t v245 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    AMCP::DAL::DAL_Time::operator-((uint64_t)&v264, (AMCP::DAL::DAL_Time *)&v182, (AMCP::DAL::DAL_Time *)&v180);
    AMCP::DAL::DAL_Time::operator-((uint64_t)&v251, (AMCP::DAL::DAL_Time *)&v210, (AMCP::DAL::DAL_Time *)&v208);
    BOOL v120 = AMCP::DAL::DAL_Time_Delta::operator==((AMCP::DAL::DAL_Time_Delta *)&v264, (uint64_t)&v251);
    if (v254) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v254);
    }
    std::locale v121 = *(AMCP::Log::Scope_Registry **)&v266[6];
    if (*(void *)&v266[6]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v266[6]);
    }
    if (!v120)
    {
      AMCP::Log::Scope_Registry::get(v121);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v264, "com.apple.coreaudio", "AMCP");
      uint64_t v168 = *(NSObject **)v264.__r_.__value_.__l.__data_;
      if (v264.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v264.__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
      {
        size_t v169 = pthread_self();
        mach_port_t v170 = pthread_mach_thread_np(v169);
        LODWORD(v264.__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(v264.__r_.__value_.__r.__words[0]) = v170;
        LOWORD(v264.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v264.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"DAL_Timed_Segment.cpp";
        WORD1(v264.__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(v264.__r_.__value_.__r.__words[2]) = 182;
        __int16 v265 = 2080;
        *(void *)float64x2_t v266 = "not (write_range.length() == incoming_data.get_time_range().length())";
        _os_log_error_impl(&dword_1BAA78000, v168, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v264, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v257);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v249);
      std::logic_error::logic_error(&v250, &v249);
      v250.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v251, &v250);
      float64x2_t v254 = 0;
      uint64_t v253 = 0;
      uint64_t v255 = 0;
      int v256 = -1;
      v251.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      float64x2_t v252 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v264, (uint64_t)&v251);
      *(void *)&v266[6] = "void AMCP::DAL::Writable_Range::receive_data_at_range(const Source_ID &, const Readable_Rang"
                            "e &, const DAL_Time_Range &)";
      float64x2_t v267 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/DAL_Timed_Segment.cpp";
      int v268 = 182;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v244);
      long long v247 = v244;
      float64x2_t v246 = &unk_1F148AA90;
      uint64_t v248 = v245;
      long long v244 = 0uLL;
      uint64_t v245 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    (*(void (**)(void, unsigned char *, std::string *, std::string *))(**(void **)(v176 + 80) + 32))(*(void *)(v176 + 80), v213, &v208, &v180);
    if (*((void *)&v212 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v212 + 1));
    }
    if (*((void *)&v209 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v209 + 1));
    }
    if (*((void *)&v207 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v207 + 1));
    }
    if (*((void *)&v204 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v204 + 1));
    }
    if (SBYTE7(v214) < 0) {
      operator delete(*(void **)&v213[8]);
    }
    if (*((void *)&v263 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v263 + 1));
    }
    if (v262) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v262);
    }
    if (*((void *)&v259 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v259 + 1));
    }
    if (v222) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v222);
    }
    if (v110) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v110);
    }
    if (v107) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v107);
    }
    *(void *)std::logic_error __p = v230;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)__p);
    if (*((void *)&v240 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v240 + 1));
    }
    std::locale v122 = (std::__shared_weak_count *)*((void *)&v237 + 1);
    std::locale v123 = v172;
    if (!*((void *)&v237 + 1)) {
      goto LABEL_243;
    }
LABEL_242:
    std::__shared_weak_count::__release_shared[abi:ne180100](v122);
    goto LABEL_243;
  }
  if ((char *)v243 - (char *)v242 != 96) {
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  }
  v208.__r_.__value_.__r.__words[0] = v98;
  v208.__r_.__value_.__l.__size_ = (std::string::size_type)v99;
  if (v99) {
    atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)&v231.__r_.__value_.__l.__data_ = v173;
  if (v100) {
    atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(unsigned char *__return_ptr, uint64_t, std::string *, double *, std::string *))(*(void *)a4 + 16))(__p, a4, &v208, v57, &v231);
  int v124 = *(_DWORD *)__p;
  std::logic_error v171 = *(std::logic_error *)&__p[8];
  if (v231.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v231.__r_.__value_.__l.__size_);
  }
  if (v208.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v208.__r_.__value_.__l.__size_);
  }
  long long v125 = v242;
  if (v243 == v242) {
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v127 = *((void *)v242 + 4);
  uint64_t v126 = *((void *)v242 + 5);
  *(_OWORD *)float64x2_t v225 = *((_OWORD *)v242 + 1);
  *(void *)&v225[16] = v127;
  *(void *)&long long v226 = v126;
  long long v128 = (std::__shared_weak_count *)*((void *)v242 + 6);
  *((void *)&v226 + 1) = v128;
  if (v128) {
    atomic_fetch_add_explicit(&v128->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v130 = *((void *)v125 + 9);
  uint64_t v129 = *((void *)v125 + 10);
  *(_OWORD *)float64x2_t v227 = *(_OWORD *)(v125 + 7);
  *(void *)&v227[16] = v130;
  uint64_t v228 = v129;
  long long v131 = (std::__shared_weak_count *)*((void *)v125 + 11);
  float64x2_t v229 = v131;
  if (v131) {
    atomic_fetch_add_explicit(&v131->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::logic_error v224 = v171;
  if (v175) {
    atomic_fetch_add_explicit(&v175->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(std::logic_error *)std::logic_error __p = v224;
  *(_OWORD *)&__p[16] = *(_OWORD *)v225;
  *(void *)&__p[32] = *(void *)&v225[16];
  *(void *)&long long v259 = v126;
  *((void *)&v259 + 1) = v128;
  if (v128) {
    atomic_fetch_add_explicit(&v128->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)int v260 = *(_OWORD *)v227;
  *(void *)&v260[16] = *(void *)&v227[16];
  uint64_t v261 = v129;
  v262 = v131;
  if (v131) {
    atomic_fetch_add_explicit(&v131->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v263 = v173;
  *(_OWORD *)&v236.__r_.__value_.__r.__words[1] = 0u;
  long long v237 = 0u;
  LODWORD(v236.__r_.__value_.__l.__data_) = v124;
  LODWORD(v238) = 0;
  AMCP::DAL::Writable_Range::commit_direct_write(*(void *)(v176 + 80), (uint64_t)&v236, (uint64_t)__p);
  uint64_t v118 = v175;
  std::locale v123 = v172;
  if (SBYTE7(v237) < 0) {
    operator delete((void *)v236.__r_.__value_.__l.__size_);
  }
  if (*((void *)&v263 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v263 + 1));
  }
  if (v262) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v262);
  }
  if (*((void *)&v259 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v259 + 1));
  }
  if (v131) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v131);
  }
  if (v128)
  {
    std::locale v122 = v128;
    goto LABEL_242;
  }
LABEL_243:
  *(void *)std::logic_error __p = &v242;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)__p);
  if (v118) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v118);
  }
  if (v99) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v99);
  }
  if (v61) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  }
  if (v123) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v123);
  }
  if (*((void *)&v177 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v177 + 1));
  }
  if (v179) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v179);
  }
  if (*((void *)&v184 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v184 + 1));
  }
  if (*((void *)&v181 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v181 + 1));
  }
  *(void *)std::logic_error __p = v185;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)__p);
  if (*((void *)&v190 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v190 + 1));
  }
  if (*((void *)&v187 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v187 + 1));
  }
  if (v192)
  {
    *(void *)std::logic_error __p = &v191;
    std::vector<AMCP::DAL::Readable_Range,caulk::rt_allocator<AMCP::DAL::Readable_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)__p);
  }
}

void sub_1BAD054E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (STACK[0x2E8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x2E8]);
  }
  AMCP::DAL::Buffer_Time_Translator::Translation_Range::~Translation_Range((AMCP::DAL::Buffer_Time_Translator::Translation_Range *)&STACK[0x300]);
  STACK[0x4E0] = (unint64_t)&STACK[0x368];
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&STACK[0x4E0]);
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&STACK[0x3D0]);
  STACK[0x4E0] = (unint64_t)&STACK[0x428];
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&STACK[0x4E0]);
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&a57);
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&a23);
  STACK[0x4E0] = (unint64_t)&a34;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&STACK[0x4E0]);
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&a37);
  if (a50)
  {
    STACK[0x4E0] = (unint64_t)&a47;
    std::vector<AMCP::DAL::Readable_Range,caulk::rt_allocator<AMCP::DAL::Readable_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&STACK[0x4E0]);
  }
  _Unwind_Resume(a1);
}

void AMCP::DAL::Writable_Range::Direct_Write_Range::~Direct_Write_Range(AMCP::DAL::Writable_Range::Direct_Write_Range *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

__n128 AMCP::DAL::DAL_Settings::at_or<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>(__n128 *a1, void *a2, unsigned __int8 *a3, __n128 *a4)
{
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, a3);
  if (v6)
  {
    AMCP::Thing::convert_to<std::shared_ptr<AMCP::Graph::Wire_Volume_Connection>>(a1, (uint64_t)(v6 + 40));
  }
  else
  {
    __n128 result = *a4;
    *a1 = *a4;
    a4->n128_u64[0] = 0;
    a4->n128_u64[1] = 0;
  }
  return result;
}

uint64_t caulk::concurrent::atomic_value<AMCP::Graph::Wire_Volume_Connection::Volume_Parameters,2,6>::load(uint64_t result, uint64_t a2)
{
  uint64_t v2 = (_OWORD *)result;
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)a2);
  if (v3)
  {
    int v18 = 0;
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)a2);
    if (v5)
    {
      uint64_t v6 = a2 + 64;
      do
      {
        unsigned int v7 = atomic_load_explicit((atomic_uint *volatile)(a2 + 4), memory_order_acquire) - 1;
        char v8 = 1;
        while (1)
        {
          char v9 = v8;
          unsigned int explicit = atomic_load_explicit((atomic_uint *volatile)(v6 + 192 * (v7 & 1)), memory_order_acquire);
          if (explicit) {
            break;
          }
          char v8 = 0;
          LOBYTE(v7) = v7 - 1;
          if ((v9 & 1) == 0) {
            goto LABEL_12;
          }
        }
        uint64_t v11 = v6 + 192 * (v7 & 1);
        long long v12 = *(_OWORD *)(v11 + 120);
        v2[6] = *(_OWORD *)(v11 + 104);
        v2[7] = v12;
        long long v13 = *(_OWORD *)(v11 + 152);
        v2[8] = *(_OWORD *)(v11 + 136);
        v2[9] = v13;
        long long v14 = *(_OWORD *)(v11 + 56);
        v2[2] = *(_OWORD *)(v11 + 40);
        v2[3] = v14;
        long long v15 = *(_OWORD *)(v11 + 88);
        v2[4] = *(_OWORD *)(v11 + 72);
        v2[5] = v15;
        long long v16 = *(_OWORD *)(v11 + 24);
        _OWORD *v2 = *(_OWORD *)(v11 + 8);
        v2[1] = v16;
        __dmb(9u);
        if (explicit == *(_DWORD *)v11) {
          return result;
        }
        __n128 result = caulk::concurrent::details::spinloop::spin((uint64_t)&v18);
LABEL_12:
        unsigned __int8 v17 = atomic_load((unsigned __int8 *)a2);
      }
      while ((v17 & 1) != 0);
    }
    _os_assert_log();
    __n128 result = _os_crash();
    __break(1u);
  }
  else
  {
    *(_DWORD *)__n128 result = 1065353216;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(void *)(result + 56) = 0;
    *(void *)(result + 64) = 1;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(void *)(result + 120) = 0;
    *(void *)(result + 128) = 1;
    *(void *)(result + 136) = 0;
    *(void *)(result + 144) = 0;
    *(unsigned char *)(result + 152) = 0;
  }
  return result;
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_2,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_2>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_2,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_2>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_2,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_2>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F146C648;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_2,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_2>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F146C648;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_2,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_2>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146C648;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_2,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_2>,void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146C648;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_1,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_1,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK4AMCP5Graph9Converter8get_procEvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_1,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_1,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_1,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F146C5B8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_1,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F146C5B8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_1,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146C5B8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_1,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_1>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146C5B8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_0,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_0>,void ()(unsigned int)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_0,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_0>,void ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK4AMCP5Graph9Converter8get_procEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_0,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_0>,void ()(unsigned int)>::operator()(AMCP::Graph::File_Capture_Settings *a1)
{
  v31[9] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)a1 + 1);
  int v2 = *(_DWORD *)(v1 + 208);
  *(_DWORD *)(v1 + 208) = v2 + 1;
  if (!v2)
  {
    AMCP::Graph::File_Capture_Settings::instance(a1);
    if (HIBYTE(AMCP::Graph::File_Capture_Settings::instance(void)::s_instance))
    {
      std::string::basic_string[abi:ne180100]<0>(&v13, "write");
      long long v14 = 0u;
      long long v15 = 0u;
      LOBYTE(v14) = 1;
      long long v16 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      std::string::basic_string[abi:ne180100]<0>(v17, "create unique name");
      long long v18 = 0u;
      long long v19 = 0u;
      LOBYTE(v18) = 1;
      uint64_t v20 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      std::string::basic_string[abi:ne180100]<0>(v21, "write time stamps");
      long long v22 = 0u;
      long long v23 = 0u;
      LOBYTE(v22) = 1;
      long long v24 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      get_audio_capture_folder(__p);
      std::string::basic_string[abi:ne180100]<0>(v25, "file location");
      long long v26 = *(_OWORD *)__p;
      uint64_t v27 = v10;
      uint64_t v28 = 0;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v10 = 0;
      long long v29 = AMCP::Implementation::In_Place_Storage<std::string>::dispatch;
      std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<char const* const&,std::string const&,0>(v30, "name", (long long *)(v1 + 16));
      asbd_to_dictionary((const CA::StreamDescription *)&cf, (uint64_t *)(v1 + 168));
      std::string::basic_string[abi:ne180100]<0>(v31, "asbd");
      v31[3] = cf;
      memset(&v31[4], 0, 24);
      CFTypeRef cf = 0;
      v31[7] = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
      v11[0] = (uint64_t)&v13;
      v11[1] = 6;
      AMCP::DAL::DAL_Settings::DAL_Settings((unint64_t)v12, v11);
      uint64_t v3 = 384;
      do
      {
        uint64_t v4 = (void **)((char *)&v13 + v3);
        unsigned __int8 v5 = *(void (**)(void, void **, void, void))&v12[v3 + 48];
        if (v5) {
          v5(0, v4 - 5, 0, 0);
        }
        if (*((char *)v4 - 41) < 0) {
          operator delete(*(v4 - 8));
        }
        v3 -= 64;
      }
      while (v3);
      if (cf) {
        CFRelease(cf);
      }
      if (SHIBYTE(v10) < 0) {
        operator delete(__p[0]);
      }
      std::allocate_shared[abi:ne180100]<AMCP::DAL::File,std::allocator<AMCP::DAL::File>,CA::StreamDescription const&,AMCP::DAL::DAL_Settings &,void>((AMCP::DAL::DALSupport **)&v13, *(_DWORD *)(v1 + 176), (uint64_t)v12);
      long long v7 = v13;
      std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table((uint64_t)v12);
      uint64_t v6 = *(std::__shared_weak_count **)(v1 + 144);
      *(_OWORD *)(v1 + 136) = v7;
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
}

void sub_1BAD06404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, CFTypeRef cf, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_0,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_0>,void ()(unsigned int)>::destroy_deallocate(void *__p)
{
  int v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_0,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_0>,void ()(unsigned int)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_0,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_0>,void ()(unsigned int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F146C538;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_0,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_0>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F146C538;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_0,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_0>,void ()(unsigned int)>::~__func(void *a1)
{
  *a1 = &unk_1F146C538;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Graph::Converter::get_proc(void)::$_0,std::allocator<AMCP::Graph::Converter::get_proc(void)::$_0>,void ()(unsigned int)>::~__func(void *a1)
{
  *a1 = &unk_1F146C538;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__shared_ptr_emplace<AMCP::Graph::Node_Proc>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[46];
  if (v2) {
    std::function<void ()>::operator()(v2, 0);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[76];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](a1 + 71);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100](a1 + 67);
  std::__function::__value_func<unsigned long long ()(unsigned long long,unsigned long long &)>::~__value_func[abi:ne180100](a1 + 63);
  std::__function::__value_func<unsigned long long ()(unsigned long long)>::~__value_func[abi:ne180100](a1 + 59);
  std::__function::__value_func<long long ()(void)>::~__value_func[abi:ne180100](a1 + 55);
  std::__function::__value_func<long long ()(void)>::~__value_func[abi:ne180100](a1 + 51);
  std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](a1 + 47);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100](a1 + 43);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100](a1 + 39);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::~__value_func[abi:ne180100](a1 + 35);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100](a1 + 31);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::~__value_func[abi:ne180100](a1 + 27);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100](a1 + 23);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100](a1 + 19);
  std::__function::__value_func<std::shared_ptr<AMCP::IO_Core::Device_Connection> ()(void)>::~__value_func[abi:ne180100](a1 + 15);
  std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__value_func[abi:ne180100](a1 + 11);
  std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_Buffer> ()(AMCP::Direction,unsigned long)>::~__value_func[abi:ne180100](a1 + 7);

  return std::__function::__value_func<void ()(unsigned int,AMCP::Graph::IO_Proc_Cycle_Info const&,caulk::rt_vector<AMCP::DAL::Readable_Range> const&,caulk::rt_vector<AMCP::DAL::Writable_Range> const&)>::~__value_func[abi:ne180100](a1 + 3);
}

void *std::__function::__value_func<void ()(unsigned long,unsigned long)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<AMCP::Graph::Node_Proc>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1481198;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Graph::Node_Proc>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1481198;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t CAStreamRangedDescription::Sorter(CAStreamRangedDescription *this, const AudioStreamRangedDescription *a2, const AudioStreamRangedDescription *a3)
{
  AudioFormatID v3 = *((_DWORD *)this + 2);
  BOOL v4 = v3 != 0;
  AudioFormatID mFormatID = a2->mFormat.mFormatID;
  if (!v3)
  {
    char v10 = 0;
LABEL_22:
    BOOL v6 = v3 == 1819304813;
    unsigned int v8 = mFormatID == 1819304813;
    goto LABEL_23;
  }
  BOOL v6 = v3 == 1819304813;
  if (mFormatID) {
    BOOL v7 = v3 == mFormatID;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    BOOL v12 = mFormatID != 1819304813 && v3 < mFormatID;
    char v10 = v3 == 1819304813 || v12;
    goto LABEL_22;
  }
  unsigned int v8 = mFormatID == 1819304813;
  if (v3 == 1819304813 && mFormatID == 1819304813)
  {
    AudioFormatFlags mFormatFlags = a2->mFormat.mFormatFlags;
    BOOL v4 = (mFormatFlags & 0x40) == 0;
    if ((*((unsigned char *)this + 12) & 0x40) != 0)
    {
      char v10 = 0;
      unsigned int v8 = 1;
    }
    else
    {
      unsigned int v8 = 1;
      if ((mFormatFlags & 0x40) != 0) {
        return v8 & 1;
      }
      char v10 = 0;
      BOOL v4 = 0;
    }
    BOOL v6 = 1;
  }
  else
  {
    char v10 = 0;
    BOOL v4 = 0;
  }
LABEL_23:
  BOOL v14 = !v6 || v4 || v8 == 0;
  if (!v14 && (*((_DWORD *)this + 3) & 1) != (a2->mFormat.mFormatFlags & 1))
  {
    char v10 = a2->mFormat.mFormatFlags;
    LOBYTE(v4) = 1;
  }
  LOBYTE(v8) = v10;
  if (!v4)
  {
    unsigned int v8 = *((_DWORD *)this + 8);
    if (!v8
      || (UInt32 mBitsPerChannel = a2->mFormat.mBitsPerChannel,
          BOOL v16 = v8 == mBitsPerChannel,
          LOBYTE(v8) = v8 > mBitsPerChannel,
          !mBitsPerChannel)
      || v16)
    {
      double v17 = *((double *)this + 5);
      if (v17 != 0.0)
      {
        double v18 = *((double *)this + 6);
        if (v18 != 0.0)
        {
          mMinimuuint64_t m = a2->mSampleRateRange.mMinimum;
          if (mMinimum != 0.0)
          {
            mMaximuuint64_t m = a2->mSampleRateRange.mMaximum;
            if (mMaximum != 0.0)
            {
              if (v18 < mMinimum)
              {
                if (v17 >= mMinimum)
                {
                  LOBYTE(v8) = 1;
                  return v8 & 1;
                }
                goto LABEL_69;
              }
              if (v17 < mMinimum && v18 >= mMinimum && v18 <= mMaximum
                || v17 < mMinimum && v18 > mMaximum
                || v17 != mMinimum
                || v18 != mMaximum)
              {
                if (v17 >= mMinimum)
                {
                  LOBYTE(v8) = v18 != mMaximum || v17 != mMinimum;
                  return v8 & 1;
                }
LABEL_69:
                LOBYTE(v8) = 0;
                return v8 & 1;
              }
            }
          }
        }
      }
      double v22 = *(double *)this;
      if (*(double *)this == 0.0
        || (double mSampleRate = a2->mFormat.mSampleRate, a2->mFormat.mSampleRate == 0.0)
        || v22 == mSampleRate)
      {
        unsigned int v8 = *((_DWORD *)this + 7);
        if (v8)
        {
          UInt32 mChannelsPerFrame = a2->mFormat.mChannelsPerFrame;
          BOOL v7 = v8 == mChannelsPerFrame;
          LOBYTE(v8) = v8 < mChannelsPerFrame;
          if (v7 || mChannelsPerFrame == 0) {
            LOBYTE(v8) = v10;
          }
        }
        else
        {
          LOBYTE(v8) = v10;
        }
      }
      else
      {
        LOBYTE(v8) = v22 > mSampleRate;
      }
    }
  }
  return v8 & 1;
}

uint64_t HALS_IOProcessorFactory::dsp_processor_factory_worker(HALS_IOProcessorFactory *this)
{
  v2[4] = *MEMORY[0x1E4F143B8];
  v2[0] = &unk_1F146CB50;
  v2[3] = v2;
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v2);
}

void sub_1BAD06B58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void StaticContainer<anonymous namespace'::FactoryStaticsObjects>::init_statics(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  {
    *(void *)std::string buf = &v7;
    unsigned int v8 = buf;
  }
  if ((v2 & 1) == 0)
  {
    unsigned __int8 v3 = atomic_load(StaticContainerBase::s_statics_initializable);
    if (v3)
    {
      if ((v5 & 1) == 0)
      {
        uint64_t v6 = *(void *)(a1 + 24);
        if (!v6) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
      }
      std::mutex::unlock(v4);
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "StaticContainer.h";
      __int16 v10 = 1024;
      int v11 = 121;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Not initializable.", buf, 0x12u);
    }
  }
}

void sub_1BAD06CF0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<StaticContainer<anonymous namespace'::FactoryStaticsObjects>::init_static_container_class(void)::{lambda(void)#1} &&>>()
{
}

uint64_t anonymous namespace'::DSP_IOProcessorFactory::owning_engine_info(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  if (!a4) {
    __assert_rtn("owning_engine_info", "HALS_IOProcessorFactory.cpp", 497, "engine_index.has_value()");
  }
  uint64_t v4 = *(void *)(a2 + 112);
  if (a3 >= (*(void *)(a2 + 120) - v4) >> 7) {
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  }
  return *(void *)(v4 + (a3 << 7));
}

void anonymous namespace'::DSP_IOProcessorFactory::set_processor(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  if (!a5) {
    __assert_rtn("set_processor", "HALS_IOProcessorFactory.cpp", 482, "engine_index.has_value()");
  }
  uint64_t v5 = *(void *)(a2 + 112);
  if (a4 >= (*(void *)(a2 + 120) - v5) >> 7) {
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  }
  *(void *)(v5 + (a4 << 7) + 104) = a3;
}

float anonymous namespace'::DSP_IOProcessorFactory::set_initial_volume(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (!(_BYTE)a5) {
    __assert_rtn("set_initial_volume", "HALS_IOProcessorFactory.cpp", 466, "engine_index.has_value()");
  }
  uint64_t v7 = **(void **)((*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)a1 + 72))(a1, a3, a4, a5)+ 8);
  (*(void (**)(void))(v7 + 264))();
  uint64_t v9 = *(void *)(a3 + 112);
  if (a4 >= (*(void *)(a3 + 120) - v9) >> 7) {
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v10 = *(void *)(*(void *)(v9 + (a4 << 7) + 104) + 112);
  if (v10)
  {
    *(_OWORD *)(v10 + 32) = xmmword_1BAFF9630;
    if (result < 0.0) {
      float result = 0.0;
    }
    if (result > 1.0) {
      float result = 1.0;
    }
    float v11 = result - *(float *)(v10 + 20);
    *(float *)(v10 + 24) = result;
    *(float *)(v10 + 28) = v11;
  }
  return result;
}

uint64_t anonymous namespace'::DSP_IOProcessorFactory::io_processor_custom_unit(uint64_t a1, void *a2, unint64_t a3, char a4)
{
  if (!a4) {
    __assert_rtn("io_processor_custom_unit", "HALS_IOProcessorFactory.cpp", 451, "engine_index.has_value()");
  }
  uint64_t v4 = a2[14];
  if (a3 >= (a2[15] - v4) >> 7) {
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v7 = a2[22];
  uint64_t v5 = a2 + 22;
  uint64_t v6 = v7;
  if (v7)
  {
    unsigned int v8 = v5;
    do
    {
      unsigned int v9 = *(_DWORD *)(v6 + 28);
      BOOL v10 = v9 >= 6;
      if (v9 >= 6) {
        float v11 = (uint64_t *)v6;
      }
      else {
        float v11 = (uint64_t *)(v6 + 8);
      }
      if (v10) {
        unsigned int v8 = (void *)v6;
      }
      uint64_t v6 = *v11;
    }
    while (*v11);
    if (v8 != v5)
    {
      uint64_t v12 = v4 + (a3 << 7);
      BOOL v13 = *((_DWORD *)v8 + 7) <= 6u && *(_DWORD *)(v12 + 100) == 0;
      if (v13 && !*(void *)(v12 + 112)) {
        operator new();
      }
    }
  }
  return *(void *)(v4 + (a3 << 7) + 112);
}

void sub_1BAD070EC(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 152) = v4;
    operator delete(v4);
  }
  std::__function::__value_func<void ()(AudioBufferList *,AudioBufferList *,unsigned int)>::~__value_func[abi:ne180100]((void *)(v1 + 32));
  MEMORY[0x1C1859840](v1, 0x10B1C40E88B0623);
  _Unwind_Resume(a1);
}

BOOL anonymous namespace'::DSP_IOProcessorFactory::is_reference_stream(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  if (!a4) {
    __assert_rtn("is_reference_stream", "HALS_IOProcessorFactory.cpp", 423, "engine_index.has_value()");
  }
  uint64_t v6 = *(void *)(a2 + 112);
  if (a3 >= (*(void *)(a2 + 120) - v6) >> 7) {
    std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v7 = **(void **)((*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)a1 + 72))(a1, a2, a3)
                   + 8);
  unsigned int v8 = (HALS_IODevice *)(*(uint64_t (**)(void))(v7 + 320))();
  if (!v8) {
    return 0;
  }
  unsigned int v9 = (HALS_Stream *)HALS_IODevice::CopyStreamByIndex(v8, *(unsigned char *)(a2 + 8), *(_DWORD *)(v6 + (a3 << 7) + 96));
  if (!v9) {
    return 0;
  }

  return HALS_Stream::IsReferenceStream(v9);
}

__n128 anonymous namespace'::DSP_IOProcessorFactory::local_format@<Q0>(uint64_t a1@<X1>, unsigned int a2@<W2>, char a3@<W3>, uint64_t a4@<X8>)
{
  if (!a3) {
    __assert_rtn("local_format", "HALS_IOProcessorFactory.cpp", 389, "engine_index.has_value()");
  }
  if (*(_DWORD *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 112);
    if (a2 >= (unint64_t)((*(void *)(a1 + 120) - v4) >> 7))
    {
      uint64_t v10 = 0;
      __n128 v8 = 0u;
      long long v9 = 0u;
      goto LABEL_8;
    }
    uint64_t v5 = v4 + ((unint64_t)a2 << 7);
    __n128 v8 = *(__n128 *)(v5 + 56);
    long long v9 = *(_OWORD *)(v5 + 72);
    uint64_t v6 = *(void *)(v5 + 88);
  }
  else
  {
    __n128 v8 = *(__n128 *)(a1 + 368);
    long long v9 = *(_OWORD *)(a1 + 384);
    uint64_t v6 = *(void *)(a1 + 400);
  }
  uint64_t v10 = v6;
LABEL_8:
  __n128 result = v8;
  *(__n128 *)a4 = v8;
  *(_OWORD *)(a4 + 16) = v9;
  *(void *)(a4 + 32) = v10;
  return result;
}

uint64_t anonymous namespace'::DSP_IOProcessorFactory::allocate_output_processor(_anonymous_namespace_::DSP_IOProcessorFactory *this, const HALS_IOProcessorFactory *a2, HALS_IOStreamInfo *a3, const HALS_IOStackDescription *a4)
{
  if (*((void *)a3 + 15) != *((void *)a3 + 14))
  {
    unint64_t v8 = 0;
    do
      HALS_IOProcessorFactoryWorker::do_allocate_processor((uint64_t)this, (uint64_t)a2, (uint64_t)a3, v8++, 1, a4);
    while (v8 < (uint64_t)(*((void *)a3 + 15) - *((void *)a3 + 14)) >> 7);
  }
  return 0;
}

uint64_t HALS_IOProcessorFactoryWorker::do_allocate_processor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, HALS_IOStackDescription *a6)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a3, a4, a5);
  if (*(void *)(result + 8) && *(void *)(a2 + 8))
  {
    uint64_t v20 = a2;
    memset(&v22, 0, sizeof(v22));
    (*(void (**)(AudioStreamBasicDescription *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 32))(&v22, a1, a3, a4, a5);
    uint64_t v13 = a2;
    uint64_t v14 = *(void *)(a2 + 8);
    if (a6)
    {
      memset(&v21, 0, sizeof(v21));
      HALS_IOStackDescription::GetFormat(a6, &v21);
      uint64_t v15 = *(void *)(v13 + 8);
    }
    else
    {
      AudioStreamBasicDescription v21 = v22;
      uint64_t v15 = v14;
    }
    v21.double mSampleRate = (*(double (**)(void))(**(void **)(v15 + 8) + 328))(*(void *)(v15 + 8));
    if (*(_DWORD *)(v20 + 16))
    {
      double v16 = (*(double (**)(void))(**(void **)(*(void *)(v20 + 8) + 8) + 328))(*(void *)(*(void *)(v20 + 8) + 8));
      if (v16 != v22.mSampleRate)
      {
        double v18 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v20 + 16));
        if (v18)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            int v19 = *(_DWORD *)(v20 + 20);
            *(_DWORD *)std::string buf = 136315650;
            long long v24 = "HALS_IOProcessorFactory.cpp";
            __int16 v25 = 1024;
            int v26 = 311;
            __int16 v27 = 1024;
            int v28 = v19;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOProcessorFactoryWorker::do_allocate_processor: sample rate conversion no longer enables drift correction by default [IOC: %d]", buf, 0x18u);
          }
        }
        HALS_ObjectMap::ReleaseObject(v18, v17);
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a3, a4, a5);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 40))(a1, a3, a4, a5);
    operator new();
  }
  return result;
}

void sub_1BAD078AC(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::DSP_IOProcessorFactory::allocate_processor(_anonymous_namespace_::DSP_IOProcessorFactory *this, const HALS_IOProcessorFactory *a2, HALS_IOStreamInfo *a3)
{
  v98[19] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *((void *)a3 + 14);
  uint64_t v4 = *((void *)a3 + 15);
  uint64_t v6 = (uint64_t *)((char *)a3 + 112);
  if (v4 != v5)
  {
    unint64_t v8 = this;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      uint64_t v11 = v5 + v9;
      if (*(_DWORD *)(v5 + v9 + 100) == 4)
      {
        *(void *)(v11 + 104) = 0;
        *(void *)(v11 + 112) = 0;
      }
      else
      {
        this = (_anonymous_namespace_::DSP_IOProcessorFactory *)HALS_IOProcessorFactoryWorker::do_allocate_processor((uint64_t)v8, (uint64_t)a2, (uint64_t)a3, v10, 1, 0);
        uint64_t v5 = *((void *)a3 + 14);
        uint64_t v4 = *((void *)a3 + 15);
      }
      ++v10;
      v9 += 128;
    }
    while (v10 < (v4 - v5) >> 7);
  }
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v94, "com.apple.coreaudio", "AMCP");
  uint64_t v12 = *(NSObject **)v94.__locale_;
  if ((void)v95) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v95);
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    long long v75 = v6;
    uint64_t v13 = pthread_self();
    mach_port_t v74 = pthread_mach_thread_np(v13);
    if (*((void *)a3 + 23))
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v82);
      if (*((void *)a3 + 23) == 1)
      {
        uint64_t v14 = (char *)a3 + 176;
        uint64_t v15 = (char *)*((void *)a3 + 22);
        if (!v15) {
          goto LABEL_23;
        }
        double v16 = (char *)a3 + 176;
        do
        {
          unsigned int v17 = *((_DWORD *)v15 + 7);
          BOOL v18 = v17 >= 9;
          if (v17 >= 9) {
            int v19 = (char **)v15;
          }
          else {
            int v19 = (char **)(v15 + 8);
          }
          if (v18) {
            double v16 = v15;
          }
          uint64_t v15 = *v19;
        }
        while (*v19);
        if (v16 == v14 || *((_DWORD *)v16 + 7) >= 0xAu) {
LABEL_23:
        }
          double v16 = (char *)a3 + 176;
        BOOL v79 = v14 != v16;
      }
      else
      {
        BOOL v79 = 0;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v83, (uint64_t)"[hal_dsp] HALS_IODSPInfo::GetDebugDescription() ", 48);
      uint64_t v20 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)":", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
      AudioStreamBasicDescription v21 = std::locale::use_facet(&v94, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
      std::locale::~locale(&v94);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v83, (uint64_t)"[hal_dsp] Adapted: ", 19);
      if (*((unsigned char *)a3 + 256)) {
        AudioStreamBasicDescription v22 = "OK";
      }
      else {
        AudioStreamBasicDescription v22 = "PENDING/FAILED";
      }
      if (*((unsigned char *)a3 + 256)) {
        uint64_t v23 = 2;
      }
      else {
        uint64_t v23 = 14;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v83, (uint64_t)v22, v23);
      if (*((unsigned char *)a3 + 257)) {
        long long v24 = " (bypass)";
      }
      else {
        long long v24 = "";
      }
      if (*((unsigned char *)a3 + 257)) {
        uint64_t v25 = 9;
      }
      else {
        uint64_t v25 = 0;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v83, (uint64_t)v24, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v83, (uint64_t)" | Frame Count: ", 16);
      int v26 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" | Isolated Use Case ID: ", 25);
      if (*((unsigned char *)a3 + 212))
      {
        v27.i32[0] = bswap32(*((_DWORD *)a3 + 52));
        *(int8x8_t *)v27.i8 = vzip1_s8(*(int8x8_t *)v27.i8, *(int8x8_t *)v27.i8);
        v28.i64[0] = 0x1F0000001FLL;
        v28.i64[1] = 0x1F0000001FLL;
        v29.i64[0] = 0x5F0000005FLL;
        v29.i64[1] = 0x5F0000005FLL;
        *(int8x8_t *)v27.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v29, (uint32x4_t)vsraq_n_s32(v28, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v27.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v27.i8, (int8x8_t)0x2E002E002E002ELL);
        unsigned int v30 = 4;
        HIBYTE(v95) = 4;
        LODWORD(v94.__locale_) = vmovn_s16(v27).u32[0];
        BYTE4(v94.__locale_) = 0;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v94, "N/A");
        unsigned int v30 = HIBYTE(v95);
      }
      if ((v30 & 0x80u) == 0) {
        locale = &v94;
      }
      else {
        locale = v94.__locale_;
      }
      if ((v30 & 0x80u) == 0) {
        uint64_t v32 = v30;
      }
      else {
        uint64_t v32 = v95;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)locale, v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" | DSP Offloads: ", 17);
      uint64_t v33 = *((void *)a3 + 24);
      if (v33) {
        DSP_Host_OffloadDictionary::get_debug_string((DSP_Host_OffloadDictionary *)__p, v33);
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(__p, "N/A");
      }
      if (v88.i8[7] >= 0) {
        uint64_t v34 = __p;
      }
      else {
        uint64_t v34 = (void **)__p[0];
      }
      if (v88.i8[7] >= 0) {
        uint64_t v35 = v88.u8[7];
      }
      else {
        uint64_t v35 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v34, v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" | Latency: ", 12);
      if (*((unsigned char *)a3 + 164)) {
        std::to_string(&v93, *((_DWORD *)a3 + 40));
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(&v93, "(missing)");
      }
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v36 = &v93;
      }
      else {
        uint64_t v36 = (std::string *)v93.__r_.__value_.__r.__words[0];
      }
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v93.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v93.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v36, size);
      std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
      uint64_t v38 = std::locale::use_facet((const std::locale *)&v92, MEMORY[0x1E4FBA258]);
      ((void (*)(const std::locale::facet *, uint64_t))v38->__vftable[2].~facet_0)(v38, 10);
      std::locale::~locale((std::locale *)&v92);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v93.__r_.__value_.__l.__data_);
      }
      if (v88.i8[7] < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v95) < 0) {
        operator delete(v94.__locale_);
      }
      uint64_t v39 = *((void *)a3 + 14);
      uint64_t v40 = *((void *)a3 + 15);
      if (v39 != v40)
      {
        uint64_t v41 = 0;
        uint64_t v42 = v39 + 56;
        CFStringRef v76 = (std::locale::__imp *)*MEMORY[0x1E4FBA408];
        long long v77 = *(std::locale::__imp **)(MEMORY[0x1E4FBA408] + 64);
        uint64_t v78 = *(void *)(MEMORY[0x1E4FBA408] + 72);
        do
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v83, (uint64_t)"[hal_dsp] ", 10);
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v94);
          CA::StreamDescription::AsString((CA::StreamDescription *)&v93, (void *)v42, v43, v44);
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&v92, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
            if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(&v91, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
              goto LABEL_78;
            }
          }
          else
          {
            std::string v92 = v93;
          }
          std::string v91 = v93;
LABEL_78:
          uint64_t v45 = *(void *)(v42 + 48);
          if (v45)
          {
            int16x8_t v46 = *(int16x8_t *)(v45 + 40);
            *(_OWORD *)std::logic_error __p = *(_OWORD *)(v45 + 24);
            int16x8_t v88 = v46;
            uint64_t v89 = *(void *)(v45 + 56);
            CA::StreamDescription::AsString((CA::StreamDescription *)&v90, __p, *(double *)__p, v46);
            if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v92.__r_.__value_.__l.__data_);
            }
            std::string v92 = v90;
            uint64_t v47 = *(void *)(v42 + 48);
            int16x8_t v48 = *(int16x8_t *)(v47 + 80);
            *(_OWORD *)std::logic_error __p = *(_OWORD *)(v47 + 64);
            int16x8_t v88 = v48;
            uint64_t v89 = *(void *)(v47 + 96);
            CA::StreamDescription::AsString((CA::StreamDescription *)&v90, __p, *(double *)__p, v48);
            if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v91.__r_.__value_.__l.__data_);
            }
            std::string v91 = v90;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v95 + 1, (uint64_t)"DSP IO Stream #", 15);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v95 + 1, (uint64_t)" | device ID ", 13);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v95 + 1, (uint64_t)" | stream index ", 16);
          std::ostream::operator<<();
          double v49 = "    ";
          if ((*(_DWORD *)(v42 + 44) - 1) < 2) {
            double v49 = " (/)";
          }
          if (v79) {
            uint64_t v50 = " (=)";
          }
          else {
            uint64_t v50 = v49;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v95 + 1, (uint64_t)v50, 4);
          if (*(void *)(v42 + 48))
          {
            if (*(void *)(v42 + 56)) {
              double v51 = " (^)";
            }
            else {
              double v51 = "    ";
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v95 + 1, (uint64_t)v51, 4);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v95 + 1, (uint64_t)" | shared ", 10);
            if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string v52 = &v92;
            }
            else {
              std::string v52 = (std::string *)v92.__r_.__value_.__r.__words[0];
            }
            if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v53 = HIBYTE(v92.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v53 = v92.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v95 + 1, (uint64_t)v52, v53);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v95 + 1, (uint64_t)" | local ", 9);
            uint64_t v54 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
            std::string::size_type v56 = v91.__r_.__value_.__l.__size_;
            std::string::size_type v55 = v91.__r_.__value_.__r.__words[0];
            BOOL v57 = (v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
            std::string::size_type v58 = &v91;
          }
          else
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v95 + 1, (uint64_t)" | engine ", 10);
            uint64_t v54 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
            std::string::size_type v56 = v93.__r_.__value_.__l.__size_;
            std::string::size_type v55 = v93.__r_.__value_.__r.__words[0];
            BOOL v57 = (v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
            std::string::size_type v58 = &v93;
          }
          if (v57) {
            uint64_t v59 = v55;
          }
          else {
            uint64_t v59 = (uint64_t)v58;
          }
          if (v57) {
            uint64_t v60 = v56;
          }
          else {
            uint64_t v60 = v54;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v95 + 1, v59, v60);
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__dst, (uint64_t)v96);
          if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v91.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v92.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v93.__r_.__value_.__l.__data_);
          }
          v94.__locale_ = v76;
          *(std::locale::__imp **)((char *)&v94.__locale_ + *((void *)v76 - 3)) = v77;
          *((void *)&v95 + 1) = v78;
          v96[0] = MEMORY[0x1E4FBA470] + 16;
          if (v97 < 0) {
            operator delete((void *)v96[8]);
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1C1859700](v98);
          if ((v81 & 0x80u) == 0) {
            uint64_t v61 = __dst;
          }
          else {
            uint64_t v61 = (void **)__dst[0];
          }
          if ((v81 & 0x80u) == 0) {
            uint64_t v62 = v81;
          }
          else {
            uint64_t v62 = (uint64_t)__dst[1];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v83, (uint64_t)v61, v62);
          std::ios_base::getloc((const std::ios_base *)((char *)&v84[-1] + *(void *)(v83 - 24)));
          double v63 = std::locale::use_facet(&v94, MEMORY[0x1E4FBA258]);
          ((void (*)(const std::locale::facet *, uint64_t))v63->__vftable[2].~facet_0)(v63, 10);
          std::locale::~locale(&v94);
          std::ostream::put();
          std::ostream::flush();
          if ((char)v81 < 0) {
            operator delete(__dst[0]);
          }
          uint64_t v64 = v42 + 72;
          v42 += 128;
          ++v41;
        }
        while (v64 != v40);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v83, (uint64_t)"[hal_dsp] Client-Facing", 23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v83, (uint64_t)" | format ", 10);
      *(void *)&double v65 = HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v94, v75).n128_u64[0];
      CA::StreamDescription::AsString((CA::StreamDescription *)__p, &v94, v65, v66);
      if (v88.i8[7] >= 0) {
        std::string::size_type v67 = __p;
      }
      else {
        std::string::size_type v67 = (void **)__p[0];
      }
      if (v88.i8[7] >= 0) {
        uint64_t v68 = v88.u8[7];
      }
      else {
        uint64_t v68 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v83, (uint64_t)v67, v68);
      if (v88.i8[7] < 0) {
        operator delete(__p[0]);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v83, (uint64_t)" | spatial layout ", 18);
      if (*((unsigned char *)a3 + 248)) {
        uint64_t v69 = "specified";
      }
      else {
        uint64_t v69 = "<empty>";
      }
      if (*((unsigned char *)a3 + 248)) {
        uint64_t v70 = 9;
      }
      else {
        uint64_t v70 = 7;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v83, (uint64_t)v69, v70);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__p, (uint64_t)v84);
      v82[0] = *MEMORY[0x1E4FBA408];
      uint64_t v71 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      *(void *)((char *)v82 + *(void *)(v82[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
      uint64_t v83 = v71;
      v84[0] = MEMORY[0x1E4FBA470] + 16;
      if (v85 < 0) {
        operator delete((void *)v84[8]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1C1859700](&v86);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "[hal_dsp] HALS_IODSPInfo::GetDebugDescription(): No DSP assigned to this stream.");
    }
    double v72 = __p;
    if (v88.i8[7] < 0) {
      double v72 = (void **)__p[0];
    }
    LODWORD(v94.__locale_) = 67109891;
    HIDWORD(v94.__locale_) = v74;
    LOWORD(v95) = 2080;
    *(void *)((char *)&v95 + 2) = "HALS_IOProcessorFactory.cpp";
    WORD5(v95) = 1024;
    HIDWORD(v95) = 356;
    LOWORD(v96[0]) = 2081;
    *(void *)((char *)v96 + 2) = v72;
    _os_log_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d %{private}s", (uint8_t *)&v94, 0x22u);
    if (v88.i8[7] < 0) {
      operator delete(__p[0]);
    }
  }
  return 0;
}

void sub_1BAD08548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  a22 = *MEMORY[0x1E4FBA408];
  uint64_t v42 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(uint64_t *)((char *)&a22 + *(void *)(a22 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  a24 = v42;
  a25 = MEMORY[0x1E4FBA470] + 16;
  if (a38 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C1859700](&a41);
  _Unwind_Resume(a1);
}

void anonymous namespace'::DSP_IOProcessorFactory::~DSP_IOProcessorFactory(_anonymous_namespace_::DSP_IOProcessorFactory *this)
{
}

uint64_t anonymous namespace'::NonDSP_IOProcessorFactory::owning_engine_info(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    __assert_rtn("owning_engine_info", "HALS_IOProcessorFactory.cpp", 490, "not engine_index.has_value()");
  }
  if (!*(_DWORD *)(a2 + 108)
    || ((uint64_t v4 = *(void *)(a2 + 112), *(void *)(a2 + 120) != v4) ? (v5 = v4 == 0) : (v5 = 1), v5))
  {
    uint64_t v4 = a2 + 408;
  }
  return *(void *)v4;
}

void anonymous namespace'::NonDSP_IOProcessorFactory::set_processor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5) {
    __assert_rtn("set_processor", "HALS_IOProcessorFactory.cpp", 475, "not engine_index.has_value()");
  }
  *(void *)(a2 + 96) = a3;
}

float anonymous namespace'::NonDSP_IOProcessorFactory::set_initial_volume(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((_BYTE)a5) {
    __assert_rtn("set_initial_volume", "HALS_IOProcessorFactory.cpp", 458, "not engine_index.has_value()");
  }
  uint64_t v6 = **(void **)((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a3, a4, a5)+ 8);
  (*(void (**)(void))(v6 + 264))();
  uint64_t v8 = *(void *)(*(void *)(a3 + 96) + 112);
  if (v8)
  {
    *(_OWORD *)(v8 + 32) = xmmword_1BAFF9630;
    if (result < 0.0) {
      float result = 0.0;
    }
    if (result > 1.0) {
      float result = 1.0;
    }
    float v9 = result - *(float *)(v8 + 20);
    *(float *)(v8 + 24) = result;
    *(float *)(v8 + 28) = v9;
  }
  return result;
}

uint64_t anonymous namespace'::NonDSP_IOProcessorFactory::io_processor_custom_unit(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    __assert_rtn("io_processor_custom_unit", "HALS_IOProcessorFactory.cpp", 444, "not engine_index.has_value()");
  }
  return 0;
}

BOOL anonymous namespace'::NonDSP_IOProcessorFactory::is_reference_stream(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    __assert_rtn("is_reference_stream", "HALS_IOProcessorFactory.cpp", 396, "not engine_index.has_value()");
  }
  uint64_t v5 = *(void *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1) + 8);
  if (!v5) {
    return 0;
  }
  DeviceIDFromEngineID = (HALS_ObjectMap *)HALS_IOContextDescription::GetDeviceIDFromEngineID((HALS_IOContextDescription *)*(unsigned int *)(v5 + 16));
  uint64_t v7 = (HALS_IODevice *)HALS_ObjectMap::CopyObjectByObjectID(DeviceIDFromEngineID);
  float v9 = v7;
  if (v7)
  {
    unint64_t v10 = (HALS_Stream *)HALS_IODevice::CopyStreamByIndex(v7, *(unsigned char *)(a2 + 8), *(_DWORD *)(a2 + 12));
    uint64_t v12 = v10;
    if (v10) {
      IsReferenceStreauint64_t m = HALS_Stream::IsReferenceStream(v10);
    }
    else {
      IsReferenceStreauint64_t m = 0;
    }
    HALS_ObjectMap::ReleaseObject(v12, v11);
  }
  else
  {
    IsReferenceStreauint64_t m = 0;
  }
  HALS_ObjectMap::ReleaseObject(v9, v8);
  return IsReferenceStream;
}

void sub_1BAD08B34(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v3, a2);
  HALS_ObjectMap::ReleaseObject(v2, v5);
  _Unwind_Resume(a1);
}

double anonymous namespace'::NonDSP_IOProcessorFactory::local_format@<D0>(uint64_t a1@<X1>, char a2@<W3>, uint64_t a3@<X8>)
{
  if (a2) {
    __assert_rtn("local_format", "HALS_IOProcessorFactory.cpp", 382, "not engine_index.has_value()");
  }
  if (*(_DWORD *)(a1 + 108))
  {
    HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v7, (uint64_t *)(a1 + 112));
  }
  else
  {
    long long v4 = *(_OWORD *)(a1 + 384);
    long long v7 = *(_OWORD *)(a1 + 368);
    long long v8 = v4;
    uint64_t v9 = *(void *)(a1 + 400);
  }
  double result = *(double *)&v7;
  long long v6 = v8;
  *(_OWORD *)a3 = v7;
  *(_OWORD *)(a3 + 16) = v6;
  *(void *)(a3 + 32) = v9;
  return result;
}

uint64_t anonymous namespace'::NonDSP_IOProcessorFactory::allocate_output_processor(_anonymous_namespace_::NonDSP_IOProcessorFactory *this, const HALS_IOProcessorFactory *a2, HALS_IOStreamInfo *a3, const HALS_IOStackDescription *a4)
{
  return 0;
}

uint64_t anonymous namespace'::NonDSP_IOProcessorFactory::allocate_processor(_anonymous_namespace_::NonDSP_IOProcessorFactory *this, const HALS_IOProcessorFactory *a2, HALS_IOStreamInfo *a3)
{
  return 0;
}

void anonymous namespace'::NonDSP_IOProcessorFactory::~NonDSP_IOProcessorFactory(_anonymous_namespace_::NonDSP_IOProcessorFactory *this)
{
}

void *std::__function::__func<anonymous namespace'::FactoryStatics::dsp_io_processor_factory(void)::{lambda(void)#1},std::allocator<anonymous namespace'::FactoryStatics::dsp_io_processor_factory(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<anonymous namespace'::FactoryStatics::dsp_io_processor_factory(void)::{lambda(void)#1},std::allocator<anonymous namespace'::FactoryStatics::dsp_io_processor_factory(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN12_GLOBAL__N_114FactoryStatics24dsp_io_processor_factoryEvEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<anonymous namespace'::FactoryStatics::dsp_io_processor_factory(void)::{lambda(void)#1},std::allocator<anonymous namespace'::FactoryStatics::dsp_io_processor_factory(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F146CB50;
}

void *std::__function::__func<anonymous namespace'::FactoryStatics::dsp_io_processor_factory(void)::{lambda(void)#1},std::allocator<anonymous namespace'::FactoryStatics::dsp_io_processor_factory(void)::{lambda(void)#1}>,void ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1F146CB50;
  return result;
}

void std::__function::__func<anonymous namespace'::FactoryStatics::dsp_io_processor_factory(void)::{lambda(void)#1},std::allocator<anonymous namespace'::FactoryStatics::dsp_io_processor_factory(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

uint64_t HALS_IOProcessorFactory::non_dsp_processor_factory_worker(HALS_IOProcessorFactory *this)
{
  v2[4] = *MEMORY[0x1E4F143B8];
  v2[0] = &unk_1F146CAD0;
  v2[3] = v2;
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v2);
}

void sub_1BAD08DA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<anonymous namespace'::FactoryStatics::non_dsp_io_processor_factory(void)::{lambda(void)#1},std::allocator<anonymous namespace'::FactoryStatics::non_dsp_io_processor_factory(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<anonymous namespace'::FactoryStatics::non_dsp_io_processor_factory(void)::{lambda(void)#1},std::allocator<anonymous namespace'::FactoryStatics::non_dsp_io_processor_factory(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN12_GLOBAL__N_114FactoryStatics28non_dsp_io_processor_factoryEvEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<anonymous namespace'::FactoryStatics::non_dsp_io_processor_factory(void)::{lambda(void)#1},std::allocator<anonymous namespace'::FactoryStatics::non_dsp_io_processor_factory(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F146CAD0;
}

void *std::__function::__func<anonymous namespace'::FactoryStatics::non_dsp_io_processor_factory(void)::{lambda(void)#1},std::allocator<anonymous namespace'::FactoryStatics::non_dsp_io_processor_factory(void)::{lambda(void)#1}>,void ()(void)>::__clone()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1F146CAD0;
  return result;
}

void std::__function::__func<anonymous namespace'::FactoryStatics::non_dsp_io_processor_factory(void)::{lambda(void)#1},std::allocator<anonymous namespace'::FactoryStatics::non_dsp_io_processor_factory(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

uint64_t HALS_IOProcessorFactory::platform_supports_hosted_dsp(HALS_IOProcessorFactory *this)
{
  return 1;
}

void HALS_IOProcessorFactory::~HALS_IOProcessorFactory(HALS_IOProcessorFactory *this)
{
}

void HALS_IOProcessorFactory::free_processor(HALS_IOProcessorFactory *this, HALS_IOStreamInfo *a2)
{
  int v2 = (int)a2;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v3 = (unsigned __int8 *)*((void *)this + 12);
  if (v3)
  {
    int v4 = v3[8];
    if ((v3[8] != 0) == v2)
    {
      if (!*((_DWORD *)this + 27)
        || ((uint64_t v11 = (void *)*((void *)this + 14), *((void **)this + 15) != v11) ? (v12 = v11 == 0) : (v12 = 1),
            v12))
      {
        uint64_t v11 = (void *)((char *)this + 408);
      }
      HALS_IOProcessorList::DestroyProcessor((void *)(*v11 + 24 * *((unsigned __int8 *)this + 8) + 696), (HALS_IOProcessor *)v3);
      *((void *)this + 12) = 0;
    }
    else
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
      uint64_t v5 = *v13;
      if (*(void *)v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        long long v6 = pthread_self();
        mach_port_t v7 = pthread_mach_thread_np(v6);
        long long v8 = "output";
        LODWORD(v13) = 67110146;
        HIDWORD(v13) = v7;
        *(_WORD *)uint64_t v14 = 2080;
        *(void *)&_OWORD v14[2] = "HALS_IOProcessorFactory.cpp";
        if (v2) {
          uint64_t v9 = "input";
        }
        else {
          uint64_t v9 = "output";
        }
        __int16 v15 = 1024;
        int v16 = 193;
        __int16 v17 = 2082;
        if (v4) {
          long long v8 = "input";
        }
        BOOL v18 = v9;
        __int16 v19 = 2082;
        uint64_t v20 = v8;
        _os_log_error_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_IOProcessorFactoryWorker::free_processor: trying to free %{public}s processor but it is for %{public}s", (uint8_t *)&v13, 0x2Cu);
      }
    }
  }
}

uint64_t HALS_DefaultDeviceManager::FilterSettings(HALS_DefaultDeviceManager *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  AudioStreamBasicDescription v22 = this;
  uint64_t v2 = 0;
  char v3 = 0;
  int v23 = HALB_Mutex::Lock(this);
  do
  {
    int v4 = *(const void **)((char *)this + v2 + 120);
    if (v4)
    {
      OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v21, v4);
      v21[0] = &unk_1F1489A20;
      DeviceInfo::DeviceInfo((uint64_t)v24, (uint64_t)v21);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v21);
      if (*((unsigned char *)this + 99) && v26 == 1634300528
        || (v27 ? (BOOL v5 = v26 == 1651275109) : (BOOL v5 = 0),
            v5 ? (BOOL v6 = *((unsigned char *)this + 100) == 0) : (BOOL v6 = 1),
            v6 ? (BOOL v7 = v28 == 0) : (BOOL v7 = 0),
            !v7))
      {
        OS::CF::UntypedObject::operator=((uint64_t)this + v2 + 112, 0);
        *(_DWORD *)((char *)this + v2 + 128) = 0;
        char v3 = 1;
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v25);
    }
    v2 += 24;
  }
  while (v2 != 72);
  for (uint64_t i = 0; i != 72; i += 24)
  {
    uint64_t v9 = *(const void **)((char *)this + i + 224);
    if (v9)
    {
      OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v20, v9);
      v20[0] = &unk_1F1489A20;
      DeviceInfo::DeviceInfo((uint64_t)v24, (uint64_t)v20);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v20);
      if (*((unsigned char *)this + 99) && v26 == 1634300528
        || (v27 ? (BOOL v10 = v26 == 1651275109) : (BOOL v10 = 0),
            v10 ? (BOOL v11 = *((unsigned char *)this + 100) == 0) : (BOOL v11 = 1),
            v11 ? (BOOL v12 = v28 == 0) : (BOOL v12 = 0),
            !v12))
      {
        OS::CF::UntypedObject::operator=((uint64_t)this + i + 216, 0);
        *(_DWORD *)((char *)this + i + 232) = 0;
        char v3 = 1;
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v25);
    }
  }
  for (uint64_t j = 0; j != 72; j += 24)
  {
    uint64_t v14 = *(const void **)((char *)this + j + 328);
    if (v14)
    {
      OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v19, v14);
      v19[0] = &unk_1F1489A20;
      DeviceInfo::DeviceInfo((uint64_t)v24, (uint64_t)v19);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v19);
      if (*((unsigned char *)this + 99) && v26 == 1634300528
        || (v27 ? (BOOL v15 = v26 == 1651275109) : (BOOL v15 = 0),
            v15 ? (BOOL v16 = *((unsigned char *)this + 100) == 0) : (BOOL v16 = 1),
            v16 ? (BOOL v17 = v28 == 0) : (BOOL v17 = 0),
            !v17))
      {
        OS::CF::UntypedObject::operator=((uint64_t)this + j + 320, 0);
        *(_DWORD *)((char *)this + j + 336) = 0;
        char v3 = 1;
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v25);
    }
  }
  HALB_Mutex::Locker::~Locker(&v22);
  return v3 & 1;
}

void sub_1BAD092E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, HALB_Mutex *a15)
{
}

uint64_t HALS_DefaultDeviceManager::UpdateDefaultDevice(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  *(void *)((char *)&v156[39] + 2) = *MEMORY[0x1E4F143B8];
  unsigned int v7 = a4 >> 8;
  unsigned int v8 = HIWORD(a4);
  unsigned int v9 = HIBYTE(a4);
  v136[0] = HIBYTE(a4);
  v136[1] = BYTE2(a4);
  v136[2] = BYTE1(a4);
  v136[3] = a4;
  v136[4] = 0;
  if (*(unsigned char *)(a1 + 98) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
    __int16 v155 = 1024;
    LODWORD(v156[0]) = 1655;
    WORD2(v156[0]) = 2082;
    *(void *)((char *)v156 + 6) = v136;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::UpdateDefaultDevice:        '%{public}s' --->>>", buf, 0x1Cu);
  }
  Preferredint DefaultDevice = HALS_DefaultDeviceManager::FindPreferredDefaultDevice(a1, a2, a3, a4);
  if (PreferredDefaultDevice) {
    goto LABEL_244;
  }
  v140[0] = v9;
  v140[1] = v8;
  v140[2] = v7;
  v140[3] = a4;
  v140[4] = 0;
  if (*(unsigned char *)(a1 + 98) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
    __int16 v155 = 1024;
    LODWORD(v156[0]) = 1721;
    WORD2(v156[0]) = 2082;
    *(void *)((char *)v156 + 6) = v140;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::PickDefaultDevice:          '%{public}s' --->>>", buf, 0x1Cu);
  }
  v143[0] = 0;
  v143[1] = 0;
  HALS_System::GetInstance(&v144, 0, v143);
  uint64_t v11 = v144;
  if (v144)
  {
    unsigned int NumberDevices = HALS_System::GetNumberDevices(v144, 2, 0, 0);
    unsigned int v142 = NumberDevices;
    std::vector<unsigned int>::vector(&v141, NumberDevices);
    HALS_System::GetDeviceList(v11, NumberDevices, &v142, (uint64_t)v141.__begin_, 2, 0, 0);
    mach_port_t v137 = 0;
    uint64_t v138 = 0;
    unint64_t v139 = 0;
    begiuint64_t n = v141.__begin_;
    std::vector<unsigned int>::pointer end = v141.__end_;
    if (v141.__begin_ != v141.__end_)
    {
      if (a4 == 1682533920) {
        unint64_t v15 = 9;
      }
      else {
        unint64_t v15 = 10;
      }
      if (a4 == 1682533920) {
        BOOL v16 = (const char *)&DeviceInfo::kInputTransportOrder;
      }
      else {
        BOOL v16 = "imdhtrpd icpnuhtbvae4931 bsusubmeulbntlbotuabolg";
      }
      std::vector<unsigned int>::pointer v132 = v141.__end_;
      while (1)
      {
        DeviceInfo::DeviceInfo((DeviceInfo *)buf, (HALS_ObjectMap *)*begin);
        if ((int)a4 > 1934587251)
        {
          if (a4 == 1934587252)
          {
            if (LOBYTE(v156[38])) {
              goto LABEL_29;
            }
          }
          else if (a4 == 1936224868 && BYTE1(v156[38]))
          {
LABEL_29:
            BOOL v17 = v137;
            BOOL v18 = v138;
            uint64_t v19 = v138 - v137;
            if (v138 == v137)
            {
              unint64_t v21 = (unint64_t)v137;
LABEL_92:
              uint64_t v46 = v21 - (void)v17;
              if ((unint64_t)v138 >= v139)
              {
                unint64_t v51 = 0x8F9C18F9C18F9C19 * ((uint64_t)(v21 - (void)v17) >> 3);
                unint64_t v52 = 0x8F9C18F9C18F9C19 * (v19 >> 3) + 1;
                if (v52 > 0xC7CE0C7CE0C7CELL) {
                  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                }
                std::string::size_type v53 = v17;
                if (0x1F3831F3831F3832 * ((uint64_t)(v139 - (void)v17) >> 3) > v52) {
                  unint64_t v52 = 0x1F3831F3831F3832 * ((uint64_t)(v139 - (void)v17) >> 3);
                }
                if (0x8F9C18F9C18F9C19 * ((uint64_t)(v139 - (void)v17) >> 3) >= 0x63E7063E7063E7) {
                  unint64_t v54 = 0xC7CE0C7CE0C7CELL;
                }
                else {
                  unint64_t v54 = v52;
                }
                mach_port_t v149 = &v139;
                if (v54) {
                  unint64_t v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<DeviceInfo>>(v54);
                }
                else {
                  uint64_t v55 = 0;
                }
                uint64_t v57 = v51;
                std::string::size_type v58 = (_DWORD *)(v54 + 328 * v51);
                mach_port_t v146 = (char *)v54;
                *(void *)&long long v147 = v58;
                *((void *)&v147 + 1) = v58;
                std::string v148 = (char *)(v54 + 328 * v55);
                if (v57 == v55)
                {
                  if (v46 < 1)
                  {
                    if ((OS::CF::UntypedObject *)v21 == v53) {
                      unint64_t v68 = 1;
                    }
                    else {
                      unint64_t v68 = 2 * v57;
                    }
                    std::string v153 = v149;
                    uint64_t v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DeviceInfo>>(v68);
                    unint64_t v71 = v68 >> 2;
                    double v72 = &v69[328 * (v68 >> 2)];
                    uint64_t v73 = v147;
                    if (*((void *)&v147 + 1) == (void)v147)
                    {
                      int64x2_t v77 = vdupq_n_s64(v147);
                      mach_port_t v74 = &v69[328 * (v68 >> 2)];
                    }
                    else
                    {
                      uint64_t v127 = v70;
                      uint64_t v129 = v69;
                      uint64_t v135 = begin;
                      mach_port_t v74 = &v72[*((void *)&v147 + 1) - v147];
                      uint64_t v75 = (uint64_t)&v69[328 * v71 + 8];
                      CFStringRef v76 = v72;
                      do
                      {
                        *(_DWORD *)CFStringRef v76 = *(_DWORD *)v73;
                        *((void *)v76 + 2) = *(void *)(v73 + 16);
                        *(void *)(v73 + 16) = 0;
                        *((void *)v76 + 1) = &unk_1F1489A20;
                        memcpy(v76 + 24, (const void *)(v73 + 24), 0x12AuLL);
                        v75 += 328;
                        v76 += 328;
                        v73 += 328;
                      }
                      while (v76 != v74);
                      int64x2_t v77 = (int64x2_t)v147;
                      begiuint64_t n = v135;
                      uint64_t v70 = v127;
                      uint64_t v69 = v129;
                    }
                    uint64_t v78 = v148;
                    std::string v150 = v146;
                    mach_port_t v146 = v69;
                    *(void *)&long long v147 = v72;
                    int64x2_t v151 = v77;
                    *((void *)&v147 + 1) = v74;
                    std::string v148 = &v69[328 * v70];
                    mach_port_t v152 = v78;
                    std::__split_buffer<DeviceInfo>::~__split_buffer((uint64_t)&v150);
                    std::string::size_type v58 = (_DWORD *)*((void *)&v147 + 1);
                  }
                  else
                  {
                    uint64_t v59 = v57 + 2;
                    if (v57 >= -1) {
                      uint64_t v59 = v57 + 1;
                    }
                    v58 -= 82 * (v59 >> 1);
                    *(void *)&long long v147 = v58;
                    *((void *)&v147 + 1) = v58;
                  }
                }
                *std::string::size_type v58 = *(_DWORD *)buf;
                OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(v58 + 2), *(CFTypeRef *)((char *)v156 + 2));
                *((void *)v58 + 1) = &unk_1F1489A20;
                memcpy(v58 + 6, (char *)&v156[1] + 2, 0x12AuLL);
                BOOL v79 = (OS::CF::UntypedObject *)v147;
                uint64_t v80 = *((void *)&v147 + 1) + 328;
                *((void *)&v147 + 1) += 328;
                unsigned __int8 v81 = v137;
                if (v137 != (OS::CF::UntypedObject *)v21)
                {
                  uint64_t v82 = 0;
                  do
                  {
                    *(_DWORD *)((char *)v79 + v82 - 328) = *(_DWORD *)(v21 + v82 - 328);
                    uint64_t v83 = (void *)(v21 + v82 - 312);
                    *(void *)((char *)v79 + v82 - 312) = *v83;
                    void *v83 = 0;
                    *(void *)((char *)v79 + v82 - 320) = &unk_1F1489A20;
                    memcpy((char *)v79 + v82 - 304, (const void *)(v21 + v82 - 304), 0x12AuLL);
                    v82 -= 328;
                  }
                  while ((OS::CF::UntypedObject *)(v21 + v82) != v81);
                  BOOL v79 = (OS::CF::UntypedObject *)((char *)v79 + v82);
                  uint64_t v80 = *((void *)&v147 + 1);
                }
                *(void *)&long long v147 = v79;
                BOOL v84 = v138;
                if (v138 != (OS::CF::UntypedObject *)v21)
                {
                  uint64_t v85 = v80 + 8;
                  do
                  {
                    *(_DWORD *)uint64_t v80 = *(_DWORD *)v21;
                    *(void *)(v80 + 16) = *(void *)(v21 + 16);
                    *(void *)(v21 + 16) = 0;
                    *(void *)(v80 + 8) = &unk_1F1489A20;
                    memcpy((void *)(v80 + 24), (const void *)(v21 + 24), 0x12AuLL);
                    v80 += 328;
                    v85 += 328;
                    v21 += 328;
                  }
                  while ((OS::CF::UntypedObject *)v21 != v84);
                  BOOL v79 = (OS::CF::UntypedObject *)v147;
                  unint64_t v21 = (unint64_t)v138;
                }
                uint64_t v86 = (char *)v137;
                uint64_t v87 = (char *)v139;
                mach_port_t v137 = v79;
                uint64_t v138 = (OS::CF::UntypedObject *)v80;
                unint64_t v139 = (unint64_t)v148;
                *((void *)&v147 + 1) = v21;
                std::string v148 = v87;
                mach_port_t v146 = v86;
                *(void *)&long long v147 = v86;
                std::__split_buffer<DeviceInfo>::~__split_buffer((uint64_t)&v146);
              }
              else
              {
                mach_port_t v134 = begin;
                if ((OS::CF::UntypedObject *)v21 == v138)
                {
                  *(_DWORD *)uint64_t v138 = *(_DWORD *)buf;
                  uint64_t v56 = (uint64_t)v17 + 8 * ((uint64_t)(v21 - (void)v17) >> 3);
                  OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)(v56 + 8), *(CFTypeRef *)((char *)v156 + 2));
                  *(void *)(v56 + 8) = &unk_1F1489A20;
                  memcpy((void *)(v56 + 24), (char *)&v156[1] + 2, 0x12AuLL);
                  uint64_t v138 = (OS::CF::UntypedObject *)((char *)v18 + 328);
                }
                else
                {
                  uint64_t v47 = (_DWORD *)((char *)v138 - 328);
                  unint64_t v126 = 0x8F9C18F9C18F9C19 * ((uint64_t)(v21 - (void)v17) >> 3);
                  long long v128 = v17;
                  if ((unint64_t)v138 < 0x148)
                  {
                    uint64_t v50 = v138;
                  }
                  else
                  {
                    int16x8_t v48 = (_DWORD *)((char *)v138 + 8);
                    double v49 = (OS::CF::UntypedObject *)((char *)v138 - 328);
                    uint64_t v50 = v138;
                    do
                    {
                      *(_DWORD *)uint64_t v50 = *(_DWORD *)v49;
                      *((void *)v50 + 2) = *((void *)v49 + 2);
                      *((void *)v49 + 2) = 0;
                      *((void *)v50 + 1) = &unk_1F1489A20;
                      memcpy((char *)v50 + 24, (char *)v49 + 24, 0x12AuLL);
                      uint64_t v50 = (OS::CF::UntypedObject *)((char *)v50 + 328);
                      v48 += 82;
                      double v49 = (OS::CF::UntypedObject *)((char *)v49 + 328);
                    }
                    while (v49 < v18);
                  }
                  uint64_t v138 = v50;
                  if (v18 != (OS::CF::UntypedObject *)(v21 + 328))
                  {
                    uint64_t v60 = 0;
                    do
                    {
                      *(_DWORD *)((char *)v18 + v60 * 4 - 328) = v47[v60 - 82];
                      uint64_t v61 = (uint64_t *)((char *)v18 + v60 * 4 - 312);
                      uint64_t v62 = (uint64_t *)&v47[v60 - 78];
                      uint64_t v63 = *v61;
                      *uint64_t v61 = *v62;
                      uint64_t *v62 = v63;
                      memcpy((char *)v18 + v60 * 4 - 304, &v47[v60 - 76], 0x12AuLL);
                      v60 -= 82;
                    }
                    while (-2 * ((uint64_t)((uint64_t)v18 - v21 - 328) >> 3) != v60);
                  }
                  BOOL v65 = v21 <= (unint64_t)buf && v138 > (OS::CF::UntypedObject *)buf;
                  *(_DWORD *)unint64_t v21 = *(_DWORD *)buf;
                  uint64_t v66 = (uint64_t)v128 + 328 * v126;
                  std::string::size_type v67 = (CFTypeRef *)&buf[328 * v65];
                  OS::CF::UntypedObject::operator=(v66 + 8, v67[2]);
                  memcpy((void *)(v66 + 24), v67 + 3, 0x12AuLL);
                }
                begiuint64_t n = v134;
              }
              std::vector<unsigned int>::pointer end = v132;
              goto LABEL_144;
            }
            unint64_t v20 = 0x8F9C18F9C18F9C19 * (v19 >> 3);
            unint64_t v21 = (unint64_t)v137;
            while (2)
            {
              unint64_t v22 = v20 >> 1;
              unint64_t v23 = v21 + 328 * (v20 >> 1);
              unint64_t v25 = *(void *)(v23 + 280);
              unint64_t v24 = *(void *)(v23 + 288);
              BOOL v27 = v25 == *(void *)((char *)&v156[33] + 2) && v24 == *(void *)((char *)&v156[34] + 2);
              int v28 = *(_DWORD *)(v23 + 308);
              if (a4 == 1682533920
                && (v28 <= 2 ? (BOOL v29 = *(_DWORD *)((char *)&v156[36] + 6) <= 2) : (BOOL v29 = 0), v29 && !v27))
              {
LABEL_52:
                BOOL v31 = v24 > *(void *)((char *)&v156[34] + 2) && v25 == *(void *)((char *)&v156[33] + 2);
                BOOL v32 = v25 > *(void *)((char *)&v156[33] + 2) || v31;
              }
              else if (a4 == 1934587252 || a4 == 1682929012)
              {
                if (*(int *)(v21 + 328 * v22 + 312) > 3 || *(_DWORD *)((char *)&v156[37] + 2) > 3) {
                  BOOL v27 = 1;
                }
                if (!v27) {
                  goto LABEL_52;
                }
LABEL_59:
                if (a4 != 1934587252 && a4 != 1682929012) {
                  goto LABEL_62;
                }
                int v33 = *(_DWORD *)(v21 + 328 * v22 + 312);
                BOOL v34 = v33 < *(_DWORD *)((char *)&v156[37] + 2);
                if (v33 == *(_DWORD *)((char *)&v156[37] + 2)) {
                  goto LABEL_62;
                }
LABEL_83:
                BOOL v32 = v34;
              }
              else
              {
                if (a4 != 1682533920) {
                  goto LABEL_59;
                }
                BOOL v34 = v28 < *(_DWORD *)((char *)&v156[36] + 6);
                if (v28 != *(_DWORD *)((char *)&v156[36] + 6)) {
                  goto LABEL_83;
                }
LABEL_62:
                unint64_t v35 = 0;
                int v36 = *(_DWORD *)(v21 + 328 * v22 + 296);
                do
                {
                  unint64_t v37 = v35;
                  int v38 = *(_DWORD *)&v16[4 * v35++];
                }
                while (v38 != v36 && v35 < v15);
                unint64_t v40 = 0;
                do
                {
                  unint64_t v41 = v40;
                  int v42 = *(_DWORD *)&v16[4 * v40++];
                }
                while (v42 != *(_DWORD *)((char *)&v156[35] + 2) && v40 < v15);
                if (v42 != *(_DWORD *)((char *)&v156[35] + 2)) {
                  unint64_t v41 = -1;
                }
                BOOL v32 = v37 < v41 && v38 == v36;
              }
              unint64_t v45 = v23 + 328;
              v20 += ~v22;
              if (v32) {
                unint64_t v21 = v45;
              }
              else {
                unint64_t v20 = v22;
              }
              if (!v20)
              {
                BOOL v17 = v137;
                goto LABEL_92;
              }
              continue;
            }
          }
        }
        else if (a4 == 1682533920)
        {
          if (BYTE6(v156[37])) {
            goto LABEL_29;
          }
        }
        else if (a4 == 1682929012 && HIBYTE(v156[37]))
        {
          goto LABEL_29;
        }
LABEL_144:
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&buf[8]);
        if (++begin == end)
        {
          begiuint64_t n = v141.__begin_;
          break;
        }
      }
    }
    if (begin)
    {
      v141.__end_ = begin;
      operator delete(begin);
    }
  }
  else
  {
    mach_port_t v137 = 0;
    uint64_t v138 = 0;
    unint64_t v139 = 0;
  }
  if (v145) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v145);
  }
  if (*(unsigned char *)(a1 + 97))
  {
    pthread_mutex_lock(&DeviceInfo::DumpHeap(std::vector<DeviceInfo> const&)::sMutex);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
      __int16 v155 = 1024;
      LODWORD(v156[0]) = 409;
      WORD2(v156[0]) = 2048;
      *(void *)((char *)v156 + 6) = 0x8F9C18F9C18F9C19 * ((v138 - v137) >> 3);
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Heap has %lu items", buf, 0x1Cu);
    }
    int16x8_t v88 = v137;
    long long v133 = v138;
    if (v137 != v138)
    {
      uint64_t v89 = 0;
      __src = (char *)v137 + 24;
      std::string v90 = MEMORY[0x1E4F14500];
      do
      {
        pthread_mutex_lock(&DeviceInfo::DumpDeviceInfo(DeviceInfo const&)::sMutex);
        v91.i32[0] = *(_DWORD *)((char *)v88 + v89 + 296);
        int16x8_t v92 = (int16x8_t)vmovl_u8(v91);
        *(int16x4_t *)v92.i8 = vrev64_s16(*(int16x4_t *)v92.i8);
        *(int8x8_t *)v92.i8 = vmovn_s16(v92);
        LODWORD(v141.__begin_) = v92.i32[0];
        BYTE4(v141.__begin_) = 0;
        v92.i32[0] = *(_DWORD *)((char *)v88 + v89 + 300);
        int16x8_t v93 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v92.i8);
        *(int16x4_t *)v93.i8 = vrev64_s16(*(int16x4_t *)v93.i8);
        *(int8x8_t *)v93.i8 = vmovn_s16(v93);
        LODWORD(v144) = v93.i32[0];
        BYTE4(v144) = 0;
        v93.i32[0] = *(_DWORD *)((char *)v88 + v89 + 304);
        int16x8_t v94 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v93.i8);
        *(int16x4_t *)v94.i8 = vrev64_s16(*(int16x4_t *)v94.i8);
        LODWORD(v143[0]) = vmovn_s16(v94).u32[0];
        BYTE4(v143[0]) = 0;
        uint64_t v95 = *(unsigned int *)((char *)v88 + v89 + 308);
        uint64_t v96 = "";
        if (v95 <= 5) {
          uint64_t v96 = off_1E62332B8[v95];
        }
        uint64_t v97 = *(unsigned int *)((char *)v88 + v89 + 312);
        std::string::size_type v98 = "";
        if (v97 <= 6) {
          std::string::size_type v98 = off_1E62332E8[v97];
        }
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v99 = *(unsigned int *)((char *)v88 + v89);
          *(_DWORD *)std::string buf = 136315906;
          *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
          __int16 v155 = 1024;
          LODWORD(v156[0]) = 487;
          WORD2(v156[0]) = 2048;
          *(void *)((char *)v156 + 6) = v99;
          HIWORD(v156[1]) = 2082;
          v156[2] = &__src[v89];
          _os_log_impl(&dword_1BAA78000, v90, OS_LOG_TYPE_DEFAULT, "%25s:%-5d    %lu: '%{public}s'", buf, 0x26u);
        }
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v101 = *(void *)((char *)v88 + v89 + 280);
          uint64_t v100 = *(void *)((char *)v88 + v89 + 288);
          *(_DWORD *)std::string buf = 136315906;
          *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
          __int16 v155 = 1024;
          LODWORD(v156[0]) = 488;
          WORD2(v156[0]) = 2048;
          *(void *)((char *)v156 + 6) = v101;
          HIWORD(v156[1]) = 2048;
          v156[2] = v100;
          _os_log_impl(&dword_1BAA78000, v90, OS_LOG_TYPE_DEFAULT, "%25s:%-5d         Arrival Time:       (%llu, %llu)", buf, 0x26u);
        }
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
          __int16 v155 = 1024;
          LODWORD(v156[0]) = 489;
          WORD2(v156[0]) = 2082;
          *(void *)((char *)v156 + 6) = &v141;
          _os_log_impl(&dword_1BAA78000, v90, OS_LOG_TYPE_DEFAULT, "%25s:%-5d         Transport:          '%{public}s'", buf, 0x1Cu);
        }
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
          __int16 v155 = 1024;
          LODWORD(v156[0]) = 490;
          WORD2(v156[0]) = 2082;
          *(void *)((char *)v156 + 6) = &v144;
          _os_log_impl(&dword_1BAA78000, v90, OS_LOG_TYPE_DEFAULT, "%25s:%-5d         Input Data Source:  '%{public}s'", buf, 0x1Cu);
        }
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
          __int16 v155 = 1024;
          LODWORD(v156[0]) = 491;
          WORD2(v156[0]) = 2082;
          *(void *)((char *)v156 + 6) = v143;
          _os_log_impl(&dword_1BAA78000, v90, OS_LOG_TYPE_DEFAULT, "%25s:%-5d         Output Data Source: '%{public}s'", buf, 0x1Cu);
        }
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
          __int16 v155 = 1024;
          LODWORD(v156[0]) = 492;
          WORD2(v156[0]) = 2082;
          *(void *)((char *)v156 + 6) = v96;
          _os_log_impl(&dword_1BAA78000, v90, OS_LOG_TYPE_DEFAULT, "%25s:%-5d         Input Kind:          %{public}s", buf, 0x1Cu);
        }
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
          __int16 v155 = 1024;
          LODWORD(v156[0]) = 493;
          WORD2(v156[0]) = 2082;
          *(void *)((char *)v156 + 6) = v98;
          _os_log_impl(&dword_1BAA78000, v90, OS_LOG_TYPE_DEFAULT, "%25s:%-5d         Output Kind:         %{public}s", buf, 0x1Cu);
        }
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
        {
          if (*((unsigned char *)v88 + v89 + 316)) {
            __int16 v102 = "yes";
          }
          else {
            __int16 v102 = "no";
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
          __int16 v155 = 1024;
          LODWORD(v156[0]) = 494;
          WORD2(v156[0]) = 2082;
          *(void *)((char *)v156 + 6) = v102;
          _os_log_impl(&dword_1BAA78000, v90, OS_LOG_TYPE_DEFAULT, "%25s:%-5d         Can Be Input:        %{public}s", buf, 0x1Cu);
        }
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
        {
          if (*((unsigned char *)v88 + v89 + 317)) {
            uint64_t v103 = "yes";
          }
          else {
            uint64_t v103 = "no";
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
          __int16 v155 = 1024;
          LODWORD(v156[0]) = 495;
          WORD2(v156[0]) = 2082;
          *(void *)((char *)v156 + 6) = v103;
          _os_log_impl(&dword_1BAA78000, v90, OS_LOG_TYPE_DEFAULT, "%25s:%-5d         Can Be Output:       %{public}s", buf, 0x1Cu);
        }
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
        {
          if (*((unsigned char *)v88 + v89 + 318)) {
            long long v104 = "yes";
          }
          else {
            long long v104 = "no";
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
          __int16 v155 = 1024;
          LODWORD(v156[0]) = 496;
          WORD2(v156[0]) = 2082;
          *(void *)((char *)v156 + 6) = v104;
          _os_log_impl(&dword_1BAA78000, v90, OS_LOG_TYPE_DEFAULT, "%25s:%-5d         Can Be System:       %{public}s", buf, 0x1Cu);
        }
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
        {
          if (*((unsigned char *)v88 + v89 + 321)) {
            uint64_t v105 = "no";
          }
          else {
            uint64_t v105 = "yes";
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
          __int16 v155 = 1024;
          LODWORD(v156[0]) = 497;
          WORD2(v156[0]) = 2082;
          *(void *)((char *)v156 + 6) = v105;
          _os_log_impl(&dword_1BAA78000, v90, OS_LOG_TYPE_DEFAULT, "%25s:%-5d         Allows Auto-Route:   %{public}s", buf, 0x1Cu);
        }
        pthread_mutex_unlock(&DeviceInfo::DumpDeviceInfo(DeviceInfo const&)::sMutex);
        v89 += 328;
      }
      while ((OS::CF::UntypedObject *)((char *)v88 + v89) != v133);
    }
    pthread_mutex_unlock(&DeviceInfo::DumpHeap(std::vector<DeviceInfo> const&)::sMutex);
  }
  uint64_t v106 = v137;
  unsigned int v107 = (unsigned int *)v138;
  if (v137 == v138) {
    goto LABEL_235;
  }
  uint64_t v108 = v137;
  while (1)
  {
    if (!DeviceInfo::CanBeDefault(v108, a4)) {
      goto LABEL_204;
    }
    if (a4 != 1682533920) {
      break;
    }
    if (*((int *)v108 + 77) <= 2)
    {
      unsigned int v113 = *((_DWORD *)v108 + 75);
      LOBYTE(v141.__begin_) = HIBYTE(v113);
      BYTE1(v141.__begin_) = BYTE2(v113);
      BYTE2(v141.__begin_) = BYTE1(v113);
      *(_WORD *)((char *)&v141.__begin_ + 3) = v113;
      if (*(unsigned char *)(a1 + 97) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        int v114 = *(_DWORD *)v108;
        *(_DWORD *)std::string buf = 136316418;
        *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
        __int16 v155 = 1024;
        LODWORD(v156[0]) = 1743;
        WORD2(v156[0]) = 2082;
        *(void *)((char *)v156 + 6) = v140;
        HIWORD(v156[1]) = 1024;
        LODWORD(v156[2]) = v114;
        WORD2(v156[2]) = 2082;
        *(void *)((char *)&v156[2] + 6) = (char *)v108 + 24;
        HIWORD(v156[3]) = 2082;
        v156[4] = &v141;
        double v112 = MEMORY[0x1E4F14500];
        goto LABEL_220;
      }
      goto LABEL_221;
    }
LABEL_204:
    uint64_t v108 = (DeviceInfo *)((char *)v108 + 328);
    if (v108 == (DeviceInfo *)v107) {
      goto LABEL_205;
    }
  }
  if (*((int *)v108 + 78) > 3) {
    goto LABEL_204;
  }
  unsigned int v110 = *((_DWORD *)v108 + 76);
  LOBYTE(v141.__begin_) = HIBYTE(v110);
  BYTE1(v141.__begin_) = BYTE2(v110);
  BYTE2(v141.__begin_) = BYTE1(v110);
  *(_WORD *)((char *)&v141.__begin_ + 3) = v110;
  if (*(unsigned char *)(a1 + 97) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v111 = *(_DWORD *)v108;
    *(_DWORD *)std::string buf = 136316418;
    *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
    __int16 v155 = 1024;
    LODWORD(v156[0]) = 1751;
    WORD2(v156[0]) = 2082;
    *(void *)((char *)v156 + 6) = v140;
    HIWORD(v156[1]) = 1024;
    LODWORD(v156[2]) = v111;
    WORD2(v156[2]) = 2082;
    *(void *)((char *)&v156[2] + 6) = (char *)v108 + 24;
    HIWORD(v156[3]) = 2082;
    v156[4] = &v141;
    double v112 = MEMORY[0x1E4F14500];
LABEL_220:
    _os_log_impl(&dword_1BAA78000, v112, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::PickDefaultDevice:          '%{public}s' | picking %d: '%{public}s'/'%{public}s'", buf, 0x36u);
  }
LABEL_221:
  Preferredint DefaultDevice = *(unsigned int *)v108;
  if (PreferredDefaultDevice) {
    goto LABEL_236;
  }
  uint64_t v106 = v137;
  unsigned int v107 = (unsigned int *)v138;
LABEL_205:
  if (v106 == (DeviceInfo *)v107)
  {
LABEL_235:
    Preferredint DefaultDevice = 0;
    goto LABEL_236;
  }
  uint64_t v109 = v106;
  while (1)
  {
    if (!DeviceInfo::CanBeDefault(v109, a4)) {
      goto LABEL_212;
    }
    if (a4 != 1682533920) {
      break;
    }
    if (*((int *)v109 + 77) <= 3)
    {
      unsigned int v118 = *((_DWORD *)v109 + 75);
      LOBYTE(v141.__begin_) = HIBYTE(v118);
      BYTE1(v141.__begin_) = BYTE2(v118);
      BYTE2(v141.__begin_) = BYTE1(v118);
      *(_WORD *)((char *)&v141.__begin_ + 3) = v118;
      if (*(unsigned char *)(a1 + 97) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        int v119 = *(_DWORD *)v109;
        *(_DWORD *)std::string buf = 136316418;
        *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
        __int16 v155 = 1024;
        LODWORD(v156[0]) = 1769;
        WORD2(v156[0]) = 2082;
        *(void *)((char *)v156 + 6) = v140;
        HIWORD(v156[1]) = 1024;
        LODWORD(v156[2]) = v119;
        WORD2(v156[2]) = 2082;
        *(void *)((char *)&v156[2] + 6) = (char *)v109 + 24;
        HIWORD(v156[3]) = 2082;
        v156[4] = &v141;
        double v117 = MEMORY[0x1E4F14500];
        goto LABEL_229;
      }
      goto LABEL_230;
    }
LABEL_212:
    uint64_t v109 = (DeviceInfo *)((char *)v109 + 328);
    if (v109 == (DeviceInfo *)v107)
    {
      while (1)
      {
LABEL_234:
        if (v106 == (DeviceInfo *)v107) {
          goto LABEL_235;
        }
        if (DeviceInfo::CanBeDefault(v106, a4)) {
          break;
        }
        uint64_t v106 = (DeviceInfo *)((char *)v106 + 328);
      }
      if (a4 == 1682533920)
      {
        unsigned int v121 = *((_DWORD *)v106 + 75);
        LOBYTE(v141.__begin_) = HIBYTE(v121);
        BYTE1(v141.__begin_) = BYTE2(v121);
        BYTE2(v141.__begin_) = BYTE1(v121);
        *(_WORD *)((char *)&v141.__begin_ + 3) = v121;
        if (*(unsigned char *)(a1 + 97) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          int v122 = *(_DWORD *)v106;
          *(_DWORD *)std::string buf = 136316418;
          *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
          __int16 v155 = 1024;
          LODWORD(v156[0]) = 1796;
          WORD2(v156[0]) = 2082;
          *(void *)((char *)v156 + 6) = v140;
          HIWORD(v156[1]) = 1024;
          LODWORD(v156[2]) = v122;
          WORD2(v156[2]) = 2082;
          *(void *)((char *)&v156[2] + 6) = (char *)v106 + 24;
          HIWORD(v156[3]) = 2082;
          v156[4] = &v141;
          std::locale v123 = MEMORY[0x1E4F14500];
          goto LABEL_255;
        }
      }
      else
      {
        unsigned int v124 = *((_DWORD *)v106 + 76);
        LOBYTE(v141.__begin_) = HIBYTE(v124);
        BYTE1(v141.__begin_) = BYTE2(v124);
        BYTE2(v141.__begin_) = BYTE1(v124);
        *(_WORD *)((char *)&v141.__begin_ + 3) = v124;
        if (*(unsigned char *)(a1 + 97) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          int v125 = *(_DWORD *)v106;
          *(_DWORD *)std::string buf = 136316418;
          *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
          __int16 v155 = 1024;
          LODWORD(v156[0]) = 1804;
          WORD2(v156[0]) = 2082;
          *(void *)((char *)v156 + 6) = v140;
          HIWORD(v156[1]) = 1024;
          LODWORD(v156[2]) = v125;
          WORD2(v156[2]) = 2082;
          *(void *)((char *)&v156[2] + 6) = (char *)v106 + 24;
          HIWORD(v156[3]) = 2082;
          v156[4] = &v141;
          std::locale v123 = MEMORY[0x1E4F14500];
LABEL_255:
          _os_log_impl(&dword_1BAA78000, v123, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::PickDefaultDevice:          '%{public}s' | using %d: '%{public}s'/'%{public}s'", buf, 0x36u);
        }
      }
      Preferredint DefaultDevice = *(unsigned int *)v106;
      goto LABEL_236;
    }
  }
  if (*((int *)v109 + 78) > 4) {
    goto LABEL_212;
  }
  unsigned int v115 = *((_DWORD *)v109 + 76);
  LOBYTE(v141.__begin_) = HIBYTE(v115);
  BYTE1(v141.__begin_) = BYTE2(v115);
  BYTE2(v141.__begin_) = BYTE1(v115);
  *(_WORD *)((char *)&v141.__begin_ + 3) = v115;
  if (*(unsigned char *)(a1 + 97) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v116 = *(_DWORD *)v109;
    *(_DWORD *)std::string buf = 136316418;
    *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
    __int16 v155 = 1024;
    LODWORD(v156[0]) = 1777;
    WORD2(v156[0]) = 2082;
    *(void *)((char *)v156 + 6) = v140;
    HIWORD(v156[1]) = 1024;
    LODWORD(v156[2]) = v116;
    WORD2(v156[2]) = 2082;
    *(void *)((char *)&v156[2] + 6) = (char *)v109 + 24;
    HIWORD(v156[3]) = 2082;
    v156[4] = &v141;
    double v117 = MEMORY[0x1E4F14500];
LABEL_229:
    _os_log_impl(&dword_1BAA78000, v117, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::PickDefaultDevice:          '%{public}s' | accepting %d: '%{public}s'/'%{public}s'", buf, 0x36u);
  }
LABEL_230:
  Preferredint DefaultDevice = *(unsigned int *)v109;
  if (!PreferredDefaultDevice)
  {
    uint64_t v106 = v137;
    unsigned int v107 = (unsigned int *)v138;
    goto LABEL_234;
  }
LABEL_236:
  if (*(unsigned char *)(a1 + 98) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
    __int16 v155 = 1024;
    LODWORD(v156[0]) = 1812;
    WORD2(v156[0]) = 2082;
    *(void *)((char *)v156 + 6) = v140;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::PickDefaultDevice:          '%{public}s' <<<---", buf, 0x1Cu);
  }
  *(void *)std::string buf = &v137;
  std::vector<DeviceInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (!PreferredDefaultDevice)
  {
    if (!*(unsigned char *)(a1 + 97)) {
      goto LABEL_243;
    }
    Preferredint DefaultDevice = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
      __int16 v155 = 1024;
      LODWORD(v156[0]) = 1665;
      WORD2(v156[0]) = 2082;
      *(void *)((char *)v156 + 6) = v136;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::UpdateDefaultDevice: '%{public}s' no eligible devices", buf, 0x1Cu);
LABEL_243:
      Preferredint DefaultDevice = 0;
    }
  }
LABEL_244:
  if (*(unsigned char *)(a1 + 98) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
    __int16 v155 = 1024;
    LODWORD(v156[0]) = 1668;
    WORD2(v156[0]) = 2082;
    *(void *)((char *)v156 + 6) = v136;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::UpdateDefaultDevice:        '%{public}s' <<<---", buf, 0x1Cu);
  }
  return PreferredDefaultDevice;
}

void sub_1BAD0AB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void **a45)
{
  *(void *)(v45 + 80) = &a23;
  std::vector<DeviceInfo>::__destroy_vector::operator()[abi:ne180100](&a45);
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  _Unwind_Resume(a1);
}

void sub_1BAD0AB5C(_Unwind_Exception *a1)
{
}

uint64_t HALS_DefaultDeviceManager::FindPreferredDefaultDevice(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  v26[0] = HIBYTE(a4);
  v26[1] = BYTE2(a4);
  v26[2] = BYTE1(a4);
  v26[3] = a4;
  v26[4] = 0;
  if (*(unsigned char *)(a1 + 98) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315650;
    int v38 = "HALS_DefaultDeviceManager.cpp";
    __int16 v39 = 1024;
    *(_DWORD *)unint64_t v40 = 1676;
    *(_WORD *)&v40[4] = 2082;
    *(void *)&v40[6] = v26;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::FindPreferredDefaultDevice: '%{public}s' --->>>", buf, 0x1Cu);
  }
  unsigned int v8 = *(const void **)(a2 + 8);
  if (!v8) {
    goto LABEL_18;
  }
  OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v25, v8);
  v25[0] = &unk_1F1489A20;
  DeviceInfo::DeviceInfo((uint64_t)buf, (uint64_t)v25);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v25);
  if (!*(void *)&v40[2]) {
    goto LABEL_17;
  }
  int v9 = *(_DWORD *)(a2 + 16);
  BOOL v10 = v42;
  if (a4 == 1682533920) {
    BOOL v10 = v41;
  }
  if (v9 != *(_DWORD *)v10) {
    goto LABEL_17;
  }
  if (a4 > 1934587251)
  {
    if (a4 != 1934587252)
    {
      if (a4 != 1936224868 || !v46) {
        goto LABEL_17;
      }
      goto LABEL_49;
    }
    if (v45) {
      goto LABEL_49;
    }
LABEL_17:
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)((char *)&v38 + 4));
LABEL_18:
    unint64_t v11 = 0;
    BOOL v12 = (_DWORD *)(a3 + 16);
    while (1)
    {
      uint64_t v13 = (const void *)*((void *)v12 - 1);
      if (v13) {
        break;
      }
      uint64_t v16 = 0;
LABEL_32:
      v12 += 6;
      if (v11++ >= 2) {
        goto LABEL_53;
      }
    }
    OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v19, v13);
    v19[0] = &unk_1F1489A20;
    DeviceInfo::DeviceInfo((uint64_t)buf, (uint64_t)v19);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v19);
    if (!*(void *)&v40[2]) {
      goto LABEL_28;
    }
    int v14 = *v12;
    unint64_t v15 = v41;
    if (a4 != 1682533920) {
      unint64_t v15 = v42;
    }
    if (v14 != *(_DWORD *)v15) {
      goto LABEL_28;
    }
    uint64_t v16 = 0;
    if (a4 > 1934587251)
    {
      if (a4 == 1934587252)
      {
        if (!v45) {
          goto LABEL_28;
        }
      }
      else
      {
        if (a4 != 1936224868) {
          goto LABEL_29;
        }
        if (!v46) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      if (a4 != 1682533920)
      {
        if (a4 != 1682929012) {
          goto LABEL_29;
        }
        if (!v44) {
          goto LABEL_28;
        }
        goto LABEL_38;
      }
      if (!v43)
      {
LABEL_28:
        uint64_t v16 = 0;
        goto LABEL_29;
      }
    }
LABEL_38:
    char v20 = HIBYTE(*v12);
    char v21 = BYTE2(v14);
    char v22 = BYTE1(v14);
    char v23 = v14;
    char v24 = 0;
    if (*(unsigned char *)(a1 + 97) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)BOOL v27 = 136316674;
      int v28 = "HALS_DefaultDeviceManager.cpp";
      __int16 v29 = 1024;
      int v30 = 1706;
      __int16 v31 = 2082;
      BOOL v32 = v26;
      __int16 v33 = 1024;
      int v34 = v11;
      __int16 v35 = 1024;
      *(_DWORD *)int v36 = *(_DWORD *)buf;
      *(_WORD *)&v36[4] = 2082;
      *(void *)&v36[6] = &v40[10];
      *(_WORD *)&v36[14] = 2082;
      *(void *)&v36[16] = &v20;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::FindPreferredDefaultDevice: '%{public}s' | found preferred[%d] %d: '%{public}s'/'%{public}s'", v27, 0x3Cu);
    }
    uint64_t v16 = *(unsigned int *)buf;
LABEL_29:
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)((char *)&v38 + 4));
    if (v16) {
      goto LABEL_53;
    }
    goto LABEL_32;
  }
  if (a4 == 1682533920)
  {
    if (v43) {
      goto LABEL_49;
    }
    goto LABEL_17;
  }
  if (a4 != 1682929012 || !v44) {
    goto LABEL_17;
  }
LABEL_49:
  char v20 = HIBYTE(*(_DWORD *)(a2 + 16));
  char v21 = BYTE2(v9);
  char v22 = BYTE1(v9);
  char v23 = v9;
  char v24 = 0;
  if (*(unsigned char *)(a1 + 97) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)BOOL v27 = 136316418;
    int v28 = "HALS_DefaultDeviceManager.cpp";
    __int16 v29 = 1024;
    int v30 = 1689;
    __int16 v31 = 2082;
    BOOL v32 = v26;
    __int16 v33 = 1024;
    int v34 = *(_DWORD *)buf;
    __int16 v35 = 2082;
    *(void *)int v36 = &v40[10];
    *(_WORD *)&v36[8] = 2082;
    *(void *)&v36[10] = &v20;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::FindPreferredDefaultDevice: '%{public}s' | found transient %d: '%{public}s'/'%{public}s'", v27, 0x36u);
  }
  uint64_t v16 = *(unsigned int *)buf;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)((char *)&v38 + 4));
  if (!v16) {
    goto LABEL_18;
  }
LABEL_53:
  if (*(unsigned char *)(a1 + 98) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315650;
    int v38 = "HALS_DefaultDeviceManager.cpp";
    __int16 v39 = 1024;
    *(_DWORD *)unint64_t v40 = 1713;
    *(_WORD *)&v40[4] = 2082;
    *(void *)&v40[6] = v26;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::FindPreferredDefaultDevice: '%{public}s' <<<---", buf, 0x1Cu);
  }
  return v16;
}

void sub_1BAD0B108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va);
  _Unwind_Resume(a1);
}

void std::vector<DeviceInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    BOOL v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        BOOL v6 = v4 - 328;
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v4 - 320));
        int v4 = v6;
      }
      while (v6 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL DeviceInfo::CanBeDefault(DeviceInfo *this, int a2)
{
  BOOL result = 0;
  if (a2 > 1934587251)
  {
    if (a2 == 1934587252)
    {
      int v4 = *((unsigned __int8 *)this + 318);
    }
    else
    {
      if (a2 != 1936224868) {
        return result;
      }
      int v4 = *((unsigned __int8 *)this + 319);
    }
  }
  else if (a2 == 1682533920)
  {
    int v4 = *((unsigned __int8 *)this + 316);
  }
  else
  {
    if (a2 != 1682929012) {
      return result;
    }
    int v4 = *((unsigned __int8 *)this + 317);
  }
  return v4 != 0;
}

void DeviceInfo::DeviceInfo(DeviceInfo *this, HALS_ObjectMap *a2)
{
  *(_DWORD *)this = 0;
  *((void *)this + 1) = &unk_1F1489A20;
  *((void *)this + 2) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 292) = 0u;
  *(void *)((char *)this + 308) = 0x600000005;
  *((_WORD *)this + 158) = 0;
  *((unsigned char *)this + 318) = 0;
  *((_WORD *)this + 160) = 0;
  char v3 = (HALS_Device *)HALS_ObjectMap::CopyObjectByObjectID(a2);
  DeviceInfo::CatalogDeviceInfo((UInt8 *)this, v3);
  HALS_ObjectMap::ReleaseObject(v3, v4);
}

void sub_1BAD0B310(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v3, a2);
  OS::CF::UntypedObject::~UntypedObject(v2);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DeviceInfo>>(unint64_t a1)
{
  if (a1 >= 0xC7CE0C7CE0C7CFLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(328 * a1);
}

uint64_t std::__split_buffer<DeviceInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 328;
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(i - 320));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

double DeviceInfo::CatalogDeviceInfo(UInt8 *this, HALS_Device *a2)
{
  if (!a2) {
    return result;
  }
  int v4 = (char *)(this + 280);
  *(_DWORD *)this = *((_DWORD *)a2 + 4);
  uint64_t v5 = (*(uint64_t (**)(HALS_Device *))(*(void *)a2 + 208))(a2);
  CFIndex v6 = OS::CF::UntypedObject::operator=((uint64_t)(this + 8), v5);
  OS::CF::String::AsCString(v6, this + 24, 256);
  *(_OWORD *)int v4 = *((_OWORD *)a2 + 26);
  int TransportType = HALS_IODevice::GetTransportType(a2);
  *((_DWORD *)this + 74) = TransportType;
  if (TransportType == 1651274862)
  {
    *((_DWORD *)this + 75) = DeviceInfo::GetMasterDataSourceValue(a2, (HALS_Device *)1);
    *((_DWORD *)this + 76) = DeviceInfo::GetMasterDataSourceValue(a2, 0);
  }
  int v8 = *((_DWORD *)this + 75);
  int v9 = HALS_IODevice::GetTransportType(a2);
  if (!HALS_IODevice::GetNumberStreams(a2, 1))
  {
    int v11 = 5;
    goto LABEL_19;
  }
  int v11 = 4;
  if (v9 > 1718055535)
  {
    if (v9 > 1986622067)
    {
      if (v9 == 1986622068) {
        goto LABEL_19;
      }
      int v12 = 1986818665;
    }
    else
    {
      if (v9 == 1718055536) {
        goto LABEL_19;
      }
      int v12 = 1735554416;
    }
LABEL_18:
    if (v9 == v12) {
      goto LABEL_19;
    }
    goto LABEL_53;
  }
  if (v9 <= 1651275108)
  {
    if (!v9) {
      goto LABEL_19;
    }
    int v12 = 1634300528;
    goto LABEL_18;
  }
  if (v9 == 1651275109)
  {
    if (!DeviceInfo::IsIEDActive(a2, v10))
    {
      int v11 = 4;
      goto LABEL_19;
    }
    unsigned int v40 = DeviceInfo::GetBTDeviceCategory(a2, v39) - 1;
    if (v40 < 3)
    {
      int v11 = dword_1BB00FF18[v40];
      goto LABEL_19;
    }
LABEL_68:
    int v11 = 3;
    goto LABEL_19;
  }
  if (v9 == 1668506482)
  {
LABEL_15:
    int v11 = 1;
    goto LABEL_19;
  }
LABEL_53:
  uint64_t v43 = *((unsigned int *)a2 + 4);
  uint64_t v47 = 0x676C6F6264727465;
  int v48 = 0;
  if ((*(unsigned int (**)(HALS_Device *, uint64_t, uint64_t *, void))(*(void *)a2 + 88))(a2, v43, &v47, 0)&& HALS_Device::WantsDisplayRouting(a2))
  {
    goto LABEL_15;
  }
  if (v9 != 1651274862) {
    goto LABEL_68;
  }
  if (v8 == 1768778083) {
    int v11 = 2;
  }
  else {
    int v11 = 3;
  }
  if (v8 == 1701669219) {
    int v11 = 0;
  }
LABEL_19:
  *((_DWORD *)this + 77) = v11;
  int v13 = *((_DWORD *)this + 76);
  int v14 = HALS_IODevice::GetTransportType(a2);
  if (HALS_IODevice::GetNumberStreams(a2, 0))
  {
    int v16 = 5;
    if (v14 > 1718055535)
    {
      if (v14 > 1986622067)
      {
        if (v14 == 1986622068) {
          goto LABEL_34;
        }
        int v17 = 1986818665;
        goto LABEL_33;
      }
      if (v14 != 1718055536)
      {
        int v17 = 1735554416;
LABEL_33:
        if (v14 == v17) {
          goto LABEL_34;
        }
        goto LABEL_62;
      }
    }
    else
    {
      if (v14 > 1651275108)
      {
        if (v14 == 1651275109)
        {
          if (DeviceInfo::IsIEDActive(a2, v15))
          {
            unsigned int v42 = DeviceInfo::GetBTDeviceCategory(a2, v41) - 1;
            if (v42 >= 3) {
              int v16 = 4;
            }
            else {
              int v16 = dword_1BB00FF18[v42];
            }
          }
          else
          {
            int v16 = 5;
          }
          goto LABEL_34;
        }
        if (v14 == 1668506482)
        {
LABEL_30:
          int v16 = 1;
          goto LABEL_34;
        }
LABEL_62:
        uint64_t v44 = *((unsigned int *)a2 + 4);
        uint64_t v47 = 0x676C6F6264727465;
        int v48 = 0;
        if (!(*(unsigned int (**)(HALS_Device *, uint64_t, uint64_t *, void))(*(void *)a2 + 88))(a2, v44, &v47, 0))
        {
          if (v14 != 1651274862) {
            goto LABEL_76;
          }
          goto LABEL_72;
        }
        if (!HALS_Device::WantsDisplayRouting(a2))
        {
          if (v14 != 1651274862)
          {
            int v16 = 1;
            if (v14 == 1685090932 || v14 == 1751412073) {
              goto LABEL_34;
            }
LABEL_76:
            int v18 = 4;
            goto LABEL_35;
          }
LABEL_72:
          int v16 = 2;
          int v18 = 4;
          if (v13 > 1769173098)
          {
            if (v13 != 1769173099)
            {
              if (v13 != 1936745574) {
                goto LABEL_35;
              }
              int v16 = 3;
            }
          }
          else if (v13 != 1702064235)
          {
            if (v13 != 1751412846) {
              goto LABEL_35;
            }
            int v16 = 0;
          }
          goto LABEL_34;
        }
        goto LABEL_30;
      }
      if (v14)
      {
        int v17 = 1634300528;
        goto LABEL_33;
      }
    }
LABEL_34:
    int v18 = v16;
    goto LABEL_35;
  }
  int v18 = 6;
LABEL_35:
  *((_DWORD *)this + 78) = v18;
  IsHiddeuint64_t n = HALS_Device::IsHidden(a2);
  int NumberStreamsExcludingReferenceStreams = HALS_Device::GetNumberStreamsExcludingReferenceStreams(a2, 1);
  CanBeint DefaultDevice = HALS_Device::CanBeDefaultDevice(a2, 1, 0);
  int HogModeOwner = HALS_Device::GetHogModeOwner(a2);
  char v23 = HALS_Device::AreAllStreamsMixable(a2, 1);
  char v24 = (NumberStreamsExcludingReferenceStreams != 0) & ~IsHidden & CanBeDefaultDevice;
  if (HogModeOwner != -1) {
    char v24 = 0;
  }
  this[316] = v24 & v23;
  char v25 = HALS_Device::IsHidden(a2);
  int v26 = HALS_Device::GetNumberStreamsExcludingReferenceStreams(a2, 0);
  BOOL v27 = HALS_Device::CanBeDefaultDevice(a2, 0, 0);
  int v28 = HALS_Device::GetHogModeOwner(a2);
  char v29 = HALS_Device::AreAllStreamsMixable(a2, 0);
  char v30 = (v26 != 0) & ~v25 & v27;
  if (v28 != -1) {
    char v30 = 0;
  }
  this[317] = v30 & v29;
  char v31 = HALS_Device::IsHidden(a2);
  int v32 = HALS_Device::GetNumberStreamsExcludingReferenceStreams(a2, 0);
  BOOL v33 = HALS_Device::CanBeDefaultDevice(a2, 0, 1);
  int v34 = HALS_Device::GetHogModeOwner(a2);
  char v35 = HALS_Device::AreAllStreamsMixable(a2, 0);
  char v37 = (v32 != 0) & ~v31 & v33;
  if (v34 != -1) {
    char v37 = 0;
  }
  this[318] = v37 & v35;
  this[319] = this[317];
  if (*((_DWORD *)this + 74) == 1651275109) {
    this[320] = DeviceInfo::SupportsIED(a2, v36);
  }
  int v48 = 0;
  uint64_t v47 = *(void *)"otuabolg";
  if ((*(uint64_t (**)(HALS_Device *, void, uint64_t *, void))(*(void *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v47, 0))
  {
    int v45 = 4;
    int v46 = 1;
    (*(void (**)(HALS_Device *, void, uint64_t *, uint64_t, int *, int *, void, void, void))(*(void *)a2 + 112))(a2, *((unsigned int *)a2 + 4), &v47, 4, &v45, &v46, 0, 0, 0);
    if (!v46)
    {
      this[321] = 1;
      *(void *)&double result = 0x500000004;
      *(void *)(v4 + 28) = 0x500000004;
    }
  }
  return result;
}

uint64_t DeviceInfo::GetMasterDataSourceValue(DeviceInfo *this, HALS_Device *a2)
{
  if (a2) {
    uint64_t v2 = 1768845428;
  }
  else {
    uint64_t v2 = 1869968496;
  }
  uint64_t v3 = (HALS_Control *)(*(uint64_t (**)(DeviceInfo *, uint64_t, uint64_t, void))(*(void *)this + 640))(this, 1685287523, v2, 0);
  uint64_t v5 = v3;
  if (v3) {
    uint64_t SelectorControlValue = HALS_Control::GetSelectorControlValue(v3);
  }
  else {
    uint64_t SelectorControlValue = 0;
  }
  HALS_ObjectMap::ReleaseObject(v5, v4);
  return SelectorControlValue;
}

void sub_1BAD0BB10(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t DeviceInfo::SupportsIED(DeviceInfo *this, HALS_Device *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((unsigned int *)this + 4);
  strcpy(buf, "edeibolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  uint64_t v4 = (*(uint64_t (**)(DeviceInfo *, uint64_t, unsigned char *, void))(*(void *)this + 88))(this, v3, buf, 0);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (*(uint64_t (**)(DeviceInfo *))(*(void *)this + 216))(this);
    CFIndex v6 = "doesn't support";
    *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
    __int16 v14 = 1024;
    int v15 = 588;
    *(_DWORD *)std::string buf = 136315906;
    if (v4) {
      CFIndex v6 = "supports";
    }
    __int16 v16 = 2082;
    uint64_t v17 = v5;
    __int16 v18 = 2082;
    uint64_t v19 = v6;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Device %{public}s | %{public}s in-ear detection", buf, 0x26u);
  }
  if (v4)
  {
    uint64_t v7 = *((unsigned int *)this + 4);
    strcpy(buf, "edeibolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    uint64_t v12 = 0;
    (*(void (**)(DeviceInfo *, uint64_t, unsigned char *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)this + 112))(this, v7, buf, 4, &v12, (char *)&v12 + 4, 0, 0, 0);
    int v8 = HIDWORD(v12);
    uint64_t v4 = HIDWORD(v12) != 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = (*(uint64_t (**)(DeviceInfo *))(*(void *)this + 216))(this);
      BOOL v10 = "off";
      *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
      __int16 v14 = 1024;
      int v15 = 594;
      *(_DWORD *)std::string buf = 136315906;
      __int16 v16 = 2082;
      if (v8) {
        BOOL v10 = "on";
      }
      uint64_t v17 = v9;
      __int16 v18 = 2082;
      uint64_t v19 = v10;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Device %{public}s | in-ear detection is %{public}s", buf, 0x26u);
    }
  }
  return v4;
}

BOOL HALS_Device::IsHidden(HALS_Device *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v3 = 0x676C6F626869646ELL;
  int v4 = 0;
  uint64_t v5 = 0;
  (*(void (**)(HALS_Device *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)this + 112))(this, v1, &v3, 4, &v5, (char *)&v5 + 4, 0, 0, 0);
  return HIDWORD(v5) != 0;
}

BOOL HALS_Device::CanBeDefaultDevice(HALS_Device *this, int a2, int a3)
{
  uint64_t v3 = *((unsigned int *)this + 4);
  if (a3) {
    int v4 = 1936092276;
  }
  else {
    int v4 = 1684434036;
  }
  if (a2) {
    int v5 = 1768845428;
  }
  else {
    int v5 = 1869968496;
  }
  v7[0] = v4;
  v7[1] = v5;
  CFDictionaryRef v7[2] = 0;
  uint64_t v8 = 0;
  (*(void (**)(HALS_Device *, uint64_t, _DWORD *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)this + 112))(this, v3, v7, 4, &v8, (char *)&v8 + 4, 0, 0, 0);
  return HIDWORD(v8) != 0;
}

BOOL DeviceInfo::IsIEDActive(DeviceInfo *this, HALS_Device *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!DeviceInfo::SupportsIED(this, a2)) {
    return 1;
  }
  uint64_t v3 = *((unsigned int *)this + 4);
  strcpy(buf, "pseibolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  uint64_t v12 = 0;
  (*(void (**)(DeviceInfo *, uint64_t, unsigned char *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)this + 112))(this, v3, buf, 4, &v12, (char *)&v12 + 4, 0, 0, 0);
  int v4 = HIDWORD(v12);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (*(uint64_t (**)(DeviceInfo *))(*(void *)this + 216))(this);
    if ((v4 - 1) > 2) {
      CFIndex v6 = "unknown";
    }
    else {
      CFIndex v6 = off_1E6233288[v4 - 1];
    }
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
    __int16 v14 = 1024;
    int v15 = 610;
    __int16 v16 = 2082;
    uint64_t v17 = v5;
    __int16 v18 = 2082;
    uint64_t v19 = v6;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Device %{public}s | primary: %{public}s", buf, 0x26u);
  }
  if (v4 == 1) {
    return 1;
  }
  uint64_t v8 = *((unsigned int *)this + 4);
  strcpy(buf, "sseibolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  uint64_t v12 = 0;
  (*(void (**)(DeviceInfo *, uint64_t, unsigned char *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)this + 112))(this, v8, buf, 4, &v12, (char *)&v12 + 4, 0, 0, 0);
  int v9 = HIDWORD(v12);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = (*(uint64_t (**)(DeviceInfo *))(*(void *)this + 216))(this);
    if ((v9 - 1) > 2) {
      int v11 = "unknown";
    }
    else {
      int v11 = off_1E6233288[v9 - 1];
    }
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
    __int16 v14 = 1024;
    int v15 = 617;
    __int16 v16 = 2082;
    uint64_t v17 = v10;
    __int16 v18 = 2082;
    uint64_t v19 = v11;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Device %{public}s | secondary: %{public}s", buf, 0x26u);
  }
  return v9 == 1;
}

uint64_t DeviceInfo::GetBTDeviceCategory(DeviceInfo *this, HALS_Device *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((unsigned int *)this + 4);
  strcpy(buf, "tacdbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  uint64_t v4 = 0;
  if ((*(unsigned int (**)(DeviceInfo *, uint64_t, unsigned char *, void))(*(void *)this + 88))(this, v3, buf, 0))
  {
    uint64_t v5 = *((unsigned int *)this + 4);
    strcpy(buf, "tacdbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    uint64_t v9 = 0;
    (*(void (**)(DeviceInfo *, uint64_t, unsigned char *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)this + 112))(this, v5, buf, 4, &v9, (char *)&v9 + 4, 0, 0, 0);
    uint64_t v4 = HIDWORD(v9);
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = (*(uint64_t (**)(DeviceInfo *))(*(void *)this + 216))(this);
    if ((v4 - 1) > 2) {
      uint64_t v7 = "Unknown";
    }
    else {
      uint64_t v7 = off_1E62332A0[(v4 - 1)];
    }
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
    __int16 v11 = 1024;
    int v12 = 668;
    __int16 v13 = 2082;
    uint64_t v14 = v6;
    __int16 v15 = 2082;
    __int16 v16 = v7;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Device %{public}s | %{public}s", buf, 0x26u);
  }
  return v4;
}

BOOL HALS_Device::WantsDisplayRouting(HALS_Device *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v3 = 0x676C6F6264727465;
  int v4 = 0;
  uint64_t v5 = 0;
  (*(void (**)(HALS_Device *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)this + 112))(this, v1, &v3, 4, &v5, (char *)&v5 + 4, 0, 0, 0);
  return HIDWORD(v5) != 0;
}

uint64_t DeviceInfo::DeviceInfo(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = &unk_1F1489A20;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 292) = 0u;
  *(void *)(a1 + 308) = 0x600000005;
  *(_WORD *)(a1 + 316) = 0;
  *(unsigned char *)(a1 + 318) = 0;
  *(_WORD *)(a1 + 320) = 0;
  v9[0] = 0;
  v9[1] = 0;
  HALS_System::GetInstance(&v10, 0, v9);
  int v4 = v10;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v4)
  {
    v8[0] = 0;
    v8[1] = 0;
    HALS_System::GetInstance(&v10, 0, v8);
    uint64_t v5 = HALS_System::CopyDeviceByUID(v10, *(const __CFString **)(a2 + 8), 0);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    DeviceInfo::CatalogDeviceInfo((UInt8 *)a1, v5);
    HALS_ObjectMap::ReleaseObject(v5, v6);
  }
  return a1;
}

void sub_1BAD0C510(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  HALS_ObjectMap::ReleaseObject(v15, a2);
  OS::CF::UntypedObject::~UntypedObject(v14);
  _Unwind_Resume(a1);
}

uint64_t HALS_DefaultDeviceManager::SavedInfo::operator=(uint64_t a1, uint64_t a2)
{
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)&v6, *(CFDictionaryRef *)(a2 + 8), @"uid");
  CFNumberRef v4 = *(const __CFNumber **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  CFNumberRef v7 = v4;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v6);
  OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v6, *(CFDictionaryRef *)(a2 + 8), @"master data source value");
  *(_DWORD *)(a1 + 16) = OS::CF::Number::GetValue<unsigned int>(v7, 0);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v6);
  return a1;
}

uint64_t HALS_DefaultDeviceManager::GetDefaultDevice(HALS_DefaultDeviceManager *this, int a2)
{
  CFNumberRef v7 = this;
  uint64_t v4 = 0;
  int v8 = HALB_Mutex::Lock(this);
  if (a2 > 1934587251)
  {
    if (a2 == 1934587252)
    {
      uint64_t v5 = (char *)this + 312;
      goto LABEL_10;
    }
    if (a2 == 1936224868)
    {
      uint64_t v5 = (char *)this + 416;
      goto LABEL_10;
    }
  }
  else
  {
    if (a2 == 1682533920)
    {
      uint64_t v5 = (char *)this + 104;
      goto LABEL_10;
    }
    if (a2 == 1682929012)
    {
      uint64_t v5 = (char *)this + 208;
LABEL_10:
      uint64_t v4 = *(unsigned int *)v5;
    }
  }
  HALB_Mutex::Locker::~Locker(&v7);
  return v4;
}

void HALS_DefaultDeviceManager::SetDefaultDevice(HALS_DefaultDeviceManager *this, signed int a2, HALS_ObjectMap *a3, int a4)
{
  int v5 = (int)a3;
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  DeviceInfo::DeviceInfo((DeviceInfo *)v59, a3);
  if (*((unsigned char *)this + 99)) {
    BOOL v8 = v63 == 1634300528;
  }
  else {
    BOOL v8 = 0;
  }
  v10 = v8 || *((unsigned char *)this + 100) && (v63 == 1651275109 ? (BOOL v9 = v70 == 0) : (BOOL v9 = 1), !v9) || v71 != 0;
  int v11 = v10 | a4;
  v48[0] = HIBYTE(a2);
  v48[1] = BYTE2(a2);
  v48[2] = BYTE1(a2);
  v48[3] = a2;
  v48[4] = 0;
  int v12 = &v65;
  if (a2 == 1682533920) {
    int v12 = &v64;
  }
  int v13 = *v12;
  v47[0] = HIBYTE(v13);
  v47[1] = BYTE2(v13);
  void v47[2] = BYTE1(v13);
  v47[3] = v13;
  v47[4] = 0;
  if (*((unsigned char *)this + 98))
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)
      || (*(_DWORD *)std::string buf = 136315394,
          *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp",
          *(_WORD *)&unsigned char buf[12] = 1024,
          *(_DWORD *)&buf[14] = 1066,
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ===================================", buf, 0x12u), *((unsigned char *)this + 98)))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1067;
        *(_WORD *)&unsigned char buf[18] = 2082;
        uint64_t v50 = v48;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::SetDefaultDevice:           '%{public}s' --->>>", buf, 0x1Cu);
      }
    }
  }
  if (*((unsigned char *)this + 97) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = "";
    *(_DWORD *)std::string buf = 136316674;
    *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1068;
    *(_WORD *)&unsigned char buf[18] = 2082;
    if (v11) {
      uint64_t v14 = "transient";
    }
    uint64_t v50 = v48;
    __int16 v51 = 2082;
    unint64_t v52 = v14;
    __int16 v53 = 1024;
    int v54 = v5;
    __int16 v55 = 2082;
    uint64_t v56 = &v62;
    __int16 v57 = 2082;
    std::string::size_type v58 = v47;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::SetDefaultDevice:           '%{public}s' | %{public}s %d: '%{public}s'/'%{public}s'", buf, 0x40u);
  }
  if ((v11 & 1) == 0)
  {
    if (!cf) {
      goto LABEL_98;
    }
    if (a2 > 1934587251)
    {
      if (a2 == 1934587252)
      {
        if (!v68) {
          goto LABEL_98;
        }
      }
      else if (a2 != 1936224868 || !v69)
      {
        goto LABEL_98;
      }
    }
    else if (a2 == 1682533920)
    {
      if (!v66) {
        goto LABEL_98;
      }
    }
    else if (a2 != 1682929012 || !v67)
    {
      goto LABEL_98;
    }
    int v45 = this;
    int v46 = HALB_Mutex::Lock(this);
    if (a2 <= 1934587251)
    {
      if (a2 != 1682533920)
      {
        OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)buf, cf);
        *(void *)std::string buf = &unk_1F1489A20;
        if (OS::CF::operator==(*((CFStringRef *)this + 28), *(const __CFString **)&buf[8]))
        {
          int v16 = *((_DWORD *)this + 58);
          int v17 = v65;
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
          if (v16 == v17) {
            goto LABEL_87;
          }
        }
        else
        {
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
        }
        OS::CF::UntypedObject::operator=((uint64_t)this + 264, *((CFTypeRef *)this + 31));
        *((_DWORD *)this + 70) = *((_DWORD *)this + 64);
        OS::CF::UntypedObject::operator=((uint64_t)this + 240, *((CFTypeRef *)this + 28));
        *((_DWORD *)this + 64) = *((_DWORD *)this + 58);
        OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v43, cf);
        v43[0] = &unk_1F1489A20;
        int v32 = v65;
        OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)buf, (CFTypeRef)v43[1]);
        *(_DWORD *)&buf[16] = v32;
        uint64_t v33 = *((void *)this + 28);
        *((void *)this + 28) = *(void *)&buf[8];
        *(void *)std::string buf = &unk_1F1489A20;
        *(void *)&uint8_t buf[8] = v33;
        *((_DWORD *)this + 58) = v32;
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v43);
LABEL_87:
        OS::CF::UntypedObject::operator=((uint64_t)this + 288, 0);
        *((_DWORD *)this + 76) = 0;
LABEL_94:
        char v23 = &v45;
        goto LABEL_95;
      }
      OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)buf, cf);
      *(void *)std::string buf = &unk_1F1489A20;
      if (OS::CF::operator==(*((CFStringRef *)this + 15), *(const __CFString **)&buf[8]))
      {
        int v24 = *((_DWORD *)this + 32);
        int v25 = v64;
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
        if (v24 == v25) {
          goto LABEL_90;
        }
      }
      else
      {
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
      }
      OS::CF::UntypedObject::operator=((uint64_t)this + 160, *((CFTypeRef *)this + 18));
      *((_DWORD *)this + 44) = *((_DWORD *)this + 38);
      OS::CF::UntypedObject::operator=((uint64_t)this + 136, *((CFTypeRef *)this + 15));
      *((_DWORD *)this + 38) = *((_DWORD *)this + 32);
      OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v44, cf);
      v44[0] = &unk_1F1489A20;
      int v34 = v64;
      OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)buf, (CFTypeRef)v44[1]);
      *(_DWORD *)&buf[16] = v34;
      uint64_t v35 = *((void *)this + 15);
      *((void *)this + 15) = *(void *)&buf[8];
      *(void *)std::string buf = &unk_1F1489A20;
      *(void *)&uint8_t buf[8] = v35;
      *((_DWORD *)this + 32) = v34;
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v44);
LABEL_90:
      OS::CF::UntypedObject::operator=((uint64_t)this + 184, 0);
      *((_DWORD *)this + 50) = 0;
      goto LABEL_94;
    }
    if (a2 != 1934587252)
    {
      OS::CF::UntypedObject::operator=((uint64_t)this + 424, 0);
      *((_DWORD *)this + 110) = 0;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1110;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Default Shared Output Device can only be set transiently.", buf, 0x12u);
      }
      goto LABEL_94;
    }
    OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)buf, cf);
    *(void *)std::string buf = &unk_1F1489A20;
    if (OS::CF::operator==(*((CFStringRef *)this + 41), *(const __CFString **)&buf[8]))
    {
      int v26 = *((_DWORD *)this + 84);
      int v27 = v65;
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
      if (v26 == v27) {
        goto LABEL_93;
      }
    }
    else
    {
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
    }
    OS::CF::UntypedObject::operator=((uint64_t)this + 368, *((CFTypeRef *)this + 44));
    *((_DWORD *)this + 96) = *((_DWORD *)this + 90);
    OS::CF::UntypedObject::operator=((uint64_t)this + 344, *((CFTypeRef *)this + 41));
    *((_DWORD *)this + 90) = *((_DWORD *)this + 84);
    OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v42, cf);
    v42[0] = &unk_1F1489A20;
    int v36 = v65;
    OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)buf, (CFTypeRef)v42[1]);
    *(_DWORD *)&buf[16] = v36;
    uint64_t v37 = *((void *)this + 41);
    *((void *)this + 41) = *(void *)&buf[8];
    *(void *)std::string buf = &unk_1F1489A20;
    *(void *)&uint8_t buf[8] = v37;
    *((_DWORD *)this + 84) = v36;
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v42);
LABEL_93:
    OS::CF::UntypedObject::operator=((uint64_t)this + 392, 0);
    *((_DWORD *)this + 102) = 0;
    goto LABEL_94;
  }
  if (!v5)
  {
    *(void *)std::string buf = this;
    *(_DWORD *)&uint8_t buf[8] = HALB_Mutex::Lock(this);
    if (a2 > 1934587251)
    {
      if (a2 == 1934587252)
      {
        OS::CF::UntypedObject::operator=((uint64_t)this + 392, 0);
        __int16 v15 = (char *)this + 408;
        goto LABEL_74;
      }
      if (a2 == 1936224868)
      {
        OS::CF::UntypedObject::operator=((uint64_t)this + 424, 0);
        __int16 v15 = (char *)this + 440;
        goto LABEL_74;
      }
    }
    else
    {
      if (a2 == 1682533920)
      {
        OS::CF::UntypedObject::operator=((uint64_t)this + 184, 0);
        __int16 v15 = (char *)this + 200;
        goto LABEL_74;
      }
      if (a2 == 1682929012)
      {
        OS::CF::UntypedObject::operator=((uint64_t)this + 288, 0);
        __int16 v15 = (char *)this + 304;
LABEL_74:
        *(_DWORD *)__int16 v15 = 0;
      }
    }
    char v23 = (HALB_Mutex **)buf;
LABEL_95:
    HALB_Mutex::Locker::~Locker(v23);
    goto LABEL_96;
  }
  if (!cf) {
    goto LABEL_96;
  }
  if (a2 <= 1934587251)
  {
    if (a2 == 1682533920)
    {
      if (!v66) {
        goto LABEL_96;
      }
    }
    else if (a2 != 1682929012 || !v67)
    {
      goto LABEL_96;
    }
    goto LABEL_67;
  }
  if (a2 == 1934587252)
  {
    if (!v68) {
      goto LABEL_96;
    }
    goto LABEL_67;
  }
  if (a2 == 1936224868 && v69)
  {
LABEL_67:
    int v45 = this;
    int v46 = HALB_Mutex::Lock(this);
    if (a2 > 1934587251)
    {
      if (a2 == 1934587252)
      {
        OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v39, cf);
        v39[0] = &unk_1F1489A20;
        int v30 = v65;
        OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)buf, (CFTypeRef)v39[1]);
        *(_DWORD *)&buf[16] = v30;
        uint64_t v31 = *((void *)this + 50);
        *((void *)this + 50) = *(void *)&buf[8];
        *(void *)std::string buf = &unk_1F1489A20;
        *(void *)&uint8_t buf[8] = v31;
        *((_DWORD *)this + 102) = v30;
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
        uint64_t v20 = (OS::CF::UntypedObject *)v39;
      }
      else
      {
        OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v38, cf);
        v38[0] = &unk_1F1489A20;
        int v21 = v65;
        OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)buf, (CFTypeRef)v38[1]);
        *(_DWORD *)&buf[16] = v21;
        uint64_t v22 = *((void *)this + 54);
        *((void *)this + 54) = *(void *)&buf[8];
        *(void *)std::string buf = &unk_1F1489A20;
        *(void *)&uint8_t buf[8] = v22;
        *((_DWORD *)this + 110) = v21;
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
        uint64_t v20 = (OS::CF::UntypedObject *)v38;
      }
    }
    else if (a2 == 1682533920)
    {
      OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v41, cf);
      v41[0] = &unk_1F1489A20;
      int v28 = v64;
      OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)buf, (CFTypeRef)v41[1]);
      *(_DWORD *)&buf[16] = v28;
      uint64_t v29 = *((void *)this + 24);
      *((void *)this + 24) = *(void *)&buf[8];
      *(void *)std::string buf = &unk_1F1489A20;
      *(void *)&uint8_t buf[8] = v29;
      *((_DWORD *)this + 50) = v28;
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
      uint64_t v20 = (OS::CF::UntypedObject *)v41;
    }
    else
    {
      OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v40, cf);
      v40[0] = &unk_1F1489A20;
      int v18 = v65;
      OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)buf, (CFTypeRef)v40[1]);
      *(_DWORD *)&buf[16] = v18;
      uint64_t v19 = *((void *)this + 37);
      *((void *)this + 37) = *(void *)&buf[8];
      *(void *)std::string buf = &unk_1F1489A20;
      *(void *)&uint8_t buf[8] = v19;
      *((_DWORD *)this + 76) = v18;
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
      uint64_t v20 = (OS::CF::UntypedObject *)v40;
    }
    OS::CF::UntypedObject::~UntypedObject(v20);
    goto LABEL_94;
  }
LABEL_96:
  HALS_DefaultDeviceManager::WriteSettings(this);
  HALS_DefaultDeviceManager::CheckForChanges(this, a2);
  if (a2 == 1682929012) {
    HALS_DefaultDeviceManager::CheckForChanges(this, 1936224868);
  }
LABEL_98:
  if (*((unsigned char *)this + 98))
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)
      || (*(_DWORD *)std::string buf = 136315650,
          *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp",
          *(_WORD *)&unsigned char buf[12] = 1024,
          *(_DWORD *)&buf[14] = 1175,
          *(_WORD *)&unsigned char buf[18] = 2082,
          uint64_t v50 = v48,
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::SetDefaultDevice:           '%{public}s' <<<---", buf, 0x1Cu), *((unsigned char *)this + 98)))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_DefaultDeviceManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1176;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ===================================", buf, 0x12u);
      }
    }
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v60);
}

void sub_1BAD0D304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
}

HALB_Mutex *HALS_DefaultDeviceManager::WriteSettings(HALB_Mutex *this)
{
  if (!*((unsigned char *)this + 96))
  {
    uint64_t v1 = this;
    OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)v12);
    OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)v10);
    OS::CF::MutableArray::MutableArray((OS::CF::MutableArray *)v8);
    uint64_t v6 = v1;
    LODWORD(v7) = HALB_Mutex::Lock(v1);
    uint64_t v2 = -72;
    do
    {
      HALS_DefaultDeviceManager::SavedInfo::MakeDictionary((HALS_DefaultDeviceManager::SavedInfo *)&v4, (uint64_t)v1 + v2 + 184);
      OS::CF::MutableArray::AppendValue<OS::CF::Dictionary>(v13, v5);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v4);
      HALS_DefaultDeviceManager::SavedInfo::MakeDictionary((HALS_DefaultDeviceManager::SavedInfo *)&v4, (uint64_t)v1 + v2 + 288);
      OS::CF::MutableArray::AppendValue<OS::CF::Dictionary>(v11, v5);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v4);
      HALS_DefaultDeviceManager::SavedInfo::MakeDictionary((HALS_DefaultDeviceManager::SavedInfo *)&v4, (uint64_t)v1 + v2 + 392);
      OS::CF::MutableArray::AppendValue<OS::CF::Dictionary>(v9, v5);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v4);
      v2 += 24;
    }
    while (v2);
    HALB_Mutex::Locker::~Locker(&v6);
    OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&v6);
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>((__CFDictionary *)v7, @"input", v13);
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>((__CFDictionary *)v7, @"output", v11);
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::MutableArray>((__CFDictionary *)v7, @"system output", v9);
    v3[0] = 0;
    v3[1] = 0;
    HALS_System::GetInstance(&v4, 0, v3);
    HALS_SettingsManager::WriteSetting(*(HALS_SettingsManager **)(v4 + 1408), @"preferred devices", v7);
  }
  return this;
}

void sub_1BAD0D4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va1);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va2);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v5 - 48));
  _Unwind_Resume(a1);
}

void HALS_DefaultDeviceManager::CheckForChanges(HALS_DefaultDeviceManager *this, signed int a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  v19[0] = HIBYTE(a2);
  v19[1] = BYTE2(a2);
  void v19[2] = BYTE1(a2);
  v19[3] = a2;
  v19[4] = 0;
  if (*((unsigned char *)this + 98) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315650;
    int v26 = "HALS_DefaultDeviceManager.cpp";
    __int16 v27 = 1024;
    int v28 = 1284;
    __int16 v29 = 2082;
    int v30 = v19;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::CheckForChanges:            '%{public}s' --->>>", buf, 0x1Cu);
  }
  for (uint64_t i = 0; i != 72; i += 24)
  {
    uint64_t v5 = &buf[i];
    *(void *)uint64_t v5 = &unk_1F1489A20;
    *((void *)v5 + 1) = 0;
    *((_DWORD *)v5 + 4) = 0;
  }
  v17[0] = &unk_1F1489A20;
  v17[1] = 0;
  int v18 = 0;
  *(void *)uint64_t v20 = this;
  int v6 = 0;
  *(_DWORD *)&v20[8] = HALB_Mutex::Lock(this);
  if (a2 > 1934587251)
  {
    if (a2 == 1934587252)
    {
      uint64_t v11 = 0;
      int v6 = *((_DWORD *)this + 78);
      do
      {
        *(_DWORD *)(OS::CF::UntypedObject::operator=((uint64_t)&buf[v11], *(CFTypeRef *)((char *)this + v11 + 328)) + 16) = *(_DWORD *)((char *)this + v11 + 336);
        v11 += 24;
      }
      while (v11 != 72);
      HALS_DefaultDeviceManager::CheckForChanges::$_0::operator()((uint64_t)this + 392);
      OS::CF::UntypedObject::operator=((uint64_t)v17, *((CFTypeRef *)this + 50));
      BOOL v8 = (char *)this + 408;
    }
    else
    {
      if (a2 != 1936224868) {
        goto LABEL_24;
      }
      uint64_t v9 = 0;
      int v6 = *((_DWORD *)this + 104);
      do
      {
        *(_DWORD *)(OS::CF::UntypedObject::operator=((uint64_t)&buf[v9], *(CFTypeRef *)((char *)this + v9 + 224)) + 16) = *(_DWORD *)((char *)this + v9 + 232);
        v9 += 24;
      }
      while (v9 != 72);
      HALS_DefaultDeviceManager::CheckForChanges::$_0::operator()((uint64_t)this + 424);
      OS::CF::UntypedObject::operator=((uint64_t)v17, *((CFTypeRef *)this + 54));
      BOOL v8 = (char *)this + 440;
    }
  }
  else if (a2 == 1682533920)
  {
    uint64_t v10 = 0;
    int v6 = *((_DWORD *)this + 26);
    do
    {
      *(_DWORD *)(OS::CF::UntypedObject::operator=((uint64_t)&buf[v10], *(CFTypeRef *)((char *)this + v10 + 120)) + 16) = *(_DWORD *)((char *)this + v10 + 128);
      v10 += 24;
    }
    while (v10 != 72);
    HALS_DefaultDeviceManager::CheckForChanges::$_0::operator()((uint64_t)this + 184);
    OS::CF::UntypedObject::operator=((uint64_t)v17, *((CFTypeRef *)this + 24));
    BOOL v8 = (char *)this + 200;
  }
  else
  {
    if (a2 != 1682929012) {
      goto LABEL_24;
    }
    uint64_t v7 = 0;
    int v6 = *((_DWORD *)this + 52);
    do
    {
      *(_DWORD *)(OS::CF::UntypedObject::operator=((uint64_t)&buf[v7], *(CFTypeRef *)((char *)this + v7 + 224)) + 16) = *(_DWORD *)((char *)this + v7 + 232);
      v7 += 24;
    }
    while (v7 != 72);
    HALS_DefaultDeviceManager::CheckForChanges::$_0::operator()((uint64_t)this + 288);
    OS::CF::UntypedObject::operator=((uint64_t)v17, *((CFTypeRef *)this + 37));
    BOOL v8 = (char *)this + 304;
  }
  int v18 = *(_DWORD *)v8;
LABEL_24:
  HALB_Mutex::Locker::~Locker((HALB_Mutex **)v20);
  int updated = HALS_DefaultDeviceManager::UpdateDefaultDevice((uint64_t)this, (uint64_t)v17, (uint64_t)buf, a2);
  if (v6 == updated)
  {
    int v13 = 0;
    goto LABEL_37;
  }
  int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(1uLL);
  *(_DWORD *)int v13 = a2;
  *(void *)(v13 + 4) = 1735159650;
  *(void *)uint64_t v20 = this;
  *(_DWORD *)&v20[8] = HALB_Mutex::Lock(this);
  if (a2 > 1934587251)
  {
    if (a2 == 1934587252)
    {
      uint64_t v14 = (char *)this + 312;
      goto LABEL_35;
    }
    if (a2 == 1936224868)
    {
      uint64_t v14 = (char *)this + 416;
      goto LABEL_35;
    }
  }
  else
  {
    if (a2 == 1682533920)
    {
      uint64_t v14 = (char *)this + 104;
      goto LABEL_35;
    }
    if (a2 == 1682929012)
    {
      uint64_t v14 = (char *)this + 208;
LABEL_35:
      *(_DWORD *)uint64_t v14 = updated;
    }
  }
  HALB_Mutex::Locker::~Locker((HALB_Mutex **)v20);
  HALS_NotificationManager::PropertiesChanged((HALS_NotificationManager *)1, 0, 1u, (const AudioObjectPropertyAddress *)v13, v15);
LABEL_37:
  if (*((unsigned char *)this + 98))
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)
      || (*(_DWORD *)uint64_t v20 = 136315650,
          *(void *)&v20[4] = "HALS_DefaultDeviceManager.cpp",
          __int16 v21 = 1024,
          int v22 = 1368,
          __int16 v23 = 2082,
          int v24 = v19,
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::CheckForChanges:            '%{public}s' <<<---", v20, 0x1Cu), *((unsigned char *)this + 98)))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v20 = 136315394;
        *(void *)&v20[4] = "HALS_DefaultDeviceManager.cpp";
        __int16 v21 = 1024;
        int v22 = 1369;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  -----------------------------------", v20, 0x12u);
      }
    }
  }
  if (v13) {
    operator delete(v13);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v17);
  for (uint64_t j = 48; j != -24; j -= 24)
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&buf[j]);
}

void sub_1BAD0D9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  operator delete(v17);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a9);
  for (uint64_t i = 48; i != -24; i -= 24)
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(&a17 + i));
  _Unwind_Resume(a1);
}

void HALS_DefaultDeviceManager::CheckForChanges(unsigned int)::$_0::operator()(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    v4[0] = 0;
    v4[1] = 0;
    HALS_System::GetInstance(&v5, 0, v4);
    uint64_t v3 = HALS_System::CopyDeviceByUID(v5, *(const __CFString **)(a1 + 8), 0);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    if (!v3)
    {
      OS::CF::UntypedObject::operator=(a1, 0);
      *(_DWORD *)(a1 + 16) = 0;
    }
    HALS_ObjectMap::ReleaseObject(v3, v2);
  }
}

void sub_1BAD0DAD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void HALS_DefaultDeviceManager::SavedInfo::MakeDictionary(HALS_DefaultDeviceManager::SavedInfo *this, uint64_t a2)
{
  OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)v7);
  uint64_t v4 = *(const void **)(a2 + 8);
  if (v4)
  {
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::String>(theDict, @"uid", v4);
    OS::CF::Number::Number<unsigned int>(v6, *(_DWORD *)(a2 + 16));
    OS::CF::MutableDictionary::SetValueForKey<OS::CF::Number>(theDict, @"master data source value", (const void *)v6[1]);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v6);
  }
  if (theDict) {
    CFDictionaryRef Copy = CFDictionaryCreateCopy(0, theDict);
  }
  else {
    CFDictionaryRef Copy = 0;
  }
  *(void *)this = &unk_1F14898A0;
  *((void *)this + 1) = Copy;
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v7);
}

void HALS_DefaultDeviceManager::ResetDefaultDevice(HALS_DefaultDeviceManager *this, signed int a2)
{
  uint64_t v10 = this;
  int v11 = HALB_Mutex::Lock(this);
  switch(a2)
  {
    case 1934587252:
      OS::CF::UntypedObject::operator=((uint64_t)this + 392, 0);
      uint64_t v5 = 0;
      *((_DWORD *)this + 102) = 0;
      uint64_t v7 = &unk_1F1489A20;
      CFTypeRef cf = 0;
      int v9 = 0;
      do
      {
        OS::CF::UntypedObject::operator=((uint64_t)this + v5 + 320, cf);
        *(_DWORD *)((char *)this + v5 + 336) = v9;
        v5 += 24;
      }
      while (v5 != 72);
      goto LABEL_12;
    case 1682929012:
      OS::CF::UntypedObject::operator=((uint64_t)this + 288, 0);
      uint64_t v6 = 0;
      *((_DWORD *)this + 76) = 0;
      uint64_t v7 = &unk_1F1489A20;
      CFTypeRef cf = 0;
      int v9 = 0;
      do
      {
        OS::CF::UntypedObject::operator=((uint64_t)this + v6 + 216, cf);
        *(_DWORD *)((char *)this + v6 + 232) = v9;
        v6 += 24;
      }
      while (v6 != 72);
      goto LABEL_12;
    case 1682533920:
      OS::CF::UntypedObject::operator=((uint64_t)this + 184, 0);
      uint64_t v4 = 0;
      *((_DWORD *)this + 50) = 0;
      uint64_t v7 = &unk_1F1489A20;
      CFTypeRef cf = 0;
      int v9 = 0;
      do
      {
        OS::CF::UntypedObject::operator=((uint64_t)this + v4 + 112, cf);
        *(_DWORD *)((char *)this + v4 + 128) = v9;
        v4 += 24;
      }
      while (v4 != 72);
LABEL_12:
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v7);
      break;
  }
  HALB_Mutex::Locker::~Locker(&v10);
  HALS_DefaultDeviceManager::WriteSettings(this);
  HALS_DefaultDeviceManager::CheckForChanges(this, a2);
}

void HALS_DefaultDeviceManager::CheckForChanges(HALS_DefaultDeviceManager *this)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 98))
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)
      || (int v2 = 136315394,
          uint64_t v3 = "HALS_DefaultDeviceManager.cpp",
          __int16 v4 = 1024,
          int v5 = 1212,
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ===================================", (uint8_t *)&v2, 0x12u), *((unsigned char *)this + 98)))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        int v2 = 136315394;
        uint64_t v3 = "HALS_DefaultDeviceManager.cpp";
        __int16 v4 = 1024;
        int v5 = 1213;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::CheckForChanges:                 --->>>", (uint8_t *)&v2, 0x12u);
      }
    }
  }
  HALS_DefaultDeviceManager::CheckForChanges(this, 1682533920);
  HALS_DefaultDeviceManager::CheckForChanges(this, 1682929012);
  HALS_DefaultDeviceManager::CheckForChanges(this, 1934587252);
  HALS_DefaultDeviceManager::CheckForChanges(this, 1936224868);
  if (*((unsigned char *)this + 98))
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)
      || (int v2 = 136315394,
          uint64_t v3 = "HALS_DefaultDeviceManager.cpp",
          __int16 v4 = 1024,
          int v5 = 1220,
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::CheckForChanges:                 <<<---", (uint8_t *)&v2, 0x12u), *((unsigned char *)this + 98)))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        int v2 = 136315394;
        uint64_t v3 = "HALS_DefaultDeviceManager.cpp";
        __int16 v4 = 1024;
        int v5 = 1221;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ===================================", (uint8_t *)&v2, 0x12u);
      }
    }
  }
}

void HALS_DefaultDeviceManager::SetLoggingIsEnabled(HALS_DefaultDeviceManager *this, int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (g_static_start_options != 1)
  {
    if (*((unsigned char *)this + 97)) {
      BOOL v4 = 0;
    }
    else {
      BOOL v4 = a2 == 0;
    }
    if (!v4 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v5 = "disabling";
      uint64_t v7 = "HALS_DefaultDeviceManager.cpp";
      int v6 = 136315650;
      if (a2) {
        int v5 = "enabling";
      }
      __int16 v8 = 1024;
      int v9 = 1378;
      __int16 v10 = 2082;
      int v11 = v5;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::SetLoggingIsEnabled: %{public}s default device logging", (uint8_t *)&v6, 0x1Cu);
    }
    *((unsigned char *)this + 97) = a2;
  }
}

void HALS_DefaultDeviceManager::SetVerboseLoggingIsEnabled(HALS_DefaultDeviceManager *this, int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (g_static_start_options != 1)
  {
    if (*((unsigned char *)this + 98) || (*((unsigned char *)this + 97) ? (BOOL v4 = a2 == 0) : (BOOL v4 = 1), !v4))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        int v5 = "disabling";
        __int16 v8 = "HALS_DefaultDeviceManager.cpp";
        int v7 = 136315650;
        if (a2) {
          int v5 = "enabling";
        }
        __int16 v9 = 1024;
        int v10 = 1390;
        __int16 v11 = 2082;
        uint64_t v12 = v5;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::SetVerboseLoggingIsEnabled: %{public}s verbose default device logging", (uint8_t *)&v7, 0x1Cu);
      }
    }
    if (*((unsigned char *)this + 97)) {
      char v6 = a2;
    }
    else {
      char v6 = 0;
    }
    *((unsigned char *)this + 98) = v6;
  }
}

void HALS_DefaultDeviceManager::SetAirPlayIsAlwaysTransient(HALS_DefaultDeviceManager *this, int a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)this + 97) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    BOOL v4 = "No";
    char v6 = "HALS_DefaultDeviceManager.cpp";
    int v5 = 136315650;
    if (a2) {
      BOOL v4 = "Yes";
    }
    __int16 v7 = 1024;
    int v8 = 1398;
    __int16 v9 = 2082;
    int v10 = v4;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_DefaultDeviceManager::SetAirPlayIsAlwaysTransient: %{public}s", (uint8_t *)&v5, 0x1Cu);
  }
  *((unsigned char *)this + 99) = a2;
  if (HALS_DefaultDeviceManager::FilterSettings(this))
  {
    HALS_DefaultDeviceManager::WriteSettings(this);
    HALS_DefaultDeviceManager::CheckForChanges(this);
  }
}

void HALS_LegacyTimebase::get_private_transport_state(HALS_LegacyTimebase *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v4, "com.apple.coreaudio", "AMCP");
  uint64_t v1 = *v4;
  if (*(void *)v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v5);
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    int v2 = pthread_self();
    mach_port_t v3 = pthread_mach_thread_np(v2);
    LODWORD(v4) = 67109890;
    HIDWORD(v4) = v3;
    *(_WORD *)int v5 = 2080;
    *(void *)&v5[2] = "HALS_LegacyTimebase.cpp";
    __int16 v6 = 1024;
    int v7 = 216;
    __int16 v8 = 2080;
    __int16 v9 = "false";
    _os_log_error_impl(&dword_1BAA78000, v1, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s This should not be called outside of tests", (uint8_t *)&v4, 0x22u);
  }
  abort();
}

double HALS_LegacyTimebase::get_max_io_buffer_frame_size(HALS_LegacyTimebase *this)
{
  return 0.0;
}

uint64_t HALS_LegacyTimebase::wait_for_time_to_start()
{
  return 0;
}

void HALS_LegacyTimebase::get_engine_ptr(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t HALS_LegacyTimebase::available_past_data(HALS_LegacyTimebase *this)
{
  return 0;
}

uint64_t HALS_LegacyTimebase::supports_past_data(HALS_LegacyTimebase *this)
{
  return 0;
}

uint64_t HALS_LegacyTimebase::is_valid(HALS_LegacyTimebase *this)
{
  return 1;
}

double HALS_LegacyTimebase::get_rate_scalar(HALS_LegacyTimebase *this)
{
  return *(double *)(*((void *)this + 7) + 40 * *(unsigned int *)(*((void *)this + 7) + 192) + 216);
}

double HALS_LegacyTimebase::get_sample_rate(HALS_LegacyTimebase *this)
{
  double v1 = *(double *)(*((void *)this + 7) + 40 * *(unsigned int *)(*((void *)this + 7) + 192) + 200);
  double v2 = 24000000.0 / v1;
  BOOL v3 = v1 == 0.0;
  double result = 0.0;
  if (!v3) {
    return v2;
  }
  return result;
}

unint64_t HALS_LegacyTimebase::get_engine_info(uint64_t a1, int a2)
{
  unsigned int v3 = (*(uint64_t (**)(void, BOOL))(**(void **)(a1 + 48) + 344))(*(void *)(a1 + 48), a2 == 1);
  return v3 | (unint64_t)((*(uint64_t (**)(void))(**(void **)(a1 + 48) + 352))() << 32);
}

uint64_t HALS_LegacyTimebase::get_anchor_time(HALS_LegacyTimebase *this)
{
  return *((void *)this + 1);
}

void HALS_LegacyTimebase::get_state(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t HALS_LegacyTimebase::is_running(HALS_LegacyTimebase *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 672))();
}

double HALS_LegacyTimebase::get_host_ticks_per_frame(HALS_LegacyTimebase *this)
{
  return *(double *)(*((void *)this + 7) + 40 * *(unsigned int *)(*((void *)this + 7) + 192) + 200);
}

Float64 HALS_LegacyTimebase::convert_host_to_sample_time(HALS_LegacyTimebase *this, UInt64 a2)
{
  v4.mSampleTime = 0.0;
  v4.mHostTime = a2;
  memset(&v4.mRateScalar, 0, 40);
  *(void *)&v4.mFlags = 2;
  memset(&v3, 0, 56);
  *(void *)&v3.mFlags = 1;
  HALS_IOClock::TranslateTime(*((void *)this + 7), &v4, &v3);
  return v3.mSampleTime;
}

UInt64 HALS_LegacyTimebase::convert_sample_to_host_time(HALS_LegacyTimebase *this, Float64 a2)
{
  v4.mSampleTime = a2;
  memset(&v4.mHostTime, 0, 48);
  *(void *)&v4.mFlags = 1;
  memset(&v3, 0, 56);
  *(void *)&v3.mFlags = 2;
  HALS_IOClock::TranslateTime(*((void *)this + 7), &v4, &v3);
  return v3.mHostTime;
}

uint64_t HALS_LegacyTimebase::get_clock_domain(HALS_LegacyTimebase *this)
{
  return 0;
}

double HALS_LegacyTimebase::get_last_zero_time_stamp@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)&double result = 1;
  *(void *)(a1 + 56) = 1;
  return result;
}

UInt64 HALS_LegacyTimebase::get_current_time@<X0>(HALS_IOClock **this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(void *)(a2 + 56) = 1;
  return HALS_IOClock::GetCurrentTime(this[7], (AudioTimeStamp *)a2);
}

void *HALS_LegacyTimebase::get_underlying_device_uid@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t HALS_LegacyTimebase::get_clock_id(HALS_LegacyTimebase *this)
{
  return (uint64_t)this + 24;
}

void HALS_LegacyTimebase::~HALS_LegacyTimebase(HALS_LegacyTimebase *this)
{
  HALS_LegacyTimebase::~HALS_LegacyTimebase(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t v2;

  double v2 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

void AMCP::make_string_for_transport_type(AMCP *this@<X0>, void *a2@<X8>, int16x8_t a3@<Q0>)
{
  if ((int)this <= 1700886113)
  {
    if ((int)this <= 1651271008)
    {
      switch(this)
      {
        case 0:
          AudioTimeStamp v3 = "Unknown";
          goto LABEL_37;
        case 0x31333934:
          AudioTimeStamp v3 = "FireWire";
          goto LABEL_37;
        case 0x61697270:
          AudioTimeStamp v3 = "Airplay";
          goto LABEL_37;
      }
    }
    else if ((int)this > 1651275108)
    {
      if (this == 1651275109)
      {
        AudioTimeStamp v3 = "Bluetooth";
        goto LABEL_37;
      }
      if (this == 1685090932)
      {
        AudioTimeStamp v3 = "Display Port";
        goto LABEL_37;
      }
    }
    else
    {
      if (this == 1651271009)
      {
        AudioTimeStamp v3 = "Bluetooth LE";
        goto LABEL_37;
      }
      if (this == 1651274862)
      {
        AudioTimeStamp v3 = "Built-In";
        goto LABEL_37;
      }
    }
  }
  else if ((int)this > 1953002861)
  {
    if ((int)this > 1986622067)
    {
      if (this == 1986622068)
      {
        AudioTimeStamp v3 = "Virtual";
        goto LABEL_37;
      }
      if (this == 1986818665)
      {
        AudioTimeStamp v3 = "System Capture";
        goto LABEL_37;
      }
    }
    else
    {
      if (this == 1953002862)
      {
        AudioTimeStamp v3 = "Thunderbolt";
        goto LABEL_37;
      }
      if (this == 1970496032)
      {
        AudioTimeStamp v3 = "USB";
        goto LABEL_37;
      }
    }
  }
  else if ((int)this > 1835169138)
  {
    if (this == 1835169139)
    {
      AudioTimeStamp v3 = "Mikey Bus";
      goto LABEL_37;
    }
    if (this == 1885563168)
    {
      AudioTimeStamp v3 = "PCI";
      goto LABEL_37;
    }
  }
  else
  {
    if (this == 1700886114)
    {
      AudioTimeStamp v3 = "AVB";
      goto LABEL_37;
    }
    if (this == 1751412073)
    {
      AudioTimeStamp v3 = "HDMI";
LABEL_37:
      std::string::basic_string[abi:ne180100]<0>(a2, v3);
      return;
    }
  }
  a3.i32[0] = bswap32(this);
  *(int8x8_t *)a3.i8 = vzip1_s8(*(int8x8_t *)a3.i8, *(int8x8_t *)a3.i8);
  v4.i64[0] = 0x1F0000001FLL;
  v4.i64[1] = 0x1F0000001FLL;
  v5.i64[0] = 0x5F0000005FLL;
  v5.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)a3.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v5, (uint32x4_t)vsraq_n_s32(v4, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a3.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a3.i8, (int8x8_t)0x2E002E002E002ELL);
  char v7 = 4;
  LODWORD(__p) = vmovn_s16(a3).u32[0];
  BYTE4(__p) = 0;
  caulk::make_string((caulk *)"Transport '%s'", (uint64_t)a2, &__p);
  if (v7 < 0) {
    operator delete(__p);
  }
}

BOOL HALB_ChangeSynchronizer::SetStateIf(atomic_uint *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4 = 0;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  while (1)
  {
    char v7 = (char *)&HALB_ChangeSynchronizer::SetStateIf(HALB_ChangeSynchronizer::ChangeStatus,HALB_ChangeSynchronizer::ChangeStatus)::kTransitionTable
       + v4;
    if (*(_DWORD *)((char *)&HALB_ChangeSynchronizer::SetStateIf(HALB_ChangeSynchronizer::ChangeStatus,HALB_ChangeSynchronizer::ChangeStatus)::kTransitionTable
                   + v4) == a2
      && *((_DWORD *)v7 + 1) == a3)
    {
      break;
    }
    v4 += 8;
    if (v4 == 104) {
      goto LABEL_5;
    }
  }
  if (v7 != "N4AMCP16Stable_Raw_ClockE")
  {
    unsigned int v14 = a2;
    atomic_compare_exchange_strong(a1 + 2, &v14, a3);
    return v14 == a2;
  }
LABEL_5:
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v15, "com.apple.coreaudio", "AMCP");
  __int16 v8 = *v15;
  if (*(void *)v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v16);
  }
  BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  if (result)
  {
    uint64_t v10 = pthread_self();
    mach_port_t v11 = pthread_mach_thread_np(v10);
    uint64_t v12 = HALB_ChangeSynchronizer::ChangeStatusToString(HALB_ChangeSynchronizer::ChangeStatus)::kStatusNames[v6];
    uint64_t v13 = HALB_ChangeSynchronizer::ChangeStatusToString(HALB_ChangeSynchronizer::ChangeStatus)::kStatusNames[v5];
    LODWORD(v15) = 67110402;
    HIDWORD(v15) = v11;
    *(_WORD *)int v16 = 2080;
    *(void *)&_OWORD v16[2] = "HALB_ChangeSynchronizer.cpp";
    __int16 v17 = 1024;
    int v18 = 82;
    __int16 v19 = 2048;
    uint64_t v20 = a1;
    __int16 v21 = 2080;
    int v22 = v12;
    __int16 v23 = 2080;
    int v24 = v13;
    _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] HALB_ChangeSynchronizer::SetStateIf: Change synchronizer state change (%p) preventing unexpected state transition %s -> %s (DEBUG ONLY)", (uint8_t *)&v15, 0x36u);
    return 0;
  }
  return result;
}

void sub_1BAD0F014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BAD0F278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t AMCP::Stable_Raw_Clock::calculate_early_threshold(os_unfair_lock_s *this)
{
  double v2 = this + 15;
  os_unfair_lock_lock(this + 15);
  if (*(void *)&this[24]._os_unfair_lock_opaque < 3uLL) {
    uint64_t v3 = -48000;
  }
  else {
    uint64_t v3 = *(void *)(boost::circular_buffer<AMCP::Zero_Time_Stamp,std::allocator<AMCP::Zero_Time_Stamp>>::at(&this[16]._os_unfair_lock_opaque, 2)+ 8)- 48000;
  }
  os_unfair_lock_unlock(v2);
  LODWORD(v4) = this[4];
  return v3 + (unint64_t)(*(double *)&this[12]._os_unfair_lock_opaque * (double)v4);
}

void sub_1BAD0F344(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AMCP::Stable_Raw_Clock::process_time_stamp(AMCP::Time_Stamp_Historian *a1, uint64_t a2)
{
  if ((*(unsigned int (**)(AMCP::Time_Stamp_Historian *))(*(void *)a1 + 32))(a1))
  {
    (*(void (**)(AMCP::Time_Stamp_Historian *, uint64_t))(*(void *)a1 + 40))(a1, a2);
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    uint64_t v5 = *(void *)(a2 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)a1 + 15);
    boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::push_back_impl<AMCP::Zero_Time_Stamp_Delta const&>((uint64_t *)a1 + 8, &v4);
    os_unfair_lock_unlock((os_unfair_lock_t)a1 + 15);
  }
  ++*((_DWORD *)a1 + 6);

  AMCP::Time_Stamp_Historian::calculate_and_save_delta(a1);
}

void AMCP::Stable_Raw_Clock::process_initial_time_stamps(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  long long v4 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  if ((v4 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unsigned int v14 = **(NSObject ***)buf;
    if (*(void *)v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v38);
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      __int16 v15 = pthread_self();
      mach_port_t v16 = pthread_mach_thread_np(v15);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v16;
      *(_WORD *)int v38 = 2080;
      *(void *)&void v38[2] = "Stable_Raw_Clock.cpp";
      __int16 v39 = 1024;
      int v40 = 68;
      __int16 v41 = 2080;
      *(void *)unsigned int v42 = "not (need_to_process_initial_stamps())";
      _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v28);
    std::logic_error::logic_error(&v29, &v28);
    v29.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v30, &v29);
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    int v35 = -1;
    v30.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v31 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
    *(void *)&v42[6] = "virtual void AMCP::Stable_Raw_Clock::process_initial_time_stamps(const Zero_Time_Stamp &)";
    uint64_t v43 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Clock/Stable_Raw_Clock.cpp";
    int v44 = 68;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
    long long v26 = v23;
    uint64_t v27 = v24;
    long long v23 = 0uLL;
    uint64_t v24 = 0;
    uint64_t v25 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  LODWORD(v5) = *(_DWORD *)(a1 + 16);
  double v6 = (double)v5;
  double v7 = *(double *)a2 + v6 * -2.0;
  double v8 = *(double *)(a1 + 40) * v6;
  uint64_t v9 = *(void *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  *(double *)&long long v21 = v7;
  *((void *)&v21 + 1) = v9 - 2 * (unint64_t)v8;
  uint64_t v22 = v10;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 60));
  boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::push_back_impl<AMCP::Zero_Time_Stamp_Delta const&>((uint64_t *)(a1 + 64), &v21);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 60));
  AMCP::Time_Stamp_Historian::calculate_and_save_delta((AMCP::Time_Stamp_Historian *)a1);
  LODWORD(v11) = *(_DWORD *)(a1 + 16);
  double v12 = (double)v11;
  unint64_t v13 = *(void *)(a2 + 8) - (unint64_t)(*(double *)(a1 + 40) * v12);
  *(double *)&long long v19 = *(double *)a2 - v12;
  *((void *)&v19 + 1) = v13;
  uint64_t v20 = v10;
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 60));
  boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::push_back_impl<AMCP::Zero_Time_Stamp_Delta const&>((uint64_t *)(a1 + 64), &v19);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 60));
  AMCP::Time_Stamp_Historian::calculate_and_save_delta((AMCP::Time_Stamp_Historian *)a1);
  long long v17 = *(_OWORD *)a2;
  uint64_t v18 = *(void *)(a2 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 60));
  boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::push_back_impl<AMCP::Zero_Time_Stamp_Delta const&>((uint64_t *)(a1 + 64), &v17);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 60));

  AMCP::Time_Stamp_Historian::calculate_and_save_delta((AMCP::Time_Stamp_Historian *)a1);
}

void sub_1BAD0F7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v36 - 128);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a34);
  MEMORY[0x1C1859090](&a32);
  if (a31 < 0) {
    operator delete(a26);
  }
  if (v35) {
    __cxa_free_exception(v34);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v36 - 129));
  _Unwind_Resume(a1);
}

BOOL AMCP::Stable_Raw_Clock::need_to_process_initial_stamps(AMCP::Stable_Raw_Clock *this)
{
  return *((_DWORD *)this + 6) == 0;
}

BOOL AMCP::Stable_Raw_Clock::has_reliable_time(AMCP::Stable_Raw_Clock *this)
{
  return *((_DWORD *)this + 6) > 1u;
}

BOOL AMCP::Stable_Raw_Clock::has_time(AMCP::Stable_Raw_Clock *this)
{
  return *((_DWORD *)this + 6) != 0;
}

void AMCP::Stable_Raw_Clock::~Stable_Raw_Clock(void **this)
{
  *this = &unk_1F1484778;
  double v1 = this + 8;
  boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::destroy(this + 14);
  boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::destroy(v1);

  JUMPOUT(0x1C1859840);
}

{
  void **v1;

  *this = &unk_1F1484778;
  double v1 = this + 8;
  boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::destroy(this + 14);
  boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::destroy(v1);
}

void *std::__destroy_at[abi:ne180100]<HALS_IOStreamDSP::InputChannelData,0>(uint64_t a1)
{
  std::unique_ptr<HALB_CaptureFile>::reset[abi:ne180100]((unsigned __int8 ***)(a1 + 80), 0);
  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100]((uint64_t *)(a1 + 40), 0);

  return std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100]((void *)(a1 + 48));
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<char>::__vallocate[abi:ne180100](a1, a2);
    long long v4 = (char *)a1[1];
    unint64_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1BAD0F9D8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_0,std::allocator<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_0>,void ()(AudioBufferList *)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_0,std::allocator<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_0>,void ()(AudioBufferList *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN16HALS_IOStreamDSP15AllocateBuffersEjRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_11CaptureFileE17AudioCapturerModeE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_0,std::allocator<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_0>,void ()(AudioBufferList *)>::operator()(uint64_t a1, void **a2)
{
}

void std::__function::__func<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_0,std::allocator<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_0>,void ()(AudioBufferList *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F146CDC8;
}

void *std::__function::__func<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_0,std::allocator<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_0>,void ()(AudioBufferList *)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F146CDC8;
  return result;
}

void std::__function::__func<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_0,std::allocator<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_0>,void ()(AudioBufferList *)>::~__func()
{
}

void *std::__function::__func<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_1,std::allocator<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_1>,void ()(AudioBufferList *)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_1,std::allocator<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_1>,void ()(AudioBufferList *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN16HALS_IOStreamDSP15AllocateBuffersEjRKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS_11CaptureFileE17AudioCapturerModeE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_1,std::allocator<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_1>,void ()(AudioBufferList *)>::operator()(uint64_t a1, void **a2)
{
}

void std::__function::__func<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_1,std::allocator<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_1>,void ()(AudioBufferList *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F146CE48;
}

void *std::__function::__func<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_1,std::allocator<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_1>,void ()(AudioBufferList *)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F146CE48;
  return result;
}

void std::__function::__func<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_1,std::allocator<HALS_IOStreamDSP::AllocateBuffers(unsigned int,std::string const&,HALS_IOStreamDSP::CaptureFile,AudioCapturerMode)::$_1>,void ()(AudioBufferList *)>::~__func()
{
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  double v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      double v2 = v3;
    }
    while (v3);
  }
  long long v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t HALS_IOStreamDSP::SetDSPProperty(HALS_IOStreamDSP *this, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t result = *(void *)this;
  if (result)
  {
    uint64_t result = DSPGraph::Graph::hasProperty((DSPGraph::Graph *)result);
    if (result)
    {
      v9[0] = BYTE3(a2);
      v9[1] = BYTE2(a2);
      uint64_t v9[2] = BYTE1(a2);
      void v9[3] = a2;
      v9[4] = 0;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315650;
        unint64_t v11 = "HALS_IOStreamDSP.cpp";
        __int16 v12 = 1024;
        int v13 = 255;
        __int16 v14 = 2080;
        __int16 v15 = v9;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOStreamDSP::SetDSPProperty property %s", buf, 0x1Cu);
      }
      (*(void (**)(void, uint64_t, uint64_t, const void *))(**(void **)this + 56))(*(void *)this, a2, a3, a4);
      return 1;
    }
  }
  return result;
}

void sub_1BAD0FD30(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, __int16 a10, char a11, char a12, long long buf, long long a14, long long a15, long long a16)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&a15);
      DSPGraph::Exception::print();
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "HALS_IOStreamDSP.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 262;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = &a12;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  DSPGraph::Exception while setting property %s in HALS_IOStreamDSP::SetDSPProperty()", (uint8_t *)&buf, 0x1Cu);
      }
      std::ostringstream::~ostringstream((uint64_t)&a15);
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(a15) = 136315650;
      *(void *)((char *)&a15 + 4) = "HALS_IOStreamDSP.cpp";
      WORD6(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 14) = 267;
      WORD1(a16) = 2080;
      *(void *)((char *)&a16 + 4) = &a12;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Unknown exception while setting property %s in HALS_IOStreamDSP::SetDSPProperty()", (uint8_t *)&a15, 0x1Cu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAD0FCFCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_pointer<DSPGraph::Graph  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN8DSPGraph5GraphEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<DSPGraph::Graph  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<DSPGraph::Graph  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::vector<OS::CF::String>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  double v2 = (char *)**a1;
  if (v2)
  {
    long long v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      double v6 = v4 - 16;
      double v7 = v4 - 16;
      double v8 = v4 - 16;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 16;
        (*v9)(v7);
        v6 -= 16;
        BOOL v10 = v7 == v2;
        double v7 = v8;
      }
      while (!v10);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void HALS_IOStreamDSP::AddInputStreamAtIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (a2 - a1) >> 4;
  if (v6 <= a5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315906;
      uint64_t v9 = "HALS_IOStreamDSP.cpp";
      __int16 v10 = 1024;
      int v11 = 416;
      __int16 v12 = 2048;
      unint64_t v13 = a5;
      __int16 v14 = 2048;
      unint64_t v15 = v6;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Cannot add new stream to index %lu because we expect only %lu streams", (uint8_t *)&v8, 0x26u);
    }
  }
  else
  {
    double v7 = (void *)(a1 + 16 * a5);
    void *v7 = a3;
    v7[1] = a4;
  }
}

unint64_t HALS_DSPSettings::HasValidDSPString(HALS_DSPSettings *this, const __CFDictionary *a2)
{
  unint64_t v2 = (unint64_t)this;
  if (this)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
    __int16 v7 = 257;
    CACFDictionary::operator=((uint64_t)&Mutable, (const void *)v2);
    CFTypeRef v4 = 0;
    char v5 = 1;
    CACFDictionary::GetCACFString(&Mutable, @"dsp graph", &v4);
    unint64_t v2 = v4 != 0;
    CACFString::~CACFString((CACFString *)&v4);
    CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  }
  return v2;
}

void sub_1BAD101BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t CACFDictionary::operator=(uint64_t a1, const void *a2)
{
  if (!*(unsigned char *)(a1 + 8))
  {
    *(void *)a1 = a2;
    *(unsigned char *)(a1 + 9) = 0;
    return a1;
  }
  CFTypeRef v4 = *(const void **)a1;
  if (!*(void *)a1)
  {
    *(void *)a1 = a2;
    *(unsigned char *)(a1 + 9) = 0;
    if (!a2) {
      return a1;
    }
LABEL_8:
    CFRetain(a2);
    return a1;
  }
  CFRelease(v4);
  int v5 = *(unsigned __int8 *)(a1 + 8);
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 9) = 0;
  if (a2 && v5) {
    goto LABEL_8;
  }
  return a1;
}

void HALS_DSPSettings::FromDictionary(HALS_DSPSettings *this, const __CFDictionary *a2)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
    __int16 v48 = 257;
    CFTypeRef v4 = (const __CFDictionary **)CACFDictionary::operator=((uint64_t)&Mutable, a2);
    CFTypeRef cf = 0;
    char v46 = 1;
    CACFDictionary::GetCACFString(v4, @"dsp graph", &cf);
    CFTypeRef v43 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
    __int16 v44 = 257;
    CACFDictionary::GetCACFDictionary(&Mutable, @"au tuning strip", (CACFDictionary *)&v43);
    CFTypeRef v41 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
    __int16 v42 = 257;
    CACFDictionary::GetCACFDictionary(&Mutable, @"property strip", (CACFDictionary *)&v41);
    CFTypeRef v39 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
    __int16 v40 = 257;
    CACFDictionary::GetCACFArray(&Mutable, @"initialization properties", (CACFArray *)&v39);
    unsigned int v38 = 0;
    CACFDictionary::GetUInt32((uint64_t)Mutable, @"client channel count", &v38);
    unsigned int v37 = 0;
    CACFDictionary::GetUInt32((uint64_t)Mutable, @"target stream", &v37);
    CFTypeRef v35 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
    __int16 v36 = 257;
    CACFDictionary::GetCACFDictionary(&Mutable, @"dsp graph string substitutions", (CACFDictionary *)&v35);
    if (cf)
    {
      CFRetain(cf);
      v34[0] = &unk_1F1489A20;
      v34[1] = cf;
      if (v43)
      {
        CFRetain(v43);
        CFTypeRef v5 = v43;
      }
      else
      {
        CFTypeRef v5 = 0;
      }
      CFTypeRef v33 = v5;
      uint64_t v32 = &unk_1F14898A0;
      if (v41)
      {
        CFRetain(v41);
        CFTypeRef v6 = v41;
      }
      else
      {
        CFTypeRef v6 = 0;
      }
      CFTypeRef v31 = v6;
      std::logic_error v30 = &unk_1F14898A0;
      if (v35)
      {
        CFRetain(v35);
        CFTypeRef v7 = v35;
      }
      else
      {
        CFTypeRef v7 = 0;
      }
      CFTypeRef v29 = v7;
      std::string v28 = &unk_1F14898A0;
      if (v39)
      {
        CFRetain(v39);
        CFTypeRef v8 = v39;
      }
      else
      {
        CFTypeRef v8 = 0;
      }
      applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v27, v8);
      *(_OWORD *)this = 0u;
      *((void *)this + 2) = 0;
      *((void *)this + 3) = &unk_1F14898A0;
      *((void *)this + 4) = 0;
      *((void *)this + 5) = &unk_1F14898A0;
      *((_OWORD *)this + 3) = 0u;
      *((void *)this + 9) = 0;
      uint64_t v9 = (void **)((char *)this + 72);
      *((_OWORD *)this + 5) = 0u;
      *((void *)this + 13) = &unk_1F14898A0;
      *((void *)this + 14) = 0;
      OS::CF::String::AsStdString(&buf, (uint64_t)v34);
      if (*((char *)this + 23) < 0) {
        operator delete(*(void **)this);
      }
      *(std::string *)this = buf;
      OS::CF::UntypedObject::operator=((uint64_t)this + 24, v33);
      OS::CF::UntypedObject::operator=((uint64_t)this + 40, v31);
      __int16 v10 = (const void *)*((void *)this + 7);
      CFTypeRef v11 = v27;
      *((void *)this + 7) = v27;
      if (v11) {
        CFRetain(v11);
      }
      if (v10) {
        CFRelease(v10);
      }
      if (CFDictionaryContainsKey(Mutable, @"input stream busses"))
      {
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 257;
        CACFDictionary::GetCACFArray(&Mutable, @"input stream busses", (CACFArray *)&buf);
        unint64_t v12 = 0;
        unsigned int v13 = 0;
        long long v26 = 0u;
        while (1)
        {
          unsigned int data = buf.__r_.__value_.__l.__data_;
          if (buf.__r_.__value_.__r.__words[0]) {
            unsigned int data = CFArrayGetCount((CFArrayRef)buf.__r_.__value_.__l.__data_);
          }
          if (v13 >= data) {
            break;
          }
          unsigned int v49 = 0;
          if (CACFArray::GetUInt32((CFArrayRef *)&buf, v13, &v49))
          {
            uint64_t v15 = *((void *)&v26 + 1);
            if (*((void *)&v26 + 1) >= v12)
            {
              long long v17 = (void *)v26;
              uint64_t v18 = (uint64_t)(*((void *)&v26 + 1) - v26) >> 2;
              unint64_t v19 = v18 + 1;
              if ((unint64_t)(v18 + 1) >> 62) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v12 - v26) >> 1 > v19) {
                unint64_t v19 = (uint64_t)(v12 - v26) >> 1;
              }
              if (v12 - (unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v20 = v19;
              }
              if (v20) {
                unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v20);
              }
              else {
                uint64_t v21 = 0;
              }
              uint64_t v22 = (unsigned int *)(v20 + 4 * v18);
              unsigned int *v22 = v49;
              uint64_t v16 = (uint64_t)(v22 + 1);
              while (v15 != (void)v26)
              {
                unsigned int v23 = *(_DWORD *)(v15 - 4);
                v15 -= 4;
                *--uint64_t v22 = v23;
              }
              unint64_t v12 = v20 + 4 * v21;
              *(void *)&long long v26 = v22;
              if (v17) {
                operator delete(v17);
              }
            }
            else
            {
              **((_DWORD **)&v26 + 1) = v49;
              uint64_t v16 = *((void *)&v26 + 1) + 4;
            }
            *(void *)&long long v24 = v26;
            *((void *)&v24 + 1) = v16;
            long long v26 = v24;
          }
          ++v13;
        }
        CACFArray::~CACFArray((CACFArray *)&buf);
      }
      else
      {
        unint64_t v12 = 0;
        long long v26 = 0u;
      }
      uint64_t v25 = *v9;
      if (*v9)
      {
        *((void *)this + 10) = v25;
        operator delete(v25);
        *uint64_t v9 = 0;
        *((void *)this + 10) = 0;
        *((void *)this + 11) = 0;
      }
      *(_OWORD *)((char *)this + 72) = v26;
      *((void *)this + 11) = v12;
      *((_DWORD *)this + 16) = v38;
      *((_DWORD *)this + 24) = v37;
      OS::CF::UntypedObject::operator=((uint64_t)this + 104, v29);
      if (v27) {
        CFRelease(v27);
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v28);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v30);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v32);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v34);
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"HALS_IOStreamDSP.cpp";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 658;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  DSP graph is missing from DSP description", (uint8_t *)&buf, 0x12u);
      }
      *(_OWORD *)this = 0u;
      *((_OWORD *)this + 1) = 0u;
      *((void *)this + 3) = &unk_1F14898A0;
      *((void *)this + 4) = 0;
      *((void *)this + 6) = 0;
      *((void *)this + 7) = 0;
      *((void *)this + 5) = &unk_1F14898A0;
      *((_DWORD *)this + 16) = 0;
      *((void *)this + 10) = 0;
      *((void *)this + 11) = 0;
      *((void *)this + 9) = 0;
      *((_DWORD *)this + 24) = 0;
      *((void *)this + 13) = &unk_1F14898A0;
      *((void *)this + 14) = 0;
    }
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v35);
    CACFArray::~CACFArray((CACFArray *)&v39);
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v41);
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v43);
    CACFString::~CACFString((CACFString *)&cf);
    CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  }
  else
  {
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((void *)this + 3) = &unk_1F14898A0;
    *((void *)this + 4) = 0;
    *((void *)this + 6) = 0;
    *((void *)this + 7) = 0;
    *((void *)this + 5) = &unk_1F14898A0;
    *((_DWORD *)this + 16) = 0;
    *((void *)this + 10) = 0;
    *((void *)this + 11) = 0;
    *((void *)this + 9) = 0;
    *((_DWORD *)this + 24) = 0;
    *((void *)this + 13) = &unk_1F14898A0;
    *((void *)this + 14) = 0;
  }
}

void sub_1BAD1097C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void HALS_DSPSettings::~HALS_DSPSettings(HALS_DSPSettings *this)
{
  OS::CF::UntypedObject::~UntypedObject((HALS_DSPSettings *)((char *)this + 104));
  unint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 7);
  if (v3) {
    CFRelease(v3);
  }
  OS::CF::UntypedObject::~UntypedObject((HALS_DSPSettings *)((char *)this + 40));
  OS::CF::UntypedObject::~UntypedObject((HALS_DSPSettings *)((char *)this + 24));
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t VisitableVector<HALS_IOStackDescription>::apply<>(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v9 = *a3;
  uint64_t v10 = *((void *)a3 + 2);
  if (a1 == a2) {
    return 0;
  }
  uint64_t v4 = a1;
  uint64_t v5 = 0;
  char v6 = 1;
  do
  {
    if (v6) {
      uint64_t v5 = 0;
    }
    else {
      ++v5;
    }
    v11[0] = v4;
    v11[1] = v5;
    uint64_t result = ((uint64_t (*)(char *, void *))v9)((char *)&v9 + 8, v11);
    char v6 = 0;
    v4 += 32;
    if (result) {
      BOOL v8 = 1;
    }
    else {
      BOOL v8 = v4 == a2;
    }
  }
  while (!v8);
  return result;
}

uint64_t caulk::function_ref<int ()(VisitableVector<HALS_IOStackDescription>::ItemWithIndex &)>::functor_invoker<HALS_IOStreamGrid::apply_to_streams(std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>(uint64_t **a1, uint64_t *a2)
{
  v10[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  std::__function::__value_func<int ()(unsigned long,HALS_IOStreamInfo &)>::__value_func[abi:ne180100]((uint64_t)v7, **a1);
  std::__function::__value_func<int ()(unsigned long,HALS_IOStreamInfo &)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)v7);
  uint64_t v9 = v2;
  std::__function::__value_func<int ()(unsigned long,HALS_IOStreamInfo &)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)v8);
  *(void *)&long long v6 = caulk::function_ref<int ()(VisitableVector<HALS_IOStreamGroup>::ItemWithIndex &)>::functor_invoker<HALS_IOStreamGroupList::apply_to_streams(unsigned long,std::function<int ()(unsigned long,HALS_IOStreamInfo &)>)::$_0>;
  *((void *)&v6 + 1) = &v9;
  uint64_t v4 = VisitableVector<HALS_IOStreamGroup>::apply<>(*(void *)(v3 + 8), *(void *)(v3 + 16), &v6);
  std::__function::__value_func<int ()(unsigned long,HALS_IOStreamInfo &)>::~__value_func[abi:ne180100](v10);
  std::__function::__value_func<int ()(unsigned long,HALS_IOStreamInfo &)>::~__value_func[abi:ne180100](v8);
  std::__function::__value_func<int ()(unsigned long,HALS_IOStreamInfo &)>::~__value_func[abi:ne180100](v7);
  return v4;
}

void sub_1BAD10C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  long long v6 = v5;
  std::__function::__value_func<int ()(unsigned long,HALS_IOStreamInfo &)>::~__value_func[abi:ne180100](v6);
  std::__function::__value_func<int ()(unsigned long,HALS_IOStreamInfo &)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<int ()(unsigned long,HALS_IOStreamInfo &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ADS::Box::SetPropertyData(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9, unint64_t *a10, unsigned __int8 a11)
{
}

void ADS::Box::GetPropertyData(ADS::Box *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6, unsigned int a7, unsigned int *a8, char *a9)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  signed int mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1651536494)
  {
    if (mSelector > 1652060013)
    {
      if (mSelector != 1652060014)
      {
        if (mSelector != 1953653102)
        {
          if (mSelector != 1819173229) {
            goto LABEL_38;
          }
          if (a7 > 3)
          {
            CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF88];
            CFStringRef v14 = (const __CFString *)*((void *)this + 8);
LABEL_32:
            *(void *)a9 = CFStringCreateCopy(v13, v14);
            unsigned int v15 = 8;
            goto LABEL_33;
          }
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            int v20 = 136315394;
            uint64_t v21 = "ADS_Box.cpp";
            __int16 v22 = 1024;
            int v23 = 168;
            long long v17 = MEMORY[0x1E4F14500];
            uint64_t v18 = "%25s:%-5d  ADS::Box::GetPropertyData: not enough space for the return value of kAudioObjectPropertyName for the box";
LABEL_43:
            _os_log_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, v18, (uint8_t *)&v20, 0x12u);
          }
LABEL_44:
          exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
          *(void *)exceptiouint64_t n = off_1F148A5D8;
          exception[2] = 561211770;
        }
        if (a7 <= 3)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_44;
          }
          int v20 = 136315394;
          uint64_t v21 = "ADS_Box.cpp";
          __int16 v22 = 1024;
          int v23 = 184;
          long long v17 = MEMORY[0x1E4F14500];
          uint64_t v18 = "%25s:%-5d  ADS::Box::GetPropertyData: not enough space for the return value of a AudioBox Property for the box";
          goto LABEL_43;
        }
LABEL_22:
        *(_DWORD *)a9 = 0;
        goto LABEL_23;
      }
    }
    else if (mSelector != 1651536495)
    {
      if (mSelector != 1651861860)
      {
        if (mSelector == 1652060006)
        {
          *(_DWORD *)a9 = 2003329396;
LABEL_23:
          unsigned int v15 = 4;
LABEL_33:
          *a8 = v15;
          return;
        }
        goto LABEL_38;
      }
      if (a7 > 3)
      {
        CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF88];
        CFStringRef v14 = (const __CFString *)*((void *)this + 10);
        goto LABEL_32;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v20 = 136315394;
        uint64_t v21 = "ADS_Box.cpp";
        __int16 v22 = 1024;
        int v23 = 175;
        long long v17 = MEMORY[0x1E4F14500];
        uint64_t v18 = "%25s:%-5d  ADS::Box::GetPropertyData: not enough space for the return value of kAudioBoxPropertyBoxUID for the box";
        goto LABEL_43;
      }
      goto LABEL_44;
    }
LABEL_21:
    if (a7 <= 3)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_44;
      }
      int v20 = 136315394;
      uint64_t v21 = "ADS_Box.cpp";
      __int16 v22 = 1024;
      int v23 = 191;
      long long v17 = MEMORY[0x1E4F14500];
      uint64_t v18 = "%25s:%-5d  ADS::Box::GetPropertyData: not enough space for the return value of a AudioBox Property for the box";
      goto LABEL_43;
    }
    goto LABEL_22;
  }
  if (mSelector <= 1651007860)
  {
    if (mSelector == 1650682915 || mSelector == 1650751011)
    {
      *a8 = 0;
      return;
    }
    goto LABEL_38;
  }
  if (mSelector == 1651007861 || mSelector == 1651010921 || mSelector == 1651013225) {
    goto LABEL_21;
  }
LABEL_38:

  ADS::BaseObject::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t ADS::Box::GetPropertyDataSize(ADS::Box *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6)
{
  signed int mSelector = a4->mSelector;
  if ((int)a4->mSelector <= 1651536494)
  {
    if (mSelector <= 1651007860)
    {
      if (mSelector == 1650682915 || mSelector == 1650751011) {
        return 0;
      }
    }
    else if (mSelector == 1651007861 || mSelector == 1651010921 || mSelector == 1651013225)
    {
      return 4;
    }
    return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
  }
  uint64_t v7 = 8;
  if (mSelector <= 1652060013)
  {
    if (mSelector != 1651536495)
    {
      if (mSelector != 1651861860)
      {
        unsigned __int16 v8 = 28518;
        goto LABEL_18;
      }
      return v7;
    }
    return 4;
  }
  if (mSelector == 1953653102) {
    return 4;
  }
  if (mSelector == 1819173229) {
    return v7;
  }
  unsigned __int16 v8 = 28526;
LABEL_18:
  if (mSelector == (v8 | 0x62780000)) {
    return 4;
  }
  return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
}

uint64_t ADS::Box::IsPropertySettable(ADS::Box *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  signed int mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1651536494)
  {
    if (mSelector <= 1652060005)
    {
      BOOL v5 = mSelector == 1651536495;
      int v6 = 1651861860;
    }
    else
    {
      BOOL v5 = mSelector == 1652060006 || mSelector == 1652060014;
      int v6 = 1953653102;
    }
  }
  else if (mSelector <= 1651007860)
  {
    BOOL v5 = mSelector == 1650682915;
    int v6 = 1650751011;
  }
  else
  {
    BOOL v5 = mSelector == 1651007861 || mSelector == 1651010921;
    int v6 = 1651013225;
  }
  if (v5 || mSelector == v6) {
    return 0;
  }
  else {
    return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
  }
}

BOOL ADS::Box::HasProperty(ADS::Box *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  signed int mSelector = a4->mSelector;
  if ((int)a4->mSelector <= 1651536494)
  {
    if (mSelector <= 1651007860)
    {
      BOOL v5 = mSelector == 1650682915;
      int v6 = 1650751011;
    }
    else
    {
      BOOL v5 = mSelector == 1651007861 || mSelector == 1651010921;
      int v6 = 1651013225;
    }
  }
  else if (mSelector > 1652060013)
  {
    BOOL v5 = mSelector == 1652060014 || mSelector == 1819173229;
    int v6 = 1953653102;
  }
  else
  {
    BOOL v5 = mSelector == 1651536495 || mSelector == 1651861860;
    int v6 = 1652060006;
  }
  return v5 || mSelector == v6 || ADS::BaseObject::HasProperty(this, a2, a3, a4);
}

void ADS::Box::~Box(ADS::Box *this)
{
  *(void *)this = &unk_1F146CEC8;
  uint64_t v2 = (ADS::Box *)((char *)this + 56);
  OS::CF::UntypedObject::~UntypedObject((ADS::Box *)((char *)this + 72));
  OS::CF::UntypedObject::~UntypedObject(v2);
  ADS::BaseObject::~BaseObject(this);

  JUMPOUT(0x1C1859840);
}

{
  OS::CF::UntypedObject *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F146CEC8;
  uint64_t v2 = (ADS::Box *)((char *)this + 56);
  OS::CF::UntypedObject::~UntypedObject((ADS::Box *)((char *)this + 72));
  OS::CF::UntypedObject::~UntypedObject(v2);

  ADS::BaseObject::~BaseObject(this);
}

void AMCP::System_Context::System_Context(AMCP::Log::Scope_Registry *a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  AMCP::System_Context::System_Context(a1);
}

{
  AMCP::Log::Scope_Registry *v1;
  int isa;
  NSObject *v3;
  _opaque_pthread_t *v4;
  mach_port_t v5;
  NSObject *v6;
  os_log_type_t v7;
  NSObject *v8;
  _opaque_pthread_t *v9;
  mach_port_t v10;
  NSObject *v11;
  _opaque_pthread_t *v12;
  mach_port_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  dispatch_object_t object;
  std::__shared_weak_count *v17;
  unsigned char buf[18];
  __int16 v19;
  int v20;
  uint64_t v21;

  uint64_t v21 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&object, "com.apple.coreaudio", "AMCP");
  isa = (int)object[2].isa;
  switch(isa)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v11 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = pthread_self();
        CFAllocatorRef v13 = pthread_mach_thread_np(v12);
        *(_DWORD *)std::string buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v13;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "System_Context.cpp";
        unint64_t v19 = 1024;
        int v20 = 191;
        uint64_t v6 = v11;
        uint64_t v7 = OS_LOG_TYPE_INFO;
        goto LABEL_16;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unsigned __int16 v8 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v9 = pthread_self();
        uint64_t v10 = pthread_mach_thread_np(v9);
        *(_DWORD *)std::string buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v10;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "System_Context.cpp";
        unint64_t v19 = 1024;
        int v20 = 191;
        _os_log_debug_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d \n-=-=-=-=-=-=-=-=\nBegin creating System_Context\n-=-=-=-=-=-=-=-=", buf, 0x18u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v3 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = pthread_self();
        uint64_t v5 = pthread_mach_thread_np(v4);
        *(_DWORD *)std::string buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v5;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "System_Context.cpp";
        unint64_t v19 = 1024;
        int v20 = 191;
        uint64_t v6 = v3;
        uint64_t v7 = OS_LOG_TYPE_DEFAULT;
LABEL_16:
        _os_log_impl(&dword_1BAA78000, v6, v7, "%6u %32s:%-5d \n-=-=-=-=-=-=-=-=\nBegin creating System_Context\n-=-=-=-=-=-=-=-=", buf, 0x18u);
      }
      break;
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  kdebug_trace();
  CFStringRef v14 = (char *)operator new(0xA8uLL);
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0;
  *(void *)CFStringRef v14 = &unk_1F1462038;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *((void *)v14 + 13) = 850045863;
  *((_OWORD *)v14 + 7) = 0u;
  *((_OWORD *)v14 + 8) = 0u;
  *((_OWORD *)v14 + 9) = 0u;
  *((void *)v14 + 20) = 0;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v14 + 1, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v14 + 2, 1uLL, memory_order_relaxed);
  *((void *)v14 + 3) = v14 + 24;
  *((void *)v14 + 4) = v14;
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v14);
  _ZNSt3__115allocate_sharedB8ne180100IN4AMCP4Core6BrokerENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(buf);
  unsigned int v15 = (std::__shared_weak_count *)*((void *)v14 + 6);
  *(_OWORD *)(v14 + 40) = *(_OWORD *)buf;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  operator new();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  AMCP::System_Context::System_Context(a1);
}

{
  CFStringRef v2;
  CFStringRef v3;
  void *v4;
  std::runtime_error *exception;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  CFStringRef v12;
  uint64_t v13;

  CFAllocatorRef v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = CFStringCreateWithBytes(0, (const UInt8 *)"*", 1, 0x8000100u, 0);
  uint64_t v12 = v2;
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v9 = operator new(8uLL);
    uint64_t v10 = v9;
    uint64_t v4 = v9 + 1;
    uint64_t v11 = v9 + 1;
    std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(v9, v3);
    uint64_t v10 = v4;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unsigned __int16 v8 = 0;
    AMCP::System_Context::System_Context(a1);
  }
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Could not construct");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

{
  CFStringRef v2;
  CFStringRef v3;
  void *v4;
  std::runtime_error *exception;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  CFStringRef v12;
  uint64_t v13;

  CFAllocatorRef v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = CFStringCreateWithBytes(0, (const UInt8 *)"*", 1, 0x8000100u, 0);
  uint64_t v12 = v2;
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v9 = operator new(8uLL);
    uint64_t v10 = v9;
    uint64_t v4 = v9 + 1;
    uint64_t v11 = v9 + 1;
    std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(v9, v3);
    uint64_t v10 = v4;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unsigned __int16 v8 = 0;
    AMCP::System_Context::System_Context(a1);
  }
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Could not construct");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

{
  CFStringRef v2;
  CFStringRef v3;
  void *v4;
  std::runtime_error *exception;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  CFStringRef v12;
  uint64_t v13;

  CFAllocatorRef v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Null-Driver", 27, 0x8000100u, 0);
  uint64_t v12 = v2;
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v9 = operator new(8uLL);
    uint64_t v10 = v9;
    uint64_t v4 = v9 + 1;
    uint64_t v11 = v9 + 1;
    std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(v9, v3);
    uint64_t v10 = v4;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unsigned __int16 v8 = 0;
    AMCP::System_Context::System_Context(a1);
  }
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Could not construct");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

{
  CFStringRef v2;
  CFStringRef v3;
  void *v4;
  std::runtime_error *exception;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  CFStringRef v12;
  uint64_t v13;

  CFAllocatorRef v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Null-Driver", 27, 0x8000100u, 0);
  uint64_t v12 = v2;
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v9 = operator new(8uLL);
    uint64_t v10 = v9;
    uint64_t v4 = v9 + 1;
    uint64_t v11 = v9 + 1;
    std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(v9, v3);
    uint64_t v10 = v4;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unsigned __int16 v8 = 0;
    AMCP::System_Context::System_Context(a1);
  }
  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Could not construct");
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

{
  char *v2;
  uint64_t v3;
  std::runtime_error *v4;
  std::runtime_error *exception;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  CFStringRef v12;
  uint64_t v14;

  CFStringRef v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Null-Driver", 27, 0x8000100u, 0);
  if (v12)
  {
    if (CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Meta-Driver", 27, 0x8000100u, 0))
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v6 = &v9;
      LOBYTE(v7) = 0;
      uint64_t v2 = (char *)operator new(0x10uLL);
      uint64_t v3 = 0;
      uint64_t v9 = v2;
      uint64_t v10 = v2;
      uint64_t v11 = v2 + 16;
      do
      {
        std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(&v2[v3], *(CFStringRef *)((char *)&v12 + v3));
        v3 += 8;
      }
      while (v3 != 16);
      uint64_t v10 = v2 + 16;
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      unsigned __int16 v8 = 0;
      AMCP::System_Context::System_Context(a1);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v4 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v4, "Could not construct");
  __cxa_throw(v4, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

{
  char *v2;
  uint64_t v3;
  std::runtime_error *v4;
  std::runtime_error *exception;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  CFStringRef v12;
  uint64_t v14;

  CFStringRef v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Null-Driver", 27, 0x8000100u, 0);
  if (v12)
  {
    if (CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Meta-Driver", 27, 0x8000100u, 0))
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v6 = &v9;
      LOBYTE(v7) = 0;
      uint64_t v2 = (char *)operator new(0x10uLL);
      uint64_t v3 = 0;
      uint64_t v9 = v2;
      uint64_t v10 = v2;
      uint64_t v11 = v2 + 16;
      do
      {
        std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(&v2[v3], *(CFStringRef *)((char *)&v12 + v3));
        v3 += 8;
      }
      while (v3 != 16);
      uint64_t v10 = v2 + 16;
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      unsigned __int16 v8 = 0;
      AMCP::System_Context::System_Context(a1);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v4 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v4, "Could not construct");
  __cxa_throw(v4, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  std::runtime_error *v6;
  std::runtime_error *v7;
  std::runtime_error *v8;
  std::runtime_error *v9;
  std::runtime_error *v10;
  std::runtime_error *v11;
  std::runtime_error *v12;
  std::runtime_error *v13;
  std::runtime_error *exception;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char **v21;
  char v22;
  CFStringRef v23;
  CFStringRef v24;
  CFStringRef v29;
  uint64_t v32;

  uint64_t v32 = *MEMORY[0x1E4F143B8];
  CFTypeRef v29 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.iokit.IOAudio1", 24, 0x8000100u, 0);
  if (v29)
  {
    if (CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Null-Driver", 27, 0x8000100u, 0))
    {
      if (CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Meta-Driver", 27, 0x8000100u, 0))
      {
        uint64_t v18 = 0;
        unint64_t v19 = 0;
        int v20 = 0;
        int v23 = (CFStringRef)&v18;
        LOBYTE(v24) = 0;
        uint64_t v2 = (char *)operator new(0x18uLL);
        uint64_t v3 = 0;
        uint64_t v18 = v2;
        unint64_t v19 = v2;
        int v20 = v2 + 24;
        do
        {
          std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(&v2[v3], *(CFStringRef *)((char *)&v29 + v3));
          v3 += 8;
        }
        while (v3 != 24);
        unint64_t v19 = v2 + 24;
        int v23 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.BluetoothAudioPlugIn", 36, 0x8000100u, 0);
        if (v23)
        {
          uint64_t v24 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Halogen", 23, 0x8000100u, 0);
          if (v24)
          {
            if (CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.AppleTimeSyncAudioClock", 39, 0x8000100u, 0))
            {
              if (CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.iSightAudio", 21, 0x8000100u, 0))
              {
                if (CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.AppleAVBAudio", 29, 0x8000100u, 0))
                {
                  if (CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.BridgeAudioSP", 29, 0x8000100u, 0))
                  {
                    unsigned int v15 = 0;
                    uint64_t v16 = 0;
                    long long v17 = 0;
                    uint64_t v21 = &v15;
                    __int16 v22 = 0;
                    uint64_t v4 = (char *)operator new(0x30uLL);
                    uint64_t v5 = 0;
                    unsigned int v15 = v4;
                    uint64_t v16 = v4;
                    long long v17 = v4 + 48;
                    do
                    {
                      std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(&v4[v5], *(CFStringRef *)((char *)&v23 + v5));
                      v5 += 8;
                    }
                    while (v5 != 48);
                    uint64_t v16 = v4 + 48;
                    AMCP::System_Context::System_Context(a1);
                  }
                  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(exception, "Could not construct");
                  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                CFAllocatorRef v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v13, "Could not construct");
                __cxa_throw(v13, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              uint64_t v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v12, "Could not construct");
              __cxa_throw(v12, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            uint64_t v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v11, "Could not construct");
            __cxa_throw(v11, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          uint64_t v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v10, "Could not construct");
          __cxa_throw(v10, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        uint64_t v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v9, "Could not construct");
        __cxa_throw(v9, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      unsigned __int16 v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v8, "Could not construct");
      __cxa_throw(v8, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v7, "Could not construct");
    __cxa_throw(v7, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v6 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v6, "Could not construct");
  __cxa_throw(v6, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  std::runtime_error *v6;
  std::runtime_error *v7;
  std::runtime_error *v8;
  std::runtime_error *v9;
  std::runtime_error *v10;
  std::runtime_error *v11;
  std::runtime_error *v12;
  std::runtime_error *v13;
  std::runtime_error *exception;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char **v21;
  char v22;
  CFStringRef v23;
  CFStringRef v24;
  CFStringRef v29;
  uint64_t v32;

  uint64_t v32 = *MEMORY[0x1E4F143B8];
  CFTypeRef v29 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.iokit.IOAudio1", 24, 0x8000100u, 0);
  if (v29)
  {
    if (CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Null-Driver", 27, 0x8000100u, 0))
    {
      if (CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Meta-Driver", 27, 0x8000100u, 0))
      {
        uint64_t v18 = 0;
        unint64_t v19 = 0;
        int v20 = 0;
        int v23 = (CFStringRef)&v18;
        LOBYTE(v24) = 0;
        uint64_t v2 = (char *)operator new(0x18uLL);
        uint64_t v3 = 0;
        uint64_t v18 = v2;
        unint64_t v19 = v2;
        int v20 = v2 + 24;
        do
        {
          std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(&v2[v3], *(CFStringRef *)((char *)&v29 + v3));
          v3 += 8;
        }
        while (v3 != 24);
        unint64_t v19 = v2 + 24;
        int v23 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.BluetoothAudioPlugIn", 36, 0x8000100u, 0);
        if (v23)
        {
          uint64_t v24 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Halogen", 23, 0x8000100u, 0);
          if (v24)
          {
            if (CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.AppleTimeSyncAudioClock", 39, 0x8000100u, 0))
            {
              if (CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.iSightAudio", 21, 0x8000100u, 0))
              {
                if (CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.AppleAVBAudio", 29, 0x8000100u, 0))
                {
                  if (CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.BridgeAudioSP", 29, 0x8000100u, 0))
                  {
                    unsigned int v15 = 0;
                    uint64_t v16 = 0;
                    long long v17 = 0;
                    uint64_t v21 = &v15;
                    __int16 v22 = 0;
                    uint64_t v4 = (char *)operator new(0x30uLL);
                    uint64_t v5 = 0;
                    unsigned int v15 = v4;
                    uint64_t v16 = v4;
                    long long v17 = v4 + 48;
                    do
                    {
                      std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(&v4[v5], *(CFStringRef *)((char *)&v23 + v5));
                      v5 += 8;
                    }
                    while (v5 != 48);
                    uint64_t v16 = v4 + 48;
                    AMCP::System_Context::System_Context(a1);
                  }
                  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(exception, "Could not construct");
                  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                CFAllocatorRef v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v13, "Could not construct");
                __cxa_throw(v13, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              uint64_t v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v12, "Could not construct");
              __cxa_throw(v12, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            uint64_t v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v11, "Could not construct");
            __cxa_throw(v11, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          uint64_t v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v10, "Could not construct");
          __cxa_throw(v10, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        uint64_t v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v9, "Could not construct");
        __cxa_throw(v9, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      unsigned __int16 v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v8, "Could not construct");
      __cxa_throw(v8, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v7, "Could not construct");
    __cxa_throw(v7, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v6 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v6, "Could not construct");
  __cxa_throw(v6, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

{
  char *v2;
  uint64_t v3;
  std::runtime_error *v4;
  std::runtime_error *v5;
  std::runtime_error *exception;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char **v13;
  char v14;
  CFStringRef v15;
  uint64_t v18;

  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unsigned int v15 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.iokit.IOAudio1", 24, 0x8000100u, 0);
  if (v15)
  {
    if (CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.iokit.IOAudio2", 24, 0x8000100u, 0))
    {
      if (CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Null-Driver", 27, 0x8000100u, 0))
      {
        uint64_t v7 = 0;
        unsigned __int16 v8 = 0;
        uint64_t v9 = 0;
        CFAllocatorRef v13 = &v7;
        CFStringRef v14 = 0;
        uint64_t v2 = (char *)operator new(0x18uLL);
        uint64_t v3 = 0;
        uint64_t v7 = v2;
        unsigned __int16 v8 = v2;
        uint64_t v9 = v2 + 24;
        do
        {
          std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(&v2[v3], *(CFStringRef *)((char *)&v15 + v3));
          v3 += 8;
        }
        while (v3 != 24);
        unsigned __int16 v8 = v2 + 24;
        AMCP::System_Context::System_Context(a1);
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v5 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v5, "Could not construct");
    __cxa_throw(v5, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v4 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v4, "Could not construct");
  __cxa_throw(v4, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

{
  char *v2;
  uint64_t v3;
  std::runtime_error *v4;
  std::runtime_error *v5;
  std::runtime_error *exception;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char **v13;
  char v14;
  CFStringRef v15;
  uint64_t v18;

  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unsigned int v15 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.iokit.IOAudio1", 24, 0x8000100u, 0);
  if (v15)
  {
    if (CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.iokit.IOAudio2", 24, 0x8000100u, 0))
    {
      if (CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Null-Driver", 27, 0x8000100u, 0))
      {
        uint64_t v7 = 0;
        unsigned __int16 v8 = 0;
        uint64_t v9 = 0;
        CFAllocatorRef v13 = &v7;
        CFStringRef v14 = 0;
        uint64_t v2 = (char *)operator new(0x18uLL);
        uint64_t v3 = 0;
        uint64_t v7 = v2;
        unsigned __int16 v8 = v2;
        uint64_t v9 = v2 + 24;
        do
        {
          std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(&v2[v3], *(CFStringRef *)((char *)&v15 + v3));
          v3 += 8;
        }
        while (v3 != 24);
        unsigned __int16 v8 = v2 + 24;
        AMCP::System_Context::System_Context(a1);
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v5 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v5, "Could not construct");
    __cxa_throw(v5, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v4 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v4, "Could not construct");
  __cxa_throw(v4, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1BAD1143C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v3 - 40) = v2;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1BAD122E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  pthread_attr_destroy((pthread_attr_t *)(v29 - 168));
  v24[111].__shared_owners_ = a9;
  unint64_t shared_weak_owners = (std::__shared_weak_count *)v24[129].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  AMCP::IO_Core::Graph_Manager::~Graph_Manager(v25);
  AMCP::Observer::Map<std::function<void ()>,unsigned int,true,std::less<unsigned int>>::~Map(a10);
  AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::~Map(a12);
  AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::~Map(a13);
  AMCP::Observer::Map<std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,unsigned int,true,std::less<unsigned int>>::~Map(a14);
  AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::~Map(a15);
  AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,unsigned int,true,std::less<unsigned int>>::~Map(a16);
  AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,unsigned int,true,std::less<unsigned int>>::~Map(a11);
  a23 = (void **)(v26 + 1072);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a23);
  std::condition_variable::~condition_variable((std::condition_variable *)(v26 + 1024));
  std::mutex::~mutex((std::mutex *)(v26 + 960));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v27);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v28);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v26);
  uint64_t v32 = (std::__shared_weak_count *)v24[2].__vftable;
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  shared_owners = (std::__shared_weak_count *)v24[1].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(v24);
  operator delete(v34);
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  CFTypeRef v35 = *(std::__shared_weak_count **)(a20 + 8);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AMCP::System_Context::System_Context_State>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<AMCP::System_Context::System_Context_State>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146CF58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::System_Context::System_Context_State>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146CF58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1BAD125F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v3 - 40) = v2;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1BAD12754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

void sub_1BAD128E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

void sub_1BAD12A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

void sub_1BAD12BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

void sub_1BAD12E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  applesauce::CF::StringRef::~StringRef(&a16);
  _Unwind_Resume(a1);
}

void sub_1BAD130A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  applesauce::CF::StringRef::~StringRef(&a16);
  _Unwind_Resume(a1);
}

void sub_1BAD13680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *a17, CFTypeRef a18, CFTypeRef a19, CFTypeRef a20,CFTypeRef a21,CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  do
    applesauce::CF::StringRef::~StringRef(--v22);
  while (v22 != (const void **)&a17);
  a17 = &a12;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  for (uint64_t i = 16; i != -8; i -= 8)
    applesauce::CF::StringRef::~StringRef((const void **)(v23 - 64 + i));
  _Unwind_Resume(a1);
}

void sub_1BAD13DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *a17, CFTypeRef a18, CFTypeRef a19, CFTypeRef a20,CFTypeRef a21,CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  do
    applesauce::CF::StringRef::~StringRef(--v22);
  while (v22 != (const void **)&a17);
  a17 = &a12;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  for (uint64_t i = 16; i != -8; i -= 8)
    applesauce::CF::StringRef::~StringRef((const void **)(v23 - 64 + i));
  _Unwind_Resume(a1);
}

void sub_1BAD1426C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef a17, CFTypeRef a18, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  do
    applesauce::CF::StringRef::~StringRef(--v19);
  while (v19 != &a17);
  a9 = &a12;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void sub_1BAD145B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, CFTypeRef a17, CFTypeRef a18, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  do
    applesauce::CF::StringRef::~StringRef(--v19);
  while (v19 != &a17);
  a9 = &a12;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void AMCP::System_Context::~System_Context(uint64_t **this)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (AMCP::Log::Scope_Registry *)this[1];
  if (v2)
  {
    if (!*((void *)v2 + 1))
    {
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v40, "com.apple.coreaudio", "AMCP");
      int v4 = *((_DWORD *)v40 + 4);
      switch(v4)
      {
        case 3:
          AMCP::Log::Scope_Registry::get(v3);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          uint64_t v10 = **(NSObject ***)buf;
          if (*(void *)v51) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v51);
          }
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            uint64_t v11 = pthread_self();
            mach_port_t v12 = pthread_mach_thread_np(v11);
            *(_DWORD *)std::string buf = 67109634;
            *(_DWORD *)&uint8_t buf[4] = v12;
            *(_WORD *)uint64_t v51 = 2080;
            *(void *)&v51[2] = "System_Context.cpp";
            __int16 v52 = 1024;
            int v53 = 212;
            unsigned __int16 v8 = v10;
            os_log_type_t v9 = OS_LOG_TYPE_INFO;
            goto LABEL_14;
          }
          break;
        case 2:
          AMCP::Log::Scope_Registry::get(v3);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          CFAllocatorRef v13 = **(NSObject ***)buf;
          if (*(void *)v51) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v51);
          }
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            __int16 v36 = pthread_self();
            mach_port_t v37 = pthread_mach_thread_np(v36);
            *(_DWORD *)std::string buf = 67109634;
            *(_DWORD *)&uint8_t buf[4] = v37;
            *(_WORD *)uint64_t v51 = 2080;
            *(void *)&v51[2] = "System_Context.cpp";
            __int16 v52 = 1024;
            int v53 = 212;
            _os_log_debug_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d \n-=-=-=-=-=-=-=-=\nBegin destroying System_Context\n-=-=-=-=-=-=-=-=", buf, 0x18u);
          }
          break;
        case 1:
          AMCP::Log::Scope_Registry::get(v3);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          uint64_t v5 = **(NSObject ***)buf;
          if (*(void *)v51) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v51);
          }
          if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v6 = pthread_self();
            mach_port_t v7 = pthread_mach_thread_np(v6);
            *(_DWORD *)std::string buf = 67109634;
            *(_DWORD *)&uint8_t buf[4] = v7;
            *(_WORD *)uint64_t v51 = 2080;
            *(void *)&v51[2] = "System_Context.cpp";
            __int16 v52 = 1024;
            int v53 = 212;
            unsigned __int16 v8 = v5;
            os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
LABEL_14:
            _os_log_impl(&dword_1BAA78000, v8, v9, "%6u %32s:%-5d \n-=-=-=-=-=-=-=-=\nBegin destroying System_Context\n-=-=-=-=-=-=-=-=", buf, 0x18u);
          }
          break;
      }
      if (v41) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v41);
      }
      uint64_t v14 = **this;
      std::mutex::lock((std::mutex *)(v14 + 80));
      AMCP::Log::Scope_Registry::get(v15);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v40, "com.apple.coreaudio", "AMCP");
      int v17 = *((_DWORD *)v40 + 4);
      switch(v17)
      {
        case 3:
          AMCP::Log::Scope_Registry::get(v16);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          uint64_t v23 = **(NSObject ***)buf;
          if (*(void *)v51) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v51);
          }
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            uint64_t v24 = pthread_self();
            mach_port_t v25 = pthread_mach_thread_np(v24);
            *(_DWORD *)std::string buf = 67109634;
            *(_DWORD *)&uint8_t buf[4] = v25;
            *(_WORD *)uint64_t v51 = 2080;
            *(void *)&v51[2] = "System_Core.cpp";
            __int16 v52 = 1024;
            int v53 = 94;
            uint64_t v21 = v23;
            os_log_type_t v22 = OS_LOG_TYPE_INFO;
            goto LABEL_32;
          }
          break;
        case 2:
          AMCP::Log::Scope_Registry::get(v16);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          uint64_t v26 = **(NSObject ***)buf;
          if (*(void *)v51) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v51);
          }
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
          {
            unsigned int v38 = pthread_self();
            mach_port_t v39 = pthread_mach_thread_np(v38);
            *(_DWORD *)std::string buf = 67109634;
            *(_DWORD *)&uint8_t buf[4] = v39;
            *(_WORD *)uint64_t v51 = 2080;
            *(void *)&v51[2] = "System_Core.cpp";
            __int16 v52 = 1024;
            int v53 = 94;
            _os_log_debug_impl(&dword_1BAA78000, v26, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Stopping System_Core", buf, 0x18u);
          }
          break;
        case 1:
          AMCP::Log::Scope_Registry::get(v16);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          uint64_t v18 = **(NSObject ***)buf;
          if (*(void *)v51) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v51);
          }
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v19 = pthread_self();
            mach_port_t v20 = pthread_mach_thread_np(v19);
            *(_DWORD *)std::string buf = 67109634;
            *(_DWORD *)&uint8_t buf[4] = v20;
            *(_WORD *)uint64_t v51 = 2080;
            *(void *)&v51[2] = "System_Core.cpp";
            __int16 v52 = 1024;
            int v53 = 94;
            uint64_t v21 = v18;
            os_log_type_t v22 = OS_LOG_TYPE_DEFAULT;
LABEL_32:
            _os_log_impl(&dword_1BAA78000, v21, v22, "%6u %32s:%-5d Stopping System_Core", buf, 0x18u);
          }
          break;
      }
      if (v41) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v41);
      }
      uint64_t v27 = *(void *)(v14 + 32);
      AMCP::Graph::Graph::get_nodes((uint64_t *)buf, *(void **)(v27 + 2848));
      std::string v28 = *(NSObject ***)buf;
      uint64_t v29 = *(NSObject ***)v51;
      if (*(void *)buf != *(void *)v51)
      {
        uint64_t v30 = v27 + 2648;
        do
        {
          (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v30 + 16))(&v44, v30);
          CFTypeRef v31 = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(void *)v44 + 16))(v44);
          Class isa = (*v28)[22].isa;
          if (isa) {
            unsigned int v33 = *((_DWORD *)isa + 2);
          }
          else {
            unsigned int v33 = 0;
          }
          AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v40, v31, v33);
          if (v45) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v45);
          }
          uint64_t v44 = 0x676C6F6270617573;
          LODWORD(v45) = 0;
          AMCP::Core::Core::call_operation_function<void,AMCP::Pause_Behavior>(v40, (unsigned int *)&v44, 1);
          if (v41) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v41);
          }
          v28 += 2;
        }
        while (v28 != v29);
      }
      __int16 v40 = (AMCP::Address *)buf;
      std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
      AMCP::Core::Conductor::flush_work_queues(*(dispatch_object_t **)(v14 + 32));
      uint64_t v34 = *(void *)(v14 + 32);
      v49[0] = &unk_1F1462178;
      v49[1] = v14;
      v49[3] = v49;
      __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v34 + 992);
      __lk.__owns_ = 1;
      std::mutex::lock((std::mutex *)(v34 + 992));
      CFTypeRef v35 = (std::__shared_weak_count *)operator new(0x20uLL);
      v35->__shared_owners_ = 0;
      v35->__shared_weak_owners_ = 0;
      LOBYTE(v35[1].__vftable) = 0;
      v35->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1488C30;
      uint64_t v44 = (uint64_t)&v35[1];
      uint64_t v45 = v35;
      int v46 = 0;
      int v47 = 0;
      AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)buf, *(dispatch_object_t *)(v34 + 32));
      AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)&v40, &v44);
      __int16 v42 = v49;
      uint64_t v43 = v34;
      operator new();
    }
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v2);
  }
}

void sub_1BAD15028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMCP::System_Context::System_Context_State::~System_Context_State(AMCP::System_Context::System_Context_State *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;

  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void AMCP::Utility::Kernel_Error_Category::message(__int16 a1@<W1>, std::string *a2@<X8>)
{
  std::to_string(&v5, a1 & 0x3FFF);
  int v4 = std::string::insert(&v5, 0, "kernel error code: ", 0x13uLL);
  *a2 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_1BAD1514C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *AMCP::Utility::Kernel_Error_Category::name(AMCP::Utility::Kernel_Error_Category *this)
{
  return "kernel";
}

void AMCP::Utility::Kernel_Error_Category::~Kernel_Error_Category(std::error_category *this)
{
  std::error_category::~error_category(this);

  JUMPOUT(0x1C1859840);
}

void AMCP::Utility::Kernel_Error_Category::get(AMCP::Utility::Kernel_Error_Category *this)
{
  {
    AMCP::Utility::Kernel_Error_Category::get(void)::s_category = (uint64_t)&unk_1F146CFA8;
  }
}

uint64_t HALB_MachPort::CreatePort(HALB_MachPort *this)
{
  kern_return_t v3;
  kern_return_t attributes;
  kern_return_t v5;
  kern_return_t v6;
  kern_return_t inserted;
  kern_return_t v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  const char *v13;
  _DWORD *exception;
  mach_msg_type_number_t port_info_outCnt;
  integer_t port_info_out;
  mach_port_name_t name;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  kern_return_t v23;
  uint64_t v24;

  integer_t v1 = (int)this;
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  name = 0;
  uint64_t v2 = (ipc_space_read_t *)MEMORY[0x1E4F14960];
  uint64_t v3 = mach_port_allocate(*MEMORY[0x1E4F14960], 1u, &name);
  if (v3)
  {
    os_log_type_t v9 = v3;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315650;
      unint64_t v19 = "HALB_MachPort.cpp";
      mach_port_t v20 = 1024;
      uint64_t v21 = 56;
      os_log_type_t v22 = 1024;
      uint64_t v23 = v9;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_MachPort::CreatePort: failed to allocate the port, Error: 0x%X", buf, 0x18u);
    }
LABEL_22:
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v9;
  }
  if (!v1) {
    goto LABEL_5;
  }
  port_info_outCnt = 1;
  attributes = mach_port_get_attributes(*v2, name, 1, &port_info_out, &port_info_outCnt);
  if (attributes)
  {
    os_log_type_t v9 = attributes;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315394;
      unint64_t v19 = "HALB_MachPort.cpp";
      mach_port_t v20 = 1024;
      uint64_t v21 = 65;
      mach_port_t v12 = MEMORY[0x1E4F14500];
      CFAllocatorRef v13 = "%25s:%-5d  HALB_MachPort::CreatePort: failed to get the port limts";
LABEL_20:
      _os_log_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_DEFAULT, v13, buf, 0x12u);
    }
LABEL_21:
    mach_port_mod_refs(*v2, name, 1u, -1);
    goto LABEL_22;
  }
  port_info_out = v1;
  std::string v5 = MEMORY[0x1C1859F60](*v2, name, 1, &port_info_out, 1);
  if (v5)
  {
    os_log_type_t v9 = v5;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315394;
      unint64_t v19 = "HALB_MachPort.cpp";
      mach_port_t v20 = 1024;
      uint64_t v21 = 74;
      mach_port_t v12 = MEMORY[0x1E4F14500];
      CFAllocatorRef v13 = "%25s:%-5d  HALB_MachPort::CreatePort: failed to set the port limts";
      goto LABEL_20;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v6 = MEMORY[0x1C1859F60](*v2, name, 6, 0, 0);
  if (v6)
  {
    os_log_type_t v9 = v6;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315394;
      unint64_t v19 = "HALB_MachPort.cpp";
      mach_port_t v20 = 1024;
      uint64_t v21 = 85;
      uint64_t v10 = MEMORY[0x1E4F14500];
      uint64_t v11 = "%25s:%-5d  HALB_MachPort::CreatePort: failed to set attribute MACH_PORT_DENAP_RECEIVER";
LABEL_14:
      _os_log_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_DEFAULT, v11, buf, 0x12u);
    }
LABEL_15:
    mach_port_deallocate(*v2, name);
    goto LABEL_22;
  }
  inserted = mach_port_insert_right(*v2, name, name, 0x14u);
  if (inserted)
  {
    os_log_type_t v9 = inserted;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315394;
      unint64_t v19 = "HALB_MachPort.cpp";
      mach_port_t v20 = 1024;
      uint64_t v21 = 93;
      uint64_t v10 = MEMORY[0x1E4F14500];
      uint64_t v11 = "%25s:%-5d  HALB_MachPort::CreatePort: failed to create the send right";
      goto LABEL_14;
    }
    goto LABEL_15;
  }
  return name;
}

void HALB_MachPort::DestroyPort(mach_port_name_t name, int a2, int a3)
{
  kern_return_t v7;
  kern_return_t v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  kern_return_t v14;
  uint64_t v15;

  unsigned int v15 = *MEMORY[0x1E4F143B8];
  if (name)
  {
    if ((a2 & 1) == 0 && (a3 & 1) == 0 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v9 = 136315394;
      uint64_t v10 = "HALB_MachPort.cpp";
      uint64_t v11 = 1024;
      mach_port_t v12 = 182;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_MachPort::DestroyPort: not going to destroy anything this way", (uint8_t *)&v9, 0x12u);
    }
    uint64_t v6 = (ipc_space_t *)MEMORY[0x1E4F14960];
    if (a2)
    {
      mach_port_t v7 = mach_port_deallocate(*MEMORY[0x1E4F14960], name);
      if (v7)
      {
        unsigned __int16 v8 = v7;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          os_log_type_t v9 = 136315650;
          uint64_t v10 = "HALB_MachPort.cpp";
          uint64_t v11 = 1024;
          mach_port_t v12 = 191;
          CFAllocatorRef v13 = 1024;
          uint64_t v14 = v8;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_MachPort::DestroyPort: deallocating the port failed, Error: 0x%X", (uint8_t *)&v9, 0x18u);
        }
      }
    }
    if (a3) {
      mach_port_mod_refs(*v6, name, 1u, -1);
    }
  }
}

void non-virtual thunk to'HALS_PlugInControl::HandlePlugIn_PropertiesChanged(HALS_PlugInControl *this, unsigned int a2, const AudioObjectPropertyAddress *a3)
{
}

void non-virtual thunk to'HALS_PlugInControl::~HALS_PlugInControl(HALS_PlugInControl *this)
{
}

{
  HALS_Control *v1;
  uint64_t vars8;

  integer_t v1 = (HALS_PlugInControl *)((char *)this - 72);
  HALS_PlugInObject::~HALS_PlugInObject(this);

  HALS_Control::~HALS_Control(v1);
}

void HALS_PlugInControl::~HALS_PlugInControl(HALS_PlugInControl *this)
{
  HALS_PlugInObject::~HALS_PlugInObject((HALS_PlugInControl *)((char *)this + 72));
  HALS_Control::~HALS_Control(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t vars8;

  HALS_PlugInObject::~HALS_PlugInObject((HALS_PlugInControl *)((char *)this + 72));

  HALS_Control::~HALS_Control(this);
}

void HALS_PlugInControl::HandlePlugIn_PropertiesChanged(HALS_PlugInControl *this, unsigned int a2, const AudioObjectPropertyAddress *a3)
{
}

BOOL HALS_PlugInControl::GetHardwareReferenceStreamControlValue(uint64_t a1, uint64_t a2)
{
  if (a2) {
    uint64_t v3 = *(unsigned int *)(a2 + 232);
  }
  else {
    uint64_t v3 = 0;
  }
  int v11 = 0;
  uint64_t v10 = *(void *)"lvcbbolg";
  int v8 = 0;
  int v9 = 4;
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(v4 + 400);
  uint64_t v6 = *(std::__shared_weak_count **)(v4 + 408);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t *, void, void, uint64_t, int *, int *))(*(void *)v5 + 576))(v5, *(unsigned int *)(a1 + 92), v3, &v10, 0, 0, 4, &v9, &v8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v8 != 0;
}

void sub_1BAD15888(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_PlugInControl::SetHardwareReferenceStreamControlValue(uint64_t a1, uint64_t a2, int a3)
{
  int v10 = 0;
  uint64_t v9 = *(void *)"lvcbbolg";
  int v8 = a3;
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(v4 + 400);
  uint64_t v6 = *(std::__shared_weak_count **)(v4 + 408);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a2) {
    uint64_t v7 = *(unsigned int *)(a2 + 232);
  }
  else {
    uint64_t v7 = 0;
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t *, void, void, uint64_t, int *))(*(void *)v5 + 584))(v5, *(unsigned int *)(a1 + 92), v7, &v9, 0, 0, 4, &v8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1BAD1595C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_PlugInControl::SetPropertyData(HALS_PlugInControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, float *a5, uint64_t a6, uint64_t a7, HALS_Client *a8)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  int v64 = (HALS_Device *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 14));
  if (!v64)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      mach_port_t v74 = "HALS_PlugInControl.cpp";
      __int16 v75 = 1024;
      int v76 = 314;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInControl::SetPropertyData: owning device is missing", buf, 0x12u);
    }
    int v55 = 560947818;
LABEL_99:
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = v55;
  }
  signed int mSelector = (HALB_Info *)a3->mSelector;
  if (!HALB_Info::PropertyRequiresHogMode(mSelector, v16)) {
    goto LABEL_5;
  }
  if (!HALS_Device::IsHogModeOwnerOrFree(v64, a8))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      mach_port_t v74 = "HALS_PlugInControl.cpp";
      __int16 v75 = 1024;
      int v76 = 315;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInControl::_SetPropertyData: the given process does not own hog mode", buf, 0x12u);
    }
    int v55 = 560492391;
    goto LABEL_99;
  }
  signed int mSelector = (HALB_Info *)a3->mSelector;
LABEL_5:
  if ((int)mSelector > 1818457189)
  {
    if ((int)mSelector > 1935962741)
    {
      if (mSelector == 1936745334)
      {
        uint64_t v52 = *((void *)this + 10);
        uint64_t v19 = *(void *)(v52 + 400);
        mach_port_t v20 = *(std::__shared_weak_count **)(v52 + 408);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v21 = *((unsigned int *)this + 23);
        if (a8) {
          uint64_t v22 = *((unsigned int *)a8 + 58);
        }
        else {
          uint64_t v22 = 0;
        }
        goto LABEL_90;
      }
      if (mSelector == 1935962742)
      {
        uint64_t v37 = *((void *)this + 10);
        uint64_t v19 = *(void *)(v37 + 400);
        mach_port_t v20 = *(std::__shared_weak_count **)(v37 + 408);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v21 = *((unsigned int *)this + 23);
        if (a8) {
          uint64_t v22 = *((unsigned int *)a8 + 58);
        }
        else {
          uint64_t v22 = 0;
        }
        goto LABEL_90;
      }
    }
    else
    {
      if (mSelector == 1818457190)
      {
        uint64_t v39 = *((void *)this + 10);
        uint64_t v19 = *(void *)(v39 + 400);
        mach_port_t v20 = *(std::__shared_weak_count **)(v39 + 408);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v21 = *((unsigned int *)this + 23);
        if (a8) {
          uint64_t v22 = *((unsigned int *)a8 + 58);
        }
        else {
          uint64_t v22 = 0;
        }
        goto LABEL_90;
      }
      if (mSelector == 1935893353)
      {
        uint64_t v23 = *((void *)this + 10);
        uint64_t v19 = *(void *)(v23 + 400);
        mach_port_t v20 = *(std::__shared_weak_count **)(v23 + 408);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v21 = *((unsigned int *)this + 23);
        if (a8) {
          uint64_t v22 = *((unsigned int *)a8 + 58);
        }
        else {
          uint64_t v22 = 0;
        }
        goto LABEL_90;
      }
    }
LABEL_65:
    if (HALS_Control::HasProperty((uint64_t)this, a2, (int *)a3))
    {
      HALS_Control::SetPropertyData((uint64_t)this, a2, (int *)a3, a4, (uint64_t)a5, a6, a7, (uint64_t)a8);
      goto LABEL_92;
    }
    if (!(*(unsigned int (**)(char *, HALB_Info *))(*((void *)this + 9) + 24))((char *)this + 72, mSelector))goto LABEL_92; {
    uint64_t v53 = *((void *)this + 10);
    }
    uint64_t v19 = *(void *)(v53 + 400);
    mach_port_t v20 = *(std::__shared_weak_count **)(v53 + 408);
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v21 = *((unsigned int *)this + 23);
    if (a8) {
      uint64_t v22 = *((unsigned int *)a8 + 58);
    }
    else {
      uint64_t v22 = 0;
    }
    goto LABEL_90;
  }
  if ((int)mSelector <= 1818453109)
  {
    if (mSelector == 1650685548)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          mach_port_t v74 = "HALS_PlugInControl.cpp";
          __int16 v75 = 1024;
          int v76 = 345;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInControl::SetPropertyData: bad property data size for kAudioBooleanControlPropertyValue", buf, 0x12u);
        }
        __int16 v57 = __cxa_allocate_exception(0x10uLL);
        *(void *)__int16 v57 = off_1F148A5D8;
        v57[2] = 561211770;
      }
      if (*((_DWORD *)this + 5) == 1702259059)
      {
        HALS_ReferenceStreamControlPropertyHandler::SetReferenceStreamControlPropertyData(*(HALS_ReferenceStreamControlPropertyHandler **)(*((void *)this + 8) + 8), a8, *(_DWORD *)a5 != 0);
        goto LABEL_92;
      }
      uint64_t v54 = *((void *)this + 10);
      uint64_t v19 = *(void *)(v54 + 400);
      mach_port_t v20 = *(std::__shared_weak_count **)(v54 + 408);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v21 = *((unsigned int *)this + 23);
      if (a8) {
        uint64_t v22 = *((unsigned int *)a8 + 58);
      }
      else {
        uint64_t v22 = 0;
      }
      goto LABEL_90;
    }
    if (mSelector == 1651272546)
    {
      uint64_t v18 = *((void *)this + 10);
      uint64_t v19 = *(void *)(v18 + 400);
      mach_port_t v20 = *(std::__shared_weak_count **)(v18 + 408);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v21 = *((unsigned int *)this + 23);
      if (a8) {
        uint64_t v22 = *((unsigned int *)a8 + 58);
      }
      else {
        uint64_t v22 = 0;
      }
LABEL_90:
      (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, uint64_t, uint64_t, uint64_t, float *))(*(void *)v19 + 584))(v19, v21, v22, a3, a6, a7, a4, a5);
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      goto LABEL_92;
    }
    goto LABEL_65;
  }
  if (mSelector == 1818453110)
  {
    unsigned int v59 = a6;
    uint64_t v61 = a7;
    std::string::basic_string[abi:ne180100]<0>(v67, "HALS_PlugInControl::SetPropertyData");
    uint64_t v40 = a4;
    int v63 = a5;
    unint64_t v41 = *(void *)&a3->mSelector;
    AudioObjectPropertyElement mElement = a3->mElement;
    unsigned int v44 = *((_DWORD *)this + 12);
    unsigned int v43 = *((_DWORD *)this + 13);
    int v46 = (HALS_ObjectMap *)*((unsigned int *)this + 14);
    int v45 = *((_DWORD *)this + 15);
    int v47 = "no control type";
    if (v45 == 1) {
      int v47 = "software control";
    }
    if (v45) {
      __int16 v48 = (char *)v47;
    }
    else {
      __int16 v48 = "external driver";
    }
    std::string::basic_string[abi:ne180100]<0>(v65, v48);
    LogVolumeChangeForServerSideControl((uint64_t)v67, a2, v41, mElement, v40, v63, v46, v44, v43, (uint64_t)v65);
    if (v66 < 0) {
      operator delete(v65[0]);
    }
    if (v68 < 0) {
      operator delete(v67[0]);
    }
    kdebug_trace();
    uint64_t v49 = *((void *)this + 10);
    uint64_t v50 = *(void *)(v49 + 400);
    CFTypeRef v35 = *(std::__shared_weak_count **)(v49 + 408);
    if (v35) {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (a8) {
      uint64_t v51 = *((unsigned int *)a8 + 58);
    }
    else {
      uint64_t v51 = 0;
    }
    (*(void (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *, void, uint64_t, uint64_t, float *))(*(void *)v50 + 584))(v50, *((unsigned int *)this + 23), v51, a3, v59, v61, v40, v63);
  }
  else
  {
    if (mSelector != 1818456950) {
      goto LABEL_65;
    }
    unsigned int v58 = a6;
    uint64_t v60 = a7;
    std::string::basic_string[abi:ne180100]<0>(v71, "HALS_PlugInControl::SetPropertyData");
    uint64_t v24 = a4;
    uint64_t v62 = a5;
    unint64_t v25 = *(void *)&a3->mSelector;
    AudioObjectPropertyElement v26 = a3->mElement;
    unsigned int v28 = *((_DWORD *)this + 12);
    unsigned int v27 = *((_DWORD *)this + 13);
    uint64_t v30 = (HALS_ObjectMap *)*((unsigned int *)this + 14);
    int v29 = *((_DWORD *)this + 15);
    CFTypeRef v31 = "no control type";
    if (v29 == 1) {
      CFTypeRef v31 = "software control";
    }
    if (v29) {
      uint64_t v32 = (char *)v31;
    }
    else {
      uint64_t v32 = "external driver";
    }
    std::string::basic_string[abi:ne180100]<0>(__p, v32);
    LogVolumeChangeForServerSideControl((uint64_t)v71, a2, v25, v26, v24, v62, v30, v28, v27, (uint64_t)__p);
    if (v70 < 0) {
      operator delete(__p[0]);
    }
    if (v72 < 0) {
      operator delete(v71[0]);
    }
    kdebug_trace();
    uint64_t v33 = *((void *)this + 10);
    uint64_t v34 = *(void *)(v33 + 400);
    CFTypeRef v35 = *(std::__shared_weak_count **)(v33 + 408);
    if (v35) {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (a8) {
      uint64_t v36 = *((unsigned int *)a8 + 58);
    }
    else {
      uint64_t v36 = 0;
    }
    (*(void (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *, void, uint64_t, uint64_t, float *))(*(void *)v34 + 584))(v34, *((unsigned int *)this + 23), v36, a3, v58, v60, v24, v62);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  kdebug_trace();
LABEL_92:
  HALS_ObjectMap::ReleaseObject(v64, v38);
}

void sub_1BAD16334(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, HALS_ObjectMap *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  HALS_ObjectMap::ReleaseObject(a14, a2);
  _Unwind_Resume(a1);
}

void HALS_PlugInControl::GetPropertyData(HALS_PlugInControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, unsigned int *a5, uint64_t *a6, uint64_t a7, _DWORD *a8, HALS_Client *a9)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t mSelector = a3->mSelector;
  if ((int)mSelector <= 1818457189)
  {
    if ((int)mSelector > 1818453105)
    {
      if ((int)mSelector <= 1818453109)
      {
        if (mSelector == 1818453106)
        {
          uint64_t v55 = *((void *)this + 10);
          uint64_t v19 = *(void *)(v55 + 400);
          mach_port_t v20 = *(std::__shared_weak_count **)(v55 + 408);
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v21 = *((unsigned int *)this + 23);
          if (a9) {
            uint64_t v22 = *((unsigned int *)a9 + 58);
          }
          else {
            uint64_t v22 = 0;
          }
          goto LABEL_152;
        }
        if (mSelector != 1818453107) {
          goto LABEL_114;
        }
        if (a4 >= 4 && a7 >= 4) {
          *(_DWORD *)a6 = *a8;
        }
        uint64_t v37 = *((void *)this + 10);
        uint64_t v38 = *(void *)(v37 + 400);
        uint64_t v39 = *(std::__shared_weak_count **)(v37 + 408);
        if (v39) {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v40 = *((unsigned int *)this + 23);
        if (a9) {
          uint64_t v41 = *((unsigned int *)a9 + 58);
        }
        else {
          uint64_t v41 = 0;
        }
      }
      else
      {
        if (mSelector == 1818453110)
        {
          uint64_t v48 = *((void *)this + 10);
          uint64_t v19 = *(void *)(v48 + 400);
          mach_port_t v20 = *(std::__shared_weak_count **)(v48 + 408);
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v21 = *((unsigned int *)this + 23);
          if (a9) {
            uint64_t v22 = *((unsigned int *)a9 + 58);
          }
          else {
            uint64_t v22 = 0;
          }
          goto LABEL_152;
        }
        if (mSelector != 1818456932)
        {
          if (mSelector == 1818456950)
          {
            uint64_t v31 = *((void *)this + 10);
            uint64_t v19 = *(void *)(v31 + 400);
            mach_port_t v20 = *(std::__shared_weak_count **)(v31 + 408);
            if (v20) {
              atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v21 = *((unsigned int *)this + 23);
            if (a9) {
              uint64_t v22 = *((unsigned int *)a9 + 58);
            }
            else {
              uint64_t v22 = 0;
            }
            goto LABEL_152;
          }
          goto LABEL_114;
        }
        if (a4 >= 4 && a7 >= 4) {
          *(_DWORD *)a6 = *a8;
        }
        uint64_t v53 = *((void *)this + 10);
        uint64_t v38 = *(void *)(v53 + 400);
        uint64_t v39 = *(std::__shared_weak_count **)(v53 + 408);
        if (v39) {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v40 = *((unsigned int *)this + 23);
        if (a9) {
          uint64_t v41 = *((unsigned int *)a9 + 58);
        }
        else {
          uint64_t v41 = 0;
        }
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, void, void, uint64_t, unsigned int *, uint64_t *))(*(void *)v38 + 576))(v38, v40, v41, a3, 0, 0, a4, a5, a6);
      if (!v39) {
        return;
      }
      uint64_t v60 = v39;
LABEL_157:
      std::__shared_weak_count::__release_shared[abi:ne180100](v60);
      return;
    }
    if ((int)mSelector <= 1651272547)
    {
      if (mSelector != 1650685548)
      {
        if (mSelector == 1651272546)
        {
          uint64_t v36 = *((void *)this + 10);
          uint64_t v19 = *(void *)(v36 + 400);
          mach_port_t v20 = *(std::__shared_weak_count **)(v36 + 408);
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v21 = *((unsigned int *)this + 23);
          if (a9) {
            uint64_t v22 = *((unsigned int *)a9 + 58);
          }
          else {
            uint64_t v22 = 0;
          }
          goto LABEL_152;
        }
        goto LABEL_114;
      }
      if (!a4)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_PlugInControl.cpp";
          __int16 v64 = 1024;
          int v65 = 251;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInControl::GetPropertyData: bad property data size for kAudioBooleanControlPropertyValue", buf, 0x12u);
        }
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = off_1F148A5D8;
        exception[2] = 561211770;
      }
      if (*((_DWORD *)this + 5) != 1702259059)
      {
        uint64_t v59 = *((void *)this + 10);
        uint64_t v19 = *(void *)(v59 + 400);
        mach_port_t v20 = *(std::__shared_weak_count **)(v59 + 408);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v21 = *((unsigned int *)this + 23);
        if (a9) {
          uint64_t v22 = *((unsigned int *)a9 + 58);
        }
        else {
          uint64_t v22 = 0;
        }
        goto LABEL_152;
      }
      *(_DWORD *)a6 = HALS_ReferenceStreamControlPropertyHandler::GetReferenceStreamControlPropertyData(*(HALS_ReferenceStreamControlPropertyHandler **)(*((void *)this + 8) + 8), a9);
      int v29 = 4;
    }
    else
    {
      if (mSelector == 1651272548)
      {
        uint64_t v47 = *((void *)this + 10);
        uint64_t v19 = *(void *)(v47 + 400);
        mach_port_t v20 = *(std::__shared_weak_count **)(v47 + 408);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v21 = *((unsigned int *)this + 23);
        if (a9) {
          uint64_t v22 = *((unsigned int *)a9 + 58);
        }
        else {
          uint64_t v22 = 0;
        }
        goto LABEL_152;
      }
      if (mSelector == 1668049771)
      {
        uint64_t v52 = *((void *)this + 10);
        uint64_t v19 = *(void *)(v52 + 400);
        mach_port_t v20 = *(std::__shared_weak_count **)(v52 + 408);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v21 = *((unsigned int *)this + 23);
        if (a9) {
          uint64_t v22 = *((unsigned int *)a9 + 58);
        }
        else {
          uint64_t v22 = 0;
        }
        goto LABEL_152;
      }
      if (mSelector != 1668641652) {
        goto LABEL_114;
      }
      unsigned int v23 = a4 / 0xC;
      if (*((_DWORD *)this + 26) < a4 / 0xC) {
        unsigned int v23 = *((_DWORD *)this + 26);
      }
      if (v23)
      {
        uint64_t v24 = 0;
        unint64_t v25 = 0;
        do
        {
          if (v25 < *((unsigned int *)this + 26))
          {
            AudioObjectPropertyElement v26 = (char *)a6 + v24;
            unsigned int v27 = (uint64_t *)(*((void *)this + 12) + v24);
            uint64_t v28 = *v27;
            *((_DWORD *)v26 + 2) = *((_DWORD *)v27 + 2);
            *(void *)AudioObjectPropertyElement v26 = v28;
          }
          ++v25;
          v24 += 12;
        }
        while (12 * v23 != v24);
      }
      int v29 = 12 * v23;
    }
    goto LABEL_124;
  }
  if ((int)mSelector <= 1935893352)
  {
    if ((int)mSelector <= 1851878763)
    {
      if (mSelector == 1818457190)
      {
        uint64_t v51 = *((void *)this + 10);
        uint64_t v19 = *(void *)(v51 + 400);
        mach_port_t v20 = *(std::__shared_weak_count **)(v51 + 408);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v21 = *((unsigned int *)this + 23);
        if (a9) {
          uint64_t v22 = *((unsigned int *)a9 + 58);
        }
        else {
          uint64_t v22 = 0;
        }
        goto LABEL_152;
      }
      if (mSelector != 1819173229) {
        goto LABEL_114;
      }
    }
    else if (mSelector != 1851878764)
    {
      if (mSelector == 1852400499) {
        goto LABEL_68;
      }
      if (mSelector == 1935892841)
      {
        uint64_t v30 = *((void *)this + 10);
        uint64_t v19 = *(void *)(v30 + 400);
        mach_port_t v20 = *(std::__shared_weak_count **)(v30 + 408);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v21 = *((unsigned int *)this + 23);
        if (a9) {
          uint64_t v22 = *((unsigned int *)a9 + 58);
        }
        else {
          uint64_t v22 = 0;
        }
        goto LABEL_152;
      }
      goto LABEL_114;
    }
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_PlugInControl.cpp";
        __int16 v64 = 1024;
        int v65 = 187;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInControl::GetPropertyData: bad property data size for kAudioObjectPropertyName", buf, 0x12u);
      }
      uint64_t v61 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v61 = off_1F148A5D8;
      v61[2] = 561211770;
    }
    uint64_t v33 = *((void *)this + 10);
    uint64_t v34 = *(void *)(v33 + 400);
    CFTypeRef v35 = *(std::__shared_weak_count **)(v33 + 408);
    if (v35) {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    strcpy(buf, "manlbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    (*(void (**)(uint64_t))(*(void *)v34 + 576))(v34);
    *a6 = 0;
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    int v29 = 8;
LABEL_124:
    *a5 = v29;
    return;
  }
  if ((int)mSelector <= 1935962741)
  {
    if (mSelector == 1935893353)
    {
      uint64_t v49 = *((void *)this + 10);
      uint64_t v19 = *(void *)(v49 + 400);
      mach_port_t v20 = *(std::__shared_weak_count **)(v49 + 408);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v21 = *((unsigned int *)this + 23);
      if (a9) {
        uint64_t v22 = *((unsigned int *)a9 + 58);
      }
      else {
        uint64_t v22 = 0;
      }
      goto LABEL_152;
    }
    if (mSelector != 1935894894)
    {
      if (mSelector == 1935962738)
      {
        uint64_t v18 = *((void *)this + 10);
        uint64_t v19 = *(void *)(v18 + 400);
        mach_port_t v20 = *(std::__shared_weak_count **)(v18 + 408);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v21 = *((unsigned int *)this + 23);
        if (a9) {
          uint64_t v22 = *((unsigned int *)a9 + 58);
        }
        else {
          uint64_t v22 = 0;
        }
LABEL_152:
        (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, uint64_t, _DWORD *, uint64_t, unsigned int *, uint64_t *))(*(void *)v19 + 576))(v19, v21, v22, a3, a7, a8, a4, a5, a6);
LABEL_155:
        if (!v20) {
          return;
        }
        uint64_t v60 = v20;
        goto LABEL_157;
      }
      goto LABEL_114;
    }
LABEL_68:
    uint64_t v42 = *((void *)this + 10);
    uint64_t v43 = *(void *)(v42 + 400);
    unsigned int v44 = *(std::__shared_weak_count **)(v42 + 408);
    if (v44) {
      atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v45 = *((unsigned int *)this + 23);
    if (a9) {
      uint64_t v46 = *((unsigned int *)a9 + 58);
    }
    else {
      uint64_t v46 = 0;
    }
    strcpy(buf, "nicsbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *, uint64_t, _DWORD *, uint64_t, unsigned int *, uint64_t *))(*(void *)v43 + 576))(v43, v45, v46, buf, a7, a8, a4, a5, a6);
    if (v44) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v44);
    }
    return;
  }
  switch(mSelector)
  {
    case 0x73647276:
      uint64_t v50 = *((void *)this + 10);
      uint64_t v19 = *(void *)(v50 + 400);
      mach_port_t v20 = *(std::__shared_weak_count **)(v50 + 408);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v21 = *((unsigned int *)this + 23);
      if (a9) {
        uint64_t v22 = *((unsigned int *)a9 + 58);
      }
      else {
        uint64_t v22 = 0;
      }
      goto LABEL_152;
    case 0x73706363:
      uint64_t v54 = *((void *)this + 10);
      uint64_t v19 = *(void *)(v54 + 400);
      mach_port_t v20 = *(std::__shared_weak_count **)(v54 + 408);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v21 = *((unsigned int *)this + 23);
      if (a9) {
        uint64_t v22 = *((unsigned int *)a9 + 58);
      }
      else {
        uint64_t v22 = 0;
      }
      goto LABEL_152;
    case 0x73706376:
      uint64_t v32 = *((void *)this + 10);
      uint64_t v19 = *(void *)(v32 + 400);
      mach_port_t v20 = *(std::__shared_weak_count **)(v32 + 408);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v21 = *((unsigned int *)this + 23);
      if (a9) {
        uint64_t v22 = *((unsigned int *)a9 + 58);
      }
      else {
        uint64_t v22 = 0;
      }
      goto LABEL_152;
  }
LABEL_114:
  if (!HALS_Control::HasProperty((uint64_t)this, a2, (int *)a3))
  {
    if (!(*(unsigned int (**)(char *, uint64_t))(*((void *)this + 9) + 24))((char *)this + 72, mSelector)) {
      return;
    }
    uint64_t v56 = *((void *)this + 10);
    uint64_t v57 = *(void *)(v56 + 400);
    mach_port_t v20 = *(std::__shared_weak_count **)(v56 + 408);
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (a9) {
      uint64_t v58 = *((unsigned int *)a9 + 58);
    }
    else {
      uint64_t v58 = 0;
    }
    (*(void (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *, uint64_t, _DWORD *, uint64_t, unsigned int *, uint64_t *))(*(void *)v57 + 576))(v57, *((unsigned int *)this + 23), v58, a3, a7, a8, a4, a5, a6);
    goto LABEL_155;
  }

  HALS_Control::GetPropertyData((uint64_t)this, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1BAD172B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugInControl::GetPropertyDataSize(HALS_PlugInControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, HALS_Client *a6)
{
  uint64_t mSelector = a3->mSelector;
  uint64_t v13 = 8;
  if ((int)mSelector > 1851878763)
  {
    switch(mSelector)
    {
      case 0x6E616D6C:
        return v13;
      case 0x73636169:
        uint64_t v20 = *((void *)this + 10);
        uint64_t v15 = *(void *)(v20 + 400);
        uint64_t v16 = *(std::__shared_weak_count **)(v20 + 408);
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = *((unsigned int *)this + 23);
        if (a6) {
          uint64_t v18 = *((unsigned int *)a6 + 58);
        }
        else {
          uint64_t v18 = 0;
        }
        goto LABEL_36;
      case 0x73636369:
        uint64_t v14 = *((void *)this + 10);
        uint64_t v15 = *(void *)(v14 + 400);
        uint64_t v16 = *(std::__shared_weak_count **)(v14 + 408);
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = *((unsigned int *)this + 23);
        if (a6) {
          uint64_t v18 = *((unsigned int *)a6 + 58);
        }
        else {
          uint64_t v18 = 0;
        }
        goto LABEL_36;
    }
  }
  else
  {
    switch(mSelector)
    {
      case 0x626C6B62:
        uint64_t v19 = *((void *)this + 10);
        uint64_t v15 = *(void *)(v19 + 400);
        uint64_t v16 = *(std::__shared_weak_count **)(v19 + 408);
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = *((unsigned int *)this + 23);
        if (a6) {
          uint64_t v18 = *((unsigned int *)a6 + 58);
        }
        else {
          uint64_t v18 = 0;
        }
        goto LABEL_36;
      case 0x63757374:
        return (12 * *((_DWORD *)this + 26));
      case 0x6C6E616D:
        return v13;
    }
  }
  if (!HALS_Control::HasProperty((uint64_t)this, a2, (int *)a3))
  {
    if ((*(unsigned int (**)(char *, uint64_t))(*((void *)this + 9) + 24))((char *)this + 72, mSelector))
    {
      uint64_t v22 = *((void *)this + 10);
      uint64_t v15 = *(void *)(v22 + 400);
      uint64_t v16 = *(std::__shared_weak_count **)(v22 + 408);
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = *((unsigned int *)this + 23);
      if (a6) {
        uint64_t v18 = *((unsigned int *)a6 + 58);
      }
      else {
        uint64_t v18 = 0;
      }
LABEL_36:
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)v15 + 568))(v15, v17, v18, a3, a4, a5);
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      return v13;
    }
    return 0;
  }

  return HALS_Control::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
}

void sub_1BAD17658(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugInControl::IsPropertySettable(HALS_PlugInControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  if (a4) {
    uint64_t v7 = *((unsigned int *)a4 + 58);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t mSelector = a3->mSelector;
  if ((int)mSelector <= 1818456949)
  {
    if (mSelector != 1650685548)
    {
      if (mSelector == 1668641652) {
        return 0;
      }
      if (mSelector != 1818453110) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    if ((int)mSelector > 1935962741)
    {
      BOOL v9 = mSelector == 1936745334;
      int v10 = 1935962742;
    }
    else
    {
      BOOL v9 = mSelector == 1818456950;
      int v10 = 1935893353;
    }
    if (!v9 && mSelector != v10)
    {
LABEL_10:
      if (!HALS_Control::HasProperty((uint64_t)this, a2, (int *)a3))
      {
        if ((*(unsigned int (**)(char *, uint64_t))(*((void *)this + 9) + 24))((char *)this + 72, mSelector))
        {
          uint64_t v11 = *((void *)this + 10);
          uint64_t v12 = *(void *)(v11 + 400);
          uint64_t v13 = *(std::__shared_weak_count **)(v11 + 408);
          if (v13) {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
LABEL_29:
          uint64_t v22 = (*(uint64_t (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *))(*(void *)v12
                                                                                                  + 560))(v12, *((unsigned int *)this + 23), v7, a3);
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          return v22;
        }
        return 0;
      }
      goto LABEL_34;
    }
  }
  if (!HALS_Control::HasProperty((uint64_t)this, a2, (int *)a3)) {
    return 0;
  }
  uint64_t v15 = *((unsigned int *)this + 23);
  if (v15)
  {
    uint64_t v16 = *((void *)this + 10);
    uint64_t v17 = *(void *)(v16 + 400);
    uint64_t v18 = *(std::__shared_weak_count **)(v16 + 408);
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v15 = *((unsigned int *)this + 23);
    }
    int v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *))(*(void *)v17 + 552))(v17, v15, v7, a3);
    char v20 = v19;
    if (v18)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      if ((v20 & 1) == 0) {
        goto LABEL_34;
      }
    }
    else if (!v19)
    {
      goto LABEL_34;
    }
    uint64_t v21 = *((void *)this + 10);
    uint64_t v12 = *(void *)(v21 + 400);
    uint64_t v13 = *(std::__shared_weak_count **)(v21 + 408);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    goto LABEL_29;
  }
LABEL_34:

  return HALS_Control::IsPropertySettable((uint64_t)this, a2, (int *)a3);
}

void sub_1BAD17920(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL HALS_PlugInControl::HasProperty(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v5 = *a3;
  if (v5 == 1668641652) {
    return *(_DWORD *)(a1 + 104) != 0;
  }
  if (v5 == 1851878764 || v5 == 1819173229)
  {
    uint64_t v8 = *(void *)(a1 + 80);
    uint64_t v9 = *(void *)(v8 + 400);
    int v10 = *(std::__shared_weak_count **)(v8 + 408);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *(unsigned int *)(a1 + 92);
    if (a4) {
      uint64_t v12 = *(unsigned int *)(a4 + 232);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v21 = 0x676C6F626C6E616DLL;
    int v22 = 0;
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v9 + 552))(v9, v11, v12, &v21);
    if (v10)
    {
      uint64_t v15 = v10;
LABEL_17:
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  else
  {
    if (HALS_Control::HasProperty(a1, a2, a3)) {
      return 1;
    }
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)(a1 + 72) + 24))(a1 + 72, v5)) {
      return 0;
    }
    uint64_t v17 = *(void *)(a1 + 80);
    uint64_t v18 = *(void *)(v17 + 400);
    int v19 = *(std::__shared_weak_count **)(v17 + 408);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (a4) {
      uint64_t v20 = *(unsigned int *)(a4 + 232);
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v13 = (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*(void *)v18 + 552))(v18, *(unsigned int *)(a1 + 92), v20, a3);
    if (v19)
    {
      uint64_t v15 = v19;
      goto LABEL_17;
    }
  }
  return v13;
}

void sub_1BAD17AF4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_PlugInControl::Activate(HALS_PlugInControl *this)
{
  HALS_PlugInControl::RefreshCache(this);
  if (!*((_DWORD *)this + 15)) {
    (*(void (**)(void))(*((void *)this + 9) + 32))();
  }

  HALS_Object::Activate(this, v2);
}

uint64_t HALS_PlugInControl::RefreshCache(HALS_PlugInControl *this)
{
  if (*((_DWORD *)this + 15) == 1)
  {
    int Class = 1702259059;
    Baseint Class = 1650685548;
    int v4 = 1869968496;
  }
  else
  {
    uint64_t v5 = *((void *)this + 10);
    uint64_t v6 = *(HALS_UCPlugInBase **)(v5 + 400);
    uint64_t v7 = *(std::__shared_weak_count **)(v5 + 408);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int Class = HALS_UCPlugInBase::Object_GetClass(v6, *((unsigned int *)this + 23));
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    uint64_t v8 = *((void *)this + 10);
    uint64_t v9 = *(HALS_UCPlugInBase **)(v8 + 400);
    int v10 = *(std::__shared_weak_count **)(v8 + 408);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Baseint Class = HALS_UCPlugInBase::Object_GetBaseClass(v9, *((unsigned int *)this + 23));
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    uint64_t v11 = *((void *)this + 10);
    uint64_t v12 = *(void *)(v11 + 400);
    uint64_t v13 = *(std::__shared_weak_count **)(v11 + 408);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v29 = 0x676C6F6263736370;
    int v30 = 0;
    uint64_t v31 = 0;
    (*(void (**)(uint64_t))(*(void *)v12 + 576))(v12);
    int v4 = 0;
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    uint64_t v14 = *((void *)this + 10);
    uint64_t v15 = *(void *)(v14 + 400);
    uint64_t v16 = *(std::__shared_weak_count **)(v14 + 408);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v29 = 0x676C6F6263656C6DLL;
    int v30 = 0;
    uint64_t v31 = 0;
    (*(void (**)(uint64_t))(*(void *)v15 + 576))(v15);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  uint64_t v25 = 0;
  AudioObjectPropertyElement v26 = &v25;
  uint64_t v27 = 0x2000000000;
  char v28 = 0;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 0x40000000;
  void v20[2] = ___ZN18HALS_PlugInControl12RefreshCacheEv_block_invoke;
  _DWORD v20[3] = &unk_1E6233360;
  v20[4] = &v25;
  v20[5] = this;
  int v21 = Class;
  int v22 = BaseClass;
  int v23 = v4;
  int v24 = 0;
  uint64_t v17 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugInControl *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v17, (uint64_t)v20);
  uint64_t v18 = *((unsigned __int8 *)v26 + 24);
  _Block_object_dispose(&v25, 8);
  return v18;
}

void sub_1BAD17E64(void *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAD17D9CLL);
}

void sub_1BAD17EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN18HALS_PlugInControl12RefreshCacheEv_block_invoke(uint64_t result)
{
  integer_t v1 = *(_DWORD **)(result + 40);
  int v2 = *(_DWORD *)(result + 48);
  if (v1[5] != v2)
  {
    v1[5] = v2;
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  int v3 = *(_DWORD *)(result + 52);
  if (v1[6] != v3)
  {
    v1[6] = v3;
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  int v4 = *(_DWORD *)(result + 56);
  if (v1[12] != v4)
  {
    v1[12] = v4;
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  int v5 = *(_DWORD *)(result + 60);
  if (v1[13] != v5)
  {
    v1[13] = v5;
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void HALS_PlugInControl::HALS_PlugInControl(HALS_Object *a1, int a2, uint64_t a3, int a4, int a5, int a6, int a7)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  HALS_Control::HALS_Control(a1, a3, a5, a6, 0, 0, a7);
}

void sub_1BAD18360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,uint64_t a29)
{
  HALS_PlugInObject::~HALS_PlugInObject(v30);
  HALS_Control::~HALS_Control(v29);
  _Unwind_Resume(a1);
}

void AMCP::Log::Scope_Registry::get(AMCP::Log::Scope_Registry *this)
{
  {
    if (v1)
    {
      xmmword_1EBFFA320 = 0u;
      unk_1EBFFA330 = 0u;
      xmmword_1EBFFA300 = 0u;
      unk_1EBFFA310 = 0u;
      xmmword_1EBFFA2E0 = 0u;
      unk_1EBFFA2F0 = 0u;
      xmmword_1EBFFA2C0 = 0u;
      unk_1EBFFA2D0 = 0u;
      xmmword_1EBFFA2A0 = 0u;
      unk_1EBFFA2B0 = 0u;
      xmmword_1EBFFA280 = 0u;
      *(_OWORD *)&qword_1EBFFA290 = 0u;
      xmmword_1EBFFA260 = 0u;
      xmmword_1EBFFA270 = 0u;
      AMCP::Log::Scope_Registry::get(void)::s_registry = 0u;
      AMCP::Log::Scope_Registry::Scope_Registry(v1);
    }
  }
}

std::__shared_mutex_base *AMCP::Log::Scope_Registry::Scope_Registry(AMCP::Log::Scope_Registry *this)
{
  qword_1EBFFA290 = 0;
  xmmword_1EBFFA270 = 0u;
  xmmword_1EBFFA280 = 0u;
  AMCP::Log::Scope_Registry::get(void)::s_registry = 0u;
  xmmword_1EBFFA260 = 0u;
  return std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)&unk_1EBFFA298);
}

void sub_1BAD18534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)&xmmword_1EBFFA280;
  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*((void *)&xmmword_1EBFFA270 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&xmmword_1EBFFA270 + 1));
  }
  _Unwind_Resume(a1);
}

void std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  integer_t v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::__destroy_at[abi:ne180100]<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>,0>(v4);
      }
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::construct_at[abi:ne180100]<applesauce::CF::URLRef,applesauce::CF::URLRef&,applesauce::CF::URLRef*>(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  return a1;
}

uint64_t ShortTermLinearInterpolationResampler::SetRate(uint64_t this, double a2)
{
  if (a2 >= 0.0)
  {
    BOOL v2 = a2 == 32.0;
    BOOL v3 = a2 < 32.0;
  }
  else
  {
    BOOL v2 = 0;
    BOOL v3 = 0;
  }
  if (!v3 && !v2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -50;
  }
  *(double *)(this + 40) = a2;
  *(void *)(this + 24) = vcvtd_n_s64_f64(a2, 0x20uLL);
  return this;
}

unint64_t ShortTermLinearInterpolationResampler::GetNumberOfSourceFrames(ShortTermLinearInterpolationResampler *this, uint64_t a2)
{
  if (a2 > 0x400000)
  {
    exceptiouint64_t n = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -50;
  }
  if (!*(unsigned char *)this && a2) {
    return (*((void *)this + 2) + *((void *)this + 3) * (unint64_t)a2 + 0x80000000) >> 32;
  }
  return a2;
}

uint64_t ShortTermLinearInterpolationResampler::GetNumberOfOutputFrames(ShortTermLinearInterpolationResampler *this, uint64_t a2)
{
  if (a2 > 0x400000)
  {
    exceptiouint64_t n = __cxa_allocate_exception(4uLL);
    _DWORD *exception = -50;
  }
  if (!*(unsigned char *)this)
  {
    uint64_t v2 = *((void *)this + 3);
    uint64_t v3 = ~*((void *)this + 2) + (a2 << 32) + v2;
    if (v3 < 0) {
      return 0;
    }
    else {
      return v3 / v2;
    }
  }
  return a2;
}

ShortTermLinearInterpolationResampler *ShortTermLinearInterpolationResampler::PreFlight(ShortTermLinearInterpolationResampler *this, unsigned int *a2, unsigned int *a3)
{
  uint64_t v5 = *a3;
  if (*(unsigned char *)this)
  {
    unsigned int v6 = *a2;
    if (v5 < *a2) {
      unsigned int v6 = *a3;
    }
    *a3 = v6;
    *a2 = v6;
  }
  else
  {
    uint64_t v7 = this;
    unint64_t NumberOfSourceFrames = ShortTermLinearInterpolationResampler::GetNumberOfSourceFrames(this, v5);
    uint64_t v9 = *a2;
    if (NumberOfSourceFrames <= v9)
    {
      *a2 = NumberOfSourceFrames;
      this = (ShortTermLinearInterpolationResampler *)ShortTermLinearInterpolationResampler::GetNumberOfOutputFrames(v7, NumberOfSourceFrames);
      if (this < *a3) {
        *a3 = this;
      }
    }
    else
    {
      uint64_t NumberOfOutputFrames = ShortTermLinearInterpolationResampler::GetNumberOfOutputFrames(v7, v9);
      if (NumberOfOutputFrames > *a3)
      {
        exceptiouint64_t n = __cxa_allocate_exception(4uLL);
        _DWORD *exception = 1835103336;
        __cxa_throw(exception, MEMORY[0x1E4FBA3B0], 0);
      }
      *a3 = NumberOfOutputFrames;
      this = (ShortTermLinearInterpolationResampler *)ShortTermLinearInterpolationResampler::GetNumberOfSourceFrames(v7, NumberOfOutputFrames);
      if (this < *a2) {
        *a2 = this;
      }
    }
  }
  return this;
}

uint64_t ShortTermLinearInterpolationResampler::PushConvertFloat(ShortTermLinearInterpolationResampler *this, float *__src, float *a3, float *__dst, float *a5, unsigned int *a6, unsigned int *a7, size_t __n, unsigned int a9)
{
  uint64_t result = 4294967246;
  if (__src)
  {
    if (__dst)
    {
      int v12 = __n;
      if (!a3 || a5)
      {
        if (*(unsigned char *)this)
        {
          unsigned int v18 = *a7;
          *a6 = *a7;
        }
        else
        {
          ShortTermLinearInterpolationResampler::PreFlight(this, a6, a7);
          unsigned int v18 = *a6;
        }
        unsigned int v19 = *a7;
        if (*a7 == v18)
        {
          if (v12 == 1 && a9 == 1)
          {
            size_t v20 = 4 * v18;
            memcpy(__dst, __src, v20);
            if (a3) {
              memcpy(a5, a3, v20);
            }
          }
          else if (a3)
          {
            if (v18)
            {
              int v26 = 0;
              int v27 = 0;
              do
              {
                __dst[v27] = __src[v26];
                a5[v27] = a3[v26];
                v26 += v12;
                v27 += a9;
                --v18;
              }
              while (v18);
            }
          }
          else if (v18)
          {
            int v31 = 0;
            int v32 = 0;
            do
            {
              __dst[v32] = __src[v31];
              v31 += v12;
              v32 += a9;
              --v18;
            }
            while (v18);
          }
        }
        else
        {
          uint64_t v21 = (uint64_t)((double)(v18 - 1) * 4294967300.0 / (double)(v19 - 1));
          if (a3)
          {
            if (v19)
            {
              int v22 = 0;
              uint64_t v23 = 0;
              do
              {
                float v24 = (float)v23 * 2.3283e-10;
                int v25 = HIDWORD(v23) * v12 + v12;
                __dst[v22] = __src[HIDWORD(v23) * v12] + (float)(v24 * (float)(__src[v25] - __src[HIDWORD(v23) * v12]));
                a5[v22] = a3[HIDWORD(v23) * v12] + (float)(v24 * (float)(a3[v25] - a3[HIDWORD(v23) * v12]));
                v23 += v21;
                v22 += a9;
                --v19;
              }
              while (v19);
            }
          }
          else if (v19)
          {
            int v28 = 0;
            uint64_t v29 = 0;
            do
            {
              float v30 = __src[HIDWORD(v29) * v12];
              __dst[v28] = v30
                         + (float)((float)((float)v29 * 2.3283e-10)
                                 * (float)(__src[HIDWORD(v29) * v12 + v12] - v30));
              v29 += v21;
              v28 += a9;
              --v19;
            }
            while (v19);
          }
        }
        if (*(unsigned char *)this) {
          unint64_t v33 = 0;
        }
        else {
          unint64_t v33 = *((void *)this + 2) + *((void *)this + 3) * *a7 + ((unint64_t)-*a6 << 32);
        }
        uint64_t result = 0;
        *((void *)this + 2) = v33;
      }
    }
  }
  return result;
}

void AMCP::Core::System_Core_Keeper::~System_Core_Keeper(AMCP::Core::System_Core_Keeper *this)
{
  *(void *)this = &unk_1F146D188;
  integer_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F146D188;
  integer_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void AMCP::IO_Core::Device_Timebase_Factory::demand_timebase_for_device(void *a1, void *a2, uint64_t *a3, unsigned __int8 *a4)
{
  if (std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(a2, a4))
  {
    uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(a2, a4);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)(a2 + 5), a4, (uint64_t)a4);
    uint64_t v9 = *((void *)v8 + 5);
    os_unfair_lock_lock((os_unfair_lock_t)(v9 + 64));
    uint64_t v10 = *a3;
    if (!*a3) {
      goto LABEL_27;
    }
    uint64_t v11 = *(std::__shared_weak_count **)(v9 + 40);
    if (v11)
    {
      int v12 = std::__shared_weak_count::lock(v11);
      if (v12)
      {
        uint64_t v13 = *(void *)(v9 + 32);
        uint64_t v10 = *a3;
        if (v13)
        {
          if (v13 != v10)
          {
            uint64_t v14 = *(std::__shared_weak_count **)(v9 + 56);
            *(void *)(v9 + 48) = 0;
            *(void *)(v9 + 56) = 0;
            if (v14) {
              std::__shared_weak_count::__release_weak(v14);
            }
            if (*(_DWORD *)(v9 + 88))
            {
              uint64_t v16 = *a3;
              uint64_t v15 = a3[1];
              if (v15) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 16), 1uLL, memory_order_relaxed);
              }
              uint64_t v17 = *(std::__shared_weak_count **)(v9 + 56);
              *(void *)(v9 + 48) = v16;
              *(void *)(v9 + 56) = v15;
              if (!v17) {
                goto LABEL_26;
              }
            }
            else
            {
              if (*(unsigned char *)(v9 + 104)) {
                *(unsigned char *)(v9 + 104) = 0;
              }
              uint64_t v22 = *a3;
              uint64_t v21 = a3[1];
              if (v21) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 16), 1uLL, memory_order_relaxed);
              }
              uint64_t v17 = *(std::__shared_weak_count **)(v9 + 40);
              *(void *)(v9 + 32) = v22;
              *(void *)(v9 + 40) = v21;
              if (!v17) {
                goto LABEL_26;
              }
            }
            std::__shared_weak_count::__release_weak(v17);
          }
LABEL_26:
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_27:
          os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 64));
          uint64_t v20 = *((void *)v8 + 6);
          *a1 = *((void *)v8 + 5);
          a1[1] = v20;
          if (v20) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
          }
          return;
        }
      }
      else
      {
        uint64_t v10 = *a3;
      }
    }
    else
    {
      int v12 = 0;
    }
    uint64_t v18 = a3[1];
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 16), 1uLL, memory_order_relaxed);
    }
    unsigned int v19 = *(std::__shared_weak_count **)(v9 + 40);
    *(void *)(v9 + 32) = v10;
    *(void *)(v9 + 40) = v18;
    if (v19) {
      std::__shared_weak_count::__release_weak(v19);
    }
    if (*(unsigned char *)(v9 + 104)) {
      *(unsigned char *)(v9 + 104) = 0;
    }
    if (!v12) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (*a3) {
    operator new();
  }
  *a1 = 0;
  a1[1] = 0;
}

void sub_1BAD19014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (*((void *)&a11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&a11 + 1));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::shared_ptr<AMCP::Graph::Timebase>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  integer_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<AMCP::Graph::Node>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

AMCP::IO_Core::Device_Timebase *std::unique_ptr<AMCP::IO_Core::Device_Timebase>::reset[abi:ne180100](AMCP::IO_Core::Device_Timebase **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    AMCP::IO_Core::Device_Timebase::~Device_Timebase(result);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<AMCP::IO_Core::Device_Timebase *,std::shared_ptr<AMCP::Graph::Timebase>::__shared_ptr_default_delete<AMCP::Graph::Timebase,AMCP::IO_Core::Device_Timebase>,std::allocator<AMCP::IO_Core::Device_Timebase>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4AMCP5Graph8TimebaseEE27__shared_ptr_default_deleteIS3_NS1_7IO_Core15Device_TimebaseEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

AMCP::IO_Core::Device_Timebase *std::__shared_ptr_pointer<AMCP::IO_Core::Device_Timebase *,std::shared_ptr<AMCP::Graph::Timebase>::__shared_ptr_default_delete<AMCP::Graph::Timebase,AMCP::IO_Core::Device_Timebase>,std::allocator<AMCP::IO_Core::Device_Timebase>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(AMCP::IO_Core::Device_Timebase **)(a1 + 24);
  if (result)
  {
    AMCP::IO_Core::Device_Timebase::~Device_Timebase(result);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

void std::__shared_ptr_pointer<AMCP::IO_Core::Device_Timebase *,std::shared_ptr<AMCP::Graph::Timebase>::__shared_ptr_default_delete<AMCP::Graph::Timebase,AMCP::IO_Core::Device_Timebase>,std::allocator<AMCP::IO_Core::Device_Timebase>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void AMCP::IOAudio1::Stream::~Stream(AMCP::IOAudio1::Stream *this)
{
  AMCP::IOAudio1::Stream::~Stream(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F146D1F8;
  AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*(void *)(*(void *)(*((void *)this + 1) + 16) + 32) + 16), *((_DWORD *)this + 4));
  *((_DWORD *)this + 4) = 0;

  AMCP::IOAudio1::Device_Sub_Object::~Device_Sub_Object(this);
}

double AMCP::IOAudio1::make_sample_rate_from_dictionary(AMCP::IOAudio1 *this, const applesauce::CF::DictionaryRef *a2, const __CFString *a3)
{
  if (!this)
  {
    double result = 0.0;
    if (!a2) {
      return result;
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_26:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(this);
  if (a2)
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*&>(&cf, this, a2);
    if (v16)
    {
      CFDictionaryRef v5 = (const __CFDictionary *)cf;
      if (cf) {
        CFRetain(cf);
      }
    }
    else
    {
      CFDictionaryRef v5 = 0;
    }
    std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
    CFRelease(this);
    if (!v5) {
      return 0.0;
    }
  }
  else
  {
    CFDictionaryRef v5 = this;
  }
  LODWORD(cf) = 0;
  CFTypeRef v14 = CFNumberCreate(0, kCFNumberIntType, &cf);
  if (!v14)
  {
    int v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "Could not construct");
    __cxa_throw(v12, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&cf, v5, @"IOAudioSampleRateWholeNumber", &v14);
  CFTypeRef v8 = cf;
  if (!cf) {
    goto LABEL_25;
  }
  unsigned int v9 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf);
  CFRelease(v8);
  if (v14) {
    CFRelease(v14);
  }
  LODWORD(cf) = 0;
  CFTypeRef v14 = CFNumberCreate(0, kCFNumberIntType, &cf);
  if (!v14)
  {
    uint64_t v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v13, "Could not construct");
    __cxa_throw(v13, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&cf, v5, @"IOAudioSampleRateFraction", &v14);
  CFTypeRef v10 = cf;
  if (!cf)
  {
LABEL_25:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_26;
  }
  unsigned int v11 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf);
  CFRelease(v10);
  if (v14) {
    CFRelease(v14);
  }
  CFRelease(v5);
  return (double)v11 / 4294967300.0 + (double)v9;
}

void sub_1BAD19598(void *a1)
{
  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

void AMCP::IOAudio1::get_stream_format(AMCP::IOAudio1 *this, AMCP::IOAudio1 **a2, CFDictionaryRef theDict)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (!theDict)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    goto LABEL_14;
  }
  CFDictionaryRef v5 = applesauce::CF::details::at_key<__CFString const*>(theDict, @"IOAudioStreamFormat");
  if (!v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
LABEL_14:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v6 = v5;
  CFRetain(v5);
  uint64_t v7 = applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v27, v6);
  if (!v27)
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    CFTypeRef v10 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      unsigned int v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)uint64_t v29 = 2080;
      *(void *)&v29[2] = "IOAudio1_Stream.cpp";
      __int16 v30 = 1024;
      int v31 = 275;
      __int16 v32 = 2080;
      *(void *)unint64_t v33 = "(raw_current_format.is_valid()) == false";
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to find the current format for a stream", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v19, "failed to find the current format for a stream");
    std::runtime_error::runtime_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v21 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(void *)&v33[6] = "CA::StreamDescription AMCP::IOAudio1::get_stream_format(const CF::Dictionary &, const CF::Dictionary &)";
    uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IOAudio1/IOAudio1_Stream.cpp";
    int v35 = 275;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    char v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  AMCP::IOAudio1::make_format_from_dictionary(this, &v27);
  AMCP::IOAudio1::make_sample_rate_from_dictionary(v27, (const applesauce::CF::DictionaryRef *)@"IOAudioSampleRate", v8);
  *(double *)this = AMCP::IOAudio1::make_sample_rate_from_dictionary(*a2, (const applesauce::CF::DictionaryRef *)@"IOAudioSampleRate", v9);
  if (v27) {
    CFRelease(v27);
  }
}

void sub_1BAD198E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, std::runtime_error a19, char a20)
{
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v20 - 120));
  _Unwind_Resume(a1);
}

void AMCP::IOAudio1::make_format_from_dictionary(AMCP::IOAudio1 *this, const __CFDictionary **a2)
{
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (!*a2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_96;
  }
  LODWORD(valuePtr) = 0;
  CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    int v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v31, "Could not construct");
    __cxa_throw(v31, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *a2, @"IOAudioStreamSampleFormat", &cf);
  CFNumberRef v4 = valuePtr;
  if (!valuePtr) {
    goto LABEL_95;
  }
  int v5 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  *((_DWORD *)this + 2) = v5;
  CFRelease(v4);
  if (cf) {
    CFRelease(cf);
  }
  if (!*a2) {
    goto LABEL_95;
  }
  LODWORD(valuePtr) = 0;
  CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    __int16 v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v32, "Could not construct");
    __cxa_throw(v32, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *a2, @"IOAudioStreamFormatFlags", &cf);
  CFNumberRef v6 = valuePtr;
  if (!valuePtr) {
    goto LABEL_95;
  }
  *((_DWORD *)this + 3) = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  CFRelease(v6);
  if (cf) {
    CFRelease(cf);
  }
  if (!*a2) {
    goto LABEL_95;
  }
  LODWORD(valuePtr) = 0;
  CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    unint64_t v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v33, "Could not construct");
    __cxa_throw(v33, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *a2, @"IOAudioStreamBytesPerPacket", &cf);
  CFNumberRef v7 = valuePtr;
  if (!valuePtr) {
    goto LABEL_95;
  }
  *((_DWORD *)this + 4) = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  CFRelease(v7);
  if (cf) {
    CFRelease(cf);
  }
  if (!*a2) {
    goto LABEL_95;
  }
  LODWORD(valuePtr) = 0;
  CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    uint64_t v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v34, "Could not construct");
    __cxa_throw(v34, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *a2, @"IOAudioStreamFramesPerPacket", &cf);
  CFNumberRef v8 = valuePtr;
  if (!valuePtr) {
    goto LABEL_95;
  }
  int v43 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  *((_DWORD *)this + 5) = v43;
  CFRelease(v8);
  if (cf) {
    CFRelease(cf);
  }
  if (!*a2) {
    goto LABEL_95;
  }
  LODWORD(valuePtr) = 0;
  CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    int v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v35, "Could not construct");
    __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *a2, @"IOAudioStreamNumChannels", &cf);
  CFNumberRef v9 = valuePtr;
  if (!valuePtr) {
    goto LABEL_95;
  }
  int v10 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  *((_DWORD *)this + 7) = v10;
  CFRelease(v9);
  if (cf) {
    CFRelease(cf);
  }
  if (!*a2) {
    goto LABEL_95;
  }
  LODWORD(valuePtr) = 0;
  CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    uint64_t v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v36, "Could not construct");
    __cxa_throw(v36, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *a2, @"IOAudioStreamBitDepth", &cf);
  CFNumberRef v11 = valuePtr;
  if (!valuePtr) {
    goto LABEL_95;
  }
  int v12 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  *((_DWORD *)this + 8) = v12;
  CFRelease(v11);
  if (cf) {
    CFRelease(cf);
  }
  if (!*a2) {
    goto LABEL_95;
  }
  LODWORD(valuePtr) = 1936289396;
  CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    uint64_t v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "Could not construct");
    __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *a2, @"IOAudioStreamNumericRepresentation", &cf);
  CFNumberRef v13 = valuePtr;
  if (!valuePtr) {
    goto LABEL_95;
  }
  int v14 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  CFRelease(v13);
  if (cf) {
    CFRelease(cf);
  }
  BOOL v42 = v14 == 1718382452;
  BOOL v15 = v14 == 1936289396;
  if (!*a2) {
    goto LABEL_95;
  }
  LODWORD(valuePtr) = v12;
  CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    uint64_t v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v38, "Could not construct");
    __cxa_throw(v38, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *a2, @"IOAudioStreamBitWidth", &cf);
  CFNumberRef v16 = valuePtr;
  if (!valuePtr) {
    goto LABEL_95;
  }
  unsigned int v17 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  CFRelease(v16);
  if (cf) {
    CFRelease(cf);
  }
  BOOL v18 = v17 == v12;
  if (!*a2) {
    goto LABEL_95;
  }
  LODWORD(valuePtr) = 1;
  CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    uint64_t v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v39, "Could not construct");
    __cxa_throw(v39, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *a2, @"IOAudioStreamAlignment", &cf);
  CFNumberRef v19 = valuePtr;
  if (!valuePtr) {
    goto LABEL_95;
  }
  int v20 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  CFRelease(v19);
  if (cf) {
    CFRelease(cf);
  }
  BOOL v21 = v20 == 1;
  if (!*a2) {
    goto LABEL_95;
  }
  LODWORD(valuePtr) = 0;
  CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    uint64_t v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v40, "Could not construct");
    __cxa_throw(v40, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *a2, @"IOAudioStreamByteOrder", &cf);
  CFNumberRef v22 = valuePtr;
  if (!valuePtr) {
    goto LABEL_95;
  }
  int v23 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  CFRelease(v22);
  if (cf) {
    CFRelease(cf);
  }
  BOOL v24 = v23 == 0;
  if (!*a2) {
    goto LABEL_95;
  }
  LODWORD(valuePtr) = 1;
  CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    uint64_t v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v41, "Could not construct");
    __cxa_throw(v41, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *a2, @"IOAudioStreamIsMixable", &cf);
  CFNumberRef v25 = valuePtr;
  if (!valuePtr)
  {
LABEL_95:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_96:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v26 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
  CFRelease(v25);
  if (cf) {
    CFRelease(cf);
  }
  int v27 = 2 * v24;
  if (v5 == 1819304813)
  {
    int v28 = (4 * v15) | v42 | (8 * v18) | (16 * v21) | ((v26 == 0) << 6) | v27;
    if (!v28) {
      int v28 = 0x80000000;
    }
    int v29 = v10 * (v17 >> 3);
    *((_DWORD *)this + 3) = v28;
    *((_DWORD *)this + 4) = v29;
    *((_DWORD *)this + 5) = 1;
    *((_DWORD *)this + 6) = v29;
  }
  else if (v5 == 1667326771)
  {
    *((_DWORD *)this + 3) = v27 | 0x4C;
    *((_DWORD *)this + 4) = 4 * v43;
    *((void *)this + 3) = 0x200000000;
    *((_DWORD *)this + 8) = 16;
  }
}

void sub_1BAD1A450(void *a1)
{
  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

BOOL AMCP::IOAudio1::get_stream_direction(CFDictionaryRef theDict, const applesauce::CF::DictionaryRef *a2)
{
  if (!theDict)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_9;
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v5, theDict, @"IOAudioStreamDirection");
  if (!v6)
  {
    BOOL v2 = 0;
    goto LABEL_6;
  }
  if (!v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_9:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v2 = applesauce::CF::convert_to<unsigned int,0>(v5) == 1;
LABEL_6:
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v5);
  return v2;
}

void sub_1BAD1A634(void *a1)
{
  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

unint64_t AMCP::IOAudio1::get_stream_starting_channel(CFDictionaryRef theDict, const applesauce::CF::DictionaryRef *a2)
{
  if (!theDict)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_9;
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&v5, theDict, @"IOAudioStreamStartingChannelNumber");
  if (!v6)
  {
    unint64_t v2 = 0;
    goto LABEL_6;
  }
  if (!v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_9:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v2 = applesauce::CF::convert_to<unsigned int,0>(v5);
LABEL_6:
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v5);
  return v2;
}

void sub_1BAD1A714(void *a1)
{
  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

void AMCP::IOAudio1::Stream::create_from_service_list(uint64_t a1, uint64_t a2, io_registry_entry_t *a3, io_registry_entry_t *a4)
{
  uint64_t v23 = 0;
  long long v5 = 0uLL;
  long long v22 = 0u;
  uint64_t v21 = 0;
  long long v20 = 0u;
  if (a3 == a4)
  {
    uint64_t v13 = 0;
    uint64_t v11 = 0;
    long long v12 = 0uLL;
    goto LABEL_22;
  }
  CFNumberRef v7 = a3;
  do
  {
    io_registry_entry_t v8 = *v7;
    if (!*v7)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      BOOL v15 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
      std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
      CFNumberRef v16 = (struct type_info *)MEMORY[0x1E4FBA338];
      goto LABEL_26;
    }
    CFMutableDictionaryRef properties = 0;
    uint64_t v9 = IORegistryEntryCreateCFProperties(v8, &properties, 0, 0);
    if (v9)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
      BOOL v15 = (void (*)(void *))MEMORY[0x1E4FBA220];
      unsigned int v17 = std::system_category();
      MEMORY[0x1C1859250](exception, v9, v17, "Error on get_properties");
      CFNumberRef v16 = (struct type_info *)MEMORY[0x1E4FBA2F0];
LABEL_26:
      __cxa_throw(exception, v16, v15);
    }
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, properties);
    if (!cf) {
      goto LABEL_27;
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::BooleanRef,__CFString const*>(&v26, (CFDictionaryRef)cf, @"IOAudioStreamAvailable");
    if (v27)
    {
      if (!v26) {
        goto LABEL_27;
      }
      BOOL v10 = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)v26);
    }
    else
    {
      if (!cf) {
        goto LABEL_27;
      }
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&properties, (CFDictionaryRef)cf, @"IOAudioStreamAvailable");
      if (!v25)
      {
        std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&properties);
        std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v26);
LABEL_16:
        operator new();
      }
      if (!properties)
      {
LABEL_27:
        BOOL v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v18, "Could not construct");
        __cxa_throw(v18, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      BOOL v10 = applesauce::CF::convert_to<BOOL,0>(properties);
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&properties);
    }
    std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v26);
    if (v10) {
      goto LABEL_16;
    }
    if (cf) {
      CFRelease(cf);
    }
    ++v7;
  }
  while (v7 != a4);
  long long v5 = v22;
  uint64_t v11 = v23;
  long long v12 = v20;
  uint64_t v13 = v21;
LABEL_22:
  *(_OWORD *)a1 = v5;
  *(void *)(a1 + 16) = v11;
  uint64_t v23 = 0;
  long long v22 = 0uLL;
  *(_OWORD *)(a1 + 24) = v12;
  *(void *)(a1 + 40) = v13;
  uint64_t v21 = 0;
  long long v20 = 0uLL;
  int v26 = (void **)&v20;
  std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__destroy_vector::operator()[abi:ne180100](&v26);
  *(void *)&long long v20 = &v22;
  std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
}

void sub_1BAD1AB44(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  __cxa_free_exception(v21);
  __clang_call_terminate(a1);
}

void std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__clear[abi:ne180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::emplace<std::unique_ptr<AMCP::IOAudio1::Stream>>(void *result, uint64_t *a2, uint64_t *a3)
{
  CFNumberRef v4 = (uint64_t **)result;
  char v6 = (uint64_t *)*result;
  long long v5 = (uint64_t *)result[1];
  uint64_t v7 = (uint64_t)a2 - *result;
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = (uint64_t *)(*result + (v7 & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = result + 2;
  unint64_t v10 = result[2];
  if ((unint64_t)v5 >= v10)
  {
    unint64_t v18 = v5 - v6 + 1;
    if (v18 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v20 = v10 - (void)v6;
    if (v20 >> 2 > v18) {
      unint64_t v18 = v20 >> 2;
    }
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v18;
    }
    uint64_t v56 = v11;
    if (v21) {
      unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v21);
    }
    else {
      uint64_t v22 = 0;
    }
    int v29 = (uint64_t *)(v21 + 8 * v8);
    uint64_t v53 = (char *)v21;
    *(void *)&long long v54 = v29;
    *((void *)&v54 + 1) = v29;
    uint64_t v55 = (uint64_t *)(v21 + 8 * v22);
    if (v8 == v22)
    {
      if (v7 < 1)
      {
        if (v6 == a2) {
          unint64_t v32 = 1;
        }
        else {
          unint64_t v32 = v7 >> 2;
        }
        uint64_t v60 = v11;
        unint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v32);
        int v35 = (uint64_t *)v54;
        uint64_t v36 = *((void *)&v54 + 1) - v54;
        if (*((void *)&v54 + 1) == (void)v54)
        {
          int64x2_t v42 = vdupq_n_s64(v54);
          unint64_t v38 = (unint64_t)&v33[8 * (v32 >> 2)];
        }
        else
        {
          uint64_t v37 = v36 >> 3;
          unint64_t v38 = (unint64_t)&v33[8 * (v32 >> 2) + (v36 & 0xFFFFFFFFFFFFFFF8)];
          uint64_t v39 = 8 * v37;
          uint64_t v40 = &v33[8 * (v32 >> 2)];
          do
          {
            uint64_t v41 = *v35;
            *v35++ = 0;
            *(void *)uint64_t v40 = v41;
            v40 += 8;
            v39 -= 8;
          }
          while (v39);
          int64x2_t v42 = (int64x2_t)v54;
        }
        int v43 = v55;
        uint64_t v57 = v53;
        uint64_t v53 = v33;
        *(void *)&long long v54 = &v33[8 * (v32 >> 2)];
        int64x2_t v58 = v42;
        *((void *)&v54 + 1) = v38;
        uint64_t v55 = (uint64_t *)&v33[8 * v34];
        uint64_t v59 = v43;
        std::__split_buffer<std::unique_ptr<AMCP::IOAudio1::Stream>>::~__split_buffer((uint64_t)&v57);
        int v31 = (uint64_t *)*((void *)&v54 + 1);
        int v29 = (uint64_t *)v54;
      }
      else
      {
        if (v8 >= -1) {
          uint64_t v30 = v8 + 1;
        }
        else {
          uint64_t v30 = v8 + 2;
        }
        int v31 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::unique_ptr<AMCP::IOAudio1::Stream> *,std::unique_ptr<AMCP::IOAudio1::Stream> *,std::unique_ptr<AMCP::IOAudio1::Stream> *,0>((uint64_t *)(v21 + 8 * v8), v29, &v29[-(v30 >> 1)]);
        int v29 = (uint64_t *)(v54 - 8 * (v30 >> 1));
      }
    }
    else
    {
      int v31 = (uint64_t *)(v21 + 8 * v8);
    }
    uint64_t v44 = *a3;
    *a3 = 0;
    uint64_t *v31 = v44;
    uint64_t v45 = v31 + 1;
    uint64_t v46 = *v4;
    if (v9 != *v4)
    {
      uint64_t v47 = v9;
      do
      {
        uint64_t v48 = *--v47;
        uint64_t *v47 = 0;
        *--int v29 = v48;
      }
      while (v47 != v46);
    }
    *(void *)&long long v54 = v29;
    uint64_t v49 = v4[1];
    if (v9 != v49)
    {
      do
      {
        uint64_t v50 = *v9;
        *v9++ = 0;
        *v45++ = v50;
      }
      while (v9 != v49);
      int v29 = (uint64_t *)v54;
      uint64_t v9 = v4[1];
    }
    uint64_t v51 = *v4;
    *CFNumberRef v4 = v29;
    v4[1] = v45;
    uint64_t v52 = v4[2];
    uint64_t v4[2] = v55;
    *((void *)&v54 + 1) = v9;
    uint64_t v55 = v52;
    uint64_t v53 = (char *)v51;
    *(void *)&long long v54 = v51;
    return (void *)std::__split_buffer<std::unique_ptr<AMCP::IOAudio1::Stream>>::~__split_buffer((uint64_t)&v53);
  }
  else
  {
    uint64_t v12 = *a3;
    *a3 = 0;
    uint64_t v13 = v9 + 1;
    if (v9 == v5)
    {
      *uint64_t v9 = v12;
      result[1] = v13;
    }
    else
    {
      int v14 = (uint64_t *)result[1];
      BOOL v15 = v14 - 1;
      CFNumberRef v16 = v14;
      while (v15 < v14)
      {
        uint64_t v17 = *v15;
        *v15++ = 0;
        *v16++ = v17;
      }
      result[1] = v16;
      if (v14 != v13)
      {
        uint64_t v23 = v14 - 1;
        uint64_t v24 = 8 * (v14 - v13);
        uint64_t v25 = (uint64_t)&v6[v8 - 1];
        do
        {
          uint64_t v26 = *(void *)(v25 + v24);
          *(void *)(v25 + v24) = 0;
          uint64_t v27 = *v23;
          uint64_t *v23 = v26;
          if (v27) {
            (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
          }
          --v23;
          v24 -= 8;
        }
        while (v24);
      }
      double result = (void *)*v9;
      *uint64_t v9 = v12;
      if (result)
      {
        int v28 = *(uint64_t (**)(void))(*result + 8);
        return (void *)v28();
      }
    }
  }
  return result;
}

void sub_1BAD1AFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__split_buffer<std::unique_ptr<AMCP::IOAudio1::Stream>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::unique_ptr<AMCP::IOAudio1::Stream> *,std::unique_ptr<AMCP::IOAudio1::Stream> *,std::unique_ptr<AMCP::IOAudio1::Stream> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  if (a1 != a2)
  {
    long long v5 = a1;
    do
    {
      uint64_t v6 = *v5;
      *long long v5 = 0;
      uint64_t v7 = *a3;
      *a3 = v6;
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      ++v5;
      ++a3;
    }
    while (v5 != a2);
  }
  return a3;
}

void *std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__clear[abi:ne180100](void *result)
{
  integer_t v1 = result;
  unint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    double result = v4;
    void *v3 = 0;
    if (v4) {
      double result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

BOOL AMCP::IOAudio1::operator==(io_object_t object, io_object_t a2)
{
  BOOL result = (object | a2) == 0;
  if (object)
  {
    if (a2) {
      return IOObjectIsEqualTo(object, a2) != 0;
    }
  }
  return result;
}

void AMCP::IOAudio1::Stream::build_core(AMCP::IOAudio1::Stream *this)
{
  *((_DWORD *)this + 4) = AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(*(void *)(*(void *)(*((void *)this + 1) + 16)
                                                                                                  + 32)
                                                                                      + 16));
  *(_OWORD *)std::logic_error __p = 0u;
  *(_OWORD *)CFNumberRef v19 = 0u;
  int v20 = 1065353216;
  io_registry_entry_t v2 = *((_DWORD *)this + 5);
  if (!v2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v8 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
    std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
    uint64_t v9 = (struct type_info *)MEMORY[0x1E4FBA338];
    goto LABEL_32;
  }
  *(void *)&long long properties = 0;
  uint64_t CFProperties = IORegistryEntryCreateCFProperties(v2, (CFMutableDictionaryRef *)&properties, 0, 0);
  if (CFProperties)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    uint64_t v8 = (void (*)(void *))MEMORY[0x1E4FBA220];
    unint64_t v10 = std::system_category();
    MEMORY[0x1C1859250](exception, CFProperties, v10, "Error on get_properties");
    uint64_t v9 = (struct type_info *)MEMORY[0x1E4FBA2F0];
LABEL_32:
    __cxa_throw(exception, v9, v8);
  }
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v17, (CFTypeRef)properties);
  LODWORD(v14) = *((_DWORD *)this + 4);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&properties, 0, (int *)&v14, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(properties + 40), &properties);
  if (*((void *)&properties + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&properties + 1));
  }
  LODWORD(v14) = 1634956402;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&properties, 0, (int *)&v14, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(properties + 40), &properties);
  if (*((void *)&properties + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&properties + 1));
  }
  LODWORD(v14) = 1634956402;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&properties, 0, (int *)&v14, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(properties + 40), &properties);
  if (*((void *)&properties + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&properties + 1));
  }
  LODWORD(v14) = *(_DWORD *)(*((void *)this + 1) + 32);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&properties, 0, (int *)&v14, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(properties + 40), &properties);
  if (*((void *)&properties + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&properties + 1));
  }
  CFStringRef v4 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.iokit.IOAudio1", 24, 0x8000100u, 0);
  CFTypeRef cf = v4;
  if (!v4)
  {
    uint64_t v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
    __cxa_throw(v11, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v14 = 0x676C6F626F706C67;
  LODWORD(v15) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)&properties, (uint64_t)&v14, v4);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(properties + 40), &properties);
  if (*((void *)&properties + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&properties + 1));
  }
  CFRelease(v4);
  int v5 = *((_DWORD *)this + 4);
  *(void *)&long long properties = *(void *)(*(void *)(*(void *)(*((void *)this + 1) + 16) + 32) + 16);
  DWORD2(properties) = v5;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>(&v14, 0, &properties, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(v14 + 40), &v14);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  AMCP::IOAudio1::Device::get_resource_bundle_url((AMCP::IOAudio1::Device *)&cf, *((void *)this + 1));
  if (cf)
  {
    uint64_t v14 = 0x676C6F6272737263;
    LODWORD(v15) = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>((uint64_t *)&properties, (uint64_t)&v14, cf);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(properties + 40), &properties);
    if (*((void *)&properties + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&properties + 1));
    }
  }
  AMCP::IOAudio1::Device::get_engine_registry_entries(&properties, *(const void **)(*((void *)this + 1) + 464));
  AMCP::IOAudio1::update_stream_core((uint64_t)__p, (AMCP::IOAudio1::Stream *)((char *)this + 20), (AMCP::IOAudio1 **)&properties, (CFDictionaryRef *)&v17);
  if ((void)properties) {
    CFRelease((CFTypeRef)properties);
  }
  AMCP::Core::Broker::make_core(&v12, *(std::__shared_mutex_base **)(*(void *)(*(void *)(*((void *)this + 1) + 16) + 32) + 16), (uint64_t)__p, *((_DWORD *)this + 4));
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v17) {
    CFRelease(v17);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((void *)v19[0]);
  uint64_t v6 = __p[0];
  __p[0] = 0;
  if (v6) {
    operator delete(v6);
  }
}

void sub_1BAD1B55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, const void *);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1BAD1B64C()
{
}

void AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(uint64_t *a1, uint64_t a2, CFTypeRef cf)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (cf) {
    CFRetain(cf);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, *(_DWORD *)(a2 + 8), *(double *)a2);
  uint64_t v6 = *a1;
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::URLRef ()(void)>>();
  if (cf)
  {
    CFRetain(cf);
    uint64_t v11 = 0;
    v10[0] = &unk_1F1481988;
    CFRetain(cf);
  }
  else
  {
    uint64_t v11 = 0;
    v10[0] = &unk_1F1481988;
  }
  v10[1] = cf;
  uint64_t v11 = v10;
  memset(v8, 0, sizeof(v8));
  uint64_t v9 = 0;
  std::__function::__value_func<applesauce::CF::URLRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)v10);
  uint64_t v9 = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::URLRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v8);
  if (v9) {
    v9(0, (uint64_t)v8, 0, 0);
  }
  std::__function::__value_func<applesauce::CF::URLRef ()(void)>::~__value_func[abi:ne180100](v10);
  if (cf) {
    CFRelease(cf);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(v6);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BAD1B7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *AMCP::IOAudio1::Device::get_engine_registry_entries(void *this, const void *a2)
{
  uint64_t v3 = this;
  if (a2) {
    this = CFRetain(a2);
  }
  void *v3 = a2;
  return this;
}

void AMCP::IOAudio1::update_stream_core(uint64_t a1, const applesauce::CF::DictionaryRef *a2, AMCP::IOAudio1 **a3, CFDictionaryRef *a4)
{
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  LODWORD(v89[0]) = AMCP::IOAudio1::get_stream_direction(*a4, a2);
  AMCP::Core::Operation_Utilities::make_typed_property<AMCP::Direction,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1}>((uint64_t *)v99, 0, (int *)v89, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a1, (unsigned int *)v99[0] + 10, v99);
  if (v99[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v99[1]);
  }
  LODWORD(v89[0]) = AMCP::IOAudio1::get_stream_starting_channel(*a4, v8);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v99, 0, (int *)v89, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a1, (unsigned int *)v99[0] + 10, v99);
  if (v99[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v99[1]);
  }
  if (!*a4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  LODWORD(valuePtr) = 0;
  v89[0] = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v89[0])
  {
    uint64_t v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v59, "Could not construct");
    __cxa_throw(v59, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(v99, *a4, @"IOAudioStreamReference", v89);
  CFTypeRef v9 = v99[0];
  if (!v99[0])
  {
    uint64_t v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v60, "Could not construct");
    __cxa_throw(v60, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (applesauce::CF::convert_to<BOOL,0>((const __CFNumber *)v99[0]))
  {
    BOOL v10 = 1;
  }
  else
  {
    if (!*a4)
    {
      mach_port_t v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v74, "Could not construct");
      __cxa_throw(v74, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    LODWORD(object.__vftable) = 0;
    cf[0] = CFNumberCreate(0, kCFNumberIntType, &object);
    if (!cf[0])
    {
      __int16 v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v75, "Could not construct");
      __cxa_throw(v75, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(&valuePtr, *a4, @"IOAudioStreamTap", cf);
    CFDictionaryRef v11 = valuePtr;
    if (!valuePtr)
    {
      int v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v76, "Could not construct");
      __cxa_throw(v76, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    BOOL v10 = applesauce::CF::convert_to<BOOL,0>(valuePtr);
    CFRelease(v11);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
  CFRelease(v9);
  if (v89[0]) {
    CFRelease(v89[0]);
  }
  LODWORD(v89[0]) = v10;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v99, 0, (int *)v89, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a1, (unsigned int *)v99[0] + 10, v99);
  if (v99[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v99[1]);
  }
  if (!*a4)
  {
    uint64_t v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v61);
    __cxa_throw(v61, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  LODWORD(valuePtr) = 0;
  v89[0] = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v89[0])
  {
    uint64_t v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v62, "Could not construct");
    __cxa_throw(v62, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(v99, *a4, @"IOAudioStreamTerminalType", v89);
  CFTypeRef v12 = v99[0];
  if (!v99[0])
  {
    int v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v63, "Could not construct");
    __cxa_throw(v63, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v13 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v99[0]);
  CFRelease(v12);
  if (v89[0]) {
    CFRelease(v89[0]);
  }
  LODWORD(v89[0]) = v13;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v99, 0, (int *)v89, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a1, (unsigned int *)v99[0] + 10, v99);
  if (v99[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v99[1]);
  }
  if (!*a4)
  {
    __int16 v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v64);
    __cxa_throw(v64, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  LODWORD(valuePtr) = 0;
  v89[0] = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v89[0])
  {
    int v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v65, "Could not construct");
    __cxa_throw(v65, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(v99, *a4, @"IOAudioStreamSampleLatency", v89);
  CFTypeRef v14 = v99[0];
  if (!v99[0])
  {
    uint64_t v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v66, "Could not construct");
    __cxa_throw(v66, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v15 = applesauce::CF::convert_to<int,0>((const __CFNumber *)v99[0]);
  CFRelease(v14);
  if (v89[0]) {
    CFRelease(v89[0]);
  }
  LODWORD(v89[0]) = v15;
  AMCP::Core::Operation_Utilities::make_typed_property<int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1}>((uint64_t *)v99, 0, (int *)v89, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a1, (unsigned int *)v99[0] + 10, v99);
  if (v99[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v99[1]);
  }
  CFDictionaryRef v16 = *a4;
  if (!*a4)
  {
    char v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v67);
    __cxa_throw(v67, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v99[0] = 0;
  applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&theArray, v16, @"IOAudioStreamAvailableFormats", v99);
  CFTypeRef v17 = (AMCP::Log::Scope_Registry *)v99[0];
  if (v99[0]) {
    CFRelease(v99[0]);
  }
  CFArrayRef v18 = theArray;
  if (!theArray)
  {
    AMCP::Log::Scope_Registry::get(v17);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v99, "com.apple.coreaudio", "AMCP");
    uint64_t v55 = *(NSObject **)v99[0];
    if (v99[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v99[1]);
    }
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      uint64_t v56 = pthread_self();
      mach_port_t v57 = pthread_mach_thread_np(v56);
      LODWORD(v99[0]) = 67109890;
      HIDWORD(v99[0]) = v57;
      LOWORD(v99[1]) = 2080;
      *(CFTypeRef *)((char *)&v99[1] + 2) = "IOAudio1_Stream.cpp";
      WORD1(v99[2]) = 1024;
      HIDWORD(v99[2]) = 363;
      LOWORD(v99[3]) = 2080;
      *(CFTypeRef *)((char *)&v99[3] + 2) = "(raw_available_format_list.is_valid()) == false";
      _os_log_error_impl(&dword_1BAA78000, v55, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to find the current format for a stream", (uint8_t *)v99, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v86);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&object, "failed to find the available format list for a stream");
    std::runtime_error::runtime_error((std::runtime_error *)v89, &object);
    *((void *)&v90 + 1) = 0;
    uint64_t v91 = 0;
    uint64_t v92 = 0;
    int v93 = -1;
    v89[0] = &unk_1F148A9A8;
    *(void *)&long long v90 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)v99, (uint64_t)v89);
    v99[4] = "void AMCP::IOAudio1::update_stream_core(Core::Operation_Set &, const IOKit::Service &, const CF::Dictionary"
             " &, const CF::Dictionary &)";
    v99[5] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IOAudio1/IOAudio1_Stream.cpp";
    int v100 = 363;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)cf);
    long long v102 = *(_OWORD *)cf;
    CFDictionaryRef valuePtr = (const __CFDictionary *)&unk_1F148AA90;
    uint64_t v103 = v96;
    cf[0] = 0;
    cf[1] = 0;
    uint64_t v96 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v77 = a4;
  uint64_t v78 = (io_object_t *)a2;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  unint64_t v88 = 0;
  CFIndex Count = CFArrayGetCount(theArray);
  int v20 = 0;
  unint64_t v21 = 0;
  uint64_t v22 = 0;
  unint64_t v23 = 0;
  CFArrayRef v24 = v18;
LABEL_38:
  for (CFIndex i = CFArrayGetCount(v24); v23 != Count && (v18 != v24 || v23 != i); CFIndex i = 0)
  {
    applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&valuePtr, v18, v23);
    AMCP::IOAudio1::make_format_from_dictionary((AMCP::IOAudio1 *)v99, &valuePtr);
    double v26 = *(double *)v99;
    *(_OWORD *)uint64_t v89 = *(_OWORD *)&v99[1];
    long long v90 = *(_OWORD *)&v99[3];
    double sample_rate_from_dictionary = AMCP::IOAudio1::make_sample_rate_from_dictionary(valuePtr, (const applesauce::CF::DictionaryRef *)@"IOAudioStreamMinimumSampleRate", v27);
    double v30 = AMCP::IOAudio1::make_sample_rate_from_dictionary(valuePtr, (const applesauce::CF::DictionaryRef *)@"IOAudioStreamMaximumSampleRate", v29);
    if (sample_rate_from_dictionary == v30) {
      double v26 = sample_rate_from_dictionary;
    }
    if ((unint64_t)v22 >= v21)
    {
      unint64_t v32 = 0x6DB6DB6DB6DB6DB7 * (v22 - v20) + 1;
      if (v32 > 0x492492492492492)
      {
        uint64_t v87 = v22;
        unint64_t v88 = v21;
        uint64_t v86 = v20;
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v21 - (void)v20) >> 3) > v32) {
        unint64_t v32 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v21 - (void)v20) >> 3);
      }
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v21 - (void)v20) >> 3)) >= 0x249249249249249) {
        unint64_t v33 = 0x492492492492492;
      }
      else {
        unint64_t v33 = v32;
      }
      if (v33) {
        unint64_t v33 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v33);
      }
      else {
        uint64_t v34 = 0;
      }
      unint64_t v35 = v33 + 8 * (v22 - v20);
      *(double *)unint64_t v35 = v26;
      *(_OWORD *)(v35 + 8) = *(_OWORD *)v89;
      *(_OWORD *)(v35 + 24) = v90;
      *(double *)(v35 + 40) = sample_rate_from_dictionary;
      *(double *)(v35 + 48) = v30;
      if (v22 == v20)
      {
        uint64_t v37 = (double *)(v33 + 8 * (v22 - v20));
      }
      else
      {
        unint64_t v36 = v33 + 8 * (v22 - v20);
        do
        {
          uint64_t v37 = (double *)(v36 - 56);
          long long v38 = *(_OWORD *)(v22 - 7);
          long long v39 = *(_OWORD *)(v22 - 5);
          long long v40 = *(_OWORD *)(v22 - 3);
          *(double *)(v36 - 8) = *(v22 - 1);
          *(_OWORD *)(v36 - 24) = v40;
          *(_OWORD *)(v36 - 40) = v39;
          *(_OWORD *)(v36 - 56) = v38;
          v22 -= 7;
          v36 -= 56;
        }
        while (v22 != v20);
      }
      unint64_t v21 = v33 + 56 * v34;
      uint64_t v22 = (double *)(v35 + 56);
      if (v20) {
        operator delete(v20);
      }
      int v20 = v37;
    }
    else
    {
      double *v22 = v26;
      long long v31 = *(_OWORD *)v89;
      *(_OWORD *)(v22 + 3) = v90;
      *(_OWORD *)(v22 + 1) = v31;
      v22[5] = sample_rate_from_dictionary;
      void v22[6] = v30;
      v22 += 7;
    }
    if (valuePtr) {
      CFRelease(valuePtr);
    }
    ++v23;
    CFArrayRef v24 = theArray;
    if (theArray) {
      goto LABEL_38;
    }
  }
  uint64_t v87 = v22;
  unint64_t v88 = v21;
  uint64_t v86 = v20;
  AMCP::make_available_format_list((uint64_t *)&v86, &v84);
  v89[0] = (CFTypeRef)0x676C6F62666D7423;
  LODWORD(v89[1]) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>((uint64_t *)v99, (uint64_t)v89, v84, v85);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a1, (unsigned int *)v99[0] + 10, v99);
  if (v99[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v99[1]);
  }
  AMCP::IOAudio1::get_stream_format((AMCP::IOAudio1 *)v89, a3, *v77);
  io_object_t v41 = *v78;
  LODWORD(object.__vftable) = v41;
  if (v41)
  {
    uint64_t v42 = IOObjectRetain(v41);
    if (v42)
    {
      char v68 = __cxa_allocate_exception(0x20uLL);
      char v69 = std::system_category();
      MEMORY[0x1C1859250](v68, v42, v69, "Error on Retain");
      __cxa_throw(v68, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
  }
  object.__imp_.__imp_ = 0;
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>((uint64_t)&object.__imp_, v84, v85, (v85 - v84) >> 6);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v82, 0, 1.58366008e190);
  uint64_t v43 = v82;
  unint64_t v44 = AMCP::Implementation::get_type_marker<std::function<CA::StreamDescription ()(void)>>();
  uint64_t v103 = 0;
  uint64_t v45 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v45 = &unk_1F146D230;
  long long v46 = v90;
  *(_OWORD *)(v45 + 8) = *(_OWORD *)v89;
  *(_OWORD *)(v45 + 24) = v46;
  *((void *)v45 + 5) = v91;
  uint64_t v103 = v45;
  memset(v99, 0, 40);
  std::__function::__value_func<CA::StreamDescription ()(void)>::__value_func[abi:ne180100]((uint64_t)v99, (uint64_t)&valuePtr);
  v99[4] = AMCP::Implementation::In_Place_Storage<std::function<CA::StreamDescription ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v43, v44, (AMCP *)v99);
  if (v99[4]) {
    ((void (*)(void, CFTypeRef *, void, void))v99[4])(0, v99, 0, 0);
  }
  std::__function::__value_func<CA::StreamDescription ()(void)>::~__value_func[abi:ne180100](&valuePtr);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::StreamDescription>(v43);
  unint64_t v47 = AMCP::Implementation::get_type_marker<std::function<void ()(CA::StreamDescription const&)>>();
  io_object_t v48 = (io_object_t)object.__vftable;
  LODWORD(cf[0]) = object.__vftable;
  if (LODWORD(object.__vftable))
  {
    uint64_t v49 = IOObjectRetain((io_object_t)object.__vftable);
    if (v49)
    {
      char v70 = __cxa_allocate_exception(0x20uLL);
      char v71 = std::system_category();
      MEMORY[0x1C1859250](v70, v49, v71, "Error on Retain");
      __cxa_throw(v70, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
  }
  imp = object.__imp_.__imp_;
  uint64_t v51 = v80;
  cf[1] = object.__imp_.__imp_;
  uint64_t v96 = v80;
  uint64_t v52 = v81;
  uint64_t v97 = v81;
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  object.__imp_.__imp_ = 0;
  uint64_t v103 = 0;
  uint64_t v53 = operator new(0x28uLL);
  *(void *)uint64_t v53 = &unk_1F146D2B0;
  v53[2] = v48;
  if (v48)
  {
    uint64_t v54 = IOObjectRetain(v48);
    if (v54)
    {
      char v72 = __cxa_allocate_exception(0x20uLL);
      uint64_t v73 = std::system_category();
      MEMORY[0x1C1859250](v72, v54, v73, "Error on Retain");
      __cxa_throw(v72, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
  }
  *((void *)v53 + 2) = imp;
  *((void *)v53 + 3) = v51;
  *((void *)v53 + 4) = v52;
  uint64_t v96 = 0;
  uint64_t v97 = 0;
  cf[1] = 0;
  uint64_t v103 = v53;
  memset(v99, 0, 40);
  std::__function::__value_func<void ()(CA::StreamDescription const&)>::__value_func[abi:ne180100]((uint64_t)v99, (uint64_t)&valuePtr);
  v99[4] = AMCP::Implementation::In_Place_Storage<std::function<void ()(CA::StreamDescription const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v43, v47, (AMCP *)v99);
  if (v99[4]) {
    ((void (*)(void, CFTypeRef *, void, void))v99[4])(0, v99, 0, 0);
  }
  std::__function::__value_func<void ()(CA::StreamDescription const&)>::~__value_func[abi:ne180100](&valuePtr);
  std::string::size_type v98 = &cf[1];
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
  if (LODWORD(cf[0])) {
    IOObjectRelease((io_object_t)cf[0]);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(v43);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a1, (unsigned int *)(v43 + 40), &v82);
  if (v83) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v83);
  }
  v99[0] = &object.__imp_;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)v99);
  if (LODWORD(object.__vftable)) {
    IOObjectRelease((io_object_t)object.__vftable);
  }
  v99[0] = &v84;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)v99);
  if (v20)
  {
    uint64_t v87 = v20;
    operator delete(v20);
    CFArrayRef v24 = theArray;
  }
  if (v24) {
    CFRelease(v24);
  }
}

void sub_1BAD1C698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::runtime_error a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,const void *a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
}

uint64_t AMCP::Core::Operation_Utilities::make_typed_property<AMCP::Direction,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1}>(uint64_t *a1, int a2, int *a3, double a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, a2, a4);
  uint64_t v6 = *a1;
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<AMCP::Direction ()(void)>>();
  int v8 = *a3;
  CFDictionaryRef v11 = 0;
  CFTypeRef v12 = &unk_1F1485488;
  int v13 = v8;
  CFTypeRef v14 = &v12;
  memset(v10, 0, sizeof(v10));
  std::__function::__value_func<AMCP::Direction ()(void)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)&v12);
  CFDictionaryRef v11 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Direction ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v10);
  if (v11) {
    v11(0, (uint64_t)v10, 0, 0);
  }
  std::__function::__value_func<AMCP::Direction ()(void)>::~__value_func[abi:ne180100](&v12);
  return AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Direction>(v6);
}

void sub_1BAD1CA18(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>((uint64_t)&v9, a3, a4, (a4 - a3) >> 6);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, *(_DWORD *)(a2 + 8), *(double *)a2);
  uint64_t v6 = *a1;
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>();
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>((uint64_t)&v12, v9, v10, (v10 - v9) >> 6);
  CFNumberRef v19 = 0;
  int v8 = operator new(0x20uLL);
  *int v8 = &unk_1F1477430;
  _OWORD v8[2] = 0;
  v8[3] = 0;
  v8[1] = 0;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>((uint64_t)(v8 + 1), v12, v13, (v13 - v12) >> 6);
  CFNumberRef v19 = v8;
  memset(v15, 0, sizeof(v15));
  CFDictionaryRef v16 = 0;
  std::__function::__value_func<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v18);
  CFDictionaryRef v16 = AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v15);
  if (v16) {
    v16(0, (uint64_t)v15, 0, 0);
  }
  std::__function::__value_func<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::~__value_func[abi:ne180100](v18);
  CFTypeRef v17 = (void **)&v12;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v17);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(v6);
  *(void *)&v15[0] = &v9;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)v15);
}

void sub_1BAD1CBD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__value_func<void ()(CA::StreamDescription const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(CA::StreamDescription const&)>::~__value_func[abi:ne180100](void *a1)
{
  io_registry_entry_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  unint64_t v23 = 0;
  uint64_t v6 = operator new(0x40uLL);
  *uint64_t v6 = &unk_1F14776E0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  unint64_t v23 = v6;
  memset(v20, 0, sizeof(v20));
  unint64_t v21 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  unint64_t v21 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<void ()(AMCP::Thing const&)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAD1CEDC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1::~$_1(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 8);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(_DWORD *)a1) {
    IOObjectRelease(*(_DWORD *)a1);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_setterIN2CA17StreamDescriptionEEEvRNS0_9OperationEEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(a1 + 8);
  AMCP::Thing::convert_to<CA::StreamDescription>((uint64_t)v4, a2);
  return AMCP::Core::Operation::call_function<void,CA::StreamDescription const&>(v2, (uint64_t)v4);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14776E0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F14776E0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAD1D0D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14776E0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14776E0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(CA::StreamDescription const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(CA::StreamDescription const&)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(CA::StreamDescription const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(CA::StreamDescription const&)>>::dispatch;
LABEL_6:
      std::__function::__value_func<void ()(CA::StreamDescription const&)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(CA::StreamDescription const&)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(CA::StreamDescription const&)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(CA::StreamDescription const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(CA::StreamDescription const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio1L18update_stream_coreERNS_4Core13Operation_SetERKN10applesauce5iokit16io_object_holderERKNS4_2CF13DictionaryRefESC_E3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(CA::StreamDescription const&)>::operator()(uint64_t a1, uint64_t a2)
{
}

void AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1::operator()(uint64_t a1, uint64_t a2)
{
  v179[2] = *MEMORY[0x1E4F143B8];
  BOOL is_an_available_format = AMCP::Utility::Stream_Format::format_is_an_available_format(a2, *(void *)(a1 + 8), *(void *)(a1 + 16));
  if (!is_an_available_format)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_an_available_format);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v76 = **(NSObject ***)buf;
    if ((void)v159) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v159);
    }
    if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
    {
      uint64_t v77 = pthread_self();
      mach_port_t v78 = pthread_mach_thread_np(v77);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v78;
      LOWORD(v159) = 2080;
      *(void *)((char *)&v159 + 2) = "IOAudio1_Stream.cpp";
      WORD5(v159) = 1024;
      HIDWORD(v159) = 378;
      LOWORD(v160) = 2080;
      *(void *)((char *)&v160 + 2) = "(format_is_valid) == false";
      _os_log_error_impl(&dword_1BAA78000, v76, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set stream format", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v152);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v132, "failed to set stream format");
    std::runtime_error::runtime_error(&v154, &v132);
    memset(v156, 0, sizeof(v156));
    int v157 = -1;
    v154.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    CFStringRef v155 = (CFStringRef)&unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v154);
    *((void *)&v160 + 1) = "auto AMCP::IOAudio1::update_stream_core(Core::Operation_Set &, const IOKit::Service &, cons"
                             "t CF::Dictionary &, const CF::Dictionary &)::(anonymous class)::operator()(const CA::Stream"
                             "Description &) const";
    mach_port_t v161 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IOAudio1/IOAudio1_Stream.cpp";
    LODWORD(v162) = 378;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v127);
    long long v130 = v127;
    uint64_t v131 = v128;
    long long v127 = 0uLL;
    uint64_t v128 = 0;
    uint64_t v129 = (std::runtime_error *)&unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  if (!*(_DWORD *)a1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)"IOAudioStreamFormat", 19, 0x8000100u, 0);
  v126[1] = v5;
  if (!v5)
  {
    uint64_t v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v80, "Could not construct");
    __cxa_throw(v80, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v6 = v5;
  CFStringRef v7 = CFStringCreateWithBytes(0, (const UInt8 *)"IOAudioSampleRate", 17, 0x8000100u, 0);
  CFStringRef v8 = v7;
  v144[3] = v7;
  if (!v7)
  {
    uint64_t v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v81, "Could not construct");
    __cxa_throw(v81, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v7);
  CFStringRef v125 = v8;
  CFStringRef v145 = v8;
  double v9 = *(double *)a2;
  CFStringRef v10 = CFStringCreateWithBytes(0, (const UInt8 *)"IOAudioSampleRateWholeNumber", 28, 0x8000100u, 0);
  uint64_t v11 = (std::runtime_error_vtbl *)v10;
  mach_port_t v152 = (void *)v10;
  if (!v10)
  {
    uint64_t v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v82, "Could not construct");
    __cxa_throw(v82, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v116 = (io_registry_entry_t *)a1;
  CFRetain(v10);
  v132.__vftable = v11;
  LODWORD(valuePtr) = vcvtmd_u64_f64(v9);
  CFNumberRef v12 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  uint64_t v13 = (const char *)v12;
  std::string v150 = v12;
  if (!v12)
  {
    uint64_t v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v83, "Could not construct");
    __cxa_throw(v83, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v12);
  v132.__vftable = 0;
  v154.__vftable = v11;
  v154.__imp_.__imp_ = v13;
  CFStringRef v151 = 0;
  CFStringRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)"IOAudioSampleRateFraction", 25, 0x8000100u, 0);
  CFStringRef v15 = v14;
  std::string v148 = (void *)v14;
  if (!v14)
  {
    uint64_t v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v84, "Could not construct");
    __cxa_throw(v84, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v14);
  CFStringRef valuePtr = v15;
  LODWORD(v144[0]) = ((v9 - floor(v9)) * 4294967300.0);
  CFNumberRef v16 = CFNumberCreate(0, kCFNumberIntType, v144);
  CFNumberRef v17 = v16;
  mach_port_t v146 = v16;
  if (!v16)
  {
    uint64_t v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v85, "Could not construct");
    __cxa_throw(v85, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v117 = v6;
  CFRetain(v16);
  CFStringRef valuePtr = 0;
  CFStringRef v155 = v15;
  v156[0] = v17;
  CFStringRef v147 = 0;
  uint64_t v129 = &v154;
  *(void *)&long long v130 = 2;
  uint64_t v18 = 0;
  CFDictionaryRef CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v129);
  v144[1] = CFDictionaryRef;
  do
  {
    int v19 = (const void *)v156[v18];
    if (v19) {
      CFRelease(v19);
    }
    uint64_t v20 = *(const void **)((char *)&v154 + v18 * 8 + 16);
    if (v20) {
      CFRelease(v20);
    }
    v18 -= 2;
  }
  while (v18 != -4);
  CFRelease(v17);
  CFRelease(v15);
  CFRelease(v13);
  CFRelease(v11);
  CFRetain(CFDictionaryRef);
  CFStringRef v145 = 0;
  *(void *)std::string buf = v125;
  *(void *)&long long v159 = CFDictionaryRef;
  v144[2] = 0;
  CFStringRef v21 = CFStringCreateWithBytes(0, (const UInt8 *)"IOAudioStreamNumChannels", 24, 0x8000100u, 0);
  uint64_t v22 = (std::runtime_error_vtbl *)v21;
  uint64_t v129 = (std::runtime_error *)v21;
  if (!v21)
  {
    uint64_t v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v86, "Could not construct");
    __cxa_throw(v86, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v21);
  v154.__vftable = v22;
  LODWORD(v151) = *(_DWORD *)(a2 + 28);
  CFNumberRef v23 = CFNumberCreate(0, kCFNumberIntType, &v151);
  CFNumberRef v24 = v23;
  mach_port_t v152 = v23;
  if (!v23)
  {
    uint64_t v87 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v87, "Could not construct");
    __cxa_throw(v87, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v23);
  v154.__vftable = 0;
  *((void *)&v159 + 1) = v22;
  *(void *)&long long v160 = v24;
  v132.__vftable = 0;
  CFStringRef v25 = CFStringCreateWithBytes(0, (const UInt8 *)"IOAudioStreamSampleFormat", 25, 0x8000100u, 0);
  CFStringRef v26 = v25;
  std::string v150 = (void *)v25;
  if (!v25)
  {
    unint64_t v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v88, "Could not construct");
    __cxa_throw(v88, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v25);
  CFStringRef v151 = v26;
  LODWORD(v147) = *(_DWORD *)(a2 + 8);
  CFNumberRef v27 = CFNumberCreate(0, kCFNumberIntType, &v147);
  int v28 = (const char *)v27;
  std::string v148 = v27;
  if (!v27)
  {
    uint64_t v89 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v89, "Could not construct");
    __cxa_throw(v89, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v27);
  CFStringRef v151 = 0;
  *((void *)&v160 + 1) = v26;
  mach_port_t v161 = v28;
  CFStringRef valuePtr = 0;
  CFStringRef v29 = CFStringCreateWithBytes(0, (const UInt8 *)"IOAudioStreamNumericRepresentation", 34, 0x8000100u, 0);
  CFStringRef v30 = v29;
  mach_port_t v146 = (void *)v29;
  if (!v29)
  {
    long long v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v90, "Could not construct");
    __cxa_throw(v90, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v29);
  int v31 = 1936289396;
  CFStringRef v123 = v30;
  CFStringRef v147 = v30;
  int v32 = *(_DWORD *)(a2 + 8);
  if (v32 != 1667326771)
  {
    if (v32 == 1819304813)
    {
      int v33 = *(_DWORD *)(a2 + 12);
      if (v33)
      {
        int v31 = 1718382452;
      }
      else if ((v33 & 4) != 0)
      {
        int v31 = 1936289396;
      }
      else
      {
        int v31 = 1969843828;
      }
    }
    else
    {
      int v31 = 0;
    }
  }
  LODWORD(v143[0]) = v31;
  CFNumberRef v34 = CFNumberCreate(0, kCFNumberIntType, v143);
  CFNumberRef v35 = v34;
  v143[1] = v34;
  if (!v34)
  {
    uint64_t v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v91, "Could not construct");
    __cxa_throw(v91, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v34);
  CFStringRef v147 = 0;
  CFStringRef v162 = v123;
  CFNumberRef v115 = v35;
  CFNumberRef v163 = v35;
  v144[0] = 0;
  CFStringRef v36 = CFStringCreateWithBytes(0, (const UInt8 *)"IOAudioStreamFormatFlags", 24, 0x8000100u, 0);
  CFStringRef v37 = v36;
  v142[3] = v36;
  if (!v36)
  {
    uint64_t v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v92, "Could not construct");
    __cxa_throw(v92, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v36);
  int v38 = 0;
  CFStringRef v122 = v37;
  v143[0] = v37;
  int v39 = *(_DWORD *)(a2 + 8);
  if (v39 != 1667326771 && v39 != 1819304813) {
    int v38 = *(_DWORD *)(a2 + 12);
  }
  LODWORD(v142[0]) = v38;
  CFNumberRef v40 = CFNumberCreate(0, kCFNumberIntType, v142);
  CFNumberRef v41 = v40;
  v142[1] = v40;
  if (!v40)
  {
    int v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v93, "Could not construct");
    __cxa_throw(v93, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v40);
  v143[0] = 0;
  CFStringRef v164 = v122;
  CFNumberRef v114 = v41;
  CFNumberRef v165 = v41;
  v142[2] = 0;
  CFStringRef v42 = CFStringCreateWithBytes(0, (const UInt8 *)"IOAudioStreamFramesPerPacket", 28, 0x8000100u, 0);
  CFStringRef v43 = v42;
  v141[3] = v42;
  if (!v42)
  {
    int16x8_t v94 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v94, "Could not construct");
    __cxa_throw(v94, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v42);
  CFStringRef v121 = v43;
  v142[0] = v43;
  LODWORD(v141[0]) = *(_DWORD *)(a2 + 20);
  CFNumberRef v44 = CFNumberCreate(0, kCFNumberIntType, v141);
  CFNumberRef v45 = v44;
  v141[1] = v44;
  if (!v44)
  {
    uint64_t v95 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v95, "Could not construct");
    __cxa_throw(v95, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v44);
  v142[0] = 0;
  CFStringRef v166 = v121;
  CFNumberRef v113 = v45;
  CFNumberRef v167 = v45;
  v141[2] = 0;
  CFStringRef v46 = CFStringCreateWithBytes(0, (const UInt8 *)"IOAudioStreamBytesPerPacket", 27, 0x8000100u, 0);
  CFStringRef v47 = v46;
  v140[3] = v46;
  if (!v46)
  {
    uint64_t v96 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v96, "Could not construct");
    __cxa_throw(v96, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v46);
  CFStringRef v120 = v47;
  v141[0] = v47;
  LODWORD(v140[0]) = *(_DWORD *)(a2 + 16);
  CFNumberRef v48 = CFNumberCreate(0, kCFNumberIntType, v140);
  CFNumberRef v49 = v48;
  v140[1] = v48;
  if (!v48)
  {
    uint64_t v97 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v97, "Could not construct");
    __cxa_throw(v97, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v48);
  v141[0] = 0;
  CFStringRef v168 = v120;
  CFNumberRef v112 = v49;
  CFNumberRef v169 = v49;
  v140[2] = 0;
  CFStringRef v50 = CFStringCreateWithBytes(0, (const UInt8 *)"IOAudioStreamBitDepth", 21, 0x8000100u, 0);
  CFStringRef v51 = v50;
  v139[3] = v50;
  if (!v50)
  {
    std::string::size_type v98 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v98, "Could not construct");
    __cxa_throw(v98, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v50);
  CFStringRef v119 = v51;
  v140[0] = v51;
  LODWORD(v139[0]) = *(_DWORD *)(a2 + 32);
  CFNumberRef v52 = CFNumberCreate(0, kCFNumberIntType, v139);
  CFNumberRef v53 = v52;
  v139[1] = v52;
  if (!v52)
  {
    uint64_t v99 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v99, "Could not construct");
    __cxa_throw(v99, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v52);
  v140[0] = 0;
  CFStringRef v170 = v119;
  CFNumberRef v111 = v53;
  CFNumberRef v171 = v53;
  v139[2] = 0;
  CFStringRef v54 = CFStringCreateWithBytes(0, (const UInt8 *)"IOAudioStreamBitWidth", 21, 0x8000100u, 0);
  CFStringRef v55 = v54;
  v138[3] = v54;
  if (!v54)
  {
    int v100 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v100, "Could not construct");
    __cxa_throw(v100, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v54);
  CFStringRef v118 = v55;
  v139[0] = v55;
  int v56 = *(_DWORD *)(a2 + 8);
  if ((v56 - 778924081) < 3) {
    goto LABEL_44;
  }
  if (v56 == 1667326771)
  {
    unsigned int v57 = 16;
  }
  else
  {
    if (v56 == 1633889587)
    {
LABEL_44:
      unsigned int v57 = 0;
      goto LABEL_45;
    }
    unsigned int v57 = (8 * *(_DWORD *)(a2 + 24)) / *(_DWORD *)(a2 + 28);
  }
LABEL_45:
  LODWORD(v138[0]) = v57;
  CFNumberRef v58 = CFNumberCreate(0, kCFNumberIntType, v138);
  CFNumberRef v59 = v58;
  v138[1] = v58;
  if (!v58)
  {
    uint64_t v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v101, "Could not construct");
    __cxa_throw(v101, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v58);
  v139[0] = 0;
  CFStringRef v172 = v118;
  CFNumberRef cf = v59;
  CFNumberRef v173 = v59;
  v138[2] = 0;
  CFStringRef v60 = CFStringCreateWithBytes(0, (const UInt8 *)"IOAudioStreamAlignment", 22, 0x8000100u, 0);
  CFStringRef v61 = v60;
  v137[3] = v60;
  if (!v60)
  {
    long long v102 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v102, "Could not construct");
    __cxa_throw(v102, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v60);
  v138[0] = v61;
  LODWORD(v137[0]) = (*(_DWORD *)(a2 + 12) >> 4) & 1;
  CFNumberRef v62 = CFNumberCreate(0, kCFNumberIntType, v137);
  CFNumberRef v63 = v62;
  v137[1] = v62;
  if (!v62)
  {
    uint64_t v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v103, "Could not construct");
    __cxa_throw(v103, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v62);
  v138[0] = 0;
  CFStringRef v174 = v61;
  CFNumberRef v175 = v63;
  v137[2] = 0;
  CFStringRef v64 = CFStringCreateWithBytes(0, (const UInt8 *)"IOAudioStreamByteOrder", 22, 0x8000100u, 0);
  CFStringRef v65 = v64;
  v136[3] = v64;
  if (!v64)
  {
    uint64_t v104 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v104, "Could not construct");
    __cxa_throw(v104, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v64);
  v137[0] = v65;
  LODWORD(v136[0]) = ((*(_DWORD *)(a2 + 12) >> 1) & 1) == 0;
  CFNumberRef v66 = CFNumberCreate(0, kCFNumberIntType, v136);
  CFNumberRef v67 = v66;
  v136[1] = v66;
  if (!v66)
  {
    uint64_t v105 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v105, "Could not construct");
    __cxa_throw(v105, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v109 = v26;
  CFRetain(v66);
  v137[0] = 0;
  CFStringRef v176 = v65;
  CFNumberRef v177 = v67;
  v136[2] = 0;
  CFStringRef v68 = CFStringCreateWithBytes(0, (const UInt8 *)"IOAudioStreamIsMixable", 22, 0x8000100u, 0);
  CFStringRef v69 = v68;
  CFStringRef v135 = v68;
  if (!v68)
  {
    uint64_t v106 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v106, "Could not construct");
    __cxa_throw(v106, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v68);
  v136[0] = v69;
  BOOL v153 = ((*(_DWORD *)(a2 + 12) >> 6) & 1) == 0;
  CFNumberRef v70 = CFNumberCreate(0, kCFNumberIntType, &v153);
  CFNumberRef v71 = v70;
  CFNumberRef v133 = v70;
  if (!v70)
  {
    unsigned int v107 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v107, "Could not construct");
    __cxa_throw(v107, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(v70);
  CFNumberRef v108 = v24;
  v136[0] = 0;
  CFStringRef v178 = v69;
  v179[0] = v71;
  uint64_t v134 = 0;
  *(void *)&long long v127 = buf;
  *((void *)&v127 + 1) = 12;
  CFDictionaryRef v72 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v127);
  for (uint64_t i = 0; i != -24; i -= 2)
  {
    mach_port_t v74 = (const void *)v179[i];
    if (v74) {
      CFRelease(v74);
    }
    __int16 v75 = (const void *)v179[i - 1];
    if (v75) {
      CFRelease(v75);
    }
  }
  CFRelease(v71);
  CFRelease(v69);
  CFRelease(v67);
  CFRelease(v65);
  CFRelease(v63);
  CFRelease(v61);
  CFRelease(cf);
  CFRelease(v118);
  CFRelease(v111);
  CFRelease(v119);
  CFRelease(v112);
  CFRelease(v120);
  CFRelease(v113);
  CFRelease(v121);
  CFRelease(v114);
  CFRelease(v122);
  CFRelease(v115);
  CFRelease(v123);
  CFRelease(v28);
  CFRelease(v109);
  CFRelease(v108);
  CFRelease(v22);
  CFRelease(CFDictionaryRef);
  CFRelease(v125);
  CFRetain(v72);
  v126[0] = v72;
  applesauce::iokit::io_object_proxy::set_properties(*v116, v117, v126);
  if (v72) {
    CFRelease(v72);
  }
  CFRelease(v72);
  CFRelease(v117);
}

void sub_1BAD1E6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,const void *a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,std::runtime_error a40,uint64_t a41,uint64_t a42,const void *a43,const void *a44,const void *a45,const void *a46,const void *a47,const void *a48,const void *a49,const void *a50,const void *a51,const void *a52,const void *a53,const void *a54,const void *a55,const void *a56,const void *a57,const void *a58,const void *a59,const void *a60,const void *a61,const void *a62,const void *a63)
{
  applesauce::CF::TypeRef::~TypeRef(&a44);
  applesauce::CF::StringRef::~StringRef(&a43);
  CFDictionaryRef v72 = (applesauce::CF::TypeRefPair *)&STACK[0x360];
  applesauce::CF::TypeRef::~TypeRef(&a46);
  applesauce::CF::NumberRef::~NumberRef(&a45);
  applesauce::CF::TypeRef::~TypeRef(&a48);
  applesauce::CF::StringRef::~StringRef(&a47);
  applesauce::CF::TypeRef::~TypeRef(&a50);
  applesauce::CF::NumberRef::~NumberRef(&a49);
  applesauce::CF::TypeRef::~TypeRef(&a52);
  applesauce::CF::StringRef::~StringRef(&a51);
  applesauce::CF::TypeRef::~TypeRef(&a54);
  applesauce::CF::NumberRef::~NumberRef(&a53);
  applesauce::CF::TypeRef::~TypeRef(&a56);
  applesauce::CF::StringRef::~StringRef(&a55);
  applesauce::CF::TypeRef::~TypeRef(&a58);
  applesauce::CF::NumberRef::~NumberRef(&a57);
  applesauce::CF::TypeRef::~TypeRef(&a60);
  applesauce::CF::StringRef::~StringRef(&a59);
  applesauce::CF::TypeRef::~TypeRef(&a62);
  applesauce::CF::NumberRef::~NumberRef(&a61);
  applesauce::CF::TypeRef::~TypeRef(&a64);
  applesauce::CF::StringRef::~StringRef(&a63);
  applesauce::CF::TypeRef::~TypeRef(&a66);
  applesauce::CF::NumberRef::~NumberRef(&a65);
  applesauce::CF::TypeRef::~TypeRef(&a68);
  applesauce::CF::StringRef::~StringRef(&a67);
  applesauce::CF::TypeRef::~TypeRef(&a70);
  applesauce::CF::NumberRef::~NumberRef(&a69);
  applesauce::CF::TypeRef::~TypeRef((const void **)&STACK[0x200]);
  applesauce::CF::StringRef::~StringRef(&a71);
  applesauce::CF::TypeRef::~TypeRef((const void **)&STACK[0x210]);
  applesauce::CF::NumberRef::~NumberRef((const void **)&STACK[0x208]);
  applesauce::CF::TypeRef::~TypeRef((const void **)&STACK[0x240]);
  applesauce::CF::StringRef::~StringRef((const void **)&STACK[0x238]);
  applesauce::CF::TypeRef::~TypeRef((const void **)&STACK[0x250]);
  applesauce::CF::NumberRef::~NumberRef((const void **)&STACK[0x248]);
  applesauce::CF::TypeRef::~TypeRef((const void **)&STACK[0x260]);
  applesauce::CF::StringRef::~StringRef((const void **)&STACK[0x258]);
  applesauce::CF::TypeRef::~TypeRef((const void **)&a40.__vftable);
  applesauce::CF::NumberRef::~NumberRef((const void **)&STACK[0x268]);
  applesauce::CF::TypeRef::~TypeRef((const void **)&STACK[0x278]);
  applesauce::CF::StringRef::~StringRef((const void **)&a36);
  applesauce::CF::TypeRef::~TypeRef((const void **)&STACK[0x220]);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x218]);
  applesauce::CF::TypeRef::~TypeRef((const void **)&STACK[0x230]);
  applesauce::CF::StringRef::~StringRef((const void **)&STACK[0x228]);
  if (&STACK[0x2B0] != &STACK[0x360])
  {
    do
    {
      CFDictionaryRef v72 = (applesauce::CF::TypeRefPair *)((char *)v72 - 16);
      applesauce::CF::TypeRefPair::~TypeRefPair(v72);
    }
    while (v72 != (applesauce::CF::TypeRefPair *)&STACK[0x2B0]);
  }
  applesauce::CF::StringRef::~StringRef(&a32);
  _Unwind_Resume(a1);
}

BOOL AMCP::Utility::Stream_Format::format_is_an_available_format(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    double v3 = *(double *)a1;
    while (1)
    {
      unint64_t v4 = *(double **)a2;
      CFStringRef v5 = *(double **)(a2 + 8);
      if (v5 != *(double **)a2)
      {
        unint64_t v6 = ((uint64_t)v5 - *(void *)a2) >> 4;
        do
        {
          unint64_t v7 = v6 >> 1;
          CFStringRef v8 = &v4[2 * (v6 >> 1)];
          double v9 = v8[1];
          CFStringRef v10 = v8 + 2;
          v6 += ~(v6 >> 1);
          if (v9 < v3) {
            unint64_t v4 = v10;
          }
          else {
            unint64_t v6 = v7;
          }
        }
        while (v6);
      }
      if (v4 != v5
        && (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*(int32x4_t *)(a1 + 8), *(int32x4_t *)(a2 + 32))), 0xFuLL))) & 1) != 0&& *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 48)&& *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 52)&& *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 56)&& *v4 <= v3)
      {
        break;
      }
      a2 += 64;
      if (a2 == a3)
      {
        a2 = a3;
        return a2 != a3;
      }
    }
  }
  return a2 != a3;
}

void applesauce::iokit::io_object_proxy::set_properties(io_registry_entry_t a1, const __CFString *a2, const void **a3)
{
  if (a2) {
    CFRetain(a2);
  }
  unint64_t v6 = *a3;
  if (v6) {
    CFRetain(v6);
  }
  if (a1)
  {
    uint64_t v7 = IORegistryEntrySetCFProperty(a1, a2, v6);
    if (v7)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      double v9 = std::system_category();
      MEMORY[0x1C1859250](exception, v7, v9, "Error on get_properties");
      __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
  }
  if (v6) {
    CFRelease(v6);
  }
  if (a2) {
    CFRelease(a2);
  }
}

void sub_1BAD1EFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v10);
  applesauce::CF::TypeRef::~TypeRef((const void **)&a9);
  applesauce::CF::StringRef::~StringRef(&a10);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(CA::StreamDescription const&)>::destroy_deallocate(unsigned int *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(CA::StreamDescription const&)>::destroy[abi:ne180100](a1 + 2);

  operator delete(a1);
}

uint64_t std::__function::__alloc_func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(CA::StreamDescription const&)>::destroy[abi:ne180100](unsigned int *a1)
{
  double v3 = (void **)(a1 + 2);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t result = *a1;
  if (result) {
    return IOObjectRelease(result);
  }
  return result;
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(CA::StreamDescription const&)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(CA::StreamDescription const&)>::destroy[abi:ne180100]((unsigned int *)(a1 + 8));
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(CA::StreamDescription const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F146D2B0;
  return std::__compressed_pair_elem<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  io_object_t v4 = *(_DWORD *)a2;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (v4)
  {
    uint64_t v5 = IOObjectRetain(v4);
    if (v5)
    {
      uint64_t v7 = v5;
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      double v9 = std::system_category();
      MEMORY[0x1C1859250](exception, v7, v9, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>(a1 + 8, *(void *)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 6);
  return a1;
}

void sub_1BAD1F174(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(CA::StreamDescription const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F146D2B0;
  std::__compressed_pair_elem<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BAD1F1F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(CA::StreamDescription const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F146D2B0;
  double v3 = (void **)(a1 + 16);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  io_object_t v2 = *(_DWORD *)(a1 + 8);
  if (v2) {
    IOObjectRelease(v2);
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_1>,void ()(CA::StreamDescription const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F146D2B0;
  io_object_t v4 = (void **)(a1 + 16);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v4);
  io_object_t v2 = *(_DWORD *)(a1 + 8);
  if (v2) {
    IOObjectRelease(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_0>,CA::StreamDescription ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_0>,CA::StreamDescription ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio1L18update_stream_coreERNS_4Core13Operation_SetERKN10applesauce5iokit16io_object_holderERKNS4_2CF13DictionaryRefESC_E3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_0>,CA::StreamDescription ()(void)>::operator()@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_0>,CA::StreamDescription ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146D230;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_0>,CA::StreamDescription ()(void)>::__clone(uint64_t a1)
{
  io_object_t v2 = (char *)operator new(0x30uLL);
  *(void *)io_object_t v2 = &unk_1F146D230;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void std::__function::__func<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_0,std::allocator<AMCP::IOAudio1::update_stream_core(AMCP::Core::Operation_Set &,applesauce::iokit::io_object_holder const&,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef const&)::$_0>,CA::StreamDescription ()(void)>::~__func()
{
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyINSt3__16vectorINS3_5tupleIJN2CA14ValueRangeListENS6_17StreamDescriptionEEEENS3_9allocatorIS9_EEEEEENS3_10shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>((uint64_t)a2, *(void *)(a1 + 8), *(void *)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 6);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::destroy_deallocate(void **a1)
{
  io_object_t v2 = a1 + 1;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v2);

  operator delete(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1477430;
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  return std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>((uint64_t)(a2 + 1), *(void *)(a1 + 8), *(void *)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 6);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::__clone(uint64_t a1)
{
  io_object_t v2 = operator new(0x20uLL);
  void *v2 = &unk_1F1477430;
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>((uint64_t)(v2 + 1), *(void *)(a1 + 8), *(void *)(a1 + 16), (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 6);
  return v2;
}

void sub_1BAD1F588(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1477430;
  uint64_t v1 = (void **)(a1 + 8);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v1);

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> const&)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1477430;
  long long v3 = (void **)(a1 + 8);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1}>,AMCP::Direction ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1}>,AMCP::Direction ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyINS_9DirectionEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1}>,AMCP::Direction ()(void)>::operator()(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1}>,AMCP::Direction ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F1485488;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1}>,AMCP::Direction ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F1485488;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1}>,AMCP::Direction ()(void)>::~__func()
{
}

const void **AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1}::~Address(const void **a1)
{
  io_object_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  CFNumberRef v23 = 0;
  unint64_t v6 = operator new(0x40uLL);
  *unint64_t v6 = &unk_1F1481A18;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  CFNumberRef v23 = v6;
  memset(v20, 0, sizeof(v20));
  CFStringRef v21 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  CFStringRef v21 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAD1F928(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIN10applesauce2CF6URLRefEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AMCP::Core::Operation::call_function<applesauce::CF::URLRef>((uint64_t)&cf, (void *)(a1 + 8));
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::URLRef>::construct<applesauce::CF::URLRef&>(a2, &cf);
  if (cf) {
    CFRelease(cf);
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1481A18;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F1481A18;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAD1FAF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1481A18;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1481A18;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t std::__function::__value_func<applesauce::CF::URLRef ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<applesauce::CF::URLRef ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::URLRef ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::URLRef ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<applesauce::CF::URLRef ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::URLRef ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<applesauce::CF::URLRef ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::URLRef ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<applesauce::CF::URLRef ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyIN10applesauce2CF6URLRefEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

CFTypeRef std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::operator()@<X0>(CFTypeRef result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if (v3) {
    uint64_t result = CFRetain(*((CFTypeRef *)result + 1));
  }
  *a2 = v3;
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::destroy_deallocate(const void **a1)
{
  std::__function::__alloc_func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::destroy[abi:ne180100](a1[1]);

  operator delete(a1);
}

void std::__function::__alloc_func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::destroy[abi:ne180100](const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::destroy(uint64_t a1)
{
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1481988;
  return std::__compressed_pair_elem<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1} const&,0ul>(a2 + 1, (CFTypeRef *)(a1 + 8));
}

void *std::__compressed_pair_elem<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1} const&,0ul>(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *a1 = v3;
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = (CFTypeRef *)(a1 + 8);
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_1F1481988;
  std::__compressed_pair_elem<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1} const&,0ul>(v2 + 1, v1);
  return v2;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1481988;
  uint64_t v1 = (const void *)a1[1];
  if (v1) {
    CFRelease(v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,applesauce::CF::URLRef const&)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1481988;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<Extrinsic_Driver_Portal>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
}

void std::__shared_ptr_emplace<Extrinsic_Driver_Portal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146D330;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<Extrinsic_Driver_Portal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146D330;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMCP::Implementation::generate_type_marker(AMCP::Implementation *this, const std::type_info *a2)
{
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::Implementation::generate_type_marker(std::type_info const&)::s_once_flag, memory_order_acquire) != -1)
  {
    p_p = &__p;
    p_p_p = &p_p;
    std::__call_once(&AMCP::Implementation::generate_type_marker(std::type_info const&)::s_once_flag, &p_p_p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Implementation::generate_type_marker(std::type_info const&)::$_0 &&>>);
  }
  uint64_t v3 = AMCP::Implementation::generate_type_marker(std::type_info const&)::s_type_map;
  std::mutex::lock((std::mutex *)AMCP::Implementation::generate_type_marker(std::type_info const&)::s_type_map);
  std::string::basic_string[abi:ne180100]<0>(&v56, (char *)(*((void *)this + 1) & 0x7FFFFFFFFFFFFFFFLL));
  uint64_t v4 = *(char **)(v3 + 64);
  if (AMCP::Utility::Sorted_Vector<std::tuple<std::string,unsigned long>,AMCP::Utility::Extract_Key_Get_N<std::tuple<std::string,unsigned long>,0ul>,std::less<std::string>,std::allocator<std::tuple<std::string,unsigned long>>>::find(v4, *(void **)(v3 + 72), &v56))
  {
    uint64_t v6 = *(void *)(v5 + 24);
  }
  else
  {
    uint64_t v6 = *(void *)(v3 + 96) + 1;
    *(void *)(v3 + 96) = v6;
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
      uint64_t v4 = *(char **)(v3 + 64);
    }
    else
    {
      std::string __p = v56;
    }
    uint64_t v55 = v6;
    uint64_t v7 = *(std::string **)(v3 + 72);
    BOOL v8 = AMCP::Utility::Sorted_Vector<std::tuple<std::string,unsigned long>,AMCP::Utility::Extract_Key_Get_N<std::tuple<std::string,unsigned long>,0ul>,std::less<std::string>,std::allocator<std::tuple<std::string,unsigned long>>>::find(v4, v7, &__p);
    uint64_t v10 = v9;
    if (v8)
    {
      std::string::operator=(v9, &__p);
      v10[1].__r_.__value_.__r.__words[0] = v55;
    }
    else
    {
      uint64_t v11 = (char *)v9 - v4;
      uint64_t v12 = ((char *)v9 - v4) >> 5;
      uint64_t v13 = (std::string *)&v4[((char *)v9 - v4) & 0xFFFFFFFFFFFFFFE0];
      unint64_t v14 = *(void *)(v3 + 80);
      if ((unint64_t)v7 >= v14)
      {
        unint64_t v19 = (((char *)v7 - v4) >> 5) + 1;
        if (v19 >> 59) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = v14 - (void)v4;
        if (v20 >> 4 > v19) {
          unint64_t v19 = v20 >> 4;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v21 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        uint64_t v59 = v3 + 80;
        if (v21) {
          unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CAPropertyAddressList>>(v21);
        }
        else {
          uint64_t v22 = 0;
        }
        int v32 = (std::string *)(v21 + 32 * v12);
        p_p_p = (std::string **)v21;
        *(void *)CFNumberRef v58 = v32;
        *(void *)&v58[8] = v32;
        *(void *)&v58[16] = v21 + 32 * v22;
        if (v12 == v22)
        {
          if (v11 < 1)
          {
            if (v10 == (std::string *)v4) {
              unint64_t v34 = 1;
            }
            else {
              unint64_t v34 = v11 >> 4;
            }
            uint64_t v63 = v59;
            CFNumberRef v35 = (std::string **)std::__allocate_at_least[abi:ne180100]<std::allocator<CAPropertyAddressList>>(v34);
            CFStringRef v37 = *(long long **)v58;
            if (*(void *)&v58[8] == *(void *)v58)
            {
              int64x2_t v41 = vdupq_n_s64(*(unint64_t *)v58);
              uint64_t v38 = (uint64_t)&v35[4 * (v34 >> 2)];
            }
            else
            {
              uint64_t v38 = (uint64_t)&v35[4 * (v34 >> 2)] + *(void *)&v58[8] - *(void *)v58;
              int v39 = (char *)&v35[4 * (v34 >> 2)];
              do
              {
                long long v40 = *v37;
                *((void *)v39 + 2) = *((void *)v37 + 2);
                *(_OWORD *)int v39 = v40;
                *((void *)v37 + 1) = 0;
                *((void *)v37 + 2) = 0;
                *(void *)CFStringRef v37 = 0;
                *((void *)v39 + 3) = *((void *)v37 + 3);
                v39 += 32;
                v37 += 2;
              }
              while (v39 != (char *)v38);
              int64x2_t v41 = *(int64x2_t *)v58;
            }
            uint64_t v42 = *(void *)&v58[16];
            p_p = (std::string *)p_p_p;
            p_p_p = v35;
            *(void *)CFNumberRef v58 = &v35[4 * (v34 >> 2)];
            int64x2_t v61 = v41;
            *(void *)&v58[8] = v38;
            *(void *)&v58[16] = &v35[4 * v36];
            uint64_t v62 = v42;
            std::__split_buffer<std::pair<std::string const,HALS_IOEngineInfo const*>>::~__split_buffer((uint64_t)&p_p);
            int v32 = *(std::string **)&v58[8];
          }
          else
          {
            unint64_t v33 = v12 + 2;
            if (v12 >= -1) {
              unint64_t v33 = v12 + 1;
            }
            int v32 = (std::string *)((char *)v32 - 32 * (v33 >> 1));
            *(void *)CFNumberRef v58 = v32;
            *(void *)&v58[8] = v32;
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v32, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v43 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v32->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v43;
        }
        v32[1].__r_.__value_.__r.__words[0] = v55;
        uint64_t v44 = *(void *)v58;
        uint64_t v45 = *(void *)&v58[8] + 32;
        *(void *)&v58[8] += 32;
        CFStringRef v46 = *(std::string **)(v3 + 64);
        if (v13 != v46)
        {
          CFStringRef v47 = v13;
          do
          {
            long long v48 = *(_OWORD *)&v47[-2].__r_.__value_.__r.__words[2];
            *(void *)(v44 - 16) = v47[-1].__r_.__value_.__l.__size_;
            *(_OWORD *)(v44 - 32) = v48;
            v47[-1].__r_.__value_.__r.__words[0] = 0;
            v47[-1].__r_.__value_.__l.__size_ = 0;
            v47[-2].__r_.__value_.__r.__words[2] = 0;
            *(void *)(v44 - 8) = *((void *)&v47[-1].__r_.__value_.__l + 2);
            v44 -= 32;
            CFStringRef v47 = (std::string *)((char *)v47 - 32);
          }
          while (v47 != v46);
          uint64_t v45 = *(void *)&v58[8];
        }
        *(void *)CFNumberRef v58 = v44;
        CFNumberRef v49 = *(std::string **)(v3 + 72);
        if (v13 != v49)
        {
          do
          {
            long long v50 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
            *(void *)(v45 + 16) = *((void *)&v13->__r_.__value_.__l + 2);
            *(_OWORD *)uint64_t v45 = v50;
            v13->__r_.__value_.__l.__size_ = 0;
            v13->__r_.__value_.__r.__words[2] = 0;
            v13->__r_.__value_.__r.__words[0] = 0;
            *(void *)(v45 + 24) = v13[1].__r_.__value_.__l.__data_;
            v45 += 32;
            uint64_t v13 = (std::string *)((char *)v13 + 32);
          }
          while (v13 != v49);
          uint64_t v44 = *(void *)v58;
        }
        *(void *)CFNumberRef v58 = *(void *)(v3 + 64);
        *(void *)&v58[8] = v45;
        long long v51 = *(_OWORD *)(v3 + 72);
        *(void *)(v3 + 64) = v44;
        *(void *)(v3 + 72) = v45;
        CFNumberRef v52 = *(std::string ***)v58;
        *(void *)(v3 + 80) = *(void *)&v58[16];
        *(_OWORD *)&v58[8] = v51;
        p_p_p = v52;
        std::__split_buffer<std::pair<std::string const,HALS_IOEngineInfo const*>>::~__split_buffer((uint64_t)&p_p_p);
      }
      else if (v13 == v7)
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v7, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v31 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v7->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v31;
        }
        v7[1].__r_.__value_.__r.__words[0] = v55;
        *(void *)(v3 + 72) = (char *)v7 + 32;
      }
      else
      {
        CFStringRef v15 = (std::string *)((char *)v13 + 32);
        CFNumberRef v16 = &v7[-2].__r_.__value_.__s.__data_[16];
        int v17 = v7;
        while (v16 < (char *)v7)
        {
          long long v18 = *(_OWORD *)v16;
          v17->__r_.__value_.__r.__words[2] = *((void *)v16 + 2);
          *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
          *((void *)v16 + 1) = 0;
          *((void *)v16 + 2) = 0;
          *(void *)CFNumberRef v16 = 0;
          v17[1].__r_.__value_.__r.__words[0] = *((void *)v16 + 3);
          int v17 = (std::string *)((char *)v17 + 32);
          v16 += 32;
        }
        *(void *)(v3 + 72) = v17;
        if (v7 != v15)
        {
          unint64_t v23 = 0;
          uint64_t v24 = ((char *)v7 - (char *)v15) >> 5;
          CFStringRef v25 = &v4[32 * v12 + 32 * v24];
          uint64_t v26 = -32 * v24;
          do
          {
            CFNumberRef v27 = (void **)((char *)&v7[-1] + v23 - 8);
            if (v7->__r_.__value_.__s.__data_[v23 - 9] < 0) {
              operator delete(*v27);
            }
            int v28 = &v25[v23 - 32];
            long long v29 = *(_OWORD *)v28;
            v7->__r_.__value_.__r.__words[v23 / 8 - 2] = *(void *)&v25[v23 - 16];
            *(_OWORD *)CFNumberRef v27 = v29;
            v25[v23 - 9] = 0;
            char *v28 = 0;
            v7->__r_.__value_.__r.__words[v23 / 8 - 1] = *(void *)&v25[v23 - 8];
            v23 -= 32;
          }
          while (v26 != v23);
        }
        CFStringRef v30 = &__p;
        if (v13 <= &__p) {
          CFStringRef v30 = (std::string *)((char *)&__p + 32 * (*(void *)(v3 + 72) > (unint64_t)&__p));
        }
        std::string::operator=(v13, v30);
        v13[1].__r_.__value_.__r.__words[0] = v30[1].__r_.__value_.__r.__words[0];
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  std::mutex::unlock((std::mutex *)v3);
  return v6;
}

void sub_1BAD2065C(void *a1)
{
  *(void *)(v1 + 72) = v2;
  __clang_call_terminate(a1);
}

BOOL AMCP::Utility::Sorted_Vector<std::tuple<std::string,unsigned long>,AMCP::Utility::Extract_Key_Get_N<std::tuple<std::string,unsigned long>,0ul>,std::less<std::string>,std::allocator<std::tuple<std::string,unsigned long>>>::find(void *a1, void *a2, void *a3)
{
  if (a2 == a1)
  {
    uint64_t v5 = a2;
  }
  else
  {
    uint64_t v5 = a1;
    unint64_t v6 = ((char *)a2 - (char *)a1) >> 5;
    do
    {
      uint64_t v7 = &v5[4 * (v6 >> 1)];
      int v8 = (char)std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a3);
      if (v8 >= 0) {
        v6 >>= 1;
      }
      else {
        v6 += ~(v6 >> 1);
      }
      if (v8 < 0) {
        uint64_t v5 = v7 + 4;
      }
    }
    while (v6);
  }
  return v5 != a2
      && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, a3) & 0x80) == 0
      && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, v5) & 0x80) == 0;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::Implementation::generate_type_marker(std::type_info const&)::$_0 &&>>()
{
}

uint64_t AMCP::Null::Object::do_set_property(AMCP::Null::Object *this, int a2, const AMCP::Address *a3, const AMCP::Thing *a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 22) != a2) {
    return 0;
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 8);
  if (!v7)
  {
    int v8 = 0;
LABEL_8:
    uint64_t v9 = 0;
    uint64_t v10 = (unsigned int *)((char *)this + 40);
    goto LABEL_9;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v7);
  int v8 = v7;
  if (!v7) {
    goto LABEL_8;
  }
  uint64_t v9 = *((void *)this + 7);
  if (!v9) {
    goto LABEL_8;
  }
  uint64_t v10 = (unsigned int *)(v9 + 88);
LABEL_9:
  unsigned int v12 = *v10;
  unsigned int v13 = *(_DWORD *)a3;
  AMCP::local_get_property_traits_list((AMCP *)v7);
  if (std::__hash_table<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>>>::find<unsigned int>(v13))
  {
    if (*(_DWORD *)a3 != 1819173229)
    {
      uint64_t v11 = 0;
      if (!v8) {
        return v11;
      }
      goto LABEL_37;
    }
    unint64_t v14 = operator new(0x20uLL);
    v14[1] = 0;
    _OWORD v14[2] = 0;
    *((unsigned char *)v14 + 24) = 0;
    *unint64_t v14 = &unk_1F1488C30;
    long long v40 = (char *)(v14 + 3);
    int64x2_t v41 = v14;
    int v42 = 0;
    int v43 = 0;
    uint64_t v15 = *(void *)(*((void *)this + 1) + 32);
    unsigned int v16 = *((_DWORD *)this + 22);
    uint64_t v17 = *((void *)this + 4);
    *(void *)&long long v28 = *((void *)this + 3);
    *((void *)&v28 + 1) = v17;
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 16), 1uLL, memory_order_relaxed);
    }
    *(void *)&long long v29 = v9;
    *((void *)&v29 + 1) = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v30 = *(void *)a3;
    int v31 = *((_DWORD *)a3 + 2);
    memset(v32, 0, sizeof(v32));
    unint64_t v33 = 0;
    long long v18 = (void (*)(uint64_t, const AMCP::Thing *, _OWORD *, void))*((void *)a4 + 4);
    if (v18) {
      v18(1, a4, v32, 0);
    }
    uint64_t v45 = 0;
    unint64_t v19 = (char *)operator new(0x60uLL);
    *(_OWORD *)(v19 + 8) = v28;
    *(void *)unint64_t v19 = &unk_1F146DD28;
    *(_OWORD *)(v19 + 24) = v29;
    *((void *)v19 + 5) = v30;
    *((_DWORD *)v19 + 12) = v31;
    *(_OWORD *)(v19 + 56) = 0u;
    *(_OWORD *)(v19 + 72) = 0u;
    *((void *)v19 + 11) = 0;
    if (v33) {
      v33(2, v32, v19 + 56, 0);
    }
    uint64_t v45 = v19;
    AMCP::Core::Conductor::enqueue_config_change(v15, v12, v16, 1, (uint64_t)v44);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v44);
    if (v33) {
      v33(0, v32, 0, 0);
    }
  }
  else
  {
    uint64_t v20 = operator new(0x20uLL);
    v20[1] = 0;
    _OWORD v20[2] = 0;
    *((unsigned char *)v20 + 24) = 0;
    *uint64_t v20 = &unk_1F1488C30;
    long long v40 = (char *)(v20 + 3);
    int64x2_t v41 = v20;
    int v42 = 0;
    int v43 = 0;
    uint64_t v21 = *(void *)(*((void *)this + 1) + 32);
    unsigned int v22 = *((_DWORD *)this + 22);
    unint64_t v23 = (std::__shared_weak_count *)*((void *)this + 4);
    v34[0] = *((std::__shared_weak_count **)this + 3);
    v34[1] = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)&long long v35 = v9;
    *((void *)&v35 + 1) = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v36 = *(void *)a3;
    int v37 = *((_DWORD *)a3 + 2);
    memset(v38, 0, sizeof(v38));
    int v39 = 0;
    uint64_t v24 = (void (*)(uint64_t, const AMCP::Thing *, _OWORD *, void))*((void *)a4 + 4);
    if (v24) {
      v24(1, a4, v38, 0);
    }
    uint64_t v45 = 0;
    CFStringRef v25 = (char *)operator new(0x60uLL);
    long long v26 = v35;
    *(_OWORD *)(v25 + 8) = *(_OWORD *)v34;
    *(void *)CFStringRef v25 = &unk_1F146DCA8;
    v34[0] = 0;
    v34[1] = 0;
    *(_OWORD *)(v25 + 24) = v26;
    long long v35 = 0uLL;
    *((void *)v25 + 5) = v36;
    *((_DWORD *)v25 + 12) = v37;
    *(_OWORD *)(v25 + 56) = 0u;
    *(_OWORD *)(v25 + 72) = 0u;
    *((void *)v25 + 11) = 0;
    if (v39) {
      v39(2, v38, v25 + 56, 0);
    }
    uint64_t v45 = v25;
    AMCP::Core::Conductor::enqueue_config_change(v21, v12, v22, 1, (uint64_t)v44);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v44);
    if (v39) {
      v39(0, v38, 0, 0);
    }
    if (*((void *)&v35 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
    }
    if (v34[1]) {
      std::__shared_weak_count::__release_weak(v34[1]);
    }
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v40);
  uint64_t v11 = 257;
  if (v8) {
LABEL_37:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  return v11;
}

void sub_1BAD20BD4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Object15do_set_propertyEjRKNS_7AddressERKNS_5ThingEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(CFDictionaryRef **)(a1 + 8);
      if (v5)
      {
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v5[6]);
        AMCP::Thing::convert_to<applesauce::CF::StringRef>(&v16, a1 + 56);
        int v8 = v16;
        if (v16)
        {
          v7.i64[0] = 0x676C6F626C6E616DLL;
          uint64_t v13 = 0x676C6F626C6E616DLL;
          int v14 = 0;
          AMCP::Address::to_string(&__p, (unsigned int *)&v13, v7);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (p_p)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              CFIndex size = __p.__r_.__value_.__l.__size_;
            }
            CFStringRef v11 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
            if (!v11)
            {
              exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
              __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(MutableCopy, v11, v8);
            CFRelease(v11);
          }
          else
          {
            mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(MutableCopy, 0, v8);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&__p, MutableCopy);
          (*((void (**)(CFDictionaryRef *, std::string *))*v5 + 3))(v5, &__p);
          if (__p.__r_.__value_.__r.__words[0]) {
            CFRelease(__p.__r_.__value_.__l.__data_);
          }
          CFRelease(v8);
          if (MutableCopy) {
            CFRelease(MutableCopy);
          }
        }
        else if (MutableCopy)
        {
          CFRelease(MutableCopy);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1BAD20E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  CFRelease(v18);
  if (v17) {
    CFRelease(v17);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::destroy[abi:ne180100](void *a1)
{
  uint64_t v2 = (void (*)(void, void *, void, void))a1[10];
  if (v2) {
    v2(0, a1 + 6, 0, 0);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F146DD28;
  return std::__compressed_pair_elem<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  int v5 = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(a2 + 80);
  if (v6) {
    v6(1, a2 + 48);
  }
  return a1;
}

void sub_1BAD20FF0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x60uLL);
  void *v2 = &unk_1F146DD28;
  std::__compressed_pair_elem<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BAD21068(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146DD28;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[11];
  if (v2) {
    v2(0, a1 + 7, 0, 0);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146DD28;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[11];
  if (v2) {
    v2(0, a1 + 7, 0, 0);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void *std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Object15do_set_propertyEjRKNS_7AddressERKNS_5ThingEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      int v5 = *(CFDictionaryRef **)(a1 + 8);
      if (!v5)
      {
LABEL_22:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v5[6]);
      AMCP::Address::to_string(&__p, (unsigned int *)(a1 + 40), v7);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (p_p)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          CFIndex size = __p.__r_.__value_.__l.__size_;
        }
        CFStringRef v10 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
        if (!v10)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_14;
        }
      }
      else
      {
        CFStringRef v10 = 0;
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_14;
        }
      }
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_14:
      AMCP::make_description_from_thing((AMCP *)&__p, (const AMCP::Thing *)(a1 + 56));
      CFStringRef v11 = (const void *)__p.__r_.__value_.__r.__words[0];
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(MutableCopy, v10, __p.__r_.__value_.__l.__data_);
      if (v11) {
        CFRelease(v11);
      }
      if (v10) {
        CFRelease(v10);
      }
      mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&__p, MutableCopy);
      (*((void (**)(CFDictionaryRef *, std::string *))*v5 + 3))(v5, &__p);
      if (__p.__r_.__value_.__r.__words[0]) {
        CFRelease(__p.__r_.__value_.__l.__data_);
      }
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
      goto LABEL_22;
    }
  }
}

void sub_1BAD21374(void *a1)
{
}

void sub_1BAD213A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1) {
    CFDictionarySetValue(a1, a2, a3);
  }
}

void std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy[abi:ne180100](void *a1)
{
  uint64_t v2 = (void (*)(void, void *, void, void))a1[10];
  if (v2) {
    v2(0, a1 + 6, 0, 0);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F146DCA8;
  return std::__compressed_pair_elem<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  int v5 = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(a2 + 80);
  if (v6) {
    v6(1, a2 + 48);
  }
  return a1;
}

void sub_1BAD21548(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x60uLL);
  void *v2 = &unk_1F146DCA8;
  std::__compressed_pair_elem<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BAD215C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146DCA8;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[11];
  if (v2) {
    v2(0, a1 + 7, 0, 0);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Object::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146DCA8;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[11];
  if (v2) {
    v2(0, a1 + 7, 0, 0);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void AMCP::Null::Object::populate_core(AMCP::Null::Object *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v196 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  LODWORD(v185) = *((_DWORD *)this + 22);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v185, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(void *)__p + 40), __p);
  if (*(void *)&__p[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
  }
  LODWORD(v185) = *((_DWORD *)this + 21);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v185, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(void *)__p + 40), __p);
  if (*(void *)&__p[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
  }
  LODWORD(v185) = *((_DWORD *)this + 20);
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v185, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(void *)__p + 40), __p);
  if (*(void *)&__p[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v6 && (unint64_t v6 = std::__shared_weak_count::lock(v6)) != 0 && (v7 = *((void *)this + 7)) != 0)
  {
    mach_port_t v161 = v6;
    int v8 = (_DWORD *)(v7 + 88);
  }
  else
  {
    mach_port_t v161 = v6;
    int v8 = (_DWORD *)((char *)this + 40);
  }
  LODWORD(v185) = *v8;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v185, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(void *)__p + 40), __p);
  if (*(void *)&__p[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
  }
  CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Null-Driver", 27, 0x8000100u, 0);
  if (!v9)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(void *)&long long v185 = 0x676C6F626F706C67;
  DWORD2(v185) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)__p, (uint64_t)&v185, v9);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(void *)__p + 40), __p);
  if (*(void *)&__p[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
  }
  CFRelease(v9);
  int v10 = *((_DWORD *)this + 22);
  *(void *)std::string __p = *(void *)(*((void *)this + 1) + 16);
  *(_DWORD *)&__p[8] = v10;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>((uint64_t *)&v185, 0, (long long *)__p, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v185 + 40), &v185);
  if (*((void *)&v185 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v185 + 1));
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v169, *((void *)this + 3), *((std::__shared_weak_count **)this + 4));
  v166.__r_.__value_.__s.__data_[0] = 0;
  char v168 = 0;
  uint64_t v11 = v169;
  unsigned int v12 = v170;
  if (v170) {
    atomic_fetch_add_explicit(&v170->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  strcpy((char *)v171, "manlbolg");
  BYTE1(v171[1]) = 0;
  WORD1(v171[1]) = 0;
  long long v184 = 0;
  long long v182 = 0u;
  long long v183 = 0u;
  if (!*((void *)this + 6))
  {
    mach_port_t v143 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v143, "Could not construct");
    __cxa_throw(v143, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string((std::string *)__p, (unsigned int *)v171, (int16x8_t)0);
  if (__p[23] >= 0) {
    uint64_t v13 = __p;
  }
  else {
    uint64_t v13 = *(const UInt8 **)__p;
  }
  if (v13)
  {
    if (__p[23] >= 0) {
      CFIndex v14 = __p[23];
    }
    else {
      CFIndex v14 = *(void *)&__p[8];
    }
    CFStringRef v15 = CFStringCreateWithBytes(0, v13, v14, 0x8000100u, 0);
    if (!v15)
    {
      BOOL v153 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v153, "Could not construct");
      __cxa_throw(v153, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v177, *((CFDictionaryRef *)this + 6), v15);
    CFRelease(v15);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v177, *((CFDictionaryRef *)this + 6), 0);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if ((_BYTE)v178)
  {
    AMCP::make_thing_from_description((AMCP *)__p, &v177);
    AMCP::swap((AMCP::Thing *)__p, (AMCP::Thing *)&v182, v16);
    if (*(void *)&__p[32]) {
      (*(void (**)(void, unsigned char *, void, void))&__p[32])(0, __p, 0, 0);
    }
  }
  if (v184)
  {
    CFStringRef v164 = *(CFTypeRef *)((char *)v171 + 4);
    CFStringRef v176 = 0;
    *(_OWORD *)keys = 0u;
    long long v175 = 0u;
    v184(1, &v182, keys, 0);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(cf[0]) = 1819173229;
    *(CFTypeRef *)((char *)cf + 4) = v164;
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v172, SHIDWORD(v164), *(double *)cf);
    uint64_t v17 = v172;
    unint64_t v18 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    long long v185 = 0u;
    long long v186 = 0u;
    long long v187 = 0;
    if (v176) {
      v176(2, keys, &v185, 0);
    }
    *((void *)&v194 + 1) = 0;
    unint64_t v19 = (char *)operator new(0x30uLL);
    *(void *)unint64_t v19 = &unk_1F146D828;
    *(_OWORD *)(v19 + 8) = 0u;
    *(_OWORD *)(v19 + 24) = 0u;
    *((void *)v19 + 5) = 0;
    if (v187) {
      v187(2, &v185, v19 + 8, 0);
    }
    *((void *)&v194 + 1) = v19;
    memset(__p, 0, 40);
    std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v193);
    *(void *)&__p[32] = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v17, v18, (AMCP *)__p);
    if (*(void *)&__p[32]) {
      (*(void (**)(void, unsigned char *, void, void))&__p[32])(0, __p, 0, 0);
    }
    std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](&v193);
    if (v187) {
      v187(0, &v185, 0, 0);
    }
    AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(v17);
    unint64_t v20 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    *((void *)&v186 + 1) = 0;
    uint64_t v21 = operator new(0x28uLL);
    *uint64_t v21 = &unk_1F146D928;
    v21[1] = v11;
    void v21[2] = v12;
    void v21[3] = 0x676C6F626C6E616DLL;
    *((_DWORD *)v21 + 8) = HIDWORD(v164);
    *((void *)&v186 + 1) = v21;
    memset(__p, 0, 40);
    std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v185);
    *(void *)&__p[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v17, v20, (AMCP *)__p);
    if (*(void *)&__p[32]) {
      (*(void (**)(void, unsigned char *, void, void))&__p[32])(0, __p, 0, 0);
    }
    unsigned int v22 = std::__function::__value_func<void ()(AMCP::Thing const&)>::~__value_func[abi:ne180100](&v185);
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)v22, v17);
    uint64_t v188 = *(void *)(v17 + 40);
    int v189 = *(_DWORD *)(v17 + 48);
    unint64_t v23 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::StringRef const&)>>();
    long long v24 = v185;
    long long v185 = 0uLL;
    *(_OWORD *)std::string __p = v24;
    *(_OWORD *)&__p[16] = v186;
    *(_DWORD *)&__p[32] = v187;
    if (*((void *)&v186 + 1))
    {
      unint64_t v25 = *(void *)(v186 + 8);
      if ((*((void *)&v24 + 1) & (*((void *)&v24 + 1) - 1)) != 0)
      {
        if (v25 >= *((void *)&v24 + 1)) {
          v25 %= *((void *)&v24 + 1);
        }
      }
      else
      {
        v25 &= *((void *)&v24 + 1) - 1;
      }
      *(void *)(v24 + 8 * v25) = &__p[16];
      long long v186 = 0uLL;
    }
    *(void *)&unsigned char __p[40] = v188;
    int v181 = v189;
    char v192 = 0;
    long long v26 = operator new(0x40uLL);
    *long long v26 = &unk_1F146D9A8;
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v26 + 1), (uint64_t *)__p);
    v26[6] = *(void *)&__p[40];
    *((_DWORD *)v26 + 14) = v181;
    char v192 = v26;
    long long v193 = 0u;
    long long v194 = 0u;
    float v195 = 0;
    std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::__value_func[abi:ne180100]((uint64_t)&v193, (uint64_t)&v190);
    float v195 = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::StringRef const&)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v17, v23, (AMCP *)&v193);
    if (v195) {
      v195(0, (uint64_t)&v193, 0, 0);
    }
    std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::~__value_func[abi:ne180100](&v190);
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v185);
    if (v176) {
      v176(0, keys, 0, 0);
    }
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v172 = 0;
    CFNumberRef v173 = 0;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v177);
  if (v184) {
    v184(0, &v182, 0, 0);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v17) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v17 + 40), &v172);
  }
  if (v173) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v173);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v166);
  if (v170) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v170);
  }
  __p[0] = 0;
  unsigned char __p[40] = 0;
  keys[0] = (void **)0x676C6F626C6D6F64;
  LODWORD(keys[1]) = 0;
  long long v187 = 0;
  long long v185 = 0u;
  long long v186 = 0u;
  if (!*((void *)this + 6))
  {
    uint64_t v144 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v144, "Could not construct");
    __cxa_throw(v144, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&v166, (unsigned int *)keys, (int16x8_t)0);
  if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFNumberRef v27 = &v166;
  }
  else {
    CFNumberRef v27 = (std::string *)v166.__r_.__value_.__r.__words[0];
  }
  if (v27)
  {
    if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(v166.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = v166.__r_.__value_.__l.__size_;
    }
    CFStringRef v29 = CFStringCreateWithBytes(0, (const UInt8 *)v27, size, 0x8000100u, 0);
    if (!v29)
    {
      std::runtime_error v154 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v154, "Could not construct");
      __cxa_throw(v154, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v193, *((CFDictionaryRef *)this + 6), v29);
    CFRelease(v29);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v193, *((CFDictionaryRef *)this + 6), 0);
  }
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v166.__r_.__value_.__l.__data_);
  }
  if (BYTE8(v193))
  {
    AMCP::make_thing_from_description((AMCP *)&v166, (CFTypeRef *)&v193);
    AMCP::swap((AMCP::Thing *)&v166, (AMCP::Thing *)&v185, v31);
    if (v167) {
      v167(0, &v166, 0, 0);
    }
  }
  else if (__p[40])
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v185, (uint64_t)__p, v30);
  }
  if (v187)
  {
    LODWORD(v182) = 1819111268;
    *(void ***)((char *)&v182 + 4) = *(void ***)((char *)keys + 4);
    AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>((uint64_t *)&v166, (uint64_t)&v182, (uint64_t)&v185);
  }
  else
  {
    *(_OWORD *)&v166.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v193);
  if (v187) {
    v187(0, &v185, 0, 0);
  }
  if (v166.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v166.__r_.__value_.__r.__words[0] + 40), &v166);
  }
  if (v166.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v166.__r_.__value_.__l.__size_);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  __p[0] = 0;
  unsigned char __p[40] = 0;
  keys[0] = (void **)0x676C6F626C6D616BLL;
  LODWORD(keys[1]) = 0;
  long long v187 = 0;
  long long v185 = 0u;
  long long v186 = 0u;
  if (!*((void *)this + 6))
  {
    CFStringRef v145 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v145, "Could not construct");
    __cxa_throw(v145, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&v166, (unsigned int *)keys, (int16x8_t)0);
  if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v32 = &v166;
  }
  else {
    int v32 = (std::string *)v166.__r_.__value_.__r.__words[0];
  }
  if (v32)
  {
    if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v33 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v33 = v166.__r_.__value_.__l.__size_;
    }
    CFStringRef v34 = CFStringCreateWithBytes(0, (const UInt8 *)v32, v33, 0x8000100u, 0);
    if (!v34)
    {
      CFStringRef v155 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v155, "Could not construct");
      __cxa_throw(v155, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v193, *((CFDictionaryRef *)this + 6), v34);
    CFRelease(v34);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v193, *((CFDictionaryRef *)this + 6), 0);
  }
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v166.__r_.__value_.__l.__data_);
  }
  if (BYTE8(v193))
  {
    AMCP::make_thing_from_description((AMCP *)&v166, (CFTypeRef *)&v193);
    AMCP::swap((AMCP::Thing *)&v166, (AMCP::Thing *)&v185, v36);
    if (v167) {
      v167(0, &v166, 0, 0);
    }
  }
  else if (__p[40])
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v185, (uint64_t)__p, v35);
  }
  if (v187)
  {
    LODWORD(v182) = 1819107691;
    *(void ***)((char *)&v182 + 4) = *(void ***)((char *)keys + 4);
    AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>((uint64_t *)&v166, (uint64_t)&v182, (uint64_t)&v185);
  }
  else
  {
    *(_OWORD *)&v166.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v193);
  if (v187) {
    v187(0, &v185, 0, 0);
  }
  if (v166.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v166.__r_.__value_.__r.__words[0] + 40), &v166);
  }
  if (v166.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v166.__r_.__value_.__l.__size_);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  __p[0] = 0;
  unsigned char __p[40] = 0;
  keys[0] = (void **)0x676C6F6269636F6ELL;
  LODWORD(keys[1]) = 0;
  long long v187 = 0;
  long long v185 = 0u;
  long long v186 = 0u;
  if (!*((void *)this + 6))
  {
    mach_port_t v146 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v146, "Could not construct");
    __cxa_throw(v146, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&v166, (unsigned int *)keys, (int16x8_t)0);
  if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v37 = &v166;
  }
  else {
    int v37 = (std::string *)v166.__r_.__value_.__r.__words[0];
  }
  if (v37)
  {
    if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v38 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v38 = v166.__r_.__value_.__l.__size_;
    }
    CFStringRef v39 = CFStringCreateWithBytes(0, (const UInt8 *)v37, v38, 0x8000100u, 0);
    if (!v39)
    {
      std::string v156 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v156, "Could not construct");
      __cxa_throw(v156, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v193, *((CFDictionaryRef *)this + 6), v39);
    CFRelease(v39);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v193, *((CFDictionaryRef *)this + 6), 0);
  }
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v166.__r_.__value_.__l.__data_);
  }
  if (BYTE8(v193))
  {
    AMCP::make_thing_from_description((AMCP *)&v166, (CFTypeRef *)&v193);
    AMCP::swap((AMCP::Thing *)&v166, (AMCP::Thing *)&v185, v41);
    if (v167) {
      v167(0, &v166, 0, 0);
    }
  }
  else if (__p[40])
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v185, (uint64_t)__p, v40);
  }
  if (v187)
  {
    LODWORD(v182) = 1768124270;
    *(void ***)((char *)&v182 + 4) = *(void ***)((char *)keys + 4);
    AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>((uint64_t *)&v166, (uint64_t)&v182, (uint64_t)&v185);
  }
  else
  {
    *(_OWORD *)&v166.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v193);
  if (v187) {
    v187(0, &v185, 0, 0);
  }
  if (v166.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v166.__r_.__value_.__r.__words[0] + 40), &v166);
  }
  if (v166.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v166.__r_.__value_.__l.__size_);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  CFStringRef v42 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.AudioMIDISetup", 30, 0x8000100u, 0);
  if (!v42)
  {
    CFStringRef v147 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v147, "Could not construct");
    __cxa_throw(v147, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(void *)std::string __p = v42;
  memset(&__p[8], 0, 24);
  *(void *)&__p[32] = AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::dispatch;
  unsigned char __p[40] = 1;
  keys[0] = (void **)0x676C6F6263617070;
  LODWORD(keys[1]) = 0;
  long long v187 = 0;
  long long v185 = 0u;
  long long v186 = 0u;
  if (!*((void *)this + 6))
  {
    std::string v148 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v148, "Could not construct");
    __cxa_throw(v148, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&v166, (unsigned int *)keys, (int16x8_t)0);
  if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v43 = &v166;
  }
  else {
    int v43 = (std::string *)v166.__r_.__value_.__r.__words[0];
  }
  if (v43)
  {
    if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v44 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v44 = v166.__r_.__value_.__l.__size_;
    }
    CFStringRef v45 = CFStringCreateWithBytes(0, (const UInt8 *)v43, v44, 0x8000100u, 0);
    if (!v45)
    {
      int v157 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v157, "Could not construct");
      __cxa_throw(v157, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v193, *((CFDictionaryRef *)this + 6), v45);
    CFRelease(v45);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v193, *((CFDictionaryRef *)this + 6), 0);
  }
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v166.__r_.__value_.__l.__data_);
  }
  if (BYTE8(v193))
  {
    AMCP::make_thing_from_description((AMCP *)&v166, (CFTypeRef *)&v193);
    AMCP::swap((AMCP::Thing *)&v166, (AMCP::Thing *)&v185, v47);
    if (v167) {
      v167(0, &v166, 0, 0);
    }
  }
  else if (__p[40])
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v185, (uint64_t)__p, v46);
  }
  if (v187)
  {
    LODWORD(v182) = 1667330160;
    *(void ***)((char *)&v182 + 4) = *(void ***)((char *)keys + 4);
    AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>((uint64_t *)&v166, (uint64_t)&v182, (uint64_t)&v185);
  }
  else
  {
    *(_OWORD *)&v166.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v193);
  if (v187) {
    v187(0, &v185, 0, 0);
  }
  if (v166.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v166.__r_.__value_.__r.__words[0] + 40), &v166);
  }
  if (v166.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v166.__r_.__value_.__l.__size_);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  __p[0] = 0;
  unsigned char __p[40] = 0;
  keys[0] = (void **)0x676C6F62736E756DLL;
  LODWORD(keys[1]) = 0;
  long long v187 = 0;
  long long v185 = 0u;
  long long v186 = 0u;
  if (!*((void *)this + 6))
  {
    mach_port_t v149 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v149, "Could not construct");
    __cxa_throw(v149, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&v166, (unsigned int *)keys, (int16x8_t)0);
  if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v48 = &v166;
  }
  else {
    long long v48 = (std::string *)v166.__r_.__value_.__r.__words[0];
  }
  if (v48)
  {
    if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v49 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v49 = v166.__r_.__value_.__l.__size_;
    }
    CFStringRef v50 = CFStringCreateWithBytes(0, (const UInt8 *)v48, v49, 0x8000100u, 0);
    if (!v50)
    {
      mach_port_t v158 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v158, "Could not construct");
      __cxa_throw(v158, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v193, *((CFDictionaryRef *)this + 6), v50);
    CFRelease(v50);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v193, *((CFDictionaryRef *)this + 6), 0);
  }
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v166.__r_.__value_.__l.__data_);
  }
  if (BYTE8(v193))
  {
    AMCP::make_thing_from_description((AMCP *)&v166, (CFTypeRef *)&v193);
    AMCP::swap((AMCP::Thing *)&v166, (AMCP::Thing *)&v185, v52);
    if (v167) {
      v167(0, &v166, 0, 0);
    }
  }
  else if (__p[40])
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v185, (uint64_t)__p, v51);
  }
  if (v187)
  {
    LODWORD(v182) = 1936618861;
    *(void ***)((char *)&v182 + 4) = *(void ***)((char *)keys + 4);
    AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>((uint64_t *)&v166, (uint64_t)&v182, (uint64_t)&v185);
  }
  else
  {
    *(_OWORD *)&v166.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v193);
  if (v187) {
    v187(0, &v185, 0, 0);
  }
  if (v166.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v166.__r_.__value_.__r.__words[0] + 40), &v166);
  }
  if (v166.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v166.__r_.__value_.__l.__size_);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  __p[0] = 0;
  unsigned char __p[40] = 0;
  keys[0] = (void **)0x676C6F626677766ELL;
  LODWORD(keys[1]) = 0;
  long long v187 = 0;
  long long v185 = 0u;
  long long v186 = 0u;
  if (!*((void *)this + 6))
  {
    std::string v150 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v150, "Could not construct");
    __cxa_throw(v150, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&v166, (unsigned int *)keys, (int16x8_t)0);
  if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFNumberRef v53 = &v166;
  }
  else {
    CFNumberRef v53 = (std::string *)v166.__r_.__value_.__r.__words[0];
  }
  if (v53)
  {
    if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v54 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v54 = v166.__r_.__value_.__l.__size_;
    }
    CFStringRef v55 = CFStringCreateWithBytes(0, (const UInt8 *)v53, v54, 0x8000100u, 0);
    if (!v55)
    {
      long long v159 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v159, "Could not construct");
      __cxa_throw(v159, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v193, *((CFDictionaryRef *)this + 6), v55);
    CFRelease(v55);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v193, *((CFDictionaryRef *)this + 6), 0);
  }
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v166.__r_.__value_.__l.__data_);
  }
  if (BYTE8(v193))
  {
    AMCP::make_thing_from_description((AMCP *)&v166, (CFTypeRef *)&v193);
    AMCP::swap((AMCP::Thing *)&v166, (AMCP::Thing *)&v185, v57);
    if (v167) {
      v167(0, &v166, 0, 0);
    }
  }
  else if (__p[40])
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v185, (uint64_t)__p, v56);
  }
  if (v187)
  {
    LODWORD(v182) = 1719105134;
    *(void ***)((char *)&v182 + 4) = *(void ***)((char *)keys + 4);
    AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>((uint64_t *)&v166, (uint64_t)&v182, (uint64_t)&v185);
  }
  else
  {
    *(_OWORD *)&v166.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v193);
  if (v187) {
    v187(0, &v185, 0, 0);
  }
  if (v166.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v166.__r_.__value_.__r.__words[0] + 40), &v166);
  }
  if (v166.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v166.__r_.__value_.__l.__size_);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  __p[0] = 0;
  unsigned char __p[40] = 0;
  keys[0] = (void **)0x676C6F6272737263;
  LODWORD(keys[1]) = 0;
  long long v187 = 0;
  long long v185 = 0u;
  long long v186 = 0u;
  if (!*((void *)this + 6))
  {
    CFStringRef v151 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v151, "Could not construct");
    __cxa_throw(v151, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&v166, (unsigned int *)keys, (int16x8_t)0);
  if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFNumberRef v58 = &v166;
  }
  else {
    CFNumberRef v58 = (std::string *)v166.__r_.__value_.__r.__words[0];
  }
  if (v58)
  {
    if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v59 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v59 = v166.__r_.__value_.__l.__size_;
    }
    CFStringRef v60 = CFStringCreateWithBytes(0, (const UInt8 *)v58, v59, 0x8000100u, 0);
    if (!v60)
    {
      long long v160 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v160, "Could not construct");
      __cxa_throw(v160, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v193, *((CFDictionaryRef *)this + 6), v60);
    CFRelease(v60);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v193, *((CFDictionaryRef *)this + 6), 0);
  }
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v166.__r_.__value_.__l.__data_);
  }
  if (BYTE8(v193))
  {
    AMCP::make_thing_from_description((AMCP *)&v166, (CFTypeRef *)&v193);
    AMCP::swap((AMCP::Thing *)&v166, (AMCP::Thing *)&v185, v62);
    if (v167) {
      v167(0, &v166, 0, 0);
    }
  }
  else if (__p[40])
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v185, (uint64_t)__p, v61);
  }
  if (v187)
  {
    LODWORD(v182) = 1920168547;
    *(void ***)((char *)&v182 + 4) = *(void ***)((char *)keys + 4);
    AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>((uint64_t *)&v166, (uint64_t)&v182, (uint64_t)&v185);
  }
  else
  {
    *(_OWORD *)&v166.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v193);
  if (v187) {
    v187(0, &v185, 0, 0);
  }
  if (v166.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v166.__r_.__value_.__r.__words[0] + 40), &v166);
  }
  if (v166.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v166.__r_.__value_.__l.__size_);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  uint64_t v63 = 0;
  __p[0] = 0;
  unsigned char __p[40] = 0;
  do
  {
    unsigned int v64 = 0;
    int v65 = AMCP::Property_Traits<1818454126u>::k_valid_scopes[v63];
    do
    {
      LODWORD(keys[0]) = 1818454126;
      HIDWORD(keys[0]) = v65;
      LODWORD(keys[1]) = v64;
      long long v187 = 0;
      long long v185 = 0u;
      long long v186 = 0u;
      if (!*((void *)this + 6))
      {
        CFStringRef v135 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v135, "Could not construct");
        __cxa_throw(v135, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      AMCP::Address::to_string(&v166, (unsigned int *)keys, (int16x8_t)0);
      if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFNumberRef v66 = &v166;
      }
      else {
        CFNumberRef v66 = (std::string *)v166.__r_.__value_.__r.__words[0];
      }
      if (v66)
      {
        if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFIndex v67 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
        }
        else {
          CFIndex v67 = v166.__r_.__value_.__l.__size_;
        }
        CFStringRef v68 = CFStringCreateWithBytes(0, (const UInt8 *)v66, v67, 0x8000100u, 0);
        if (!v68)
        {
          uint64_t v138 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v138, "Could not construct");
          __cxa_throw(v138, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v193, *((CFDictionaryRef *)this + 6), v68);
        CFRelease(v68);
      }
      else
      {
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v193, *((CFDictionaryRef *)this + 6), 0);
      }
      if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v166.__r_.__value_.__l.__data_);
      }
      if (BYTE8(v193))
      {
        AMCP::make_thing_from_description((AMCP *)&v166, (CFTypeRef *)&v193);
        AMCP::swap((AMCP::Thing *)&v166, (AMCP::Thing *)&v185, v70);
        if (v167) {
          v167(0, &v166, 0, 0);
        }
      }
      else if (__p[40])
      {
        AMCP::Thing::operator=((AMCP::Thing *)&v185, (uint64_t)__p, v69);
      }
      if (v187)
      {
        LODWORD(v182) = 1818454126;
        *(void ***)((char *)&v182 + 4) = *(void ***)((char *)keys + 4);
        AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>((uint64_t *)&v166, (uint64_t)&v182, (uint64_t)&v185);
      }
      else
      {
        *(_OWORD *)&v166.__r_.__value_.__l.__data_ = 0uLL;
      }
      std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v193);
      if (v187) {
        v187(0, &v185, 0, 0);
      }
      if (v166.__r_.__value_.__r.__words[0]) {
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v166.__r_.__value_.__r.__words[0] + 40), &v166);
      }
      if (v166.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v166.__r_.__value_.__l.__size_);
      }
      ++v64;
    }
    while (v64 <= a2);
    ++v63;
  }
  while (v63 != 4);
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  uint64_t v71 = 0;
  __p[0] = 0;
  unsigned char __p[40] = 0;
  do
  {
    unsigned int v72 = 0;
    int v73 = AMCP::Property_Traits<1818452846u>::k_valid_scopes[v71];
    do
    {
      LODWORD(keys[0]) = 1818452846;
      HIDWORD(keys[0]) = v73;
      LODWORD(keys[1]) = v72;
      long long v187 = 0;
      long long v185 = 0u;
      long long v186 = 0u;
      if (!*((void *)this + 6))
      {
        uint64_t v136 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v136, "Could not construct");
        __cxa_throw(v136, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      AMCP::Address::to_string(&v166, (unsigned int *)keys, (int16x8_t)0);
      if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        mach_port_t v74 = &v166;
      }
      else {
        mach_port_t v74 = (std::string *)v166.__r_.__value_.__r.__words[0];
      }
      if (v74)
      {
        if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFIndex v75 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
        }
        else {
          CFIndex v75 = v166.__r_.__value_.__l.__size_;
        }
        CFStringRef v76 = CFStringCreateWithBytes(0, (const UInt8 *)v74, v75, 0x8000100u, 0);
        if (!v76)
        {
          unint64_t v139 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v139, "Could not construct");
          __cxa_throw(v139, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v193, *((CFDictionaryRef *)this + 6), v76);
        CFRelease(v76);
      }
      else
      {
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v193, *((CFDictionaryRef *)this + 6), 0);
      }
      if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v166.__r_.__value_.__l.__data_);
      }
      if (BYTE8(v193))
      {
        AMCP::make_thing_from_description((AMCP *)&v166, (CFTypeRef *)&v193);
        AMCP::swap((AMCP::Thing *)&v166, (AMCP::Thing *)&v185, v78);
        if (v167) {
          v167(0, &v166, 0, 0);
        }
      }
      else if (__p[40])
      {
        AMCP::Thing::operator=((AMCP::Thing *)&v185, (uint64_t)__p, v77);
      }
      if (v187)
      {
        LODWORD(v182) = 1818452846;
        *(void ***)((char *)&v182 + 4) = *(void ***)((char *)keys + 4);
        AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>((uint64_t *)&v166, (uint64_t)&v182, (uint64_t)&v185);
      }
      else
      {
        *(_OWORD *)&v166.__r_.__value_.__l.__data_ = 0uLL;
      }
      std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v193);
      if (v187) {
        v187(0, &v185, 0, 0);
      }
      if (v166.__r_.__value_.__r.__words[0]) {
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v166.__r_.__value_.__r.__words[0] + 40), &v166);
      }
      if (v166.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v166.__r_.__value_.__l.__size_);
      }
      ++v72;
    }
    while (v72 <= a2);
    ++v71;
  }
  while (v71 != 4);
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  uint64_t v79 = 0;
  __p[0] = 0;
  unsigned char __p[40] = 0;
  do
  {
    unsigned int v80 = 0;
    int v81 = AMCP::Property_Traits<1818455662u>::k_valid_scopes[v79];
    do
    {
      LODWORD(keys[0]) = 1818455662;
      HIDWORD(keys[0]) = v81;
      LODWORD(keys[1]) = v80;
      long long v187 = 0;
      long long v185 = 0u;
      long long v186 = 0u;
      if (!*((void *)this + 6))
      {
        mach_port_t v137 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v137, "Could not construct");
        __cxa_throw(v137, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      AMCP::Address::to_string(&v166, (unsigned int *)keys, (int16x8_t)0);
      if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v82 = &v166;
      }
      else {
        uint64_t v82 = (std::string *)v166.__r_.__value_.__r.__words[0];
      }
      if (v82)
      {
        if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFIndex v83 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
        }
        else {
          CFIndex v83 = v166.__r_.__value_.__l.__size_;
        }
        CFStringRef v84 = CFStringCreateWithBytes(0, (const UInt8 *)v82, v83, 0x8000100u, 0);
        if (!v84)
        {
          mach_port_t v140 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v140, "Could not construct");
          __cxa_throw(v140, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v193, *((CFDictionaryRef *)this + 6), v84);
        CFRelease(v84);
      }
      else
      {
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v193, *((CFDictionaryRef *)this + 6), 0);
      }
      if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v166.__r_.__value_.__l.__data_);
      }
      if (BYTE8(v193))
      {
        AMCP::make_thing_from_description((AMCP *)&v166, (CFTypeRef *)&v193);
        AMCP::swap((AMCP::Thing *)&v166, (AMCP::Thing *)&v185, v86);
        if (v167) {
          v167(0, &v166, 0, 0);
        }
      }
      else if (__p[40])
      {
        AMCP::Thing::operator=((AMCP::Thing *)&v185, (uint64_t)__p, v85);
      }
      if (v187)
      {
        LODWORD(v182) = 1818455662;
        *(void ***)((char *)&v182 + 4) = *(void ***)((char *)keys + 4);
        AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>((uint64_t *)&v166, (uint64_t)&v182, (uint64_t)&v185);
      }
      else
      {
        *(_OWORD *)&v166.__r_.__value_.__l.__data_ = 0uLL;
      }
      std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v193);
      if (v187) {
        v187(0, &v185, 0, 0);
      }
      if (v166.__r_.__value_.__r.__words[0]) {
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v166.__r_.__value_.__r.__words[0] + 40), &v166);
      }
      if (v166.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v166.__r_.__value_.__l.__size_);
      }
      ++v80;
    }
    while (v80 <= a2);
    ++v79;
  }
  while (v79 != 4);
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  int v87 = *((_DWORD *)this + 22);
  *(void *)std::string __p = *(void *)(*((void *)this + 1) + 16);
  *(_DWORD *)&__p[8] = v87;
  *(_DWORD *)&__p[12] = 1633907820;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)&v185, 0, (long long *)__p, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v185 + 40), &v185);
  if (*((void *)&v185 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v185 + 1));
  }
  int v88 = *((_DWORD *)this + 22);
  *(void *)std::string __p = *(void *)(*((void *)this + 1) + 16);
  *(_DWORD *)&__p[8] = v88;
  *(_OWORD *)&__p[12] = xmmword_1BAFF9490;
  *(_OWORD *)&__p[28] = xmmword_1BAFF94A0;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v185, 0, (uint64_t *)__p, 7.28117485e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v185 + 40), &v185);
  if (*((void *)&v185 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v185 + 1));
  }
  int v89 = *((_DWORD *)this + 22);
  *(void *)std::string __p = *(void *)(*((void *)this + 1) + 16);
  *(_DWORD *)&__p[8] = v89;
  *(_OWORD *)&__p[12] = xmmword_1BAFF9490;
  *(_OWORD *)&__p[28] = xmmword_1BAFF94B0;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v185, 0, (uint64_t *)__p, 8.1320867e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v185 + 40), &v185);
  if (*((void *)&v185 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v185 + 1));
  }
  int v90 = *((_DWORD *)this + 22);
  *(void *)std::string __p = *(void *)(*((void *)this + 1) + 16);
  *(_DWORD *)&__p[8] = v90;
  *(_OWORD *)&__p[12] = xmmword_1BAFF9490;
  *(_OWORD *)&__p[28] = xmmword_1BAFF94C0;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,unsigned int>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,unsigned int const&)::{lambda(void)#1}>((uint64_t *)&v185, 0, (uint64_t *)__p, 5.07911975e233);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v185 + 40), &v185);
  if (*((void *)&v185 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v185 + 1));
  }
  CFDictionaryRef v91 = (const __CFDictionary *)*((void *)this + 6);
  if (!v91)
  {
    mach_port_t v152 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v152, "Could not construct");
    __cxa_throw(v152, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFIndex Count = CFDictionaryGetCount(v91);
  *(void *)std::string __p = 0;
  std::vector<void const*>::vector(keys, Count, __p);
  *(void *)std::string __p = 0;
  std::vector<void const*>::vector(&v190, Count, __p);
  CFDictionaryGetKeysAndValues(*((CFDictionaryRef *)this + 6), (const void **)keys[0], v190);
  if (Count)
  {
    unint64_t v93 = 0;
    __int32 v162 = vdup_n_s32(0x676C6F62u).i32[1];
    while (1)
    {
      if (v93 >= keys[1] - keys[0]) {
LABEL_478:
      }
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      int16x8_t v94 = keys[0][v93];
      if (!v94) {
        goto LABEL_461;
      }
      CFRetain(keys[0][v93]);
      uint64_t v172 = (uint64_t)v94;
      CFTypeID v95 = CFGetTypeID(v94);
      if (v95 == CFStringGetTypeID()) {
        break;
      }
LABEL_460:
      CFRelease(v94);
LABEL_461:
      if (++v93 == Count) {
        goto LABEL_465;
      }
    }
    applesauce::CF::TypeRef::operator applesauce::CF::StringRef((applesauce::CF::StringRef *)cf, (CFTypeRef *)&v172);
    if (!cf[0])
    {
      std::vector<unsigned int> v141 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v141, "Could not construct");
      __cxa_throw(v141, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf[0]);
    LODWORD(v96) = 0;
    unint64_t v97 = __p[23];
    std::string::size_type v98 = *(AMCP **)__p;
    uint64_t v99 = __p;
    if (__p[23] < 0)
    {
      uint64_t v99 = *(unsigned char **)__p;
      unint64_t v97 = *(void *)&__p[8];
    }
    unint64_t v100 = 0x676C6F6200000000;
    if (v99)
    {
      uint64_t v165 = 0x676C6F6200000000;
      if (v97 < 4)
      {
LABEL_430:
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        AMCP::local_get_property_traits_list(v98);
        if (!std::__hash_table<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>>>::find<unsigned int>(v165))
        {
          if (v93 >= v191 - v190) {
            goto LABEL_478;
          }
          long long v127 = v190[v93];
          if (v127) {
            CFRetain(v190[v93]);
          }
          v171[0] = v127;
          AMCP::make_thing_from_description((AMCP *)&v166, v171);
          uint64_t v128 = (char *)operator new(0x50uLL);
          *((void *)v128 + 1) = 0;
          *((void *)v128 + 2) = 0;
          *(void *)uint64_t v128 = &unk_1F1488548;
          uint64_t v129 = (uint64_t)(v128 + 24);
          *(void *)std::string __p = v165;
          *(_DWORD *)&__p[8] = v96;
          AMCP::Core::Operation::Operation((uint64_t)(v128 + 24), (int *)__p);
          CFTypeRef v177 = v128 + 24;
          CFStringRef v178 = v128;
          float v195 = 0;
          long long v193 = 0u;
          long long v194 = 0u;
          if (v167) {
            v167(1, &v166, &v193, 0);
          }
          int v163 = v96;
          unint64_t v130 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
          long long v185 = 0u;
          long long v186 = 0u;
          long long v187 = 0;
          if (v195) {
            v195(2, (uint64_t)&v193, (AMCP::Thing *)&v185, 0);
          }
          *((void *)&v183 + 1) = 0;
          uint64_t v131 = (char *)operator new(0x30uLL);
          *(void *)uint64_t v131 = &unk_1F146DBA8;
          *(_OWORD *)(v131 + 8) = 0u;
          *(_OWORD *)(v131 + 24) = 0u;
          *((void *)v131 + 5) = 0;
          if (v187) {
            v187(2, &v185, v131 + 8, 0);
          }
          *((void *)&v183 + 1) = v131;
          memset(__p, 0, 40);
          std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v182);
          *(void *)&__p[32] = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
          std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v129, v130, (AMCP *)__p);
          if (*(void *)&__p[32]) {
            (*(void (**)(void, unsigned char *, void, void))&__p[32])(0, __p, 0, 0);
          }
          std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](&v182);
          if (v187) {
            v187(0, &v185, 0, 0);
          }
          if (v195) {
            v195(0, (uint64_t)&v193, 0, 0);
          }
          std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v193, *((void *)this + 3), *((std::__shared_weak_count **)this + 4));
          long long v132 = v193;
          if (*((void *)&v193 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v193 + 1) + 16), 1uLL, memory_order_relaxed);
          }
          unint64_t v133 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
          *((void *)&v186 + 1) = 0;
          uint64_t v134 = (char *)operator new(0x28uLL);
          *(void *)uint64_t v134 = &unk_1F146DC28;
          *(_OWORD *)(v134 + 8) = v132;
          *((void *)v134 + 3) = v165;
          *((_DWORD *)v134 + 8) = v163;
          *((void *)&v186 + 1) = v134;
          memset(__p, 0, 40);
          std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v185);
          *(void *)&__p[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
          std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v129, v133, (AMCP *)__p);
          if (*(void *)&__p[32]) {
            (*(void (**)(void, unsigned char *, void, void))&__p[32])(0, __p, 0, 0);
          }
          std::__function::__value_func<void ()(AMCP::Thing const&)>::~__value_func[abi:ne180100](&v185);
          if (*((void *)&v193 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v193 + 1));
          }
          std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)v128 + 16, &v177);
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v128);
          if (v167) {
            v167(0, &v166, 0, 0);
          }
          if (v127) {
            CFRelease(v127);
          }
        }
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        goto LABEL_460;
      }
      if (*v99)
      {
        uint64_t v101 = 1;
        do
        {
          uint64_t v102 = v101;
          if (v99[v101++]) {
            BOOL v104 = v102 >= v97;
          }
          else {
            BOOL v104 = 1;
          }
        }
        while (!v104);
        unint64_t v105 = __PAIR64__(v162, bswap32(*(_DWORD *)v99));
        uint64_t v165 = v105;
        if (v102 < 5) {
          goto LABEL_429;
        }
        LODWORD(v96) = 0;
        unint64_t v106 = v102 - 1;
        if ((unint64_t)(v102 - 1) < 8 || v99[4] != 47) {
          goto LABEL_430;
        }
        HIDWORD(v105) = bswap32(*(_DWORD *)(v99 + 5));
        uint64_t v165 = v105;
        if (v106 < 9 || v99[9] != 47) {
          goto LABEL_429;
        }
        LODWORD(v96) = 0;
        unint64_t v107 = v102 - 10;
        if (v106 == 9) {
          goto LABEL_430;
        }
        CFNumberRef v108 = v99 + 10;
        if (!v99[10]) {
          goto LABEL_430;
        }
        uint64_t v109 = 0;
        unsigned int v110 = v99 + 11;
        CFNumberRef v111 = v99 + 11;
        do
        {
          CFNumberRef v112 = v111;
          unint64_t v113 = v109 + 1;
          ++v111;
          if (v110[v109]) {
            BOOL v114 = v113 >= v107;
          }
          else {
            BOOL v114 = 1;
          }
          ++v109;
        }
        while (!v114);
        uint64_t v115 = 0;
        unint64_t v116 = (unint64_t)&v108[v113];
        while (1)
        {
          int v117 = (char)v108[v115];
          if ((v117 - 9) >= 5 && v117 != 32) {
            break;
          }
          if (v113 == ++v115) {
            goto LABEL_429;
          }
        }
        CFStringRef v118 = v117 == 43 || v117 == 45 ? &v108[v115 + 1] : &v108[v115];
        if (v118 == (char *)v116) {
          goto LABEL_429;
        }
        int v119 = *v118;
        if ((unint64_t)(v118 + 1) >= v116)
        {
          if (v119 == 48)
          {
LABEL_410:
            ++v118;
            unint64_t v120 = 8;
            goto LABEL_412;
          }
        }
        else if (v119 == 48)
        {
          if ((v118[1] | 0x20) == 0x78)
          {
            v118 += 2;
            unint64_t v120 = 16;
            goto LABEL_412;
          }
          goto LABEL_410;
        }
        unint64_t v120 = 10;
LABEL_412:
        if (v118 != (char *)v116)
        {
          if ((unint64_t)v118 >= v116)
          {
            LODWORD(v96) = 0;
          }
          else
          {
            unint64_t v96 = 0;
            unint64_t v121 = 0xFFFFFFFF / v120;
            uint64_t v122 = v112 - v118;
            while (1)
            {
              int v123 = *v118;
              if ((v123 - 48) >= 0xA)
              {
                if ((v123 - 97) >= 0x1A)
                {
                  if ((v123 - 65) > 0x19) {
                    goto LABEL_430;
                  }
                  uint64_t v124 = -55;
                }
                else
                {
                  uint64_t v124 = -87;
                }
              }
              else
              {
                uint64_t v124 = -48;
              }
              unint64_t v125 = v124 + *v118;
              if (v125 >= v120 || v96 > v121) {
                break;
              }
              if (v96 == v121 && v125 > ~(v121 * v120))
              {
                LODWORD(v96) = 0xFFFFFFFF / v120;
                goto LABEL_430;
              }
              unint64_t v96 = v125 + v96 * v120;
              ++v118;
              if (!--v122) {
                goto LABEL_430;
              }
            }
          }
          goto LABEL_430;
        }
LABEL_429:
        LODWORD(v96) = 0;
        goto LABEL_430;
      }
      LODWORD(v96) = 0;
      unint64_t v100 = __PAIR64__(v162, bswap32(*(_DWORD *)v99));
    }
    uint64_t v165 = v100;
    goto LABEL_430;
  }
LABEL_465:
  if (v190)
  {
    std::string v191 = v190;
    operator delete(v190);
  }
  if (keys[0])
  {
    keys[1] = keys[0];
    operator delete(keys[0]);
  }
  if (v161) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v161);
  }
}

void sub_1BAD23D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

const void *applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>(uint64_t a1, CFDictionaryRef theDict, const void *a3)
{
  uint64_t result = applesauce::CF::details::at_key<applesauce::CF::StringRef>(theDict, a3);
  if (result)
  {
    int v5 = result;
    uint64_t result = CFRetain(result);
    *(void *)a1 = v5;
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
    *(unsigned char *)a1 = 0;
  }
  *(unsigned char *)(a1 + 8) = v6;
  return result;
}

uint64_t AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  unint64_t v23 = 0;
  char v6 = operator new(0x40uLL);
  *char v6 = &unk_1F146D8A8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  unint64_t v23 = v6;
  memset(v20, 0, sizeof(v20));
  uint64_t v21 = 0;
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  uint64_t v21 = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAD2414C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    unint64_t v2 = *(void (**)(void, uint64_t, void, void))(a1 + 32);
    if (v2) {
      v2(0, a1, 0, 0);
    }
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  unint64_t v5 = *(void (**)(uint64_t, uint64_t, _OWORD *, void))(a3 + 32);
  if (v5) {
    v5(1, a3, v10, 0);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, *(_DWORD *)(a2 + 8), *(double *)a2);
  uint64_t v6 = *a1;
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  memset(v12, 0, sizeof(v12));
  uint64_t v13 = 0;
  if (v11) {
    v11(1, v10, v12, 0);
  }
  int v17 = 0;
  uint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v8 = &unk_1F146DA28;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *((void *)v8 + 5) = 0;
  if (v13) {
    v13(1, v12, v8 + 8, 0);
  }
  int v17 = v8;
  memset(v14, 0, sizeof(v14));
  CFStringRef v15 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)v16);
  CFStringRef v15 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v14);
  if (v15) {
    v15(0, (uint64_t)v14, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v16);
  if (v13) {
    v13(0, v12, 0, 0);
  }
  uint64_t result = AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(v6);
  if (v11) {
    return ((uint64_t (*)(void, _OWORD *, void, void))v11)(0, v10, 0, 0);
  }
  return result;
}

void sub_1BAD24378(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  CFStringRef v15 = 0;
  memset(v14, 0, sizeof(v14));
  unint64_t v5 = *(void (**)(uint64_t, uint64_t, _OWORD *, void))(a3 + 32);
  if (v5) {
    v5(1, a3, v14, 0);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, *(_DWORD *)(a2 + 8), *(double *)a2);
  uint64_t v6 = *a1;
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v18 = 0;
  if (v15) {
    v15(1, v14, &v16, 0);
  }
  *((void *)&v29 + 1) = 0;
  uint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v8 = &unk_1F146DAA8;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *((void *)v8 + 5) = 0;
  if (v18) {
    v18(1, &v16, v8 + 8, 0);
  }
  *((void *)&v29 + 1) = v8;
  long long v21 = 0u;
  long long v22 = 0u;
  unint64_t v23 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)&v21, (uint64_t)&v28);
  unint64_t v23 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)&v21);
  if (v23) {
    v23(0, (uint64_t)&v21, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](&v28);
  if (v18) {
    v18(0, &v16, 0, 0);
  }
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v16, v6);
  uint64_t v19 = *(void *)(v6 + 40);
  int v20 = *(_DWORD *)(v6 + 48);
  unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::URLRef ()(void)>>();
  long long v10 = v16;
  long long v16 = 0uLL;
  long long v21 = v10;
  long long v22 = v17;
  LODWORD(v23) = v18;
  if (*((void *)&v17 + 1))
  {
    unint64_t v11 = *(void *)(v17 + 8);
    if ((*((void *)&v10 + 1) & (*((void *)&v10 + 1) - 1)) != 0)
    {
      if (v11 >= *((void *)&v10 + 1)) {
        v11 %= *((void *)&v10 + 1);
      }
    }
    else
    {
      v11 &= *((void *)&v10 + 1) - 1;
    }
    *(void *)(v10 + 8 * v11) = &v22;
    long long v17 = 0uLL;
  }
  uint64_t v24 = v19;
  int v25 = v20;
  CFNumberRef v27 = 0;
  int v12 = operator new(0x40uLL);
  *int v12 = &unk_1F146DB28;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v12 + 1), (uint64_t *)&v21);
  void v12[6] = v24;
  *((_DWORD *)v12 + 14) = v25;
  CFNumberRef v27 = v12;
  long long v28 = 0u;
  long long v29 = 0u;
  uint64_t v30 = 0;
  std::__function::__value_func<applesauce::CF::URLRef ()(void)>::__value_func[abi:ne180100]((uint64_t)&v28, (uint64_t)v26);
  uint64_t v30 = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::URLRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v9, (AMCP *)&v28);
  if (v30) {
    v30(0, (uint64_t)&v28, 0, 0);
  }
  std::__function::__value_func<applesauce::CF::URLRef ()(void)>::~__value_func[abi:ne180100](v26);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v21);
  uint64_t result = std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v16);
  if (v15) {
    return ((uint64_t (*)(void, _OWORD *, void, void))v15)(0, v14, 0, 0);
  }
  return result;
}

void sub_1BAD246EC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *std::vector<void const*>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<void const*>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1BAD247C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_1>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_1>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Object13populate_coreEjE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_1>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(unsigned int **)(a1 + 16);
  if (!v3
    || (uint64_t v3 = (unsigned int *)std::__shared_weak_count::lock((std::__shared_weak_count *)v3),
        (unint64_t v5 = (std::__shared_weak_count *)v3) == 0)
    || (uint64_t v3 = *(unsigned int **)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v7 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)long long v29 = 2080;
      *(void *)&v29[2] = "Null_Object.cpp";
      __int16 v30 = 1024;
      int v31 = 438;
      __int16 v32 = 2080;
      *(void *)CFIndex v33 = "object_ptr.operator BOOL() == false";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no model object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v20, "no model object");
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    long long v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v33[6] = "auto AMCP::Null::Object::populate_core(Address::Element)::(anonymous class)::operator()(const Thing &) const";
    CFStringRef v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    int v35 = 438;
    std::vector<void *>::vector(&v15);
    int v10 = backtrace((void **)v15, (*((void *)&v15 + 1) - (void)v15) >> 3);
    std::vector<void *>::resize((char **)&v15, v10);
    long long v17 = &unk_1F148AA90;
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(unsigned int *, void, uint64_t, uint64_t))(*(void *)v3 + 40))(v3, v3[22], a1 + 24, a2);
  if (!(_BYTE)v6)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)long long v29 = 2080;
      *(void *)&v29[2] = "Null_Object.cpp";
      __int16 v30 = 1024;
      int v31 = 440;
      __int16 v32 = 2080;
      *(void *)CFIndex v33 = "was_handled == Object::Was_Handled::no";
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not handled", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v20, "not handled");
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    long long v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v33[6] = "auto AMCP::Null::Object::populate_core(Address::Element)::(anonymous class)::operator()(const Thing &) const";
    CFStringRef v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    int v35 = 440;
    std::vector<void *>::vector(&v15);
    int v14 = backtrace((void **)v15, (*((void *)&v15 + 1) - (void)v15) >> 3);
    std::vector<void *>::resize((char **)&v15, v14);
    long long v17 = &unk_1F148AA90;
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1BAD24EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,uint64_t a29)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_1>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *__p)
{
  unint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_1>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

double std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_1>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F146DC28;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  double result = *(double *)(a1 + 24);
  *(double *)(a2 + 24) = result;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

double std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_1>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (double *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F146DC28;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  double result = *(double *)(a1 + 24);
  v2[3] = result;
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

void std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_1>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146DC28;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_1>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146DC28;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_0>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_0>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Object13populate_coreEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_0>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2, 0);
  }
  return result;
}

void std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_0>,AMCP::Thing ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void (*)(void, void *, void, void))__p[5];
  if (v2) {
    v2(0, __p + 1, 0, 0);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_0>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void, uint64_t, void, void))(result + 40);
  if (v1) {
    return v1(0, result + 8, 0, 0);
  }
  return result;
}

uint64_t std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_0>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F146DBA8;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2 + 8, 0);
  }
  return result;
}

char *std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_0>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F146DBA8;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = 0;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, char *, void))(a1 + 40);
  if (v3) {
    v3(1, a1 + 8, v2 + 8, 0);
  }
  return v2;
}

void sub_1BAD25410(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_0>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146DBA8;
  uint64_t v1 = (void (*)(void, void *, void, void))a1[5];
  if (v1) {
    v1(0, a1 + 1, 0, 0);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Null::Object::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Object::populate_core(unsigned int)::$_0>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146DBA8;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[5];
  if (v2) {
    v2(0, a1 + 1, 0, 0);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  uint64_t v2 = *(void (**)(void, uint64_t, void, void))(a1 + 32);
  if (v2) {
    v2(0, a1, 0, 0);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterIN10applesauce2CF6URLRefEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

CFTypeRef *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::operator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v4, (void *)(a1 + 8));
  double result = AMCP::Thing::convert_to<applesauce::CF::URLRef>(a2, (uint64_t)v4);
  if (v5) {
    return (CFTypeRef *)v5(0, v4, 0, 0);
  }
  return result;
}

void sub_1BAD255F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(void, char *, void, void))
{
  if (a14) {
    a14(0, &a10, 0, 0);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146DB28;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F146DB28;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAD2572C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146DB28;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::URLRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::URLRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146DB28;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyIN10applesauce2CF6URLRefEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2, 0);
  }
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void (*)(void, void *, void, void))__p[5];
  if (v2) {
    v2(0, __p + 1, 0, 0);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void, uint64_t, void, void))(result + 40);
  if (v1) {
    return v1(0, result + 8, 0, 0);
  }
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F146DAA8;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2 + 8, 0);
  }
  return result;
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F146DAA8;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = 0;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, char *, void))(a1 + 40);
  if (v3) {
    v3(1, a1 + 8, v2 + 8, 0);
  }
  return v2;
}

void sub_1BAD259A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146DAA8;
  uint64_t v1 = (void (*)(void, void *, void, void))a1[5];
  if (v1) {
    v1(0, a1 + 1, 0, 0);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::URLRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146DAA8;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[5];
  if (v2) {
    v2(0, a1 + 1, 0, 0);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  uint64_t v2 = *(void (**)(void, uint64_t, void, void))(a1 + 32);
  if (v2) {
    v2(0, a1, 0, 0);
  }
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyIN10applesauce2CF9StringRefEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2, 0);
  }
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void (*)(void, void *, void, void))__p[5];
  if (v2) {
    v2(0, __p + 1, 0, 0);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void, uint64_t, void, void))(result + 40);
  if (v1) {
    return v1(0, result + 8, 0, 0);
  }
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F146DA28;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2 + 8, 0);
  }
  return result;
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F146DA28;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = 0;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, char *, void))(a1 + 40);
  if (v3) {
    v3(1, a1 + 8, v2 + 8, 0);
  }
  return v2;
}

void sub_1BAD25CA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146DA28;
  uint64_t v1 = (void (*)(void, void *, void, void))a1[5];
  if (v1) {
    v1(0, a1 + 1, 0, 0);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146DA28;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[5];
  if (v2) {
    v2(0, a1 + 1, 0, 0);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1}>,void ()(applesauce::CF::StringRef const&)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1}>,void ()(applesauce::CF::StringRef const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_setterIN10applesauce2CF9StringRefEEEvRNS0_9OperationEEUlRKS5_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1}>,void ()(applesauce::CF::StringRef const&)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  unint64_t v5 = 0;
  memset(v4, 0, sizeof(v4));
  AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::construct<applesauce::CF::StringRef const&>((uint64_t)v4, a2);
  uint64_t result = AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v2, (uint64_t)v4);
  if (v5) {
    return v5(0, v4, 0, 0);
  }
  return result;
}

void sub_1BAD25E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(void, uint64_t *, void, void))
{
  if (a13) {
    a13(0, &a9, 0, 0);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1}>,void ()(applesauce::CF::StringRef const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1}>,void ()(applesauce::CF::StringRef const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1}>,void ()(applesauce::CF::StringRef const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146D9A8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1}>,void ()(applesauce::CF::StringRef const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F146D9A8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAD25F80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1}>,void ()(applesauce::CF::StringRef const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146D9A8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(applesauce::CF::StringRef const&)#1}>,void ()(applesauce::CF::StringRef const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146D9A8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1819173229EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlRKSI_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(unsigned int **)(a1 + 16);
  if (!v3
    || (uint64_t v3 = (unsigned int *)std::__shared_weak_count::lock((std::__shared_weak_count *)v3),
        (unint64_t v5 = (std::__shared_weak_count *)v3) == 0)
    || (uint64_t v3 = *(unsigned int **)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v7 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)long long v29 = 2080;
      *(void *)&v29[2] = "Null_Object.cpp";
      __int16 v30 = 1024;
      int v31 = 59;
      __int16 v32 = 2080;
      *(void *)CFIndex v33 = "object_ptr.operator BOOL() == false";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no model object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v20, "no model object");
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    long long v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v33[6] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    CFStringRef v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    int v35 = 59;
    std::vector<void *>::vector(&v15);
    int v10 = backtrace((void **)v15, (*((void *)&v15 + 1) - (void)v15) >> 3);
    std::vector<void *>::resize((char **)&v15, v10);
    long long v17 = &unk_1F148AA90;
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(unsigned int *, void, uint64_t, uint64_t))(*(void *)v3 + 40))(v3, v3[22], a1 + 24, a2);
  if (!(_BYTE)v6)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)long long v29 = 2080;
      *(void *)&v29[2] = "Null_Object.cpp";
      __int16 v30 = 1024;
      int v31 = 61;
      __int16 v32 = 2080;
      *(void *)CFIndex v33 = "was_handled == Object::Was_Handled::no";
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not handled", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v20, "not handled");
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    long long v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v33[6] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    CFStringRef v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    int v35 = 61;
    std::vector<void *>::vector(&v15);
    int v14 = backtrace((void **)v15, (*((void *)&v15 + 1) - (void)v15) >> 3);
    std::vector<void *>::resize((char **)&v15, v14);
    long long v17 = &unk_1F148AA90;
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1BAD26714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,uint64_t a29)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F146D928;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  double result = *(double *)(a1 + 24);
  *(double *)(a2 + 24) = result;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (double *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F146D928;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  double result = *(double *)(a1 + 24);
  v2[3] = result;
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146D928;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146D928;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterIN10applesauce2CF9StringRefEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

CFTypeRef *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::operator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v4, (void *)(a1 + 8));
  double result = AMCP::Thing::convert_to<applesauce::CF::StringRef>(a2, (uint64_t)v4);
  if (v5) {
    return (CFTypeRef *)v5(0, v4, 0, 0);
  }
  return result;
}

void sub_1BAD26B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(void, char *, void, void))
{
  if (a14) {
    a14(0, &a10, 0, 0);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146D8A8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F146D8A8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAD26C94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146D8A8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146D8A8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1819173229EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2, 0);
  }
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void (*)(void, void *, void, void))__p[5];
  if (v2) {
    v2(0, __p + 1, 0, 0);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void, uint64_t, void, void))(result + 40);
  if (v1) {
    return v1(0, result + 8, 0, 0);
  }
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F146D828;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2 + 8, 0);
  }
  return result;
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F146D828;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = 0;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, char *, void))(a1 + 40);
  if (v3) {
    v3(1, a1 + 8, v2 + 8, 0);
  }
  return v2;
}

void sub_1BAD26F10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146D828;
  uint64_t v1 = (void (*)(void, void *, void, void))a1[5];
  if (v1) {
    v1(0, a1 + 1, 0, 0);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1819173229u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146D828;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[5];
  if (v2) {
    v2(0, a1 + 1, 0, 0);
  }
  return a1;
}

uint64_t AMCP::Null::Object::handle_set_property(AMCP::Null::Object *this, uint64_t a2, const AMCP::Address *a3, const AMCP::Thing *a4)
{
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v8)
  {
    mach_port_t v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      uint64_t v10 = *((void *)this + 7);
      if (v10)
      {
        __int16 v11 = (*(uint64_t (**)(uint64_t, uint64_t, const AMCP::Address *, const AMCP::Thing *))(*(void *)v10 + 40))(v10, a2, a3, a4);
        if ((_BYTE)v11)
        {
          unsigned __int8 v12 = v11;
          int v13 = HIBYTE(v11);
LABEL_8:
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
          return v12 | (v13 << 8);
        }
      }
    }
  }
  else
  {
    mach_port_t v9 = 0;
  }
  __int16 v14 = (*(uint64_t (**)(AMCP::Null::Object *, uint64_t, const AMCP::Address *, const AMCP::Thing *))(*(void *)this + 56))(this, a2, a3, a4);
  unsigned __int8 v12 = v14;
  int v13 = HIBYTE(v14);
  if (v9) {
    goto LABEL_8;
  }
  return v12 | (v13 << 8);
}

std::__shared_mutex_base *AMCP::Null::Object::destroy_cores(std::__shared_mutex_base *this)
{
  uint64_t v1 = (uint64_t)this;
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(uint64_t **)&this->__gate1_.__cv_.__opaque[24];
  uint64_t v3 = *(uint64_t **)&this->__gate1_.__cv_.__opaque[32];
  while (v2 != v3)
  {
    uint64_t v4 = *v2;
    v2 += 2;
    this = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4);
  }
  if (*(_DWORD *)(v1 + 88))
  {
    is_base_of = (AMCP::Log::Scope_Registry *)AMCP::is_base_of((AMCP *)0x61636C6B, *(_DWORD *)(v1 + 84));
    if (!is_base_of)
    {
LABEL_31:
      this = AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*(void *)(v1 + 8) + 16), *(_DWORD *)(v1 + 88));
      *(_DWORD *)(v1 + 88) = 0;
      return this;
    }
    AMCP::Log::Scope_Registry::get(is_base_of);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v27, "com.apple.coreaudio", "AMCP");
    int v7 = *(_DWORD *)(v27 + 16);
    switch(v7)
    {
      case 3:
        AMCP::Log::Scope_Registry::get(v6);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        long long v15 = **(NSObject ***)buf;
        if (*(void *)v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
        }
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_INFO)) {
          goto LABEL_29;
        }
        uint64_t v16 = pthread_self();
        mach_port_t v17 = pthread_mach_thread_np(v16);
        int v18 = *(_DWORD *)(v1 + 88);
        AMCP::make_string_for_class_id((AMCP *)*(unsigned int *)(v1 + 80), &__p);
        if (v26 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = (int16x8_t *)__p.i64[0];
        }
        *(_DWORD *)std::string buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v17;
        *(_WORD *)__int16 v30 = 2080;
        *(void *)&v30[2] = "Null_Object.cpp";
        __int16 v31 = 1024;
        int v32 = 325;
        __int16 v33 = 1024;
        int v34 = v18;
        __int16 v35 = 2080;
        uint64_t v36 = p_p;
        int v13 = v15;
        os_log_type_t v14 = OS_LOG_TYPE_INFO;
        break;
      case 2:
        AMCP::Log::Scope_Registry::get(v6);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        std::runtime_error v20 = **(NSObject ***)buf;
        if (*(void *)v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
        }
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_29;
        }
        std::runtime_error v21 = pthread_self();
        mach_port_t v22 = pthread_mach_thread_np(v21);
        int v23 = *(_DWORD *)(v1 + 88);
        AMCP::make_string_for_class_id((AMCP *)*(unsigned int *)(v1 + 80), &__p);
        if (v26 >= 0) {
          uint64_t v24 = &__p;
        }
        else {
          uint64_t v24 = (int16x8_t *)__p.i64[0];
        }
        *(_DWORD *)std::string buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v22;
        *(_WORD *)__int16 v30 = 2080;
        *(void *)&v30[2] = "Null_Object.cpp";
        __int16 v31 = 1024;
        int v32 = 325;
        __int16 v33 = 1024;
        int v34 = v23;
        __int16 v35 = 2080;
        uint64_t v36 = v24;
        _os_log_debug_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Destroying Core %u for %s", buf, 0x28u);
        goto LABEL_24;
      case 1:
        AMCP::Log::Scope_Registry::get(v6);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v8 = **(NSObject ***)buf;
        if (*(void *)v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
        }
        if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_29;
        }
        mach_port_t v9 = pthread_self();
        mach_port_t v10 = pthread_mach_thread_np(v9);
        int v11 = *(_DWORD *)(v1 + 88);
        AMCP::make_string_for_class_id((AMCP *)*(unsigned int *)(v1 + 80), &__p);
        if (v26 >= 0) {
          unsigned __int8 v12 = &__p;
        }
        else {
          unsigned __int8 v12 = (int16x8_t *)__p.i64[0];
        }
        *(_DWORD *)std::string buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v10;
        *(_WORD *)__int16 v30 = 2080;
        *(void *)&v30[2] = "Null_Object.cpp";
        __int16 v31 = 1024;
        int v32 = 325;
        __int16 v33 = 1024;
        int v34 = v11;
        __int16 v35 = 2080;
        uint64_t v36 = v12;
        int v13 = v8;
        os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
        break;
      default:
        goto LABEL_29;
    }
    _os_log_impl(&dword_1BAA78000, v13, v14, "%6u %32s:%-5d Destroying Core %u for %s", buf, 0x28u);
LABEL_24:
    if (v26 < 0) {
      operator delete((void *)__p.i64[0]);
    }
LABEL_29:
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    goto LABEL_31;
  }
  return this;
}

void sub_1BAD27498(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Null::Object::update_cores(AMCP::Null::Object *this, const __CFDictionary **a2, int16x8_t a3)
{
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  if (!*a2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_164;
  }
  a3.i64[0] = 0x676C6F62636C6173;
  int16x8_t __p = (void *)0x676C6F62636C6173;
  int v88 = 0;
  AMCP::Address::to_string(&buf, (unsigned int *)&__p, a3);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string buf = &buf;
  }
  else {
    p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  if (p_buf)
  {
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = buf.__r_.__value_.__l.__size_;
    }
    CFStringRef v7 = CFStringCreateWithBytes(0, (const UInt8 *)p_buf, size, 0x8000100u, 0);
    if (!v7)
    {
      uint64_t v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v8, "Could not construct");
      __cxa_throw(v8, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v7 = 0;
  }
  LODWORD(valuePtr) = 0;
  cf[0] = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf[0])
  {
    CFStringRef v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v84, "Could not construct");
    __cxa_throw(v84, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, *a2, v7, cf);
  mach_port_t v9 = (const void *)valuePtr;
  if (!(void)valuePtr)
  {
LABEL_163:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_164:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  mach_port_t v10 = (const applesauce::CF::DictionaryRef *)applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)valuePtr);
  CFRelease(v9);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  stock_class_id = AMCP::Null::get_stock_class_id(a2, v10);
  if (*((_DWORD *)this + 20) != v10)
  {
    AMCP::Log::Scope_Registry::get(stock_class_id);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    uint64_t v77 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v78 = pthread_self();
      mach_port_t v79 = pthread_mach_thread_np(v78);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v79;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Null_Object.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 279;
      LOWORD(v107) = 2080;
      *(void *)((char *)&v107 + 2) = "m_core_class_id == new_core_class_id";
      unsigned int v80 = "%6u %32s:%-5d Assertion Failed: %s new description can't change the class";
LABEL_159:
      _os_log_error_impl(&dword_1BAA78000, v77, OS_LOG_TYPE_ERROR, v80, (uint8_t *)&buf, 0x22u);
    }
LABEL_160:
    abort();
  }
  if (*((_DWORD *)this + 21) != stock_class_id)
  {
    AMCP::Log::Scope_Registry::get(stock_class_id);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    uint64_t v77 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
    {
      int v81 = pthread_self();
      mach_port_t v82 = pthread_mach_thread_np(v81);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v82;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Null_Object.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 280;
      LOWORD(v107) = 2080;
      *(void *)((char *)&v107 + 2) = "m_core_stock_class_id == new_core_stock_class_id";
      unsigned int v80 = "%6u %32s:%-5d Assertion Failed: %s new description can't change the stock class";
      goto LABEL_159;
    }
    goto LABEL_160;
  }
  int v13 = (CFDictionaryRef *)((char *)this + 48);
  if (!*((void *)this + 6)) {
    goto LABEL_163;
  }
  int16x8_t __p = (void *)0x676C6F626374726CLL;
  int v88 = 0;
  AMCP::Address::to_string(&buf, (unsigned int *)&__p, v12);
  os_log_type_t v14 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? &buf
      : (std::string *)buf.__r_.__value_.__r.__words[0];
  if (v14)
  {
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v15 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v15 = buf.__r_.__value_.__l.__size_;
    }
    CFStringRef v16 = CFStringCreateWithBytes(0, (const UInt8 *)v14, v15, 0x8000100u, 0);
    if (!v16)
    {
      uint64_t v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v85, "Could not construct");
      __cxa_throw(v85, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v94, *v13, v16);
    CFRelease(v16);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v94, *v13, 0);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (!*a2) {
    goto LABEL_163;
  }
  int16x8_t __p = (void *)0x676C6F626374726CLL;
  int v88 = 0;
  AMCP::Address::to_string(&buf, (unsigned int *)&__p, v17);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v18 = &buf;
  }
  else {
    int v18 = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  if (v18)
  {
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v19 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v19 = buf.__r_.__value_.__l.__size_;
    }
    CFStringRef v20 = CFStringCreateWithBytes(0, (const UInt8 *)v18, v19, 0x8000100u, 0);
    if (!v20)
    {
      uint64_t v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v86, "Could not construct");
      __cxa_throw(v86, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v92, *a2, v20);
    CFRelease(v20);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v92, *a2, 0);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  CFDictionaryRef v21 = *v13;
  CFDictionaryRef v22 = *a2;
  *int v13 = *a2;
  if (v22) {
    CFRetain(v22);
  }
  if (v21) {
    CFRelease(v21);
  }
  unsigned int v23 = *((_DWORD *)this + 22);
  if (!v23)
  {
    (*(void (**)(AMCP::Null::Object *))(*(void *)this + 16))(this);
    goto LABEL_150;
  }
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v90, *(std::__shared_mutex_base **)(*((void *)this + 1) + 16), v23);
  uint64_t v24 = v90;
  if (v90)
  {
    uint64_t v25 = AMCP::Null::calculate_max_element((const __CFDictionary **)this + 6, (const applesauce::CF::DictionaryRef *)*((unsigned int *)this + 21));
    (*(void (**)(void **__return_ptr, AMCP::Null::Object *, uint64_t))(*(void *)this + 48))(&__p, this, v25);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)(v24 + 12);
    buf.__r_.__value_.__s.__data_[8] = 1;
    caulk::concurrent::shared_spin_lock::lock(v24 + 12);
    char v26 = v89;
    if (v89)
    {
      do
      {
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)(v24 + 2), (unsigned int *)(v26[4] + 40), v26 + 4);
        char v26 = (void *)*v26;
      }
      while (v26);
    }
    std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&buf);
    strcpy((char *)&buf, "rnwobolg");
    buf.__r_.__value_.__s.__data_[9] = 0;
    WORD1(buf.__r_.__value_.__r.__words[1]) = 0;
    v24[1] = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>((AMCP::Core::Core *)v24, (const AMCP::Address *)&buf, &AMCP::k_object_id_unknown);
    if (v95)
    {
      CFArrayRef v27 = (const __CFArray *)v94;
      if (v94) {
        CFRetain(v94);
      }
      CFArrayRef v105 = v27;
    }
    else
    {
      CFArrayRef v28 = CFArrayCreate(0, 0, 0, MEMORY[0x1E4F1D518]);
      applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v105, v28);
    }
    if (v93)
    {
      CFTypeRef v29 = v92;
      if (v92) {
        CFRetain(v92);
      }
      CFTypeRef v104 = v29;
    }
    else
    {
      CFArrayRef v30 = CFArrayCreate(0, 0, 0, MEMORY[0x1E4F1D518]);
      applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v104, v30);
    }
    AMCP::Null::diff_control_lists((AMCP::Null *)&theArray, &v105, (CFArrayRef *)&v104);
    AMCP::Null::diff_control_lists((AMCP::Null *)&v102, &v105, &theArray);
    AMCP::Null::diff_control_lists((AMCP::Null *)&v101, (CFArrayRef *)&v104, &v105);
    CFArrayRef v31 = theArray;
    if (theArray)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      CFIndex v33 = Count;
      CFArrayRef v34 = theArray;
      if (theArray)
      {
        CFIndex v35 = CFArrayGetCount(theArray);
        if (!v33) {
          goto LABEL_89;
        }
      }
      else
      {
        CFIndex v35 = 0;
        if (!Count) {
          goto LABEL_89;
        }
      }
      unint64_t v36 = 0;
      do
      {
        if (v31 == v34 && v36 == v35) {
          break;
        }
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&buf, v31, v36);
        control_by_descriptiouint64_t n = (void *)AMCP::Null::find_control_by_description((uint64_t *)this + 12, (const __CFDictionary **)&buf, v37);
        if (*((void **)this + 13) != control_by_description)
        {
          CFStringRef v39 = control_by_description;
          long long v40 = control_by_description + 2;
          (*(void (**)(void))(*(void *)*control_by_description + 32))(*control_by_description);
          int64x2_t v41 = (void *)*((void *)this + 13);
          if (v40 != v41)
          {
            do
            {
              CFStringRef v39 = v40;
              long long v42 = *(_OWORD *)v40;
              void *v40 = 0;
              v40[1] = 0;
              int v43 = (std::__shared_weak_count *)*(v40 - 1);
              *((_OWORD *)v40 - 1) = v42;
              if (v43) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v43);
              }
              v40 += 2;
            }
            while (v39 + 2 != v41);
            long long v40 = (void *)*((void *)this + 13);
          }
          while (v40 != v39)
          {
            CFIndex v44 = (std::__shared_weak_count *)*(v40 - 1);
            if (v44) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v44);
            }
            v40 -= 2;
          }
          *((void *)this + 13) = v39;
        }
        if (buf.__r_.__value_.__r.__words[0]) {
          CFRelease(buf.__r_.__value_.__l.__data_);
        }
        ++v36;
      }
      while (v36 != v33);
    }
LABEL_89:
    CFArrayRef v45 = v102;
    if (!v102) {
      goto LABEL_102;
    }
    CFIndex v46 = CFArrayGetCount(v102);
    CFIndex v47 = v46;
    CFArrayRef v48 = v102;
    if (v102)
    {
      CFIndex v49 = CFArrayGetCount(v102);
      if (!v47) {
        goto LABEL_102;
      }
    }
    else
    {
      CFIndex v49 = 0;
      if (!v46) {
        goto LABEL_102;
      }
    }
    unint64_t v50 = 0;
    do
    {
      if (v45 == v48 && v49 == v50) {
        break;
      }
      applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&buf, v45, v50);
      CFNumberRef v52 = (void *)AMCP::Null::find_control_by_description((uint64_t *)this + 12, (const __CFDictionary **)&buf, v51);
      if (*((void **)this + 13) != v52) {
        (*(void (**)(void, std::string *))(*(void *)*v52 + 24))(*v52, &buf);
      }
      if (buf.__r_.__value_.__r.__words[0]) {
        CFRelease(buf.__r_.__value_.__l.__data_);
      }
      ++v50;
    }
    while (v47 != v50);
LABEL_102:
    CFArrayRef v53 = v101;
    if (!v101)
    {
LABEL_138:
      if (v102) {
        CFRelease(v102);
      }
      if (theArray) {
        CFRelease(theArray);
      }
      if (v104) {
        CFRelease(v104);
      }
      if (v105) {
        CFRelease(v105);
      }
      std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(v89);
      CFIndex v75 = __p;
      int16x8_t __p = 0;
      if (v75) {
        operator delete(v75);
      }
      goto LABEL_148;
    }
    CFIndex v54 = CFArrayGetCount(v101);
    CFIndex v55 = v54;
    CFArrayRef v56 = v101;
    if (v101)
    {
      CFIndex v57 = CFArrayGetCount(v101);
      if (!v55)
      {
LABEL_136:
        if (v101) {
          CFRelease(v101);
        }
        goto LABEL_138;
      }
    }
    else
    {
      CFIndex v57 = 0;
      if (!v54) {
        goto LABEL_136;
      }
    }
    unint64_t v58 = 0;
    CFIndex v59 = (void *)((char *)this + 96);
    do
    {
      if (v53 == v56 && v57 == v58) {
        break;
      }
      applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v100, v53, v58);
      CFStringRef v60 = (std::__shared_weak_count *)*((void *)this + 2);
      cf[0] = *((CFTypeRef *)this + 1);
      cf[1] = v60;
      if (v60) {
        atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v61 = *((_DWORD *)this + 10);
      std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v96, *((void *)this + 3), *((std::__shared_weak_count **)this + 4));
      AMCP::Null::make_object((uint64_t)&valuePtr, (uint64_t)cf, v61, &v96, (const __CFDictionary **)&v100, 0, v62);
      if (v97) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v97);
      }
      if (v60) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v60);
      }
      if ((void)valuePtr)
      {
        uint64_t v63 = (void *)*((void *)this + 13);
        unint64_t v64 = *((void *)this + 14);
        if ((unint64_t)v63 >= v64)
        {
          uint64_t v67 = ((uint64_t)v63 - *v59) >> 4;
          unint64_t v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 60) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v69 = v64 - *v59;
          if (v69 >> 3 > v68) {
            unint64_t v68 = v69 >> 3;
          }
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v70 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v70 = v68;
          }
          *((void *)&v107 + 1) = (char *)this + 112;
          uint64_t v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v70);
          unsigned int v72 = &v71[16 * v67];
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)v72;
          *(void *)&long long v107 = &v71[16 * v73];
          uint64_t v74 = *((void *)&valuePtr + 1);
          *(_OWORD *)unsigned int v72 = valuePtr;
          if (v74) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v74 + 8), 1uLL, memory_order_relaxed);
          }
          buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v72 + 16);
          std::vector<std::shared_ptr<DSP_Host_Types::FormatDescription>>::__swap_out_circular_buffer((void *)this + 12, &buf);
          CFNumberRef v66 = (void *)*((void *)this + 13);
          std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&buf);
        }
        else
        {
          *uint64_t v63 = valuePtr;
          uint64_t v65 = *((void *)&valuePtr + 1);
          v63[1] = *((void *)&valuePtr + 1);
          if (v65) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v65 + 8), 1uLL, memory_order_relaxed);
          }
          CFNumberRef v66 = v63 + 2;
        }
        *((void *)this + 13) = v66;
        (*(void (**)(void))(*(void *)valuePtr + 16))(valuePtr);
      }
      if (*((void *)&valuePtr + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&valuePtr + 1));
      }
      if (v100) {
        CFRelease(v100);
      }
      ++v58;
    }
    while (v55 != v58);
    goto LABEL_136;
  }
LABEL_148:
  if (v91) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v91);
  }
LABEL_150:
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v92);
  return std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v94);
}

void sub_1BAD28034(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

const applesauce::CF::DictionaryRef *AMCP::Null::get_stock_class_id(const __CFDictionary **this, const applesauce::CF::DictionaryRef *a2)
{
  uint64_t v2 = a2;
  AMCP::get_class_traits((AMCP *)&v18, a2);
  int v5 = v18.__r_.__value_.__s.__data_[8];
  if (v21 < 0) {
    operator delete(__p);
  }
  if (v18.__r_.__value_.__r.__words[2])
  {
    std::string::size_type v19 = v18.__r_.__value_.__r.__words[2];
    operator delete((void *)v18.__r_.__value_.__r.__words[2]);
  }
  if (!v5)
  {
    if (*this)
    {
      v4.i64[0] = 0x676C6F6262636C73;
      uint64_t v15 = 0x676C6F6262636C73;
      int v16 = 0;
      AMCP::Address::to_string(&v18, (unsigned int *)&v15, v4);
      if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v6 = &v18;
      }
      else {
        uint64_t v6 = (std::string *)v18.__r_.__value_.__r.__words[0];
      }
      if (v6)
      {
        if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFIndex size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
        }
        else {
          CFIndex size = v18.__r_.__value_.__l.__size_;
        }
        CFStringRef v8 = CFStringCreateWithBytes(0, (const UInt8 *)v6, size, 0x8000100u, 0);
        if (!v8)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
      else
      {
        CFStringRef v8 = 0;
      }
      LODWORD(valuePtr) = 0;
      CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      if (!cf)
      {
        int v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v13, "Could not construct");
        __cxa_throw(v13, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, *this, v8, &cf);
      CFNumberRef v10 = valuePtr;
      if (valuePtr)
      {
        uint64_t v2 = (const applesauce::CF::DictionaryRef *)applesauce::CF::convert_to<unsigned int,0>(valuePtr);
        CFRelease(v10);
        if (cf) {
          CFRelease(cf);
        }
        if (v8) {
          CFRelease(v8);
        }
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v18.__r_.__value_.__l.__data_);
        }
        return v2;
      }
      int16x8_t v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v12, "Could not construct");
    }
    else
    {
      int16x8_t v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v12, "Could not construct");
    }
    __cxa_throw(v12, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return v2;
}

void sub_1BAD28330(void *a1)
{
}

uint64_t AMCP::Null::calculate_max_element(const __CFDictionary **this, const applesauce::CF::DictionaryRef *a2)
{
  if (AMCP::is_base_of((AMCP *)0x61646576, a2))
  {
    unsigned int max_number_channels_for_scope = AMCP::Null::get_max_number_channels_for_scope((AMCP::Null *)0x696E7074, this, v4, v5);
    unsigned int v9 = AMCP::Null::get_max_number_channels_for_scope((AMCP::Null *)0x6F757470, this, v7, v8);
    if (max_number_channels_for_scope <= v9) {
      unsigned int max_number_channels_for_scope = v9;
    }
    LODWORD(result) = AMCP::Null::get_max_element_for_controls(this, v10, v11);
    if (max_number_channels_for_scope <= result) {
      return result;
    }
    else {
      return max_number_channels_for_scope;
    }
  }
  else
  {
    return AMCP::Null::get_max_element_for_controls(this, v3, v5);
  }
}

void AMCP::Null::diff_control_lists(AMCP::Null *this, CFArrayRef *a2, CFArrayRef *a3)
{
  CFDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  CFArrayRef v5 = *a2;
  if (!*a2)
  {
LABEL_30:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v6 = 0;
  while (v6 < CFArrayGetCount(v5))
  {
    if (!*a2) {
      goto LABEL_30;
    }
    applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&v28, *a2, v6);
    if (v29)
    {
      unint64_t control_marker = AMCP::Null::make_control_marker(&v28, v7, v8);
      int v11 = control_marker;
      int v12 = v10;
      unint64_t v13 = HIDWORD(control_marker);
      if (!control_marker || !HIDWORD(control_marker) || v10 == -1)
      {
        CFArrayRef v14 = *a3;
        if (!*a3) {
          goto LABEL_30;
        }
        unint64_t v15 = 0;
        while (v15 < CFArrayGetCount(v14))
        {
          if (!*a3) {
            goto LABEL_30;
          }
          applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&v26, *a3, v15);
          if (v27
            && ((unint64_t v18 = AMCP::Null::make_control_marker(&v26, v16, v17),
                 int v20 = v18,
                 int v21 = v19,
                 unint64_t v22 = HIDWORD(v18),
                 !v18)
             || !HIDWORD(v18)
             || v19 == -1))
          {
            std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v26);
            if (v11 == v20 && v13 == v22 && v12 == v21) {
              goto LABEL_25;
            }
          }
          else
          {
            std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v26);
          }
          ++v15;
          CFArrayRef v14 = *a3;
          if (!*a3) {
            goto LABEL_30;
          }
        }
        mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(Mutable, v28);
      }
    }
LABEL_25:
    std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v28);
    ++v6;
    CFArrayRef v5 = *a2;
    if (!*a2) {
      goto LABEL_30;
    }
  }
  mcp_applesauce::CF::Array_Builder::copy_array(this, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAD28618(void *a1)
{
  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Null::find_control_by_description(uint64_t *a1, const __CFDictionary **this, int16x8_t a3)
{
  unint64_t control_marker = AMCP::Null::make_control_marker(this, (const applesauce::CF::DictionaryRef *)this, a3);
  uint64_t v7 = *a1;
  if (*a1 != a1[1])
  {
    unint64_t v8 = control_marker;
    int v9 = (int)v5;
    do
    {
      if (AMCP::Null::make_control_marker((const __CFDictionary **)(*(void *)v7 + 48), v5, v6) == v8
        && v5 == v9)
      {
        break;
      }
      v7 += 16;
    }
    while (v7 != a1[1]);
  }
  return v7;
}

void AMCP::Null::make_object(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, const __CFDictionary **a5, unsigned int a6, int16x8_t a7)
{
  unsigned int stock_class_id = a6;
  int v51 = a3;
  if (!a6)
  {
    if (!*a5)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::construct_error(exception);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    a7.i64[0] = 0x676C6F62636C6173;
    uint64_t v46 = 0x676C6F62636C6173;
    int v47 = 0;
    AMCP::Address::to_string(&__p, (unsigned int *)&v46, a7);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (p_p)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        CFIndex size = __p.__r_.__value_.__l.__size_;
      }
      CFStringRef v15 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
      CFStringRef v49 = v15;
      if (!v15)
      {
        int v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v16, "Could not construct");
        __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    else
    {
      CFStringRef v15 = 0;
      CFStringRef v49 = 0;
    }
    int valuePtr = 0;
    CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!cf)
    {
      long long v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v42, "Could not construct");
      __cxa_throw(v42, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v50, *a5, v15, &cf);
    CFNumberRef v17 = v50;
    if (!v50)
    {
      int v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v43, "Could not construct");
      __cxa_throw(v43, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unint64_t v18 = (const applesauce::CF::DictionaryRef *)applesauce::CF::convert_to<unsigned int,0>(v50);
    CFRelease(v17);
    if (cf) {
      CFRelease(cf);
    }
    if (v15) {
      CFRelease(v15);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    unsigned int stock_class_id = AMCP::Null::get_stock_class_id(a5, v18);
  }
  if (AMCP::is_base_of((AMCP *)0x7370616E, stock_class_id))
  {
    int v19 = (std::__shared_weak_count *)operator new(0x90uLL);
    int v20 = v19;
    v19->__shared_owners_ = 0;
    v19->__shared_weak_owners_ = 0;
    v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FB78;
    uint64_t v21 = *(void *)a2;
    unint64_t v22 = *(std::__shared_weak_count **)(a2 + 8);
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v23 = *a4;
    uint64_t v24 = (std::__shared_weak_count *)a4[1];
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = (std::__shared_weak_count_vtbl *)&v19[1];
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __p.__r_.__value_.__r.__words[0] = v23;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::Null::Control::Control(&v19[1].__vftable, v21, (uint64_t)v22, a3, &__p, (CFTypeRef *)a5);
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    CFDictionaryRef v26 = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1F146D7C0;
    goto LABEL_92;
  }
  if (AMCP::is_base_of((AMCP *)0x736C6374, stock_class_id))
  {
    char v27 = (std::__shared_weak_count *)operator new(0x90uLL);
    int v20 = v27;
    v27->__shared_owners_ = 0;
    v27->__shared_weak_owners_ = 0;
    v27->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FBC8;
    uint64_t v28 = *(void *)a2;
    unint64_t v22 = *(std::__shared_weak_count **)(a2 + 8);
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v29 = *a4;
    uint64_t v24 = (std::__shared_weak_count *)a4[1];
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = (std::__shared_weak_count_vtbl *)&v27[1];
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __p.__r_.__value_.__r.__words[0] = v29;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::Null::Control::Control(&v27[1].__vftable, v28, (uint64_t)v22, a3, &__p, (CFTypeRef *)a5);
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    CFDictionaryRef v26 = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1F146D758;
    goto LABEL_92;
  }
  if (AMCP::is_base_of((AMCP *)0x746F676C, stock_class_id))
  {
    CFArrayRef v30 = (std::__shared_weak_count *)operator new(0x90uLL);
    int v20 = v30;
    v30->__shared_owners_ = 0;
    v30->__shared_weak_owners_ = 0;
    v30->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FC18;
    uint64_t v31 = *(void *)a2;
    unint64_t v22 = *(std::__shared_weak_count **)(a2 + 8);
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v32 = *a4;
    uint64_t v24 = (std::__shared_weak_count *)a4[1];
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = (std::__shared_weak_count_vtbl *)&v30[1];
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __p.__r_.__value_.__r.__words[0] = v32;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::Null::Control::Control(&v30[1].__vftable, v31, (uint64_t)v22, a3, &__p, (CFTypeRef *)a5);
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    CFDictionaryRef v26 = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1F146D6F0;
    goto LABEL_92;
  }
  if (AMCP::is_base_of((AMCP *)0x6C65766C, stock_class_id))
  {
    CFIndex v33 = (std::__shared_weak_count *)operator new(0x90uLL);
    int v20 = v33;
    v33->__shared_owners_ = 0;
    v33->__shared_weak_owners_ = 0;
    v33->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FC68;
    uint64_t v34 = *(void *)a2;
    unint64_t v22 = *(std::__shared_weak_count **)(a2 + 8);
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v35 = *a4;
    uint64_t v24 = (std::__shared_weak_count *)a4[1];
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = (std::__shared_weak_count_vtbl *)&v33[1];
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __p.__r_.__value_.__r.__words[0] = v35;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::Null::Control::Control(&v33[1].__vftable, v34, (uint64_t)v22, a3, &__p, (CFTypeRef *)a5);
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    CFDictionaryRef v26 = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1F146D688;
    goto LABEL_92;
  }
  if (AMCP::is_base_of((AMCP *)0x736C6472, stock_class_id))
  {
    unint64_t v36 = (std::__shared_weak_count *)operator new(0x90uLL);
    int v20 = v36;
    v36->__shared_owners_ = 0;
    v36->__shared_weak_owners_ = 0;
    v36->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FCB8;
    uint64_t v37 = *(void *)a2;
    unint64_t v22 = *(std::__shared_weak_count **)(a2 + 8);
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v38 = *a4;
    uint64_t v24 = (std::__shared_weak_count *)a4[1];
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v25 = (std::__shared_weak_count_vtbl *)&v36[1];
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __p.__r_.__value_.__r.__words[0] = v38;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::Null::Control::Control(&v36[1].__vftable, v37, (uint64_t)v22, a3, &__p, (CFTypeRef *)a5);
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    CFDictionaryRef v26 = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1F146D620;
LABEL_92:
    v25->~__shared_weak_count = v26;
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    *(void *)&long long v39 = v25;
    *((void *)&v39 + 1) = v20;
    shared_owners = (std::__shared_weak_count *)v20[2].__shared_owners_;
    if (shared_owners)
    {
      if (shared_owners->__shared_owners_ != -1)
      {
LABEL_101:
        *(_OWORD *)a1 = v39;
        return;
      }
      long long v44 = v39;
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v20[2].__vftable = v25;
      v20[2].__shared_owners_ = (uint64_t)v20;
      std::__shared_weak_count::__release_weak(shared_owners);
    }
    else
    {
      long long v44 = v39;
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v20[2].__vftable = v25;
      v20[2].__shared_owners_ = (uint64_t)v20;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    long long v39 = v44;
    goto LABEL_101;
  }
  if (AMCP::is_base_of((AMCP *)0x61646576, stock_class_id))
  {
    std::allocate_shared[abi:ne180100]<AMCP::Null::Device,std::allocator<AMCP::Null::Device>,std::shared_ptr<AMCP::Core::System_Core> &,unsigned int &,std::shared_ptr<AMCP::Null::Object> &,applesauce::CF::DictionaryRef const&,void>(&__p, *(void *)a2, *(std::__shared_weak_count **)(a2 + 8), &v51, a4, (CFTypeRef *)a5);
LABEL_113:
    long long v39 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    goto LABEL_101;
  }
  if (AMCP::is_base_of((AMCP *)0x6163746C, stock_class_id))
  {
    std::allocate_shared[abi:ne180100]<AMCP::Null::Control,std::allocator<AMCP::Null::Control>,std::shared_ptr<AMCP::Core::System_Core> &,unsigned int &,std::shared_ptr<AMCP::Null::Object> &,applesauce::CF::DictionaryRef const&,void>((std::__shared_weak_count_vtbl **)&__p, *(void *)a2, *(std::__shared_weak_count **)(a2 + 8), &v51, a4, (CFTypeRef *)a5);
    goto LABEL_113;
  }
  if (AMCP::is_base_of((AMCP *)0x61737472, stock_class_id))
  {
    std::allocate_shared[abi:ne180100]<AMCP::Null::Stream,std::allocator<AMCP::Null::Stream>,std::shared_ptr<AMCP::Core::System_Core> &,unsigned int &,std::shared_ptr<AMCP::Null::Object> &,applesauce::CF::DictionaryRef const&,void>((std::__shared_weak_count_vtbl **)&__p, *(void *)a2, *(std::__shared_weak_count **)(a2 + 8), &v51, a4, (CFTypeRef *)a5);
    goto LABEL_113;
  }
  if (AMCP::is_base_of((AMCP *)0x61636C6B, stock_class_id))
  {
    std::allocate_shared[abi:ne180100]<AMCP::Null::Clock,std::allocator<AMCP::Null::Clock>,std::shared_ptr<AMCP::Core::System_Core> &,unsigned int &,std::shared_ptr<AMCP::Null::Object> &,applesauce::CF::DictionaryRef const&,void>((std::__shared_weak_count_vtbl **)&__p, *(void *)a2, *(std::__shared_weak_count **)(a2 + 8), &v51, a4, (CFTypeRef *)a5);
    goto LABEL_113;
  }
  if (AMCP::is_base_of((AMCP *)0x61626F78, stock_class_id))
  {
    std::allocate_shared[abi:ne180100]<AMCP::Null::Box,std::allocator<AMCP::Null::Box>,std::shared_ptr<AMCP::Core::System_Core> &,unsigned int &,std::shared_ptr<AMCP::Null::Object> &,applesauce::CF::DictionaryRef const&,void>((std::__shared_weak_count_vtbl **)&__p, *(void *)a2, *(std::__shared_weak_count **)(a2 + 8), &v51, a4, (CFTypeRef *)a5);
    goto LABEL_113;
  }
  if (AMCP::is_base_of((AMCP *)0x616F626A, stock_class_id))
  {
    std::allocate_shared[abi:ne180100]<AMCP::Null::Object,std::allocator<AMCP::Null::Object>,std::shared_ptr<AMCP::Core::System_Core> &,unsigned int &,std::shared_ptr<AMCP::Null::Object> &,applesauce::CF::DictionaryRef const&,void>((std::__shared_weak_count_vtbl **)a1, *(void *)a2, *(void *)(a2 + 8), &v51, a4, (CFTypeRef *)a5);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
}

void sub_1BAD28EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  if (v27)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    if (!v25)
    {
LABEL_3:
      if (!v27) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if (!v25)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  if (!v27)
  {
LABEL_4:
    if (!v25) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  if (!v25)
  {
LABEL_6:
    std::__shared_weak_count::~__shared_weak_count(v26);
    operator delete(v29);
    _Unwind_Resume(a1);
  }
LABEL_5:
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  goto LABEL_6;
}

void std::allocate_shared[abi:ne180100]<AMCP::Null::Device,std::allocator<AMCP::Null::Device>,std::shared_ptr<AMCP::Core::System_Core> &,unsigned int &,std::shared_ptr<AMCP::Null::Object> &,applesauce::CF::DictionaryRef const&,void>(void *a1, uint64_t a2, std::__shared_weak_count *a3, int *a4, uint64_t *a5, CFTypeRef *a6)
{
  int v12 = operator new(0xC8uLL);
  unint64_t v13 = v12;
  v12[1] = 0;
  _OWORD v12[2] = 0;
  *int v12 = &unk_1F146FD08;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v14 = *a4;
  uint64_t v15 = *a5;
  int v16 = (std::__shared_weak_count *)a5[1];
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFNumberRef v17 = v12 + 3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v19[0] = v15;
  v19[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::Null::Clock::Clock(v12 + 3, a2, (uint64_t)a3, v14, v19, a6);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  v13[3] = &unk_1F146D4E8;
  *((_OWORD *)v13 + 9) = 0u;
  *((_OWORD *)v13 + 10) = 0u;
  *((_OWORD *)v13 + 11) = 0u;
  v13[24] = 0;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  *a1 = v17;
  a1[1] = v13;
  unint64_t v18 = (std::__shared_weak_count *)v13[7];
  if (v18)
  {
    if (v18->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(v13 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(v13 + 2, 1uLL, memory_order_relaxed);
    v13[6] = v17;
    v13[7] = v13;
    std::__shared_weak_count::__release_weak(v18);
  }
  else
  {
    atomic_fetch_add_explicit(v13 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(v13 + 2, 1uLL, memory_order_relaxed);
    v13[6] = v17;
    v13[7] = v13;
  }

  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v13);
}

void sub_1BAD291B4(_Unwind_Exception *a1)
{
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    if (!v2)
    {
LABEL_3:
      if (!v3) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (!v3)
  {
LABEL_4:
    if (!v2) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  if (!v2)
  {
LABEL_6:
    std::__shared_weak_count::~__shared_weak_count(v1);
    operator delete(v5);
    _Unwind_Resume(a1);
  }
LABEL_5:
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  goto LABEL_6;
}

void std::allocate_shared[abi:ne180100]<AMCP::Null::Control,std::allocator<AMCP::Null::Control>,std::shared_ptr<AMCP::Core::System_Core> &,unsigned int &,std::shared_ptr<AMCP::Null::Object> &,applesauce::CF::DictionaryRef const&,void>(std::__shared_weak_count_vtbl **a1, uint64_t a2, std::__shared_weak_count *a3, int *a4, uint64_t *a5, CFTypeRef *a6)
{
  int v12 = (std::__shared_weak_count *)operator new(0x90uLL);
  unint64_t v13 = v12;
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FD58;
  int v14 = (std::__shared_weak_count_vtbl *)&v12[1];
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v15 = *a4;
  uint64_t v16 = *a5;
  CFNumberRef v17 = (std::__shared_weak_count *)a5[1];
  v19[0] = v16;
  v19[1] = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::Null::Control::Control(&v12[1].__vftable, a2, (uint64_t)a3, v15, v19, a6);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  *a1 = v14;
  a1[1] = (std::__shared_weak_count_vtbl *)v13;
  shared_owners = (std::__shared_weak_count *)v13[2].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v13[2].__vftable = v14;
    v13[2].__shared_owners_ = (uint64_t)v13;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v13[2].__vftable = v14;
    v13[2].__shared_owners_ = (uint64_t)v13;
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
}

void sub_1BAD2936C(_Unwind_Exception *a1)
{
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<AMCP::Null::Stream,std::allocator<AMCP::Null::Stream>,std::shared_ptr<AMCP::Core::System_Core> &,unsigned int &,std::shared_ptr<AMCP::Null::Object> &,applesauce::CF::DictionaryRef const&,void>(std::__shared_weak_count_vtbl **a1, uint64_t a2, std::__shared_weak_count *a3, int *a4, uint64_t *a5, CFTypeRef *a6)
{
  int v12 = (std::__shared_weak_count *)operator new(0x90uLL);
  unint64_t v13 = v12;
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FDA8;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v14 = *a4;
  uint64_t v15 = *a5;
  uint64_t v16 = (std::__shared_weak_count *)a5[1];
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFNumberRef v17 = (std::__shared_weak_count_vtbl *)&v12[1];
  v20.i64[0] = a2;
  v20.i64[1] = (uint64_t)a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v19[0] = v15;
  v19[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::Null::Object::Object((uint64_t)&v12[1], &v20, v14, v19, a6);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v20.i64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v20.i64[1]);
  }
  v17->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1F146D550;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  *a1 = v17;
  a1[1] = (std::__shared_weak_count_vtbl *)v13;
  shared_owners = (std::__shared_weak_count *)v13[2].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v13[2].__vftable = v17;
    v13[2].__shared_owners_ = (uint64_t)v13;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v13[2].__vftable = v17;
    v13[2].__shared_owners_ = (uint64_t)v13;
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
}

void sub_1BAD29550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (a12)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
    if (!v14)
    {
LABEL_5:
      if (!v13) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if (!v14)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  if (!v13)
  {
LABEL_7:
    std::__shared_weak_count::~__shared_weak_count(v12);
    operator delete(v16);
    _Unwind_Resume(a1);
  }
LABEL_6:
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  goto LABEL_7;
}

void std::allocate_shared[abi:ne180100]<AMCP::Null::Clock,std::allocator<AMCP::Null::Clock>,std::shared_ptr<AMCP::Core::System_Core> &,unsigned int &,std::shared_ptr<AMCP::Null::Object> &,applesauce::CF::DictionaryRef const&,void>(std::__shared_weak_count_vtbl **a1, uint64_t a2, std::__shared_weak_count *a3, int *a4, uint64_t *a5, CFTypeRef *a6)
{
  int v12 = (std::__shared_weak_count *)operator new(0x90uLL);
  unint64_t v13 = v12;
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FDF8;
  int v14 = (std::__shared_weak_count_vtbl *)&v12[1];
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v15 = *a4;
  uint64_t v16 = *a5;
  CFNumberRef v17 = (std::__shared_weak_count *)a5[1];
  v19[0] = v16;
  v19[1] = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::Null::Clock::Clock(&v12[1].__vftable, a2, (uint64_t)a3, v15, v19, a6);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  *a1 = v14;
  a1[1] = (std::__shared_weak_count_vtbl *)v13;
  shared_owners = (std::__shared_weak_count *)v13[2].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v13[2].__vftable = v14;
    v13[2].__shared_owners_ = (uint64_t)v13;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v13[2].__vftable = v14;
    v13[2].__shared_owners_ = (uint64_t)v13;
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
}

void sub_1BAD29704(_Unwind_Exception *a1)
{
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<AMCP::Null::Box,std::allocator<AMCP::Null::Box>,std::shared_ptr<AMCP::Core::System_Core> &,unsigned int &,std::shared_ptr<AMCP::Null::Object> &,applesauce::CF::DictionaryRef const&,void>(std::__shared_weak_count_vtbl **a1, uint64_t a2, std::__shared_weak_count *a3, int *a4, uint64_t *a5, CFTypeRef *a6)
{
  int v12 = (std::__shared_weak_count *)operator new(0x90uLL);
  unint64_t v13 = v12;
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FE48;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v14 = *a4;
  uint64_t v15 = *a5;
  uint64_t v16 = (std::__shared_weak_count *)a5[1];
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFNumberRef v17 = (std::__shared_weak_count_vtbl *)&v12[1];
  v20.i64[0] = a2;
  v20.i64[1] = (uint64_t)a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v19[0] = v15;
  v19[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::Null::Object::Object((uint64_t)&v12[1], &v20, v14, v19, a6);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v20.i64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v20.i64[1]);
  }
  v17->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1F146D418;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  *a1 = v17;
  a1[1] = (std::__shared_weak_count_vtbl *)v13;
  shared_owners = (std::__shared_weak_count *)v13[2].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v13[2].__vftable = v17;
    v13[2].__shared_owners_ = (uint64_t)v13;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v13[2].__vftable = v17;
    v13[2].__shared_owners_ = (uint64_t)v13;
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
}

void sub_1BAD298E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (a12)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
    if (!v14)
    {
LABEL_5:
      if (!v13) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if (!v14)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  if (!v13)
  {
LABEL_7:
    std::__shared_weak_count::~__shared_weak_count(v12);
    operator delete(v16);
    _Unwind_Resume(a1);
  }
LABEL_6:
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  goto LABEL_7;
}

void std::allocate_shared[abi:ne180100]<AMCP::Null::Object,std::allocator<AMCP::Null::Object>,std::shared_ptr<AMCP::Core::System_Core> &,unsigned int &,std::shared_ptr<AMCP::Null::Object> &,applesauce::CF::DictionaryRef const&,void>(std::__shared_weak_count_vtbl **a1, uint64_t a2, uint64_t a3, int *a4, uint64_t *a5, CFTypeRef *a6)
{
  int v12 = (std::__shared_weak_count *)operator new(0x90uLL);
  unint64_t v13 = v12;
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FE98;
  int v14 = (std::__shared_weak_count_vtbl *)&v12[1];
  v20.i64[0] = a2;
  v20.i64[1] = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  int v15 = *a4;
  uint64_t v16 = *a5;
  CFNumberRef v17 = (std::__shared_weak_count *)a5[1];
  v19[0] = v16;
  v19[1] = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::Null::Object::Object((uint64_t)&v12[1], &v20, v15, v19, a6);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v20.i64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v20.i64[1]);
  }
  *a1 = v14;
  a1[1] = (std::__shared_weak_count_vtbl *)v13;
  shared_owners = (std::__shared_weak_count *)v13[2].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v13[2].__vftable = v14;
    v13[2].__shared_owners_ = (uint64_t)v13;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v13[2].__vftable = v14;
    v13[2].__shared_owners_ = (uint64_t)v13;
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
}

void sub_1BAD29A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Null::Object::Object(uint64_t a1, int16x8_t *a2, int a3, void *a4, CFTypeRef *a5)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  int16x8_t v8 = *a2;
  a2->i64[0] = 0;
  a2->i64[1] = 0;
  *(int16x8_t *)(a1 + 8) = v8;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)a1 = &unk_1F146D380;
  *(_DWORD *)(a1 + 40) = a3;
  CFTypeRef v9 = *a5;
  if (*a5) {
    CFRetain(*a5);
  }
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = *a4;
  uint64_t v10 = a4[1];
  *(void *)(a1 + 64) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 72) = 0;
  if (!*a5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v8.i64[0] = 0x676C6F62636C6173;
  v37.__vftable = (std::runtime_error_vtbl *)0x676C6F62636C6173;
  LODWORD(v37.__imp_.__imp_) = 0;
  AMCP::Address::to_string(&buf, (unsigned int *)&v37, v8);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string buf = &buf;
  }
  else {
    p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  if (p_buf)
  {
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = buf.__r_.__value_.__l.__size_;
    }
    CFStringRef v13 = CFStringCreateWithBytes(0, (const UInt8 *)p_buf, size, 0x8000100u, 0);
    *(void *)&long long v31 = v13;
    if (!v13)
    {
      int v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v14, "Could not construct");
      __cxa_throw(v14, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v13 = 0;
    *(void *)&long long v31 = 0;
  }
  int valuePtr = 0;
  cf.__vftable = (std::runtime_error_vtbl *)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf.__vftable)
  {
    std::string::size_type v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v29, "Could not construct");
    __cxa_throw(v29, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v33, (const __CFDictionary *)*a5, v13, &cf);
  CFNumberRef v15 = v33;
  if (!v33)
  {
    CFArrayRef v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v30, "Could not construct");
    __cxa_throw(v30, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v16 = (const applesauce::CF::DictionaryRef *)applesauce::CF::convert_to<unsigned int,0>(v33);
  CFRelease(v15);
  if (cf.__vftable) {
    CFRelease(cf.__vftable);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  *(_DWORD *)(a1 + 80) = v16;
  unsigned int stock_class_id = AMCP::Null::get_stock_class_id((const __CFDictionary **)a5, v16);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 84) = stock_class_id;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  if (!*(void *)(a1 + 48))
  {
    AMCP::Log::Scope_Registry::get(stock_class_id);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    int v19 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      int16x8_t v20 = pthread_self();
      mach_port_t v21 = pthread_mach_thread_np(v20);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v21;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Null_Object.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 240;
      __int16 v45 = 2080;
      *(void *)uint64_t v46 = "m_description.is_valid() == false";
      _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s all Null objects have a non-empty description", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&valuePtr);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&cf, "all Null objects have a non-empty description");
    std::runtime_error::runtime_error(&v37, &cf);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    int v42 = -1;
    v37.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::string::size_type v38 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v37);
    *(void *)&v46[6] = "AMCP::Null::Object::Object(Core::System_Core_Ptr, Object_ID, Object_Ptr, const CF::Dictionary &)";
    int v47 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    int v48 = 240;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v31);
    CFNumberRef v33 = (const __CFNumber *)&unk_1F148AA90;
    long long v34 = v31;
    uint64_t v35 = v32;
    long long v31 = 0uLL;
    uint64_t v32 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  if (!*(_DWORD *)(a1 + 80))
  {
    AMCP::Log::Scope_Registry::get(stock_class_id);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    unint64_t v22 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v23 = pthread_self();
      mach_port_t v24 = pthread_mach_thread_np(v23);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v24;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Null_Object.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 241;
      __int16 v45 = 2080;
      *(void *)uint64_t v46 = "m_core_class_id == k_class_id_unknown";
      _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s all Null objects have a class", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&valuePtr);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&cf, "all Null objects have a class");
    std::runtime_error::runtime_error(&v37, &cf);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    int v42 = -1;
    v37.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::string::size_type v38 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v37);
    *(void *)&v46[6] = "AMCP::Null::Object::Object(Core::System_Core_Ptr, Object_ID, Object_Ptr, const CF::Dictionary &)";
    int v47 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    int v48 = 241;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v31);
    CFNumberRef v33 = (const __CFNumber *)&unk_1F148AA90;
    long long v34 = v31;
    uint64_t v35 = v32;
    long long v31 = 0uLL;
    uint64_t v32 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  if (!stock_class_id)
  {
    AMCP::Log::Scope_Registry::get(stock_class_id);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    uint64_t v25 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      CFDictionaryRef v26 = pthread_self();
      mach_port_t v27 = pthread_mach_thread_np(v26);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v27;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Null_Object.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 242;
      __int16 v45 = 2080;
      *(void *)uint64_t v46 = "m_core_stock_class_id == k_class_id_unknown";
      _os_log_error_impl(&dword_1BAA78000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s all Null objects have a stock class", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&valuePtr);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&cf, "all Null objects have a stock class");
    std::runtime_error::runtime_error(&v37, &cf);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    int v42 = -1;
    v37.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::string::size_type v38 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v37);
    *(void *)&v46[6] = "AMCP::Null::Object::Object(Core::System_Core_Ptr, Object_ID, Object_Ptr, const CF::Dictionary &)";
    int v47 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    int v48 = 242;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v31);
    CFNumberRef v33 = (const __CFNumber *)&unk_1F148AA90;
    long long v34 = v31;
    uint64_t v35 = v32;
    long long v31 = 0uLL;
    uint64_t v32 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  return a1;
}

void sub_1BAD2A37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, std::runtime_error a20,char a21)
{
  *(void *)(v24 - 144) = v23;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 144));
  applesauce::CF::StringRef::~StringRef(v22);
  CFDictionaryRef v26 = *(std::__shared_weak_count **)(v21 + 64);
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v21 + 48));
  mach_port_t v27 = *(std::__shared_weak_count **)(v21 + 32);
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  *(void *)uint64_t v21 = &unk_1F146D188;
  uint64_t v28 = *(std::__shared_weak_count **)(v21 + 16);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Object>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::Null::Object>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FE98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Null::Object>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FE98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMCP::Null::Box::populate_core@<X0>(AMCP::Null::Box *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  AMCP::Null::Object::populate_core(this, a2, a3);
  v69[0] = 0;
  char v70 = 0;
  strcpy((char *)v71, "diubbolg");
  BYTE1(v71[2]) = 0;
  HIWORD(v71[2]) = 0;
  mach_port_t v78 = 0;
  long long v77 = 0u;
  long long v76 = 0u;
  uint64_t v6 = *((void *)this + 6);
  CFArrayRef v5 = (CFDictionaryRef *)((char *)this + 48);
  if (!v6)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&__p, v71, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (p_p)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
    if (!v9)
    {
      CFStringRef v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v60, "Could not construct");
      __cxa_throw(v60, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v74, *v5, v9);
    CFRelease(v9);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v74, *v5, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v75)
  {
    AMCP::make_thing_from_description((AMCP *)&__p, &v74);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v76, v10);
    if (v73) {
      v73(0, &__p, 0, 0);
    }
  }
  if (v78)
  {
    int v79 = 1651861860;
    uint64_t v80 = *(void *)&v71[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>((uint64_t *)&__p, (uint64_t)&v79, (uint64_t)&v76);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v74);
  if (v78) {
    v78(0, (uint64_t)&v76, 0, 0);
  }
  if (__p.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v69);
  long long v76 = 0u;
  long long v77 = 0u;
  LODWORD(v76) = 1986622068;
  mach_port_t v78 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
  std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)v69, (uint64_t)&v76);
  AMCP::Null::make_properties<1953653102u>(v5, a3, (uint64_t)v69);
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v69);
  if (v78) {
    v78(0, (uint64_t)&v76, 0, 0);
  }
  v69[0] = 0;
  char v70 = 0;
  strcpy((char *)v71, "uahbbolg");
  BYTE1(v71[2]) = 0;
  HIWORD(v71[2]) = 0;
  mach_port_t v78 = 0;
  long long v77 = 0u;
  long long v76 = 0u;
  if (!*v5)
  {
    CFNumberRef v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v52, "Could not construct");
    __cxa_throw(v52, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&__p, v71, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v11 = &__p;
  }
  else {
    int v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v11)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v12 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v13 = CFStringCreateWithBytes(0, (const UInt8 *)v11, v12, 0x8000100u, 0);
    if (!v13)
    {
      int v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v61, "Could not construct");
      __cxa_throw(v61, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v74, *v5, v13);
    CFRelease(v13);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v74, *v5, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v75)
  {
    AMCP::make_thing_from_description((AMCP *)&__p, &v74);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v76, v15);
    if (v73) {
      v73(0, &__p, 0, 0);
    }
  }
  else if (v70)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v76, (uint64_t)v69, v14);
  }
  if (v78)
  {
    int v79 = 1651007861;
    uint64_t v80 = *(void *)&v71[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>((uint64_t *)&__p, (uint64_t)&v79, (uint64_t)&v76);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v74);
  if (v78) {
    v78(0, (uint64_t)&v76, 0, 0);
  }
  if (__p.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v69);
  v69[0] = 0;
  char v70 = 0;
  strcpy((char *)v71, "ivhbbolg");
  BYTE1(v71[2]) = 0;
  HIWORD(v71[2]) = 0;
  mach_port_t v78 = 0;
  long long v77 = 0u;
  long long v76 = 0u;
  if (!*v5)
  {
    CFArrayRef v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v53, "Could not construct");
    __cxa_throw(v53, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&__p, v71, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v16 = &__p;
  }
  else {
    uint64_t v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v16)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v17 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v18 = CFStringCreateWithBytes(0, (const UInt8 *)v16, v17, 0x8000100u, 0);
    if (!v18)
    {
      int16x8_t v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v62, "Could not construct");
      __cxa_throw(v62, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v74, *v5, v18);
    CFRelease(v18);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v74, *v5, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v75)
  {
    AMCP::make_thing_from_description((AMCP *)&__p, &v74);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v76, v20);
    if (v73) {
      v73(0, &__p, 0, 0);
    }
  }
  else if (v70)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v76, (uint64_t)v69, v19);
  }
  if (v78)
  {
    int v79 = 1651013225;
    uint64_t v80 = *(void *)&v71[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>((uint64_t *)&__p, (uint64_t)&v79, (uint64_t)&v76);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v74);
  if (v78) {
    v78(0, (uint64_t)&v76, 0, 0);
  }
  if (__p.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v69);
  v69[0] = 0;
  char v70 = 0;
  strcpy((char *)v71, "imhbbolg");
  BYTE1(v71[2]) = 0;
  HIWORD(v71[2]) = 0;
  mach_port_t v78 = 0;
  long long v77 = 0u;
  long long v76 = 0u;
  if (!*v5)
  {
    CFIndex v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v54, "Could not construct");
    __cxa_throw(v54, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&__p, v71, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v21 = &__p;
  }
  else {
    uint64_t v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v21)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v22 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v23 = CFStringCreateWithBytes(0, (const UInt8 *)v21, v22, 0x8000100u, 0);
    if (!v23)
    {
      uint64_t v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v63, "Could not construct");
      __cxa_throw(v63, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v74, *v5, v23);
    CFRelease(v23);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v74, *v5, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v75)
  {
    AMCP::make_thing_from_description((AMCP *)&__p, &v74);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v76, v25);
    if (v73) {
      v73(0, &__p, 0, 0);
    }
  }
  else if (v70)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v76, (uint64_t)v69, v24);
  }
  if (v78)
  {
    int v79 = 1651010921;
    uint64_t v80 = *(void *)&v71[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>((uint64_t *)&__p, (uint64_t)&v79, (uint64_t)&v76);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v74);
  if (v78) {
    v78(0, (uint64_t)&v76, 0, 0);
  }
  if (__p.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v69);
  v69[0] = 0;
  char v70 = 0;
  strcpy((char *)v71, "orpbbolg");
  BYTE1(v71[2]) = 0;
  HIWORD(v71[2]) = 0;
  mach_port_t v78 = 0;
  long long v77 = 0u;
  long long v76 = 0u;
  if (!*v5)
  {
    CFIndex v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v55, "Could not construct");
    __cxa_throw(v55, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&__p, v71, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFDictionaryRef v26 = &__p;
  }
  else {
    CFDictionaryRef v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v26)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v27 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v28 = CFStringCreateWithBytes(0, (const UInt8 *)v26, v27, 0x8000100u, 0);
    if (!v28)
    {
      unint64_t v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v64, "Could not construct");
      __cxa_throw(v64, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v74, *v5, v28);
    CFRelease(v28);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v74, *v5, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v75)
  {
    AMCP::make_thing_from_description((AMCP *)&__p, &v74);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v76, v30);
    if (v73) {
      v73(0, &__p, 0, 0);
    }
  }
  else if (v70)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v76, (uint64_t)v69, v29);
  }
  if (v78)
  {
    int v79 = 1651536495;
    uint64_t v80 = *(void *)&v71[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>((uint64_t *)&__p, (uint64_t)&v79, (uint64_t)&v76);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v74);
  if (v78) {
    v78(0, (uint64_t)&v76, 0, 0);
  }
  if (__p.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v69);
  v69[0] = 0;
  char v70 = 0;
  strcpy((char *)v71, "noxbbolg");
  BYTE1(v71[2]) = 0;
  HIWORD(v71[2]) = 0;
  mach_port_t v78 = 0;
  long long v77 = 0u;
  long long v76 = 0u;
  if (!*v5)
  {
    CFArrayRef v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v56, "Could not construct");
    __cxa_throw(v56, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&__p, v71, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v31 = &__p;
  }
  else {
    long long v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v31)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v32 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v33 = CFStringCreateWithBytes(0, (const UInt8 *)v31, v32, 0x8000100u, 0);
    if (!v33)
    {
      uint64_t v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v65, "Could not construct");
      __cxa_throw(v65, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v74, *v5, v33);
    CFRelease(v33);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v74, *v5, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v75)
  {
    AMCP::make_thing_from_description((AMCP *)&__p, &v74);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v76, v35);
    if (v73) {
      v73(0, &__p, 0, 0);
    }
  }
  else if (v70)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v76, (uint64_t)v69, v34);
  }
  if (v78)
  {
    int v79 = 1652060014;
    uint64_t v80 = *(void *)&v71[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>((uint64_t *)&__p, (uint64_t)&v79, (uint64_t)&v76);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v74);
  if (v78) {
    v78(0, (uint64_t)&v76, 0, 0);
  }
  if (__p.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v69);
  v69[0] = 0;
  char v70 = 0;
  strcpy((char *)v71, "foxbbolg");
  BYTE1(v71[2]) = 0;
  HIWORD(v71[2]) = 0;
  mach_port_t v78 = 0;
  long long v77 = 0u;
  long long v76 = 0u;
  if (!*v5)
  {
    CFIndex v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v57, "Could not construct");
    __cxa_throw(v57, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&__p, v71, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v36 = &__p;
  }
  else {
    unint64_t v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v36)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v37 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v37 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v38 = CFStringCreateWithBytes(0, (const UInt8 *)v36, v37, 0x8000100u, 0);
    if (!v38)
    {
      CFNumberRef v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v66, "Could not construct");
      __cxa_throw(v66, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v74, *v5, v38);
    CFRelease(v38);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v74, *v5, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v75)
  {
    AMCP::make_thing_from_description((AMCP *)&__p, &v74);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v76, v40);
    if (v73) {
      v73(0, &__p, 0, 0);
    }
  }
  else if (v70)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v76, (uint64_t)v69, v39);
  }
  if (v78)
  {
    int v79 = 1652060006;
    uint64_t v80 = *(void *)&v71[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>((uint64_t *)&__p, (uint64_t)&v79, (uint64_t)&v76);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v74);
  if (v78) {
    v78(0, (uint64_t)&v76, 0, 0);
  }
  if (__p.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v69);
  v69[0] = 0;
  char v70 = 0;
  strcpy((char *)v71, "#vdbbolg");
  BYTE1(v71[2]) = 0;
  HIWORD(v71[2]) = 0;
  mach_port_t v78 = 0;
  long long v77 = 0u;
  long long v76 = 0u;
  if (!*v5)
  {
    unint64_t v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v58, "Could not construct");
    __cxa_throw(v58, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&__p, v71, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v41 = &__p;
  }
  else {
    uint64_t v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v41)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v42 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v42 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v43 = CFStringCreateWithBytes(0, (const UInt8 *)v41, v42, 0x8000100u, 0);
    if (!v43)
    {
      uint64_t v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v67, "Could not construct");
      __cxa_throw(v67, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v74, *v5, v43);
    CFRelease(v43);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v74, *v5, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v75)
  {
    AMCP::make_thing_from_description((AMCP *)&__p, &v74);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v76, v45);
    if (v73) {
      v73(0, &__p, 0, 0);
    }
  }
  else if (v70)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v76, (uint64_t)v69, v44);
  }
  if (v78)
  {
    int v79 = 1650751011;
    uint64_t v80 = *(void *)&v71[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>((uint64_t *)&__p, (uint64_t)&v79, (uint64_t)&v76);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v74);
  if (v78) {
    v78(0, (uint64_t)&v76, 0, 0);
  }
  if (__p.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v69);
  v69[0] = 0;
  char v70 = 0;
  strcpy((char *)v71, "#lcbbolg");
  BYTE1(v71[2]) = 0;
  HIWORD(v71[2]) = 0;
  mach_port_t v78 = 0;
  long long v77 = 0u;
  long long v76 = 0u;
  if (!*v5)
  {
    CFIndex v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v59, "Could not construct");
    __cxa_throw(v59, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&__p, v71, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v46 = &__p;
  }
  else {
    uint64_t v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v46)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v47 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v47 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v48 = CFStringCreateWithBytes(0, (const UInt8 *)v46, v47, 0x8000100u, 0);
    if (!v48)
    {
      unint64_t v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v68, "Could not construct");
      __cxa_throw(v68, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v74, *v5, v48);
    CFRelease(v48);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v74, *v5, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!v75) {
    goto LABEL_235;
  }
  AMCP::make_thing_from_description((AMCP *)&__p, &v74);
  AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v76, v49);
  if (v73) {
    v73(0, &__p, 0, 0);
  }
  if (v78)
  {
    int v79 = 1650682915;
    uint64_t v80 = *(void *)&v71[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>((uint64_t *)&__p, (uint64_t)&v79, (uint64_t)&v76);
  }
  else
  {
LABEL_235:
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v74);
  if (v78) {
    v78(0, (uint64_t)&v76, 0, 0);
  }
  if (__p.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  return std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v69);
}

void sub_1BAD2B8E8(void *a1)
{
}

uint64_t std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v3 = *(void (**)(uint64_t))(a2 + 32);
  if (v3) {
    v3(2);
  }
  *(unsigned char *)(a1 + 40) = 1;
  return a1;
}

void AMCP::Null::make_properties<1953653102u>(CFDictionaryRef *a1, uint64_t a2, uint64_t a3)
{
  strcpy((char *)v13, "nartbolg");
  BYTE1(v13[2]) = 0;
  HIWORD(v13[2]) = 0;
  int v19 = 0;
  memset(v18, 0, sizeof(v18));
  if (!*a1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&__p, v13, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (p_p)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v8 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
    if (!v8)
    {
      CFIndex v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v12, "Could not construct");
      __cxa_throw(v12, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v16, *a1, v8);
    CFRelease(v8);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v16, *a1, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v17)
  {
    AMCP::make_thing_from_description((AMCP *)&__p, &v16);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)v18, v10);
    if (v15) {
      v15(0, &__p, 0, 0);
    }
  }
  else if (*(unsigned char *)(a3 + 40))
  {
    AMCP::Thing::operator=((AMCP::Thing *)v18, a3, v9);
  }
  if (v19)
  {
    int v20 = 1953653102;
    uint64_t v21 = *(void *)&v13[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>((uint64_t *)&__p, (uint64_t)&v20, (uint64_t)v18);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v16);
  if (v19) {
    v19(0, v18, 0, 0);
  }
  if (__p.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
}

void sub_1BAD2BCA8(void *a1)
{
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v11 = 0;
  memset(v10, 0, sizeof(v10));
  CFArrayRef v5 = *(void (**)(uint64_t, uint64_t, _OWORD *, void))(a3 + 32);
  if (v5) {
    v5(1, a3, v10, 0);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, *(_DWORD *)(a2 + 8), *(double *)a2);
  uint64_t v6 = *a1;
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  memset(v12, 0, sizeof(v12));
  CFStringRef v13 = 0;
  if (v11) {
    v11(1, v10, v12, 0);
  }
  char v17 = 0;
  CFStringRef v8 = (char *)operator new(0x30uLL);
  *(void *)CFStringRef v8 = &unk_1F146DEA8;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *((void *)v8 + 5) = 0;
  if (v13) {
    v13(1, v12, v8 + 8, 0);
  }
  char v17 = v8;
  memset(v14, 0, sizeof(v14));
  CFNumberRef v15 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)v16);
  CFNumberRef v15 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v14);
  if (v15) {
    v15(0, (uint64_t)v14, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v16);
  if (v13) {
    v13(0, v12, 0, 0);
  }
  uint64_t result = AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(v6);
  if (v11) {
    return ((uint64_t (*)(void, _OWORD *, void, void))v11)(0, v10, 0, 0);
  }
  return result;
}

void sub_1BAD2BEA4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v11 = 0;
  memset(v10, 0, sizeof(v10));
  CFArrayRef v5 = *(void (**)(uint64_t, uint64_t, _OWORD *, void))(a3 + 32);
  if (v5) {
    v5(1, a3, v10, 0);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, *(_DWORD *)(a2 + 8), *(double *)a2);
  uint64_t v6 = *a1;
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  memset(v12, 0, sizeof(v12));
  CFStringRef v13 = 0;
  if (v11) {
    v11(1, v10, v12, 0);
  }
  char v17 = 0;
  CFStringRef v8 = (char *)operator new(0x30uLL);
  *(void *)CFStringRef v8 = &unk_1F146DDA8;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *((void *)v8 + 5) = 0;
  if (v13) {
    v13(1, v12, v8 + 8, 0);
  }
  char v17 = v8;
  memset(v14, 0, sizeof(v14));
  CFNumberRef v15 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)v16);
  CFNumberRef v15 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v14);
  if (v15) {
    v15(0, (uint64_t)v14, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v16);
  if (v13) {
    v13(0, v12, 0, 0);
  }
  uint64_t result = AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(v6);
  if (v11) {
    return ((uint64_t (*)(void, _OWORD *, void, void))v11)(0, v10, 0, 0);
  }
  return result;
}

void sub_1BAD2C0D0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int v11 = 0;
  memset(v10, 0, sizeof(v10));
  CFArrayRef v5 = *(void (**)(uint64_t, uint64_t, _OWORD *, void))(a3 + 32);
  if (v5) {
    v5(1, a3, v10, 0);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, *(_DWORD *)(a2 + 8), *(double *)a2);
  uint64_t v6 = *a1;
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  memset(v12, 0, sizeof(v12));
  CFStringRef v13 = 0;
  if (v11) {
    v11(1, v10, v12, 0);
  }
  char v17 = 0;
  CFStringRef v8 = (char *)operator new(0x30uLL);
  *(void *)CFStringRef v8 = &unk_1F146DFA8;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *((void *)v8 + 5) = 0;
  if (v13) {
    v13(1, v12, v8 + 8, 0);
  }
  char v17 = v8;
  memset(v14, 0, sizeof(v14));
  CFNumberRef v15 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)v16);
  CFNumberRef v15 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v14);
  if (v15) {
    v15(0, (uint64_t)v14, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v16);
  if (v13) {
    v13(0, v12, 0, 0);
  }
  uint64_t result = AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(v6);
  if (v11) {
    return ((uint64_t (*)(void, _OWORD *, void, void))v11)(0, v10, 0, 0);
  }
  return result;
}

void sub_1BAD2C2FC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  uint64_t v2 = *(void (**)(void, uint64_t, void, void))(a1 + 32);
  if (v2) {
    v2(0, a1, 0, 0);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  CFStringRef v23 = 0;
  uint64_t v6 = operator new(0x40uLL);
  *uint64_t v6 = &unk_1F146E028;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  CFStringRef v23 = v6;
  memset(v20, 0, sizeof(v20));
  uint64_t v21 = 0;
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  uint64_t v21 = AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAD2C548(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterINSt3__16vectorIjNS3_9allocatorIjEEEEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v4, (void *)(a1 + 8));
  uint64_t result = AMCP::Thing::convert_to<std::vector<unsigned int>>(a2, (uint64_t)v4);
  if (v5) {
    return (void *)v5(0, v4, 0, 0);
  }
  return result;
}

void sub_1BAD2C608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(void, char *, void, void))
{
  if (a14) {
    a14(0, &a10, 0, 0);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146E028;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F146E028;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAD2C744(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146E028;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146E028;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyINSt3__16vectorIjNS3_9allocatorIjEEEEEENS3_10shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2, 0);
  }
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void (*)(void, void *, void, void))__p[5];
  if (v2) {
    v2(0, __p + 1, 0, 0);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void, uint64_t, void, void))(result + 40);
  if (v1) {
    return v1(0, result + 8, 0, 0);
  }
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F146DFA8;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2 + 8, 0);
  }
  return result;
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F146DFA8;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = 0;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, char *, void))(a1 + 40);
  if (v3) {
    v3(1, a1 + 8, v2 + 8, 0);
  }
  return v2;
}

void sub_1BAD2C9C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146DFA8;
  uint64_t v1 = (void (*)(void, void *, void, void))a1[5];
  if (v1) {
    v1(0, a1 + 1, 0, 0);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146DFA8;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[5];
  if (v2) {
    v2(0, a1 + 1, 0, 0);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  uint64_t v2 = *(void (**)(void, uint64_t, void, void))(a1 + 32);
  if (v2) {
    v2(0, a1, 0, 0);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  CFStringRef v23 = 0;
  uint64_t v6 = operator new(0x40uLL);
  *uint64_t v6 = &unk_1F146DE28;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  CFStringRef v23 = v6;
  memset(v20, 0, sizeof(v20));
  uint64_t v21 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  uint64_t v21 = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAD2CC9C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,unsigned int ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterIjEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v3, (void *)(a1 + 8));
  uint64_t v1 = AMCP::Thing::convert_to<unsigned int>((uint64_t)v3);
  if (v4) {
    v4(0, v3, 0, 0);
  }
  return v1;
}

void sub_1BAD2CD5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(void, char *, void, void))
{
  if (a14) {
    a14(0, &a10, 0, 0);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,unsigned int ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,unsigned int ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,unsigned int ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146DE28;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F146DE28;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAD2CE98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,unsigned int ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146DE28;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,unsigned int ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146DE28;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyIjEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2, 0);
  }
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void (*)(void, void *, void, void))__p[5];
  if (v2) {
    v2(0, __p + 1, 0, 0);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void, uint64_t, void, void))(result + 40);
  if (v1) {
    return v1(0, result + 8, 0, 0);
  }
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F146DDA8;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2 + 8, 0);
  }
  return result;
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F146DDA8;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = 0;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, char *, void))(a1 + 40);
  if (v3) {
    v3(1, a1 + 8, v2 + 8, 0);
  }
  return v2;
}

void sub_1BAD2D114(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146DDA8;
  uint64_t v1 = (void (*)(void, void *, void, void))a1[5];
  if (v1) {
    v1(0, a1 + 1, 0, 0);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146DDA8;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[5];
  if (v2) {
    v2(0, a1 + 1, 0, 0);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  uint64_t v2 = *(void (**)(void, uint64_t, void, void))(a1 + 32);
  if (v2) {
    v2(0, a1, 0, 0);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  CFStringRef v23 = 0;
  uint64_t v6 = operator new(0x40uLL);
  *uint64_t v6 = &unk_1F146DF28;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  CFStringRef v23 = v6;
  memset(v20, 0, sizeof(v20));
  uint64_t v21 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  uint64_t v21 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAD2D3F0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterIbEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,BOOL ()(void)>::operator()(uint64_t a1)
{
  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v3, (void *)(a1 + 8));
  BOOL v1 = AMCP::Thing::convert_to<BOOL>((uint64_t)v3);
  if (v4) {
    v4(0, v3, 0, 0);
  }
  return v1;
}

void sub_1BAD2D4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(void, char *, void, void))
{
  if (a14) {
    a14(0, &a10, 0, 0);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,BOOL ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,BOOL ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,BOOL ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146DF28;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F146DF28;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAD2D5EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,BOOL ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146DF28;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,BOOL ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146DF28;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyIbEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2, 0);
  }
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void (*)(void, void *, void, void))__p[5];
  if (v2) {
    v2(0, __p + 1, 0, 0);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  BOOL v1 = *(uint64_t (**)(void, uint64_t, void, void))(result + 40);
  if (v1) {
    return v1(0, result + 8, 0, 0);
  }
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F146DEA8;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2 + 8, 0);
  }
  return result;
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F146DEA8;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = 0;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, char *, void))(a1 + 40);
  if (v3) {
    v3(1, a1 + 8, v2 + 8, 0);
  }
  return v2;
}

void sub_1BAD2D868(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146DEA8;
  BOOL v1 = (void (*)(void, void *, void, void))a1[5];
  if (v1) {
    v1(0, a1 + 1, 0, 0);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146DEA8;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[5];
  if (v2) {
    v2(0, a1 + 1, 0, 0);
  }
  return a1;
}

void AMCP::Null::Object::build_cores(AMCP::Null::Object *this)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 22))
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v35 = **(NSObject ***)buf;
    if ((void)v53) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v53);
    }
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      unint64_t v36 = pthread_self();
      mach_port_t v37 = pthread_mach_thread_np(v36);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v37;
      LOWORD(v53) = 2080;
      *(void *)((char *)&v53 + 2) = "Null_Object.cpp";
      WORD5(v53) = 1024;
      HIDWORD(v53) = 252;
      __int16 v54 = 2080;
      *(void *)CFIndex v55 = "m_core_id == k_object_id_unknown";
      _os_log_error_impl(&dword_1BAA78000, v35, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s this Object already has a core", buf, 0x22u);
    }
    abort();
  }
  *((_DWORD *)this + 22) = AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(*((void *)this + 1) + 16));
  is_base_of = (AMCP::Log::Scope_Registry *)AMCP::is_base_of((AMCP *)0x61636C6B, *((_DWORD *)this + 21));
  if (is_base_of)
  {
    AMCP::Log::Scope_Registry::get(is_base_of);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v40, "com.apple.coreaudio", "AMCP");
    unsigned int v4 = *(_DWORD *)(v40 + 16);
    switch(v4)
    {
      case 3u:
        AMCP::Log::Scope_Registry::get(v3);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        int v17 = **(NSObject ***)buf;
        if ((void)v53) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v53);
        }
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_INFO)) {
          goto LABEL_30;
        }
        uint64_t v18 = pthread_self();
        mach_port_t v19 = pthread_mach_thread_np(v18);
        int v20 = *((_DWORD *)this + 22);
        AMCP::make_string_for_class_id((AMCP *)*((unsigned int *)this + 20), (int16x8_t *)&__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v19;
        LOWORD(v53) = 2080;
        *(void *)((char *)&v53 + 2) = "Null_Object.cpp";
        WORD5(v53) = 1024;
        HIDWORD(v53) = 256;
        __int16 v54 = 1024;
        *(_DWORD *)CFIndex v55 = v20;
        *(_WORD *)&v55[4] = 2080;
        *(void *)&v55[6] = p_p;
        uint64_t v10 = v17;
        os_log_type_t v11 = OS_LOG_TYPE_INFO;
        break;
      case 2u:
        AMCP::Log::Scope_Registry::get(v3);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        int v12 = **(NSObject ***)buf;
        if ((void)v53) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v53);
        }
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_30;
        }
        uint64_t v13 = pthread_self();
        mach_port_t v14 = pthread_mach_thread_np(v13);
        int v15 = *((_DWORD *)this + 22);
        AMCP::make_string_for_class_id((AMCP *)*((unsigned int *)this + 20), (int16x8_t *)&__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFTypeRef v16 = &__p;
        }
        else {
          CFTypeRef v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v14;
        LOWORD(v53) = 2080;
        *(void *)((char *)&v53 + 2) = "Null_Object.cpp";
        WORD5(v53) = 1024;
        HIDWORD(v53) = 256;
        __int16 v54 = 1024;
        *(_DWORD *)CFIndex v55 = v15;
        *(_WORD *)&v55[4] = 2080;
        *(void *)&v55[6] = v16;
        _os_log_debug_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Building Core %u for %s", buf, 0x28u);
        goto LABEL_28;
      case 1u:
        AMCP::Log::Scope_Registry::get(v3);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        unint64_t v5 = **(NSObject ***)buf;
        if ((void)v53) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v53);
        }
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_30;
        }
        uint64_t v6 = pthread_self();
        mach_port_t v7 = pthread_mach_thread_np(v6);
        int v8 = *((_DWORD *)this + 22);
        AMCP::make_string_for_class_id((AMCP *)*((unsigned int *)this + 20), (int16x8_t *)&__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v9 = &__p;
        }
        else {
          unint64_t v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v7;
        LOWORD(v53) = 2080;
        *(void *)((char *)&v53 + 2) = "Null_Object.cpp";
        WORD5(v53) = 1024;
        HIDWORD(v53) = 256;
        __int16 v54 = 1024;
        *(_DWORD *)CFIndex v55 = v8;
        *(_WORD *)&v55[4] = 2080;
        *(void *)&v55[6] = v9;
        uint64_t v10 = v5;
        os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
        break;
      default:
        goto LABEL_30;
    }
    _os_log_impl(&dword_1BAA78000, v10, v11, "%6u %32s:%-5d Building Core %u for %s", buf, 0x28u);
LABEL_28:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_30:
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
  }
  CFIndex v22 = (CFDictionaryRef *)((char *)this + 48);
  uint64_t v23 = AMCP::Null::calculate_max_element((const __CFDictionary **)this + 6, (const applesauce::CF::DictionaryRef *)*((unsigned int *)this + 21));
  (*(void (**)(uint8_t *__return_ptr, AMCP::Null::Object *, uint64_t))(*(void *)this + 48))(buf, this, v23);
  AMCP::Core::Broker::make_core(&v48, *(std::__shared_mutex_base **)(*((void *)this + 1) + 16), (uint64_t)buf, *((_DWORD *)this + 22));
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  if (!*v22)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v24.i64[0] = 0x676C6F626374726CLL;
  uint64_t v40 = 0x676C6F626374726CLL;
  LODWORD(v41) = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v40, v24);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v25 = &__p;
  }
  else {
    uint64_t v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v25)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v27 = CFStringCreateWithBytes(0, (const UInt8 *)v25, size, 0x8000100u, 0);
    if (!v27)
    {
      uint64_t v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v39, "Could not construct");
      __cxa_throw(v39, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v46, *v22, v27);
    CFRelease(v27);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v46, *v22, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v47)
  {
    CFStringRef v28 = (std::__shared_weak_count *)*((void *)this + 2);
    v45[0] = *((void *)this + 1);
    v45[1] = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v29 = *((_DWORD *)this + 10);
    std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v43, *((void *)this + 3), *((std::__shared_weak_count **)this + 4));
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    CFIndex v42 = 0;
    CFArrayRef v30 = (char *)operator new(8uLL);
    *(void *)CFArrayRef v30 = 0x16163746CLL;
    uint64_t v41 = (std::__shared_weak_count *)(v30 + 8);
    CFIndex v42 = v30 + 8;
    uint64_t v40 = (uint64_t)v30;
    AMCP::Null::make_object_list(&__p, v45, v29, &v43, &v46, (unsigned int **)&v40);
    std::vector<std::shared_ptr<AMCP::IOAudio2::Stream>>::__vdeallocate((uint64_t *)this + 12);
    *((std::string *)this + 4) = __p;
    memset(&__p, 0, sizeof(__p));
    int v51 = &__p;
    std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
    operator delete(v30);
    if (v44) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v44);
    }
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    CFIndex v32 = (uint64_t *)*((void *)this + 12);
    long long v31 = (uint64_t *)*((void *)this + 13);
    while (v32 != v31)
    {
      uint64_t v33 = *v32;
      v32 += 2;
      (*(void (**)(uint64_t))(*(void *)v33 + 16))(v33);
    }
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v46);
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(*((void **)&v53 + 1));
  long long v34 = *(NSObject ***)buf;
  *(void *)std::string buf = 0;
  if (v34) {
    operator delete(v34);
  }
}

void sub_1BAD2E028(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

CFIndex AMCP::Null::make_object_list(void *a1, void *a2, int a3, uint64_t *a4, CFArrayRef *a5, unsigned int **a6)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (!*a5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFIndex result = CFArrayGetCount(*a5);
  CFIndex v12 = result;
  if (result)
  {
    unint64_t v13 = 0;
    do
    {
      if (!*a5)
      {
        unint64_t v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v36, "Could not construct");
        __cxa_throw(v36, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&v50, *a5, v13);
      if (v51)
      {
        if (!v50)
        {
          mach_port_t v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v37, "Could not construct");
          __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        uint64_t v45 = 0x676C6F62636C6173;
        int v46 = 0;
        AMCP::Address::to_string(&__p, (unsigned int *)&v45, v14);
        int v15 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        if (v15)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            CFIndex size = __p.__r_.__value_.__l.__size_;
          }
          CFTypeRef v48 = CFStringCreateWithBytes(0, (const UInt8 *)v15, size, 0x8000100u, 0);
          if (!v48)
          {
            int v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v17, "Could not construct");
            __cxa_throw(v17, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
        }
        else
        {
          CFTypeRef v48 = 0;
        }
        int valuePtr = 0;
        CFTypeRef v44 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        if (!v44)
        {
          CFStringRef v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v38, "Could not construct");
          __cxa_throw(v38, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, v50, v48, &v44);
        if (!cf)
        {
          uint64_t v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v39, "Could not construct");
          __cxa_throw(v39, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        uint64_t v18 = (const applesauce::CF::DictionaryRef *)applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf);
        if (cf) {
          CFRelease(cf);
        }
        if (v44) {
          CFRelease(v44);
        }
        if (v48) {
          CFRelease(v48);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        unsigned int stock_class_id = AMCP::Null::get_stock_class_id(&v50, v18);
        uint64_t v21 = *a6;
        CFIndex v22 = a6[1];
        if (*a6 == v22) {
          goto LABEL_35;
        }
        do
        {
          uint64_t v23 = (AMCP *)*v21;
          if (*((unsigned char *)v21 + 4))
          {
            if (AMCP::is_base_of(v23, stock_class_id)) {
              goto LABEL_34;
            }
          }
          else if (v23 == stock_class_id)
          {
            goto LABEL_34;
          }
          v21 += 2;
        }
        while (v21 != v22);
        uint64_t v21 = v22;
LABEL_34:
        if (v21 != a6[1])
        {
LABEL_35:
          int16x8_t v24 = (std::__shared_weak_count *)a2[1];
          v43[0] = *a2;
          v43[1] = v24;
          if (v24) {
            atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v25 = (std::__shared_weak_count *)a4[1];
          v42[0] = *a4;
          v42[1] = (uint64_t)v25;
          if (v25) {
            atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          AMCP::Null::make_object((uint64_t)&__p, (uint64_t)v43, a3, v42, &v50, stock_class_id, v20);
          if (v25) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v25);
          }
          if (v24) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          }
          CFStringRef v27 = (_OWORD *)a1[1];
          unint64_t v26 = a1[2];
          if ((unint64_t)v27 >= v26)
          {
            uint64_t v29 = ((uint64_t)v27 - *a1) >> 4;
            if ((unint64_t)(v29 + 1) >> 60) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v30 = v26 - *a1;
            uint64_t v31 = v30 >> 3;
            if (v30 >> 3 <= (unint64_t)(v29 + 1)) {
              uint64_t v31 = v29 + 1;
            }
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v32 = v31;
            }
            v53[4] = a1 + 2;
            uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v32);
            long long v34 = &v33[16 * v29];
            v53[0] = v33;
            v53[1] = v34;
            v53[3] = &v33[16 * v35];
            *(_OWORD *)long long v34 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            v53[2] = v34 + 16;
            std::vector<std::shared_ptr<DSP_Host_Types::FormatDescription>>::__swap_out_circular_buffer(a1, v53);
            CFStringRef v28 = (_OWORD *)a1[1];
            std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)v53);
          }
          else
          {
            *CFStringRef v27 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            CFStringRef v28 = v27 + 1;
          }
          a1[1] = v28;
        }
      }
      CFIndex result = std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v50);
      ++v13;
    }
    while (v13 != v12);
  }
  return result;
}

void sub_1BAD2E5D4(void *a1)
{
}

void AMCP::Null::Box::~Box(std::__shared_mutex_base *this)
{
  AMCP::Null::Object::~Object(this);

  JUMPOUT(0x1C1859840);
}

void AMCP::Null::Object::~Object(std::__shared_mutex_base *this)
{
  this->__mut_.__m_.__sig = (uint64_t)&unk_1F146D380;
  AMCP::Null::Object::destroy_cores(this);
  mach_port_t v7 = (void **)&this->__gate1_.__cv_.__opaque[24];
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v2 = *(const void **)this->__gate1_.__cv_.__opaque;
  if (v2) {
    CFRelease(v2);
  }
  sig = (std::__shared_weak_count *)this->__gate1_.__cv_.__sig;
  if (sig) {
    std::__shared_weak_count::__release_weak(sig);
  }
  unsigned int v4 = *(const void **)&this->__mut_.__m_.__opaque[40];
  if (v4) {
    CFRelease(v4);
  }
  unint64_t v5 = *(std::__shared_weak_count **)&this->__mut_.__m_.__opaque[24];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  this->__mut_.__m_.__sig = (uint64_t)&unk_1F146D188;
  uint64_t v6 = *(std::__shared_weak_count **)&this->__mut_.__m_.__opaque[8];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

{
  uint64_t vars8;

  AMCP::Null::Object::~Object(this);

  JUMPOUT(0x1C1859840);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Box>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::Null::Box>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FE48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Null::Box>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FE48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *AMCP::Null::Clock::Clock(void *a1, uint64_t a2, uint64_t a3, int a4, void *a5, CFTypeRef *a6)
{
  v10.i64[0] = a2;
  v10.i64[1] = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  mach_port_t v7 = (std::__shared_weak_count *)a5[1];
  v9[0] = *a5;
  v9[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::Null::Object::Object((uint64_t)a1, &v10, a4, v9, a6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v10.i64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10.i64[1]);
  }
  *a1 = &unk_1F146D480;
  return a1;
}

void sub_1BAD2E848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Null::Clock::do_set_property(AMCP::Null::Clock *this, int a2, const AMCP::Address *a3, const AMCP::Thing *a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  int v8 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v8)
  {
    unint64_t v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      uint64_t v10 = *((void *)this + 7);
      if (v10)
      {
        os_log_type_t v11 = (unsigned int *)(v10 + 88);
        goto LABEL_7;
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v10 = 0;
  os_log_type_t v11 = (unsigned int *)((char *)this + 40);
LABEL_7:
  if (*(_DWORD *)a3 != 1853059700)
  {
    uint64_t v19 = AMCP::Null::Object::do_set_property(this, a2, a3, a4);
    if (!v9) {
      return v19;
    }
LABEL_21:
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    return v19;
  }
  unsigned int v12 = *v11;
  unint64_t v13 = operator new(0x20uLL);
  v13[1] = 0;
  uint64_t v13[2] = 0;
  *((unsigned char *)v13 + 24) = 0;
  *unint64_t v13 = &unk_1F1488C30;
  v27[0] = v13 + 3;
  v27[1] = v13;
  int v28 = 0;
  int v29 = 0;
  uint64_t v14 = *(void *)(*((void *)this + 1) + 32);
  unsigned int v15 = *((_DWORD *)this + 22);
  CFTypeRef v16 = (std::__shared_weak_count *)*((void *)this + 4);
  v21[0] = *((std::__shared_weak_count **)this + 3);
  v21[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)&long long v22 = v10;
  *((void *)&v22 + 1) = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v23 = *(void *)a3;
  int v24 = *((_DWORD *)a3 + 2);
  memset(v25, 0, sizeof(v25));
  unint64_t v26 = 0;
  int v17 = (void (*)(uint64_t, const AMCP::Thing *, _OWORD *, void))*((void *)a4 + 4);
  if (v17) {
    v17(1, a4, v25, 0);
  }
  uint64_t v31 = 0;
  uint64_t v18 = (char *)operator new(0x60uLL);
  *(_OWORD *)(v18 + 8) = *(_OWORD *)v21;
  *(void *)uint64_t v18 = &unk_1F146E4F8;
  *(_OWORD *)(v18 + 24) = v22;
  *((void *)v18 + 5) = v23;
  *((_DWORD *)v18 + 12) = v24;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 72) = 0u;
  *((void *)v18 + 11) = 0;
  if (v26) {
    v26(2, v25, v18 + 56, 0);
  }
  uint64_t v31 = v18;
  AMCP::Core::Conductor::enqueue_config_change(v14, v12, v15, 1, (uint64_t)v30);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v30);
  if (v26) {
    v26(0, v25, 0, 0);
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v27);
  uint64_t v19 = 257;
  if (v9) {
    goto LABEL_21;
  }
  return v19;
}

void sub_1BAD2EAF4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Null5Clock15do_set_propertyEjRKNS_7AddressERKNS_5ThingEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::operator()(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      unsigned int v4 = v3;
      unint64_t v5 = (CFDictionaryRef *)a1[1];
      if (v5)
      {
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v5[6]);
        AMCP::make_description_from_thing((AMCP *)&v16, (const AMCP::Thing *)(a1 + 7));
        int v8 = v16;
        if (v16)
        {
          v7.i64[0] = 0x676C6F626E737274;
          uint64_t v13 = 0x676C6F626E737274;
          int v14 = 0;
          AMCP::Address::to_string(&__p, (unsigned int *)&v13, v7);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (p_p)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              CFIndex size = __p.__r_.__value_.__l.__size_;
            }
            CFStringRef v11 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
            if (!v11)
            {
              exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
              __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(MutableCopy, v11, v8);
            CFRelease(v11);
          }
          else
          {
            mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(MutableCopy, 0, v8);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&__p, MutableCopy);
          (*((void (**)(CFDictionaryRef *, std::string *))*v5 + 3))(v5, &__p);
          if (__p.__r_.__value_.__r.__words[0]) {
            CFRelease(__p.__r_.__value_.__l.__data_);
          }
          CFRelease(v8);
          if (MutableCopy) {
            CFRelease(MutableCopy);
          }
        }
        else if (MutableCopy)
        {
          CFRelease(MutableCopy);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1BAD2ED18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  CFRelease(v18);
  if (v17) {
    CFRelease(v17);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy[abi:ne180100](void *a1)
{
  uint64_t v2 = (void (*)(void, void *, void, void))a1[10];
  if (v2) {
    v2(0, a1 + 6, 0, 0);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unsigned int v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void std::__function::__func<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F146E4F8;
  return std::__compressed_pair_elem<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  int v5 = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(a2 + 80);
  if (v6) {
    v6(1, a2 + 48);
  }
  return a1;
}

void sub_1BAD2EEF8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x60uLL);
  void *v2 = &unk_1F146E4F8;
  std::__compressed_pair_elem<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BAD2EF70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146E4F8;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[11];
  if (v2) {
    v2(0, a1 + 7, 0, 0);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Clock::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146E4F8;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[11];
  if (v2) {
    v2(0, a1 + 7, 0, 0);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void AMCP::Null::Clock::populate_core(AMCP::Null::Clock *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  AMCP::Null::Object::populate_core(this, a2, a3);
  LOBYTE(v85) = 0;
  char v88 = 0;
  strcpy((char *)v94, " diubolg");
  BYTE1(v94[2]) = 0;
  HIWORD(v94[2]) = 0;
  uint64_t v96 = 0;
  memset(v95, 0, sizeof(v95));
  int v5 = (CFDictionaryRef *)((char *)this + 48);
  if (!*((void *)this + 6))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&__p, v94, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (p_p)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v8 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
    if (!v8)
    {
      char v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v75, "Could not construct");
      __cxa_throw(v75, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v82, *v5, v8);
    CFRelease(v8);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v82, *v5, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (BYTE8(v82))
  {
    AMCP::make_thing_from_description((AMCP *)&__p, (CFTypeRef *)&v82);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)v95, v10);
    if (v91) {
      v91(0, &__p, 0, 0);
    }
  }
  else if (v88)
  {
    AMCP::Thing::operator=((AMCP::Thing *)v95, (uint64_t)&v85, v9);
  }
  if (v96)
  {
    int v92 = 1969841184;
    uint64_t v93 = *(void *)&v94[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>((uint64_t *)&__p, (uint64_t)&v92, (uint64_t)v95);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v82);
  if (v96) {
    v96(0, (uint64_t)v95, 0, 0);
  }
  if (__p.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v85);
  LOBYTE(v85) = 0;
  char v88 = 0;
  strcpy((char *)v94, "diumbolg");
  BYTE1(v94[2]) = 0;
  HIWORD(v94[2]) = 0;
  uint64_t v96 = 0;
  memset(v95, 0, sizeof(v95));
  if (!*v5)
  {
    uint64_t v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v69, "Could not construct");
    __cxa_throw(v69, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&__p, v94, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFStringRef v11 = &__p;
  }
  else {
    CFStringRef v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v11)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v12 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v13 = CFStringCreateWithBytes(0, (const UInt8 *)v11, v12, 0x8000100u, 0);
    if (!v13)
    {
      long long v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v76, "Could not construct");
      __cxa_throw(v76, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v82, *v5, v13);
    CFRelease(v13);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v82, *v5, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (BYTE8(v82))
  {
    AMCP::make_thing_from_description((AMCP *)&__p, (CFTypeRef *)&v82);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)v95, v15);
    if (v91) {
      v91(0, &__p, 0, 0);
    }
  }
  else if (v88)
  {
    AMCP::Thing::operator=((AMCP::Thing *)v95, (uint64_t)&v85, v14);
  }
  if (v96)
  {
    int v92 = 1836411236;
    uint64_t v93 = *(void *)&v94[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::StringRef>((uint64_t *)&__p, (uint64_t)&v92, (uint64_t)v95);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v82);
  if (v96) {
    v96(0, (uint64_t)v95, 0, 0);
  }
  if (__p.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v85);
  memset(v95, 0, sizeof(v95));
  LODWORD(v95[0]) = 1986622068;
  uint64_t v96 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
  std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)&v85, (uint64_t)v95);
  AMCP::Null::make_properties<1953653102u>((CFDictionaryRef *)this + 6, a3, (uint64_t)&v85);
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v85);
  if (v96) {
    v96(0, (uint64_t)v95, 0, 0);
  }
  long long v82 = 0u;
  long long v83 = 0u;
  CFStringRef v84 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
  std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)&v85, (uint64_t)&v82);
  strcpy((char *)v89, "ndihbolg");
  BYTE1(v89[2]) = 0;
  HIWORD(v89[2]) = 0;
  uint64_t v96 = 0;
  memset(v95, 0, sizeof(v95));
  if (!*v5)
  {
    char v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v70, "Could not construct");
    __cxa_throw(v70, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&__p, v89, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFTypeRef v16 = &__p;
  }
  else {
    CFTypeRef v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v16)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v17 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v18 = CFStringCreateWithBytes(0, (const UInt8 *)v16, v17, 0x8000100u, 0);
    if (!v18)
    {
      long long v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v77, "Could not construct");
      __cxa_throw(v77, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v92, *v5, v18);
    CFRelease(v18);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v92, *v5, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (BYTE4(v93))
  {
    AMCP::make_thing_from_description((AMCP *)&__p, (CFTypeRef *)&v92);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)v95, v20);
    if (v91) {
      v91(0, &__p, 0, 0);
    }
  }
  else if (v88)
  {
    AMCP::Thing::operator=((AMCP::Thing *)v95, (uint64_t)&v85, v19);
  }
  if (v96)
  {
    v94[0] = 1751737454;
    *(void *)&v94[1] = *(void *)&v89[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>((uint64_t *)&__p, (uint64_t)v94, (uint64_t)v95);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v92);
  if (v96) {
    v96(0, (uint64_t)v95, 0, 0);
  }
  if (__p.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v85);
  if (v84) {
    v84(0, (uint64_t)&v82, 0, 0);
  }
  long long v82 = 0u;
  long long v83 = 0u;
  CFStringRef v84 = AMCP::Implementation::In_Place_Storage<int>::dispatch;
  std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)&v85, (uint64_t)&v82);
  strcpy((char *)v89, "dklcbolg");
  BYTE1(v89[2]) = 0;
  HIWORD(v89[2]) = 0;
  uint64_t v96 = 0;
  memset(v95, 0, sizeof(v95));
  if (!*v5)
  {
    uint64_t v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v71, "Could not construct");
    __cxa_throw(v71, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&__p, v89, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v21 = &__p;
  }
  else {
    uint64_t v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v21)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v22 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v23 = CFStringCreateWithBytes(0, (const UInt8 *)v21, v22, 0x8000100u, 0);
    if (!v23)
    {
      mach_port_t v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v78, "Could not construct");
      __cxa_throw(v78, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v92, *v5, v23);
    CFRelease(v23);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v92, *v5, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (BYTE4(v93))
  {
    AMCP::make_thing_from_description((AMCP *)&__p, (CFTypeRef *)&v92);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)v95, v25);
    if (v91) {
      v91(0, &__p, 0, 0);
    }
  }
  else if (v88)
  {
    AMCP::Thing::operator=((AMCP::Thing *)v95, (uint64_t)&v85, v24);
  }
  if (v96)
  {
    v94[0] = 1668049764;
    *(void *)&v94[1] = *(void *)&v89[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>((uint64_t *)&__p, (uint64_t)v94, (uint64_t)v95);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v92);
  if (v96) {
    v96(0, (uint64_t)v95, 0, 0);
  }
  if (__p.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v85);
  if (v84) {
    v84(0, (uint64_t)&v82, 0, 0);
  }
  long long v82 = 0u;
  long long v83 = 0u;
  CFStringRef v84 = AMCP::Implementation::In_Place_Storage<int>::dispatch;
  std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)&v85, (uint64_t)&v82);
  uint64_t v26 = 0;
  char v27 = 1;
  do
  {
    int v28 = AMCP::Property_Traits<1819569763u>::k_valid_scopes[v26];
    v89[0] = 1819569763;
    v89[1] = v28;
    CFTypeRef v89[2] = 0;
    uint64_t v96 = 0;
    memset(v95, 0, sizeof(v95));
    if (!*v5)
    {
      CFNumberRef v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v66, "Could not construct");
      __cxa_throw(v66, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    char v29 = v27;
    AMCP::Address::to_string(&__p, v89, (int16x8_t)0);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v30 = &__p;
    }
    else {
      uint64_t v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v30)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFIndex v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        CFIndex v31 = __p.__r_.__value_.__l.__size_;
      }
      CFStringRef v32 = CFStringCreateWithBytes(0, (const UInt8 *)v30, v31, 0x8000100u, 0);
      if (!v32)
      {
        uint64_t v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v67, "Could not construct");
        __cxa_throw(v67, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v92, *v5, v32);
      CFRelease(v32);
    }
    else
    {
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v92, *v5, 0);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (BYTE4(v93))
    {
      AMCP::make_thing_from_description((AMCP *)&__p, (CFTypeRef *)&v92);
      AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)v95, v34);
      if (v91) {
        v91(0, &__p, 0, 0);
      }
    }
    else if (v88)
    {
      AMCP::Thing::operator=((AMCP::Thing *)v95, (uint64_t)&v85, v33);
    }
    if (v96)
    {
      v94[0] = 1819569763;
      *(void *)&v94[1] = *(void *)&v89[1];
      AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>((uint64_t *)&__p, (uint64_t)v94, (uint64_t)v95);
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    }
    std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v92);
    if (v96) {
      v96(0, (uint64_t)v95, 0, 0);
    }
    if (__p.__r_.__value_.__r.__words[0]) {
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
    }
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    char v27 = 0;
    uint64_t v26 = 1;
  }
  while ((v29 & 1) != 0);
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v85);
  if (v84) {
    v84(0, (uint64_t)&v82, 0, 0);
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v82, *((void *)this + 3), *((std::__shared_weak_count **)this + 4));
  long long v35 = v82;
  if (*((void *)&v82 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v82 + 1) + 16), 1uLL, memory_order_relaxed);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&__p, 0, 1.5836601e190);
  uint64_t v36 = __p.__r_.__value_.__r.__words[0];
  unint64_t v37 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  *(void *)&v95[0] = &unk_1F146E0A8;
  *((void *)&v95[0] + 1) = this;
  *((void *)&v95[1] + 1) = v95;
  long long v85 = 0u;
  long long v86 = 0u;
  int v87 = 0;
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)&v85, (uint64_t)v95);
  int v87 = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v36, v37, (AMCP *)&v85);
  if (v87) {
    v87(0, (uint64_t)&v85, 0, 0);
  }
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::~__value_func[abi:ne180100](v95);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(v36);
  unint64_t v38 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::StringRef const&)>>();
  *(void *)&v95[0] = &unk_1F146E128;
  *(_OWORD *)((char *)v95 + 8) = v35;
  *((void *)&v95[1] + 1) = v95;
  long long v85 = 0u;
  long long v86 = 0u;
  int v87 = 0;
  std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::__value_func[abi:ne180100]((uint64_t)&v85, (uint64_t)v95);
  int v87 = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::StringRef const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v36, v38, (AMCP *)&v85);
  if (v87) {
    v87(0, (uint64_t)&v85, 0, 0);
  }
  std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::~__value_func[abi:ne180100](v95);
  AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(v36);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v36 + 40), &__p);
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  if (*((void *)&v82 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v82 + 1));
  }
  long long v82 = 0u;
  long long v83 = 0u;
  CFStringRef v84 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
  std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)&v85, (uint64_t)&v82);
  strcpy((char *)v89, "dsrnbolg");
  BYTE1(v89[2]) = 0;
  HIWORD(v89[2]) = 0;
  uint64_t v96 = 0;
  memset(v95, 0, sizeof(v95));
  if (!*v5)
  {
    unsigned int v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v72, "Could not construct");
    __cxa_throw(v72, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&__p, v89, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v39 = &__p;
  }
  else {
    uint64_t v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v39)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v40 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v41 = CFStringCreateWithBytes(0, (const UInt8 *)v39, v40, 0x8000100u, 0);
    if (!v41)
    {
      int v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v79, "Could not construct");
      __cxa_throw(v79, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v92, *v5, v41);
    CFRelease(v41);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v92, *v5, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (BYTE4(v93))
  {
    AMCP::make_thing_from_description((AMCP *)&__p, (CFTypeRef *)&v92);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)v95, v43);
    if (v91) {
      v91(0, &__p, 0, 0);
    }
  }
  else if (v88)
  {
    AMCP::Thing::operator=((AMCP::Thing *)v95, (uint64_t)&v85, v42);
  }
  if (v96)
  {
    v94[0] = 1852994404;
    *(void *)&v94[1] = *(void *)&v89[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>((uint64_t *)&__p, (uint64_t)v94, (uint64_t)v95);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v92);
  if (v96) {
    v96(0, (uint64_t)v95, 0, 0);
  }
  if (__p.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v85);
  if (v84) {
    v84(0, (uint64_t)&v82, 0, 0);
  }
  long long v82 = 0u;
  long long v83 = 0u;
  CFStringRef v84 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
  std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)&v85, (uint64_t)&v82);
  strcpy((char *)v89, "fcrnbolg");
  BYTE1(v89[2]) = 0;
  HIWORD(v89[2]) = 0;
  uint64_t v96 = 0;
  memset(v95, 0, sizeof(v95));
  if (!*v5)
  {
    uint64_t v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v73, "Could not construct");
    __cxa_throw(v73, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&__p, v89, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFTypeRef v44 = &__p;
  }
  else {
    CFTypeRef v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v44)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v45 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v45 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v46 = CFStringCreateWithBytes(0, (const UInt8 *)v44, v45, 0x8000100u, 0);
    if (!v46)
    {
      uint64_t v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v80, "Could not construct");
      __cxa_throw(v80, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v92, *v5, v46);
    CFRelease(v46);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v92, *v5, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (BYTE4(v93))
  {
    AMCP::make_thing_from_description((AMCP *)&__p, (CFTypeRef *)&v92);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)v95, v48);
    if (v91) {
      v91(0, &__p, 0, 0);
    }
  }
  else if (v88)
  {
    AMCP::Thing::operator=((AMCP::Thing *)v95, (uint64_t)&v85, v47);
  }
  if (v96)
  {
    v94[0] = 1852990310;
    *(void *)&v94[1] = *(void *)&v89[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>((uint64_t *)&__p, (uint64_t)v94, (uint64_t)v95);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v92);
  if (v96) {
    v96(0, (uint64_t)v95, 0, 0);
  }
  if (__p.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v85);
  if (v84) {
    v84(0, (uint64_t)&v82, 0, 0);
  }
  long long v82 = 0u;
  long long v83 = 0u;
  CFStringRef v84 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
  std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)&v85, (uint64_t)&v82);
  strcpy((char *)v89, "enotbolg");
  BYTE1(v89[2]) = 0;
  HIWORD(v89[2]) = 0;
  uint64_t v96 = 0;
  memset(v95, 0, sizeof(v95));
  if (!*v5)
  {
    CFTypeRef v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v74, "Could not construct");
    __cxa_throw(v74, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&__p, v89, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v49 = &__p;
  }
  else {
    uint64_t v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v49)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v50 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v50 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v51 = CFStringCreateWithBytes(0, (const UInt8 *)v49, v50, 0x8000100u, 0);
    if (!v51)
    {
      int v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v81, "Could not construct");
      __cxa_throw(v81, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v92, *v5, v51);
    CFRelease(v51);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v92, *v5, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (BYTE4(v93))
  {
    AMCP::make_thing_from_description((AMCP *)&__p, (CFTypeRef *)&v92);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)v95, v53);
    if (v91) {
      v91(0, &__p, 0, 0);
    }
  }
  else if (v88)
  {
    AMCP::Thing::operator=((AMCP::Thing *)v95, (uint64_t)&v85, v52);
  }
  if (v96)
  {
    v94[0] = 1953459813;
    *(void *)&v94[1] = *(void *)&v89[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>((uint64_t *)&__p, (uint64_t)v94, (uint64_t)v95);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v92);
  if (v96) {
    v96(0, (uint64_t)v95, 0, 0);
  }
  if (__p.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v85);
  if (v84) {
    v84(0, (uint64_t)&v82, 0, 0);
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v82, *((void *)this + 3), *((std::__shared_weak_count **)this + 4));
  long long v54 = v82;
  if (*((void *)&v82 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v82 + 1) + 16), 1uLL, memory_order_relaxed);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&__p, 0, 1.5836601e190);
  uint64_t v55 = __p.__r_.__value_.__r.__words[0];
  unint64_t v56 = AMCP::Implementation::get_type_marker<std::function<double ()(void)>>();
  *(void *)&v95[0] = &unk_1F146E1A8;
  *((void *)&v95[0] + 1) = this;
  *((void *)&v95[1] + 1) = v95;
  long long v85 = 0u;
  long long v86 = 0u;
  int v87 = 0;
  std::__function::__value_func<double ()(void)>::__value_func[abi:ne180100]((uint64_t)&v85, (uint64_t)v95);
  int v87 = AMCP::Implementation::In_Place_Storage<std::function<double ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v55, v56, (AMCP *)&v85);
  if (v87) {
    v87(0, (uint64_t)&v85, 0, 0);
  }
  std::__function::__value_func<double ()(void)>::~__value_func[abi:ne180100](v95);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(v55);
  unint64_t v57 = AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>();
  *(void *)&v95[0] = &unk_1F146E2A8;
  *(_OWORD *)((char *)v95 + 8) = v54;
  *((void *)&v95[1] + 1) = v95;
  long long v85 = 0u;
  long long v86 = 0u;
  int v87 = 0;
  std::__function::__value_func<void ()(double const&)>::__value_func[abi:ne180100]((uint64_t)&v85, (uint64_t)v95);
  int v87 = AMCP::Implementation::In_Place_Storage<std::function<void ()(double const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v55, v57, (AMCP *)&v85);
  if (v87) {
    v87(0, (uint64_t)&v85, 0, 0);
  }
  std::__function::__value_func<void ()(double const&)>::~__value_func[abi:ne180100](v95);
  AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(v55);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v55 + 40), &__p);
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  if (*((void *)&v82 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v82 + 1));
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&__p, 0, 1.5836601e190);
  uint64_t v58 = __p.__r_.__value_.__r.__words[0];
  unint64_t v59 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRangeList ()(void)>>();
  *(void *)&v95[0] = &unk_1F146E328;
  *((void *)&v95[0] + 1) = this;
  *((void *)&v95[1] + 1) = v95;
  long long v85 = 0u;
  long long v86 = 0u;
  int v87 = 0;
  std::__function::__value_func<CA::ValueRangeList ()(void)>::__value_func[abi:ne180100]((uint64_t)&v85, (uint64_t)v95);
  int v87 = AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRangeList ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v58, v59, (AMCP *)&v85);
  if (v87) {
    v87(0, (uint64_t)&v85, 0, 0);
  }
  std::__function::__value_func<CA::ValueRangeList ()(void)>::~__value_func[abi:ne180100](v95);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(v58);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v58 + 40), &__p);
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&__p, 0, 1.58366007e190);
  uint64_t v60 = __p.__r_.__value_.__r.__words[0];
  int v61 = *((_DWORD *)this + 22);
  uint64_t v63 = *((void *)this + 1);
  uint64_t v62 = *((void *)this + 2);
  if (v62) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v64 = AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>();
  *((void *)&v95[1] + 1) = 0;
  uint64_t v65 = operator new(0x20uLL);
  *(void *)uint64_t v65 = &unk_1F146E428;
  v65[2] = v61;
  *((void *)v65 + 2) = v63;
  *((void *)v65 + 3) = v62;
  *((void *)&v95[1] + 1) = v65;
  long long v85 = 0u;
  long long v86 = 0u;
  int v87 = 0;
  std::__function::__value_func<std::shared_ptr<AMCP::Core::Engine> ()(void)>::__value_func[abi:ne180100]((uint64_t)&v85, (uint64_t)v95);
  int v87 = AMCP::Implementation::In_Place_Storage<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v60, v64, (AMCP *)&v85);
  if (v87) {
    v87(0, (uint64_t)&v85, 0, 0);
  }
  std::__function::__value_func<std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__value_func[abi:ne180100](v95);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v60 + 40), &__p);
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
}

void sub_1BAD307F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_5,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_5>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_5,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_5>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Null5Clock13populate_coreEjE3$_5"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_5,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_5>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::operator()(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v42, *(std::__shared_mutex_base **)(*(void *)(a1 + 16) + 16), *(_DWORD *)(a1 + 8));
  uint64_t v4 = v42;
  if (v42)
  {
    AMCP::Core::Core::get_simple_required_property<1969841184u>(&cf, v42);
    double simple_required = AMCP::Core::Core::get_simple_required_property<1853059700u>(v4);
    int v6 = AMCP::Core::Core::get_simple_required_property<1668049764u>(v4);
    *(_DWORD *)std::string buf = 0;
    strcpy(v49, "tfastpni");
    v49[9] = 0;
    *(_WORD *)&v49[10] = 0;
    unsigned int v7 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v4, (const AMCP::Address *)v49, (unsigned int *)buf);
    *(_DWORD *)std::string buf = 0;
    strcpy(v49, "tfasptuo");
    v49[9] = 0;
    *(_WORD *)&v49[10] = 0;
    unsigned int v8 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v4, (const AMCP::Address *)v49, (unsigned int *)buf);
    *(_DWORD *)std::string buf = 0;
    strcpy(v49, "cntltpni");
    v49[9] = 0;
    *(_WORD *)&v49[10] = 0;
    unsigned int v9 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v4, (const AMCP::Address *)v49, (unsigned int *)buf);
    *(_DWORD *)std::string buf = 0;
    strcpy(v49, "cntlptuo");
    v49[9] = 0;
    *(_WORD *)&v49[10] = 0;
    unsigned int v10 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v4, (const AMCP::Address *)v49, (unsigned int *)buf);
    AMCP::Null::make_stream_info_list((uint64_t)&v39, *(std::__shared_mutex_base **)(*(void *)(a1 + 16) + 16), &v42, 0x696E7074u);
    AMCP::Null::make_stream_info_list((uint64_t)&v37, *(std::__shared_mutex_base **)(*(void *)(a1 + 16) + 16), &v42, 0x6F757470u);
    *(void *)std::string buf = 0;
    strcpy(v49, "lflnbolg");
    v49[9] = 0;
    *(_WORD *)&v49[10] = 0;
    AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(&v36, v4, (AMCP::Address *)v49, (const void **)buf);
    strcpy(v49, "dsrnbolg");
    v49[9] = 0;
    *(_WORD *)&v49[10] = 0;
    CFStringRef v11 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v4, (const AMCP::Address *)v49);
    if ((unsigned __int16)v11 > 0xFFu)
    {
      char v12 = (char)v11;
      strcpy(v49, "fcrnbolg");
      v49[9] = 0;
      *(_WORD *)&v49[10] = 0;
      CFStringRef v13 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v4, (const AMCP::Address *)v49);
      if ((unsigned __int16)v13 > 0xFFu)
      {
        strcpy(v49, "enotbolg");
        v49[9] = 0;
        *(_WORD *)&v49[10] = 0;
        int v14 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v4, (const AMCP::Address *)v49);
        if ((unsigned __int16)v14 > 0xFFu)
        {
          unsigned int v35 = v8;
          AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v49, *(dispatch_object_t *)(*(void *)(*(void *)(a1 + 16) + 32) + 672));
          unsigned int v15 = operator new(0x308uLL);
          v15[1] = 0;
          uint64_t v15[2] = 0;
          *unsigned int v15 = &unk_1F146E498;
          CFTypeRef v16 = cf;
          if (cf) {
            CFRetain(cf);
          }
          CFTypeRef v44 = v16;
          if (v36) {
            CFRetain(v36);
          }
          unsigned int v32 = v7;
          v15[4] = 0;
          v15[5] = 0;
          uint64_t v33 = v15 + 3;
          void v15[3] = &unk_1F147DE40;
          if (v16) {
            CFRetain(v16);
          }
          long long v34 = v15;
          if (v12) {
            unsigned int v17 = 0;
          }
          else {
            unsigned int v17 = v9;
          }
          if (v12) {
            unsigned int v18 = 0;
          }
          else {
            unsigned int v18 = v10;
          }
          long long v47 = 0uLL;
          uint64_t v48 = 0;
          unint64_t v19 = 0x6DB6DB6DB6DB6DB7 * ((v40 - (uint64_t)v39) >> 3);
          std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(&v47, v39, v40, v19);
          long long v45 = 0uLL;
          uint64_t v46 = 0;
          unint64_t v20 = 0x6DB6DB6DB6DB6DB7 * ((v38 - (uint64_t)v37) >> 3);
          std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(&v45, v37, v38, v20);
          v34[6] = v16;
          *((double *)v34 + 7) = simple_required;
          *((_DWORD *)v34 + 16) = simple_required;
          *((_DWORD *)v34 + 17) = v6;
          *((unsigned char *)v34 + 72) = 1;
          *((_DWORD *)v34 + 19) = v32;
          *((_DWORD *)v34 + 20) = v35;
          *((_DWORD *)v34 + 21) = v17;
          *((_DWORD *)v34 + 22) = v18;
          *((_OWORD *)v34 + 6) = v47;
          unsigned char v34[14] = v48;
          long long v47 = 0uLL;
          uint64_t v48 = 0;
          *(_OWORD *)(v34 + 15) = v45;
          v34[17] = v46;
          long long v45 = 0uLL;
          uint64_t v46 = 0;
          AMCP::Core::Implementation::Simple_Engine_IO_State::Simple_Engine_IO_State((AMCP::Core::Implementation::Simple_Engine_IO_State *)(v34 + 18), (const __CFString **)&v44, v19, v20, 0, (dispatch_queue_t *)v49, v21);
          v60[0] = &unk_1F147DFF8;
          v60[1] = v33;
          v60[3] = v60;
          AMCP::IO_Clock::IO_Clock((uint64_t)(v34 + 73));
        }
        AMCP::Log::Scope_Registry::get(v14);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v49, "com.apple.coreaudio", "AMCP");
        char v29 = **(NSObject ***)v49;
        if (*(void *)&v49[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v49[8]);
        }
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          uint64_t v30 = pthread_self();
          mach_port_t v31 = pthread_mach_thread_np(v30);
          HIBYTE(v62) = 4;
          strcpy((char *)buf, "tone");
          *(_DWORD *)uint64_t v49 = 67110658;
          *(_DWORD *)&void v49[4] = v31;
          *(_WORD *)&v49[8] = 2080;
          *(void *)&v49[10] = "Core.h";
          __int16 v50 = 1024;
          int v51 = 391;
          __int16 v52 = 2080;
          long long v53 = "optional_value.operator BOOL() == true";
          __int16 v54 = 2080;
          uint64_t v55 = buf;
          __int16 v56 = 1024;
          int v57 = 1735159650;
          __int16 v58 = 1024;
          int v59 = 0;
          _os_log_error_impl(&dword_1BAA78000, v29, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", v49, 0x38u);
          if (SHIBYTE(v62) < 0) {
            operator delete(*(void **)buf);
          }
        }
        abort();
      }
      AMCP::Log::Scope_Registry::get(v13);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v49, "com.apple.coreaudio", "AMCP");
      uint64_t v26 = **(NSObject ***)v49;
      if (*(void *)&v49[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v49[8]);
      }
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        char v27 = pthread_self();
        mach_port_t v28 = pthread_mach_thread_np(v27);
        HIBYTE(v62) = 4;
        strcpy((char *)buf, "nrcf");
        *(_DWORD *)uint64_t v49 = 67110658;
        *(_DWORD *)&void v49[4] = v28;
        *(_WORD *)&v49[8] = 2080;
        *(void *)&v49[10] = "Core.h";
        __int16 v50 = 1024;
        int v51 = 391;
        __int16 v52 = 2080;
        long long v53 = "optional_value.operator BOOL() == true";
        __int16 v54 = 2080;
        uint64_t v55 = buf;
        __int16 v56 = 1024;
        int v57 = 1735159650;
        __int16 v58 = 1024;
        int v59 = 0;
        _os_log_error_impl(&dword_1BAA78000, v26, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", v49, 0x38u);
        if (SHIBYTE(v62) < 0) {
          operator delete(*(void **)buf);
        }
      }
      abort();
    }
    AMCP::Log::Scope_Registry::get(v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v49, "com.apple.coreaudio", "AMCP");
    CFStringRef v23 = **(NSObject ***)v49;
    if (*(void *)&v49[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v49[8]);
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      int v24 = pthread_self();
      mach_port_t v25 = pthread_mach_thread_np(v24);
      HIBYTE(v62) = 4;
      strcpy((char *)buf, "nrsd");
      *(_DWORD *)uint64_t v49 = 67110658;
      *(_DWORD *)&void v49[4] = v25;
      *(_WORD *)&v49[8] = 2080;
      *(void *)&v49[10] = "Core.h";
      __int16 v50 = 1024;
      int v51 = 391;
      __int16 v52 = 2080;
      long long v53 = "optional_value.operator BOOL() == true";
      __int16 v54 = 2080;
      uint64_t v55 = buf;
      __int16 v56 = 1024;
      int v57 = 1735159650;
      __int16 v58 = 1024;
      int v59 = 0;
      _os_log_error_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", v49, 0x38u);
      if (SHIBYTE(v62) < 0) {
        operator delete(*(void **)buf);
      }
    }
    abort();
  }
  long long v22 = 0uLL;
  if (v43)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
    long long v22 = 0uLL;
  }
  *a2 = v22;
}

void sub_1BAD32144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, AMCP::IO_Clock *a11, uint64_t a12, void *__p, uint64_t *a14, const void *a15, uint64_t a16, std::__shared_weak_count *a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,CFTypeRef a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,CFTypeRef a29,uint64_t a30,std::__shared_weak_count *a31,CFTypeRef cf,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t v65 = *a18;
  if (*a18)
  {
    v63[7] = v65;
    operator delete(v65);
  }
  CFNumberRef v66 = (std::__shared_weak_count *)v63[5];
  if (v66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v66);
  }
  a50 = v63;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  MEMORY[0x1C1859840](v63, 0x1020C40E3AF47BELL);
  if (__p) {
    operator delete(__p);
  }
  uint64_t v67 = (uint64_t)a17[32].__vftable;
  a17[32].__vftable = 0;
  if (v67) {
    std::default_delete<AMCP::Tone_Generator_Buffer>::operator()[abi:ne180100](v67);
  }
  uint64_t v68 = *a14;
  *a14 = 0;
  if (v68) {
    std::default_delete<AMCP::Null::Null_Engine_Reflector>::operator()[abi:ne180100](v68);
  }
  uint64_t v69 = a17[31].__vftable;
  if (v69) {
    CFRelease(v69);
  }
  AMCP::IO_Clock::~IO_Clock(a11);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a17[11]);
  unint64_t shared_weak_owners = (std::__shared_weak_count *)a17[10].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
  }
  uint64_t v71 = (std::__shared_weak_count *)a17[10].__vftable;
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  shared_owners = (void *)a17[8].__shared_owners_;
  if (shared_owners) {
    operator delete(shared_owners);
  }
  uint64_t v73 = a17[7].__vftable;
  if (v73) {
    operator delete(v73);
  }
  CFTypeRef v74 = a17[5].__vftable;
  if (v74)
  {
    a17[5].__shared_owners_ = (uint64_t)v74;
    operator delete(v74);
  }
  char v75 = a17[4].__vftable;
  if (v75)
  {
    a17[4].__shared_owners_ = (uint64_t)v75;
    operator delete(v75);
  }
  long long v76 = a17[2].__vftable;
  if (v76) {
    CFRelease(v76);
  }
  long long v77 = (std::__shared_weak_count *)a17[1].__shared_weak_owners_;
  if (v77) {
    std::__shared_weak_count::__release_weak(v77);
  }
  if (a15) {
    CFRelease(a15);
  }
  if (cf) {
    CFRelease(cf);
  }
  std::__shared_weak_count::~__shared_weak_count(a17);
  operator delete(v78);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a63);
  if (a22) {
    CFRelease(a22);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a29) {
    CFRelease(a29);
  }
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  _Unwind_Resume(a1);
}

void AMCP::Null::make_stream_info_list(uint64_t a1, std::__shared_mutex_base *a2, AMCP::Core::Core **a3, unsigned int a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  unsigned int v8 = *a3;
  LODWORD(v32) = 1937009955;
  *(void *)((char *)&v32 + 4) = a4;
  if (AMCP::Core::Core::has_property(v8, (const AMCP::Address *)&v32))
  {
    AMCP::Core::Core::get_simple_required_property<1937009955u>(&v37, *a3, a4);
    unsigned int v9 = v37;
    unsigned int v10 = v38;
    std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::reserve((void **)a1, v38 - v37);
    if (v9 == v10)
    {
      uint64_t v30 = v10;
      if (v10) {
LABEL_28:
      }
        operator delete(v30);
    }
    else
    {
      std::string __p = v9;
      do
      {
        AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v35, a2, *v9);
        CFStringRef v11 = v35;
        if (v35)
        {
          int simple_required = AMCP::Core::Core::get_simple_required_property<1935894638u>(v35);
          AMCP::Core::Core::get_simple_required_property<1718444404u>((uint64_t)&v32, v11);
          int v14 = *(_DWORD **)(a1 + 8);
          unint64_t v13 = *(void *)(a1 + 16);
          if ((unint64_t)v14 >= v13)
          {
            unsigned int v17 = *(_DWORD **)a1;
            uint64_t v18 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v14 - *(void *)a1) >> 3);
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) > 0x492492492492492) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v20 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v13 - (void)v17) >> 3);
            if (2 * v20 > v19) {
              unint64_t v19 = 2 * v20;
            }
            if (v20 >= 0x249249249249249) {
              unint64_t v21 = 0x492492492492492;
            }
            else {
              unint64_t v21 = v19;
            }
            if (v21) {
              unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v21);
            }
            else {
              uint64_t v22 = 0;
            }
            unint64_t v23 = v21 + 56 * v18;
            *(_DWORD *)(v23 + 4) = 0;
            *(_DWORD *)(v23 + 8) = 0;
            *(_DWORD *)unint64_t v23 = simple_required;
            long long v24 = v33;
            *(_OWORD *)(v23 + 16) = v32;
            *(_OWORD *)(v23 + 32) = v24;
            *(void *)(v23 + 48) = v34;
            if (v14 == v17)
            {
              unint64_t v29 = v21 + 56 * v18;
            }
            else
            {
              unint64_t v25 = v21 + 56 * v18;
              do
              {
                long long v26 = *(_OWORD *)(v14 - 14);
                long long v27 = *(_OWORD *)(v14 - 10);
                long long v28 = *(_OWORD *)(v14 - 6);
                unint64_t v29 = v25 - 56;
                *(void *)(v25 - 8) = *((void *)v14 - 1);
                *(_OWORD *)(v25 - 24) = v28;
                *(_OWORD *)(v25 - 40) = v27;
                *(_OWORD *)(v25 - 56) = v26;
                v14 -= 14;
                v25 -= 56;
              }
              while (v14 != v17);
            }
            CFTypeRef v16 = (_DWORD *)(v23 + 56);
            *(void *)a1 = v29;
            *(void *)(a1 + 8) = v23 + 56;
            *(void *)(a1 + 16) = v21 + 56 * v22;
            if (v17) {
              operator delete(v17);
            }
          }
          else
          {
            v14[1] = 0;
            _OWORD v14[2] = 0;
            *int v14 = simple_required;
            long long v15 = v33;
            *((_OWORD *)v14 + 1) = v32;
            *((_OWORD *)v14 + 2) = v15;
            *((void *)v14 + 6) = v34;
            CFTypeRef v16 = v14 + 14;
          }
          *(void *)(a1 + 8) = v16;
        }
        if (v36) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v36);
        }
        ++v9;
      }
      while (v9 != v10);
      uint64_t v30 = __p;
      if (__p) {
        goto LABEL_28;
      }
    }
  }
}

void sub_1BAD32840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (v18) {
    operator delete(v18);
  }
  unint64_t v20 = *(void **)v17;
  if (*(void *)v17)
  {
    *(void *)(v17 + 8) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Engine>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::Null::Engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146E498;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Null::Engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146E498;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_5,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_5>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_5,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_5>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_5,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_5>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F146E428;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 16) = *(void *)(result + 16);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

_DWORD *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_5,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_5>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::__clone(uint64_t a1)
{
  CFIndex result = operator new(0x20uLL);
  *(void *)CFIndex result = &unk_1F146E428;
  result[2] = *(_DWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 2) = *(void *)(a1 + 16);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_5,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_5>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146E428;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_5,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_5>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146E428;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_1>,CA::ValueRangeList ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_1>,CA::ValueRangeList ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Null5Clock13populate_coreEjE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_1>,CA::ValueRangeList ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(std::__shared_mutex_base **)(*(void *)(v3 + 8) + 16);
  __p[0] = &unk_1F146E398;
  __p[1] = (void *)v3;
  *((void *)&v31 + 1) = __p;
  AMCP::Core::Broker::fetch_first_core_if (&v28, v4, (uint64_t)__p);
  std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](__p);
  if (v28)
  {
    AMCP::Core::Core::get_simple_required_property<1718449187u>(__p, v28);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    int v6 = (double **)__p[0];
    unsigned int v7 = (double **)__p[1];
    while (v6 != v7)
    {
      unsigned int v8 = *v6;
      unsigned int v9 = v6[1];
      while (v8 != v9)
      {
        CA::ValueRangeList::AddRange((double **)a2, v8);
        v8 += 2;
      }
      v6 += 8;
    }
    long long v26 = __p;
    std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&v26);
  }
  else
  {
    if (!*(void *)(v3 + 48))
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    v5.i64[0] = 0x676C6F626E737223;
    uint64_t v24 = 0x676C6F626E737223;
    int v25 = 0;
    AMCP::Address::to_string((std::string *)__p, (unsigned int *)&v24, v5);
    if ((SBYTE7(v31) & 0x80u) == 0) {
      unsigned int v10 = __p;
    }
    else {
      unsigned int v10 = (void **)__p[0];
    }
    if (v10)
    {
      if ((SBYTE7(v31) & 0x80u) == 0) {
        CFIndex v11 = BYTE7(v31);
      }
      else {
        CFIndex v11 = (CFIndex)__p[1];
      }
      CFStringRef v12 = CFStringCreateWithBytes(0, (const UInt8 *)v10, v11, 0x8000100u, 0);
      if (!v12)
      {
        unint64_t v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v20, "Could not construct");
        __cxa_throw(v20, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v26, *(CFDictionaryRef *)(v3 + 48), v12);
      CFRelease(v12);
    }
    else
    {
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v26, *(CFDictionaryRef *)(v3 + 48), 0);
    }
    if (SBYTE7(v31) < 0) {
      operator delete(__p[0]);
    }
    if (v27)
    {
      long long v32 = 0;
      *(_OWORD *)std::string __p = 0u;
      long long v31 = 0u;
      AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef&>((uint64_t)__p, (CFTypeRef *)&v26);
      AMCP::Thing::convert_to<CA::ValueRangeList>((void *)a2, (uint64_t)__p);
      if (v32) {
        v32(0, __p, 0, 0);
      }
    }
    else
    {
      if (!*(void *)(v3 + 48))
      {
        unint64_t v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v21, "Could not construct");
        __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      v13.i64[0] = 0x676C6F626E737274;
      uint64_t v24 = 0x676C6F626E737274;
      int v25 = 0;
      AMCP::Address::to_string((std::string *)__p, (unsigned int *)&v24, v13);
      if ((SBYTE7(v31) & 0x80u) == 0) {
        int v14 = __p;
      }
      else {
        int v14 = (void **)__p[0];
      }
      if (v14)
      {
        if ((SBYTE7(v31) & 0x80u) == 0) {
          CFIndex v15 = BYTE7(v31);
        }
        else {
          CFIndex v15 = (CFIndex)__p[1];
        }
        CFStringRef v16 = CFStringCreateWithBytes(0, (const UInt8 *)v14, v15, 0x8000100u, 0);
        if (!v16)
        {
          uint64_t v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v17, "Could not construct");
          __cxa_throw(v17, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
      else
      {
        CFStringRef v16 = 0;
      }
      applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,applesauce::CF::StringRef>((applesauce::CF::NumberRef *)&cf, *(CFDictionaryRef *)(v3 + 48), v16);
      if (!cf)
      {
        uint64_t v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v22, "Could not construct");
        __cxa_throw(v22, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      double v18 = applesauce::CF::convert_to<double,0>((const __CFNumber *)cf);
      if (cf) {
        CFRelease(cf);
      }
      if (v16) {
        CFRelease(v16);
      }
      if (SBYTE7(v31) < 0) {
        operator delete(__p[0]);
      }
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      __p[0] = *(void **)&v18;
      __p[1] = *(void **)&v18;
      CA::ValueRangeList::AddRange((double **)a2, (double *)__p);
    }
    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v26);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
}

void sub_1BAD32F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a13);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

applesauce::CF::NumberRef *applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,applesauce::CF::StringRef>(applesauce::CF::NumberRef *a1, CFDictionaryRef theDict, const void *a3)
{
  uint64_t v4 = applesauce::CF::details::at_key<applesauce::CF::StringRef>(theDict, a3);
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int16x8_t v5 = v4;
  CFRetain(v4);

  return applesauce::CF::NumberRef::NumberRef(a1, v5);
}

void sub_1BAD3310C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *_ZNKSt3__110__function6__funcIZZN4AMCP4Null5Clock13populate_coreEjENK3__1clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE11target_typeEv()
{
  return &_ZTIZZN4AMCP4Null5Clock13populate_coreEjENK3__1clEvEUlRKT_E_;
}

uint64_t _ZNKSt3__110__function6__funcIZZN4AMCP4Null5Clock13populate_coreEjENK3__1clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN4AMCP4Null5Clock13populate_coreEjENK3$_1clEvEUlRKT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZZN4AMCP4Null5Clock13populate_coreEjENK3__1clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEEclESH_(uint64_t a1, AMCP::Core::Core **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int simple_required = AMCP::Core::Core::get_simple_required_property<1870098034u>(*a2);
  int v5 = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  return *(_DWORD *)(v3 + 88) == simple_required && v5 == 1634956402;
}

uint64_t _ZNKSt3__110__function6__funcIZZN4AMCP4Null5Clock13populate_coreEjENK3__1clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE7__cloneEPNS0_6__baseISI_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F146E398;
  a2[1] = v2;
  return result;
}

void *_ZNKSt3__110__function6__funcIZZN4AMCP4Null5Clock13populate_coreEjENK3__1clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE7__cloneEv(uint64_t a1)
{
  CFIndex result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *CFIndex result = &unk_1F146E398;
  result[1] = v3;
  return result;
}

void _ZNSt3__110__function6__funcIZZN4AMCP4Null5Clock13populate_coreEjENK3__1clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEED0Ev()
{
}

uint64_t std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_1>,CA::ValueRangeList ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F146E328;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_1>,CA::ValueRangeList ()(void)>::__clone(uint64_t a1)
{
  CFIndex result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *CFIndex result = &unk_1F146E328;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_1>,CA::ValueRangeList ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_4,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_4>,void ()(double const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_4,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_4>,void ()(double const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Null5Clock13populate_coreEjE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_4,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_4>,void ()(double const&)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(unsigned int **)(a1 + 16);
  if (!v3
    || (uint64_t v3 = (unsigned int *)std::__shared_weak_count::lock((std::__shared_weak_count *)v3),
        (int v5 = (std::__shared_weak_count *)v3) == 0)
    || (uint64_t v3 = *(unsigned int **)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unsigned int v9 = **(NSObject ***)buf;
    if ((void)v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v31);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      unsigned int v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v11;
      LOWORD(v31) = 2080;
      *(void *)((char *)&v31 + 2) = "Null_Object.cpp";
      WORD5(v31) = 1024;
      HIDWORD(v31) = 816;
      LOWORD(v32) = 2080;
      *(void *)((char *)&v32 + 2) = "object_ptr.operator BOOL() == false";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no model object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v22, "no model object");
    std::runtime_error::runtime_error(&v23, &v22);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v24 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    *((void *)&v32 + 1) = "auto AMCP::Null::Clock::populate_core(Address::Element)::(anonymous class)::operator()(const"
                            " Sample_Rate &) const";
    uint64_t v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    int v34 = 816;
    std::vector<void *>::vector(&v17);
    int v12 = backtrace((void **)v17, (*((void *)&v17 + 1) - (void)v17) >> 3);
    std::vector<void *>::resize((char **)&v17, v12);
    unint64_t v19 = &unk_1F148AA90;
    long long v20 = v17;
    uint64_t v21 = v18;
    long long v17 = 0uLL;
    uint64_t v18 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = v3[22];
  v23.__vftable = (std::runtime_error_vtbl *)0x676C6F626E737274;
  LODWORD(v23.__imp_.__imp_) = 0;
  long long v31 = 0uLL;
  *(void *)std::string buf = *a2;
  *(void *)&long long v32 = 0;
  *((void *)&v32 + 1) = AMCP::Implementation::In_Place_Storage<double>::dispatch;
  unsigned int v7 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(unsigned int *, uint64_t, std::runtime_error *, uint8_t *))(*(void *)v3 + 40))(v3, v6, &v23, buf);
  char v8 = (char)v7;
  if (*((void *)&v32 + 1)) {
    unsigned int v7 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(void, uint8_t *, void, void))&v32 + 1))(0, buf, 0, 0);
  }
  if (!v8)
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int16x8_t v13 = **(NSObject ***)buf;
    if ((void)v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v31);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v15;
      LOWORD(v31) = 2080;
      *(void *)((char *)&v31 + 2) = "Null_Object.cpp";
      WORD5(v31) = 1024;
      HIDWORD(v31) = 818;
      LOWORD(v32) = 2080;
      *(void *)((char *)&v32 + 2) = "was_handled == Object::Was_Handled::no";
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not handled", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v22, "not handled");
    std::runtime_error::runtime_error(&v23, &v22);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v24 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    *((void *)&v32 + 1) = "auto AMCP::Null::Clock::populate_core(Address::Element)::(anonymous class)::operator()(const"
                            " Sample_Rate &) const";
    uint64_t v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    int v34 = 818;
    std::vector<void *>::vector(&v17);
    int v16 = backtrace((void **)v17, (*((void *)&v17 + 1) - (void)v17) >> 3);
    std::vector<void *>::resize((char **)&v17, v16);
    unint64_t v19 = &unk_1F148AA90;
    long long v20 = v17;
    uint64_t v21 = v18;
    long long v17 = 0uLL;
    uint64_t v18 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1BAD339F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,uint64_t a29)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_4,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_4>,void ()(double const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_4,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_4>,void ()(double const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_4,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_4>,void ()(double const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F146E2A8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_4,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_4>,void ()(double const&)>::__clone(uint64_t a1)
{
  CFIndex result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *CFIndex result = &unk_1F146E2A8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_4,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_4>,void ()(double const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146E2A8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_4,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_4>,void ()(double const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146E2A8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_0>,double ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_0>,double ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Null5Clock13populate_coreEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_0>,double ()(void)>::operator()(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_mutex_base **)(*(void *)(v1 + 8) + 16);
  unsigned int v3 = *(_DWORD *)(v1 + 88);
  uint64_t v24 = (uint64_t)&unk_1F146E218;
  uint64_t v26 = &v24;
  memset(valuePtr, 0, sizeof(valuePtr));
  uint64_t v4 = (unsigned int *)operator new(4uLL);
  *uint64_t v4 = v3;
  v22[1] = v4 + 1;
  v22[2] = v4 + 1;
  v22[0] = v4;
  AMCP::Core::Broker::gather_directly_owned_objects((std::vector<unsigned int> *)&__p, v2, v22);
  operator delete(v4);
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  for (uint64_t i = (unsigned int *)__p.__r_.__value_.__r.__words[0]; i != (unsigned int *)size; ++i)
  {
    AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v20, v2, *i);
    if (v20)
    {
      if (!v26) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      if ((*(uint64_t (**)(uint64_t *, AMCP::Core::Core **))(*v26 + 48))(v26, &v20)) {
        goto LABEL_10;
      }
    }
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
  }
  long long v20 = 0;
  uint64_t v21 = 0;
LABEL_10:
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)valuePtr;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](&v24);
  if (v20)
  {
    AMCP::Core::Core::get_simple_required_property<1718444404u>((uint64_t)&__p, v20);
    double v8 = *(double *)&__p.__r_.__value_.__l.__data_;
  }
  else
  {
    if (!*(void *)(v1 + 48))
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    v7.i64[0] = 0x676C6F626E737274;
    uint64_t v24 = 0x676C6F626E737274;
    int v25 = 0;
    AMCP::Address::to_string(&__p, (unsigned int *)&v24, v7);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (p_p)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFIndex v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        CFIndex v10 = __p.__r_.__value_.__l.__size_;
      }
      CFStringRef v11 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, v10, 0x8000100u, 0);
      if (!v11)
      {
        int v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v12, "Could not construct");
        __cxa_throw(v12, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    else
    {
      CFStringRef v11 = 0;
    }
    valuePtr[0] = 0x40E5888000000000;
    CFTypeRef cf = CFNumberCreate(0, kCFNumberDoubleType, valuePtr);
    if (!cf)
    {
      int v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v16, "Could not construct");
      __cxa_throw(v16, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(v22, *(const __CFDictionary **)(v1 + 48), v11, &cf);
    int16x8_t v13 = v22[0];
    if (!v22[0])
    {
      long long v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v17, "Could not construct");
      __cxa_throw(v17, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    double v8 = applesauce::CF::convert_to<double,0>((const __CFNumber *)v22[0]);
    CFRelease(v13);
    if (cf) {
      CFRelease(cf);
    }
    if (v11) {
      CFRelease(v11);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  return v8;
}

void sub_1BAD34138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNKSt3__110__function6__funcIZZN4AMCP4Null5Clock13populate_coreEjENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE11target_typeEv()
{
  return &_ZTIZZN4AMCP4Null5Clock13populate_coreEjENK3__0clEvEUlRKT_E_;
}

uint64_t _ZNKSt3__110__function6__funcIZZN4AMCP4Null5Clock13populate_coreEjENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN4AMCP4Null5Clock13populate_coreEjENK3$_0clEvEUlRKT_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZZN4AMCP4Null5Clock13populate_coreEjENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEEclESH_(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);

  return AMCP::is_base_of((AMCP *)0x61737472, simple_required);
}

void _ZNKSt3__110__function6__funcIZZN4AMCP4Null5Clock13populate_coreEjENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE7__cloneEPNS0_6__baseISI_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1F146E218;
}

void *_ZNKSt3__110__function6__funcIZZN4AMCP4Null5Clock13populate_coreEjENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEE7__cloneEv()
{
  CFIndex result = operator new(0x10uLL);
  *CFIndex result = &unk_1F146E218;
  return result;
}

void _ZNSt3__110__function6__funcIZZN4AMCP4Null5Clock13populate_coreEjENK3__0clEvEUlRKT_E_NS_9allocatorIS9_EEFbRKNS_10shared_ptrINS2_4Core4CoreEEEEED0Ev()
{
}

uint64_t std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_0>,double ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F146E1A8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_0>,double ()(void)>::__clone(uint64_t a1)
{
  CFIndex result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *CFIndex result = &unk_1F146E1A8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_0>,double ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_3,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_3>,void ()(applesauce::CF::StringRef const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_3,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_3>,void ()(applesauce::CF::StringRef const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Null5Clock13populate_coreEjE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_3,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_3>,void ()(applesauce::CF::StringRef const&)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3 || (v3 = std::__shared_weak_count::lock(v3), (int v5 = v3) == 0) || (v6 = *(unsigned int **)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    CFIndex v10 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Null_Object.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 783;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "object_ptr.operator BOOL() == false";
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no model object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v23, "no model object");
    std::runtime_error::runtime_error(&v24, &v23);
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    int v29 = -1;
    v24.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v25 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    *(void *)&buf[32] = "auto AMCP::Null::Clock::populate_core(Address::Element)::(anonymous class)::operator()(const C"
                          "F::String &) const";
    long long v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    int v33 = 783;
    std::vector<void *>::vector(&v18);
    int v13 = backtrace((void **)v18, (*((void *)&v18 + 1) - (void)v18) >> 3);
    std::vector<void *>::resize((char **)&v18, v13);
    long long v20 = &unk_1F148AA90;
    long long v21 = v18;
    uint64_t v22 = v19;
    long long v18 = 0uLL;
    uint64_t v19 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v7 = v6[22];
  v24.__vftable = (std::runtime_error_vtbl *)0x676C6F626E6C666CLL;
  LODWORD(v24.__imp_.__imp_) = 0;
  memset(buf, 0, sizeof(buf));
  AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::construct<applesauce::CF::StringRef const&>((uint64_t)buf, a2);
  double v8 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(unsigned int *, uint64_t, std::runtime_error *, uint8_t *))(*(void *)v6 + 40))(v6, v7, &v24, buf);
  char v9 = (char)v8;
  if (*(void *)&buf[32]) {
    double v8 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
  }
  if (!v9)
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v14 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v15 = pthread_self();
      mach_port_t v16 = pthread_mach_thread_np(v15);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v16;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Null_Object.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 785;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "was_handled == Object::Was_Handled::no";
      _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not handled", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v23, "not handled");
    std::runtime_error::runtime_error(&v24, &v23);
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    int v29 = -1;
    v24.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v25 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    *(void *)&buf[32] = "auto AMCP::Null::Clock::populate_core(Address::Element)::(anonymous class)::operator()(const C"
                          "F::String &) const";
    long long v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    int v33 = 785;
    std::vector<void *>::vector(&v18);
    int v17 = backtrace((void **)v18, (*((void *)&v18 + 1) - (void)v18) >> 3);
    std::vector<void *>::resize((char **)&v18, v17);
    long long v20 = &unk_1F148AA90;
    long long v21 = v18;
    uint64_t v22 = v19;
    long long v18 = 0uLL;
    uint64_t v19 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1BAD34ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,uint64_t a29)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_3,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_3>,void ()(applesauce::CF::StringRef const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_3,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_3>,void ()(applesauce::CF::StringRef const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_3,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_3>,void ()(applesauce::CF::StringRef const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F146E128;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_3,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_3>,void ()(applesauce::CF::StringRef const&)>::__clone(uint64_t a1)
{
  CFIndex result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *CFIndex result = &unk_1F146E128;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_3,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_3>,void ()(applesauce::CF::StringRef const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146E128;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_3,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_3>,void ()(applesauce::CF::StringRef const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146E128;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_2,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_2>,applesauce::CF::StringRef ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_2,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_2>,applesauce::CF::StringRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Null5Clock13populate_coreEjE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_2,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_2>,applesauce::CF::StringRef ()(void)>::operator()(uint64_t a1@<X0>, void *a2@<X8>, int16x8_t a3@<Q0>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!*(void *)(v4 + 48))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  a3.i64[0] = 0x676C6F626E6C666CLL;
  uint64_t v11 = 0x676C6F626E6C666CLL;
  int v12 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v11, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (p_p)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v7 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
    if (!v7)
    {
      double v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v8, "Could not construct");
      __cxa_throw(v8, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v7 = 0;
  }
  CFTypeRef cf = 0;
  applesauce::CF::at_or<applesauce::CF::StringRef,applesauce::CF::StringRef>(a2, *(const __CFDictionary **)(v4 + 48), v7, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1BAD34FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_2,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_2>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F146E0A8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_2,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_2>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t a1)
{
  CFIndex result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *CFIndex result = &unk_1F146E0A8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Null::Clock::populate_core(unsigned int)::$_2,std::allocator<AMCP::Null::Clock::populate_core(unsigned int)::$_2>,applesauce::CF::StringRef ()(void)>::~__func()
{
}

void AMCP::Null::Clock::~Clock(std::__shared_mutex_base *this)
{
  AMCP::Null::Object::~Object(this);

  JUMPOUT(0x1C1859840);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Clock>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::Null::Clock>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FDF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Null::Clock>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FDF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AMCP::Null::Stream::populate_core(AMCP::Null::Stream *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v148 = *MEMORY[0x1E4F143B8];
  AMCP::Null::Object::populate_core(this, a2, a3);
  LOBYTE(v135[0]) = 0;
  char v138 = 0;
  strcpy((char *)v115, "ridsbolg");
  BYTE1(v115[1]) = 0;
  WORD1(v115[1]) = 0;
  std::vector<unsigned int> v141 = 0;
  long long v139 = 0u;
  long long v140 = 0u;
  if (!*((void *)this + 6))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string((std::string *)__p, (unsigned int *)v115, (int16x8_t)0);
  if (__p[23] >= 0) {
    int v5 = __p;
  }
  else {
    int v5 = *(const UInt8 **)__p;
  }
  if (v5)
  {
    if (__p[23] >= 0) {
      CFIndex v6 = __p[23];
    }
    else {
      CFIndex v6 = *(void *)&__p[8];
    }
    CFStringRef v7 = CFStringCreateWithBytes(0, v5, v6, 0x8000100u, 0);
    if (!v7)
    {
      CFArrayRef v102 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v102, "Could not construct");
      __cxa_throw(v102, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v142, *((CFDictionaryRef *)this + 6), v7);
    CFRelease(v7);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v142, *((CFDictionaryRef *)this + 6), 0);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (v143)
  {
    AMCP::make_thing_from_description((AMCP *)__p, (CFTypeRef *)&v142);
    AMCP::swap((AMCP::Thing *)__p, (AMCP::Thing *)&v139, v9);
    if (*(void *)&__p[32]) {
      (*(void (**)(void, unsigned char *, void, void))&__p[32])(0, __p, 0, 0);
    }
  }
  else if (v138)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v139, (uint64_t)v135, v8);
  }
  if (v141)
  {
    LODWORD(v119) = 1935960434;
    int v113 = (int)v115[1];
    *(CFTypeRef *)((char *)&v119 + 4) = *(CFTypeRef *)((char *)v115 + 4);
    int v123 = 0;
    long long v121 = 0u;
    long long v122 = 0u;
    v141(1, &v139, &v121, 0);
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v120, v113, *(double *)&v119);
    uint64_t v10 = v120;
    unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    *(_OWORD *)unint64_t v125 = 0u;
    memset(v126, 0, sizeof(v126));
    if (v123) {
      v123(1, &v121, v125, 0);
    }
    *((void *)&v146 + 1) = 0;
    int v12 = (char *)operator new(0x30uLL);
    *(void *)int v12 = &unk_1F146E9F8;
    *(_OWORD *)(v12 + 8) = 0u;
    *(_OWORD *)(v12 + 24) = 0u;
    *((void *)v12 + 5) = 0;
    if (*(void *)&v126[16]) {
      (*(void (**)(uint64_t, void **, char *, void))&v126[16])(1, v125, v12 + 8, 0);
    }
    *((void *)&v146 + 1) = v12;
    memset(__p, 0, sizeof(__p));
    std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v145);
    *(void *)&__p[32] = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v10, v11, (AMCP *)__p);
    if (*(void *)&__p[32]) {
      (*(void (**)(void, unsigned char *, void, void))&__p[32])(0, __p, 0, 0);
    }
    std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](&v145);
    if (*(void *)&v126[16]) {
      (*(void (**)(void, void **, void, void))&v126[16])(0, v125, 0, 0);
    }
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)v125, v10);
    *(void *)&long long v127 = *(void *)(v10 + 40);
    DWORD2(v127) = *(_DWORD *)(v10 + 48);
    unint64_t v13 = AMCP::Implementation::get_type_marker<std::function<AMCP::Direction ()(void)>>();
    int v14 = v125[0];
    unint64_t v15 = (unint64_t)v125[1];
    v125[0] = 0;
    v125[1] = 0;
    *(void *)std::string __p = v14;
    *(void *)&__p[8] = v15;
    *(_OWORD *)&__p[16] = *(_OWORD *)v126;
    *(_DWORD *)&__p[32] = *(_DWORD *)&v126[16];
    if (*(void *)&v126[8])
    {
      unint64_t v16 = *(void *)(*(void *)v126 + 8);
      if ((v15 & (v15 - 1)) != 0)
      {
        if (v16 >= v15) {
          v16 %= v15;
        }
      }
      else
      {
        v16 &= v15 - 1;
      }
      v14[v16] = &__p[16];
      *(_OWORD *)unint64_t v126 = 0uLL;
    }
    *(void *)&long long v130 = v127;
    DWORD2(v130) = DWORD2(v127);
    *((void *)&v133 + 1) = 0;
    int v17 = operator new(0x40uLL);
    *int v17 = &unk_1F146EA78;
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v17 + 1), (uint64_t *)__p);
    void v17[6] = v130;
    *((_DWORD *)v17 + 14) = DWORD2(v130);
    *((void *)&v133 + 1) = v17;
    long long v145 = 0u;
    long long v146 = 0u;
    CFStringRef v147 = 0;
    std::__function::__value_func<AMCP::Direction ()(void)>::__value_func[abi:ne180100]((uint64_t)&v145, (uint64_t)&v132);
    CFStringRef v147 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Direction ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v10, v13, (AMCP *)&v145);
    if (v147) {
      ((void (*)(void, long long *, void, void))v147)(0, &v145, 0, 0);
    }
    std::__function::__value_func<AMCP::Direction ()(void)>::~__value_func[abi:ne180100](&v132);
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v125);
    if (v123) {
      v123(0, &v121, 0, 0);
    }
  }
  else
  {
    uint64_t v10 = 0;
    long long v120 = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v142);
  if (v141) {
    v141(0, &v139, 0, 0);
  }
  if (v10) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v10 + 40), &v120);
  }
  if (*((void *)&v120 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v120 + 1));
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v135);
  __p[0] = 0;
  LOBYTE(v130) = 0;
  *(void *)&long long v139 = 0x676C6F627363686ELL;
  DWORD2(v139) = 0;
  *(_OWORD *)unint64_t v125 = 0u;
  memset(v126, 0, sizeof(v126));
  if (!*((void *)this + 6))
  {
    uint64_t v97 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v97, "Could not construct");
    __cxa_throw(v97, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string((std::string *)v135, (unsigned int *)&v139, (int16x8_t)0);
  if ((SBYTE7(v136) & 0x80u) == 0) {
    long long v18 = v135;
  }
  else {
    long long v18 = (void **)v135[0];
  }
  if (v18)
  {
    if ((SBYTE7(v136) & 0x80u) == 0) {
      CFIndex v19 = BYTE7(v136);
    }
    else {
      CFIndex v19 = (CFIndex)v135[1];
    }
    CFStringRef v20 = CFStringCreateWithBytes(0, (const UInt8 *)v18, v19, 0x8000100u, 0);
    if (!v20)
    {
      uint64_t v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v103, "Could not construct");
      __cxa_throw(v103, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v145, *((CFDictionaryRef *)this + 6), v20);
    CFRelease(v20);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v145, *((CFDictionaryRef *)this + 6), 0);
  }
  if (SBYTE7(v136) < 0) {
    operator delete(v135[0]);
  }
  if (BYTE8(v145))
  {
    AMCP::make_thing_from_description((AMCP *)v135, (CFTypeRef *)&v145);
    AMCP::swap((AMCP::Thing *)v135, (AMCP::Thing *)v125, v22);
    if (v137) {
      v137(0, (uint64_t)v135, 0, 0);
    }
  }
  else if ((_BYTE)v130)
  {
    AMCP::Thing::operator=((AMCP::Thing *)v125, (uint64_t)__p, v21);
  }
  if (*(void *)&v126[16])
  {
    LODWORD(v121) = 1935894638;
    *(void *)((char *)&v121 + 4) = *(void *)((char *)&v139 + 4);
    AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>((uint64_t *)v135, (uint64_t)&v121, (uint64_t)v125);
  }
  else
  {
    v135[0] = 0;
    v135[1] = 0;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v145);
  if (*(void *)&v126[16]) {
    (*(void (**)(void, void **, void, void))&v126[16])(0, v125, 0, 0);
  }
  if (v135[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)v135[0] + 10, v135);
  }
  if (v135[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v135[1]);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  long long v145 = 0u;
  long long v146 = 0u;
  CFStringRef v147 = AMCP::Implementation::In_Place_Storage<int>::dispatch;
  std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)__p, (uint64_t)&v145);
  *(void *)&long long v132 = 0x676C6F6274617073;
  DWORD2(v132) = 0;
  *(_OWORD *)unint64_t v125 = 0u;
  memset(v126, 0, sizeof(v126));
  if (!*((void *)this + 6))
  {
    std::string::size_type v98 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v98, "Could not construct");
    __cxa_throw(v98, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string((std::string *)v135, (unsigned int *)&v132, (int16x8_t)0);
  if ((SBYTE7(v136) & 0x80u) == 0) {
    std::runtime_error v23 = v135;
  }
  else {
    std::runtime_error v23 = (void **)v135[0];
  }
  if (v23)
  {
    if ((SBYTE7(v136) & 0x80u) == 0) {
      CFIndex v24 = BYTE7(v136);
    }
    else {
      CFIndex v24 = (CFIndex)v135[1];
    }
    CFStringRef v25 = CFStringCreateWithBytes(0, (const UInt8 *)v23, v24, 0x8000100u, 0);
    if (!v25)
    {
      CFTypeRef v104 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v104, "Could not construct");
      __cxa_throw(v104, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v121, *((CFDictionaryRef *)this + 6), v25);
    CFRelease(v25);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v121, *((CFDictionaryRef *)this + 6), 0);
  }
  if (SBYTE7(v136) < 0) {
    operator delete(v135[0]);
  }
  if (BYTE8(v121))
  {
    AMCP::make_thing_from_description((AMCP *)v135, (CFTypeRef *)&v121);
    AMCP::swap((AMCP::Thing *)v135, (AMCP::Thing *)v125, v27);
    if (v137) {
      v137(0, (uint64_t)v135, 0, 0);
    }
  }
  else if ((_BYTE)v130)
  {
    AMCP::Thing::operator=((AMCP::Thing *)v125, (uint64_t)__p, v26);
  }
  if (*(void *)&v126[16])
  {
    LODWORD(v139) = 1952542835;
    *(void *)((char *)&v139 + 4) = *(void *)((char *)&v132 + 4);
    AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>((uint64_t *)v135, (uint64_t)&v139, (uint64_t)v125);
  }
  else
  {
    v135[0] = 0;
    v135[1] = 0;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v121);
  if (*(void *)&v126[16]) {
    (*(void (**)(void, void **, void, void))&v126[16])(0, v125, 0, 0);
  }
  if (v135[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)v135[0] + 10, v135);
  }
  if (v135[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v135[1]);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  if (v147) {
    ((void (*)(void, long long *, void, void))v147)(0, &v145, 0, 0);
  }
  long long v145 = 0u;
  long long v146 = 0u;
  CFStringRef v147 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
  std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)__p, (uint64_t)&v145);
  *(void *)&long long v132 = 0x676C6F627465726DLL;
  DWORD2(v132) = 0;
  *(_OWORD *)unint64_t v125 = 0u;
  memset(v126, 0, sizeof(v126));
  if (!*((void *)this + 6))
  {
    uint64_t v99 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v99, "Could not construct");
    __cxa_throw(v99, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string((std::string *)v135, (unsigned int *)&v132, (int16x8_t)0);
  if ((SBYTE7(v136) & 0x80u) == 0) {
    uint64_t v28 = v135;
  }
  else {
    uint64_t v28 = (void **)v135[0];
  }
  if (v28)
  {
    if ((SBYTE7(v136) & 0x80u) == 0) {
      CFIndex v29 = BYTE7(v136);
    }
    else {
      CFIndex v29 = (CFIndex)v135[1];
    }
    CFStringRef v30 = CFStringCreateWithBytes(0, (const UInt8 *)v28, v29, 0x8000100u, 0);
    if (!v30)
    {
      CFArrayRef v105 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v105, "Could not construct");
      __cxa_throw(v105, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v121, *((CFDictionaryRef *)this + 6), v30);
    CFRelease(v30);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v121, *((CFDictionaryRef *)this + 6), 0);
  }
  if (SBYTE7(v136) < 0) {
    operator delete(v135[0]);
  }
  if (BYTE8(v121))
  {
    AMCP::make_thing_from_description((AMCP *)v135, (CFTypeRef *)&v121);
    AMCP::swap((AMCP::Thing *)v135, (AMCP::Thing *)v125, v32);
    if (v137) {
      v137(0, (uint64_t)v135, 0, 0);
    }
  }
  else if ((_BYTE)v130)
  {
    AMCP::Thing::operator=((AMCP::Thing *)v125, (uint64_t)__p, v31);
  }
  if (*(void *)&v126[16])
  {
    LODWORD(v139) = 1952805485;
    *(void *)((char *)&v139 + 4) = *(void *)((char *)&v132 + 4);
    AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>((uint64_t *)v135, (uint64_t)&v139, (uint64_t)v125);
  }
  else
  {
    v135[0] = 0;
    v135[1] = 0;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v121);
  if (*(void *)&v126[16]) {
    (*(void (**)(void, void **, void, void))&v126[16])(0, v125, 0, 0);
  }
  if (v135[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)v135[0] + 10, v135);
  }
  if (v135[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v135[1]);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  if (v147) {
    ((void (*)(void, long long *, void, void))v147)(0, &v145, 0, 0);
  }
  long long v132 = 0u;
  long long v133 = 0u;
  uint64_t v134 = AMCP::Implementation::In_Place_Storage<int>::dispatch;
  std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)v135, (uint64_t)&v132);
  strcpy((char *)v118, "ctlsbolg");
  BYTE1(v118[1]) = 0;
  WORD1(v118[1]) = 0;
  std::vector<unsigned int> v141 = 0;
  long long v139 = 0u;
  long long v140 = 0u;
  if (!*((void *)this + 6))
  {
    CFTypeRef v100 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v100, "Could not construct");
    __cxa_throw(v100, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string((std::string *)__p, (unsigned int *)v118, (int16x8_t)0);
  if (__p[23] >= 0) {
    int v33 = __p;
  }
  else {
    int v33 = *(const UInt8 **)__p;
  }
  if (v33)
  {
    if (__p[23] >= 0) {
      CFIndex v34 = __p[23];
    }
    else {
      CFIndex v34 = *(void *)&__p[8];
    }
    CFStringRef v35 = CFStringCreateWithBytes(0, v33, v34, 0x8000100u, 0);
    if (!v35)
    {
      unint64_t v106 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v106, "Could not construct");
      __cxa_throw(v106, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v120, *((CFDictionaryRef *)this + 6), v35);
    CFRelease(v35);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v120, *((CFDictionaryRef *)this + 6), 0);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (BYTE8(v120))
  {
    AMCP::make_thing_from_description((AMCP *)__p, (CFTypeRef *)&v120);
    AMCP::swap((AMCP::Thing *)__p, (AMCP::Thing *)&v139, v37);
    if (*(void *)&__p[32]) {
      (*(void (**)(void, unsigned char *, void, void))&__p[32])(0, __p, 0, 0);
    }
  }
  else if (v138)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v139, (uint64_t)v135, v36);
  }
  if (v141)
  {
    LODWORD(v115[0]) = 1936487523;
    int v114 = v118[1];
    *(CFTypeRef *)((char *)v115 + 4) = *(CFTypeRef *)((char *)v118 + 4);
    int v123 = 0;
    long long v121 = 0u;
    long long v122 = 0u;
    v141(1, &v139, &v121, 0);
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v119, v114, *(double *)v115);
    uint64_t v38 = v119;
    unint64_t v39 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    *(_OWORD *)unint64_t v125 = 0u;
    memset(v126, 0, sizeof(v126));
    if (v123) {
      v123(1, &v121, v125, 0);
    }
    *((void *)&v146 + 1) = 0;
    uint64_t v40 = (char *)operator new(0x30uLL);
    *(void *)uint64_t v40 = &unk_1F146EAF8;
    *(_OWORD *)(v40 + 8) = 0u;
    *(_OWORD *)(v40 + 24) = 0u;
    *((void *)v40 + 5) = 0;
    if (*(void *)&v126[16]) {
      (*(void (**)(uint64_t, void **, char *, void))&v126[16])(1, v125, v40 + 8, 0);
    }
    *((void *)&v146 + 1) = v40;
    memset(__p, 0, sizeof(__p));
    std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v145);
    *(void *)&__p[32] = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v38, v39, (AMCP *)__p);
    if (*(void *)&__p[32]) {
      (*(void (**)(void, unsigned char *, void, void))&__p[32])(0, __p, 0, 0);
    }
    std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](&v145);
    if (*(void *)&v126[16]) {
      (*(void (**)(void, void **, void, void))&v126[16])(0, v125, 0, 0);
    }
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)v125, v38);
    *(void *)&long long v127 = *(void *)(v38 + 40);
    DWORD2(v127) = *(_DWORD *)(v38 + 48);
    unint64_t v41 = AMCP::Implementation::get_type_marker<std::function<int ()(void)>>();
    CFIndex v42 = v125[0];
    unint64_t v43 = (unint64_t)v125[1];
    v125[0] = 0;
    v125[1] = 0;
    *(void *)std::string __p = v42;
    *(void *)&__p[8] = v43;
    *(_OWORD *)&__p[16] = *(_OWORD *)v126;
    *(_DWORD *)&__p[32] = *(_DWORD *)&v126[16];
    if (*(void *)&v126[8])
    {
      unint64_t v44 = *(void *)(*(void *)v126 + 8);
      if ((v43 & (v43 - 1)) != 0)
      {
        if (v44 >= v43) {
          v44 %= v43;
        }
      }
      else
      {
        v44 &= v43 - 1;
      }
      v42[v44] = &__p[16];
      *(_OWORD *)unint64_t v126 = 0uLL;
    }
    *(void *)&long long v130 = v127;
    DWORD2(v130) = DWORD2(v127);
    uint64_t v144 = 0;
    long long v45 = operator new(0x40uLL);
    *long long v45 = &unk_1F146EB78;
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v45 + 1), (uint64_t *)__p);
    v45[6] = v130;
    *((_DWORD *)v45 + 14) = DWORD2(v130);
    uint64_t v144 = v45;
    long long v145 = 0u;
    long long v146 = 0u;
    CFStringRef v147 = 0;
    std::__function::__value_func<int ()(void)>::__value_func[abi:ne180100]((uint64_t)&v145, (uint64_t)&v142);
    CFStringRef v147 = AMCP::Implementation::In_Place_Storage<std::function<int ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v38, v41, (AMCP *)&v145);
    if (v147) {
      ((void (*)(void, long long *, void, void))v147)(0, &v145, 0, 0);
    }
    std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](&v142);
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v125);
    if (v123) {
      v123(0, &v121, 0, 0);
    }
  }
  else
  {
    uint64_t v38 = 0;
    long long v119 = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v120);
  if (v141) {
    v141(0, &v139, 0, 0);
  }
  if (v38) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v38 + 40), &v119);
  }
  if (*((void *)&v119 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v119 + 1));
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v135);
  if (v134) {
    v134(0, (uint64_t)&v132, 0, 0);
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v116, *((void *)this + 3), *((std::__shared_weak_count **)this + 4));
  LOBYTE(v135[0]) = 0;
  char v138 = 0;
  uint64_t v47 = v116;
  uint64_t v46 = v117;
  if (v117) {
    atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  strcpy((char *)v115, "tamfbolg");
  BYTE1(v115[1]) = 0;
  WORD1(v115[1]) = 0;
  int v123 = 0;
  long long v121 = 0u;
  long long v122 = 0u;
  if (!*((void *)this + 6))
  {
    CFArrayRef v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v101, "Could not construct");
    __cxa_throw(v101, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string((std::string *)__p, (unsigned int *)v115, (int16x8_t)0);
  if (__p[23] >= 0) {
    uint64_t v48 = __p;
  }
  else {
    uint64_t v48 = *(const UInt8 **)__p;
  }
  if (v48)
  {
    if (__p[23] >= 0) {
      CFIndex v49 = __p[23];
    }
    else {
      CFIndex v49 = *(void *)&__p[8];
    }
    CFStringRef v50 = CFStringCreateWithBytes(0, v48, v49, 0x8000100u, 0);
    if (!v50)
    {
      long long v107 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v107, "Could not construct");
      __cxa_throw(v107, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v142, *((CFDictionaryRef *)this + 6), v50);
    CFRelease(v50);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v142, *((CFDictionaryRef *)this + 6), 0);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (v143)
  {
    AMCP::make_thing_from_description((AMCP *)__p, (CFTypeRef *)&v142);
    AMCP::swap((AMCP::Thing *)__p, (AMCP::Thing *)&v121, v52);
    if (*(void *)&__p[32]) {
      (*(void (**)(void, unsigned char *, void, void))&__p[32])(0, __p, 0, 0);
    }
  }
  else if (v138)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v121, (uint64_t)v135, v51);
  }
  if (v123)
  {
    uint64_t v111 = *(uint64_t *)((char *)v115 + 4);
    std::vector<unsigned int> v141 = 0;
    long long v139 = 0u;
    long long v140 = 0u;
    v123(1, &v121, (void **)&v139, 0);
    if (v46) {
      atomic_fetch_add_explicit(&v46->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(v119) = 1718444404;
    *(void *)((char *)&v119 + 4) = v111;
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v120, SHIDWORD(v111), *(double *)&v119);
    uint64_t v53 = v120;
    unint64_t v54 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    *(_OWORD *)unint64_t v125 = 0u;
    memset(v126, 0, sizeof(v126));
    if (v141) {
      v141(2, &v139, (long long *)v125, 0);
    }
    *((void *)&v146 + 1) = 0;
    uint64_t v55 = (char *)operator new(0x30uLL);
    *(void *)uint64_t v55 = &unk_1F146EBF8;
    *(_OWORD *)(v55 + 8) = 0u;
    *(_OWORD *)(v55 + 24) = 0u;
    *((void *)v55 + 5) = 0;
    if (*(void *)&v126[16]) {
      (*(void (**)(uint64_t, void **, char *, void))&v126[16])(2, v125, v55 + 8, 0);
    }
    *((void *)&v146 + 1) = v55;
    memset(__p, 0, sizeof(__p));
    std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v145);
    *(void *)&__p[32] = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v53, v54, (AMCP *)__p);
    if (*(void *)&__p[32]) {
      (*(void (**)(void, unsigned char *, void, void))&__p[32])(0, __p, 0, 0);
    }
    std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](&v145);
    if (*(void *)&v126[16]) {
      (*(void (**)(void, void **, void, void))&v126[16])(0, v125, 0, 0);
    }
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)v125, v53);
    *(void *)&long long v127 = *(void *)(v53 + 40);
    DWORD2(v127) = *(_DWORD *)(v53 + 48);
    unint64_t v56 = AMCP::Implementation::get_type_marker<std::function<CA::StreamDescription ()(void)>>();
    int v57 = v125[0];
    unint64_t v58 = (unint64_t)v125[1];
    v125[0] = 0;
    v125[1] = 0;
    *(void *)std::string __p = v57;
    *(void *)&__p[8] = v58;
    *(_OWORD *)&__p[16] = *(_OWORD *)v126;
    *(_DWORD *)&__p[32] = *(_DWORD *)&v126[16];
    if (*(void *)&v126[8])
    {
      unint64_t v59 = *(void *)(*(void *)v126 + 8);
      if ((v58 & (v58 - 1)) != 0)
      {
        if (v59 >= v58) {
          v59 %= v58;
        }
      }
      else
      {
        v59 &= v58 - 1;
      }
      v57[v59] = &__p[16];
      *(_OWORD *)unint64_t v126 = 0uLL;
    }
    *(void *)&long long v130 = v127;
    DWORD2(v130) = DWORD2(v127);
    *((void *)&v133 + 1) = 0;
    uint64_t v60 = operator new(0x40uLL);
    *uint64_t v60 = &unk_1F146EC78;
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v60 + 1), (uint64_t *)__p);
    v60[6] = v130;
    *((_DWORD *)v60 + 14) = DWORD2(v130);
    *((void *)&v133 + 1) = v60;
    long long v145 = 0u;
    long long v146 = 0u;
    CFStringRef v147 = 0;
    std::__function::__value_func<CA::StreamDescription ()(void)>::__value_func[abi:ne180100]((uint64_t)&v145, (uint64_t)&v132);
    CFStringRef v147 = AMCP::Implementation::In_Place_Storage<std::function<CA::StreamDescription ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v53, v56, (AMCP *)&v145);
    if (v147) {
      ((void (*)(void, long long *, void, void))v147)(0, &v145, 0, 0);
    }
    std::__function::__value_func<CA::StreamDescription ()(void)>::~__value_func[abi:ne180100](&v132);
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v125);
    unint64_t v61 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    *(void *)&v126[8] = 0;
    uint64_t v62 = operator new(0x28uLL);
    void *v62 = &unk_1F146ECF8;
    v62[1] = v47;
    v62[2] = v46;
    v62[3] = 0x676C6F62666D6174;
    *((_DWORD *)v62 + 8) = HIDWORD(v111);
    *(void *)&v126[8] = v62;
    memset(__p, 0, sizeof(__p));
    std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)v125);
    *(void *)&__p[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v53, v61, (AMCP *)__p);
    if (*(void *)&__p[32]) {
      (*(void (**)(void, unsigned char *, void, void))&__p[32])(0, __p, 0, 0);
    }
    std::__function::__value_func<void ()(AMCP::Thing const&)>::~__value_func[abi:ne180100](v125);
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)v125, v53);
    *(void *)&long long v127 = *(void *)(v53 + 40);
    DWORD2(v127) = *(_DWORD *)(v53 + 48);
    unint64_t v63 = AMCP::Implementation::get_type_marker<std::function<void ()(CA::StreamDescription const&)>>();
    unint64_t v64 = v125[0];
    unint64_t v65 = (unint64_t)v125[1];
    v125[0] = 0;
    v125[1] = 0;
    *(void *)std::string __p = v64;
    *(void *)&__p[8] = v65;
    *(_OWORD *)&__p[16] = *(_OWORD *)v126;
    *(_DWORD *)&__p[32] = *(_DWORD *)&v126[16];
    if (*(void *)&v126[8])
    {
      unint64_t v66 = *(void *)(*(void *)v126 + 8);
      if ((v65 & (v65 - 1)) != 0)
      {
        if (v66 >= v65) {
          v66 %= v65;
        }
      }
      else
      {
        v66 &= v65 - 1;
      }
      v64[v66] = &__p[16];
      *(_OWORD *)unint64_t v126 = 0uLL;
    }
    *(void *)&long long v130 = v127;
    DWORD2(v130) = DWORD2(v127);
    *((void *)&v133 + 1) = 0;
    uint64_t v67 = operator new(0x40uLL);
    *uint64_t v67 = &unk_1F146ED78;
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v67 + 1), (uint64_t *)__p);
    v67[6] = v130;
    *((_DWORD *)v67 + 14) = DWORD2(v130);
    *((void *)&v133 + 1) = v67;
    long long v145 = 0u;
    long long v146 = 0u;
    CFStringRef v147 = 0;
    std::__function::__value_func<void ()(CA::StreamDescription const&)>::__value_func[abi:ne180100]((uint64_t)&v145, (uint64_t)&v132);
    CFStringRef v147 = AMCP::Implementation::In_Place_Storage<std::function<void ()(CA::StreamDescription const&)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v53, v63, (AMCP *)&v145);
    if (v147) {
      ((void (*)(void, long long *, void, void))v147)(0, &v145, 0, 0);
    }
    std::__function::__value_func<void ()(CA::StreamDescription const&)>::~__value_func[abi:ne180100](&v132);
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v125);
    if (v141) {
      v141(0, &v139, 0, 0);
    }
  }
  else
  {
    uint64_t v53 = 0;
    long long v120 = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v142);
  if (v123) {
    v123(0, &v121, 0, 0);
  }
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v53) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v53 + 40), &v120);
  }
  if (*((void *)&v120 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v120 + 1));
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v135);
  if (v117) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v117);
  }
  long long v120 = 0uLL;
  if (!*((void *)this + 6)) {
    goto LABEL_321;
  }
  v125[0] = (void *)0x676C6F62666D7423;
  LODWORD(v125[1]) = 0;
  AMCP::Address::to_string((std::string *)__p, (unsigned int *)v125, v68);
  if (__p[23] >= 0) {
    uint64_t v69 = __p;
  }
  else {
    uint64_t v69 = *(const UInt8 **)__p;
  }
  if (v69)
  {
    if (__p[23] >= 0) {
      CFIndex v70 = __p[23];
    }
    else {
      CFIndex v70 = *(void *)&__p[8];
    }
    CFStringRef v71 = CFStringCreateWithBytes(0, v69, v70, 0x8000100u, 0);
    if (!v71)
    {
      uint64_t v108 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v108, "Could not construct");
      __cxa_throw(v108, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v119, *((CFDictionaryRef *)this + 6), v71);
    CFRelease(v71);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v119, *((CFDictionaryRef *)this + 6), 0);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (BYTE8(v119))
  {
    AMCP::make_thing_from_description((AMCP *)&v121, (CFTypeRef *)&v119);
    CFStringRef v147 = 0;
    long long v145 = 0u;
    long long v146 = 0u;
    if (v123) {
      v123(1, &v121, (void **)&v145, 0);
    }
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v132, 0, 1.58366008e190);
    uint64_t v73 = v132;
    unint64_t v74 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    *(_OWORD *)unint64_t v125 = 0u;
    memset(v126, 0, sizeof(v126));
    if (v147) {
      ((void (*)(uint64_t, long long *, void **, void))v147)(1, &v145, v125, 0);
    }
    *((void *)&v136 + 1) = 0;
    char v75 = (char *)operator new(0x30uLL);
    *(void *)char v75 = &unk_1F146EDF8;
    *(_OWORD *)(v75 + 8) = 0u;
    *(_OWORD *)(v75 + 24) = 0u;
    *((void *)v75 + 5) = 0;
    if (*(void *)&v126[16]) {
      (*(void (**)(uint64_t, void **, char *, void))&v126[16])(1, v125, v75 + 8, 0);
    }
    *((void *)&v136 + 1) = v75;
    memset(__p, 0, sizeof(__p));
    std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)v135);
    *(void *)&__p[32] = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v73, v74, (AMCP *)__p);
    if (*(void *)&__p[32]) {
      (*(void (**)(void, unsigned char *, void, void))&__p[32])(0, __p, 0, 0);
    }
    std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v135);
    if (*(void *)&v126[16]) {
      (*(void (**)(void, void **, void, void))&v126[16])(0, v125, 0, 0);
    }
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)v125, v73);
    *(void *)&long long v127 = *(void *)(v73 + 40);
    DWORD2(v127) = *(_DWORD *)(v73 + 48);
    unint64_t v76 = AMCP::Implementation::get_type_marker<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>();
    long long v77 = v125[0];
    unint64_t v78 = (unint64_t)v125[1];
    v125[0] = 0;
    v125[1] = 0;
    *(void *)std::string __p = v77;
    *(void *)&__p[8] = v78;
    *(_OWORD *)&__p[16] = *(_OWORD *)v126;
    *(_DWORD *)&__p[32] = *(_DWORD *)&v126[16];
    if (*(void *)&v126[8])
    {
      unint64_t v79 = *(void *)(*(void *)v126 + 8);
      if ((v78 & (v78 - 1)) != 0)
      {
        if (v79 >= v78) {
          v79 %= v78;
        }
      }
      else
      {
        v79 &= v78 - 1;
      }
      v77[v79] = &__p[16];
      *(_OWORD *)unint64_t v126 = 0uLL;
    }
    *(void *)&long long v130 = v127;
    DWORD2(v130) = DWORD2(v127);
    *((void *)&v140 + 1) = 0;
    long long v83 = operator new(0x40uLL);
    void *v83 = &unk_1F146EE78;
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v83 + 1), (uint64_t *)__p);
    void v83[6] = v130;
    *((_DWORD *)v83 + 14) = DWORD2(v130);
    *((void *)&v140 + 1) = v83;
    *(_OWORD *)CFStringRef v135 = 0u;
    long long v136 = 0u;
    mach_port_t v137 = 0;
    std::__function::__value_func<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::__value_func[abi:ne180100]((uint64_t)v135, (uint64_t)&v139);
    mach_port_t v137 = AMCP::Implementation::In_Place_Storage<std::function<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v73, v76, (AMCP *)v135);
    if (v137) {
      v137(0, (uint64_t)v135, 0, 0);
    }
    std::__function::__value_func<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::~__value_func[abi:ne180100](&v139);
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
    CFStringRef v84 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v125);
    if (v147) {
      CFStringRef v84 = (AMCP::Log::Scope_Registry *)((uint64_t (*)(void, long long *, void, void))v147)(0, &v145, 0, 0);
    }
    long long v112 = v132;
    long long v120 = v132;
    if (v123) {
      CFStringRef v84 = (AMCP::Log::Scope_Registry *)((uint64_t (*)(void, long long *, void, void))v123)(0, &v121, 0, 0);
    }
    goto LABEL_298;
  }
  if (!*((void *)this + 6))
  {
LABEL_321:
    uint64_t v109 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v109, "Could not construct");
    __cxa_throw(v109, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v125[0] = (void *)0x676C6F62666D6174;
  LODWORD(v125[1]) = 0;
  AMCP::Address::to_string((std::string *)__p, (unsigned int *)v125, v72);
  if (__p[23] >= 0) {
    uint64_t v80 = __p;
  }
  else {
    uint64_t v80 = *(const UInt8 **)__p;
  }
  if (v80)
  {
    if (__p[23] >= 0) {
      CFIndex v81 = __p[23];
    }
    else {
      CFIndex v81 = *(void *)&__p[8];
    }
    CFStringRef v82 = CFStringCreateWithBytes(0, v80, v81, 0x8000100u, 0);
    if (!v82)
    {
      unsigned int v110 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v110, "Could not construct");
      __cxa_throw(v110, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)v115, *((CFDictionaryRef *)this + 6), v82);
    CFRelease(v82);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)v115, *((CFDictionaryRef *)this + 6), 0);
  }
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (LOBYTE(v115[1]))
  {
    AMCP::make_thing_from_description((AMCP *)v135, v115);
    AMCP::Thing::convert_to<CA::StreamDescription>((uint64_t)&v145, (uint64_t)v135);
    long long v139 = 0uLL;
    *(void *)&long long v140 = 0;
    *(void *)std::string __p = v145;
    *(void *)&__p[8] = v145;
    CA::ValueRangeList::AddRange((double **)&v139, (double *)__p);
    memset(__p, 0, 24);
    long long v85 = (void *)v139;
    std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(__p, (const void *)v139, *((uint64_t *)&v139 + 1), (uint64_t)(*((void *)&v139 + 1) - v139) >> 4);
    *(_OWORD *)&__p[24] = v145;
    long long v130 = v146;
    uint64_t v131 = v147;
    v125[0] = 0;
    v125[1] = 0;
    *(void *)unint64_t v126 = 0;
    long long v86 = *(void **)__p;
    std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(v125, *(const void **)__p, *(uint64_t *)&__p[8], (uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 4);
    *(_OWORD *)&v126[8] = v145;
    long long v127 = v146;
    uint64_t v128 = v147;
    *(void *)&long long v133 = 0;
    long long v132 = 0uLL;
    unsigned int v142 = &v132;
    char v143 = 0;
    int v87 = (char *)operator new(0x40uLL);
    *(void *)&long long v132 = v87;
    *((void *)&v132 + 1) = v87;
    *(void *)&long long v133 = v87 + 64;
    v118[0] = v87;
    uint64_t v124 = v87;
    *(void *)&long long v121 = &v133;
    *((void *)&v121 + 1) = &v124;
    *(void *)&long long v122 = v118;
    BYTE8(v122) = 0;
    *((void *)v87 + 1) = 0;
    *((void *)v87 + 2) = 0;
    char v88 = v125[0];
    int v89 = v125[1];
    unint64_t v90 = ((char *)v125[1] - (char *)v125[0]) >> 4;
    *(void *)int v87 = 0;
    std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(v87, v88, (uint64_t)v89, v90);
    long long v91 = v127;
    *(_OWORD *)(v87 + 24) = *(_OWORD *)&v126[8];
    *(_OWORD *)(v87 + 40) = v91;
    *((void *)v87 + 7) = v128;
    v118[0] += 64;
    uint64_t v92 = v118[0];
    BYTE8(v122) = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<CA::ValueRangeList,CA::StreamDescription>>,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v121);
    *((void *)&v132 + 1) = v92;
    if (v125[0])
    {
      v125[1] = v125[0];
      operator delete(v125[0]);
      uint64_t v92 = *((void *)&v132 + 1);
    }
    *(void *)&long long v121 = 0x676C6F62666D7423;
    DWORD2(v121) = 0;
    AMCP::Core::Operation_Utilities::make_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>((uint64_t *)v125, (uint64_t)&v121, v132, v92);
    long long v112 = *(_OWORD *)v125;
    long long v120 = *(_OWORD *)v125;
    v125[0] = &v132;
    std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)v125);
    if (v86) {
      operator delete(v86);
    }
    if (v85) {
      operator delete(v85);
    }
    if (v137) {
      v137(0, (uint64_t)v135, 0, 0);
    }
  }
  else
  {
    long long v112 = 0u;
  }
  CFStringRef v84 = (AMCP::Log::Scope_Registry *)std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v115);
LABEL_298:
  if (!(void)v112)
  {
    AMCP::Log::Scope_Registry::get(v84);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    uint64_t v93 = **(NSObject ***)__p;
    if (*(void *)&__p[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
    }
    if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
    {
      CFTypeRef v94 = pthread_self();
      mach_port_t v95 = pthread_mach_thread_np(v94);
      *(_DWORD *)std::string __p = 67109890;
      *(_DWORD *)&__p[4] = v95;
      *(_WORD *)&__p[8] = 2080;
      *(void *)&__p[10] = "Null_Object.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 1385;
      *(_WORD *)&__p[24] = 2080;
      *(void *)&__p[26] = "available_formats_operation.operator BOOL() == true";
      _os_log_error_impl(&dword_1BAA78000, v93, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s no available formats", __p, 0x22u);
    }
    abort();
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v112 + 40), &v120);
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v119);
  if (*((void *)&v112 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v112 + 1));
  }
}

void sub_1BAD370A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  uint64_t v2 = *(void (**)(void, uint64_t, void, void))(a1 + 32);
  if (v2) {
    v2(0, a1, 0, 0);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterINSt3__16vectorINS3_5tupleIJN2CA14ValueRangeListENS6_17StreamDescriptionEEEENS3_9allocatorIS9_EEEEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v4, (void *)(a1 + 8));
  uint64_t result = AMCP::Thing::convert_to<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(a2, (uint64_t)v4);
  if (v5) {
    return v5(0, v4, 0, 0);
  }
  return result;
}

void sub_1BAD37418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(void, char *, void, void))
{
  if (a14) {
    a14(0, &a10, 0, 0);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146EE78;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F146EE78;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAD37554(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146EE78;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146EE78;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyINSt3__16vectorINS3_5tupleIJN2CA14ValueRangeListENS6_17StreamDescriptionEEEENS3_9allocatorIS9_EEEEEENS3_10shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2, 0);
  }
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void (*)(void, void *, void, void))__p[5];
  if (v2) {
    v2(0, __p + 1, 0, 0);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void, uint64_t, void, void))(result + 40);
  if (v1) {
    return v1(0, result + 8, 0, 0);
  }
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F146EDF8;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2 + 8, 0);
  }
  return result;
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F146EDF8;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = 0;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, char *, void))(a1 + 40);
  if (v3) {
    v3(1, a1 + 8, v2 + 8, 0);
  }
  return v2;
}

void sub_1BAD377D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146EDF8;
  uint64_t v1 = (void (*)(void, void *, void, void))a1[5];
  if (v1) {
    v1(0, a1 + 1, 0, 0);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146EDF8;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[5];
  if (v2) {
    v2(0, a1 + 1, 0, 0);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_setterIN2CA17StreamDescriptionEEEvRNS0_9OperationEEUlRKS4_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::operator()()
{
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  uint64_t v3 = AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
  operator new();
}

void sub_1BAD379A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(void, char *, void, void))
{
  if (a14) {
    a14(0, &a10, 0, 0);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146ED78;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F146ED78;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAD37AE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146ED78;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(CA::StreamDescription const&)#1}>,void ()(CA::StreamDescription const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146ED78;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1718444404EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlRKSI_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(unsigned int **)(a1 + 16);
  if (!v3
    || (uint64_t v3 = (unsigned int *)std::__shared_weak_count::lock((std::__shared_weak_count *)v3),
        (int v5 = (std::__shared_weak_count *)v3) == 0)
    || (uint64_t v3 = *(unsigned int **)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    CFStringRef v7 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      double v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)CFIndex v29 = 2080;
      *(void *)&v29[2] = "Null_Object.cpp";
      __int16 v30 = 1024;
      int v31 = 59;
      __int16 v32 = 2080;
      *(void *)int v33 = "object_ptr.operator BOOL() == false";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no model object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v20, "no model object");
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v33[6] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    CFIndex v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    int v35 = 59;
    std::vector<void *>::vector(&v15);
    int v10 = backtrace((void **)v15, (*((void *)&v15 + 1) - (void)v15) >> 3);
    std::vector<void *>::resize((char **)&v15, v10);
    int v17 = &unk_1F148AA90;
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  CFIndex v6 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(unsigned int *, void, uint64_t, uint64_t))(*(void *)v3 + 40))(v3, v3[22], a1 + 24, a2);
  if (!(_BYTE)v6)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)CFIndex v29 = 2080;
      *(void *)&v29[2] = "Null_Object.cpp";
      __int16 v30 = 1024;
      int v31 = 61;
      __int16 v32 = 2080;
      *(void *)int v33 = "was_handled == Object::Was_Handled::no";
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not handled", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v20, "not handled");
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v33[6] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    CFIndex v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    int v35 = 61;
    std::vector<void *>::vector(&v15);
    int v14 = backtrace((void **)v15, (*((void *)&v15 + 1) - (void)v15) >> 3);
    std::vector<void *>::resize((char **)&v15, v14);
    int v17 = &unk_1F148AA90;
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1BAD38274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,uint64_t a29)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F146ECF8;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  double result = *(double *)(a1 + 24);
  *(double *)(a2 + 24) = result;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (double *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F146ECF8;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  double result = *(double *)(a1 + 24);
  v2[3] = result;
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146ECF8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146ECF8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterIN2CA17StreamDescriptionEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v4, (void *)(a1 + 8));
  uint64_t result = AMCP::Thing::convert_to<CA::StreamDescription>(a2, (uint64_t)v4);
  if (v5) {
    return v5(0, v4, 0, 0);
  }
  return result;
}

void sub_1BAD386B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(void, char *, void, void))
{
  if (a14) {
    a14(0, &a10, 0, 0);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146EC78;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F146EC78;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAD387F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146EC78;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::StreamDescription>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::StreamDescription ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146EC78;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1718444404EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2, 0);
  }
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void (*)(void, void *, void, void))__p[5];
  if (v2) {
    v2(0, __p + 1, 0, 0);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void, uint64_t, void, void))(result + 40);
  if (v1) {
    return v1(0, result + 8, 0, 0);
  }
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F146EBF8;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2 + 8, 0);
  }
  return result;
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F146EBF8;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = 0;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, char *, void))(a1 + 40);
  if (v3) {
    v3(1, a1 + 8, v2 + 8, 0);
  }
  return v2;
}

void sub_1BAD38A70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146EBF8;
  uint64_t v1 = (void (*)(void, void *, void, void))a1[5];
  if (v1) {
    v1(0, a1 + 1, 0, 0);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1718444404u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146EBF8;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[5];
  if (v2) {
    v2(0, a1 + 1, 0, 0);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  uint64_t v2 = *(void (**)(void, uint64_t, void, void))(a1 + 32);
  if (v2) {
    v2(0, a1, 0, 0);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,int ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterIiEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,int ()(void)>::operator()(uint64_t a1)
{
  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v3, (void *)(a1 + 8));
  uint64_t v1 = AMCP::Thing::convert_to<int>((uint64_t)v3);
  if (v4) {
    v4(0, v3, 0, 0);
  }
  return v1;
}

void sub_1BAD38C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(void, char *, void, void))
{
  if (a14) {
    a14(0, &a10, 0, 0);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,int ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,int ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,int ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146EB78;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,int ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F146EB78;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAD38D8C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,int ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146EB78;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,int ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146EB78;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyIiEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2, 0);
  }
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void (*)(void, void *, void, void))__p[5];
  if (v2) {
    v2(0, __p + 1, 0, 0);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void, uint64_t, void, void))(result + 40);
  if (v1) {
    return v1(0, result + 8, 0, 0);
  }
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F146EAF8;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2 + 8, 0);
  }
  return result;
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F146EAF8;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = 0;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, char *, void))(a1 + 40);
  if (v3) {
    v3(1, a1 + 8, v2 + 8, 0);
  }
  return v2;
}

void sub_1BAD39008(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146EAF8;
  uint64_t v1 = (void (*)(void, void *, void, void))a1[5];
  if (v1) {
    v1(0, a1 + 1, 0, 0);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<int>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146EAF8;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[5];
  if (v2) {
    v2(0, a1 + 1, 0, 0);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  uint64_t v2 = *(void (**)(void, uint64_t, void, void))(a1 + 32);
  if (v2) {
    v2(0, a1, 0, 0);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Direction ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Direction ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterINS_9DirectionEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Direction ()(void)>::operator()(uint64_t a1)
{
  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v3, (void *)(a1 + 8));
  uint64_t v1 = AMCP::Thing::convert_to<AMCP::Direction>((uint64_t)v3);
  if (v4) {
    v4(0, v3, 0, 0);
  }
  return v1;
}

void sub_1BAD391E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(void, char *, void, void))
{
  if (a14) {
    a14(0, &a10, 0, 0);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Direction ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Direction ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Direction ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146EA78;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Direction ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F146EA78;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAD39324(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Direction ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146EA78;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<AMCP::Direction>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Direction ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146EA78;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyINS_9DirectionEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2, 0);
  }
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void (*)(void, void *, void, void))__p[5];
  if (v2) {
    v2(0, __p + 1, 0, 0);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void, uint64_t, void, void))(result + 40);
  if (v1) {
    return v1(0, result + 8, 0, 0);
  }
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F146E9F8;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2 + 8, 0);
  }
  return result;
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F146E9F8;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = 0;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, char *, void))(a1 + 40);
  if (v3) {
    v3(1, a1 + 8, v2 + 8, 0);
  }
  return v2;
}

void sub_1BAD395A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146E9F8;
  uint64_t v1 = (void (*)(void, void *, void, void))a1[5];
  if (v1) {
    v1(0, a1 + 1, 0, 0);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146E9F8;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[5];
  if (v2) {
    v2(0, a1 + 1, 0, 0);
  }
  return a1;
}

void AMCP::Null::Stream::~Stream(std::__shared_mutex_base *this)
{
  AMCP::Null::Object::~Object(this);

  JUMPOUT(0x1C1859840);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Stream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::Null::Stream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FDA8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Null::Stream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FDA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *AMCP::Null::Control::Control(void *a1, uint64_t a2, uint64_t a3, int a4, void *a5, CFTypeRef *a6)
{
  v10.i64[0] = a2;
  v10.i64[1] = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  CFStringRef v7 = (std::__shared_weak_count *)a5[1];
  v9[0] = *a5;
  v9[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::Null::Object::Object((uint64_t)a1, &v10, a4, v9, a6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v10.i64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10.i64[1]);
  }
  *a1 = &unk_1F146D5B8;
  return a1;
}

void sub_1BAD39814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Null::Control::populate_core@<X0>(CFDictionaryRef *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  AMCP::Null::Object::populate_core((AMCP::Null::Object *)this, a2, a3);
  v25[0] = 0;
  char v26 = 0;
  strcpy((char *)v27, "pcscbolg");
  BYTE1(v27[2]) = 0;
  HIWORD(v27[2]) = 0;
  CFIndex v34 = 0;
  long long v33 = 0u;
  long long v32 = 0u;
  if (!this[6])
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&__p, v27, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (p_p)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v7 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
    if (!v7)
    {
      uint64_t v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v22, "Could not construct");
      __cxa_throw(v22, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v30, this[6], v7);
    CFRelease(v7);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v30, this[6], 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v31)
  {
    AMCP::make_thing_from_description((AMCP *)&__p, &v30);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v32, v8);
    if (v29) {
      v29(0, &__p, 0, 0);
    }
  }
  if (v34)
  {
    int v35 = 1668506480;
    uint64_t v36 = *(void *)&v27[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>((uint64_t *)&__p, (uint64_t)&v35, (uint64_t)&v32);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v30);
  if (v34) {
    v34(0, &v32, 0, 0);
  }
  if (__p.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v25);
  v25[0] = 0;
  char v26 = 0;
  strcpy((char *)v27, "mlecbolg");
  BYTE1(v27[2]) = 0;
  HIWORD(v27[2]) = 0;
  CFIndex v34 = 0;
  long long v33 = 0u;
  long long v32 = 0u;
  if (!this[6])
  {
    std::runtime_error v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v20, "Could not construct");
    __cxa_throw(v20, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&__p, v27, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    mach_port_t v9 = &__p;
  }
  else {
    mach_port_t v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v9)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v10 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v11 = CFStringCreateWithBytes(0, (const UInt8 *)v9, v10, 0x8000100u, 0);
    if (!v11)
    {
      uint64_t v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v23, "Could not construct");
      __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v30, this[6], v11);
    CFRelease(v11);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v30, this[6], 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v31)
  {
    AMCP::make_thing_from_description((AMCP *)&__p, &v30);
    AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v32, v13);
    if (v29) {
      v29(0, &__p, 0, 0);
    }
  }
  else if (v26)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v32, (uint64_t)v25, v12);
  }
  if (v34)
  {
    int v35 = 1667591277;
    uint64_t v36 = *(void *)&v27[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>((uint64_t *)&__p, (uint64_t)&v35, (uint64_t)&v32);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v30);
  if (v34) {
    v34(0, &v32, 0, 0);
  }
  if (__p.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v25);
  v25[0] = 0;
  char v26 = 0;
  strcpy((char *)v27, "odrcbolg");
  BYTE1(v27[2]) = 0;
  HIWORD(v27[2]) = 0;
  CFIndex v34 = 0;
  long long v33 = 0u;
  long long v32 = 0u;
  if (!this[6])
  {
    std::runtime_error v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v21, "Could not construct");
    __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&__p, v27, (int16x8_t)0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v14 = &__p;
  }
  else {
    int v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v14)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v15 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v16 = CFStringCreateWithBytes(0, (const UInt8 *)v14, v15, 0x8000100u, 0);
    if (!v16)
    {
      uint64_t v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v24, "Could not construct");
      __cxa_throw(v24, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v30, this[6], v16);
    CFRelease(v16);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v30, this[6], 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!v31) {
    goto LABEL_71;
  }
  AMCP::make_thing_from_description((AMCP *)&__p, &v30);
  AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v32, v17);
  if (v29) {
    v29(0, &__p, 0, 0);
  }
  if (v34)
  {
    int v35 = 1668441199;
    uint64_t v36 = *(void *)&v27[1];
    AMCP::Core::Operation_Utilities::make_generic_constant_property<BOOL>((uint64_t *)&__p, (uint64_t)&v35, (uint64_t)&v32);
  }
  else
  {
LABEL_71:
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v30);
  if (v34) {
    v34(0, &v32, 0, 0);
  }
  if (__p.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  return std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v25);
}

void sub_1BAD39E8C(void *a1)
{
}

void AMCP::Null::Control::~Control(std::__shared_mutex_base *this)
{
  AMCP::Null::Object::~Object(this);

  JUMPOUT(0x1C1859840);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Control>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::Null::Control>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FD58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Null::Control>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FD58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMCP::Null::Device::do_set_property(AMCP::Null::Device *this, unsigned int a2, const AMCP::Address *a3, const AMCP::Thing *a4)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  double v8 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v8)
  {
    mach_port_t v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      uint64_t v10 = *((void *)this + 7);
      if (v10)
      {
        CFStringRef v11 = (unsigned int *)(v10 + 88);
        goto LABEL_7;
      }
    }
  }
  else
  {
    mach_port_t v9 = 0;
  }
  uint64_t v10 = 0;
  CFStringRef v11 = (unsigned int *)((char *)this + 40);
LABEL_7:
  unsigned int v12 = *v11;
  int v13 = *(_DWORD *)a3;
  if (*(_DWORD *)a3 == 1718444404)
  {
    std::runtime_error v21 = operator new(0x20uLL);
    v21[1] = 0;
    void v21[2] = 0;
    *((unsigned char *)v21 + 24) = 0;
    *std::runtime_error v21 = &unk_1F1488C30;
    __int16 v52 = (char *)(v21 + 3);
    uint64_t v53 = v21;
    int v54 = 0;
    int v55 = 0;
    uint64_t v22 = *(void *)(*((void *)this + 1) + 32);
    unsigned int v23 = *((_DWORD *)this + 22);
    uint64_t v24 = (std::__shared_weak_count *)*((void *)this + 4);
    v41[0] = *((std::__shared_weak_count **)this + 3);
    v41[1] = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)&long long v42 = v10;
    *((void *)&v42 + 1) = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v43 = a2;
    memset(v44, 0, sizeof(v44));
    long long v45 = 0;
    uint64_t v25 = (void (*)(uint64_t, const AMCP::Thing *, unsigned char *, void))*((void *)a4 + 4);
    if (v25) {
      v25(1, a4, v44, 0);
    }
    int v57 = 0;
    char v26 = (char *)operator new(0x58uLL);
    long long v27 = v42;
    *(_OWORD *)(v26 + 8) = *(_OWORD *)v41;
    *(void *)char v26 = &unk_1F146E8F8;
    v41[0] = 0;
    v41[1] = 0;
    *(_OWORD *)(v26 + 24) = v27;
    long long v42 = 0uLL;
    *((_DWORD *)v26 + 10) = v43;
    *((_OWORD *)v26 + 3) = 0u;
    *((_OWORD *)v26 + 4) = 0u;
    *((void *)v26 + 10) = 0;
    if (v45) {
      v45(2, v44, v26 + 48, 0);
    }
    int v57 = v26;
    AMCP::Core::Conductor::enqueue_config_change(v22, v12, v23, 1, (uint64_t)v56);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v56);
    if (v45) {
      v45(0, v44, 0, 0);
    }
    if (*((void *)&v42 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v42 + 1));
    }
    std::runtime_error v20 = v41[1];
    if (v41[1]) {
      goto LABEL_38;
    }
    goto LABEL_39;
  }
  if (v13 == 1852597868)
  {
    if (*((_DWORD *)this + 22) != a2) {
      goto LABEL_53;
    }
    CFIndex v29 = operator new(0x20uLL);
    v29[1] = 0;
    v29[2] = 0;
    void *v29 = &unk_1F1488C30;
    *((unsigned char *)v29 + 24) = 0;
    __int16 v52 = (char *)(v29 + 3);
    uint64_t v53 = v29;
    int v54 = 0;
    int v55 = 0;
    uint64_t v30 = *(void *)(*((void *)this + 1) + 32);
    uint64_t v31 = *((void *)this + 4);
    *(void *)&long long v35 = *((void *)this + 3);
    *((void *)&v35 + 1) = v31;
    if (v31) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 16), 1uLL, memory_order_relaxed);
    }
    *(void *)&long long v36 = v10;
    *((void *)&v36 + 1) = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v37 = *(void *)a3;
    int v38 = *((_DWORD *)a3 + 2);
    memset(v39, 0, sizeof(v39));
    uint64_t v40 = 0;
    long long v32 = (void (*)(uint64_t, const AMCP::Thing *, _OWORD *, void))*((void *)a4 + 4);
    if (v32) {
      v32(1, a4, v39, 0);
    }
    int v57 = 0;
    long long v33 = (char *)operator new(0x60uLL);
    *(_OWORD *)(v33 + 8) = v35;
    *(void *)long long v33 = &unk_1F146E978;
    *(_OWORD *)(v33 + 24) = v36;
    *((void *)v33 + 5) = v37;
    *((_DWORD *)v33 + 12) = v38;
    *(_OWORD *)(v33 + 56) = 0u;
    *(_OWORD *)(v33 + 72) = 0u;
    *((void *)v33 + 11) = 0;
    if (v40) {
      v40(2, v39, v33 + 56, 0);
    }
    int v57 = v33;
    AMCP::Core::Conductor::enqueue_config_change(v30, v12, a2, 1, (uint64_t)v56);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v56);
    if (v40) {
      v40(0, v39, 0, 0);
    }
LABEL_39:
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v52);
    uint64_t v28 = 257;
    if (!v9) {
      return v28;
    }
    goto LABEL_54;
  }
  if (v13 == 1853059700 && *((_DWORD *)this + 22) == a2)
  {
    int v14 = operator new(0x20uLL);
    v14[1] = 0;
    _OWORD v14[2] = 0;
    *int v14 = &unk_1F1488C30;
    *((unsigned char *)v14 + 24) = 0;
    __int16 v52 = (char *)(v14 + 3);
    uint64_t v53 = v14;
    int v54 = 0;
    int v55 = 0;
    uint64_t v15 = *(void *)(*((void *)this + 1) + 32);
    uint64_t v16 = *((void *)this + 4);
    *(void *)&long long v46 = *((void *)this + 3);
    *((void *)&v46 + 1) = v16;
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 16), 1uLL, memory_order_relaxed);
    }
    *(void *)&long long v47 = v10;
    *((void *)&v47 + 1) = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v48 = *(void *)a3;
    int v49 = *((_DWORD *)a3 + 2);
    memset(v50, 0, sizeof(v50));
    int v51 = 0;
    int v17 = (void (*)(uint64_t, const AMCP::Thing *, _OWORD *, void))*((void *)a4 + 4);
    if (v17) {
      v17(1, a4, v50, 0);
    }
    int v57 = 0;
    long long v18 = (char *)operator new(0x60uLL);
    long long v19 = v47;
    *(_OWORD *)(v18 + 8) = v46;
    *(void *)long long v18 = &unk_1F146E878;
    long long v46 = 0uLL;
    *(_OWORD *)(v18 + 24) = v19;
    long long v47 = 0uLL;
    *((void *)v18 + 5) = v48;
    *((_DWORD *)v18 + 12) = v49;
    *(_OWORD *)(v18 + 56) = 0u;
    *(_OWORD *)(v18 + 72) = 0u;
    *((void *)v18 + 11) = 0;
    if (v51) {
      v51(2, v50, v18 + 56, 0);
    }
    int v57 = v18;
    AMCP::Core::Conductor::enqueue_config_change(v15, v12, a2, 1, (uint64_t)v56);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v56);
    if (v51) {
      v51(0, v50, 0, 0);
    }
    if (*((void *)&v47 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v47 + 1));
    }
    std::runtime_error v20 = (std::__shared_weak_count *)*((void *)&v46 + 1);
    if (!*((void *)&v46 + 1)) {
      goto LABEL_39;
    }
LABEL_38:
    std::__shared_weak_count::__release_weak(v20);
    goto LABEL_39;
  }
LABEL_53:
  uint64_t v28 = AMCP::Null::Object::do_set_property(this, a2, a3, a4);
  if (v9) {
LABEL_54:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  return v28;
}

void sub_1BAD3A5A4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Device15do_set_propertyEjRKNS_7AddressERKNS_5ThingEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      int v5 = *(CFDictionaryRef **)(a1 + 8);
      if (v5)
      {
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v5[6]);
        AMCP::Thing::convert_to<applesauce::CF::StringRef>(&v16, a1 + 56);
        double v8 = v16;
        if (v16)
        {
          v7.i64[0] = 0x676C6F626E6C666CLL;
          uint64_t v13 = 0x676C6F626E6C666CLL;
          int v14 = 0;
          AMCP::Address::to_string(&__p, (unsigned int *)&v13, v7);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (p_p)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              CFIndex size = __p.__r_.__value_.__l.__size_;
            }
            CFStringRef v11 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
            if (!v11)
            {
              exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
              __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(MutableCopy, v11, v8);
            CFRelease(v11);
          }
          else
          {
            mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(MutableCopy, 0, v8);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&__p, MutableCopy);
          (*((void (**)(CFDictionaryRef *, std::string *))*v5 + 3))(v5, &__p);
          if (__p.__r_.__value_.__r.__words[0]) {
            CFRelease(__p.__r_.__value_.__l.__data_);
          }
          CFRelease(v8);
          if (MutableCopy) {
            CFRelease(MutableCopy);
          }
        }
        else if (MutableCopy)
        {
          CFRelease(MutableCopy);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1BAD3A7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  CFRelease(v18);
  if (v17) {
    CFRelease(v17);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2>,void ()(void)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2>,void ()(void)>::destroy[abi:ne180100](void *a1)
{
  uint64_t v2 = (void (*)(void, void *, void, void))a1[10];
  if (v2) {
    v2(0, a1 + 6, 0, 0);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2>,void ()(void)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F146E978;
  return std::__compressed_pair_elem<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  int v5 = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  CFIndex v6 = *(void (**)(uint64_t, uint64_t))(a2 + 80);
  if (v6) {
    v6(1, a2 + 48);
  }
  return a1;
}

void sub_1BAD3A9D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x60uLL);
  void *v2 = &unk_1F146E978;
  std::__compressed_pair_elem<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BAD3AA48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146E978;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[11];
  if (v2) {
    v2(0, a1 + 7, 0, 0);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_2>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146E978;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[11];
  if (v2) {
    v2(0, a1 + 7, 0, 0);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void *std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Device15do_set_propertyEjRKNS_7AddressERKNS_5ThingEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
}

void AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1::operator()(uint64_t *a1)
{
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *a1;
      if (*a1)
      {
        int v6 = *((_DWORD *)a1 + 8);
        for (uint64_t i = *(uint64_t **)(v5 + 120); i != *(uint64_t **)(v5 + 128); i += 2)
        {
          if (*(_DWORD *)(*i + 88) == v6)
          {
            unsigned int v8 = 1768845428;
LABEL_14:
            AMCP::Thing::convert_to<CA::StreamDescription>((uint64_t)v115, (uint64_t)(a1 + 5));
            uint64_t v113 = 0x676C6F627363686ELL;
            int v114 = 0;
            v9.i64[0] = 0x676C6F62666D6174;
            uint64_t v111 = 0x676C6F62666D6174;
            int v112 = 0;
            v110[0] = 1937009955;
            v110[1] = v8;
            v110[2] = 0;
            uint64_t v10 = *i;
            CFStringRef v84 = v4;
            if (!*(void *)(v10 + 48))
            {
              exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
              __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            AMCP::Address::to_string((std::string *)valuePtr, (unsigned int *)&v113, v9);
            if (valuePtr[23] >= 0) {
              CFStringRef v11 = valuePtr;
            }
            else {
              CFStringRef v11 = *(const UInt8 **)valuePtr;
            }
            if (v11)
            {
              if (valuePtr[23] >= 0) {
                CFIndex v12 = valuePtr[23];
              }
              else {
                CFIndex v12 = *(void *)&valuePtr[8];
              }
              CFStringRef v13 = CFStringCreateWithBytes(0, v11, v12, 0x8000100u, 0);
              v105[0] = v13;
              if (!v13)
              {
                int v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v14, "Could not construct");
                __cxa_throw(v14, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
            }
            else
            {
              CFStringRef v13 = 0;
              v105[0] = 0;
            }
            applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,applesauce::CF::StringRef>((applesauce::CF::NumberRef *)&cf, *(CFDictionaryRef *)(v10 + 48), v13);
            if (!cf.__r_.__value_.__r.__words[0])
            {
              CFIndex v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v81, "Could not construct");
              __cxa_throw(v81, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            int v86 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf.__r_.__value_.__l.__data_);
            if (cf.__r_.__value_.__r.__words[0]) {
              CFRelease(cf.__r_.__value_.__l.__data_);
            }
            if (v13) {
              CFRelease(v13);
            }
            if ((valuePtr[23] & 0x80000000) != 0) {
              operator delete(*(void **)valuePtr);
            }
            if (!*(void *)(v5 + 48))
            {
              CFStringRef v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v82, "Could not construct");
              __cxa_throw(v82, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            AMCP::Address::to_string((std::string *)valuePtr, v110, v15);
            if (valuePtr[23] >= 0) {
              uint64_t v16 = valuePtr;
            }
            else {
              uint64_t v16 = *(const UInt8 **)valuePtr;
            }
            if (v16)
            {
              if (valuePtr[23] >= 0) {
                CFIndex v17 = valuePtr[23];
              }
              else {
                CFIndex v17 = *(void *)&valuePtr[8];
              }
              CFStringRef v18 = CFStringCreateWithBytes(0, v16, v17, 0x8000100u, 0);
              cf.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
              if (!v18)
              {
                long long v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v19, "Could not construct");
                __cxa_throw(v19, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
            }
            else
            {
              CFStringRef v18 = 0;
              cf.__r_.__value_.__r.__words[0] = 0;
            }
            std::runtime_error v20 = applesauce::CF::details::at_key<applesauce::CF::StringRef>(*(CFDictionaryRef *)(v5 + 48), v18);
            if (!v20)
            {
              long long v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v83, "Could not find item");
              __cxa_throw(v83, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            std::runtime_error v21 = v20;
            CFRetain(v20);
            applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&theArray, v21);
            if (v18) {
              CFRelease(v18);
            }
            if ((valuePtr[23] & 0x80000000) != 0) {
              operator delete(*(void **)valuePtr);
            }
            CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, *(CFDictionaryRef *)(v5 + 48));
            CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
            CFTypeRef v107 = Mutable;
            CFArrayRef v24 = theArray;
            if (!theArray) {
              goto LABEL_147;
            }
            CFIndex Count = CFArrayGetCount(theArray);
            CFIndex v26 = Count;
            CFArrayRef v27 = theArray;
            if (theArray)
            {
              CFIndex v85 = CFArrayGetCount(theArray);
              if (!v26) {
                goto LABEL_147;
              }
            }
            else
            {
              CFIndex v85 = 0;
              if (!Count)
              {
LABEL_147:
                AMCP::Address::to_string((std::string *)valuePtr, v110, v23);
                if (valuePtr[23] >= 0) {
                  unint64_t v61 = valuePtr;
                }
                else {
                  unint64_t v61 = *(const UInt8 **)valuePtr;
                }
                if (v61)
                {
                  if (valuePtr[23] >= 0) {
                    CFIndex v62 = valuePtr[23];
                  }
                  else {
                    CFIndex v62 = *(void *)&valuePtr[8];
                  }
                  uint64_t v4 = v84;
                  CFStringRef v63 = CFStringCreateWithBytes(0, v61, v62, 0x8000100u, 0);
                  if (!v63)
                  {
                    unint64_t v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v64, "Could not construct");
                    __cxa_throw(v64, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                }
                else
                {
                  CFStringRef v63 = 0;
                  uint64_t v4 = v84;
                }
                mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&cf, Mutable);
                CFDictionaryRef v65 = MutableCopy;
                mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(MutableCopy, v63, cf.__r_.__value_.__l.__data_);
                if (cf.__r_.__value_.__r.__words[0]) {
                  CFRelease(cf.__r_.__value_.__l.__data_);
                }
                if (v63) {
                  CFRelease(v63);
                }
                if ((valuePtr[23] & 0x80000000) != 0) {
                  operator delete(*(void **)valuePtr);
                }
                mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)valuePtr, v65);
                (*(void (**)(uint64_t, unsigned char *))(*(void *)v5 + 24))(v5, valuePtr);
                if (*(void *)valuePtr) {
                  CFRelease(*(CFTypeRef *)valuePtr);
                }
                if (v107) {
                  CFRelease(v107);
                }
                if (v65) {
                  CFRelease(v65);
                }
                if (theArray) {
                  CFRelease(theArray);
                }
                goto LABEL_171;
              }
            }
            unint64_t v28 = 0;
            do
            {
              if (v24 == v27 && v28 == v85) {
                break;
              }
              applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&theDict, v24, v28);
              if (!theDict)
              {
                int16x8_t v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v72, "Could not construct");
                __cxa_throw(v72, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              AMCP::Address::to_string((std::string *)valuePtr, (unsigned int *)&v113, v29);
              uint64_t v30 = valuePtr[23] >= 0 ? valuePtr : *(const UInt8 **)valuePtr;
              if (v30)
              {
                if (valuePtr[23] >= 0) {
                  CFIndex v31 = valuePtr[23];
                }
                else {
                  CFIndex v31 = *(void *)&valuePtr[8];
                }
                CFStringRef v32 = CFStringCreateWithBytes(0, v30, v31, 0x8000100u, 0);
                v105[0] = v32;
                if (!v32)
                {
                  unint64_t v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v74, "Could not construct");
                  __cxa_throw(v74, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
              }
              else
              {
                CFStringRef v32 = 0;
                v105[0] = 0;
              }
              applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,applesauce::CF::StringRef>((applesauce::CF::NumberRef *)&cf, theDict, v32);
              if (!cf.__r_.__value_.__r.__words[0])
              {
                uint64_t v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v73, "Could not construct");
                __cxa_throw(v73, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              int v33 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf.__r_.__value_.__l.__data_);
              if (cf.__r_.__value_.__r.__words[0]) {
                CFRelease(cf.__r_.__value_.__l.__data_);
              }
              if (v32) {
                CFRelease(v32);
              }
              if ((valuePtr[23] & 0x80000000) != 0) {
                operator delete(*(void **)valuePtr);
              }
              if (v33 == v86)
              {
                if (theDict)
                {
                  AMCP::Address::to_string((std::string *)valuePtr, (unsigned int *)&v111, v34);
                  if (valuePtr[23] >= 0) {
                    long long v35 = valuePtr;
                  }
                  else {
                    long long v35 = *(const UInt8 **)valuePtr;
                  }
                  if (v35)
                  {
                    if (valuePtr[23] >= 0) {
                      CFIndex v36 = valuePtr[23];
                    }
                    else {
                      CFIndex v36 = *(void *)&valuePtr[8];
                    }
                    CFStringRef v37 = CFStringCreateWithBytes(0, v35, v36, 0x8000100u, 0);
                    *(void *)&long long v102 = v37;
                    if (!v37)
                    {
                      long long v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v77, "Could not construct");
                      __cxa_throw(v77, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                    }
                  }
                  else
                  {
                    CFStringRef v37 = 0;
                    *(void *)&long long v102 = 0;
                  }
                  applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,applesauce::CF::StringRef>((applesauce::CF::DictionaryRef *)&cf, theDict, v37);
                  memset(&v105[1], 0, 24);
                  v105[0] = cf.__r_.__value_.__r.__words[0];
                  cf.__r_.__value_.__r.__words[0] = 0;
                  v105[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
                  if (v37) {
                    CFRelease(v37);
                  }
                  if ((valuePtr[23] & 0x80000000) != 0) {
                    operator delete(*(void **)valuePtr);
                  }
                  AMCP::Thing::convert_to<CA::StreamDescription>((uint64_t)&v102, (uint64_t)v105);
                  memset(&__p, 0, sizeof(__p));
                  if (theDict)
                  {
                    cf.__r_.__value_.__r.__words[0] = 0x676C6F62666D7423;
                    LODWORD(cf.__r_.__value_.__r.__words[1]) = 0;
                    AMCP::Address::to_string((std::string *)valuePtr, (unsigned int *)&cf, v38);
                    if (valuePtr[23] >= 0) {
                      unint64_t v39 = valuePtr;
                    }
                    else {
                      unint64_t v39 = *(const UInt8 **)valuePtr;
                    }
                    if (v39)
                    {
                      if (valuePtr[23] >= 0) {
                        CFIndex v40 = valuePtr[23];
                      }
                      else {
                        CFIndex v40 = *(void *)&valuePtr[8];
                      }
                      CFStringRef v41 = CFStringCreateWithBytes(0, v39, v40, 0x8000100u, 0);
                      if (!v41)
                      {
                        unint64_t v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::runtime_error::runtime_error(v78, "Could not construct");
                        __cxa_throw(v78, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                      }
                      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v99, theDict, v41);
                      CFRelease(v41);
                    }
                    else
                    {
                      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v99, theDict, 0);
                    }
                    if ((valuePtr[23] & 0x80000000) != 0) {
                      operator delete(*(void **)valuePtr);
                    }
                    if (v100)
                    {
                      AMCP::make_thing_from_description((AMCP *)valuePtr, &v99);
                      AMCP::Thing::convert_to<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(&cf, (uint64_t)valuePtr);
                      std::string::size_type v42 = __p.__r_.__value_.__r.__words[0];
                      if (__p.__r_.__value_.__r.__words[0])
                      {
                        std::string::size_type size = __p.__r_.__value_.__l.__size_;
                        unint64_t v44 = (void *)__p.__r_.__value_.__r.__words[0];
                        if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
                        {
                          std::string::size_type v45 = __p.__r_.__value_.__l.__size_;
                          do
                          {
                            long long v47 = *(void **)(v45 - 64);
                            v45 -= 64;
                            long long v46 = v47;
                            if (v47)
                            {
                              *(void *)(size - 56) = v46;
                              operator delete(v46);
                            }
                            std::string::size_type size = v45;
                          }
                          while (v45 != v42);
                          unint64_t v44 = (void *)__p.__r_.__value_.__r.__words[0];
                        }
                        __p.__r_.__value_.__l.__size_ = v42;
                        operator delete(v44);
                      }
                      std::string __p = cf;
                      memset(&cf, 0, sizeof(cf));
                      p_std::string cf = &cf;
                      std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_cf);
                      if (*(void *)&valuePtr[32]) {
                        uint64_t v48 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void, unsigned char *, void, void))&valuePtr[32])(0, valuePtr, 0, 0);
                      }
                    }
                    else
                    {
                      p_std::string cf = 0;
                      long long v90 = 0uLL;
                      *(void *)int valuePtr = v102;
                      *(void *)&valuePtr[8] = v102;
                      CA::ValueRangeList::AddRange((double **)&p_cf, (double *)valuePtr);
                      memset(valuePtr, 0, 24);
                      std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(valuePtr, p_cf, v90, (uint64_t)(v90 - (void)p_cf) >> 4);
                      *(_OWORD *)&valuePtr[24] = v102;
                      long long v117 = v103;
                      uint64_t v118 = v104;
                      std::string::size_type v49 = __p.__r_.__value_.__l.__size_;
                      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
                      {
                        uint64_t v52 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 6;
                        if ((unint64_t)(v52 + 1) >> 58) {
                          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                        }
                        unint64_t v53 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 5;
                        if (v53 <= v52 + 1) {
                          unint64_t v53 = v52 + 1;
                        }
                        if (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFC0) {
                          unint64_t v54 = 0x3FFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v54 = v53;
                        }
                        mach_port_t v95 = &__p.__r_.__value_.__s.__data_[16];
                        if (v54) {
                          unint64_t v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>>(v54);
                        }
                        else {
                          uint64_t v55 = 0;
                        }
                        std::string::size_type v56 = v54 + (v52 << 6);
                        cf.__r_.__value_.__r.__words[0] = v54;
                        cf.__r_.__value_.__l.__size_ = v56;
                        cf.__r_.__value_.__r.__words[2] = v56;
                        unint64_t v94 = v54 + (v55 << 6);
                        *(void *)std::string::size_type v56 = 0;
                        *(void *)(v56 + 8) = 0;
                        *(void *)(v56 + 16) = 0;
                        std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>((void *)v56, *(const void **)valuePtr, *(uint64_t *)&valuePtr[8], (uint64_t)(*(void *)&valuePtr[8] - *(void *)valuePtr) >> 4);
                        *(_OWORD *)(v56 + 24) = *(_OWORD *)&valuePtr[24];
                        *(_OWORD *)(v56 + 40) = v117;
                        *(void *)(v56 + 56) = v118;
                        cf.__r_.__value_.__r.__words[2] += 64;
                        std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__swap_out_circular_buffer((uint64_t *)&__p, &cf);
                        std::string::size_type v51 = __p.__r_.__value_.__l.__size_;
                        std::__split_buffer<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::~__split_buffer((uint64_t)&cf);
                        CFStringRef v50 = *(void **)valuePtr;
                      }
                      else
                      {
                        *(void *)__p.__r_.__value_.__l.__size_ = 0;
                        *(void *)(v49 + 8) = 0;
                        *(void *)(v49 + 16) = 0;
                        CFStringRef v50 = *(void **)valuePtr;
                        std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>((void *)v49, *(const void **)valuePtr, *(uint64_t *)&valuePtr[8], (uint64_t)(*(void *)&valuePtr[8] - *(void *)valuePtr) >> 4);
                        *(_OWORD *)(v49 + 24) = v102;
                        *(_OWORD *)(v49 + 40) = v103;
                        *(void *)(v49 + 56) = v104;
                        std::string::size_type v51 = v49 + 64;
                      }
                      __p.__r_.__value_.__l.__size_ = v51;
                      if (v50) {
                        operator delete(v50);
                      }
                      uint64_t v48 = (AMCP::Log::Scope_Registry *)p_cf;
                      if (p_cf) {
                        operator delete(p_cf);
                      }
                    }
                    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
                    {
                      BOOL is_an_available_format = AMCP::Utility::Stream_Format::format_is_an_available_format((uint64_t)v115, (uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                      if (is_an_available_format)
                      {
                        p_std::string cf = CFDictionaryCreateMutableCopy(0, 0, theDict);
                        AMCP::Address::to_string(&cf, (unsigned int *)&v111, v58);
                        if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          unint64_t v59 = &cf;
                        }
                        else {
                          unint64_t v59 = (std::string *)cf.__r_.__value_.__r.__words[0];
                        }
                        if (v59)
                        {
                          if ((cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            CFIndex v60 = HIBYTE(cf.__r_.__value_.__r.__words[2]);
                          }
                          else {
                            CFIndex v60 = cf.__r_.__value_.__l.__size_;
                          }
                          if (!CFStringCreateWithBytes(0, (const UInt8 *)v59, v60, 0x8000100u, 0))
                          {
                            unint64_t v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                            std::runtime_error::runtime_error(v79, "Could not construct");
                            __cxa_throw(v79, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                          }
                        }
                        else
                        {
                          *(void *)&long long v87 = 0;
                        }
                        memset(valuePtr, 0, 32);
                        *(void *)&valuePtr[32] = AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
                        operator new();
                      }
                      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_an_available_format);
                      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)valuePtr, "com.apple.coreaudio", "AMCP");
                      uint64_t v69 = **(NSObject ***)valuePtr;
                      if (*(void *)&valuePtr[8]) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&valuePtr[8]);
                      }
                      if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
                      {
                        CFIndex v70 = pthread_self();
                        mach_port_t v71 = pthread_mach_thread_np(v70);
                        *(_DWORD *)int valuePtr = 67109890;
                        *(_DWORD *)&valuePtr[4] = v71;
                        *(_WORD *)&valuePtr[8] = 2080;
                        *(void *)&valuePtr[10] = "Null_Object.cpp";
                        *(_WORD *)&valuePtr[18] = 1024;
                        *(_DWORD *)&valuePtr[20] = 1189;
                        *(_WORD *)&valuePtr[24] = 2080;
                        *(void *)&valuePtr[26] = "(format_is_valid) == false";
                        _os_log_error_impl(&dword_1BAA78000, v69, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set stream format", valuePtr, 0x22u);
                      }
                      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v98);
                      __cxa_allocate_exception(0x40uLL);
                      std::runtime_error::runtime_error(&v92, "failed to set stream format");
                      std::runtime_error::runtime_error((std::runtime_error *)&cf, &v92);
                      unint64_t v94 = 0;
                      mach_port_t v95 = 0;
                      uint64_t v96 = 0;
                      int v97 = -1;
                      cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148A9A8;
                      cf.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F148A9D0;
                      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)valuePtr, (uint64_t)&cf);
                      *(void *)&valuePtr[32] = "auto AMCP::Null::Device::do_set_property(Object_ID, const Address &, co"
                                                 "nst Thing &)::(anonymous class)::operator()() const";
                      *(void *)&long long v117 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
                      DWORD2(v117) = 1189;
                      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v87);
                      p_std::string cf = &unk_1F148AA90;
                      long long v90 = v87;
                      uint64_t v91 = v88;
                      long long v87 = 0uLL;
                      uint64_t v88 = 0;
                      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
                    }
                    AMCP::Log::Scope_Registry::get(v48);
                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)valuePtr, "com.apple.coreaudio", "AMCP");
                    unint64_t v66 = **(NSObject ***)valuePtr;
                    if (*(void *)&valuePtr[8]) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&valuePtr[8]);
                    }
                    if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
                    {
                      uint64_t v67 = pthread_self();
                      mach_port_t v68 = pthread_mach_thread_np(v67);
                      *(_DWORD *)int valuePtr = 67109890;
                      *(_DWORD *)&valuePtr[4] = v68;
                      *(_WORD *)&valuePtr[8] = 2080;
                      *(void *)&valuePtr[10] = "Null_Object.cpp";
                      *(_WORD *)&valuePtr[18] = 1024;
                      *(_DWORD *)&valuePtr[20] = 1186;
                      *(_WORD *)&valuePtr[24] = 2080;
                      *(void *)&valuePtr[26] = "(available_formats.size()) == false";
                      _os_log_error_impl(&dword_1BAA78000, v66, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to get a valid list of available formats", valuePtr, 0x22u);
                    }
                    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v98);
                    __cxa_allocate_exception(0x40uLL);
                    std::runtime_error::runtime_error(&v92, "failed to get a valid list of available formats");
                    std::runtime_error::runtime_error((std::runtime_error *)&cf, &v92);
                    unint64_t v94 = 0;
                    mach_port_t v95 = 0;
                    uint64_t v96 = 0;
                    int v97 = -1;
                    cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148A9A8;
                    cf.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F148A9D0;
                    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)valuePtr, (uint64_t)&cf);
                    *(void *)&valuePtr[32] = "auto AMCP::Null::Device::do_set_property(Object_ID, const Address &, cons"
                                               "t Thing &)::(anonymous class)::operator()() const";
                    *(void *)&long long v117 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
                    DWORD2(v117) = 1186;
                    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v87);
                    p_std::string cf = &unk_1F148AA90;
                    long long v90 = v87;
                    uint64_t v91 = v88;
                    long long v87 = 0uLL;
                    uint64_t v88 = 0;
                    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
                  }
                  char v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v75, "Could not construct");
                  __cxa_throw(v75, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                unint64_t v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v76, "Could not construct");
                __cxa_throw(v76, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(Mutable, theDict);
              if (theDict) {
                CFRelease(theDict);
              }
              ++v28;
            }
            while (v28 != v26);
            goto LABEL_147;
          }
        }
        for (uint64_t i = *(uint64_t **)(v5 + 144); i != *(uint64_t **)(v5 + 152); i += 2)
        {
          if (*(_DWORD *)(*i + 88) == v6)
          {
            unsigned int v8 = 1869968496;
            goto LABEL_14;
          }
        }
      }
LABEL_171:
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1BAD3C348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,const void *a48,const void *a49,const void *a50,const void *a51)
{
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a33);
  *(void *)(v51 - 192) = &a35;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 192));
  AMCP::Thing::~Thing((AMCP::Thing *)&a43);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a48);
  mcp_applesauce::CF::Array_Builder::~Array_Builder(&a49);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder(&a50);
  applesauce::CF::ArrayRef::~ArrayRef(&a51);
  std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  _Unwind_Resume(a1);
}

applesauce::CF::DictionaryRef *applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,applesauce::CF::StringRef>(applesauce::CF::DictionaryRef *a1, CFDictionaryRef theDict, const void *a3)
{
  uint64_t v4 = applesauce::CF::details::at_key<applesauce::CF::StringRef>(theDict, a3);
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v5 = v4;
  CFRetain(v4);

  return applesauce::CF::DictionaryRef::DictionaryRef(a1, v5);
}

void sub_1BAD3C938(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AMCP::Null::change_sample_rates(AMCP::Null *this, CFArrayRef *a2, const void **a3)
{
  CFDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  v34[1] = Mutable;
  CFArrayRef v6 = *a2;
  if (!*a2) {
    goto LABEL_52;
  }
  CFIndex Count = CFArrayGetCount(*a2);
  CFIndex v8 = Count;
  CFArrayRef v9 = *a2;
  if (*a2)
  {
    CFIndex v27 = CFArrayGetCount(*a2);
    if (!v8) {
      goto LABEL_52;
    }
  }
  else
  {
    CFIndex v27 = 0;
    if (!Count) {
      goto LABEL_52;
    }
  }
  unint64_t v10 = 0;
  do
  {
    if (v6 == v9 && v27 == v10) {
      break;
    }
    applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)v34, v6, v10);
    if (!v34[0])
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v29 = 0x676C6F62666D6174;
    int v30 = 0;
    AMCP::Address::to_string(&__p, (unsigned int *)&v29, v11);
    CFIndex v12 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v12)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        CFIndex size = __p.__r_.__value_.__l.__size_;
      }
      CFStringRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)v12, size, 0x8000100u, 0);
      CFStringRef v32 = (void *)v14;
      if (!v14)
      {
        CFArrayRef v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v24, "Could not construct");
        __cxa_throw(v24, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    else
    {
      CFStringRef v14 = 0;
      CFStringRef v32 = 0;
    }
    applesauce::CF::details::find_at_key<applesauce::CF::DictionaryRef,applesauce::CF::StringRef>((applesauce::CF::DictionaryRef *)&theDict, v34[0], v14);
    if (v14) {
      CFRelease(v14);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
    CFStringRef v32 = MutableCopy;
    CFStringRef v16 = CFStringCreateWithBytes(0, (const UInt8 *)"sample rate", 11, 0x8000100u, 0);
    if (!v16)
    {
      int16x8_t v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v23, "Could not construct");
      __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v16, *a3);
    CFRelease(v16);
    CFMutableDictionaryRef v17 = CFDictionaryCreateMutableCopy(0, 0, v34[0]);
    cf[1] = v17;
    uint64_t v29 = 0x676C6F62666D6174;
    int v30 = 0;
    AMCP::Address::to_string(&__p, (unsigned int *)&v29, v18);
    long long v19 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v19)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFIndex v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        CFIndex v20 = __p.__r_.__value_.__l.__size_;
      }
      CFStringRef v21 = CFStringCreateWithBytes(0, (const UInt8 *)v19, v20, 0x8000100u, 0);
      if (!v21)
      {
        uint64_t v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v25, "Could not construct");
        __cxa_throw(v25, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    else
    {
      CFStringRef v21 = 0;
    }
    mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)cf, MutableCopy);
    mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>(v17, v21, cf[0]);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (v21) {
      CFRelease(v21);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&__p, v17);
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(Mutable, __p.__r_.__value_.__l.__data_);
    if (__p.__r_.__value_.__r.__words[0]) {
      CFRelease(__p.__r_.__value_.__l.__data_);
    }
    if (v17) {
      CFRelease(v17);
    }
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
    if (theDict) {
      CFRelease(theDict);
    }
    if (v34[0]) {
      CFRelease(v34[0]);
    }
    ++v10;
  }
  while (v8 != v10);
LABEL_52:
  mcp_applesauce::CF::Array_Builder::copy_array(this, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAD3CD54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,const void *a22,const void *a23,const void *a24,const void *a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder(&a13);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder(&a22);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a23);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a24);
  mcp_applesauce::CF::Array_Builder::~Array_Builder(&a25);
  _Unwind_Resume(a1);
}

void sub_1BAD3CE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  JUMPOUT(0x1BAD3CE38);
}

void sub_1BAD3CE4C()
{
}

void std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::destroy[abi:ne180100](void *a1)
{
  uint64_t v2 = (void (*)(void, void *, void, void))a1[9];
  if (v2) {
    v2(0, a1 + 5, 0, 0);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F146E8F8;
  return std::__compressed_pair_elem<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  int v5 = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  CFArrayRef v6 = *(void (**)(uint64_t, uint64_t))(a2 + 72);
  if (v6) {
    v6(1, a2 + 40);
  }
  return a1;
}

void sub_1BAD3CFBC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x58uLL);
  void *v2 = &unk_1F146E8F8;
  std::__compressed_pair_elem<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BAD3D034(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146E8F8;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[10];
  if (v2) {
    v2(0, a1 + 6, 0, 0);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_1>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146E8F8;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[10];
  if (v2) {
    v2(0, a1 + 6, 0, 0);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void *std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Device15do_set_propertyEjRKNS_7AddressERKNS_5ThingEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      int v5 = *(CFDictionaryRef **)(a1 + 8);
      if (v5)
      {
        CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, v5[6]);
        valuePtr.__r_.__value_.__r.__words[0] = AMCP::Thing::convert_to<double>(a1 + 56);
        CFNumberRef v7 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
        CFNumberRef v44 = v7;
        if (!v7)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        v8.i64[0] = 0x676C6F626E737274;
        uint64_t v41 = 0x676C6F626E737274;
        int v42 = 0;
        AMCP::Address::to_string(&valuePtr, (unsigned int *)&v41, v8);
        if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string valuePtr = &valuePtr;
        }
        else {
          p_std::string valuePtr = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
        }
        if (p_valuePtr)
        {
          if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            CFIndex size = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
          }
          else {
            CFIndex size = valuePtr.__r_.__value_.__l.__size_;
          }
          CFStringRef v11 = CFStringCreateWithBytes(0, (const UInt8 *)p_valuePtr, size, 0x8000100u, 0);
          if (!v11)
          {
            CFIndex v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v31, "Could not construct");
            __cxa_throw(v31, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v11, v7);
          CFRelease(v11);
        }
        else
        {
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, 0, v7);
        }
        if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(valuePtr.__r_.__value_.__l.__data_);
        }
        if (!v5[6])
        {
          uint64_t v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v29, "Could not construct");
          __cxa_throw(v29, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        uint64_t v39 = 0x696E707473746D23;
        int v40 = 0;
        AMCP::Address::to_string(&valuePtr, (unsigned int *)&v39, v12);
        if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFStringRef v13 = &valuePtr;
        }
        else {
          CFStringRef v13 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
        }
        if (v13)
        {
          if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            CFIndex v14 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
          }
          else {
            CFIndex v14 = valuePtr.__r_.__value_.__l.__size_;
          }
          CFStringRef v15 = CFStringCreateWithBytes(0, (const UInt8 *)v13, v14, 0x8000100u, 0);
          if (!v15)
          {
            CFStringRef v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v32, "Could not construct");
            __cxa_throw(v32, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v41, v5[6], v15);
          CFRelease(v15);
        }
        else
        {
          applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v41, v5[6], 0);
        }
        if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(valuePtr.__r_.__value_.__l.__data_);
        }
        if ((_BYTE)v42)
        {
          AMCP::Null::change_sample_rates((AMCP::Null *)&cf, (CFArrayRef *)&v41, (const void **)&v44);
          uint64_t v39 = 0x696E707473746D23;
          int v40 = 0;
          AMCP::Address::to_string(&valuePtr, (unsigned int *)&v39, v17);
          if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int16x8_t v18 = &valuePtr;
          }
          else {
            int16x8_t v18 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
          }
          if (v18)
          {
            if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              CFIndex v19 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
            }
            else {
              CFIndex v19 = valuePtr.__r_.__value_.__l.__size_;
            }
            CFStringRef v20 = CFStringCreateWithBytes(0, (const UInt8 *)v18, v19, 0x8000100u, 0);
            if (!v20)
            {
              int16x8_t v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v34, "Could not construct");
              __cxa_throw(v34, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(MutableCopy, v20, cf);
            CFRelease(v20);
          }
          else
          {
            mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(MutableCopy, 0, cf);
          }
          if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(valuePtr.__r_.__value_.__l.__data_);
          }
          if (cf) {
            CFRelease(cf);
          }
        }
        if (!v5[6])
        {
          int v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v30, "Could not construct");
          __cxa_throw(v30, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        CFTypeRef cf = (CFTypeRef)0x6F75747073746D23;
        int v38 = 0;
        AMCP::Address::to_string(&valuePtr, (unsigned int *)&cf, v16);
        if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFStringRef v21 = &valuePtr;
        }
        else {
          CFStringRef v21 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
        }
        if (v21)
        {
          if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            CFIndex v22 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
          }
          else {
            CFIndex v22 = valuePtr.__r_.__value_.__l.__size_;
          }
          CFStringRef v23 = CFStringCreateWithBytes(0, (const UInt8 *)v21, v22, 0x8000100u, 0);
          if (!v23)
          {
            int v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v33, "Could not construct");
            __cxa_throw(v33, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v39, v5[6], v23);
          CFRelease(v23);
        }
        else
        {
          applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v39, v5[6], 0);
        }
        if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(valuePtr.__r_.__value_.__l.__data_);
        }
        if ((_BYTE)v40)
        {
          AMCP::Null::change_sample_rates((AMCP::Null *)&v36, (CFArrayRef *)&v39, (const void **)&v44);
          CFTypeRef cf = (CFTypeRef)0x6F75747073746D23;
          int v38 = 0;
          AMCP::Address::to_string(&valuePtr, (unsigned int *)&cf, v24);
          if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v25 = &valuePtr;
          }
          else {
            uint64_t v25 = (std::string *)valuePtr.__r_.__value_.__r.__words[0];
          }
          if (v25)
          {
            if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              CFIndex v26 = HIBYTE(valuePtr.__r_.__value_.__r.__words[2]);
            }
            else {
              CFIndex v26 = valuePtr.__r_.__value_.__l.__size_;
            }
            CFStringRef v27 = CFStringCreateWithBytes(0, (const UInt8 *)v25, v26, 0x8000100u, 0);
            if (!v27)
            {
              long long v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v35, "Could not construct");
              __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(MutableCopy, v27, v36);
            CFRelease(v27);
          }
          else
          {
            mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(MutableCopy, 0, v36);
          }
          if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(valuePtr.__r_.__value_.__l.__data_);
          }
          if (v36) {
            CFRelease(v36);
          }
        }
        mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&valuePtr, MutableCopy);
        (*((void (**)(CFDictionaryRef *, std::string *))*v5 + 3))(v5, &valuePtr);
        if (valuePtr.__r_.__value_.__r.__words[0]) {
          CFRelease(valuePtr.__r_.__value_.__l.__data_);
        }
        std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v39);
        std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v41);
        CFRelease(v7);
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1BAD3D7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, CFTypeRef a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (cf) {
    CFRelease(cf);
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a13);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a15);
  CFRelease(v24);
  if (v23) {
    CFRelease(v23);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy[abi:ne180100](void *a1)
{
  uint64_t v2 = (void (*)(void, void *, void, void))a1[10];
  if (v2) {
    v2(0, a1 + 6, 0, 0);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F146E878;
  return std::__compressed_pair_elem<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  int v5 = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  CFArrayRef v6 = *(void (**)(uint64_t, uint64_t))(a2 + 80);
  if (v6) {
    v6(1, a2 + 48);
  }
  return a1;
}

void sub_1BAD3DAF4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x60uLL);
  void *v2 = &unk_1F146E878;
  std::__compressed_pair_elem<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BAD3DB6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146E878;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[11];
  if (v2) {
    v2(0, a1 + 7, 0, 0);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0,std::allocator<AMCP::Null::Device::do_set_property(unsigned int,AMCP::Address const&,AMCP::Thing const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146E878;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[11];
  if (v2) {
    v2(0, a1 + 7, 0, 0);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t AMCP::Null::Device::populate_core@<X0>(CFDictionaryRef *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  AMCP::Null::Clock::populate_core((AMCP::Null::Clock *)this, a2, a3);
  long long v125 = 0u;
  long long v126 = 0u;
  long long v127 = AMCP::Implementation::In_Place_Storage<int>::dispatch;
  std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)buf, (uint64_t)&v125);
  uint64_t v5 = 0;
  char v6 = 1;
  do
  {
    unsigned int v7 = AMCP::Property_Traits<1935763060u>::k_valid_scopes[v5];
    LODWORD(v112) = 1935763060;
    *(void *)((char *)&v112 + 4) = v7;
    long long v117 = 0;
    long long v115 = 0u;
    long long v116 = 0u;
    if (!this[6])
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    char v8 = v6;
    AMCP::Address::to_string(&__p, (unsigned int *)&v112, (int16x8_t)0);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (p_p)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        CFIndex size = __p.__r_.__value_.__l.__size_;
      }
      CFStringRef v11 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
      if (!v11)
      {
        long long v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v83, "Could not construct");
        __cxa_throw(v83, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v109, this[6], v11);
      CFRelease(v11);
    }
    else
    {
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v109, this[6], 0);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (BYTE8(v109))
    {
      AMCP::make_thing_from_description((AMCP *)&__p, (CFTypeRef *)&v109);
      AMCP::swap((AMCP::Thing *)&__p, (AMCP::Thing *)&v115, v13);
      if (v101) {
        v101(0, &__p, 0, 0);
      }
    }
    else if (buf[40])
    {
      AMCP::Thing::operator=((AMCP::Thing *)&v115, (uint64_t)buf, v12);
    }
    if (v117)
    {
      LODWORD(v105) = 1935763060;
      *(void *)((char *)&v105 + 4) = *(void *)((char *)&v112 + 4);
      AMCP::Core::Operation_Utilities::make_generic_constant_property<unsigned int>((uint64_t *)&__p, (uint64_t)&v105, (uint64_t)&v115);
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    }
    std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v109);
    if (v117) {
      v117(0, &v115, 0, 0);
    }
    if (__p.__r_.__value_.__r.__words[0]) {
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(__p.__r_.__value_.__r.__words[0] + 40), &__p);
    }
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    char v6 = 0;
    uint64_t v5 = 1;
  }
  while ((v8 & 1) != 0);
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
  if (v127) {
    ((void (*)(void, long long *, void, void))v127)(0, &v125, 0, 0);
  }
  uint64_t v14 = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v102 = 0;
  char v15 = 1;
  do
  {
    int v16 = AMCP::Property_Traits<1936879204u>::k_valid_scopes[v14];
    *(_DWORD *)char v98 = 1936879204;
    *(_DWORD *)&v98[4] = v16;
    *(_DWORD *)&v98[8] = 0;
    CFTypeRef v107 = 0;
    long long v105 = 0u;
    long long v106 = 0u;
    if (!this[6])
    {
      CFStringRef v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v82, "Could not construct");
      __cxa_throw(v82, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    char v17 = v15;
    AMCP::Address::to_string((std::string *)buf, (unsigned int *)v98, (int16x8_t)0);
    if (buf[23] >= 0) {
      int16x8_t v18 = buf;
    }
    else {
      int16x8_t v18 = *(const UInt8 **)buf;
    }
    if (v18)
    {
      if (buf[23] >= 0) {
        CFIndex v19 = buf[23];
      }
      else {
        CFIndex v19 = *(void *)&buf[8];
      }
      CFStringRef v20 = CFStringCreateWithBytes(0, v18, v19, 0x8000100u, 0);
      if (!v20)
      {
        CFStringRef v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v84, "Could not construct");
        __cxa_throw(v84, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v122, this[6], v20);
      CFRelease(v20);
    }
    else
    {
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v122, this[6], 0);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v123)
    {
      AMCP::make_thing_from_description((AMCP *)buf, &v122);
      AMCP::swap((AMCP::Thing *)buf, (AMCP::Thing *)&v105, v22);
      if (*(void *)&buf[32]) {
        (*(void (**)(void, unsigned char *, void, void))&buf[32])(0, buf, 0, 0);
      }
    }
    else if (v102)
    {
      AMCP::Thing::operator=((AMCP::Thing *)&v105, (uint64_t)&__p, v21);
    }
    if (v107)
    {
      *(_DWORD *)CFArrayRef theArray = 1936879204;
      int v93 = *(_DWORD *)&v98[8];
      *(void *)&theArray[4] = *(void *)&v98[4];
      uint64_t v111 = 0;
      long long v109 = 0u;
      long long v110 = 0u;
      v107(1, &v105, &v109, 0);
      std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v103, v93, *(double *)theArray);
      uint64_t v23 = v103;
      unint64_t v24 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
      long long v115 = 0u;
      long long v116 = 0u;
      long long v117 = 0;
      if (v111) {
        v111(1, &v109, &v115, 0);
      }
      *((void *)&v126 + 1) = 0;
      uint64_t v25 = (char *)operator new(0x30uLL);
      *(void *)uint64_t v25 = &unk_1F146E578;
      *(_OWORD *)(v25 + 8) = 0u;
      *(_OWORD *)(v25 + 24) = 0u;
      *((void *)v25 + 5) = 0;
      if (v117) {
        v117(1, &v115, v25 + 8, 0);
      }
      *((void *)&v126 + 1) = v25;
      memset(buf, 0, 40);
      std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v125);
      *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v23, v24, (AMCP *)buf);
      if (*(void *)&buf[32]) {
        (*(void (**)(void, unsigned char *, void, void))&buf[32])(0, buf, 0, 0);
      }
      std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](&v125);
      if (v117) {
        v117(0, &v115, 0, 0);
      }
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v115, v23);
      uint64_t v118 = *(void *)(v23 + 40);
      int v119 = *(_DWORD *)(v23 + 48);
      unint64_t v26 = AMCP::Implementation::get_type_marker<std::function<CA::ChannelLayout ()(void)>>();
      long long v27 = v115;
      long long v115 = 0uLL;
      *(_OWORD *)std::string buf = v27;
      *(_OWORD *)&buf[16] = v116;
      *(_DWORD *)&buf[32] = v117;
      if (*((void *)&v116 + 1))
      {
        unint64_t v28 = *(void *)(v116 + 8);
        if ((*((void *)&v27 + 1) & (*((void *)&v27 + 1) - 1)) != 0)
        {
          if (v28 >= *((void *)&v27 + 1)) {
            v28 %= *((void *)&v27 + 1);
          }
        }
        else
        {
          v28 &= *((void *)&v27 + 1) - 1;
        }
        *(void *)(v27 + 8 * v28) = &buf[16];
        long long v116 = 0uLL;
      }
      *(void *)&uint8_t buf[40] = v118;
      int v121 = v119;
      *((void *)&v113 + 1) = 0;
      uint64_t v29 = operator new(0x40uLL);
      void *v29 = &unk_1F146E5F8;
      std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v29 + 1), (uint64_t *)buf);
      v29[6] = *(void *)&buf[40];
      *((_DWORD *)v29 + 14) = v121;
      *((void *)&v113 + 1) = v29;
      long long v125 = 0u;
      long long v126 = 0u;
      long long v127 = 0;
      std::__function::__value_func<CA::ChannelLayout ()(void)>::__value_func[abi:ne180100]((uint64_t)&v125, (uint64_t)&v112);
      long long v127 = AMCP::Implementation::In_Place_Storage<std::function<CA::ChannelLayout ()(void)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v23, v26, (AMCP *)&v125);
      if (v127) {
        ((void (*)(void, long long *, void, void))v127)(0, &v125, 0, 0);
      }
      std::__function::__value_func<CA::ChannelLayout ()(void)>::~__value_func[abi:ne180100](&v112);
      std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)buf);
      std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v115);
      if (v111) {
        v111(0, &v109, 0, 0);
      }
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v103 = 0;
      uint64_t v104 = 0;
    }
    std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v122);
    if (v107) {
      v107(0, &v105, 0, 0);
    }
    if (v23) {
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v23 + 40), &v103);
    }
    if (v104) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v104);
    }
    char v15 = 0;
    uint64_t v14 = 1;
  }
  while ((v17 & 1) != 0);
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
  if (!this[6]) {
    goto LABEL_241;
  }
  *(void *)&long long v115 = 0x696E707473746D23;
  DWORD2(v115) = 0;
  AMCP::Address::to_string((std::string *)buf, (unsigned int *)&v115, v30);
  if (buf[23] >= 0) {
    CFIndex v31 = buf;
  }
  else {
    CFIndex v31 = *(const UInt8 **)buf;
  }
  if (v31)
  {
    if (buf[23] >= 0) {
      CFIndex v32 = buf[23];
    }
    else {
      CFIndex v32 = *(void *)&buf[8];
    }
    CFStringRef v33 = CFStringCreateWithBytes(0, v31, v32, 0x8000100u, 0);
    if (!v33)
    {
      CFIndex v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v85, "Could not construct");
      __cxa_throw(v85, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(theArray, this[6], v33);
    CFRelease(v33);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(theArray, this[6], 0);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (theArray[8])
  {
    if (!*(void *)theArray) {
      goto LABEL_241;
    }
    BOOL v35 = CFArrayGetCount(*(CFArrayRef *)theArray) != 0;
  }
  else
  {
    BOOL v35 = 0;
  }
  if (!this[6])
  {
LABEL_241:
    long long v87 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v87, "Could not construct");
    goto LABEL_246;
  }
  *(void *)&long long v115 = 0x6F75747073746D23;
  DWORD2(v115) = 0;
  AMCP::Address::to_string((std::string *)buf, (unsigned int *)&v115, v34);
  if (buf[23] >= 0) {
    CFTypeRef v36 = buf;
  }
  else {
    CFTypeRef v36 = *(const UInt8 **)buf;
  }
  if (v36)
  {
    if (buf[23] >= 0) {
      CFIndex v37 = buf[23];
    }
    else {
      CFIndex v37 = *(void *)&buf[8];
    }
    CFStringRef v38 = CFStringCreateWithBytes(0, v36, v37, 0x8000100u, 0);
    if (!v38)
    {
      int v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v86, "Could not construct");
      __cxa_throw(v86, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(v98, this[6], v38);
    CFRelease(v38);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(v98, this[6], 0);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (v98[8])
  {
    if (*(void *)v98)
    {
      CFIndex Count = (AMCP::Log::Scope_Registry *)CFArrayGetCount(*(CFArrayRef *)v98);
      BOOL v40 = Count != 0;
      goto LABEL_112;
    }
    goto LABEL_241;
  }
  BOOL v40 = 0;
LABEL_112:
  AMCP::Log::Scope_Registry::get(Count);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  uint64_t v41 = **(NSObject ***)buf;
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
  {
    long long v77 = pthread_self();
    mach_port_t v78 = pthread_mach_thread_np(v77);
    unint64_t v79 = "no input";
    *(_DWORD *)std::string buf = 67110146;
    *(_DWORD *)&uint8_t buf[4] = v78;
    if (v35) {
      unint64_t v79 = "input";
    }
    uint64_t v80 = "no output";
    *(void *)&buf[10] = "Null_Object.cpp";
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&unsigned char buf[20] = 1024;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(_WORD *)&unsigned char buf[24] = 2080;
    if (v40) {
      uint64_t v80 = "output";
    }
    *(void *)&buf[26] = v79;
    *(_WORD *)&buf[34] = 2080;
    *(void *)&buf[36] = v80;
    _os_log_debug_impl(&dword_1BAA78000, v41, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d This device has %s and %s", buf, 0x2Cu);
  }
  LOBYTE(v115) = v35;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (char *)&v115, 7.28117486e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(void *)buf + 40), buf);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  LOBYTE(v115) = v40;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (char *)&v115, 8.13208672e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(void *)buf + 40), buf);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  LOBYTE(v115) = v40;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (char *)&v115, 8.13208706e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(*(void *)buf + 40), buf);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  int v42 = *((_DWORD *)this + 22);
  *(void *)std::string buf = *((void *)this[1] + 2);
  *(_DWORD *)&uint8_t buf[8] = v42;
  *(_DWORD *)&unsigned char buf[12] = 1634956402;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)&v115, 0, (long long *)buf, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v115 + 40), &v115);
  if (*((void *)&v115 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v115 + 1));
  }
  int v43 = *((_DWORD *)this + 22);
  *(void *)std::string buf = *((void *)this[1] + 2);
  *(_DWORD *)&uint8_t buf[8] = v43;
  *(_OWORD *)&unsigned char buf[12] = xmmword_1BAFF9410;
  *(_OWORD *)&buf[28] = xmmword_1BAFF9420;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>((uint64_t *)&v115, 0, (uint64_t *)buf, 7.28117508e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v115 + 40), &v115);
  if (*((void *)&v115 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v115 + 1));
  }
  int v44 = *((_DWORD *)this + 22);
  *(void *)std::string buf = *((void *)this[1] + 2);
  *(_DWORD *)&uint8_t buf[8] = v44;
  *(_OWORD *)&unsigned char buf[12] = xmmword_1BAFF9410;
  *(_OWORD *)&buf[28] = xmmword_1BAFF9430;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>((uint64_t *)&v115, 0, (uint64_t *)buf, 8.13208706e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v115 + 40), &v115);
  if (*((void *)&v115 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v115 + 1));
  }
  if (!this[6]) {
    goto LABEL_241;
  }
  *(void *)&long long v115 = 0x676C6F6264646573;
  DWORD2(v115) = 0;
  AMCP::Address::to_string((std::string *)buf, (unsigned int *)&v115, v45);
  if (buf[23] >= 0) {
    long long v46 = buf;
  }
  else {
    long long v46 = *(const UInt8 **)buf;
  }
  if (v46)
  {
    if (buf[23] >= 0) {
      CFIndex v47 = buf[23];
    }
    else {
      CFIndex v47 = *(void *)&buf[8];
    }
    CFStringRef v48 = CFStringCreateWithBytes(0, v46, v47, 0x8000100u, 0);
    if (!v48)
    {
      uint64_t v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v88, "Could not construct");
      __cxa_throw(v88, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    BOOL v49 = applesauce::CF::details::has_key<applesauce::CF::StringRef>(this[6], v48);
    CFRelease(v48);
  }
  else
  {
    BOOL v49 = applesauce::CF::details::has_key<applesauce::CF::StringRef>(this[6], 0);
  }
  if ((buf[23] & 0x80000000) == 0)
  {
    if (!v49) {
      goto LABEL_186;
    }
LABEL_142:
    strcpy((char *)v95, "seddbolg");
    BYTE1(v95[2]) = 0;
    HIWORD(v95[2]) = 0;
    long long v112 = 0u;
    long long v113 = 0u;
    int v114 = AMCP::Implementation::In_Place_Storage<int>::dispatch;
    std::__optional_destruct_base<AMCP::Thing,false>::__optional_destruct_base[abi:ne180100]<AMCP::Thing>((uint64_t)&__p, (uint64_t)&v112);
    CFTypeRef v107 = 0;
    long long v105 = 0u;
    long long v106 = 0u;
    if (!this[6])
    {
      long long v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v90, "Could not construct");
      __cxa_throw(v90, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    AMCP::Address::to_string((std::string *)buf, v95, (int16x8_t)0);
    if (buf[23] >= 0) {
      uint64_t v51 = buf;
    }
    else {
      uint64_t v51 = *(const UInt8 **)buf;
    }
    if (v51)
    {
      if (buf[23] >= 0) {
        CFIndex v52 = buf[23];
      }
      else {
        CFIndex v52 = *(void *)&buf[8];
      }
      CFStringRef v53 = CFStringCreateWithBytes(0, v51, v52, 0x8000100u, 0);
      if (!v53)
      {
        uint64_t v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v91, "Could not construct");
        __cxa_throw(v91, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v103, this[6], v53);
      CFRelease(v53);
    }
    else
    {
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v103, this[6], 0);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if ((_BYTE)v104)
    {
      AMCP::make_thing_from_description((AMCP *)buf, (CFTypeRef *)&v103);
      AMCP::swap((AMCP::Thing *)buf, (AMCP::Thing *)&v105, v55);
      if (*(void *)&buf[32]) {
        (*(void (**)(void, unsigned char *, void, void))&buf[32])(0, buf, 0, 0);
      }
    }
    else if (v102)
    {
      AMCP::Thing::operator=((AMCP::Thing *)&v105, (uint64_t)&__p, v54);
    }
    if (v107)
    {
      LODWORD(v108[0]) = 1684301171;
      int v94 = v95[2];
      *(double *)((char *)v108 + 4) = *(double *)&v95[1];
      uint64_t v111 = 0;
      long long v109 = 0u;
      long long v110 = 0u;
      v107(1, &v105, &v109, 0);
      std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v96, v94, v108[0]);
      uint64_t v56 = v96;
      unint64_t v57 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
      long long v115 = 0u;
      long long v116 = 0u;
      long long v117 = 0;
      if (v111) {
        v111(1, &v109, &v115, 0);
      }
      *((void *)&v126 + 1) = 0;
      int16x8_t v58 = (char *)operator new(0x30uLL);
      *(void *)int16x8_t v58 = &unk_1F146E678;
      *(_OWORD *)(v58 + 8) = 0u;
      *(_OWORD *)(v58 + 24) = 0u;
      *((void *)v58 + 5) = 0;
      if (v117) {
        v117(1, &v115, v58 + 8, 0);
      }
      *((void *)&v126 + 1) = v58;
      memset(buf, 0, 40);
      std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v125);
      *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v56, v57, (AMCP *)buf);
      if (*(void *)&buf[32]) {
        (*(void (**)(void, unsigned char *, void, void))&buf[32])(0, buf, 0, 0);
      }
      std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](&v125);
      if (v117) {
        v117(0, &v115, 0, 0);
      }
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v115, v56);
      uint64_t v118 = *(void *)(v56 + 40);
      int v119 = *(_DWORD *)(v56 + 48);
      unint64_t v59 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::DictionaryRef ()(void)>>();
      long long v60 = v115;
      long long v115 = 0uLL;
      *(_OWORD *)std::string buf = v60;
      *(_OWORD *)&buf[16] = v116;
      *(_DWORD *)&buf[32] = v117;
      if (*((void *)&v116 + 1))
      {
        unint64_t v61 = *(void *)(v116 + 8);
        if ((*((void *)&v60 + 1) & (*((void *)&v60 + 1) - 1)) != 0)
        {
          if (v61 >= *((void *)&v60 + 1)) {
            v61 %= *((void *)&v60 + 1);
          }
        }
        else
        {
          v61 &= *((void *)&v60 + 1) - 1;
        }
        *(void *)(v60 + 8 * v61) = &buf[16];
        long long v116 = 0uLL;
      }
      *(void *)&uint8_t buf[40] = v118;
      int v121 = v119;
      uint64_t v124 = 0;
      CFIndex v62 = operator new(0x40uLL);
      void *v62 = &unk_1F146E6F8;
      std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v62 + 1), (uint64_t *)buf);
      v62[6] = *(void *)&buf[40];
      *((_DWORD *)v62 + 14) = v121;
      uint64_t v124 = v62;
      long long v125 = 0u;
      long long v126 = 0u;
      long long v127 = 0;
      std::__function::__value_func<applesauce::CF::DictionaryRef ()(void)>::__value_func[abi:ne180100]((uint64_t)&v125, (uint64_t)&v122);
      long long v127 = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::DictionaryRef ()(void)>>::dispatch;
      std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v56, v59, (AMCP *)&v125);
      if (v127) {
        ((void (*)(void, long long *, void, void))v127)(0, &v125, 0, 0);
      }
      std::__function::__value_func<applesauce::CF::DictionaryRef ()(void)>::~__value_func[abi:ne180100](&v122);
      std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)buf);
      std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v115);
      if (v111) {
        v111(0, &v109, 0, 0);
      }
    }
    else
    {
      uint64_t v56 = 0;
      uint64_t v96 = 0;
      int v97 = 0;
    }
    std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v103);
    if (v107) {
      v107(0, &v105, 0, 0);
    }
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v56 + 40), &v96);
    if (v97) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v97);
    }
    std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
    if (v114) {
      v114(0, (uint64_t)&v112, 0, 0);
    }
    goto LABEL_186;
  }
  operator delete(*(void **)buf);
  if (v49) {
    goto LABEL_142;
  }
LABEL_186:
  if (!this[6]) {
    goto LABEL_245;
  }
  *(void *)&long long v115 = 0x676C6F6263646573;
  DWORD2(v115) = 0;
  AMCP::Address::to_string((std::string *)buf, (unsigned int *)&v115, v50);
  CFStringRef v63 = buf[23] >= 0 ? buf : *(const UInt8 **)buf;
  if (v63)
  {
    if (buf[23] >= 0) {
      CFIndex v64 = buf[23];
    }
    else {
      CFIndex v64 = *(void *)&buf[8];
    }
    CFStringRef v65 = CFStringCreateWithBytes(0, v63, v64, 0x8000100u, 0);
    if (!v65)
    {
      int v89 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v89, "Could not construct");
      __cxa_throw(v89, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    BOOL v66 = applesauce::CF::details::has_key<applesauce::CF::StringRef>(this[6], v65);
    CFRelease(v65);
  }
  else
  {
    BOOL v66 = applesauce::CF::details::has_key<applesauce::CF::StringRef>(this[6], 0);
  }
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v66) {
      goto LABEL_226;
    }
  }
  else if (!v66)
  {
    goto LABEL_226;
  }
  if (!this[6])
  {
LABEL_245:
    long long v87 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v87, "Could not construct");
LABEL_246:
    __cxa_throw(v87, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(void *)&long long v115 = 0x676C6F6263646573;
  DWORD2(v115) = 0;
  AMCP::Address::to_string((std::string *)buf, (unsigned int *)&v115, v67);
  if (buf[23] >= 0) {
    mach_port_t v68 = buf;
  }
  else {
    mach_port_t v68 = *(const UInt8 **)buf;
  }
  if (v68)
  {
    if (buf[23] >= 0) {
      CFIndex v69 = buf[23];
    }
    else {
      CFIndex v69 = *(void *)&buf[8];
    }
    CFStringRef v70 = CFStringCreateWithBytes(0, v68, v69, 0x8000100u, 0);
    if (!v70)
    {
      std::runtime_error v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v92, "Could not construct");
      __cxa_throw(v92, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,applesauce::CF::StringRef>(&__p, this[6], v70);
    CFRelease(v70);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,applesauce::CF::StringRef>(&__p, this[6], 0);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (__p.__r_.__value_.__s.__data_[8])
  {
    CFDictionaryRef v71 = this[21];
    int16x8_t v72 = (const void *)__p.__r_.__value_.__r.__words[0];
    this[21] = (CFDictionaryRef)__p.__r_.__value_.__r.__words[0];
    if (v72) {
      CFRetain(v72);
    }
    if (v71) {
      CFRelease(v71);
    }
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v125, 0, 1.58366007e190);
  uint64_t v73 = v125;
  unint64_t v74 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::DictionaryRef ()(void)>>();
  *(void *)&long long v115 = &unk_1F146E778;
  *((void *)&v115 + 1) = this;
  *((void *)&v116 + 1) = &v115;
  memset(buf, 0, 40);
  std::__function::__value_func<applesauce::CF::DictionaryRef ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v115);
  *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::DictionaryRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v73, v74, (AMCP *)buf);
  if (*(void *)&buf[32]) {
    (*(void (**)(void, unsigned char *, void, void))&buf[32])(0, buf, 0, 0);
  }
  std::__function::__value_func<applesauce::CF::DictionaryRef ()(void)>::~__value_func[abi:ne180100](&v115);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(v73);
  unint64_t v75 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::DictionaryRef const&)>>();
  *(void *)&long long v115 = &unk_1F146E7F8;
  *((void *)&v115 + 1) = this;
  *((void *)&v116 + 1) = &v115;
  memset(buf, 0, 40);
  std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v115);
  *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::DictionaryRef const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v73, v75, (AMCP *)buf);
  if (*(void *)&buf[32]) {
    (*(void (**)(void, unsigned char *, void, void))&buf[32])(0, buf, 0, 0);
  }
  std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100](&v115);
  AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(v73);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v73 + 40), &v125);
  if (*((void *)&v125 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v125 + 1));
  }
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
LABEL_226:
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v98);
  return std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)theArray);
}

void sub_1BAD3F2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *std::__function::__func<AMCP::Null::Device::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Device::populate_core(unsigned int)::$_1>,void ()(applesauce::CF::DictionaryRef const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Null::Device::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Device::populate_core(unsigned int)::$_1>,void ()(applesauce::CF::DictionaryRef const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Device13populate_coreEjE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Null::Device::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Device::populate_core(unsigned int)::$_1>,void ()(applesauce::CF::DictionaryRef const&)>::operator()(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(const void **)(v2 + 168);
  uint64_t v4 = *a2;
  *(void *)(v2 + 168) = *a2;
  if (v4) {
    CFRetain(v4);
  }
  if (v3) {
    CFRelease(v3);
  }
}

uint64_t std::__function::__func<AMCP::Null::Device::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Device::populate_core(unsigned int)::$_1>,void ()(applesauce::CF::DictionaryRef const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F146E7F8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Null::Device::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Device::populate_core(unsigned int)::$_1>,void ()(applesauce::CF::DictionaryRef const&)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F146E7F8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Null::Device::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Device::populate_core(unsigned int)::$_1>,void ()(applesauce::CF::DictionaryRef const&)>::~__func()
{
}

void *std::__function::__func<AMCP::Null::Device::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Device::populate_core(unsigned int)::$_0>,applesauce::CF::DictionaryRef ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Null::Device::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Device::populate_core(unsigned int)::$_0>,applesauce::CF::DictionaryRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Null6Device13populate_coreEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Null::Device::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Device::populate_core(unsigned int)::$_0>,applesauce::CF::DictionaryRef ()(void)>::operator()@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = result[1];
  uint64_t v4 = *(void *)(v3 + 168);
  if (v4) {
    double result = CFRetain(*(CFTypeRef *)(v3 + 168));
  }
  *a2 = v4;
  return result;
}

uint64_t std::__function::__func<AMCP::Null::Device::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Device::populate_core(unsigned int)::$_0>,applesauce::CF::DictionaryRef ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F146E778;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Null::Device::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Device::populate_core(unsigned int)::$_0>,applesauce::CF::DictionaryRef ()(void)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F146E778;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Null::Device::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Device::populate_core(unsigned int)::$_0>,applesauce::CF::DictionaryRef ()(void)>::~__func()
{
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  uint64_t v2 = *(void (**)(void, uint64_t, void, void))(a1 + 32);
  if (v2) {
    v2(0, a1, 0, 0);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterIN10applesauce2CF13DictionaryRefEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

CFTypeRef *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::operator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v4, (void *)(a1 + 8));
  double result = AMCP::Thing::convert_to<applesauce::CF::DictionaryRef>(a2, (uint64_t)v4);
  if (v5) {
    return (CFTypeRef *)v5(0, v4, 0, 0);
  }
  return result;
}

void sub_1BAD3F7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(void, char *, void, void))
{
  if (a14) {
    a14(0, &a10, 0, 0);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146E6F8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F146E6F8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAD3F904(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146E6F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,applesauce::CF::DictionaryRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146E6F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyIN10applesauce2CF13DictionaryRefEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2, 0);
  }
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void (*)(void, void *, void, void))__p[5];
  if (v2) {
    v2(0, __p + 1, 0, 0);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void, uint64_t, void, void))(result + 40);
  if (v1) {
    return v1(0, result + 8, 0, 0);
  }
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F146E678;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2 + 8, 0);
  }
  return result;
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F146E678;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = 0;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, char *, void))(a1 + 40);
  if (v3) {
    v3(1, a1 + 8, v2 + 8, 0);
  }
  return v2;
}

void sub_1BAD3FB80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146E678;
  uint64_t v1 = (void (*)(void, void *, void, void))a1[5];
  if (v1) {
    v1(0, a1 + 1, 0, 0);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<applesauce::CF::DictionaryRef>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146E678;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[5];
  if (v2) {
    v2(0, a1 + 1, 0, 0);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  uint64_t v2 = *(void (**)(void, uint64_t, void, void))(a1 + 32);
  if (v2) {
    v2(0, a1, 0, 0);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterIN2CA13ChannelLayoutEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::operator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v4, (void *)(a1 + 8));
  double result = AMCP::Thing::convert_to<CA::ChannelLayout>(a2, (uint64_t)v4);
  if (v5) {
    return (void *)v5(0, v4, 0, 0);
  }
  return result;
}

void sub_1BAD3FD60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(void, char *, void, void))
{
  if (a14) {
    a14(0, &a10, 0, 0);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146E5F8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F146E5F8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAD3FE9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146E5F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ChannelLayout ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146E5F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyIN2CA13ChannelLayoutEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2, 0);
  }
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void (*)(void, void *, void, void))__p[5];
  if (v2) {
    v2(0, __p + 1, 0, 0);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void, uint64_t, void, void))(result + 40);
  if (v1) {
    return v1(0, result + 8, 0, 0);
  }
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F146E578;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2 + 8, 0);
  }
  return result;
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F146E578;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = 0;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, char *, void))(a1 + 40);
  if (v3) {
    v3(1, a1 + 8, v2 + 8, 0);
  }
  return v2;
}

void sub_1BAD40118(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146E578;
  uint64_t v1 = (void (*)(void, void *, void, void))a1[5];
  if (v1) {
    v1(0, a1 + 1, 0, 0);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ChannelLayout>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146E578;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[5];
  if (v2) {
    v2(0, a1 + 1, 0, 0);
  }
  return a1;
}

std::__shared_mutex_base *AMCP::Null::Device::destroy_cores(std::__shared_mutex_base *this)
{
  uint64_t v2 = *(uint64_t **)&this->__gate2_.__cv_.__opaque[24];
  uint64_t v3 = *(uint64_t **)&this->__gate2_.__cv_.__opaque[32];
  while (v2 != v3)
  {
    uint64_t v4 = *v2;
    v2 += 2;
    (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
  }
  uint64_t v5 = *(uint64_t **)this->__gate2_.__cv_.__opaque;
  char v6 = *(uint64_t **)&this->__gate2_.__cv_.__opaque[8];
  while (v5 != v6)
  {
    uint64_t v7 = *v5;
    v5 += 2;
    (*(void (**)(uint64_t))(*(void *)v7 + 32))(v7);
  }

  return AMCP::Null::Object::destroy_cores(this);
}

uint64_t AMCP::Null::Device::update_cores(AMCP::Null::Device *this, CFDictionaryRef *a2, int16x8_t a3)
{
  if (!*((void *)this + 6))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_58;
  }
  CFTypeRef cf = (CFTypeRef)0x696E707473746D23;
  int v34 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&cf, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (p_p)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v7 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
    if (!v7)
    {
      uint64_t v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v23, "Could not construct");
      __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v36, *((CFDictionaryRef *)this + 6), v7);
    CFRelease(v7);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v36, *((CFDictionaryRef *)this + 6), 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!*((void *)this + 6))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_58;
  }
  uint64_t v31 = 0x6F75747073746D23;
  int v32 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v31, v8);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFArrayRef v9 = &__p;
  }
  else {
    CFArrayRef v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v9)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v10 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v11 = CFStringCreateWithBytes(0, (const UInt8 *)v9, v10, 0x8000100u, 0);
    if (!v11)
    {
      unint64_t v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v24, "Could not construct");
      __cxa_throw(v24, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&cf, *((CFDictionaryRef *)this + 6), v11);
    CFRelease(v11);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&cf, *((CFDictionaryRef *)this + 6), 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!*a2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_58;
  }
  uint64_t v29 = 0x696E707473746D23;
  int v30 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v29, v12);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFStringRef v13 = &__p;
  }
  else {
    CFStringRef v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v13)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v14 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v15 = CFStringCreateWithBytes(0, (const UInt8 *)v13, v14, 0x8000100u, 0);
    if (!v15)
    {
      uint64_t v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v25, "Could not construct");
      __cxa_throw(v25, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v31, *a2, v15);
    CFRelease(v15);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v31, *a2, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!*a2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_58:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v27 = 0x6F75747073746D23;
  int v28 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v27, v16);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v17 = &__p;
  }
  else {
    char v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v17)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v18 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v19 = CFStringCreateWithBytes(0, (const UInt8 *)v17, v18, 0x8000100u, 0);
    if (!v19)
    {
      unint64_t v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v26, "Could not construct");
      __cxa_throw(v26, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v29, *a2, v19);
    CFRelease(v19);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v29, *a2, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  AMCP::Null::Object::update_cores(this, a2, v20);
  AMCP::Null::Device::update_stream_list((uint64_t)this, (uint64_t *)this + 15, v36, v37, (uint64_t)&v31);
  AMCP::Null::Device::update_stream_list((uint64_t)this, (uint64_t *)this + 18, cf, v34, (uint64_t)&v29);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v29);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v31);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
  return std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v36);
}

void sub_1BAD40760(void *a1)
{
}

void AMCP::Null::Device::update_stream_list(uint64_t a1, uint64_t *a2, CFTypeRef cf, char a4, uint64_t a5)
{
  if (a4)
  {
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef cfa = cf;
  }
  else
  {
    CFArrayRef v9 = CFArrayCreate(0, 0, 0, MEMORY[0x1E4F1D518]);
    applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&cfa, v9);
  }
  if (*(unsigned char *)(a5 + 8))
  {
    CFArrayRef v10 = *(CFArrayRef *)a5;
    if (v10) {
      CFRetain(v10);
    }
    CFArrayRef theArray = v10;
    if (!v10) {
      goto LABEL_31;
    }
  }
  else
  {
    CFArrayRef v39 = CFArrayCreate(0, 0, 0, MEMORY[0x1E4F1D518]);
    applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&theArray, v39);
    CFArrayRef v10 = theArray;
    if (!theArray) {
      goto LABEL_31;
    }
  }
  if (CFArrayGetCount(v10) < (unint64_t)((a2[1] - *a2) >> 4))
  {
    if (theArray)
    {
      uint64_t v11 = *a2;
      int16x8_t v12 = (uint64_t *)(v11 + 16 * (int)CFArrayGetCount(theArray));
      if (v12 != (uint64_t *)a2[1])
      {
        CFStringRef v13 = v12;
        do
        {
          uint64_t v14 = *v13;
          v13 += 2;
          (*(void (**)(uint64_t))(*(void *)v14 + 32))(v14);
        }
        while (v13 != (uint64_t *)a2[1]);
        if (v12 != v13)
        {
          while (v13 != v12)
          {
            CFStringRef v15 = (std::__shared_weak_count *)*(v13 - 1);
            if (v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            v13 -= 2;
          }
          a2[1] = (uint64_t)v12;
        }
      }
      goto LABEL_22;
    }
LABEL_31:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_74;
  }
LABEL_22:
  CFArrayRef v16 = theArray;
  if (!theArray) {
    goto LABEL_31;
  }
  uint64_t v17 = 0;
  unint64_t v18 = 0;
  while (1)
  {
    unint64_t Count = CFArrayGetCount(v16);
    unint64_t v20 = (a2[1] - *a2) >> 4;
    if (v18 >= Count || v18 >= v20) {
      break;
    }
    if (theArray)
    {
      applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&v48, theArray, v18);
      if ((_BYTE)v49)
      {
        if (v18 >= (a2[1] - *a2) >> 4) {
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        }
        (*(void (**)(void, char **))(**(void **)(*a2 + v17) + 24))(*(void *)(*a2 + v17), &v48);
      }
      std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v48);
      ++v18;
      CFArrayRef v16 = theArray;
      v17 += 16;
      if (theArray) {
        continue;
      }
    }
    goto LABEL_31;
  }
  if (!theArray) {
    goto LABEL_31;
  }
  if (v20 >= CFArrayGetCount(theArray)) {
    goto LABEL_64;
  }
  CFArrayRef v22 = theArray;
  if (!theArray)
  {
LABEL_73:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_74:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v23 = (a2[1] - *a2) >> 4;
  while (v23 < CFArrayGetCount(v22))
  {
    if (theArray)
    {
      applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&v44, theArray, v23);
      if (v45)
      {
        unint64_t v24 = *(std::__shared_weak_count **)(a1 + 16);
        v42[0] = *(void *)(a1 + 8);
        v42[1] = v24;
        if (v24) {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v25 = *(_DWORD *)(a1 + 40);
        std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v40, *(void *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
        AMCP::Null::make_object((uint64_t)&v43, (uint64_t)v42, v25, &v40, &v44, 0, v26);
        if (v41) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v41);
        }
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        if ((void)v43)
        {
          uint64_t v27 = (void *)a2[1];
          unint64_t v28 = a2[2];
          if ((unint64_t)v27 >= v28)
          {
            uint64_t v31 = ((uint64_t)v27 - *a2) >> 4;
            unint64_t v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 60) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v33 = v28 - *a2;
            if (v33 >> 3 > v32) {
              unint64_t v32 = v33 >> 3;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v32;
            }
            CFIndex v52 = a2 + 2;
            BOOL v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v34);
            CFTypeRef v36 = &v35[16 * v31];
            CFStringRef v48 = v35;
            BOOL v49 = v36;
            uint64_t v51 = &v35[16 * v37];
            uint64_t v38 = *((void *)&v43 + 1);
            *(_OWORD *)CFTypeRef v36 = v43;
            if (v38) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
            }
            int16x8_t v50 = v36 + 16;
            std::vector<std::shared_ptr<DSP_Host_Types::FormatDescription>>::__swap_out_circular_buffer(a2, &v48);
            int v30 = (void *)a2[1];
            std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v48);
          }
          else
          {
            uint64_t v29 = *((void *)&v43 + 1);
            *uint64_t v27 = v43;
            v27[1] = v29;
            if (v29) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
            }
            int v30 = v27 + 2;
          }
          a2[1] = (uint64_t)v30;
          (*(void (**)(void))(*(void *)v43 + 16))(v43);
        }
        if (*((void *)&v43 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v43 + 1));
        }
      }
      std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v44);
      ++v23;
      CFArrayRef v22 = theArray;
      if (theArray) {
        continue;
      }
    }
    goto LABEL_73;
  }
LABEL_64:
  if (theArray) {
    CFRelease(theArray);
  }
  if (cfa) {
    CFRelease(cfa);
  }
}

void sub_1BAD40CDC(void *a1)
{
  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Null::Device::build_cores(AMCP::Null::Device *this)
{
  AMCP::Null::Object::build_cores(this);
  if (!*((void *)this + 6))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_50;
  }
  v2.i64[0] = 0x696E707473746D23;
  uint64_t v31 = 0x696E707473746D23;
  LODWORD(v32) = 0;
  AMCP::Address::to_string(&v37, (unsigned int *)&v31, v2);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v3 = &v37;
  }
  else {
    uint64_t v3 = (std::string *)v37.__r_.__value_.__r.__words[0];
  }
  if (v3)
  {
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = v37.__r_.__value_.__l.__size_;
    }
    CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)v3, size, 0x8000100u, 0);
    if (!v5)
    {
      unint64_t v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v24, "Could not construct");
      __cxa_throw(v24, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v38, *((CFDictionaryRef *)this + 6), v5);
    CFRelease(v5);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v38, *((CFDictionaryRef *)this + 6), 0);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (v39)
  {
    CFStringRef v7 = (std::__shared_weak_count *)*((void *)this + 2);
    v36[0] = *((void *)this + 1);
    v36[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v8 = *((_DWORD *)this + 10);
    std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v34, *((void *)this + 3), *((std::__shared_weak_count **)this + 4));
    uint64_t v31 = 0;
    unint64_t v32 = 0;
    uint64_t v33 = 0;
    CFArrayRef v9 = (unsigned int *)operator new(8uLL);
    *(void *)CFArrayRef v9 = 0x161737472;
    unint64_t v32 = v9 + 2;
    uint64_t v33 = v9 + 2;
    uint64_t v31 = (uint64_t)v9;
    AMCP::Null::make_object_list(&v37, v36, v8, &v34, &v38, (unsigned int **)&v31);
    std::vector<std::shared_ptr<AMCP::IOAudio2::Stream>>::__vdeallocate((uint64_t *)this + 15);
    *((std::string *)this + 5) = v37;
    memset(&v37, 0, sizeof(v37));
    uint64_t v29 = &v37;
    std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
    operator delete(v9);
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  if (!*((void *)this + 6))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_50:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v6.i64[0] = 0x6F75747073746D23;
  uint64_t v31 = 0x6F75747073746D23;
  LODWORD(v32) = 0;
  AMCP::Address::to_string(&v37, (unsigned int *)&v31, v6);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFArrayRef v10 = &v37;
  }
  else {
    CFArrayRef v10 = (std::string *)v37.__r_.__value_.__r.__words[0];
  }
  if (v10)
  {
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v11 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v11 = v37.__r_.__value_.__l.__size_;
    }
    CFStringRef v12 = CFStringCreateWithBytes(0, (const UInt8 *)v10, v11, 0x8000100u, 0);
    if (!v12)
    {
      int v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v25, "Could not construct");
      __cxa_throw(v25, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v29, *((CFDictionaryRef *)this + 6), v12);
    CFRelease(v12);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v29, *((CFDictionaryRef *)this + 6), 0);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if (v30)
  {
    CFStringRef v13 = (std::__shared_weak_count *)*((void *)this + 2);
    v28[0] = *((void *)this + 1);
    v28[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v14 = *((_DWORD *)this + 10);
    std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v26, *((void *)this + 3), *((std::__shared_weak_count **)this + 4));
    uint64_t v31 = 0;
    unint64_t v32 = 0;
    uint64_t v33 = 0;
    CFStringRef v15 = (unsigned int *)operator new(8uLL);
    *(void *)CFStringRef v15 = 0x161737472;
    unint64_t v32 = v15 + 2;
    uint64_t v33 = v15 + 2;
    uint64_t v31 = (uint64_t)v15;
    AMCP::Null::make_object_list(&v37, v28, v14, &v26, (CFArrayRef *)&v29, (unsigned int **)&v31);
    std::vector<std::shared_ptr<AMCP::IOAudio2::Stream>>::__vdeallocate((uint64_t *)this + 18);
    *((std::string *)this + 6) = v37;
    memset(&v37, 0, sizeof(v37));
    uint64_t v40 = &v37;
    std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
    operator delete(v15);
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  CFArrayRef v16 = (uint64_t *)*((void *)this + 15);
  uint64_t v17 = (uint64_t *)*((void *)this + 16);
  while (v16 != v17)
  {
    uint64_t v18 = *v16;
    v16 += 2;
    (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
  }
  unint64_t v20 = (uint64_t *)*((void *)this + 18);
  CFStringRef v19 = (uint64_t *)*((void *)this + 19);
  while (v20 != v19)
  {
    uint64_t v21 = *v20;
    v20 += 2;
    (*(void (**)(uint64_t))(*(void *)v21 + 16))(v21);
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v29);
  return std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v38);
}

void sub_1BAD411AC(void *a1)
{
}

void AMCP::Null::Device::~Device(std::__shared_mutex_base *this)
{
  this->__mut_.__m_.__sig = (uint64_t)&unk_1F146D4E8;
  sig = (const void *)this[1].__mut_.__m_.__sig;
  if (sig) {
    CFRelease(sig);
  }
  opaque = (void **)&this->__gate2_.__cv_.__opaque[24];
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&opaque);
  opaque = (void **)this->__gate2_.__cv_.__opaque;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&opaque);
  AMCP::Null::Object::~Object(this);

  JUMPOUT(0x1C1859840);
}

{
  const void *sig;
  void **opaque;
  uint64_t vars8;

  this->__mut_.__m_.__sig = (uint64_t)&unk_1F146D4E8;
  sig = (const void *)this[1].__mut_.__m_.__sig;
  if (sig) {
    CFRelease(sig);
  }
  opaque = (void **)&this->__gate2_.__cv_.__opaque[24];
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&opaque);
  opaque = (void **)this->__gate2_.__cv_.__opaque;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&opaque);

  AMCP::Null::Object::~Object(this);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Device>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::Null::Device>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FD08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Null::Device>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FD08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMCP::Null::Slider_Control::do_set_property(AMCP::Null::Slider_Control *this, int a2, const AMCP::Address *a3, const AMCP::Thing *a4, int16x8_t a5)
{
  if (*(_DWORD *)a3 == 1935962742)
  {
    if (!*((void *)this + 6))
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    a5.i64[0] = 0x676C6F6273647272;
    uint64_t v33 = 0x676C6F6273647272;
    int v34 = 0;
    AMCP::Address::to_string((std::string *)__p, (unsigned int *)&v33, a5);
    if ((SBYTE7(v41) & 0x80u) == 0) {
      CFStringRef v7 = __p;
    }
    else {
      CFStringRef v7 = (void **)__p[0];
    }
    if (v7)
    {
      if ((SBYTE7(v41) & 0x80u) == 0) {
        CFIndex v8 = BYTE7(v41);
      }
      else {
        CFIndex v8 = (CFIndex)__p[1];
      }
      CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)v7, v8, 0x8000100u, 0);
      if (!v9)
      {
        uint64_t v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v31, "Could not construct");
        __cxa_throw(v31, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v36, *((CFDictionaryRef *)this + 6), v9);
      CFRelease(v9);
    }
    else
    {
      applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v36, *((CFDictionaryRef *)this + 6), 0);
    }
    if (SBYTE7(v41) < 0) {
      operator delete(__p[0]);
    }
    if (!v37)
    {
      LODWORD(v15) = 0;
      LODWORD(v16) = 0;
LABEL_37:
      unsigned int v19 = AMCP::Thing::convert_to<unsigned int>((uint64_t)a4);
      if (v19 >= v16) {
        unsigned int v20 = v16;
      }
      else {
        unsigned int v20 = v19;
      }
      if (v15 <= v20) {
        unsigned int v21 = v20;
      }
      else {
        unsigned int v21 = v15;
      }
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, *((CFDictionaryRef *)this + 6));
      v23.i64[0] = 0x676C6F6273647276;
      uint64_t v33 = 0x676C6F6273647276;
      int v34 = 0;
      AMCP::Address::to_string((std::string *)__p, (unsigned int *)&v33, v23);
      if ((SBYTE7(v41) & 0x80u) == 0) {
        unint64_t v24 = __p;
      }
      else {
        unint64_t v24 = (void **)__p[0];
      }
      if (v24)
      {
        if ((SBYTE7(v41) & 0x80u) == 0) {
          CFIndex v25 = BYTE7(v41);
        }
        else {
          CFIndex v25 = (CFIndex)__p[1];
        }
        CFStringRef v26 = CFStringCreateWithBytes(0, (const UInt8 *)v24, v25, 0x8000100u, 0);
        if (!v26)
        {
          uint64_t v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v27, "Could not construct");
          __cxa_throw(v27, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
      else
      {
        CFStringRef v26 = 0;
      }
      LODWORD(valuePtr) = v21;
      CFNumberRef v28 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      if (!v28)
      {
        char v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v30, "Could not construct");
        __cxa_throw(v30, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v26, v28);
      CFRelease(v28);
      if (v26) {
        CFRelease(v26);
      }
      if (SBYTE7(v41) < 0) {
        operator delete(__p[0]);
      }
      mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)__p, MutableCopy);
      (*(void (**)(AMCP::Null::Slider_Control *, void **))(*(void *)this + 24))(this, __p);
      if (__p[0]) {
        CFRelease(__p[0]);
      }
      AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*((void *)this + 1) + 32), *((_DWORD *)this + 22));
      if (MutableCopy) {
        CFRelease(MutableCopy);
      }
      std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v36);
      return 257;
    }
    AMCP::make_thing_from_description((AMCP *)&v33, &v36);
    uint64_t v32 = 0;
    if (v35)
    {
      CFIndex v11 = (void *)AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>();
      CFStringRef v12 = v35;
      __p[0] = 0;
      if (v35)
      {
        v35(3, &v33, 0, __p);
        CFStringRef v12 = __p[0];
      }
      if (v12 == v11)
      {
        __p[0] = v11;
        uint64_t v13 = ((uint64_t (*)(uint64_t, uint64_t *, void, void **))v35)(4, &v33, 0, __p);
        int v14 = (unint64_t *)&v32;
        if (v13) {
          int v14 = (unint64_t *)v13;
        }
        unint64_t v15 = *v14;
        goto LABEL_34;
      }
      uint64_t valuePtr = AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>();
      *(_OWORD *)std::string __p = 0u;
      long long v41 = 0u;
      int v42 = 0;
      v35(6, &v33, __p, &valuePtr);
      if (v42)
      {
        CFArrayRef v38 = v11;
        uint64_t v17 = v42(4, __p, 0, &v38);
        if (v17) {
          uint64_t v18 = (unint64_t *)v17;
        }
        else {
          uint64_t v18 = (unint64_t *)&v32;
        }
        unint64_t v15 = *v18;
        if (v42) {
          v42(0, __p, 0, 0);
        }
        goto LABEL_34;
      }
    }
    unint64_t v15 = 0;
LABEL_34:
    if (v35) {
      v35(0, &v33, 0, 0);
    }
    unint64_t v16 = HIDWORD(v15);
    goto LABEL_37;
  }

  return AMCP::Null::Object::do_set_property(this, a2, a3, a4);
}

void sub_1BAD4183C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Null::Slider_Control::populate_core@<X0>(AMCP::Null::Slider_Control *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  AMCP::Null::Control::populate_core((CFDictionaryRef *)this, a2, a3);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v34, *((void *)this + 3), *((std::__shared_weak_count **)this + 4));
  v31.__r_.__value_.__s.__data_[0] = 0;
  char v33 = 0;
  uint64_t v6 = v34;
  CFStringRef v5 = v35;
  if (v35) {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  strcpy((char *)v36, "vrdsbolg");
  BYTE1(v36[2]) = 0;
  HIWORD(v36[2]) = 0;
  CFDictionaryRef v44 = 0;
  memset(v43, 0, sizeof(v43));
  if (!*((void *)this + 6))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string((std::string *)__p, v36, (int16x8_t)0);
  if ((SBYTE7(v47) & 0x80u) == 0) {
    CFStringRef v7 = __p;
  }
  else {
    CFStringRef v7 = (void **)__p[0];
  }
  if (v7)
  {
    if ((SBYTE7(v47) & 0x80u) == 0) {
      CFIndex v8 = BYTE7(v47);
    }
    else {
      CFIndex v8 = (CFIndex)__p[1];
    }
    CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)v7, v8, 0x8000100u, 0);
    if (!v9)
    {
      CFNumberRef v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v28, "Could not construct");
      __cxa_throw(v28, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v41, *((CFDictionaryRef *)this + 6), v9);
    CFRelease(v9);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v41, *((CFDictionaryRef *)this + 6), 0);
  }
  if (SBYTE7(v47) < 0) {
    operator delete(__p[0]);
  }
  if (v42)
  {
    AMCP::make_thing_from_description((AMCP *)__p, &v41);
    AMCP::swap((AMCP::Thing *)__p, (AMCP::Thing *)v43, v10);
    if (v48) {
      v48(0, (uint64_t)__p, 0, 0);
    }
  }
  if (v44)
  {
    uint64_t v30 = *(void *)&v36[1];
    uint64_t v40 = 0;
    memset(v39, 0, sizeof(v39));
    v44(1, v43, v39, 0);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(v45[0]) = 1935962742;
    *(void *)((char *)v45 + 4) = v30;
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v37, SHIDWORD(v30), v45[0]);
    uint64_t v11 = v37;
    unint64_t v12 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    long long v51 = 0u;
    long long v52 = 0u;
    CFStringRef v53 = 0;
    if (v40) {
      v40(2, v39, &v51, 0);
    }
    *((void *)&v59 + 1) = 0;
    uint64_t v13 = (char *)operator new(0x30uLL);
    *(void *)uint64_t v13 = &unk_1F146EEF8;
    *(_OWORD *)(v13 + 8) = 0u;
    *(_OWORD *)(v13 + 24) = 0u;
    *((void *)v13 + 5) = 0;
    if (v53) {
      v53(2, &v51, v13 + 8, 0);
    }
    *((void *)&v59 + 1) = v13;
    *(_OWORD *)std::string __p = 0u;
    long long v47 = 0u;
    CFStringRef v48 = 0;
    std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v58);
    CFStringRef v48 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v11, v12, (AMCP *)__p);
    if (v48) {
      v48(0, (uint64_t)__p, 0, 0);
    }
    std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](&v58);
    if (v53) {
      v53(0, &v51, 0, 0);
    }
    AMCP::Core::Operation_Utilities::add_specific_property_getter<unsigned int>(v11);
    unint64_t v14 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    *((void *)&v52 + 1) = 0;
    unint64_t v15 = operator new(0x28uLL);
    *unint64_t v15 = &unk_1F146EF78;
    v15[1] = v6;
    uint64_t v15[2] = v5;
    void v15[3] = 0x676C6F6273647276;
    *((_DWORD *)v15 + 8) = HIDWORD(v30);
    *((void *)&v52 + 1) = v15;
    *(_OWORD *)std::string __p = 0u;
    long long v47 = 0u;
    CFStringRef v48 = 0;
    std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v51);
    CFStringRef v48 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v11, v14, (AMCP *)__p);
    if (v48) {
      v48(0, (uint64_t)__p, 0, 0);
    }
    unint64_t v16 = std::__function::__value_func<void ()(AMCP::Thing const&)>::~__value_func[abi:ne180100](&v51);
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)v16, v11);
    uint64_t v54 = *(void *)(v11 + 40);
    int v55 = *(_DWORD *)(v11 + 48);
    unint64_t v17 = AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int const&)>>();
    long long v18 = v51;
    long long v51 = 0uLL;
    *(_OWORD *)std::string __p = v18;
    long long v47 = v52;
    LODWORD(v48) = v53;
    if (*((void *)&v52 + 1))
    {
      unint64_t v19 = *(void *)(v52 + 8);
      if ((*((void *)&v18 + 1) & (*((void *)&v18 + 1) - 1)) != 0)
      {
        if (v19 >= *((void *)&v18 + 1)) {
          v19 %= *((void *)&v18 + 1);
        }
      }
      else
      {
        v19 &= *((void *)&v18 + 1) - 1;
      }
      *(void *)(v18 + 8 * v19) = &v47;
      long long v52 = 0uLL;
    }
    uint64_t v49 = v54;
    int v50 = v55;
    unint64_t v57 = 0;
    unsigned int v20 = operator new(0x40uLL);
    *unsigned int v20 = &unk_1F146EFF8;
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v20 + 1), (uint64_t *)__p);
    void v20[6] = v49;
    *((_DWORD *)v20 + 14) = v50;
    unint64_t v57 = v20;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v60 = 0;
    std::__function::__value_func<void ()(unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)&v58, (uint64_t)v56);
    long long v60 = AMCP::Implementation::In_Place_Storage<std::function<void ()(unsigned int const&)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v11, v17, (AMCP *)&v58);
    if (v60) {
      v60(0, (uint64_t)&v58, 0, 0);
    }
    std::__function::__value_func<void ()(unsigned int const&)>::~__value_func[abi:ne180100](v56);
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v51);
    if (v40) {
      v40(0, v39, 0, 0);
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v37 = 0;
    CFArrayRef v38 = 0;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v41);
  if (v44) {
    v44(0, v43, 0, 0);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v11) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v11 + 40), &v37);
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v31);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  LOBYTE(__p[0]) = 0;
  LOBYTE(v49) = 0;
  *(void *)&v39[0] = 0x676C6F6273647272;
  DWORD2(v39[0]) = 0;
  CFStringRef v53 = 0;
  long long v51 = 0u;
  long long v52 = 0u;
  if (!*((void *)this + 6))
  {
    uint64_t v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v27, "Could not construct");
    __cxa_throw(v27, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string(&v31, (unsigned int *)v39, (int16x8_t)0);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v21 = &v31;
  }
  else {
    unsigned int v21 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  if (v21)
  {
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = v31.__r_.__value_.__l.__size_;
    }
    CFStringRef v23 = CFStringCreateWithBytes(0, (const UInt8 *)v21, size, 0x8000100u, 0);
    if (!v23)
    {
      uint64_t v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v29, "Could not construct");
      __cxa_throw(v29, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v58, *((CFDictionaryRef *)this + 6), v23);
    CFRelease(v23);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v58, *((CFDictionaryRef *)this + 6), 0);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (!BYTE8(v58)) {
    goto LABEL_71;
  }
  AMCP::make_thing_from_description((AMCP *)&v31, (CFTypeRef *)&v58);
  AMCP::swap((AMCP::Thing *)&v31, (AMCP::Thing *)&v51, v24);
  if (v32) {
    v32(0, &v31, 0, 0);
  }
  if (v53)
  {
    LODWORD(v43[0]) = 1935962738;
    *(void *)((char *)v43 + 4) = *(void *)((char *)v39 + 4);
    AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>((uint64_t *)&v31, (uint64_t)v43, (uint64_t)&v51);
  }
  else
  {
LABEL_71:
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v58);
  if (v53) {
    v53(0, &v51, 0, 0);
  }
  if (v31.__r_.__value_.__r.__words[0]) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v31.__r_.__value_.__r.__words[0] + 40), &v31);
  }
  if (v31.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v31.__r_.__value_.__l.__size_);
  }
  return std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
}

void sub_1BAD420AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  unint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  CFStringRef v5 = *(void (**)(uint64_t, uint64_t, _OWORD *, void))(a3 + 32);
  if (v5) {
    v5(1, a3, v14, 0);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, *(_DWORD *)(a2 + 8), *(double *)a2);
  uint64_t v6 = *a1;
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0;
  if (v15) {
    v15(1, v14, &v16, 0);
  }
  *((void *)&v29 + 1) = 0;
  CFIndex v8 = (char *)operator new(0x30uLL);
  *(void *)CFIndex v8 = &unk_1F146F078;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *((void *)v8 + 5) = 0;
  if (v18) {
    v18(1, &v16, v8 + 8, 0);
  }
  *((void *)&v29 + 1) = v8;
  long long v21 = 0u;
  long long v22 = 0u;
  CFStringRef v23 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)&v21, (uint64_t)&v28);
  CFStringRef v23 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)&v21);
  if (v23) {
    v23(0, (uint64_t)&v21, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](&v28);
  if (v18) {
    v18(0, &v16, 0, 0);
  }
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v16, v6);
  uint64_t v19 = *(void *)(v6 + 40);
  int v20 = *(_DWORD *)(v6 + 48);
  unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>();
  long long v10 = v16;
  long long v16 = 0uLL;
  long long v21 = v10;
  long long v22 = v17;
  LODWORD(v23) = v18;
  if (*((void *)&v17 + 1))
  {
    unint64_t v11 = *(void *)(v17 + 8);
    if ((*((void *)&v10 + 1) & (*((void *)&v10 + 1) - 1)) != 0)
    {
      if (v11 >= *((void *)&v10 + 1)) {
        v11 %= *((void *)&v10 + 1);
      }
    }
    else
    {
      v11 &= *((void *)&v10 + 1) - 1;
    }
    *(void *)(v10 + 8 * v11) = &v22;
    long long v17 = 0uLL;
  }
  uint64_t v24 = v19;
  int v25 = v20;
  uint64_t v27 = 0;
  unint64_t v12 = operator new(0x40uLL);
  *unint64_t v12 = &unk_1F146F0F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v12 + 1), (uint64_t *)&v21);
  void v12[6] = v24;
  *((_DWORD *)v12 + 14) = v25;
  uint64_t v27 = v12;
  long long v28 = 0u;
  long long v29 = 0u;
  uint64_t v30 = 0;
  std::__function::__value_func<std::tuple<unsigned int,unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)&v28, (uint64_t)v26);
  uint64_t v30 = AMCP::Implementation::In_Place_Storage<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v9, (AMCP *)&v28);
  if (v30) {
    v30(0, (uint64_t)&v28, 0, 0);
  }
  std::__function::__value_func<std::tuple<unsigned int,unsigned int> ()(void)>::~__value_func[abi:ne180100](v26);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v21);
  uint64_t result = std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v16);
  if (v15) {
    return ((uint64_t (*)(void, _OWORD *, void, void))v15)(0, v14, 0, 0);
  }
  return result;
}

void sub_1BAD42464(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  int16x8_t v2 = *(void (**)(void, uint64_t, void, void))(a1 + 32);
  if (v2) {
    v2(0, a1, 0, 0);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterINSt3__15tupleIJjjEEEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::operator()(uint64_t a1)
{
  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v3, (void *)(a1 + 8));
  uint64_t v1 = AMCP::Thing::convert_to<std::tuple<unsigned int,unsigned int>>((uint64_t)v3);
  if (v4) {
    v4(0, v3, 0, 0);
  }
  return v1;
}

void sub_1BAD425BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(void, char *, void, void))
{
  if (a14) {
    a14(0, &a10, 0, 0);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146F0F8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F146F0F8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAD426F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146F0F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,std::tuple<unsigned int,unsigned int> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146F0F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyINSt3__15tupleIJjjEEEEENS3_10shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2, 0);
  }
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void (*)(void, void *, void, void))__p[5];
  if (v2) {
    v2(0, __p + 1, 0, 0);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void, uint64_t, void, void))(result + 40);
  if (v1) {
    return v1(0, result + 8, 0, 0);
  }
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F146F078;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2 + 8, 0);
  }
  return result;
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F146F078;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = 0;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, char *, void))(a1 + 40);
  if (v3) {
    v3(1, a1 + 8, v2 + 8, 0);
  }
  return v2;
}

void sub_1BAD42974(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146F078;
  uint64_t v1 = (void (*)(void, void *, void, void))a1[5];
  if (v1) {
    v1(0, a1 + 1, 0, 0);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<std::tuple<unsigned int,unsigned int>>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146F078;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[5];
  if (v2) {
    v2(0, a1 + 1, 0, 0);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_setterIjEEvRNS0_9OperationEEUlRKjE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::operator()(uint64_t a1, _DWORD *a2)
{
  memset(v3, 0, sizeof(v3));
  LODWORD(v3[0]) = *a2;
  uint64_t v4 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
  uint64_t result = AMCP::Core::Operation::call_function<void,AMCP::Thing const&>((void *)(a1 + 8), (uint64_t)v3);
  if (v4) {
    return ((uint64_t (*)(void, _OWORD *, void, void))v4)(0, v3, 0, 0);
  }
  return result;
}

void sub_1BAD42B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(void, uint64_t *, void, void))
{
  if (a13) {
    a13(0, &a9, 0, 0);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146EFF8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F146EFF8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAD42C5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146EFF8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(unsigned int const&)#1}>,void ()(unsigned int const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146EFF8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1935962742EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlRKSI_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(unsigned int **)(a1 + 16);
  if (!v3
    || (uint64_t v3 = (unsigned int *)std::__shared_weak_count::lock((std::__shared_weak_count *)v3),
        (CFStringRef v5 = (std::__shared_weak_count *)v3) == 0)
    || (uint64_t v3 = *(unsigned int **)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v7 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      CFIndex v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)long long v29 = 2080;
      *(void *)&v29[2] = "Null_Object.cpp";
      __int16 v30 = 1024;
      int v31 = 59;
      __int16 v32 = 2080;
      *(void *)char v33 = "object_ptr.operator BOOL() == false";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no model object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v20, "no model object");
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    long long v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v33[6] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    int v35 = 59;
    std::vector<void *>::vector(&v15);
    int v10 = backtrace((void **)v15, (*((void *)&v15 + 1) - (void)v15) >> 3);
    std::vector<void *>::resize((char **)&v15, v10);
    long long v17 = &unk_1F148AA90;
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(unsigned int *, void, uint64_t, uint64_t))(*(void *)v3 + 40))(v3, v3[22], a1 + 24, a2);
  if (!(_BYTE)v6)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      unint64_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)long long v29 = 2080;
      *(void *)&v29[2] = "Null_Object.cpp";
      __int16 v30 = 1024;
      int v31 = 61;
      __int16 v32 = 2080;
      *(void *)char v33 = "was_handled == Object::Was_Handled::no";
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not handled", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v20, "not handled");
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    long long v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v33[6] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    int v35 = 61;
    std::vector<void *>::vector(&v15);
    int v14 = backtrace((void **)v15, (*((void *)&v15 + 1) - (void)v15) >> 3);
    std::vector<void *>::resize((char **)&v15, v14);
    long long v17 = &unk_1F148AA90;
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1BAD433F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,uint64_t a29)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F146EF78;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  double result = *(double *)(a1 + 24);
  *(double *)(a2 + 24) = result;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (double *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F146EF78;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  double result = *(double *)(a1 + 24);
  v2[3] = result;
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146EF78;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146EF78;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1935962742EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2, 0);
  }
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void (*)(void, void *, void, void))__p[5];
  if (v2) {
    v2(0, __p + 1, 0, 0);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  uint64_t v1 = *(uint64_t (**)(void, uint64_t, void, void))(result + 40);
  if (v1) {
    return v1(0, result + 8, 0, 0);
  }
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F146EEF8;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2 + 8, 0);
  }
  return result;
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F146EEF8;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = 0;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, char *, void))(a1 + 40);
  if (v3) {
    v3(1, a1 + 8, v2 + 8, 0);
  }
  return v2;
}

void sub_1BAD4394C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146EEF8;
  uint64_t v1 = (void (*)(void, void *, void, void))a1[5];
  if (v1) {
    v1(0, a1 + 1, 0, 0);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1935962742u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146EEF8;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[5];
  if (v2) {
    v2(0, a1 + 1, 0, 0);
  }
  return a1;
}

void AMCP::Null::Slider_Control::~Slider_Control(std::__shared_mutex_base *this)
{
  AMCP::Null::Object::~Object(this);

  JUMPOUT(0x1C1859840);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Slider_Control>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::Null::Slider_Control>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FCB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Null::Slider_Control>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FCB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMCP::Null::Level_Control::do_set_property(AMCP::Null::Level_Control *this, int a2, const AMCP::Address *a3, const AMCP::Thing *a4, int16x8_t a5)
{
  if (*(_DWORD *)a3 == 1818453110)
  {
    if (*((void *)this + 6))
    {
      a5.i64[0] = 0x676C6F626C636472;
      uint64_t v59 = 0x676C6F626C636472;
      LODWORD(v60) = 0;
      AMCP::Address::to_string(&__p, (unsigned int *)&v59, a5);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (p_p)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          CFIndex size = __p.__r_.__value_.__l.__size_;
        }
        CFStringRef v12 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
        if (!v12)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v63, *((CFDictionaryRef *)this + 6), v12);
        CFRelease(v12);
      }
      else
      {
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v63, *((CFDictionaryRef *)this + 6), 0);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v64)
      {
        AMCP::make_thing_from_description((AMCP *)&__p, &v63);
        uint64_t v59 = 0;
        uint64_t v60 = 0;
        double v17 = AMCP::Thing::convert_or<CA::ValueRange>((uint64_t)&__p, &v59);
        double v19 = v18;
        if (v62) {
          v62(0, &__p, 0, 0);
        }
      }
      else
      {
        double v19 = 0.0;
        double v17 = 0.0;
      }
      float v27 = AMCP::Thing::convert_to<float>((uint64_t)a4);
      float v28 = v19;
      if (v27 >= v28) {
        float v27 = v19;
      }
      float v29 = v17;
      if (v27 <= v29) {
        float v30 = v17;
      }
      else {
        float v30 = v27;
      }
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, *((CFDictionaryRef *)this + 6));
      v31.i64[0] = 0x676C6F626C637376;
      uint64_t v59 = 0x676C6F626C637376;
      LODWORD(v60) = 0;
      AMCP::Address::to_string(&__p, (unsigned int *)&v59, v31);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        __int16 v32 = &__p;
      }
      else {
        __int16 v32 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v32)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFIndex v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          CFIndex v33 = __p.__r_.__value_.__l.__size_;
        }
        CFStringRef v34 = CFStringCreateWithBytes(0, (const UInt8 *)v32, v33, 0x8000100u, 0);
        if (!v34)
        {
          int v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v35, "Could not construct");
          __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
      else
      {
        CFStringRef v34 = 0;
      }
      float v43 = v19 - v17;
      *(float *)&double valuePtr = (float)(v30 - v29) / v43;
      CFNumberRef v44 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
      if (!v44)
      {
        uint64_t v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v54, "Could not construct");
        __cxa_throw(v54, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v34, v44);
      CFRelease(v44);
      if (v34) {
        CFRelease(v34);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v45.i64[0] = 0x676C6F626C636476;
      uint64_t v59 = 0x676C6F626C636476;
      LODWORD(v60) = 0;
      AMCP::Address::to_string(&__p, (unsigned int *)&v59, v45);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v46 = &__p;
      }
      else {
        long long v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v46)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFIndex v47 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          CFIndex v47 = __p.__r_.__value_.__l.__size_;
        }
        CFStringRef v48 = CFStringCreateWithBytes(0, (const UInt8 *)v46, v47, 0x8000100u, 0);
        if (!v48)
        {
          uint64_t v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v49, "Could not construct");
          __cxa_throw(v49, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
      else
      {
        CFStringRef v48 = 0;
      }
      *(float *)&double valuePtr = v30;
      CFNumberRef v51 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
      if (!v51)
      {
        uint64_t v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v56, "Could not construct");
        __cxa_throw(v56, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v48, v51);
      CFRelease(v51);
      if (v48) {
        CFRelease(v48);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&__p, MutableCopy);
      (*(void (**)(AMCP::Null::Level_Control *, std::string *))(*(void *)this + 24))(this, &__p);
      if (__p.__r_.__value_.__r.__words[0]) {
        CFRelease(__p.__r_.__value_.__l.__data_);
      }
      AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*((void *)this + 1) + 32), *((_DWORD *)this + 22));
      if (!MutableCopy) {
        goto LABEL_113;
      }
LABEL_112:
      CFRelease(MutableCopy);
LABEL_113:
      std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v63);
      return 257;
    }
LABEL_114:
    long long v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v52, "Could not construct");
    __cxa_throw(v52, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (*(_DWORD *)a3 == 1818456950)
  {
    if (*((void *)this + 6))
    {
      a5.i64[0] = 0x676C6F626C636472;
      uint64_t v59 = 0x676C6F626C636472;
      LODWORD(v60) = 0;
      AMCP::Address::to_string(&__p, (unsigned int *)&v59, a5);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v7 = &__p;
      }
      else {
        unint64_t v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v7)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFIndex v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          CFIndex v8 = __p.__r_.__value_.__l.__size_;
        }
        CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)v7, v8, 0x8000100u, 0);
        if (!v9)
        {
          unint64_t v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v57, "Could not construct");
          __cxa_throw(v57, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v63, *((CFDictionaryRef *)this + 6), v9);
        CFRelease(v9);
      }
      else
      {
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v63, *((CFDictionaryRef *)this + 6), 0);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v64)
      {
        AMCP::make_thing_from_description((AMCP *)&__p, &v63);
        uint64_t v59 = 0;
        uint64_t v60 = 0;
        double v14 = AMCP::Thing::convert_or<CA::ValueRange>((uint64_t)&__p, &v59);
        double v16 = v15;
        if (v62) {
          v62(0, &__p, 0, 0);
        }
      }
      else
      {
        double v16 = 0.0;
        double v14 = 0.0;
      }
      float v20 = AMCP::Thing::convert_to<float>((uint64_t)a4);
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, *((CFDictionaryRef *)this + 6));
      v22.i64[0] = 0x676C6F626C637376;
      uint64_t v59 = 0x676C6F626C637376;
      LODWORD(v60) = 0;
      AMCP::Address::to_string(&__p, (unsigned int *)&v59, v22);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v23 = &__p;
      }
      else {
        uint64_t v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v23)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFIndex v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          CFIndex v24 = __p.__r_.__value_.__l.__size_;
        }
        CFStringRef v25 = CFStringCreateWithBytes(0, (const UInt8 *)v23, v24, 0x8000100u, 0);
        if (!v25)
        {
          int v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v26, "Could not construct");
          __cxa_throw(v26, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
      else
      {
        CFStringRef v25 = 0;
      }
      float v36 = fmaxf(fminf(v20, 1.0), 0.0);
      *(float *)&double valuePtr = v36;
      CFNumberRef v37 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
      if (!v37)
      {
        CFStringRef v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v53, "Could not construct");
        __cxa_throw(v53, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v25, v37);
      CFRelease(v37);
      if (v25) {
        CFRelease(v25);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v38.i64[0] = 0x676C6F626C636476;
      uint64_t v59 = 0x676C6F626C636476;
      LODWORD(v60) = 0;
      AMCP::Address::to_string(&__p, (unsigned int *)&v59, v38);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v39 = &__p;
      }
      else {
        char v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v39)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFIndex v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          CFIndex v40 = __p.__r_.__value_.__l.__size_;
        }
        CFStringRef v41 = CFStringCreateWithBytes(0, (const UInt8 *)v39, v40, 0x8000100u, 0);
        if (!v41)
        {
          char v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v42, "Could not construct");
          __cxa_throw(v42, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
      else
      {
        CFStringRef v41 = 0;
      }
      double valuePtr = v14 + v36 * (v16 - v14);
      CFNumberRef v50 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
      if (!v50)
      {
        int v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v55, "Could not construct");
        __cxa_throw(v55, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v41, v50);
      CFRelease(v50);
      if (v41) {
        CFRelease(v41);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&__p, MutableCopy);
      (*(void (**)(AMCP::Null::Level_Control *, std::string *))(*(void *)this + 24))(this, &__p);
      if (__p.__r_.__value_.__r.__words[0]) {
        CFRelease(__p.__r_.__value_.__l.__data_);
      }
      AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*((void *)this + 1) + 32), *((_DWORD *)this + 22));
      if (!MutableCopy) {
        goto LABEL_113;
      }
      goto LABEL_112;
    }
    goto LABEL_114;
  }

  return AMCP::Null::Object::do_set_property(this, a2, a3, a4);
}

void sub_1BAD4448C(void *a1)
{
}

double AMCP::Thing::convert_or<CA::ValueRange>(uint64_t a1, void *a2)
{
  if (!*(void *)(a1 + 32)) {
    return *(double *)a2;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<CA::ValueRange>();
  CFStringRef v5 = *(void (**)(uint64_t, uint64_t, void, _OWORD *))(a1 + 32);
  *(void *)&v14[0] = 0;
  if (v5)
  {
    v5(3, a1, 0, v14);
    CFStringRef v5 = *(void (**)(uint64_t, uint64_t, void, _OWORD *))&v14[0];
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, _OWORD *))v4)
  {
    uint64_t v16 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v16);
    if (v6) {
      unint64_t v7 = (void *)v6;
    }
    else {
      unint64_t v7 = a2;
    }
    return *(double *)v7;
  }
  uint64_t v13 = AMCP::Implementation::get_type_marker<CA::ValueRange>();
  memset(v14, 0, sizeof(v14));
  double v15 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v14, &v13);
  if (!v15) {
    return *(double *)a2;
  }
  uint64_t v12 = v4;
  uint64_t v9 = v15(4, v14, 0, &v12);
  if (v9) {
    int v10 = (double *)v9;
  }
  else {
    int v10 = (double *)a2;
  }
  double v8 = *v10;
  if (v15) {
    v15(0, v14, 0, 0);
  }
  return v8;
}

void sub_1BAD44670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Null::Level_Control::populate_core@<X0>(AMCP::Null::Level_Control *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  AMCP::Null::Control::populate_core((CFDictionaryRef *)this, a2, a3);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v66, *((void *)this + 3), *((std::__shared_weak_count **)this + 4));
  LOBYTE(__p[0]) = 0;
  LOBYTE(v79) = 0;
  uint64_t v6 = v66;
  CFStringRef v5 = v67;
  if (v67) {
    atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  strcpy((char *)v63, "vsclbolg");
  BYTE1(v63[1]) = 0;
  WORD1(v63[1]) = 0;
  char v98 = 0;
  long long v96 = 0u;
  long long v97 = 0u;
  if (!*((void *)this + 6))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string((std::string *)&v88, (unsigned int *)v63, (int16x8_t)0);
  if ((SBYTE7(v89) & 0x80u) == 0) {
    unint64_t v7 = (const UInt8 *)&v88;
  }
  else {
    unint64_t v7 = (const UInt8 *)v88;
  }
  if (v7)
  {
    if ((SBYTE7(v89) & 0x80u) == 0) {
      CFIndex v8 = BYTE7(v89);
    }
    else {
      CFIndex v8 = *((void *)&v88 + 1);
    }
    CFStringRef v9 = CFStringCreateWithBytes(0, v7, v8, 0x8000100u, 0);
    if (!v9)
    {
      uint64_t v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v56, "Could not construct");
      __cxa_throw(v56, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v93, *((CFDictionaryRef *)this + 6), v9);
    CFRelease(v9);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v93, *((CFDictionaryRef *)this + 6), 0);
  }
  if (SBYTE7(v89) < 0) {
    operator delete((void *)v88);
  }
  if (v94)
  {
    AMCP::make_thing_from_description((AMCP *)&v88, &v93);
    AMCP::swap((AMCP::Thing *)&v88, (AMCP::Thing *)&v96, v11);
    if (v90) {
      v90(0, (uint64_t)&v88, 0, 0);
    }
  }
  else if ((_BYTE)v79)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v96, (uint64_t)__p, v10);
  }
  if (v98)
  {
    uint64_t v60 = *(uint64_t *)((char *)v63 + 4);
    unint64_t v75 = 0;
    long long v73 = 0u;
    long long v74 = 0u;
    v98(1, (uint64_t)&v96, (AMCP::Thing *)&v73, 0);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(v69) = 1818456950;
    *(void *)((char *)&v69 + 4) = v60;
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v70, SHIDWORD(v60), *(double *)&v69);
    uint64_t v12 = v70;
    unint64_t v13 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    long long v81 = 0u;
    long long v82 = 0u;
    long long v83 = 0;
    if (v75) {
      v75(2, &v73, &v81, 0);
    }
    *((void *)&v86 + 1) = 0;
    double v14 = (char *)operator new(0x30uLL);
    *(void *)double v14 = &unk_1F146F178;
    *(_OWORD *)(v14 + 8) = 0u;
    *(_OWORD *)(v14 + 24) = 0u;
    *((void *)v14 + 5) = 0;
    if (v83) {
      v83(2, &v81, v14 + 8, 0);
    }
    *((void *)&v86 + 1) = v14;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v90 = 0;
    std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)&v88, (uint64_t)&v85);
    long long v90 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v12, v13, (AMCP *)&v88);
    if (v90) {
      v90(0, (uint64_t)&v88, 0, 0);
    }
    std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](&v85);
    if (v83) {
      v83(0, &v81, 0, 0);
    }
    AMCP::Core::Operation_Utilities::add_specific_property_getter<float>((uint64_t)v12);
    unint64_t v15 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    *((void *)&v82 + 1) = 0;
    uint64_t v16 = operator new(0x28uLL);
    *uint64_t v16 = &unk_1F146F278;
    v16[1] = v6;
    void v16[2] = v5;
    void v16[3] = 0x676C6F626C637376;
    *((_DWORD *)v16 + 8) = HIDWORD(v60);
    *((void *)&v82 + 1) = v16;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v90 = 0;
    std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)&v88, (uint64_t)&v81);
    long long v90 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v12, v15, (AMCP *)&v88);
    if (v90) {
      v90(0, (uint64_t)&v88, 0, 0);
    }
    std::__function::__value_func<void ()(AMCP::Thing const&)>::~__value_func[abi:ne180100](&v81);
    AMCP::Core::Operation_Utilities::add_specific_property_setter<float>((uint64_t)v12);
    if (v75) {
      v75(0, &v73, 0, 0);
    }
  }
  else
  {
    uint64_t v12 = 0;
    CFStringRef v70 = 0;
    CFDictionaryRef v71 = 0;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v93);
  if (v98) {
    v98(0, (uint64_t)&v96, 0, 0);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v12) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, v12 + 10, &v70);
  }
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  if (v67) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v67);
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v64, *((void *)this + 3), *((std::__shared_weak_count **)this + 4));
  LOBYTE(__p[0]) = 0;
  LOBYTE(v79) = 0;
  uint64_t v18 = v64;
  double v17 = v65;
  if (v65) {
    atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  strcpy((char *)v63, "vdclbolg");
  BYTE1(v63[1]) = 0;
  WORD1(v63[1]) = 0;
  char v98 = 0;
  long long v96 = 0u;
  long long v97 = 0u;
  if (!*((void *)this + 6))
  {
    CFStringRef v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v53, "Could not construct");
    __cxa_throw(v53, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string((std::string *)&v88, (unsigned int *)v63, (int16x8_t)0);
  if ((SBYTE7(v89) & 0x80u) == 0) {
    double v19 = (const UInt8 *)&v88;
  }
  else {
    double v19 = (const UInt8 *)v88;
  }
  if (v19)
  {
    if ((SBYTE7(v89) & 0x80u) == 0) {
      CFIndex v20 = BYTE7(v89);
    }
    else {
      CFIndex v20 = *((void *)&v88 + 1);
    }
    CFStringRef v21 = CFStringCreateWithBytes(0, v19, v20, 0x8000100u, 0);
    if (!v21)
    {
      unint64_t v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v57, "Could not construct");
      __cxa_throw(v57, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v93, *((CFDictionaryRef *)this + 6), v21);
    CFRelease(v21);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v93, *((CFDictionaryRef *)this + 6), 0);
  }
  if (SBYTE7(v89) < 0) {
    operator delete((void *)v88);
  }
  if (v94)
  {
    AMCP::make_thing_from_description((AMCP *)&v88, &v93);
    AMCP::swap((AMCP::Thing *)&v88, (AMCP::Thing *)&v96, v23);
    if (v90) {
      v90(0, (uint64_t)&v88, 0, 0);
    }
  }
  else if ((_BYTE)v79)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v96, (uint64_t)__p, v22);
  }
  if (v98)
  {
    uint64_t v61 = *(uint64_t *)((char *)v63 + 4);
    unint64_t v75 = 0;
    long long v73 = 0u;
    long long v74 = 0u;
    v98(1, (uint64_t)&v96, (AMCP::Thing *)&v73, 0);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(v69) = 1818453110;
    *(void *)((char *)&v69 + 4) = v61;
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v70, SHIDWORD(v61), *(double *)&v69);
    CFIndex v24 = v70;
    unint64_t v25 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    long long v81 = 0u;
    long long v82 = 0u;
    long long v83 = 0;
    if (v75) {
      v75(2, &v73, &v81, 0);
    }
    *((void *)&v86 + 1) = 0;
    int v26 = (char *)operator new(0x30uLL);
    *(void *)int v26 = &unk_1F146F378;
    *(_OWORD *)(v26 + 8) = 0u;
    *(_OWORD *)(v26 + 24) = 0u;
    *((void *)v26 + 5) = 0;
    if (v83) {
      v83(2, &v81, v26 + 8, 0);
    }
    *((void *)&v86 + 1) = v26;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v90 = 0;
    std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)&v88, (uint64_t)&v85);
    long long v90 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v24, v25, (AMCP *)&v88);
    if (v90) {
      v90(0, (uint64_t)&v88, 0, 0);
    }
    std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](&v85);
    if (v83) {
      v83(0, &v81, 0, 0);
    }
    AMCP::Core::Operation_Utilities::add_specific_property_getter<float>((uint64_t)v24);
    unint64_t v27 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    *((void *)&v82 + 1) = 0;
    float v28 = operator new(0x28uLL);
    void *v28 = &unk_1F146F3F8;
    v28[1] = v18;
    void v28[2] = v17;
    _DWORD v28[3] = 0x676C6F626C636476;
    *((_DWORD *)v28 + 8) = HIDWORD(v61);
    *((void *)&v82 + 1) = v28;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v90 = 0;
    std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)&v88, (uint64_t)&v81);
    long long v90 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v24, v27, (AMCP *)&v88);
    if (v90) {
      v90(0, (uint64_t)&v88, 0, 0);
    }
    std::__function::__value_func<void ()(AMCP::Thing const&)>::~__value_func[abi:ne180100](&v81);
    AMCP::Core::Operation_Utilities::add_specific_property_setter<float>((uint64_t)v24);
    if (v75) {
      v75(0, &v73, 0, 0);
    }
  }
  else
  {
    CFIndex v24 = 0;
    CFStringRef v70 = 0;
    CFDictionaryRef v71 = 0;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v93);
  if (v98) {
    v98(0, (uint64_t)&v96, 0, 0);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v24) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, v24 + 10, &v70);
  }
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  if (!*((void *)this + 6))
  {
    uint64_t v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v54, "Could not construct");
    __cxa_throw(v54, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(void *)&long long v88 = 0x676C6F626C636472;
  DWORD2(v88) = 0;
  AMCP::Address::to_string((std::string *)__p, (unsigned int *)&v88, v29);
  if ((SBYTE7(v77) & 0x80u) == 0) {
    float v30 = __p;
  }
  else {
    float v30 = (void **)__p[0];
  }
  if (v30)
  {
    if ((SBYTE7(v77) & 0x80u) == 0) {
      CFIndex v31 = BYTE7(v77);
    }
    else {
      CFIndex v31 = (CFIndex)__p[1];
    }
    CFStringRef v32 = CFStringCreateWithBytes(0, (const UInt8 *)v30, v31, 0x8000100u, 0);
    if (!v32)
    {
      long long v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v58, "Could not construct");
      __cxa_throw(v58, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)v63, *((CFDictionaryRef *)this + 6), v32);
    CFRelease(v32);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)v63, *((CFDictionaryRef *)this + 6), 0);
  }
  if (SBYTE7(v77) < 0) {
    operator delete(__p[0]);
  }
  if (LOBYTE(v63[1]))
  {
    AMCP::make_thing_from_description((AMCP *)__p, v63);
    long long v88 = 0uLL;
    double v33 = AMCP::Thing::convert_or<CA::ValueRange>((uint64_t)__p, &v88);
    uint64_t v35 = v34;
    if (v78) {
      v78(0, (uint64_t)__p, 0, 0);
    }
  }
  else
  {
    uint64_t v35 = 0;
    double v33 = 0.0;
  }
  LOBYTE(v81) = 0;
  char v84 = 0;
  strcpy((char *)v68, "rdclbolg");
  BYTE1(v68[2]) = 0;
  HIWORD(v68[2]) = 0;
  long long v87 = 0;
  long long v85 = 0u;
  long long v86 = 0u;
  if (!*((void *)this + 6))
  {
    int v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v55, "Could not construct");
    __cxa_throw(v55, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string((std::string *)__p, v68, (int16x8_t)0);
  if ((SBYTE7(v77) & 0x80u) == 0) {
    float v36 = __p;
  }
  else {
    float v36 = (void **)__p[0];
  }
  if (v36)
  {
    if ((SBYTE7(v77) & 0x80u) == 0) {
      CFIndex v37 = BYTE7(v77);
    }
    else {
      CFIndex v37 = (CFIndex)__p[1];
    }
    CFStringRef v38 = CFStringCreateWithBytes(0, (const UInt8 *)v36, v37, 0x8000100u, 0);
    if (!v38)
    {
      uint64_t v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v59, "Could not construct");
      __cxa_throw(v59, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v70, *((CFDictionaryRef *)this + 6), v38);
    CFRelease(v38);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v70, *((CFDictionaryRef *)this + 6), 0);
  }
  if (SBYTE7(v77) < 0) {
    operator delete(__p[0]);
  }
  if ((_BYTE)v71)
  {
    AMCP::make_thing_from_description((AMCP *)__p, (CFTypeRef *)&v70);
    AMCP::swap((AMCP::Thing *)__p, (AMCP::Thing *)&v85, v40);
    if (v78) {
      v78(0, (uint64_t)__p, 0, 0);
    }
  }
  else if (v84)
  {
    AMCP::Thing::operator=((AMCP::Thing *)&v85, (uint64_t)&v81, v39);
  }
  if (v87)
  {
    LODWORD(v72[0]) = 1818453106;
    int v62 = v68[2];
    *(double *)((char *)v72 + 4) = *(double *)&v68[1];
    unint64_t v75 = 0;
    long long v73 = 0u;
    long long v74 = 0u;
    v87(1, &v85, &v73, 0);
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v69, v62, v72[0]);
    uint64_t v41 = v69;
    unint64_t v42 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    long long v88 = 0u;
    long long v89 = 0u;
    long long v90 = 0;
    if (v75) {
      v75(1, &v73, &v88, 0);
    }
    *((void *)&v97 + 1) = 0;
    float v43 = (char *)operator new(0x30uLL);
    *(void *)float v43 = &unk_1F146F478;
    *(_OWORD *)(v43 + 8) = 0u;
    *(_OWORD *)(v43 + 24) = 0u;
    *((void *)v43 + 5) = 0;
    if (v90) {
      v90(1, (uint64_t)&v88, (AMCP::Thing *)(v43 + 8), 0);
    }
    *((void *)&v97 + 1) = v43;
    *(_OWORD *)std::string __p = 0u;
    long long v77 = 0u;
    mach_port_t v78 = 0;
    std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v96);
    mach_port_t v78 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v41, v42, (AMCP *)__p);
    if (v78) {
      v78(0, (uint64_t)__p, 0, 0);
    }
    std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](&v96);
    if (v90) {
      v90(0, (uint64_t)&v88, 0, 0);
    }
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v88, v41);
    uint64_t v91 = *(void *)(v41 + 40);
    int v92 = *(_DWORD *)(v41 + 48);
    unint64_t v44 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRange ()(void)>>();
    long long v45 = v88;
    long long v88 = 0uLL;
    *(_OWORD *)std::string __p = v45;
    long long v77 = v89;
    LODWORD(v78) = v90;
    if (*((void *)&v89 + 1))
    {
      unint64_t v46 = *(void *)(v89 + 8);
      if ((*((void *)&v45 + 1) & (*((void *)&v45 + 1) - 1)) != 0)
      {
        if (v46 >= *((void *)&v45 + 1)) {
          v46 %= *((void *)&v45 + 1);
        }
      }
      else
      {
        v46 &= *((void *)&v45 + 1) - 1;
      }
      *(void *)(v45 + 8 * v46) = &v77;
      long long v89 = 0uLL;
    }
    uint64_t v79 = v91;
    int v80 = v92;
    mach_port_t v95 = 0;
    CFIndex v47 = operator new(0x40uLL);
    void *v47 = &unk_1F146F4F8;
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v47 + 1), (uint64_t *)__p);
    v47[6] = v79;
    *((_DWORD *)v47 + 14) = v80;
    mach_port_t v95 = v47;
    long long v96 = 0u;
    long long v97 = 0u;
    char v98 = 0;
    std::__function::__value_func<CA::ValueRange ()(void)>::__value_func[abi:ne180100]((uint64_t)&v96, (uint64_t)&v93);
    char v98 = AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRange ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v41, v44, (AMCP *)&v96);
    if (v98) {
      v98(0, (uint64_t)&v96, 0, 0);
    }
    std::__function::__value_func<CA::ValueRange ()(void)>::~__value_func[abi:ne180100](&v93);
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v88);
    if (v75) {
      v75(0, &v73, 0, 0);
    }
  }
  else
  {
    uint64_t v41 = 0;
    long long v69 = 0uLL;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v70);
  if (v87) {
    v87(0, &v85, 0, 0);
  }
  if (v41) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v41 + 40), &v69);
  }
  if (*((void *)&v69 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v69 + 1));
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v81);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v81, 0, 1.5836601e190);
  uint64_t v48 = v81;
  unint64_t v49 = AMCP::Implementation::get_type_marker<std::function<float ()(float)>>();
  *(void *)&long long v88 = &unk_1F146F578;
  *((double *)&v88 + 1) = v33;
  *(void *)&long long v89 = v35;
  *((void *)&v89 + 1) = &v88;
  *(_OWORD *)std::string __p = 0u;
  long long v77 = 0u;
  mach_port_t v78 = 0;
  std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v88);
  mach_port_t v78 = AMCP::Implementation::In_Place_Storage<std::function<float ()(float)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v48, v49, (AMCP *)__p);
  if (v78) {
    v78(0, (uint64_t)__p, 0, 0);
  }
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](&v88);
  unint64_t v50 = AMCP::Implementation::get_type_marker<std::function<float ()(float,BOOL)>>();
  *(void *)&long long v88 = &unk_1F146F5F8;
  *((double *)&v88 + 1) = v33;
  *(void *)&long long v89 = v35;
  *((void *)&v89 + 1) = &v88;
  *(_OWORD *)std::string __p = 0u;
  long long v77 = 0u;
  mach_port_t v78 = 0;
  std::__function::__value_func<float ()(float,BOOL)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v88);
  mach_port_t v78 = AMCP::Implementation::In_Place_Storage<std::function<float ()(float,BOOL)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v48, v50, (AMCP *)__p);
  if (v78) {
    v78(0, (uint64_t)__p, 0, 0);
  }
  std::__function::__value_func<float ()(float,BOOL)>::~__value_func[abi:ne180100](&v88);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v48 + 40), &v81);
  if (*((void *)&v81 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v81 + 1));
  }
  return std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v63);
}

void sub_1BAD45714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  uint64_t v23 = 0;
  uint64_t v6 = operator new(0x40uLL);
  *uint64_t v6 = &unk_1F146F1F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  uint64_t v23 = v6;
  memset(v20, 0, sizeof(v20));
  CFStringRef v21 = 0;
  std::__function::__value_func<float ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  CFStringRef v21 = AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<float ()(void)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAD45A1C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  uint64_t v23 = 0;
  uint64_t v6 = operator new(0x40uLL);
  *uint64_t v6 = &unk_1F146F2F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  uint64_t v23 = v6;
  memset(v20, 0, sizeof(v20));
  CFStringRef v21 = 0;
  std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  CFStringRef v21 = AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<void ()(float const&)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAD45BD8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<float ()(float,BOOL)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<float ()(float,BOOL)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<float ()(float,BOOL)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<float ()(float,BOOL)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<float ()(float,BOOL)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<float ()(float,BOOL)>>::dispatch;
LABEL_6:
      std::__function::__value_func<float ()(float,BOOL)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<float ()(float,BOOL)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<float ()(float,BOOL)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::Null::Level_Control::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Level_Control::populate_core(unsigned int)::$_1>,float ()(float,BOOL)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Null::Level_Control::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Level_Control::populate_core(unsigned int)::$_1>,float ()(float,BOOL)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Null13Level_Control13populate_coreEjE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

float std::__function::__func<AMCP::Null::Level_Control::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Level_Control::populate_core(unsigned int)::$_1>,float ()(float,BOOL)>::operator()(uint64_t a1, float *a2)
{
  float v2 = *a2;
  double v4 = *(double *)(a1 + 8);
  double v3 = *(double *)(a1 + 16);
  float v5 = v3;
  if (*a2 >= v5) {
    float v2 = v3;
  }
  float v6 = v4;
  if (v2 <= v6) {
    float v2 = v4;
  }
  float v7 = v3 - v4;
  return (float)(v2 - v6) / v7;
}

__n128 std::__function::__func<AMCP::Null::Level_Control::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Level_Control::populate_core(unsigned int)::$_1>,float ()(float,BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146F5F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::Null::Level_Control::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Level_Control::populate_core(unsigned int)::$_1>,float ()(float,BOOL)>::__clone(uint64_t a1)
{
  float v2 = (char *)operator new(0x18uLL);
  *(void *)float v2 = &unk_1F146F5F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AMCP::Null::Level_Control::populate_core(unsigned int)::$_1,std::allocator<AMCP::Null::Level_Control::populate_core(unsigned int)::$_1>,float ()(float,BOOL)>::~__func()
{
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<float ()(float)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<float ()(float)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<float ()(float)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<float ()(float)>>::dispatch;
LABEL_6:
      std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<float ()(float)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<float ()(float)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::Null::Level_Control::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Level_Control::populate_core(unsigned int)::$_0>,float ()(float)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Null::Level_Control::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Level_Control::populate_core(unsigned int)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Null13Level_Control13populate_coreEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

float std::__function::__func<AMCP::Null::Level_Control::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Level_Control::populate_core(unsigned int)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  return *(double *)(a1 + 8) + fmaxf(fminf(*a2, 1.0), 0.0) * (*(double *)(a1 + 16) - *(double *)(a1 + 8));
}

__n128 std::__function::__func<AMCP::Null::Level_Control::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Level_Control::populate_core(unsigned int)::$_0>,float ()(float)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146F578;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::Null::Level_Control::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Level_Control::populate_core(unsigned int)::$_0>,float ()(float)>::__clone(uint64_t a1)
{
  float v2 = (char *)operator new(0x18uLL);
  *(void *)float v2 = &unk_1F146F578;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AMCP::Null::Level_Control::populate_core(unsigned int)::$_0,std::allocator<AMCP::Null::Level_Control::populate_core(unsigned int)::$_0>,float ()(float)>::~__func()
{
}

uint64_t AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}::~Thing(uint64_t a1)
{
  float v2 = *(void (**)(void, uint64_t, void, void))(a1 + 32);
  if (v2) {
    v2(0, a1, 0, 0);
  }
  return a1;
}

uint64_t std::__function::__value_func<CA::ValueRange ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  double v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    double v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<CA::ValueRange ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  float v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRange ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRange ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<CA::ValueRange ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRange ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<CA::ValueRange ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRange ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<CA::ValueRange ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ValueRange ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ValueRange ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterIN2CA10ValueRangeEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ValueRange ()(void)>::operator()(uint64_t a1)
{
  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v3, (void *)(a1 + 8));
  double v1 = AMCP::Thing::convert_to<CA::ValueRange>((uint64_t)v3);
  if (v4) {
    v4(0, v3, 0, 0);
  }
  return v1;
}

void sub_1BAD46738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(void, char *, void, void))
{
  if (a14) {
    a14(0, &a10, 0, 0);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ValueRange ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ValueRange ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ValueRange ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146F4F8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ValueRange ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  double v3 = operator new(0x40uLL);
  void *v3 = &unk_1F146F4F8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAD46874(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ValueRange ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146F4F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<CA::ValueRange>(AMCP::Core::Operation &)::{lambda(void)#1}>,CA::ValueRange ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146F4F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities30make_generic_constant_propertyIN2CA10ValueRangeEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKNS_5ThingEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2, 0);
  }
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void (*)(void, void *, void, void))__p[5];
  if (v2) {
    v2(0, __p + 1, 0, 0);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  double v1 = *(uint64_t (**)(void, uint64_t, void, void))(result + 40);
  if (v1) {
    return v1(0, result + 8, 0, 0);
  }
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F146F478;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2 + 8, 0);
  }
  return result;
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F146F478;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = 0;
  double v3 = *(void (**)(uint64_t, uint64_t, char *, void))(a1 + 40);
  if (v3) {
    v3(1, a1 + 8, v2 + 8, 0);
  }
  return v2;
}

void sub_1BAD46AF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146F478;
  double v1 = (void (*)(void, void *, void, void))a1[5];
  if (v1) {
    v1(0, a1 + 1, 0, 0);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_generic_constant_property<CA::ValueRange>(AMCP::Address const&,AMCP::Thing const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146F478;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[5];
  if (v2) {
    v2(0, a1 + 1, 0, 0);
  }
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1818453110EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlRKSI_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  double v3 = *(unsigned int **)(a1 + 16);
  if (!v3
    || (double v3 = (unsigned int *)std::__shared_weak_count::lock((std::__shared_weak_count *)v3),
        (float v5 = (std::__shared_weak_count *)v3) == 0)
    || (double v3 = *(unsigned int **)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    float v7 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)int16x8_t v29 = 2080;
      *(void *)&v29[2] = "Null_Object.cpp";
      __int16 v30 = 1024;
      int v31 = 59;
      __int16 v32 = 2080;
      *(void *)double v33 = "object_ptr.operator BOOL() == false";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no model object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v20, "no model object");
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int16x8_t v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v33[6] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    int v35 = 59;
    std::vector<void *>::vector(&v15);
    int v10 = backtrace((void **)v15, (*((void *)&v15 + 1) - (void)v15) >> 3);
    std::vector<void *>::resize((char **)&v15, v10);
    int v17 = &unk_1F148AA90;
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  float v6 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(unsigned int *, void, uint64_t, uint64_t))(*(void *)v3 + 40))(v3, v3[22], a1 + 24, a2);
  if (!(_BYTE)v6)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)int16x8_t v29 = 2080;
      *(void *)&v29[2] = "Null_Object.cpp";
      __int16 v30 = 1024;
      int v31 = 61;
      __int16 v32 = 2080;
      *(void *)double v33 = "was_handled == Object::Was_Handled::no";
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not handled", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v20, "not handled");
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int16x8_t v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v33[6] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    int v35 = 61;
    std::vector<void *>::vector(&v15);
    int v14 = backtrace((void **)v15, (*((void *)&v15 + 1) - (void)v15) >> 3);
    std::vector<void *>::resize((char **)&v15, v14);
    int v17 = &unk_1F148AA90;
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1BAD472BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,uint64_t a29)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  double v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F146F3F8;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  double result = *(double *)(a1 + 24);
  *(double *)(a2 + 24) = result;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (double *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F146F3F8;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  double result = *(double *)(a1 + 24);
  v2[3] = result;
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146F3F8;
  double v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146F3F8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1818453110EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2, 0);
  }
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void (*)(void, void *, void, void))__p[5];
  if (v2) {
    v2(0, __p + 1, 0, 0);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  double v1 = *(uint64_t (**)(void, uint64_t, void, void))(result + 40);
  if (v1) {
    return v1(0, result + 8, 0, 0);
  }
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F146F378;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2 + 8, 0);
  }
  return result;
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F146F378;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = 0;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, char *, void))(a1 + 40);
  if (v3) {
    v3(1, a1 + 8, v2 + 8, 0);
  }
  return v2;
}

void sub_1BAD47818(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146F378;
  double v1 = (void (*)(void, void *, void, void))a1[5];
  if (v1) {
    v1(0, a1 + 1, 0, 0);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818453110u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146F378;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[5];
  if (v2) {
    v2(0, a1 + 1, 0, 0);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1}>,void ()(float const&)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1}>,void ()(float const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_setterIfEEvRNS0_9OperationEEUlRKfE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1}>,void ()(float const&)>::operator()(uint64_t a1, _DWORD *a2)
{
  memset(v3, 0, sizeof(v3));
  LODWORD(v3[0]) = *a2;
  uint64_t v4 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
  uint64_t result = AMCP::Core::Operation::call_function<void,AMCP::Thing const&>((void *)(a1 + 8), (uint64_t)v3);
  if (v4) {
    return ((uint64_t (*)(void, _OWORD *, void, void))v4)(0, v3, 0, 0);
  }
  return result;
}

void sub_1BAD479C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(void, uint64_t *, void, void))
{
  if (a13) {
    a13(0, &a9, 0, 0);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1}>,void ()(float const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1}>,void ()(float const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1}>,void ()(float const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146F2F8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1}>,void ()(float const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F146F2F8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAD47B00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1}>,void ()(float const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146F2F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<float>(AMCP::Core::Operation &)::{lambda(float const&)#1}>,void ()(float const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146F2F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1818456950EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlRKSI_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(unsigned int **)(a1 + 16);
  if (!v3
    || (uint64_t v3 = (unsigned int *)std::__shared_weak_count::lock((std::__shared_weak_count *)v3),
        (float v5 = (std::__shared_weak_count *)v3) == 0)
    || (uint64_t v3 = *(unsigned int **)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    float v7 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)int16x8_t v29 = 2080;
      *(void *)&v29[2] = "Null_Object.cpp";
      __int16 v30 = 1024;
      int v31 = 59;
      __int16 v32 = 2080;
      *(void *)double v33 = "object_ptr.operator BOOL() == false";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no model object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v20, "no model object");
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int16x8_t v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v33[6] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    int v35 = 59;
    std::vector<void *>::vector(&v15);
    int v10 = backtrace((void **)v15, (*((void *)&v15 + 1) - (void)v15) >> 3);
    std::vector<void *>::resize((char **)&v15, v10);
    int v17 = &unk_1F148AA90;
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  float v6 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(unsigned int *, void, uint64_t, uint64_t))(*(void *)v3 + 40))(v3, v3[22], a1 + 24, a2);
  if (!(_BYTE)v6)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)int16x8_t v29 = 2080;
      *(void *)&v29[2] = "Null_Object.cpp";
      __int16 v30 = 1024;
      int v31 = 61;
      __int16 v32 = 2080;
      *(void *)double v33 = "was_handled == Object::Was_Handled::no";
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not handled", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v20, "not handled");
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int16x8_t v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v33[6] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    int v35 = 61;
    std::vector<void *>::vector(&v15);
    int v14 = backtrace((void **)v15, (*((void *)&v15 + 1) - (void)v15) >> 3);
    std::vector<void *>::resize((char **)&v15, v14);
    int v17 = &unk_1F148AA90;
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1BAD48294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,uint64_t a29)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  double v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F146F278;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  double result = *(double *)(a1 + 24);
  *(double *)(a2 + 24) = result;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (double *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F146F278;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  double result = *(double *)(a1 + 24);
  v2[3] = result;
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146F278;
  double v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146F278;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,float ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,float ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_getterIfEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

float std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,float ()(void)>::operator()(uint64_t a1)
{
  AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v3, (void *)(a1 + 8));
  float v1 = AMCP::Thing::convert_to<float>((uint64_t)v3);
  if (v4) {
    v4(0, v3, 0, 0);
  }
  return v1;
}

void sub_1BAD486E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(void, char *, void, void))
{
  if (a14) {
    a14(0, &a10, 0, 0);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,float ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,float ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,float ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146F1F8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,float ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F146F1F8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAD4881C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,float ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146F1F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,float ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146F1F8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1818456950EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2, 0);
  }
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (void (*)(void, void *, void, void))__p[5];
  if (v2) {
    v2(0, __p + 1, 0, 0);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t result)
{
  float v1 = *(uint64_t (**)(void, uint64_t, void, void))(result + 40);
  if (v1) {
    return v1(0, result + 8, 0, 0);
  }
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F146F178;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 40);
  if (v2) {
    return v2(1, result + 8, a2 + 8, 0);
  }
  return result;
}

char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F146F178;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 5) = 0;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, char *, void))(a1 + 40);
  if (v3) {
    v3(1, a1 + 8, v2 + 8, 0);
  }
  return v2;
}

void sub_1BAD48A98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146F178;
  float v1 = (void (*)(void, void *, void, void))a1[5];
  if (v1) {
    v1(0, a1 + 1, 0, 0);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1818456950u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F146F178;
  uint64_t v2 = (void (*)(void, void *, void, void))a1[5];
  if (v2) {
    v2(0, a1 + 1, 0, 0);
  }
  return a1;
}

void AMCP::Null::Level_Control::~Level_Control(std::__shared_mutex_base *this)
{
  AMCP::Null::Object::~Object(this);

  JUMPOUT(0x1C1859840);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Level_Control>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::Null::Level_Control>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FC68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Null::Level_Control>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F146FC68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMCP::Null::Boolean_Control::do_set_property(AMCP::Null::Boolean_Control *this, int a2, const AMCP::Address *a3, const AMCP::Thing *a4)
{
  if (*(_DWORD *)a3 == 1650685548)
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, *((CFDictionaryRef *)this + 6));
    AMCP::make_description_from_thing((AMCP *)&v18, a4);
    uint64_t v8 = v18;
    if (v18 || !CFBooleanGetTypeID())
    {
      v7.i64[0] = 0x676C6F626263766CLL;
      uint64_t v15 = 0x676C6F626263766CLL;
      int v16 = 0;
      AMCP::Address::to_string(&__p, (unsigned int *)&v15, v7);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (p_p)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          CFIndex size = __p.__r_.__value_.__l.__size_;
        }
        CFStringRef v11 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
        if (!v11)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(MutableCopy, v11, v8);
        CFRelease(v11);
      }
      else
      {
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(MutableCopy, 0, v8);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&__p, MutableCopy);
      (*(void (**)(AMCP::Null::Boolean_Control *, std::string *))(*(void *)this + 24))(this, &__p);
      if (__p.__r_.__value_.__r.__words[0]) {
        CFRelease(__p.__r_.__value_.__l.__data_);
      }
      AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*((void *)this + 1) + 32), *((_DWORD *)this + 22));
      if (v8) {
        CFRelease(v8);
      }
      uint64_t v13 = 257;
      if (!MutableCopy) {
        return v13;
      }
    }
    else
    {
      uint64_t v13 = 1;
      if (!MutableCopy) {
        return v13;
      }
    }
    CFRelease(MutableCopy);
    return v13;
  }

  return AMCP::Null::Object::do_set_property(this, a2, a3, a4);
}

void sub_1BAD48E60(void *a1)
{
}

void AMCP::Null::Boolean_Control::populate_core(AMCP::Null::Boolean_Control *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  AMCP::Null::Control::populate_core((CFDictionaryRef *)this, a2, a3);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v25, *((void *)this + 3), *((std::__shared_weak_count **)this + 4));
  v24[0] = 0;
  v24[40] = 0;
  uint64_t v6 = v25;
  float v5 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  strcpy((char *)v27, "lvcbbolg");
  BYTE1(v27[2]) = 0;
  HIWORD(v27[2]) = 0;
  int v35 = 0;
  memset(v34, 0, sizeof(v34));
  if (!*((void *)this + 6))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AMCP::Address::to_string((std::string *)__p, v27, (int16x8_t)0);
  if ((SBYTE7(v38) & 0x80u) == 0) {
    int16x8_t v7 = __p;
  }
  else {
    int16x8_t v7 = (void **)__p[0];
  }
  if (v7)
  {
    if ((SBYTE7(v38) & 0x80u) == 0) {
      CFIndex v8 = BYTE7(v38);
    }
    else {
      CFIndex v8 = (CFIndex)__p[1];
    }
    CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)v7, v8, 0x8000100u, 0);
    if (!v9)
    {
      int16x8_t v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v22, "Could not construct");
      __cxa_throw(v22, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v32, *((CFDictionaryRef *)this + 6), v9);
    CFRelease(v9);
  }
  else
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::TypeRef,applesauce::CF::StringRef>((uint64_t)&v32, *((CFDictionaryRef *)this + 6), 0);
  }
  if (SBYTE7(v38) < 0) {
    operator delete(__p[0]);
  }
  if (v33)
  {
    AMCP::make_thing_from_description((AMCP *)__p, &v32);
    AMCP::swap((AMCP::Thing *)__p, (AMCP::Thing *)v34, v10);
    if (v39) {
      v39(0, (uint64_t)__p, 0, 0);
    }
  }
  if (v35)
  {
    uint64_t v23 = *(void *)&v27[1];
    int v31 = 0;
    memset(v30, 0, sizeof(v30));
    v35(1, v34, v30, 0);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(v36[0]) = 1650685548;
    *(void *)((char *)v36 + 4) = v23;
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v28, SHIDWORD(v23), v36[0]);
    uint64_t v11 = v28;
    unint64_t v12 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    long long v42 = 0u;
    long long v43 = 0u;
    unint64_t v44 = 0;
    if (v31) {
      v31(2, v30, &v42, 0);
    }
    *((void *)&v50 + 1) = 0;
    uint64_t v13 = (char *)operator new(0x30uLL);
    *(void *)uint64_t v13 = &unk_1F146F678;
    *(_OWORD *)(v13 + 8) = 0u;
    *(_OWORD *)(v13 + 24) = 0u;
    *((void *)v13 + 5) = 0;
    if (v44) {
      v44(2, &v42, v13 + 8, 0);
    }
    *((void *)&v50 + 1) = v13;
    *(_OWORD *)std::string __p = 0u;
    long long v38 = 0u;
    char v39 = 0;
    std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v49);
    char v39 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v11, v12, (AMCP *)__p);
    if (v39) {
      v39(0, (uint64_t)__p, 0, 0);
    }
    std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](&v49);
    if (v44) {
      v44(0, &v42, 0, 0);
    }
    AMCP::Core::Operation_Utilities::add_specific_property_getter<BOOL>(v11);
    unint64_t v14 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
    *((void *)&v43 + 1) = 0;
    uint64_t v15 = operator new(0x28uLL);
    *uint64_t v15 = &unk_1F146F6F8;
    v15[1] = v6;
    uint64_t v15[2] = v5;
    void v15[3] = 0x676C6F626263766CLL;
    *((_DWORD *)v15 + 8) = HIDWORD(v23);
    *((void *)&v43 + 1) = v15;
    *(_OWORD *)std::string __p = 0u;
    long long v38 = 0u;
    char v39 = 0;
    std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v42);
    char v39 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v11, v14, (AMCP *)__p);
    if (v39) {
      v39(0, (uint64_t)__p, 0, 0);
    }
    int v16 = std::__function::__value_func<void ()(AMCP::Thing const&)>::~__value_func[abi:ne180100](&v42);
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)v16, v11);
    uint64_t v45 = *(void *)(v11 + 40);
    int v46 = *(_DWORD *)(v11 + 48);
    unint64_t v17 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
    long long v18 = v42;
    long long v42 = 0uLL;
    *(_OWORD *)std::string __p = v18;
    long long v38 = v43;
    LODWORD(v39) = v44;
    if (*((void *)&v43 + 1))
    {
      unint64_t v19 = *(void *)(v43 + 8);
      if ((*((void *)&v18 + 1) & (*((void *)&v18 + 1) - 1)) != 0)
      {
        if (v19 >= *((void *)&v18 + 1)) {
          v19 %= *((void *)&v18 + 1);
        }
      }
      else
      {
        v19 &= *((void *)&v18 + 1) - 1;
      }
      *(void *)(v18 + 8 * v19) = &v38;
      long long v43 = 0uLL;
    }
    uint64_t v40 = v45;
    int v41 = v46;
    uint64_t v48 = 0;
    std::runtime_error v20 = operator new(0x40uLL);
    *std::runtime_error v20 = &unk_1F146F778;
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v20 + 1), (uint64_t *)__p);
    void v20[6] = v40;
    *((_DWORD *)v20 + 14) = v41;
    uint64_t v48 = v20;
    long long v49 = 0u;
    long long v50 = 0u;
    CFNumberRef v51 = 0;
    std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)&v49, (uint64_t)v47);
    CFNumberRef v51 = AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v11, v17, (AMCP *)&v49);
    if (v51) {
      v51(0, (uint64_t)&v49, 0, 0);
    }
    std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:ne180100](v47);
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)__p);
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v42);
    if (v31) {
      v31(0, v30, 0, 0);
    }
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v28 = 0;
    int16x8_t v29 = 0;
  }
  std::__optional_destruct_base<applesauce::CF::TypeRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v32);
  if (v35) {
    v35(0, v34, 0, 0);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v11) {
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v11 + 40), &v28);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  std::__optional_destruct_base<AMCP::Thing,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v24);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
}

void sub_1BAD494A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities28add_specific_property_setterIbEEvRNS0_9OperationEEUlRKbE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::operator()(uint64_t a1, unsigned char *a2)
{
  memset(v3, 0, sizeof(v3));
  LOBYTE(v3[0]) = *a2;
  uint64_t v4 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
  uint64_t result = AMCP::Core::Operation::call_function<void,AMCP::Thing const&>((void *)(a1 + 8), (uint64_t)v3);
  if (v4) {
    return ((uint64_t (*)(void, _OWORD *, void, void))v4)(0, v3, 0, 0);
  }
  return result;
}

void sub_1BAD495E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(void, uint64_t *, void, void))
{
  if (a13) {
    a13(0, &a9, 0, 0);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F146F778;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F146F778;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAD4971C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146F778;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_specific_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146F778;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1650685548EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlRKSI_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(unsigned int **)(a1 + 16);
  if (!v3
    || (uint64_t v3 = (unsigned int *)std::__shared_weak_count::lock((std::__shared_weak_count *)v3),
        (float v5 = (std::__shared_weak_count *)v3) == 0)
    || (uint64_t v3 = *(unsigned int **)(a1 + 8)) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int16x8_t v7 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      CFIndex v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)int16x8_t v29 = 2080;
      *(void *)&v29[2] = "Null_Object.cpp";
      __int16 v30 = 1024;
      int v31 = 59;
      __int16 v32 = 2080;
      *(void *)char v33 = "object_ptr.operator BOOL() == false";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no model object", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v20, "no model object");
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int16x8_t v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v33[6] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    int v35 = 59;
    std::vector<void *>::vector(&v15);
    int v10 = backtrace((void **)v15, (*((void *)&v15 + 1) - (void)v15) >> 3);
    std::vector<void *>::resize((char **)&v15, v10);
    unint64_t v17 = &unk_1F148AA90;
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(unsigned int *, void, uint64_t, uint64_t))(*(void *)v3 + 40))(v3, v3[22], a1 + 24, a2);
  if (!(_BYTE)v6)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      unint64_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)int16x8_t v29 = 2080;
      *(void *)&v29[2] = "Null_Object.cpp";
      __int16 v30 = 1024;
      int v31 = 61;
      __int16 v32 = 2080;
      *(void *)char v33 = "was_handled == Object::Was_Handled::no";
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s not handled", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v20, "not handled");
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int16x8_t v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v33[6] = "auto AMCP::Null::make_settable_property(Object_Ptr, const Address &, const CF::Dictionary &, co"
                         "nst std::optional<Thing> &)::(anonymous class)::operator()(const Thing &) const";
    uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Null/Null_Object.cpp";
    int v35 = 61;
    std::vector<void *>::vector(&v15);
    int v14 = backtrace((void **)v15, (*((void *)&v15 + 1) - (void)v15) >> 3);
    std::vector<void *>::resize((char **)&v15, v14);
    unint64_t v17 = &unk_1F148AA90;
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1BAD49EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, std::runtime_error a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,uint64_t a29)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  float v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = &unk_1F146F6F8;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  double result = *(double *)(a1 + 24);
  *(double *)(a2 + 24) = result;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  return result;
}

double std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (double *)operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)uint64_t v2 = &unk_1F146F6F8;
  *((void *)v2 + 1) = v4;
  *((void *)v2 + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  double result = *(double *)(a1 + 24);
  v2[3] = result;
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146F6F8;
  float v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F146F6F8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Null::make_settable_property<1650685548u>(std::shared_ptr<AMCP::Null::Object>,AMCP::Address const&,applesauce::CF::DictionaryRef const&,std::optional<AMCP::Thing> const&)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4NullL22make_settable_propertyILj1650685548EEENSt3__110shared_ptrINS_4Core9OperationEEENS3_INS0_6ObjectEEERKNS_7AddressERKN10applesauce2CF13DictionaryRefERKNS2_8optionalINS_5ThingEEEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}